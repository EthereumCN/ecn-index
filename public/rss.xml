<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ethereum Community Network]]></title><description><![CDATA[以太坊——全球的、开源的去中心化应用平台。DeFi？NFT？游戏？虚拟世界？每一个人都可以成为以太坊的开发者和用户！]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 03 Jul 2021 10:47:32 GMT</lastBuildDate><item><title><![CDATA[信标链验证者奖励]]></title><description><![CDATA[给不同情况下的信标链验证者奖励建模，详析奖励为什么、与会有怎么样的变化。]]></description><link>https://www.ethereum.cn/Eth2/beacon-chain-validator-rewards</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/beacon-chain-validator-rewards</guid><pubDate>Sat, 03 Jul 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [pintail.xyz](https://pintail.xyz/posts/beacon-chain-validator-rewards/)

&lt;br/&gt;

# 我可以赚多少？

![jpg](https://i.ibb.co/KsTnPM3/cookie-the-pom-gy-SMaoc-Sdqs-unsplash.jpg)

以太坊权益共识机制的核心部分于 2020 年 12 月启动了，最终交付了从工作量证明过渡的第一阶段——这是[在 2014](https://blog.ethereum.org/2014/07/05/stake/)年就提出的愿景，比以太坊主网上线早了整整一年。在以太坊的权益共识机制里，区块链的安全由验证者来提供，他们需要存入 32 个 ETH 作为保证金，且负责对新的区块链（即信标链) 状态达成共识。他们诚实履行职责的话会得到奖励，失职的话则会遭受相应的惩罚。如果验证者被证明有恶意行为，他们还会受到严重的惩罚，即罚没。

与工作量证明型区块链的区块奖励相比，这些验证者的奖励与惩罚会相对复杂一点。尽管有一些优秀资源，例如 [beaconcha.in](https://beaconcha.in/)，可以帮助验证者更好了解他们能赚多少，但并没有明确解释是怎么来的。本文将尝试给验证者解释清楚他们可以赚多少，以及收益差异是怎么来的。

读者可能已经看过运行一个验证者节点的“APR (年化率）估值”，比如在权益证明 [launchpad](https://launchpad.ethereum.org/)上的图表，并好奇这些数值是否现实——这些数值到底怎么来的？事实上，目前所有的 APR 估值都是基于一系列的假设 (通常没有说明)，有些估值甚至用的是旧版本的信标链规范。首先，让我们看一下如果所有验证者都完美参与的话，验证者可以赚取多少。我将依据 Ben Edgington 的[注释规范](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain)来做预估。请注意：我们将使用 2020 年 12 月信标链上线所用的主网规范。即将要进行的 [Altair 信标链分叉](https://blog.ethereum.org/2021/03/24/finalized-no-24/)将对验证者奖励和惩罚进行完善。



&lt;br/&gt;

# 可获得的奖励

以太坊验证者参与网络的每个 epoch (6.4 分钟) 都会获得奖励。他们收到的奖励是 `base_reward` (基础奖励) 的倍数。信标链有三方面的值需要投票，每个验证者对其中一个当前值投了正确的票 (或用行话说，做了证明) 就会得到一份  `base_reward`。我会把这三项奖励组合起来称为&quot;正确率奖励 (accuracy reward)&quot;。如果他们的投票 (证明) 马上被打包到信标链区块里，他们还会有第四项奖励——打包奖励 (inclusion reward)。因此，一个验证者在每个 epoch 里可获得的最高奖励是 `4 * base_reward`。为了搞清楚验证者可赚取多少，那么我们需要了解 `base_reward` 是如何确定的。

`base_reward`的水平是由网络里的活跃验证者数决定的，然后调整为激励合适规模的验证者集。我们希望激励足够多的验证者加入到验证者集里，而不需要支出超过必要的发行量。如果没有那么多的验证者，协议需要提供更高得回报，以鼓励更多验证者加入。但是，如果已经有大量的验证者了，协议可以支出更少，节省发行量。信标链计算这点的函数是一个平方根倒数——也就是说，奖励水平是由除以当前质押的 ETH 数的平方根得出的 (选择使用平方根倒数关系的原因在 Vitalik Buterin 的[设计原理](https://notes.ethereum.org/@vbuterin/rkhCgQteN?type=view#Base-rewards)文件中有解释)

根据注释规范：

```Powershell
base_reward = effective_balance * BASE_REWARD_FACTOR // integer_squareroot(total_balance) // BASE_REWARDS_PER_EPOCH
```

规范就是用上面的公式来计算每个验证者的 `base_reward`，以 Gwei (=10-9 ETH) 为单位，这些术语代表的意义如下：

|  术语                                          | 意义                                                 |
| :------------------------------------------------- | :----------------------------------------------------------- |
| `effective_balance` （有效余额）                   | 每个验证者余额的 ETH 整数值 (以 Gwei 为单位)。他的最大值为 32 × 10^9。 |
| `BASE_REWARD_FACTOR` （基础奖励系数）              | eth2 规范中有一个常量值为 64，这是用于调整 ETH 整体发行量的系数——这个值设为 64 的原因在这个 [PR](https://github.com/ethereum/eth2.0-specs/pull/971) 里有给出。 |
| `total_balance` （总余额）                         | 所有活跃验证者的 `effective_balance` 总额。 |
| `BASE_REWARDS_PER_EPOCH` （每个 epoch 的基础奖励） | 这是值为 4 的常量，对应的是每个验证者在每个 epoch 里获得的 4 项 `base_reward`。 |


在理想情况下，一切都会简化，因为所有验证者的有效余额都是 32 个 ETH。因此， `n`  个验证者的理想基础奖励为：

```
base_reward = 512e9 // integer_squareroot(n * 32e9)
```

(再次提醒，在信标链规范里，计算单位是 Gwei。我们可以除以 10^9 来换算成 ETH)

&lt;br/&gt;

# 理想情况

根据上面的信息，如果所有验证者都完美参与 (即验证者在每个 epoch 里获得 `4*base_reward`，我们可以计算可得奖励的最大值，然后用它来乘一年的 epoch 数，就可以算出一年的理想奖励金额。这就是一年的秒数 ((31556952) 除以一个 epoch 的秒数 (384)，得出每年有接近 82180 个 epoch。每个验证者每年得到的理想奖励如下图，由关于质押的总 ETH 的函数得到。

输入1 

```Powershell
# define annualised base reward (measured in ETH) for n validators
# assuming all validators have an effective balance of 32 ETH
import math

EPOCHS_PER_YEAR = 82180

def annualised_base_reward(n):
    return EPOCHS_PER_YEAR * 512 / math.sqrt(n * 32e9)
```

 输入 2

```Powershell
# plot ideal ETH staking return

import matplotlib.pyplot as plt

n_validators = [n for n in range(524288//32,int(10e6)//32,3200)]
ideal_reward = [4 * annualised_base_reward(n) for n in n_validators]

fig = plt.figure(figsize=(12, 8))

ax1=fig.add_subplot(111, label=&quot;1&quot;)
ax2=fig.add_subplot(111, label=&quot;2&quot;, frame_on=False)

ax1.plot(n_validators, ideal_reward)
ax2.plot([n * 32e-6 for n in n_validators], [100 * r / 32 for r in ideal_reward])

ax1.set_xlabel(&apos;Number of validators&apos;)
ax1.set_ylabel(&apos;Ideal annual per-validator reward (ETH)&apos;)

ax2.set_title(&apos;Ideal annual validator returns&apos;)
ax2.xaxis.tick_top()
ax2.yaxis.tick_right()
ax2.xaxis.set_label_position(&apos;top&apos;) 
ax2.yaxis.set_label_position(&apos;right&apos;) 
ax2.set_xlabel(&apos;Total ETH staked (millions)&apos;)
ax2.set_ylabel(&apos;Annual yield on 32 ETH deposit (%)&apos;);
```

![png](https://i.ibb.co/9cqYDkb/beacon-chain-validator-rewards-2-0.png)

现将图中的一些数值制成如下列表，以供参考：

输入 3

```Powershell
# tabulate a few values for validator return

import pandas as pd

n_validators = [524288 // 32, 50000, 100000, 150000, 200000, 250000, 300000, 10000000 // 32]
staked = [32 * n for n in n_validators]
ideal_reward = [4 * annualised_base_reward(n) for n in n_validators]
annual_yield = [100 * r / 32 for r in ideal_reward]
data = {
    &apos;n_validators&apos;: n_validators,
    &apos;total_staked (ETH)&apos;: staked,
    &apos;annual_reward (ETH)&apos;: ideal_reward,
    &apos;annual_yield (%)&apos;: annual_yield
}

df = pd.DataFrame(data)

pd.options.display.float_format = &apos;{:,.2f}&apos;.format
df.set_index(&apos;n_validators&apos;)
```

| n_validators (验证者数) | total_staked （质押的总额）(ETH) | annual_reward （一年的奖励） (ETH) | annual_yield （年收益率）(%) |
| :---------------------- | -------------------------------: | ---------------------------------: | ---------------------------: |
| 16384                   |                           524288 |                               7.35 |                        22.97 |
| 50000                   |                          1600000 |                               4.21 |                        13.15 |
| 100000                  |                          3200000 |                               2.98 |                         9.30 |
| 150000                  |                          4800000 |                               2.43 |                         7.59 |
| 200000                  |                          6400000 |                               2.10 |                         6.57 |
| 250000                  |                          8000000 |                               1.88 |                         5.88 |
| 300000                  |                          9600000 |                               1.72 |                         5.37 |
| 312500                  |                         10000000 |                               1.68 |                         5.26 |

&lt;br/&gt;

# 区块奖励

上面的图和表格给了我们一个高度理想化的版本，即当所有验证者都完美参与，所有奖励都平均分配的情况。但是，这个版本其实漏掉了一项重要组成部分，即信标链的区块奖励 (block reward)。

区块奖励并不改变支付给验证者的 ETH 总额，但它意味着部分可得奖励会分配给出块者 (block producer)。负责出块的是每个 slot 里 (一个 slot 是 12 秒，一个 epoch 里有 32 个 slot) 随机挑选的一个验证者。该区块是由其他验证者提交的信标链证明组成的，且出块者获得的奖励占区块证明全部打包奖励的一部分。这意味着出块者有动力将他们能收集到的所有有效证明都打包到区块，以最大化他们的以及所有提供他们打包证明的验证者的收益。

在信标链规范中，给出块者的打包奖励比例由一个叫 `PROPOSER_REWARD_QUOTIENT` （提议者奖励商) 的常数决定，它的值是 8。也就是说，⅛ 的打包奖励 (相当于每个 epoch 全部奖励的 ¹⁄₃₂) 是给出块者的，⅞ 是给所作证明被打包到区块的验证者的。

由于每个验证者被选出做区块提议的机会是均等的，从长远来说，奖励应该也是均等的，与上图相符。但在任何有限的时间里，验证者获得的奖励会很不一样，因为有些验证者运气比较好，获得比平均水平更多机会提议区块，有些则运气比较差，提议区块的机会更少。

为了计算出运气因素在区块提议频率中的重要性，我们可以应用一些基本的统计数据。每个验证者被选出做提议的机会是均等的——每年 `31556952 / 12 = 2629746` 个 slot。如果有 100,000 名验证者，被选出做提议的机会是 10-5 次。每个验证者得到区块提议机会的数量将由二项式分布决定。

下图绘制的概率质量函数图直观地呈现了验证者可期望有多少区块提议机会：

输入 4

```Powershell
# plot pdf

from scipy.stats import binom

x = [el for el in range(51)]
y = binom.pmf(x, 31556952/12, 1e-5)

fig, ax = plt.subplots(figsize=(12, 8))
ax.bar(x, y)
ax.set_xlim(xmin=0)
ax.set_ylim(ymin=0)
ax.set_title(&apos;Probability mass function (100,000 validators) — number of block proposal opportunities per year&apos;)
ax.set_xlabel(&apos;Number of block proposal opportunities in a year&apos;)
ax.set_ylabel(&apos;Probability&apos;)

lmu = binom.ppf([0.01, 0.5, 0.99],31556952/12, 1e-5)
avg = 31556952 / (12 * 100000)
print(f&quot;With 100,000 validators, the mean number of blocks proposed per validator per year is {avg:.2f}\n&quot;)
print(f&quot;The unluckiest 1% of validators will have the opportunity to produce at most {int(lmu[0])} blocks in a year&quot;)
print(f&quot;The median (average) validator will have the opportunity to produce {int(lmu[1])} blocks in a year&quot;)
print(f&quot;The luckiest 1% of validators will have the opportunity to produce at least {int(lmu[2])} blocks in a year&quot;)
```

```Powershell
output:
    With 100,000 validators, the mean number of blocks proposed per validator per year is 26.30
    
    The unluckiest 1% of validators will have the opportunity to produce at most 15 blocks in a year
    The median (average) validator will have the opportunity to produce 26 blocks in a year
    The luckiest 1% of validators will have the opportunity to produce at least 39 blocks in a year
    
 输出:
    如果有 100,000 个验证者，每个验证者每年平均获得 26.30 次提议区块的机会
    运气最差的 1% 验证者每年获得的提议区块机会最多 15 次
    验证者平均每年获得的提议区块机会是 26 次
    运气最好的 1% 验证者每年获得提议区块的机会是 39 次
```

![png](https://i.ibb.co/XkxwBzB/beacon-chain-validator-rewards-6-1.png)

因此，我们可以看到，仅基于运气的话每个验证者获得的提议区块机会有相当大的差异。在一年里，运气最好的 1%验证者获得提议区块的机会是运气最差的 2 倍。在足够长的时间里，这个差异会被拉平。但是，随着验证者数量增加，提议区块的概率会降低，不均等的情况会更严重。

为了显示这种效应对验证者奖励的影响，我重新计算了验证者收益图，但现在我将绘制运气最好的 1%和最差的 1%的线条。从另一个角度来看的话，这代表 98% 的验证者的年收益是在这两条线之间。

输入 5

```Powershell
# plot ideal ETH staking return with interpercentile range

n_validators = [n for n in range(50000,int(10e6)//32,1000)]
full_reward = [4 * annualised_base_reward(n) for n in n_validators]
attestation_reward = [0.75 * f for f in full_reward]
inclusion_reward = [0.25 * f for f in full_reward]
p = [1/n for n in n_validators]

# calculate lower and upper quartiles for block proposal opportunities
l_bpo = [int(binom.ppf(0.01,31556952/12, 1/n)) for n in n_validators]
mean_bpo = [float(binom.mean(31556952/12, 1/n)) for n in n_validators]
u_bpo = [int(binom.ppf(0.99,31556952/12, 1/n)) for n in n_validators]

# calculate lower and upper quartiles for ideal reward, based on block proposal opportunties
l_reward, u_reward = [], []
for i in range(len(full_reward)):
    r_att = attestation_reward[i]
    r_inc = inclusion_reward[i]
    l_reward.append(r_att + r_inc * ((7/8) + (1/8) * l_bpo[i] / mean_bpo[i]))
    u_reward.append(r_att + r_inc * ((7/8) + (1/8) * u_bpo[i] / mean_bpo[i]))

fig, ax = plt.subplots(figsize=(12, 8))

ax.plot(n_validators, u_reward, label=&apos;Luckiest 1% of validators&apos;)
ax.plot(n_validators, l_reward, label=&apos;Unluckiest 1% of validators&apos;)

ax.set_xlabel(&apos;Number of validators&apos;)
ax.set_ylabel(&apos;Ideal annual per-validator reward (ETH)&apos;)
ax.set_title(&apos;Ideal annual validator rewards&apos;)
leg = ax.legend()

ratio0 = 100 * (u_reward[0] / full_reward[0] - 1)
ratio1 = 100 * (1 - l_reward[0] / full_reward[0])
print(f&quot;With 50,000 validators:\nthe luckiest 1% of validators receive {ratio0:.1f}% greater reward than average&quot;
     f&quot;\nthe unluckiest 1% of validators receive {ratio1:.1f}% smaller reward than average&quot;)

ratio0 = 100 * (u_reward[50] / full_reward[50] - 1)
ratio1 = 100 * (1 - l_reward[50] / full_reward[50])
print(f&quot;\nWith 100,000 validators:\nthe luckiest 1% of validators receive {ratio0:.1f}% greater reward than average&quot;
     f&quot;\nthe unluckiest 1% of validators receive {ratio1:.1f}% smaller reward than average&quot;)

ratio0 = 100 * (u_reward[150] / full_reward[150] - 1)
ratio1 = 100 * (1 - l_reward[150] / full_reward[150])
print(f&quot;\nWith 200,000 validators:\nthe luckiest 1% of validators receive {ratio0:.1f}% greater reward than average&quot;
     f&quot;\nthe unluckiest 1% of validators receive {ratio1:.1f}% smaller reward than average&quot;)
```

```
output 
    With 50,000 validators:
    the luckiest 1% of validators receive 1.0% greater reward than average
    the unluckiest 1% of validators receive 1.0% smaller reward than average
    
    With 100,000 validators:
    the luckiest 1% of validators receive 1.5% greater reward than average
    the unluckiest 1% of validators receive 1.3% smaller reward than average

    
    With 200,000 validators:
    the luckiest 1% of validators receive 2.1% greater reward than average
    the unluckiest 1% of validators receive 1.7% smaller reward than average

输出:

    当有 50,000 个验证者：
    运气最好的 1% 验证者获得的奖励比平均水平高 1.0%
    运气最差的 1% 验证者获得的奖励比平均水平低 1.0%

    当有 100,000 个验证者：
    运气最好的 1% 验证者获得的奖励比平均水平高 1.5%
    运气最差的 1% 验证者获得的奖励比平均水平低 1.3%

    当有 200,000 个验证者：
    运气最好的 1% 验证者获得的奖励比平均水平高 2.1%
    运气最差的 1% 验证者获得的奖励比平均水平低 1.7%
```

![png](https://i.ibb.co/b6Br03t/beacon-chain-validator-rewards-8-1.png)


从上面的图表和统计数据可以看出，在一年的时间里，奖励的变化幅度可能有几个百分点。请记住，即使在理想情况下也是这样，即每个验证者都完美履行他们的职责。随着验证者集变大，这种影响会更明显，因为在一个 slot 里每个验证者的概率都降低了。

虽然从验证者的投资风险角度来看，这种水平的变化也许并不令人担忧，但我们在深入研究验证者在网络中的实际表现时，这些变化都值得我们关注。表现上的微小差异可以很容易被分配给验证者区块提议机会的随机变化所吞噬——即使是在整整一年的时间里，就像这里的模型。

&lt;br/&gt;

# 对非完美参与情况建模

到这里为止，我们的模型都假设所有验证者都完美履行他们的职责。这使我们可以根据上文解释的出块机会差异对可得奖励设一个上限。但是，为了建立更接近现实世界的奖励模型，我们需要考虑不那么完美参与的验证者带来的影响。即使你完美运行你的验证者节点，保持一直在线，你的奖励仍然会因为网络的其他验证者节点无法做到完美而受影响。信标链激励机制的设计理念是：如果整个网络的表现都被优化了，那么给每个人的奖励都会最大化。这有助于抑制恶意行为 (例如试图让其他验证者离线以最大化自己的奖励)，但这的确意味着即使自身没做错什么，个人质押者的奖励也会被减少。

有很多原因可以导致验证者无法生成证明、广播证明到网络、出块、或打包区块到网络。用所有这些因素来建模是非常难的，因此我们将尝试简单一点的。我们假设两种情况：验证者保持在线且完美履行职责，和验证者一直离线且完全不履行职责。在我们的模型里，网络表现水平可以用一个简单数字——参与率来体现，参与率对应的是在线上的验证者比例。

## 完美验证者在不完美网络中的情况

想象一个完美验证者在一个不完美的验证者集中运行，有两个机制可能会减少验证者获得的奖励：

1. 对于准确率的奖励，奖励与投相同票的活跃验证者成比例缩放。因此，如果 99% 的在线验证者都投了正确的票，奖励会按0.99缩放。
2. 如果我们的完美验证者所作的证明被打包晚了——例如，由于在我们做出证明后的第一个 slot 的出块者因离线而没有构建一个区块——那么打包奖励会与打包延迟时间呈反比递减。（即，它的比例会以1/2，然后是 1/3，然后是 1/4 这样递减下去）


因此，很容易算出，如果在一个 epoch 里 99% 的网络验证者都正确参与了，对我们完美验证者的正确率奖励的影响是比理想情况下减少 1%。但打包奖励会相对复杂一点。这归结于运气——如果本应在下一个 slot 打包了我们的证明的出块者碰巧是离线的 1%验证者的一员，那么我们的打包奖励会被砍半。如果我们特别运气不好，这种情况连续发生两次，那么我们的打包奖励会减少到1/3。

通过一个考虑了每种可能的延迟情况的等比数列之和来计算预期 (即平均) 的打包奖励 (这在之前 [Herman Junge 的信标链建模](https://github.com/hermanjunge/eth2-reward-simulation/blob/master/assumptions.md#attester-incentives)里已经解释过)。如果 B 代表 `base_reward`，P 代表参与率，我们可以算出预期奖励：



![formula](https://i.ibb.co/fvp6GBQ/formula.png)


请注意，一个证明最晚可被打包到区块链的时间是 32 个 slot的延迟。因此，正确来说，我们应该把上面公式中的总项数设为 32 而不是无穷大。但是，如果参与率 P 很高 (例如像当前网络的 99%)，那么求和到无穷大而不是 32 造成的误差是非常小的。

现在，让我们绘制一个完美验证者在不同参与率情况下的预期奖励线条，请记住，在信标链创世后的四个月里，参与率[几乎没有低于 96%](https://beaconcha.in/charts/participation_rate)。

输入 6

```Powershell
# plot reward for perfect validator in several participation level contexts

participation_rate = [1,0.99,0.98,0.97,0.96]

n_validators = [n for n in range(50000,int(10e6)//32,1000)]
base_reward = [annualised_base_reward(n) for n in n_validators]

fig, ax = plt.subplots(figsize=(12, 8))

r_100000 = []
for P in participation_rate:
    accuracy_rewards = [P * 3 * r for r in base_reward]
    if P &lt; 1:
        inclusion_reward = [(7/8) * r * P * math.log(P) / (P-1) for r in base_reward]
    else:
        inclusion_reward = [(7/8) * r for r in base_reward]
        
    block_reward = [(1/8) * r * P for r in base_reward]
    total_reward = [accuracy_rewards[i] + inclusion_reward[i] + block_reward[i]
                    for i in range(len(block_reward))]
    ax.plot(n_validators, total_reward, label=f&apos;P = {P:.2f}&apos;)
    r_100000.append(total_reward[50])
    
ax.set_xlabel(&apos;Number of validators&apos;)
ax.set_ylabel(&apos;Ideal annual per-validator reward (ETH)&apos;)
ax.set_title(&apos;Ideal annual validator rewards&apos;)
leg = ax.legend()

print(f&apos;at P = {participation_rate[1]:.2f}, rewards fall by {100 * (1 - r_100000[1] / r_100000[0]):.2f}%&apos;)
print(f&apos;at P = {participation_rate[2]:.2f}, rewards fall by {100 * (1 - r_100000[2] / r_100000[0]):.2f}%&apos;)
print(f&apos;at P = {participation_rate[3]:.2f}, rewards fall by {100 * (1 - r_100000[3] / r_100000[0]):.2f}%&apos;)
print(f&apos;at P = {participation_rate[4]:.2f}, rewards fall by {100 * (1 - r_100000[4] / r_100000[0]):.2f}%&apos;)
```

```
output 
    at P = 0.99, rewards fall by 0.89%
    at P = 0.98, rewards fall by 1.78%
    at P = 0.97, rewards fall by 2.68%
    at P = 0.96, rewards fall by 3.57%

输出:

    当 P = 0.99，奖励减少 0.89%
    当 P = 0.98，奖励减少 1.78%
    当 P = 0.97，奖励减少 2.68%
    当 P = 0.96，奖励减少 3.57%
```

![png](https://i.ibb.co/BrRTt4L/beacon-chain-validator-rewards-11-1.png)

如上图和数据所示，我们的完美验证者获得收益下降幅度稍小于总体的网络参与率。

## 不完美验证者在完美网络里情况

如果我们的验证者实际上会在某些时候是离线的，那么他们将会错失一些奖励，而且也会因为错过做证明而遭受惩罚。每个正确率奖励有相应的惩罚——提供错误证明，或完全没有提供证明，证明中不正确的部分都会受到对应一项 `base_reward` 的惩罚。这意味着，错失证明导致的惩罚是 `3 * base_reward`。为了了解这会有什么影响，设想一下你正在运行的验证者节点有时候会离线，但网络的其他所有验证者都表现完美。我们将忽略网络参与率实际上是低于 100% 这个事实，因为全网只有一个不完美验证者，而以完美网络来建模，尽管我们的验证者偶尔会离线。考虑到离线带来的惩罚，我们的收益会有什么影响？

作为一个完美验证者集的一部分，我们的验证者在线时预期会获得 `4 * base_reward`，离线时遭遇的惩罚是  `3 * base_reward` 。因此当用 B 代表 `base_reward`、U 代表在线时间时，可得出净奖励 R：


$$
R=4BU−3B(1−U) 

  =B(7U−3)R
$$


如果净奖励是 0，我们会得到：

U=3/7≈43


这意味着只要验证者的在线时间不低于 43%，他就能获得正的净奖励。

输入 7

```Powershell
# plot expected reward for imperfect validator/perfect network at various validator set sizes

n_validators = [50000, 100000, 150000, 200000, 250000, 300000]
uptime = [i / 100 for i in range(101)]

fig, ax = plt.subplots(figsize=(12, 8))
for n in n_validators:
    base_reward = annualised_base_reward(n)
    net_reward = []
    for u in uptime:
        rewards = 4 * u * base_reward
        penalties = 3 * (1 - u) * base_reward
        net_reward.append(rewards - penalties)

    ax.plot(range(101), net_reward, label=f&apos;n_validators = {n}&apos;)

ax.set_xlabel(&apos;Percentage uptime&apos;)
ax.set_ylabel(&apos;Annual net reward (ETH)&apos;)
ax.set_title(&apos;Expected annual net rewards against validator downtime\n&apos;
             &apos;(for an imperfect validator in a perfect validator set)&apos;)
leg = ax.legend()
```

![png](https://i.ibb.co/v4KmM9K/beacon-chain-validator-rewards-13-0.png)

&lt;br/&gt;

# 完整模型


把这些放在一起，我们就有了一个不完美验证者在一个不完美验证者集里运行的模型，其中 B 代表 `base_reward`、P 代表参与率、U 代表&quot;我们的&quot;验证者的在线时间，我们可以得出：

![imperfection](https://i.ibb.co/VHdw2XL/imperfection.png)



因此，例如如果你在一个有 100,000 个验证者、参与率为 99% 的网络里运行验证者节点，你的在线时间水平是 99%，你可以用这个模型来预估期望的净奖励：

输入8

```Powershell
# calculate annualised expected net reward for given parameters
base_reward = annualised_base_reward(100000)
participation = 0.99
uptime = 0.99
net_reward = 3 * base_reward * participation * uptime \
             - 3 * base_reward * (1 - participation)  \
             + (7/8) * base_reward * participation * uptime * math.log(participation) / (participation - 1) \
             + (1/8) * base_reward * participation * uptime

print(f&apos;Net annual reward = {net_reward:.2f} ETH ({100 * net_reward / 32:.2f}% return on 32 ETH stake)&apos;)
```

```
output:
    Net annual reward = 2.90 ETH (9.05% return on 32 ETH stake)

输出:
    年净奖励 = 2.90 ETH (质押 32 个 ETH 的回报率是 9.05%)
```


为了便于实验，请看[这个电子表格](https://docs.google.com/spreadsheets/d/1RjOKfdaZzez6t5l6FbwHVIEITK1zBbTJDPhOsiosqmw/edit?usp=sharing)，从中你可以看到不同的参与率、在线时间水平和验证者数对净奖励的影响。

但是，再提醒一次，这个预期净奖励并没有考虑运气这个因素。随着我们的模型变得越来越复杂，除了一个给定 slot 里分配给区块提议者的随机机会，还有上面公式里的其他因素是受制于机会的。例如，由于下一个 epoch 的区块提议者刚好处于离线状态，就有获得较少打包奖励的风险，或者因为当分配到做区块提议者时你的验证者节点刚好处于离线状态，就会有错失出块的机会。这些额外的因素将稍微增加模型给出的”预期“情况下净奖励的变化。

鉴于打包奖励的非线性特性，把所有因素都放在公式里，像我们得出区块提议者机会般得出概率分布是很难的。通过运行蒙特卡洛模拟 (即使用随机数生成器模拟大量验证者，然后绘制出他们的净奖励图表) 可以对概率分布有一个大概的了解，但在此之前，让我们先把我们的模型与网络的真实情况做对比吧...... 

&lt;br/&gt;

# 结语


这已经是文章最后了，恭喜你！希望这篇文章能帮你理解信标链的奖励是为什么和怎么样有所不同的——无论是当验证者完美履行职责时，还是当他们并没有那么可靠地履行职责时。

从这个模型中得到的一个关键启示是，尽管可得奖励会依据网络上活跃验证者数产生很大的变化，但少量的离线时间对其影响是有限的。事实上，我们的研究显示在理想的网络里，只要验证者的在线时间水平超过 43%，他们就能获利。我们不会期待最低在线时间水平会比我们今天观察到的信标链的水平 (通常参与率是大约 99%）高很多。如果你在考虑在家质押自己的 ETH，这应该能让你放心——即使是大型的网络或电力中断，也不会对你一年的获利产生重大影响。

&lt;br/&gt;

# 致谢


本文是在[Ethereum Foundation Staking Community Grant](https://blog.ethereum.org/2021/02/09/esp-staking-community-grantee-announcement/) 下写的，非常感谢[Lakshman Sankar](https://twitter.com/lakshmansankar)、[Barnabé Monnot](https://twitter.com/barnabemonnot) 和 [Jim McDonald](https://twitter.com/jgm) 的建议和反馈。图片由[Unsplash](https://unsplash.com/s/photos/computer?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)的[Cookie the Pom](https://unsplash.com/@cookiethepom?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)提供。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[深入分析 Arbitrum 的安全机制]]></title><description><![CDATA[为什么说 Arbitrum 植根于以太坊的安全性中，它将如何防御审查攻击]]></description><link>https://www.ethereum.cn/Layer2/optimistic-rollups-and-ethereums-layer-2-solutions-examining-arbitrums-security-mechanism</link><guid isPermaLink="false">https://www.ethereum.cn/Layer2/optimistic-rollups-and-ethereums-layer-2-solutions-examining-arbitrums-security-mechanism</guid><pubDate>Thu, 01 Jul 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [hackernoon.com](https://hackernoon.com/optimistic-rollups-and-ethereums-layer-2-solutions-examining-arbitrums-security-mechanism-to3v35hr)



Layer 2 扩容解决方案是当前以太坊社区热议的话题，也是整个区块链技术社区正在讨论的热门话题。基于 Optimistic Rollups 的 Arbitrum 是目前最具有吸引力的 Layer 2 扩容解决方案之一。它率先部署了主网 beta 版本，并获得了 Uniswap 和 Compound 等核心 DeFi 项目的支持。

对于打算从以太坊主网迁移至 Layer 2 的用户来说，他们最关心的一个问题就是 Layer 2 解决方案的安全机制如何。本文将深入探讨 Arbitrum 的安全机制，包括： Arbitrum 如何植根于以太坊的安全性中；为什么挑战期是七天；以及如何防御审查攻击。


### 植根于以太坊的安全性中

众所周知 Layer 2 解决方案与其他扩容解决方案相比，最大的一个优势就是其安全性依赖于以太坊主网的安全性。然而，大部分人可能都知道这个道理，但却不知道为什么。那么 Arbitrum 如何根植于以太坊的安全性中呢？

我们首先来回顾一下 Optimistic Rollup 解决方案的主要特点：

1. 在一个 Rollup 解决方案中，交易 (作为 calldata) 编写在 L1 上，但是其实际计算和合约的存储在 L2 上完成，以实现扩容。

2.验证者在 L1 上发布一个断言 (assertion)，可以理解为将所有交易和结果打包成一个 Rollup 区块，然后发送到 L1 的交易中。

3. Optimistic Rollup 之所以称为”乐观的“ rollup 解决方案，因为当一个断言发布时，其不包含保证其有效性的随附证明，即默认该断言有效。相反，届时会有一个时间窗口，而任何人都可以在这个时间内挑战该断言。如果挑战成功，那么此断言内的所有交易都将被撤回，并且提出断言的人会失去其保证金。如果挑战期到期且没人挑战成功，那么断言就会被最终确认。

在了解了这个解决方案之后，我们再从几个角度来思考 Arbitrum 是如何植根于以太坊的安全性的。


### 数据可用性

所有在 L2 上执行的交易首先会提交至在 L1 上运行的收件箱智能合约，然后作为 calldata 编写进 L1 中。任何人都可以利用该数据来检索回 L2 上的所有交易并将 L2 恢复到其原始状态。这些数据可用性通过 L1 得到保证，用户不必担心 L2 因出现故障而导致其损失 L2 上的资产。


### AnyTrust

AnyTrust 是 Rollup 协议的关键安全功能。这个功能允许任意诚实验证者确保交易在 L2 上正确地执行。无论有多少攻击者恶意阻止交易的进行，你或者你雇佣的任何人都能够强制确保交易的正确执行，而无需信任任何第三方。


### 紧急退出机制

Arbitrum 当前没有一个特定的紧急退出机制，但是有一系列安全机制来确保用户可以安全退出。

首先，数据可用性确保用户存储在 L2 上的资产和数据可以在任意时候从 L1 上恢复，并且永远不会丢失。

其次，任意用户都能向 L1 上的收件箱合约发送一个交易请求来强制退出。

最后，AnyTrust 机制确保用户可以强制 L2 正确地处理退出交易。

在以上三点中，用户不需要信任任意第三方，这充分地展示了 Arbitrum 植根于以太坊的安全性中，并且是去信任的。


### 为什么挑战期是七天

Arbitrum 是一个多轮交互的 Rollup 解决方案。这个解决方案首先会乐观地相信验证者做出的断言是有效的，而在挑战期其他验证者可能会对此提出质疑和挑战。在大多数情况下，不会有挑战提出，那么整个系统就可以更高效且成本更低。

显然，挑战期越长，整个系统就越安全，但同时用户体验也会更差 (因为用户需要等到挑战期结束之后才能退出)。那么我们是如何确定最佳的挑战时期呢？

Arbitrum 团队提出这种模型来计算最佳的挑战时期：

- 假设一个挑战时期等于 C 区块的长度，以及攻击者在 L2 上可以获得的最大值为 V。

则攻击者获得的预期价值为 V exp(-AC)。

注解：exp 为指数函数”e“，A 为某常数 A，AC 前的 ”-“ 符号表示 C 与预期收益成反比。

- 断言者需要保证其资产远超过攻击的资产价值以应对攻击。我们假设超过 10 倍，则断言者的成本为 10V exp(-AC)I。I 指的是资本利率。

- 我们假设某退出用户在挑战期被锁定的提款资产为 CWV (W 为小数，WV 是 L2 上总资产的一部分，每个时间点都会有 C 个未结束挑战的区块) 和用户的资产成本为 CWVI。

- 最佳的挑战期限应该设为断言者和提款用户的资产总成本最低的情况下。即取 C 的值时，10V exp(-AC)I+CWVI 最小。V 和 I 在两项中都出现，它不会影响最小值点，可以忽略。我们只需对 C 求导，将所得导数设为 0，并得到 C = ln(10A / W) / A。

![challenge](https://i.ibb.co/ZMyVYXb/challenge-period.jpg)

现在我们将一些合理的数字插入上述等式中，以获得一个大概的最佳挑战期限。

假设一个区块时间内的连续审查成功率高达 99.99%，即 A = -ln(0.99) = 0.01。

进一步假设每天提款为总值的 1%，并且每个区块的提款百分比约为 W=0.000002，基于出块时间为 15 秒的前提。

将这些代入公式中，我们得到的最佳挑战期限为 C = 62146 区块，即 10.79 天。这与 Arbitrum 团队最终选择的 7 天挑战期限非常接近。


### 如何防御审查攻击

在这一部分，我们讨论了 Arbitrum 如何防御四种主要的审查攻击：分叉攻击 (forking attacks)、回避攻击 (shunning attacks)、干扰攻击 (jamming attacks) 和快速攻击 (speed demon attacks)。

分叉攻击 (forking attacks)：矿工合谋 (或受贿) 丢弃包含正常挑战的区块，以便接受不包含挑战的替代链。

首先，由于挑战者的存在，一旦发生分叉攻击，难免会被某个挑战者发现。而当大家发现区块链中的挖矿算力垄断者 (这是分叉攻击的先决条件) 为了盈利而肆无忌惮地违反规则时，区块链本身就被摧毁了。此时，Arbitrum 是否采用挑战期设计模型还存在争议。

回避攻击 (shunning attacks)： 矿工们合谋 (或受贿) 忽略掉他们生产出的区块中的普通挑战。

我们假设垄断者控制了 90% 的挖矿算力，并且期限为 50 个区块。那么垄断者需要将 50 个连续的区块打包起来才能完成攻击。这个概率是 0.9 的 50 次方，也就是 0.5%。而实际挑战期限远不止 50 个区块，所以攻击成功的概率极小。在 Arbitrum 的设计中，攻击者在攻击失败时会支付巨额罚款，因此垄断者发起回避攻击是非常不划算的。


干扰攻击 (jamming attacks) ：攻击者发起”老式的拒绝服务攻击 (DoS)“ 来阻止任何一方发布任何交易 (不能发布包含挑战的交易)。

因为只要有一个正直的挑战者，攻击就会失败，所以攻击者必须阻止所有有可能的挑战者。如果有很多这样的挑战者，攻击将很难完成。更糟糕的是，任意利益相关的一方都可能雇佣一个沉默的监察者以作为备用计划。他们只在主要参与方太晚发布挑战或者在发布挑战时遇到了困难时才会介入。攻击者并不知道网络中是否有沉默的监察者，或者尽管知道他们存在，也不知道他们是谁，所有在这些监察者有实际行动之前，攻击者都无法向他们发起 DoS 攻击。


快速攻击 (speed demon attacks)：攻击者生成链上断言的速度十分快，以至于其他方不能在时间截止之前检查并且挑战所有断言。

Arbtirum 采取的应对方法是：限制创建断言的速率，以确保在任何时候检查未决断言和挑战其中一个断言所需的总工作量能够在协议的期限之内完成。具体来说，对 Rollup 链中的智能合约运作进程施加速度限制，因此即使有人能够快速生成大量断言，它最终也必须慢下来。

总之，我们不需要太担心分叉攻击。如果出现恶意挖矿算力垄断的情况，那么可以说这个区块链已经基本上变得没有吸引力了。Arbitrum 可以通过适当的设计或者实践来防御其他三种审查攻击。


### 序列器模式 (Sequencer Mode) 的优势和风险

Sequencer 模式是 Arbitrum 的一个可选功能，Offchain Labs 在主网的发布版本上运行唯一的 Sequencer 节点。

Sequencer 被赋予有限的权力来控制收件箱中每笔交易的排序，以保证用户的交易结果能够立即被确定，无需在以太坊上等待五分钟至区块被确认，甚至不需要像在以太坊一样等待 15 秒的出块时间。

同时，一个表现良好的 sequencer 可以有效地防御抢跑攻击。

因此，一个由 Offchain Labs 运营的中心化的、表现良好的 Sequencer 节点，对于项目的早期开发是非常有利的，并为其减少了很多麻烦。但是安全隐患也很明显 (虽然很难想象 Offchain Labs 会作恶，但也不排除这样的可能性)。Offchain Labs 承诺在技术成熟后立即切换到去中心化的、多个 Sequencer 节点的解决方案。

此外，收件箱也将一分为二，一个接受由 Sequencer 提交的交易，另一个则接受由常规聚合器或者用户提交的交易，这也为不信任中心化的 Sequencer 的用户提供了另一种选择。


ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[另一个状态友好的界地址方案]]></title><description><![CDATA[Vitalik 提出了适用于 state expiry 机制的地址方案]]></description><link>https://www.ethereum.cn/Eth1.x/alternative-bounded-state-friendly-address-scheme/</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1.x/alternative-bounded-state-friendly-address-scheme/</guid><pubDate>Wed, 30 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [ethresear.ch](https://ethresear.ch/t/alternative-bounded-state-friendly-address-scheme/8602)


译者按：本文需要读者对状态管理和 state expiry 机制作一定了解，以下为推荐阅读：

[以太坊状态管理诸提议](https://mp.weixin.qq.com/s/fEEHT3bmcqXEfqFCGiOpFg)

[状态膨胀和无状态性](https://mp.weixin.qq.com/s/lLOaplyoYL2dR6Bc7XYWJA)

[一份新的无状态以太坊路线图](https://mp.weixin.qq.com/s/iJCTOcYEsXXmFq-_P55qhg) 

[弱无状态性以及/或者状态保质期机制：即将到来](https://mp.weixin.qq.com/s/zeVmefqeBUN-QLx8-Q3auw) 

感谢 EthFans 的翻译


# 回顾：状态大小管理技术

为了防止以太坊的状态容量无止境地膨胀，我们需要用一些方法使旧状态“失活”,这样加入网络的节点就不再需要存储旧状态了。即使大多数的客户端都变成无状态，似乎也可以合理预见，最终这个系统会扩容到网络无法一直保证所有状态都可用的地步。有两个方法可以使旧状态失活：

1. 直接删掉，然后可以把它移到另外的默克尔树，这样关心该状态对象的人可以获取相应的默克尔分支，在未来某个时候用它来激活该状态。
2. 不把对象移出树结构；相反，只在树的该位置标记“失活”，这样节点就不会存储它 (且协议也不会要求它们这样做)。通过发送一个提供默克尔证明 (即见证数据) 的事务来访问该状态，失活的对象就可以重新被访问了。

方法 (1) 对应于“经典的存储租金方案”，方法 (2) 对应于传统“无状态客户端”的最简单延伸——旧状态可以被遗忘的模型。这两种方法都允许关心特定状态对象的个人追踪默克尔分支，这样随后如果那些状态对象失活了它们可以用来激活这些对象。然而，这两种方法都是有明显问题的。

当要在某个已失效合约的同一个地址上再创建合约时，方法 (1) 会出现一些极端情况。那就是，如果一个合约在地址 A 上创建了，然后已经失效了，那么在地址 A 上创建这个合约的事务会被重新执行，这样会在地址 A 上创建一个新对象，这会影响原始对象的激活。另一种情况是当在地址 A 上创建了一个对象，然后经历失活、被激活、被修改 (例如，发送合约上的资金到另一个账户)、再失活、再用第一次失活所在的默克尔分支激活。这违背了保留规则，且可能被用于铸币；需要增加额外的默克尔证明来证明一个合约还没有被另一个特定状态激活，而该状态也尝试被激活。


方法 (2) 遇到的是不同的问题。假设两个相邻的地址 (也就是两者间没有对象) A1 和 A2 都已失活。这样，不仅 A1 和 A2 都不再可以访问 (除非有人存储了默克尔分支)，而且 A1 和 A2 之间的所有地址都不可以访问了。也就是说，如果总共有 N 个地址，那么大约 1/N 的可用地址空间都不再可访问了。当一半的地址都失活了，大约 1/4 的地址空间不再可访问。随着时间推移，会越来越难找到空间生成新的地址。而且由于新地址越来越集中在剩下的“可访问”空间上，每 N 年可访问空间减半的这种影响会呈指数增长。

# 提议


我提议对方法 (2) 进行修改，可以解决以上的问题。正如很多方法 (2) 的提议实现方案所呈现的，账户有“活跃”与“失活”两种状态，失活账户是那些超过一年未被访问过的账户。要访问失活账户，你需要提供见证数据；当失活账户被访问了，该账户会自动解除失活状态 (触及任何账户都会重置它的一年失活期计算)。修改内容如下：

- 我们给每个地址添加一个 32 个字节的 &quot;epoch 前缀&quot; （会被解译为一个整数）。例如，epoch 前缀是 9 的地址是这样：&lt;ilc&gt;0x00000009de0b295669a9fd93d5f28d9ec85e40f4cb697bae&lt;/ilc&gt;，以 &lt;ilc&gt;00000009&lt;/ilc&gt; 作为前缀。
- 默克尔路径会直接依赖 epoch 的前缀而不是它的哈希值 (因此 &lt;ilc&gt;merkle_path_key = address[:4] + hash(address[4:]&lt;/ilc&gt;) 而不是现在在用的&lt;ilc&gt;merkle_path_key = hash(address)&lt;/ilc&gt; 。这确保了“没用过的”地址空间是连续的。
- 除非地址的 epoch 前缀是小于或等于区块链已运行的年数，否则地址不能被使用
- 会增加一个 CREATE3 操作码，它会把 epoch 前缀作为一个参数，并在具有该 epoch 前缀的一个地址上创建一个合约。


推荐用户和合约总是使用具有尽可能新的 epoch 前缀来创建账户，甚至设为默认设置，因为肯定会有具有最新 epoch 前缀的全状态仍然是可以访问的。为了还能保有“反事实地址 (counterfactual addresses)”（即在合约代码被发布前，用户在链上 [例如通过发送 ETH 或 ERC20 代币]或链下[通过在一个通道里互动]交互的地址），用旧 epoch 前缀来创建合约还是可能的。但是，对于想要创建反事实地址的用户，如果长期不创建，他们就要负责为该账户存储旧状态的分支。

经过多年的运行，预计活跃状态会由两部分构成：(i) 有最新 epoch 前缀的全部地址空间，(ii) 与最近被活跃使用过的账户相对应的特定旧状态

请注意，这个方案正常情况下扩展到合约上；事实上，主动遵循这个方案是符合合约自身运作的。因为在这个方案里，地址中代表存储的部分以几个字节为前缀，它们所代表的数字 N 指的是这些数据是在 N 年与这些地址产生关联。这很适合用于存储像代币余额这样的数据。


ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/6/29]]></title><description><![CDATA[Ropsten 伦敦升级顺利；StakeHound 密钥丢失事故]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-6-29/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-6-29/</guid><pubDate>Tue, 29 Jun 2021 00:00:00 GMT</pubDate><content:encoded>![31](https://i.ibb.co/TkD74nS/31.png)

&lt;br/&gt;

# **Eth1**

## **伦敦升级情况**

**第 116 次 AllCoreDev 更新**

根据 6 月 25 日进行的第 116 次核心开发者会议，在 6 月 24 日在  Ropsten 测试网上进行的伦敦升级出现了一个小问题，由于缺少矿工升级，分叉后的第一个区块花了比预期长的时间才挖出。此外，  工具方面出了一个小问题，一个计算算力的库没有伦敦升级支持，因此生成了一个不一样的哈希值。除了以上两个问题，其他方面都进展顺利。

Besu 团队用大量交易持续轰炸 Ropsten 测试网 12 到 18 小时，使基本费用上涨到 7500 gwei，Ropsten 测试网通过了此次压力测试。

![spam](https://i.ibb.co/DGfrpPR/spam-stress-test.jpg)

&lt;center&gt;cr: @peter_szilagyi&lt;/center&gt;

尽管 Ropsten 升级进行顺利，大多数的客户端团段仍然有一些调整工作，以为主网升级做完全的准备：修补小漏洞、添加最终版的 JSON RPC API 等。

核心开发者会议同意先看 Goeli 测试网的分叉情况 (6 月 30 日)，如果进行顺利，会在它之后选一个异步区块。客户端团队说他们应该能够在下一次核心开发者会议前发布用于主网升级的版本。理想情况下，该区块会在区块 13,000,000 前，这样才不会进入下一个难度炸弹期，但如果 Goeli 测试网出现意外，我们最好往后推，确保伦敦升级能顺利进行。

关于上周的难度炸弹更新图表和解释，读者可以点击这个链接：[https://t.co/s94JlYrVG8?amp=1](https://t.co/s94JlYrVG8?amp=1)

在 Goeli 测试网升级前可以做的事有：

1）看伦敦升级后 Eth2 测试网的表现

2）多次用大量交易轰炸网络来测试 Ropsten

3）用不同的工具轰炸 Ropsten 和 Goeli 测试网，以增加交易多样性

来源：[https://twitter.com/TimBeiko/status/1408459851349467136?s=20](https://twitter.com/TimBeiko/status/1408459851349467136?s=20)

&lt;br/&gt;

**Ropsten 测试网的 ETH 烧毁情况**

根据 Geth 客户端的数据，下图为每个区块的烧毁 ETH 的情况，交易费最高的区块烧毁了 768 个 ETH:

![burn](https://i.ibb.co/DpHskQV/BURN-ETH-PER-BLOCK.png)

来源：[https://twitter.com/peter_szilagyi/status/1408181759167057932?s=20](https://twitter.com/peter_szilagyi/status/1408181759167057932?s=20)

根据 [http://watchtheburn.com/](http://watchtheburn.com/) 的数据，目前已有将近 9 万个 ETH 被烧毁。

![burn2](https://i.ibb.co/5jn0xrr/burn2.jpg)

&lt;br/&gt;

## **从 EIP-3074 讨论到议程推进流程反思**

第 166 次核心开发者会议继续对 EIP-3074 的讨论，早前在 Ethereum Magicians 论坛提出“3074 的替代方案” 的开发者 @yoavw 这次与会简要陈述了其主要观点。根据 Tim Beiko 的会议笔记，@yoavw 认为 3074 是一个功能强大的机制，但会带来严重风险，以及我们可以通过更安全和限制性更强的方法实现这份 EIP 的目标 (批量事务、精简版账户抽象、可以授权代币交易和代币转移等）。他提到 3074 引入的一些攻击向量可以是非常不易察觉的，例如只有在跨链可用，因此很可能在审计中不被发现，因为审计只专注在以太坊上。

![https://pbs.twimg.com/media/E4vfB4uUYAIpNl8?format=png&amp;name=large](https://i.ibb.co/rMsqPf5/crosschain.png)

之前对 3074 的批评是把它与 linux 的 “sudo&quot; 相比较，@yoavw 认为在功能上与”setuid&quot;更接近，因为在过去几年里 setuid 在Linux上引起了很多漏洞，特别在权限提升方面。

EIP-3074 作者之一的 @lightclients 表示 @yoavw 提出的大部分批评都集中在已经被认为不安全的东西上，这其实归结到以太坊应该允许用户可以做什么的理念分歧上：以太坊应该提供有潜在风险但能最大化表现性的工具吗？

随后会议围绕以太坊的委托问题展开讨论——完全与部分/重复委托之间的权衡。完全委托会带来更大的灵活性（例如并行的nonce 方案），但会比部分委托带来更高的风险，和更差的用户体验。

讨论的一个核心是 invoker 合约的可靠程度。一个恶意的 invoker 可以带来非常糟糕的结果，其中有些还不总是那么明显 (例如，invoker 平时不会窃取资金，只有等到 X 资金被存入用于治理时才会启动攻击)。

判断 invoker 是否安全的责任很可能落在钱包上，invoker 可能会作为某种“钱包扩展程序”。之所以是这样是因为钱包已经存储了用户的私钥，具备了作恶的条件。

Vitalik 在讨论中提出了另一个角度，他认为 3074 有可能会长久固定 EOA (外部账户) 在以太坊上，但我们可能最终会完全移除 EOA，以彻底启动账户抽象和抗量子计算。

对 3074 最后的评论来自@alexberegszaszi，他一直在研究如何在以太坊上扩展地址空间。他的团队汇总了一个关于地址空间扩展  (address space extension, ASE) 的列表，共 15 个开放问题，其中两个与 3074 相关。

以上提到的相关研究具体来源如下：

EIP-3074: [https://ethereum-magicians.org/t/eip-3074-auth-and-authcall-opcodes/4880](https://ethereum-magicians.org/t/eip-3074-auth-and-authcall-opcodes/4880)

EIP-3074 的一种简单替代方案：[https://ethereum-magicians.org/t/a-case-for-a-simpler-alternative-to-eip-3074/6493](https://ethereum-magicians.org/t/a-case-for-a-simpler-alternative-to-eip-3074/6493)

Vitalik 关于移除 EOA 的提案：[https://ethereum-magicians.org/t/we-should-be-moving-beyond-eoas-not-enshrining-them-even-further-eip-3074-related/6538](https://ethereum-magicians.org/t/we-should-be-moving-beyond-eoas-not-enshrining-them-even-further-eip-3074-related/6538)

ASE 的相关问题研究：[https://notes.ethereum.org/@ipsilon/address-space-extension-issues#4b-EIP-3074](https://notes.ethereum.org/@ipsilon/address-space-extension-issues#4b-EIP-3074)

讨论期间，开发者 Ansgar 提出核心开发者会议好像变成了推动这些提案的障碍，因为在有限的时间里难以彻底讨论，而且等每两周开一次会也拖慢了进度。我们可以通过线下会议专注讨论特定主题（例如这周讨论 state expiry) 来改善这种情况，但这并不能解决核心问题。其中一个困难是任何这些变更都会影响网络的安全性，因此它们不能完全脱钩。最终只会变成只有少数人需要对每个提议想透彻。这不是一个简单的问题，但肯定是我需要思考的问题。

来源：[https://twitter.com/TimBeiko/status/1408459851349467136?s=20](https://twitter.com/TimBeiko/status/1408459851349467136?s=20)

&lt;br/&gt;

Vitalik 在reddit 的 r/ethereum 板块进行了一次即兴 AMA，主题是无状态、Verkle tress 和 state expiry 的技术问题。

指路：[https://www.reddit.com/r/ethereum/comments/o9s15i/impromptu_technical_ama_on_statelessness_and/](https://www.reddit.com/r/ethereum/comments/o9s15i/impromptu_technical_ama_on_statelessness_and/)

&lt;br/&gt;

# Eth2

**去中心化质押池 Rocket Pool 更新了为”合并“做的准备**

6 月 23 日 Rocket Pool 发布了一条公告，主要向大家更新了一些 Rocket Pool 为 eth1-&gt;eth2 合并做的准备细节。Rocket Pool 表示：“总的来说，除了我们的智能节点软件和客户端节点软件之外，“合并”不会对 Rocket Pool 协议造成很大的变化。我们最近已经对 priority fees (小费) 和最大可提取价值 (Maximum Extracted Value, MEV) 进行了一些研究。”

以下是本篇更新的主要内容：

- 我们的研发重心在主网发布上，但是同时正为“合并”做准备；
- 我们已经在为”合并“做准备，并制定了包含 priority fees (小费) 的计划，以使得节点运营者和 rETH 持有者受益；
- 我们正与 Flashbots 合作，探索捕获 MEV 的途径。

来源：[https://medium.com/rocket-pool/the-merge-0x02-mev-and-the-future-of-the-protocol-c7451337ec40](https://medium.com/rocket-pool/the-merge-0x02-mev-and-the-future-of-the-protocol-c7451337ec40)

&lt;br/&gt;

**引入以太坊的超轻客户端——Fluffy**

Nimbus 团队宣布将加入以太坊基金会的 Portal Network 团队，作为Portal Network的启动客户端之一。Portal Network 是一个正在进行的跨团队工程，旨在重新想象以太坊的轻客户端，开发出可行、功能完备的轻客户端体验。这里说的是用于钱包的超轻客户端，它能连接网络但不需要同步 (即新安装或离线后上线可以立即使用)。

详情：[https://our.status.im/nimbus-fluffly/](https://our.status.im/nimbus-fluffly/)

&lt;br/&gt;

**ETH2 存款合约中的 ETH 占总供应量的 5%**

根据 ETH2 Launchpad 和浏览器 [https://mainnet.beaconcha.in/](https://mainnet.beaconcha.in/) 显示，截至本文发布，ETH2 的总质押量有 5,890,794 ETH，活跃验证者节点有 178,833 个，等候被激活的验证者节点有 6,369 个。ETH2 存款合约中的 ETH 占总供应量超过 5%。

&lt;br/&gt;

**不要再说 Eth2 了**

Eth2 客户端 Prysm 动议在以太坊客户端里全面弃用“Eth2&quot;这一术语，其创始人 Raul Jordan 在推特上表示现在是时候清楚表明只有一个以太坊。这份 PR 表明会在 Prysm 客户端里尽量移除&quot;eth2&quot;、&quot;Ethereum 2&quot; 或”Ethereum 2.0&quot;这些表述，以减少混乱，以及在合并前把以太坊共识层和执行层联结起来。

来源：[https://twitter.com/rauljordaneth/status/1409527165138391043?s=20](https://twitter.com/rauljordaneth/status/1409527165138391043?s=20)

&lt;br/&gt;

# **生态**

**Gitcoin Grants 第十轮将于 7 月 2 日截止**

开源协作和资助平台 Gitcoin 的第十轮 Grant 将于 7 月 2 日截至，除了常规的基础设施、DApp、社区和 NFT 板块之外，本轮增加了拉丁美洲地区、Gitcoin 建设和 DGOV (去中心化治理) 板块，本轮仍然支持使用二层解决方案 zkSync 进行结算。

![gitcoin](https://i.ibb.co/1vcKQHJ/gitcoin.png)

ECN on Gitcoin：[https://gitcoin.co/grants/380/ethereumcn-ecn](https://gitcoin.co/grants/380/ethereumcn-ecn)

欢迎大家前往支持中国以太坊社区及组织：[https://gitcoin.co/grants/explorer/collections?collection_id=10309](https://gitcoin.co/grants/explorer/collections?collection_id=10309)

&lt;br/&gt;

**质押解决方案 StakeHound 因丢失部分提款密钥而无法取回 38,178 ETH**

6 月 22 日，StakeHound 发布一则公告：2021 年 5 月 2 日，StakeHound 被告知，其托管提供商 Fireblocks 因丢失部分密钥而使得 StakeHound 无法再取回丢失密钥的地址上的 38,178 个 ETH。不幸的是，Fireblocks 经过一番努力后仍未能解决问题，StakeHound 通过 以色列最高法院向 Fireblocks 发起诉讼。

简而言之，Fireblocks 的一系列错误导致丢失了两个密钥。Fireblocks  (1) 没有在生产环境中生成他们的私钥，(2) 没有备份解密这两个密钥所需的私钥，以及 (3) 丢失了这两个密钥。

随后，Fireblocks 也就该事件给出回应：Fireblocks 团队正协助各方解决该问题，目前的解决方案有：

- 利用取证 (forensics) 继续尝试恢复密钥
- 对密钥生成库进行密钥分析
- 提出一个长期的 ETH2 解决方案，以防范此类事故发生

来源：[https://stakehound.com/blog-post/fireblocks-eth-2-key-management-incident/](https://stakehound.com/blog-post/fireblocks-eth-2-key-management-incident/)

来源：[https://www.fireblocks.com/blog/stakehound-eth-2-0-event/](https://www.fireblocks.com/blog/stakehound-eth-2-0-event/)

&lt;br/&gt;

根据 Santiment 的推文，今天 (6 月 9 日) 以太坊的活跃地址数首次超过了比特币，是加密货币世界历史性的一天。

![https://pbs.twimg.com/media/E4-72WCVUAAOSQl?format=jpg&amp;name=medium](https://i.ibb.co/9bgfFwP/santiment.jpg)

来源：[https://twitter.com/santimentfeed/status/1409552133553147913?s=20](https://twitter.com/santimentfeed/status/1409552133553147913?s=20)

&lt;br/&gt;

**社交网站 Reddit 发行 CryptoSnoos NFT，并在 OpenSea 上拍卖**

6 月 24 日，Reddit 在 r/CryptoCurrency 频道宣布其将陆续发行 CryptoSnoos NFT 系列。Reddit 用户购买了一个 CryptoSnoo NFT 之后，并将其链接至用户的 Reddit 账户，CryptoSnoos 的图像将成为该用户的头像，并且自己的资料卡上会展示这个 NFT。甚至用户在评论时，其头像也会显示出动态的发光效果。以下是目前在 OpenSea 上拍卖的三个 CryptoSnoos NFT (截至七月一日)，Reddit 表示将继续推出 CryptoSnoo 的其他藏品。

![reddit](https://i.ibb.co/88RQb44/6-29reddit.png)

来源：[https://www.reddit.com/r/CryptoCurrency/comments/o6ms0b/introducing_cryptosnoosa_very_reddit_take_on_nfts/](https://www.reddit.com/r/CryptoCurrency/comments/o6ms0b/introducing_cryptosnoosa_very_reddit_take_on_nfts/)

&lt;br/&gt;

**漫威娱乐宣布与数字收藏品平台 VeVe 合作，并将推出漫威英雄和漫画的 NFT**

漫威娱乐于 6 月 25 日宣布与 VeVe 数字收藏品平台合作，漫威粉可以通过 VeVe 平台购买官方的漫威 NFT数字收藏品、3D 头像和数字漫画书。

![marvel](https://i.ibb.co/GR5FMPP/marvel.png)

来源：[https://www.marvel.com/articles/gear/marvel-and-veve-collaborate-to-offer-digital-collectibles-experience-for-marvel-fans-worldwide](https://www.marvel.com/articles/gear/marvel-and-veve-collaborate-to-offer-digital-collectibles-experience-for-marvel-fans-worldwide)

&lt;br/&gt;

**合成资产协议 Synthetix 创始人 Kain Warwick 将重新参与理事会竞选**

6 月 28 日，Synthetix 创始人 Kain Warwick 发布了一篇文章《一位老独裁者出现》(An Old Dictator Appears)，提出他将重新参与 Synthetix 的 Spartan Council (理事会) 的竞选。

今年早些时候，Synthetix 社区执行了一个关键的变更，以实现去中心化治理 (SIP 11：支持 Spartan Council 对 Synthetix 改进提案进行投票)：即将协议变更决定权交给理事会。

然而 Kain Warwick 指出，自理事会成立之后，他逐渐脱离协议的日常决策并将管理移交给理事会，导致 Synthetix 的运作变得不太有效率。因此 Kain 决定重新参与理事会竞选并协调 2021 年剩余的路线图规划工作。

来源：[https://blog.synthetix.io/an-old-dictator-appears/](https://blog.synthetix.io/an-old-dictator-appears/)

&lt;br/&gt;

**虚拟 DAO 峰会**

DAO 是一种非常前沿的组织结构，目前只有非常有限的先例帮助 DAO 的利益相关者了解 DAO 是如何运作。此次 DAO 峰会聚集了来自不同 DAO 社区的领袖，通过合作和利用共享资源一起更好了解这些组织的最佳实践。活动由 DAO Research Cooperative 和 Bankless 主办。

活动时间：2021 年 7 月 1 日 2:00 am—5:00 am （北京时间）

详情：[https://www.daocoop.org/](https://www.daocoop.org/)</content:encoded></item><item><title><![CDATA[对提议者/区块构建者分离友好的费用市场设计]]></title><description><![CDATA[为应对 MEV 带来的问题，Vitalik 对提议者/区块构建者分离方案提出两条思路。]]></description><link>https://www.ethereum.cn/Eth2/proposer-block-builder-separation-friendly-fee-market-designs</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/proposer-block-builder-separation-friendly-fee-market-designs</guid><pubDate>Mon, 28 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [ethresear.ch](https://ethresear.ch/t/proposer-block-builder-separation-friendly-fee-market-designs/9725)

&lt;br/&gt;

*特别感谢 Justin Drake 和 Flashbots 团队的反馈和讨论。*

对现在运行中的去中心化共识网络的一个重大威胁是关于矿工可提取价值 (miner extractable value) 的经济学，即从选择下一个区块内容的能力中提取利润的复杂技巧。一个简单的 MEV 例子是根据前一个区块的价格变动在所有链上的去中心化交易所套利。尽管正常情况下 PoS 的奖励是合理的、平均的，即单个验证者的回报率跟强大的质押池是一样的，但现在找寻复杂的 MEV 提取机会已经形成相当显著的规模经济了。10 倍大的池子就有 10 倍的机会提取 MEV，但池子也需要能够在专有的优化上投入更多，以在每个机会里提取更多的价值。除了这个问题以外，MEV 也让去中心化的质押池变得更复杂，因为在去中心化质押池里，打包交易和提议区块仍然需要由一个实体来完成，他们可以轻易地秘密提取 MEV，而不在池里分配这些收入。


最为人所知的是解决方案**区块提议者 (proposer)/构建者 (block builder)分离**。不同于区块提议者自己生成一个收入最大化的区块，他们依赖一个市场，这个市场由外部的区块构建者组成，他们生成包含完整区块内容和给区块提议者费用的交易捆，然后提议者选择包含最高费用的交易捆。这样，区块提议者的选择就被简化为选择费用最高的交易捆，这可以由一个简单算法实现——在一个去中心化池里，它甚至可以在 MPC (多方计算) 里完成，以防止作弊。

本文对如何实现这点提出了一些设计。

*本文的想法非常直接地受 2018 年的这篇文章启发： [Optimised proposal commitment scheme 20](https://ethresear.ch/t/optimised-proposal-commitment-scheme/1314)*

&lt;br/&gt;

# 提议者/构建者分离的区块提议设计的所需特性

我们会专注的五大所需特性：

- **无须信任提议者友好性**：提议者欺负区块构建者的风险几乎是零，因此区块构建者没有动机偏向链下有声誉的或与构建者有个人关系的提议者 (因为这有可能偏向大型质押池)。
- **无须信任构建者友好性**：构建者欺负提议者的风险几乎是零，因此提议者没有动机偏向链下有声誉或与构建者有个人关系的构建者 (因为这有可能导致新进入市场的构建者不被选择)。
- **弱提议者友好性**：这个机制不应该要求提议者有 (i) 高带宽或其他计算资源， 或 (ii) 高技术水平
- **不可窃取的交易捆 (bundle)**：提议者应该不能接受由区块构建者提议的交易捆，并从中提取交易形成自己的交易捆，从而阻止区块提议者赚取利润 (并可能进一步伤害他们)
- **共识层保持简单与安全**：从共识层的角度，该机制应该保持安全性不变，最好与现有的区块提议机制一起可以被同一个分析框架。

&lt;br/&gt;

# 想法1 


1. 区块构建者构建交易捆并发布这些交易捆的捆头 (bundle head)。一个交易捆头包含对交易捆主体 (bundle body) 的承诺 (预期的区块内容)，给提议者的付款信息，以及构建者的签名。
2. 提议者选择提供最高费用的交易捆头 (仅需要考虑交易捆的构建者实际上是否有足够的余额可以支付)。他们对交易捆头签名并发布包含该交易捆头的一个提议。
3. 当看到有签名的提议后，提供打包交易捆头的区块构建者发布完整的交易捆。


此时，分叉选择规则能够做出以下三个判断中的一个 (而不是平常的两个，存在区块 vs. 不存在区块)：

- 不存在区块提议
- 存在区块提议但不存在交易捆主体
- 区块提议和交易捆主体都存在

请注意，在第二种情况下，提议仍然会被打包到链上，区块构建者给提议者的付款也仍会处理 (但区块构建者自己不会获得任何费用或 MEV )。

## 分析

五项特性中的三项是相当容易呈现的：

- 区块提议者无条件接收承诺的付款，因此交易捆不能欺负提议者
- 三个步骤都非常自动化且低带宽，因此这满足弱提议者友好性
- 提议者不能看到他们要的签名交易捆的信息，因此这满足交易捆不可窃取性。


共识层特性和无须信任提议者友好性这两点比较棘手。这个设计的确会改变分叉选择机制，从两个选项增加到三个，这意味着提议者将不再是这个机制里的最后一个行动者。理论上，人们可以推断如果分叉选择是可以做出决定的，那么这应该没问题，但这仍然是一个具有潜在未知性的重大变更。

区块提议者看不到交易捆的内容，并不能通过窃取交易捆欺负区块构建者，但他们可以对区块构建者发起一种更微妙的攻击。他们可以在 slot 末发布提议，确保证明者 (大概) 能及时看到提议，但区块构建者没有足够的时间发布交易捆主体，因此很有可能证明者来不及看到交易捆主体。这会给区块构建者带来风险，并等于鼓励他们偏向值得信任的提议者。另外，这还给了恶意的大多数机会，重罚那些他们不喜欢的区块构建者。

我觉得有两套方法可以缓解这个问题。

- 证明者在他们接受提议的最长时间和他们接受交易捆主体的最长时间之间有 2 秒的延迟。如果你信任证明者，这基本解决了问题，尽管区块构建者丢失资金的这个风险仍然存在。另外，还不清楚让证明者以这种方式投票是否有激励作用 (虽然可以想象到会有人通过要求他们对一个 2 秒的可延迟验证函数的提议做证明，强迫他们等待)
- 如果交易捆的主体没有被打包，提议者只能获得付款的一半 (而区块构建者只需支付一半)。这使得提议者的破坏行为成本很高，但它仍然确保区块构建者破坏的成本也是高昂的 (当两种情况的成本都足够高时，总的来说你就能信任即使是匿名行动者都不会想做破坏行为)。例如，如果一个交易捆的提议者费用是 1，区块构建者获利 1.05：
  - 诚实行为会带来的构建者和提议者收益分别是 0.05 和 1。
  - 提议者或证明者太迟发布，导致仅区块头被接受了，这样构建者和提议者的收益分别是 -0.5 和 0.5。

&lt;br/&gt;

# 想法2

1. 区块构建者构建并发布交易捆头。交易捆头包含对内容的承诺、给提议者的付款、以及构建者的签名。
2. 提议者对他们看到的交易捆头进行选择，形成列表，并对列表组成的声明进行签名。
3. 在看到该声明时，被选的区块构建者会发布相应的交易捆主体。
4. 提议者在他们之前承诺的一列交易捆头中选出一个并用它发布提议。


还需要一个新的罚没条件，任何在同一个 slot 里提议不在自己承诺列表里的交易捆头的提议者都会被逐出和被惩罚。

还要注意的是，在第 2 步里，提议者提交的交易捆头列表也可以成为一个对交易捆头进行加密的哈希值列表，其中哈希值都加密到区块构建者的公钥，因此只有构建者知道它们是否被接受了。这会减少 DoS 攻击风险。

## 分析

同样地，五项特性中的三项式相当容易显示的：

- 提议者不能窃取交易捆，因为当他们已经把自己限制在一个有限的现有交易捆头集里时，他们只能看到交易捆的主体。
- 当完整的交易捆没有被打包前，构建者给提议者的付款是不可能成功的，因此提议者也无法在经济上欺骗构建者。
- 共识特性保持不变，因为系统设定仍然是提议者作为机制的最后行动者，共识规则决定的内容没有变更。

在这个情况里，更棘手的两个特性是弱提议者友好性和无须信任区块构建者友好性。对于这个方案的忧虑是恶意区块构建者可以通过制造大量高交易费的提议攻击提议者，但永远不发布这些交易捆的主体。如果提议者对接受的交易捆数有上限，这种攻击可以把所有合法交易捆排除在外，使得提议者没有合法交易捆可以提议打包到区块。如果提议者对接受的交易捆数没有上限，那么可能会有无数个满的交易捆主体 (试想：每个 500 kB) 发送给提议者，这将需要非常大量的带宽。

解决这个难题的一个办法是以某种方式对交易捆头的提交进行速率限制，这不是一个硬性限制。

- 提交交易捆需要支付一定费用，通过类似 EIP-1559 的机制来调整到某个速率 (例如，每 slot 8 个交易捆)
- 成为区块提议者需要押金 (无论如何都是必要的，以确保提议者得到报酬)，同时还需要一条规则，如果你发布的交易捆没有被打包，但一个更低价的交易捆被打包了，那么你在接下来的 N 个 slot 都无法提交交易捆。

只有在这种情况也会被扣费：你的交易捆没有被打包，但更低价的交易捆被打包了，因为这种特定情况可能是你作恶了 (或提议者作恶、或是网络状态不好)。

这方面有先例；之前的 [ENS 竞拍](https://medium.com/the-ethereum-name-service/a-beginners-guide-to-buying-an-ens-domain-3ccac2bdc770)设有 0.5% 失败者费用，以阻止有人在明显不会赢的情况下出价，以迫使赢家支付更多。

但是，这些技术可能会引入对提议者的信任要求，因此他们需要谨慎处理，对打包交易捆失败的惩罚不能太高。

一个替代方案是允许自由和无限制地发布交易捆主体，但限制主体在在网络层广播。一个简单算法是：

- 为交易捆得以传播添加一个稍微延迟的最短时间限制：交易价格最高的交易捆是 0 秒，第二高的交易是 0.2 秒，第三高的是 0.38 秒，一般来说对于第 k 个最高交易价格的交易困是 2∗[1−0.9^(k−1)] 秒。
- 增加一条规则：如果一个节点已经广播了一个更高交易费的交易捆主体，它不能再广播了。

这两项技术可以结合在一起：你可以用一个低价费用来减少预期的交易捆数，比如每个 slot 50 捆，然后使用像这样的网络层机制来进一步减少带宽要求。

&lt;br/&gt;

# 结论

到目前为止，我不明确是否唯有上述两种方法能解决这个问题，可能还有其他。在这两种方法里，想法 (1) 在概念上更简单，但它会给区块构建者带来风险，也会引入更复杂的分叉选择规则要求。想法  (2) 在分叉选择和共识上更简单，但在处理恶意区块构建者带来的 DoS 攻击上有困难，且任何解决这个问题的方法都可抗产生其他问题，尽管可以想到将其最小化的方法。到目前为止，我仍然不确定哪一个更好。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[10分钟读懂 Arbitrum 的工作原理]]></title><description><![CDATA[本文全面解读并总结了 Arbitrum 的工作与技术原理。]]></description><link>https://www.ethereum.cn/Layer2/arbitrum-in-under-10/</link><guid isPermaLink="false">https://www.ethereum.cn/Layer2/arbitrum-in-under-10/</guid><pubDate>Sun, 27 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [tracer.finance](https://tracer.finance/radar/arbitrum-in-under-10/)

&lt;br/&gt;

# 架构的概要


- 由于 Arbitrum (L2) 作为以太坊 (L1) 的扩容解决方案存在，因而 Arbitrum 的架构自然部分存在于 L1 上，部分存在于 L2 上。

- 存在于 L1 的 Arbitrum 组件是 EthBridge，这是一组以太坊合约。

- EthBridge 负责对 Arbitrum Rollup 协议进行仲裁，以及维护链的收件箱和发件箱。

- 位于 L1 上的收件箱和发件箱允许用户、L1 合约和全节点发送它们的交易到 Arbitrum 链上，并且观察这些交易的结果。

- Arbitrum 虚拟机 (AVM) 是 L1 和 L2 之间的网关，其功能由 EthBridge 提供。

- AVM 能够读取输入，并对这些输入执行计算以产生输出。

- ArbOS 在 AVM 上运行，并负责确保 Arbitrum 链上智能合约的执行。

- ArbOS 完全存在于 L2 上，并像在以太坊上一样运行 EVM 合约。

![Layer 1 to Layer 2](https://i.ibb.co/6NrWcwM/arbi1.jpg)

&lt;center&gt; Arbitrum 架构视图&lt;/center&gt;

&lt;br/&gt;

# Rollup 协议


- 收件箱中消息的顺序决定了交易的结果。

  - 随后，任何正在查看收件箱的人都可以知道交易的结果，只需自行执行即可。

- Rollup 协议负责确认已经有效发生的交易的结果。


- 参与协议的用户称为验证者；验证者质押 ETH 进存款合约之后，即成为质押者并且能够对 Rollup 链上的区块进行质押。

  - 验证者和质押者的权限都是无需许可的。

- 在安全性方面，只要求有一个单独的诚实验证者来强制链的有效执行。

  - 这使得 rollup 链与以太坊主链具有相同程度的去信任。

  - Arbitrum 假设至少存在一名诚实验证者。


- Rollup 协议作用于 Rollup 链，这是一条独立于以太坊区块链存在的 rollup 区块链。

- 验证者的作用是提议新区块，这些新区块随后被添加至链上。

- 每一个被提议的区块最终都会由协议确认或者拒绝。

- 每个区块由多个字段组成，除了区块编号字段之外，每个字段中给出的数据都是由区块提议者做出的断言，这些断言可能正确，也可能不正确。

  - 如果任意断言字段无效，协议最终将拒绝该区块。

- 一旦提出一个区块，这个区块就会收到确认的最后期限。


- 如果有验证者不同意该区块，他们应该提出自己的有效区块；当这些诚实验证者对无效的区块提出欺诈证明时，他们将获得一些奖励。

&lt;br/&gt;

# 质押


- 如果质押者想要添加一个 rollup 区块至链上，ta 必须将其质押金放置在 ta 正添加的区块上。

- Staking (质押) 是无需许可的，任何人都能够在任何提供质押的区块上进行质押。

- 一旦你对某个区块进行质押，在该区块被确认之前你无法提出自己的质押金。

- 当你对某个区块进行质押时，你将确认该区块是有效的，并且链中最新确认的区块和你已质押的区块之间的每个区块都是有效的。

- 如果你所质押的区块无效，或者链中最近确认的区块和你所质押的区块之间存在无效区块，那么你的质押金将被没收

- 如果你没有对某个区块进行质押，那么可以对最新确认的区块质押。

- 如果你对某个 rollup 区块进行质押，那么你可以将你的质押金扩展到你所质押的区块的任意后续区块中。

- 质押所需的金额是动态的。


  - 在 Arbitrum 链中，有指定为参数的基础质押金额，大部分时间都会使用这个参数。

  - 一些攻击者哪怕质押金被罚没也要对网络进行攻击以延迟网络，那么网络的安全措施就是，过了第一个未确定区块的截止日期之后，质押数量将乘以一个因素 (这个因素随着时间呈指数增长)。

  - 这是为了在攻击期间增加此类攻击的成本。

  - 这种质押金额的增加是暂时的，仅在 Arbitrum 链的区块确认进展缓慢时才会发生。

&lt;br/&gt;    

# 挑战协议

- 当两个质押者分别对两个不同的区块进行质押时 (其中一个区块不是接在另一个区块后面)，那么将会有一个大家不同意的区块，因而挑战就会产生。

- 大多数挑战发生在 Arbitrum 链上，并由 L1 合约进行裁决。

- 挑战包括发生在 L2 上的交互式、多轮分解游戏，以及在 L1 上执行的一站式证明。

- 提议争议区块的质押者将为他们的主张辩护，反对持有不同意见的质押者。

- 争议区块的提议者声称，以上一个区块为起点，在虚拟机执行了 N 个指令之后，上一个区块的状态将被推进到他们所提议的区块的状态中。

- 在这场分解游戏中，争议区块的提议者 (Alice) 首先将 N 指令分解成 N/K 大小的 K 个部分。

  - 请注意，子部分的大小与步数的大小不相等，而是与 Arbgas 消耗的数量相等。

  - 还要注意，每个部分自然会有一个起始点和端点 (这看起来微不足道，但可以使下一个点更容易理解)。
- 而 Alice 的对立方 (Bob) 也将把指令集分解成 K 个大小为 N/K 的部分，但是 Bob 其中一个 K 部分的端点与 Alice 相应部分的端点不同。

  - 这实际上是 Bob 确定其不同意的部分。

- 然后，Bob 将执行与 Alice 初始步骤相同的操作，将其中一个部分分解成大小为 N/K 的 K 个子部分，并将该部分连同已确定的子部分返回发送给 Alice。

- 然后，Alice 执行与 Bob 初始步骤相同的操作，并确定与其端点不一致的子部分。

- 这个分解过程将继续进行，直到 Alice 和 Bob 确定了一个他们不同意的指令。

- 这个指令被发送至 L1 的合约中，这个合约负责执行该指令并决定争议的获胜者。

- 争议的输方将被没收质押金，其中一部分将被销毁 (以免攻击者对冲他们的质押金)，其余的部分将作为奖励提供给诚实质押者。

- 在整个分解过程中，L1 合约作为这场游戏的裁判并不知道任何关于指令的信息，它只是检查每个玩家是否遵守了这场分解游戏的规则。

- 在争议发生期间，所有其他验证者都可以在争议最终确定之前自行确定争议的结果；这意味着软分叉已产生，验证者可以继续在有效链上提交 rollup 区块。

- 挑战期有时间限制，每个质押者大约有一周的时间。

- 每个质押者在这一周之内必须有所动作，否则将会输掉争议。

  - 想象一下国际象棋时钟。

![multi-round](https://i.ibb.co/jMDfxrv/arbi2.jpg)


&quot;在挑战协议期间由两位质押者参与的多轮、交互式分解游戏。实际上，有争议的断言将会有更多的指令 (如图中的波浪线)，因此这场游戏将会有更多轮，但原理是相同的。&quot;

&lt;br/&gt;

# 验证者


- 验证者是 Arbitrum 链上的一个节点，它选择监测 Rollup 协议上的活动并推进链的状态进行。
  - 并非所有节点都充当验证者。

- Offchain Labs 希望验证者在“主动、防御或者瞭望塔”三种策略中选择一样；但是，这并不是协议强制执行的。

  - “主动验证者” (active validator) 通过提议新区块不断努力推进链的进行。每条链只需要一个诚实的主动验证者；增加主动验证者的数量并不会提高链的效率。

  - “防御验证者” (defensive validator) 监测 Rollup 协议，并且仅当他们目击到作恶行为时才会采取行动。要么提议一个有效的区块；要么在其他验证者提议的有效区块上进行质押。

  - “瞭望塔验证者&quot;(watch tower validator) 像防御验证者一样监测着 Rollup 协议。但当他们目击到作恶行为时，他们不会亲自提议有效区块或者对有效区块质押，而是提醒其他验证者这样做。

- Offchain labs 将在他们的 Arbitrum 链上运行一个主动验证者。

- 大多数时间，防御验证者和瞭望塔验证者不需要做任何事情，因此攻击者永远不会知道链上有多少个防御验证者。

- 尽管任何人都可以成为验证者，但是估计主要参与者还是在链上投资了大量资产的各方，或者被投资者聘为验证者的各方。



# 全节点


- Arbitrum 上的全节点与以太坊上的全节点具有相同的作用；他们都跟踪链的状态并且允许其他人与链交互。

- 由于有一个内置的 AVM 模拟器，全节点不需要对实际的 Rollup 协议有任何理解，就能够对链上的输入进行计算输出。

- 一个全节点可以作为链上的聚合器，进一步提高用户的成本效率。

- Arbitrum 具有向用户收取费用的功能，以补偿全节点在充当聚合器时所产生的开销。

- 全节点还可以压缩交易，以进一步降低 L1 调用数据的成本。

  - 全节点将压缩后的交易提交到链的收件箱 (inbox)，arbOS 在那里接收并解压交易。

- 一个全节点通常会同时包含压缩和聚合功能，也就是说，它会向链的收件箱提交一批已压缩的交易。



# 序列器模式


- Arbitrum 链发布时，可以选择和序列器一起发布。

- 序列器是一个全节点，它拥有额外的特权，可以对链的收件箱中的交易进行排序。

- 这样的特权允许序列器立即保证交易的结果。

- 当 Arbitrum 链与序列器一起发布时，链的收件箱被有效地分为两个：

  - 没有序列器的收件箱将正常运行，节点可以发送信息至收件箱，这些信息会被标记上一个区块高度和时间戳。

  - 第二个收件箱将由序列器管理，并且只有序列器可以发送信息至收件箱。

- 序列器发送信息到其收件箱之后，他们可以指定这些信息的区块高度和时间戳。

  - 这包括到指定增量区块 (即过去的区块) 以及增量秒数 (即过去的秒数) 为止的区块高度和时间戳。

  - 这些增量值通常相当于 10 分钟左右。

- 当 arbOS 检查收件箱时，它将收到区块高度最低的信息，这个区块高度是常规收件箱或者是序列器收件箱的头部。

- 序列器可以回溯多少个区块数取决于在以太坊上敲定 Arbitrum 区块所需的确认区块的数量。

  - 如果在以太坊上完成敲定需要 x 个区块，那么序列器就要回溯 x 个区块，以便其确切地知道哪些交易将优先于当前的交易。

- 当 Arbitrum 链上激活序列器模式时，提交至序列器收件箱的交易会比那些提交至普通收件箱的交易提前 x 个区块被敲定。

  - 因为对即时敲定、5 分钟敲定、10 分钟敲定进行比较后，三者都有很大的实际差异，所以这被认为是正向的权衡。

- 然而，某种程度上，一名作恶的序列器能够利用这些特权获得好处。

  - 一名作恶的序列器能够通过不将用户的交易放进序列器收件箱来审查用户的交易，迫使用户在发现其被审查之后，发送相同的交易至普通收件箱中。

  - 序列器也有能力抢跑用户的交易。

- 最初的 Arbitrum 链上的序列器将有 Offchain Labs 运行。

- Cornell Tech 团队已经在研发去中心化序列器算法上取得一定的成果，这项研究还差一些工作需要完成，完成之后便可以应用到 Arbitrum 的长期解决方案中。

![with and without a sequencer](https://i.ibb.co/FYT9f86/arbi3.jpg)


&lt;center&gt; 序列器模式开启与关闭时，链中收件箱的异同。&lt;/center&gt;



# ArbGas / 费用


- ArbGas 的操作原理与以太坊 gas 类似，用于衡量 Arbitrum 链上的计算成本。

- 然而，Arbitrum 链没有一个硬性的 ArbGas limit 要求，并且 ArbGas 消耗得比以太坊 gas 要快得多。

- ArbGas 的一个关键作用是为验证计算结果所需的时间提供一个可预测的度量。

- 每一个 rollup 区块内都包含一个关于链上 ArbGas 消耗总量的声明，这意味着当前区块的声明与前一个区块的声明之间的差异应该是当前区块消耗了多少 ArbGas 的有效指标。

- 通过这种方式，检查区块有效性时，验证者可以将他们的 gas limit 设置为这个值，如果这些 ArbGas 在区块完成执行前就耗尽了，那么就可以确定这是一个无效区块，并成功挑战了该无效区块。

- 用户在向链提交交易时，会被收取费用。

- 如果用户将他们的交易发送给一个聚合器，那么一部分费用将自动支付给这个聚合器。

- 剩余的费用将被发送到网络费用池，用于支付确保整条链安全运行的服务费。

- 费用还包含 L2 交易、L1 数据调用、计算以及存储成本。

- 费用以 ETH 的形式支付。



# 总结


- Arbitrum 是由 Offchain Labs 团队开发的 L2 扩容解决方案：一个使用多轮交互挑战协议的 optimistic rollup。

- Arbitrum 的旗舰链已于 5 月 28 日面向开发者发布，一旦项目达到一定数量，就会向用户开放。

- 从用户的角度来看，与 Arbitrum 链交互和与以太坊交互几乎无差别。


&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太坊基金会第六次Reddit AMA（下）]]></title><description><![CDATA[本期主题将包括状态管理、无状态性、经济机制、EIP-1559及密码学等]]></description><link>https://www.ethereum.cn/Eth2/ama_we_are_the_efs_research_team_6_23-p2</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/ama_we_are_the_efs_research_team_6_23-p2</guid><pubDate>Fri, 25 Jun 2021 00:00:00 GMT</pubDate><content:encoded>编者注：北京时间6月23日晚，以太坊基金会研究团队在 Reddit 论坛进行了第六次 AMA，包括以太坊共识机制、质押、合并、分片、Layer2 、状态管理及以太坊经济机制等众多主题。ECN 对大部分问答进行了筛选整理，并编译成文。需要注意的是，基金会研发团队成员就某些话题存在个人的看法和推测，为避免曲解，请以原贴为准。

[此处](https://www.reddit.com/r/ethereum/comments/o4unlp/ama_we_are_the_efs_research_team_pt_6_23_june_2021/)是Reddit AMA链接

&lt;br/&gt;

# Gas limit/Gas 开销

**Bad_Investment 提问**：

Vitalik 最近写了一篇关于 verkle tree 和 state expiry 的文章，我有以下问题：

- 如果 verkle tree 和 state expiry 机制都实现了，预计 gas limit 可能提升多少？
- 对存储操作码进行重新定价有意义码？如果有的话，是否有相关估值？


&lt;br/&gt;


**Vitalik 回复**：

&gt;如果 verkle tree 和 state expiry 机制都实现了，预计 gas limit 可能提升多少？

如果我们想的话可以达到 2 ~3 倍，不过这是个开放性问题；我们也可以利用这些节省了的存储空间使运行节点再次变得简单。

&gt;对存储操作码进行重新定价有意义码？如果有的话，是否有相关估值？

存储操作码现在基本已经是以无状态友好的方式来定价了；柏林升级里的 EIP-2929 基本上实现了这点。访问每个数据块我们都需要收费；Ipsilon 团队的一些分析表明，假设访问每个数据块需要消耗 350 gas，那么平均的 gas 消耗大约增加 10%~20% ，尽管我现在是提议每个数据块消耗 200 gas，这样平均的 gas 消耗只会增加大约 5%~10% （而且，提议的新 gas 方案在一些关键领域提供一些 gas 节省设定，以抵消这些增长）。具体请看这份  [Verkle tree EIP](https://notes.ethereum.org/@vbuterin/verkle_tree_eip#Gas-reform) 的文章。


&lt;br/&gt;


# 经济学/EIP-1559

1. **[mikeifyz](https://www.reddit.com/user/mikeifyz/) 提问：**

这是对 Vitalik 提的一个偏向经济学的问题。我想知道你在经济学上的观点主要受哪个学派的启发——我猜你受奥地利学派的影响很深，但我不确定我的猜测是否正确。我之所以这样问是因为有时我感觉区块链技术与熊彼特的看法非常契合。

还有去年你在推特上发起好几次投票调查人们对这些问题的看法：“我提倡的这些想法在你看来是更倾向于......资本主义/社会主义；左倾/右倾；自由主义/威权主义”，很意外的是，这些投票结果是非常不统一的！


&lt;br/&gt;

**Vitalik 回答：**

我早期的经济学观点肯定是奥派和芝加哥学派的结合，但更倾向于芝加哥学派。现在，我会说我没有在跟随哪个已有思想流派，更多的是形成我自己的体系。我最近一直专注于公共物品和去中心化治理问题，传统的经济学并没有特别适用的工具。传统经济学有数学模型，像[二次方融资](https://vitalik.ca/general/2019/12/07/quadratic.html)就很明显来源于这些模型，但即使是它也解决不了一些问题，比如在低利益相关情况下人们做某事的动机就很低、不同人对某个特定问题的不同水平认知、特别是[合谋问题](https://vitalik.ca/general/2020/09/11/coordination.html)。

&lt;br/&gt;

2. **[Wolverined](https://www.reddit.com/user/Wolverined/) 提问：**

你相信Triple Halvening (三重减半) 吗? ETH 是 Ultrasound Money (超良货币）吗?


&lt;br/&gt;


**基金会 Justin Drake 回答：**

&gt;你相信Triple Halvening (三重减半) 吗?

这其实不是一个“相信”的问题：这只是比较 PoW 与 PoS 发行量的一个方式。当前，PoW 的发行量大概是每天 13,500 个 ETH。相较下，PoS 的发行量是大概每天 1,700 个 ETH，且有 1400 万个 ETH 是质押了的。因此，即使有 1400 万个 ETH 是质押了 (注：我们目前有 570 万个 ETH 质押了），每天  1,700 个 ETH 也比 每天 13,500 个 ETH 减少了将近 8 倍，而减少 8 倍的发行量其实相当于比特币的三次减半。

&gt;ETH 是 Ultrasound Money 吗?🦇🔊

快了。符合 ultrasound money 的一个标准是减少供应量，“合并”后如果 EIP-1559 的烧毁量大于 PoS 的发行量，也就做到这点了。我非常有信心 ( 95% 以上的把握）“合并”后 ETH 的供应量会开始减少，以及“合并”时的 ETH 供应量 （预计是大约 1 亿 2000万个 ETH) 会是以太坊有史以来的最高峰。请注意，货币通缩意味着“没有供应量下限™”，正如 David Hoffman 所说的 :)

如果想了解更多 ultrasound money，可以看看 Bankless 的[这期](https://www.youtube.com/watch?v=bWqhn1hXvVc)和[这期](https://www.youtube.com/watch?v=FQTZSb3Rc9I)。


&lt;br/&gt;


**基金会 Carl Beekhuizen 回答：**

关于这一点，基金会的研究员有不同的看法。

在我看来，ETH ultrasound money的表情包挺傻的，它的重点放错了。我期望从长期来说， ETH 变得有价值是因为它有用。（虽然我的看法可能是错的，比特币的确因为表情包获得了大部分价值）。


&lt;br/&gt;


3. **[datawarrior123](https://www.reddit.com/user/datawarrior123/) 提问**

EIP-1559 不会降低交易费，那么有其他计划是旨在降低一层的交易费用的吗？


&lt;br/&gt;


**基金会 Justin Drake 回复：**

&gt;有其他计划是旨在降低一层的交易费用的吗？

对于一层扩容方面的升级，主要的计划是分片。我们会先进行仅作数据存储的分片，共64个。分片的数量会随时间推移逐渐增加，而且我们将最终实现在分片上执行。


&lt;br/&gt;


**[frank__costello](https://www.reddit.com/user/frank__costello/) 回复 Justin Drake**

当二层网络可用时，大多数的应用都可以从一层搬到二层。对于想留在一层的人来说，费用也会变得更便宜，因为二层上的用户变多了。


&lt;br/&gt;


**基金会 Dankrad Feist 回复 [frank__costello](https://www.reddit.com/user/frank__costello/)**

我觉得这个预期是不对的。一旦用户搬到了二层，一层将变得更贵。原因是二层对一层的使用会更高效，因此可以支付更多一层的区块空间。结果会是二层的价格低，但一层的价格会变更高。


&lt;br/&gt;


**基金会 Barnabé Monnot 回复 Dankrad Feist** 

由于 rollup 需要在一层发布数据，这里产生了有趣的二阶效应。很明显，一个有 rollup 的系统比没有 rollup 的系统能容下更多的执行。然而，在一个对 rollup 有高需求的系统应该意味着 rollup 在一层发布数据会增加一层的开销，因此这不是简单的替代关系，但这应该会达到某种平衡。总的来说，用户在一层和二层的平均费用应该是更低的：假如需求是固定的，供应增加意味着价格会下降。

请注意，1559 和操作码 `BASEFEE` 生效后，rollup 将能更了解当前一层上的开销。


&lt;br/&gt;


4. **[MillennialBets](https://www.reddit.com/user/MillennialBets/) 提问**

你们预期 EIP-1559 带来的影响通缩还是持平？


&lt;br/&gt;


**基金会 Justin Drake 回复：**

&gt;你们预期 EIP-1559 带来的影响通缩还是持平？

仅仅 EIP-1559 本身还不足以决定供应量会增加还是减少：你还要看发行量。EIP-1559 上主网 (7月底) 后的短期内，我们不太可能会看到货币通缩。因为 PoW 的发行量是非常高的，大概每天 13,500 个 ETH，而烧毁的交易费部分不足以抵消如此高的发行量。

在“合并”后，发行量会大幅降低 (大概8倍，因此是三重减半™）。鉴于历史上的交易费量，我很有信心供应量会在“合并”后开始下降，以及“合并”时的供应量（预计会是大约 1 亿 2000 万个 ETH) 会是以太坊有史以来的供应量最高值。


&lt;br/&gt;


**基金会 Danny Ryan 回复：**

现在让我兴奋的是一个表面没那么激动人心的用例：用你的以太坊地址/密钥实现通用登录。我们已经看到在以太坊生态系统的 dapp 里实现了这点，但已经构建的过渡支架可以扩展到任意的网站和应用。如果这引起更多人的关注，它会 (1) 减少令人头痛的登录管理，(2) 为我们夺回在互联网上对我们数据的控制权奠定基础。

至于 1559，分析显示，在与今天以太坊网络相似使用量的情况下，如果与 PoS 的发行量结合的话可能会出现通缩。1559 的好处有很多，但使平台资产 (即ETH) 更具有经济功能最终有利于提高安全性，这对以太坊的成功至关重要。


&lt;br/&gt;


5. **[thedecoyaccount](https://www.reddit.com/user/thedecoyaccount/) 提问**

以太坊 2.0 后会设 ETH 发行量上限，或有以太坊网络的货币政策吗？ 


&lt;br/&gt;


**基金会**  **Justin Drake 回复：**

会有计划把活跃验证者数设定在 2^20 或 2^19，这个设定本身就会给每天的发行量设上限。设定验证者数上限为 2^20 的话就相当于把一年的最大发行量限定在 100 万个 ETH以内。

**[jnbhj](https://www.reddit.com/user/jnbhj/) 追问 Justin Drake**

你觉得如果达到了这个上限 (似乎可能性很大）会带来负面后果吗？它是否会导致验证者集成为像卡特尔这样的存在？


&lt;br/&gt;


**基金会  Justin Drake 回复：**

我看不到短期会达到 2^20 个验证者的可能性。

&lt;br/&gt;

**[samuelshadrach](https://www.reddit.com/user/samuelshadrach/) 回复 Justin Drake**

“合并”后会出现委托型节点 (质押池)，这时 2^20 就很容易达到了。在我看来，验证者数上限应该设低一点，明确表明不鼓励过多的委托型节点。


&lt;br/&gt;


**[jnbhj](https://www.reddit.com/user/jnbhj/) 追问 Justin Drake**

为什么？在我看来这个数字在合并后很快就会达到了。 MEV 会给验证者带来巨大收入，因为很多人会涌去做验证者，像 Lido 这样的服务使得质押和提取 ETH 都变得非常简单。我真的很担心这个上限达到会发生的事。


&lt;br/&gt;


**基金会 Justin Drake 回复 [jnbhj](https://www.reddit.com/user/jnbhj/)**

&gt;为什么？在我看来这个数字在合并后很快就会达到了。

一个原因是我们有激活队伍。我有一个脚本 (见下面）用来计算达到某个质押 ETH 数量所需的最少时间。今天有 173,654 个验证者，要达到质押 33,554,432 个 ETH 将需要至少 530 天。

```
def churn_limit(validator_count):
    return max(4, validator_count // 65536)

validator_count = 173654
staking_target = 2**20 * 32  # in ETH
epochs_to_target = 0

while validator_count &lt; staking_target / 32:
    validator_count += churn_limit(validator_count)
    epochs_to_target += 1

print(&quot;It will take at least %d days to reach %d ETH staking.&quot; % (6.4 * epochs_to_target / 60 / 24, staking_target))

```


&lt;br/&gt;

&gt;MEV 会给验证者带来巨大收入

在短期来说，这是真的。但请记住，来自交易的 MEV 在验证者中的分摊是呈线性的。因此，如果在“合并”时有 218 个验证，每个验证者从交易 MEV 中得到的奖励会比有 220 个验证者时减少 4 倍。


&lt;br/&gt;

**[jnbhj](https://www.reddit.com/user/jnbhj/) 追问 Justin Drake**

感谢你的回复。关于激活队伍的点，非常有道理。

我想我是错误理解了什么，一旦达到了活跃验证者数上限，ETH 持有者还可以质押他们的 ETH 吗？还有达到上限后，会有活跃和非活跃验证者间的轮换吗？

&lt;br/&gt;

**基金会 Justin Drake 回复[jnbhj](https://www.reddit.com/user/jnbhj/)** 

&gt;一旦达到了活跃验证者数上限，ETH 持有者还可以质押他们的 ETH 吗？还有达到上限后，会有活跃和非活跃验证者间的轮换吗

对的，这是目前的计划 :)




&lt;br/&gt;

# 状态存储/ State Expiry/无状态性

1. **[Heikovw](https://www.reddit.com/user/Heikovw/) 提问：**

Vitalik 曾经提到 state expiry 和无状态应该会在分片前实现。假如 Vitalik 的 state expiry 和无状态路线图都实现了，对实现分片的时间有什么影响吗？尽管两个阶段大概用时一年，第一阶段是否也需要一年？更短的第一阶段可能会使过渡完成得更快。这两个阶段需要在分片前完成吗？


&lt;br/&gt;

Vitalik **回答：**

&quot;Vitalik 曾经提到 state expiry 和无状态应该会在分片前实现。&quot;

我不再这样想了，两者可以以任何顺序实现。主要原因使我们现在做的是数据分片，因此分片上没有本地执行，也就不需要担心在分片间混洗状态的问题。

&quot;假如 Vitalik 的 state expiry 和无状态路线图都实现了，对实现分片的时间有什么影响吗？&quot;

没有影响；两者基本是完全独立的工作流。

&quot; 尽管两个阶段大概用时一年，第一阶段是否也需要一年？更短的第一阶段可能会使过渡完成得更快。这两个阶段需要在分片前完成吗？&quot;

如果想的话，阶段1的时间可长可短；对时间没有硬性限制


&lt;br/&gt;

2. **[Liberosist](https://www.reddit.com/user/Liberosist/) 提问**

我看到 Vitalik 的[文章](https://vitalik.ca/general/2021/05/23/scaling.html)里写到 512 GB 被选为目标存储大小。但是，随着SSD (固态硬盘) 的价格持续快速下降，像有 800 GB 到 1 TB 的超快 SSD (支持 NVMe) 的PlayStation 5 和 Xbox Series X 现在仅售 400 到 500 美元，这个价格很多人都负担得起了。PlayStation 5 的 SSD 的连续数据吞吐量为 5.5 GB/秒，对于 400 美元的游戏机来说，这是很疯狂的了！实际上，我开始看到配备 1 TB SSD、8 GB 内存的笔记本电脑售价[低至 580 美元](https://www.newegg.com/p/1TS-001A-03WP3)。由于SSD 价格持续下降，由此推断，以后 1 TB 的 SSD会成为未来经济型笔记本电脑的标准，到了分片可用时可能是 2 TB。你们觉得以太坊未来的升级以 1 TB 为目标是合理的吗？

&lt;br/&gt;

**基金会 Dankrad Feist 回复**

实际上，我们的目标是无状态，也就是说你不需要任何 SSD 都可以同步到以太坊网络的数据，除非你想成为状态提供商和/或区块生成者 (两者都不需要成为一个常规共识节点或以太坊用户）。

仍然很高兴看到 SSD 的价格下降了（因为这将使人们更容易进入这些角色），但我正积极减少对它们的依赖。


&lt;br/&gt;

**基金会  Danny Ryan 回复**

对于社区来说，密切关注未来几十年这些全球数字的变化并调整参数 (例如，gas limit、活跃状态大小、分片区块大小）使非常合理的。也就是说，宁愿因为保守出错，也要确保全球范围的人都能访问这个平台。

同样需要注意，在区块链世界里，经常你改变一个看上去独立的参数，它最终可能会影响其他资源的门槛。例如，提高 gas limit 不仅会影响状态增长，还会因为需要广播大型区块而要提高带宽需求。


&lt;br/&gt;

# 其他主题

1. **IronCena 提问：**

团队开发新功能的程序是什么？


&lt;br/&gt;

**Vitalik 回复：**

我会将其描述为四步走的程序，从大致的概念到实现和主网发布我们会经历：

- **初始概念**：有人提出一个非常广泛的概念，并在非常简短和非正式的文档甚至是会议或私聊中对其进行描述。这个想法会经由讨论，有时被残酷地拒绝，或是被修改，有时也会引起大家的兴趣。
    - 这个阶段主要是验证所提议的概念能否引发兴趣。
- **草稿规范**：最初的提议人在 [https://ethresear.ch](https://ethresear.ch/), [https://ethereum-magicians.org/](https://ethereum-magicians.org/) 或其他平台发布文章进行详细的描述。该阶段的描述就完整度来看远远不足以进行实现，但是足以对其进行分析，之后做出拒绝、完善或是接受的决策。
    - 该阶段主要是验证提议的具体构思是否可行。另外，这也是我们思考该提议应该如何融入到宏观路线图里的时候了。
- **完整规范**：有人提交了十分详细能够进行实现的提案。形式可以是 EIP、原型 EIP 或是对 [eth2.0-specs repo](https://github.com/ethereum/eth2.0-specs) 的 PR。该提案会经过进一步讨论和审核，审核通常侧重于“我们如何完善细节以使其更易于实现”、“这会如何影响向后兼容性”、“新旧形式交替的过程中出现极端情况我们应该如何处理”这类问题。
    - 该阶段主要验证确切的提案确实可行并且能够安全实现。
- **部署阶段** - 不言而喻


&lt;br/&gt;

2. **Liberosist 提问：**

你们最感兴趣的”月亮数学“密码学技术有哪些？下一个与零知识证明家族一样具有革命性的事物是什么？

&lt;br/&gt;

**基金会 Justin Drake 回复：**

&gt;你们最感兴趣的”月亮数学“密码学技术有哪些？

如果你对”月亮数学“和以太坊的交集感到好奇，我会推荐这个 2 小时以上的 [Bankless 播客](https://www.youtube.com/watch?v=ycK3AUTdl1w)，并且随附[电子表格](https://docs.google.com/spreadsheets/d/1dyhNWMB6rVdmV3Xz-LlZlTt0f4tXfIW0YaoZVvenORs/edit#gid=0)。有很多值得兴奋的事务——密码经济学的未来是光明的，而以太坊是一台将应用密码学转变为现实世界密码学的机器。

Eth1 主要使用“石器时代”的密码学构建：哈希和朴素签名。Eth2 已经使用可聚合签名，最终将具有用于秘密领导人选举的私有公钥置换证明、用于无状态和数据可用性采样的多项式承诺、用于无偏随机性的 VDF、用于托管证明的 MPC 友好伪随机函数、用于简洁验证虚拟机的 SNARKs，更无须说对后量子密码学的升级了。

&gt; 下一个与零知识证明家族一样具有革命性的事物是什么？

我们尚未深入 SNARKs 和 zkSNARKs。我的预测是，在接下来的 5 到 10 年内，SNARKs 仍将是区块链的主要”月亮数学“密码学原语。我们才刚刚开始使用关键的 SNARK 基础设施，例如递归 SNARKs 和硬件加速。我们在应用方面也处于起步阶段，例如使用 SNARK 虚拟机 (尽管 MatterLabs、StarkWare、Aztec、Aleo 等团队取得了巨大进步)，甚至使用用于私有智能合约的 zkVM (这带来了额外的复杂性)。

如果着眼于未来的 10-20 年，一个非常令人兴奋的原语是 Indistinguishability Obfuscation (iO，不可区分混淆)，它是“上帝原语”，几乎所有其他密码原语都源于此，至少在理论上是这样。我希望在 30 年里看到 iO 的发展跟随 SNARKs 的脚步，从实践中完全无法实现的理论方案到高效的产品级系统。


&lt;br/&gt;

**Vitalik 回复：**

想象一下在 ZK-SNARK 技术之上再进行优化，虽然不像 0 层到 1 层，但仍可能带来我们尚未预料到的巨大收益。具体来说：

- ZK-SNARK 虚拟机 (包括 EVM)
- SNARK 友好的哈希函数
- SNARK 友好的聚合签名

一旦我们有了这个，我们就可以 SNARK 整个以太坊状态转换函数，并且拥有能够完整验证的轻客户端。但进一步来说，令我个人最兴奋的是[完全同态加密](https://vitalik.ca/general/2020/07/20/homomorphic.html) (fully homomorphic encryption) 和混淆 (Obfuscation)。混淆在去年第一次出现了正式的可证明的提案，而 FHE 已经存在了一段时间并且一直在改进。


&lt;br/&gt;

3. **[jimjimvalkema](https://www.reddit.com/user/jimjimvalkema/) 提问**

客户端有没有什么自动检测长程攻击的方法？以及，有没有办法可以在协议层上防御/防止这种攻击？


&lt;br/&gt;

**基金会 Dankrad Feist 回复**

请注意，已经连接到网络的客户端将永远不会收到长程攻击，这种攻击只能骗那些想同步很久之前的数据的客户端。

这种对长程攻击的保护来自社会共识。基本上，当你第一次同步的时候，你不应该从创世开始同步。你应该从一个可信度的来源获取一个最近的状态根，然后与一些你直到正在运行以太坊节点的人做验证。这听上去很吓人，但其实不是一个巨大的新安全假设。例如，你通常确实信任你的客户端开发者 (你几乎没有可能靠自己验证其完整来源)，因此信任他们与给你提供一个状态根并没有很大区别。

也就是说，对于哪些害怕若主观性的人，有这些事我们可以做：

- 每周在一条强 PoW 区块链，比如比特币，上检查以太坊的状态。请注意，这可以做到无须信任——我们唯一需要的是一个时间戳，证明这个状态跟大概在那个时间。
- VDF (可延迟验证函数) 也可以一定程度上加强弱主观性假设。基本上，你使用 VDF 来验证状态根创建后已经过了一定时间。请注意，这并不防止“有计划的”长程攻击，只能防止（更可能是）有人购买旧密钥并进行追溯性攻击的类型。


&lt;br/&gt;

**基金会 Danny Ryan 回复**

现在运行中且与区块链保持同步的客户端是不会受到这种攻击的。只有那些离线一段时间 (以月来计算) 并尝试重新同步的客户端才会受到攻击。

今天还没有任何方法，但有一些潜在技术可以派上用场。我想这些技术主要是启发式的，它们可能会有很高的检测概率，但也可能在某些情况下被利用。

其中一个启发式技术是在网络对等点间采样。你可能会说——如果有足够多的对等点都认为这是当前最终确定的信息，那么这可能就会变成权威信息而不是长程攻击了。这样做的前提是你没有被日蚀攻击，并真的能够自由在主网上发现对等点。在大多数情况下，这个假设可能是合理的，但日蚀攻击很可能会发生，且可能它很难被检测出来。

另一个启发式技术可能是试图分析共识层和执行层的链上活动。在大多数长程攻击的情况里，攻击者可能很难生成有机的活动——特别是验证者活动。或者说，至少在一个长程攻击链上可能会有一段是低密度/缺失的活动。除非攻击者能够贿赂足够多已经存在的验证者，买下他们不再使用的密钥，这个假设才可能成立。在这样的长程攻击里，攻击者可以使竞争链看上去与主链一样有机。

除了显示最近敲定的信息外，我们目前相信他们没有 100% 的故障安全技术来防止 PoS 系统中的这些类型的攻击。尽管这是根本性的问题，但在实践中很可能非常容易得到缓解，更不用说在大多数情况下这些损害是非常有限的。也就是说，这种攻击只能在新同步节点上可行，并且大多数情况在人的层面就能发现，更多的是造成一种滋扰。


&lt;br/&gt;

4. **MillennialBets 提问：**

你们最喜欢哪些以太坊生态中的项目？


&lt;br/&gt;

**基金会 Justin Drake 回复：**

跟很多人一样，我对表达式智能合约 rollups 感到最兴奋 (例如 Arbitrum, MatterLabs 和 Optimism)。


&lt;br/&gt;

**基金会 Danny Ryan 回复：**

我目前对一个 (表面上看起来) 不算太激动人心的用例感到兴奋：使用以太坊地址/密钥进行通用登录。实际上已经在以太坊生态系统 dapps 内实现了，但是已经构建的脚手架可以扩展到所有网站和应用程序。如果这获得注意，将减少登录管理的麻烦，并为我们重新在互联网中获得个人数据控制权奠定了基础。


&lt;br/&gt;

5. **R3TR1X 提问：**

是否需要过渡到后量子密码学，这种变化可能会如何影响长时间不活动 (仍然使用旧算法) 的钱包？假设有人在量子计算机可以轻松破解密钥对的世界中找到一个十年前的钱包，那么保护一个没有“升级”的钱包的过程会是什么样子？未来是否会出现需要更新密钥对或永久丢失 ETH 的风险？


&lt;br/&gt;

**基金会 Justin Drake 回复：**

过渡到后量子密码学的需求基本上是不容置喙的。原因是即使可扩展的量子计算机永远无法实现，它们可以被建造 (可能是秘密进行，例如作为一个民族国家军事项目) 的可能性就足以带来这种风险。我们的思维和长期目标是 WW3 级安全。

随着量子威胁性的增强，将会在社区中进行讨论，值得关注。我个人的观点是，必须以某种方式销毁这些不活跃的代币。2019 年，Pieter Wuille 估计 [37% 的比特币供应](https://mobile.twitter.com/pwuille/status/1108087724567781376)面临量子计算机的风险。相比之下，DAO 合约有 1150 万枚 ETH，在黑客攻击时约占供应量的 15%。我觉得社区不会接受量子攻击者破解大量旧代币。

如果我们接受必须销毁易受攻击的旧代币 (这对于僵化的比特币绝对是不成立的)，问题就变成了“销毁此类代币的最合适的方法是什么”。我的策略 (力求最大的公平性) 是建立一个[加密经济量子 canary](https://ethresear.ch/t/cryptographic-canaries-and-backups/1235) (例如对中等规模的 [RSA Factoring Challenge 组合](https://en.wikipedia.org/wiki/RSA_Factoring_Challenge)进行分解)，它可以检测半可扩展量子计算机的早期形式，最好是在完全可扩展的量子计算机出现前几年。如果金丝雀被触发，所有易受攻击的旧代币都会自动被销毁。当然，如何构成良好的量子 canary，以及究竟哪些代币易受量子攻击，将会有一定复杂性。

如果您对以太坊和量子的交集感兴趣，[YouTube](https://www.youtube.com/watch?v=DDxpGMGSGDE) 上有一个演示。(旁注：大规模销毁旧代币显然有利于可证明的稀缺性和超良货币)


&lt;br/&gt;

6. **Flimsy_Door 提问：**

你们认为 Tether 和 USDT 会对以太坊生态系统构成什么风险？

&lt;br/&gt;

**基金会 Justin Drake 回复：**

我们正处于稳定币的尴尬境地。以太坊上的绝大多数稳定币 (参见[统计数据](https://defipulse.com/usd)) 是中心化和托管型的——91.67% 为托管型。即使是声称去中心化的 DAI 也有大量的托管资产抵押 (参见[统计数据](https://daistats.com/))。

USDT 等稳定币崩盘可能会给 DeFi 带来系统性风险，但希望不会对整个以太坊造成系统性风险。


&lt;br/&gt;

7. **Frankgman 提问：**

如何实现对网络层的特定更改，使得节点不对整个网络进行 gossip，而只在分片链之间进行？


&lt;br/&gt;

**基金会 Justin Drake 回复：**

Eth2 使用名为 gossipsub 的协议，其本身是 [libp2p](https://libp2p.io/) 底层网络协议套件的一部分。在 gossipsub 中有一个“topic”的概念，将网络活动划分为不相交的 gossip 频道。


&lt;br/&gt;

# 学习资源

1. **[StillFantastic](https://www.reddit.com/user/StillFantastic/) 提问**

有什么学习 eth2 的最佳资源？


&lt;br/&gt;

**基金会  Justin Drake 回复**

如果你想了解已经上线的内容 (也就是信标链），我会推荐这些：

- 深入[https://beaconcha.in](https://beaconcha.in/)
- 看看[这份规范](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md)
- 看看多份注释版规范 (例如[这份](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/)和[这份](https://github.com/ethereum/annotated-spec)）

如果想看看总体的路线图，可以看 Vitalik 的[这条推](https://twitter.com/VitalikButerin/status/1333922620857745408)


&lt;br/&gt;

**基金会 Barnabé Monnot 回复**

我问过新加入的研究员 Shyam 他觉得哪些内容帮助他深入了解 PoS。

他推荐  [Studymaster](https://ethereumstudymaster.com/courses/ethereum-2-0-studymaster-program/) 和 [ethos.dev](https://ethos.dev/beacon-chain/) ，还有 Justin Drake 提到的注释版规范。


&lt;br/&gt;

2. **[llevar](https://www.reddit.com/user/llevar/) 提问**

如果想了解更多加密货币经济学和货币政策，你们推荐哪些资源？你会推荐以太坊作为一个平台来建立一条具有自定义共识机制的区块链吗（如果推荐，为什么），或你觉得有其他更适合的平台，如果有的话使哪个？

&lt;br/&gt;

**基金会 Barnabé Monnot 回复**

我真的很喜欢 Shermin Voshmgir 著的“ [Token Economy](https://medium.com/token-kitchen/publishing-token-economy-on-github-under-cc-by-nc-sa-ec569008a5dd)”， 虽然它更多是关于代币经济学，而不是严格意义上的货币政策。我想现在还没有把加密货币经济学和货币政策联系起来的权威文本，大概是我们现在还处于早期吧，但看到很多非常迷人的不同货币实验！

你不须在以太坊上搭建一条新的区块链，但现在大家很喜欢用以太坊虚拟机作为新区块链的执行引擎，尽管共识可以是其他东西。除此外，这个想法不久后可以移到在 rollup 上实现，这些 rollup 支持各种不同的执行，同时与以太坊基础层享有同样的安全性。关于这个问题，我有写过[文章](https://barnabe.substack.com/p/eth2)。


&lt;br/&gt;

# 团队

1. **[SporeDruidBray](https://www.reddit.com/user/SporeDruidBray/) 提问**

Robust Incentive 小组一开始是为了什么成立的？这个小组未来发展规划是什么样的？一般来说，这些小组的理念/方法论是什么？

你觉得 Ethresearch 的未来会越来越接近学术型吗 (例如，概述自私挖矿的论文，或 Roughgarden 关于 1559 的论文）？P.S. 不妨看看 [Barnabe 的论文](https://twitter.com/barnabemonnot/status/1364096212517855236?s=21)！


&lt;br/&gt;

**基金会  Barnabé Monnot 回复**

谢谢你，SporeDruidBray :)

我在这个小组在2020年 1 月成立时就加入了，因为有一个提案需要做更多经济学/算法博弈论的研究。这个小组的未来看起来很光明！最近有一名新的研究员加入了我们，他叫 Casper，还有一名研究实习生 Shyam 在今年夏天会与我们一期工作 (请看看他的[研究成果](https://shsr2001.github.io/beacondigest/)！）

我们总的理念还是解决关于激励设计和分析的问题。模拟分析时我们的主要工具，你可以看看我们在 [EIP-1559](https://ethereum.github.io/abm1559) 和[信标链](https://ethereum.github.io/beaconrunner/)上的研究成果。正如你在推特上指出的，我们不回避使用形式分析 （在这点上也要感谢我的合著者们），而且我们也尝试给研究这些问题的学者提供意见。我有一篇关于我们的具体方法论的稿子，准备好后，我很乐意与大家分享！

我没有在学术界呆很长时间，因为基本上我完成博士学位后就加入以太坊基金会了，但我不觉得 [ethresear.ch](http://ethresear.ch) 与“学术风格”相去甚远。通常在成为正式论文前，初步结果都会在这里发布，但主要的想法都会直接在这里呈现。这里吸引我的地方时研究过程的开放性，我也尝试把部分研究成果放在 notebook 上。我非常热衷于尽可能地遵循开放的科学原则，然后以在 notebook 上可复写的结果作为媒介。我认为这是必要的，因为我们正在构建的是一个开放的协议，而这个开放性可能也正是我们获得关注、人们愿意花时间审阅提案、参与研究和构建东西的原因。


&lt;br/&gt;

2. **[t00faan](https://www.reddit.com/user/t00faan/) 提问**

以太坊基金会团队你们好，感谢举办这次 AMA。我是一名软件工程师，现在已经有几年的工作经验。请问我可以如何加入以太坊基金会研究团队的研发工作中？有哪些先决条件？我怎样才能获得这样的机会？

&lt;br/&gt;

**基金会 Danny Ryan 回复**

我建议你加入 Eth R&amp;D 的 discord——[https://discord.gg/qGpsxSA](https://discord.gg/qGpsxSA)

关注并参与你感兴趣的对话。在哪里，你会越来越清楚哪些地方需要帮忙和做贡献——开一个 PR、解决一些文档问题，修改拼写错误、写释义性文章等。为开放资源做贡献是有感染力的。踏出第一步，就有可能有机会了。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊基金会第六次Reddit AMA（上）]]></title><description><![CDATA[本期主题：共识机制、合并、分片、质押及 Layer2]]></description><link>https://www.ethereum.cn/Eth2/ama_we_are_the_efs_research_team_6_23</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/ama_we_are_the_efs_research_team_6_23</guid><pubDate>Thu, 24 Jun 2021 00:00:00 GMT</pubDate><content:encoded>

编者注：北京时间6月23日晚，以太坊基金会研究团队在 Reddit 论坛进行了第六次 AMA，包括以太坊共识机制、质押、合并、分片、Layer2 、状态管理及以太坊经济机制等众多主题。ECN 对大部分问答进行了筛选整理，并编译成文。需要注意的是，基金会研发团队成员就某些话题存在个人的看法和推测，为避免曲解，请以原贴为准。

由于篇幅较长，本文将作上下两期发布，本期主题包括共识机制、合并、分片、质押及 Layer2，下期主题将包括状态管理、无状态性、经济机制、EIP-1559及密码学等。

Reddit AMA链接：[https://www.reddit.com/r/ethereum/comments/o4unlp/ama_we_are_the_efs_research_team_pt_6_23_june_2021/](https://www.reddit.com/r/ethereum/comments/o4unlp/ama_we_are_the_efs_research_team_pt_6_23_june_2021/)

&lt;br/&gt;

 # 共识机制 

1. **bcd_is_me 提问：**


以太坊设置了难度炸弹以防止矿工对 ETH2.0 进行分叉 (为了继续挖矿他们很可能会分叉)。怎么阻止他们在 (潜在) 分叉中拆除难度炸弹？

&lt;br/&gt;

**网友回复：**

难度炸弹的目的并不是为了防止分叉，而是确保分叉。我们需要担心的是以太坊会不会走比特币的老路，由于社区对分叉过于忌惮而停滞不前。通过增加难度炸弹，无论如何都需要进行硬分叉，要么切换到 PoS 共识，要么进行 PoW 分叉。

&lt;br/&gt;

**基金会 Carl Beekhuizen 回复：** 

基本上是这样的。如果人们想要继续在 PoW 上挖矿，他们仍然需要分叉。这避免了”默认“选项，每个人在某个时间点都需要做出选择。

&lt;br/&gt;

2. **IronCena 提问：**

你们对混合 POS/POW 机制怎么看？

&lt;br/&gt;

**Vitalik 回复：**

在我看来这不适合以太坊。如果 PoS 的实施结果比 PoW 好，那么也会优于混合机制。我认为没有理由把 PoS 与 PoW 看作是一种凹形关系，而更像是线性关系。也就是说，对于有许多参与者希望“与物理实在具有直接联系” (或其他原因) 的区块链社区来说，混合 PoW/PoS 可能不失为一种好方法，同时还能提高安全性。

&lt;br/&gt;

3. **Bob-Rossi 提问：**

是否讨论过降低 PoW 链区块奖励来抵消 PoS 信标链增发的奖励，防止整个以太坊网络发行量的增加？主要是因为好奇心，我想不会真实发生这种情况，因为矿工们会竭力反击。

&lt;br/&gt;

**基金会 Justin Drake 回复：**

据我所知，没有想过降低 PoW 链的区块奖励。附带说明一下，我相信我们有最好的长期货币政策：最低必要发行量 (minimum viable issuance)，同时为我们提供有保障的安全性和最高可行的稀缺性。 PoS 的短期增发很大程度上只是宏观计划中的微弱干扰。

&lt;br/&gt;

**基金会 Danny Ryan 回复：**

一直都有很多提议讨论在 PoS 到位之前降低 (甚至是提高) PoW 的发行。基于我的了解，这些提议在很大程度上遭到了直接抵制，认为此类辩论和改变只会分散注意力，并可能导致合并延迟或是面临更大的风险。

&lt;br/&gt;

**基金会 Carl Beekhuizen 回复：**

我们没有这种计划。PoW 链的价值和安全性并未因为信标链的发布而发生改变，我们仍然需要为矿工维护网络安全的服务支付费用。

&lt;br/&gt;

# 合并 (The Merge) 及发展规划

1. **squishchaos 提问：**

就研究工作而言，PoS 的合并工作还有什么障碍？在分片上线之前还有什么待解决的问题？

&lt;br/&gt;

**Vitalik 回复：**

在我看来已经没有研究上的问题了。现在已经有了[完整的规范](https://github.com/ethereum/eth2.0-specs#merge)，目前只剩下开发和测试工作。

现在分片也有了[理论上可实现的规范](https://github.com/ethereum/eth2.0-specs#sharding)，但还处于早期开发和迭代阶段。所以只是很多繁重的工作，还有很多关于 p2p 子网的细节，[/u/protolambda](https://www.reddit.com/u/protolambda/) 在这项工作的领导方面非常出色。

&lt;br/&gt;

2. **bcn1075 提问：**

在合并完成之后，是否还会有类似冰河世纪 (难度炸弹) 的方式来强制升级？

&lt;br/&gt;

**基金会 Justin Drake 回复：**

合并之后不会再有类似炸弹的事物。其收益和代价不相符。利益相关者和社区之间的一致性明显强于矿工和社区之间的一致性，因此不需要通过炸弹之类的事物来武装共识参与者。此外，在信标链中每个 slot 是规律的 12 秒，尚不清楚应该如何合理安放炸弹。

根据我的超良货币观点，合并是一个自然的谢林点，从反复扩展的、有时间限制的算法发行到无时间限制的算法发行。合并可能是最后一次对宏观发行政策的干预 (有计划将活跃验证者的数量限制为 2^20 或 2^19，这本身就为日发行量设置了上限)。

&lt;br/&gt;

**基金会 Danny Ryan 回复：**

在这一点上存在一些争论，我个人认为现在是时候停用这种机制了。还有一些关键的升级待实现 (分片和无状态性)，但我相信有足够的需求和动力来完成这些升级，而不必担心停滞。由于完全从 PoW 切换到 PoS，这些升级的对抗性力量也减少了。

**bchain 提问：**

分片会在合并完成之后的 2022 年部署。分片之后是什么计划？2023年我们能期待什么？

&lt;br/&gt;

**基金会 Justin Drake 回复：**

”2022 年”听起来很合理，但与往常一样，日期只是推测。好消息是，表达性智能合约 rollups (例如 Arbitrum, MatterLabs 和 Optimism的产品) 应该会在 2022 年之后提高可扩展性，从而减少实现分片的压力。

基本数据分片之后是一系列安全性升级：秘密领导人选举、托管证明、数据可用性采样、无偏随机性。Vitalik 在[这条推文](https://twitter.com/VitalikButerin/status/1333922620857745408)中对路线图进行了可视化。

&lt;br/&gt;

**基金会 Danny Ryan 回复：**

合并完成之后主要是分片和无状态性/状态管理这两大升级。我目前不确定哪个会先发布，因为它们是非常独立的工作流和升级。在那之后，我想我们可以回到对预编译的争论上:)

&lt;br/&gt;

# 分片

1. **Liberosist 提问：**

我有一些关于数据分片的问题：

- 在数据分片实现后，数据可用性和执行的费用市场是否会互相独立？
- 一层的智能合约 (及其开发者) 如何从数据分片中受益？
- 假如数据分片的安全性要基于委员会，你们预期数据可用性采样 (DAS) 会延迟多久？

&lt;br/&gt;

**基金会 Danny Ryan 回复：**

1. 问题一：是的，到时会有一个类似 1559 的机制使数据进入数据分片，这与应用层的执行费用市场是独立开来的。这是两个独立的资源，因此费用市场将区分开来并独立定价。也就是说，在某些情况下，由于应用层和数据层的使用模式是通用的，在某些情况下对执行的需求可能会和数据需求相耦合。因此在这种情况下，其中一方价格飙升可能会同时引起另一方价格飙升。
2. 问题二：我们预计从数据分片中受益的主要 L1 合约会是通过使用 L1 的数据达到扩容效果的 L2 协议 (即 rollups)。除了 rollups，很可能还有其他特定应用对成本低廉的 L1 数据有所需求。在我看来，一旦以太坊开发社区获取了新的资源，他们会很快找到创新的方法来使用 (并滥用) 它！
3. 问题三：所幸 DAS 可以在不进行共识分叉的情况下。这是因为它本质上是对分叉选择的附加过滤器，可能会限制区块树的某些分支。因此，DAS 可以在早期进行实验，并随时间推移完全实施。基于委员会的安全将首先实现，或与 DAS 同时实现，因为我们将会严重依赖委员对信标链的承诺，为系统核心部分提供分片数据的信息 (因此能够在 EVM 中使用)。至于DAS，经过不断的研发和规范简化，我其实不再那么担心实现的复杂性了。DAS 在很大程度上重用了现有的工程组件，例如用于采样的分片 gossip 通道 (尤其是在主要的 *push* 而不是 *pull* 模型中)。

&lt;br/&gt;

**基金会 Dankrad Feist 回复：**

&gt; 在数据分片实现后，数据可用性和执行的费用市场是否会互相独立？

分片的概念是我们不必拆分 gas 市场。每个分片都有自己的 gas 市场，添加另一个分片不需要降低其他分片的 gas limit。

&gt; 一层的智能合约 (及其开发者) 如何从数据分片中受益？

只有使用数据分片才能从中受益。要么部署会使用数据分片的 L2 协议，要么在你的合约中以其他方式利用数据可能性。如果不使用数据分片，一个反常的结果就是你的交易可能会变得更贵。原因是 L2 将能够更有效地利用 L1 区块空间，因此长期来看会推高 gas 价格。

&gt; 假如数据分片的安全性要基于委员会，你们预期数据可用性采样 (DAS) 会延迟多久？

好消息是 DAS 只需要基础 (诚实多数) 数据分片的软分叉。因此基本上可以在客户端团队准备就绪后立即添加。我希望它能够在分片部署后的 12 个月内实现。

&lt;br/&gt;

2. **redpnd 提问：**

分片上线之后 rollups 会发生哪些改变？

&lt;br/&gt;

**Vitalik 回复：**

Rollups 可以将分片用作数据层 (短期内分片只提供数据存储功能)。这会使得 rollups 的成本降低 100 倍以上，并使现有的”侧链“项目更容易转变成为 rollups。

&lt;br/&gt;

**基金会 Justin Drake 回复：**

数据分片会首先被引入。Rollups 能够将其所有的交易数据存放在数据分片中，并使用 Eth1 的 EVM 来生成 SNARKs (就基于 SNARK 的 rollups 而言) 和欺诈证明 (就optimistic rollups 而言)。

&lt;br/&gt;

## **Staking (以太坊质押)**

1. **u/mm1dc 提问**

我有一个关于提款的问题。

届时开放提款功能，能否支持部分提款？比如说，提出质押所得利润，而保留 32 ETH 继续参与质押？我听说流程为：退出、提款然后重新质押 32 ETH 生成新的验证者节点。这样的话周期太长了，而且对用户很不友好。

&lt;br/&gt;

**基金会 Justin Drake 回答**

&gt; 届时开放提款功能，能否支持部分提款？比如说，提出质押所得利润，而保留 32 ETH 继续参与质押？

这种从一个验证者余额中提到另一个账户中的部分提款被称为“资产转移” (transfers)。正如你所指出的，&quot;transfers&quot;通过解锁验证者余额中除 32 ETH 之外的“超额余额” (excess)，从而提高质押的资本效率。

至于你的问题，没错，最终 Eth2 会支持 ”transfers“。然而正如这条推文所说，&quot;transfers&quot; 功能不会在合并时就立即开放。这是为了降低合并难度，尽快实现合并。

&gt; 我听说流程为：退出、提款然后重新质押 32 ETH 生成新的验证者节点。这样的话周期太长了，而且对用户很不友好。

我们确实计划实现信标链内部”transfers“功能。届时，将不再需要退出、提款和重新激活的过程。

&lt;br/&gt;

**基金会 Danny Ryan 回答**

当提款功能开启之后，对余额中 32 ETH 之外的资产进行提款肯定是一种选项。验证者集的稳定性对客户端架构 (例如，在内存中缓存和处理的共识实体较少) 以及质押的用户体验都有好处。

这个功能的细节有待研究，但我特别喜欢 Jim McDonald 的提议：允许区块提议者在生产区块时发出信号，提取余额中 32 ETH 之外的”超额余额“ (提议链接：[https://ethresear.ch/t/simple-transfers-of-excess-balance/8263](https://ethresear.ch/t/simple-transfers-of-excess-balance/8263)) 这个提议非常好，因为它不需要添加一个新的信标链操作，也不需要处理这些操作所带来的市场影响。但是用户体验方面的缺点是：验证者节点的超额余额提款相对较少 (这有也意味着系统的负载较少)。

&lt;br/&gt;

2. **u/sggts04 提问**

- 合并后有没有可能降低运行一个验证者节点所需的 ETH 门槛？我知道此前定下 32 ETH 限制是，一枚 ETH 大约 100-200 美元，那么现在价格飙升了，运行一个验证者节点的门槛降低到 2-4 个 ETH 是否有意义？
- Vitalik 曾提到，以太坊分片可以轻易扩展至 64 个分片以上。并且 64 只是你们正在努力的目标，那么一旦这个目标达到了，你们认为分片数可以增加至多少？

&lt;br/&gt;

**Vitalik Buterin 回答**

&gt; 合并后有没有可能降低运行一个验证者节点所需的 ETH 门槛？我知道此前定下 32 ETH 限制是，一枚 ETH 大约 100-200 美元，那么现在价格飙升了，运行一个验证者节点的门槛降低到 2-4 个 ETH 是否有意义？

至于为什么当前的验证者节点运行门槛要设置在 32 ETH，请参阅规范注释的这一部分。不幸的是，如果我们将数量减少那么多，很可能的结果是，这个链将变得更加庞大，更难处理，从而降低人们验证它的能力。

我认为的方法有：

1. 接受大部分人无法参与基础层质押这一事实，并努力实现最大程度去中心化的质押池 (这些质押池内部使用多方计算)。
2. 减少存款大小，要知道共识层的 RAM 存储要求很容易膨胀到 8-16 GB；同时，将 epoch 的长度增加至如 256 个 slots，将牺牲敲定的时间。
3. 使用 ZK-SNARK 技术来实现轻量级的验证者；一种称为聚合器的特殊参与者将负责提出聚合签名证明。

&lt;br/&gt;

**基金会 Justin Drake 回答**

&gt; 合并后有没有可能降低运行一个验证者节点所需的 ETH 门槛？

降低运行一个验证者全节点的最低门槛有两个关键优势。首先，这降低了成为个人质押者的门槛，更加有利于去中心化。其次，这增加了验证者节点的数量，从而解锁了更多分片的可能性。从长远来看，我们肯定会努力降低这个门槛，但这是个艰巨的工程挑战 (见下文)。

&gt; 运行一个验证者节点的门槛降低到 2-4 个 ETH 是否有意义？

问题是每个增量验证者节点都会对信标链施加一些非零的计算负载 (如 CPU 和 RAM 负载)。因此，为了让信标链本身去中心化，我们需要限制验证者的数量。就目前而言，信标链可能可以安全地支持 1 M，而无需客户端实现者进行太多工作。(目前我们大概有 18 万个验证者节点。) 虽然在没有重大突破的情况下，2 个 ETH 或 4 个 ETH 的要求听起来相当激进 (当我们升级至后量子聚合签名时就算有重大突破了)，但我们或许可以通过突破 BLS 签名以及客户端 RAM 优化的极限，将门槛降低至 16 ETH 甚至是 8 ETH。

&gt; Vitalik 曾提到，以太坊分片可以轻易扩展至 64 个分片以上。并且 64 只是你们正在努力的目标，那么一旦这个目标达到了，你们认为分片数可以增加至多少？

虽然增加分片的数量绝对有可能 (早在 2018 年我就指出，我们可以利用 BLS 签名将分片数量增加至 1024 个)，但是“轻易”确实有点夸大其词。原因是为了更好的用户体验，我们现在给自己施加额外的约束，即对每个分片区块和每个 slot 进行交联。这种低延迟的交联在信标链上相对密集，因此我们可能会逐步增加分片的数量 (例如，增加到 128，再到 256 等)，而不是一下子从 64 个增加到 1024 个分片。

&lt;br/&gt;

3. **u/TheEvilMonkeyDied 提问**

一旦人们意识到质押带来的巨大好处，当需求大到制约验证者的地步时，是否需要质押候补名单？

&lt;br/&gt;

**基金会 Justin Drake 回答**

&gt; 当需求大到制约验证者的地步时，是否需要质押候补名单？

已经有一个候补名单了！现在等待激活队列中大约有 5,500 个验证者节点。每天约有 900 个验证者节点被激活，因此目前需要等 6 天。

我确实认为合并后会新增大量的验证者节点，原因有二。首先，如果合并进展顺利，验证的风险将大大降低。其次，验证者 MEV (最大可提取价值，maximal extractable value) 将显著增加，包括交易费用的未销毁部分和一些外部支付 (如 Flashbots 贿赂)。这很有可能将质押的 APY 从 个位数推高至两位数。这里有一个计算 APY 的电子表格，自行输入自己的质押数量来预测吧：[https://docs.google.com/spreadsheets/d/1FslqTnECKvi7_l4x6lbyRhNtzW9f6CVEzwDf04zprfA/edit#gid=0](https://docs.google.com/spreadsheets/d/1FslqTnECKvi7_l4x6lbyRhNtzW9f6CVEzwDf04zprfA/edit#gid=0)

&lt;br/&gt;

**基金会 Danny Ryan 回答**

有一个进入和退出的队列。目前，每个 epoch 能够进入 (或退出) 4 个验证者。一天大概有 225 个 epoch，所以每天大约可以激活 900 个验证者节点。

可以在浏览器 [https://beaconcha.in/](https://beaconcha.in/) 中看到，目前在等候被激活的队列中有 5000 多个验证者。所以清空当前队列大约需要 6 天。信标链创世以来，我们见过队伍非常长的时候，也见过排队验证者数量接近零的时候 (能够快速激活)。

随着大家对质押的需求起起落落，我完全可以预料到这种情况会出现大幅波动。从长期来看，这将达到平衡，我预计验证者排队数量大部分时间都会徘徊在零附近。

&lt;br/&gt;

4. **u/Clear_Nose_4265 提问**

对于中心化交易所 (CEX) 正成为新银行，你们有何看法？有没有办法以去中心化的方式质押少量的 ETH？我担心 CEX 的权力会太大。

&lt;br/&gt;

**基金会 Justin Drake 回答**

&gt; 有没有办法以去中心化的方式质押少量的 ETH？

当然。我们投入了大量的精力去设计信标链，使得验证者节点对 MPC 友好，这意味着多方 (例如，32 个 ETH 由 8 个参与方持有，各持有 4 个 ETH) 可以对单个逻辑验证者节点的控制权和所有权进行分割。基础设施的搭建还处于起步阶段，但它即将到来！

&lt;br/&gt;

# 可扩展性/Layer2

1. **u/Liberosist 提问**

随着可编程 rollups 的成熟，有哪些方法可以优化 EVM 和 L1 以提高 rollups 的性能？有没有一些潜在的解决方案来以 L1 的级别完善 L2 的互操作性、通信和可组合性？单个 L2 解决方案可以在多个数据分片上保持可组合性，但对于 L2 间有何好处？

&lt;br/&gt;

**基金会 Justin Drake 回答**

&gt; 有哪些方法可以优化 EVM 和 L1 以提高 rollups 的性能？

EVM (以太坊虚拟机) 对于 optimistic rollups 和基于 SNARK 的 rollup 都非常不友好。为了构建 OVM，Optimism 团队已经研究了 EVM 超过 1.5 年。而 EVM 对 SNARK 就更加不友好了，基于 SNARK 的 EVM 可能还需要数年的时间，甚至可能需要 5-10 年时间。(顺便说一句，MatterLabs 正在构建一个“便携式 EVM”的 SNARK VM。这样的 VM 对于 L2 rollup 来说可能已经足够了，但是不足以使得以太坊 L1 完全 SNARK 化，这才是我们的长期目标)。

我的理解是，对 EVM 进行一些小的调整，拥有 optimistic EVM 可能就变得容易 10 倍。而要实现 SNARK 友好，还需要一些更加激进的改变 (例如，以一个大质数为模进行算数运算，而不是按照传统的二进制算术模 2256 进行运算)，这将大大地提高 SNARK 友好性。令人遗憾的是，由于 EVM 僵化所带来的限制，让 rollup 的成本大大地提高，这也是我个人对可替代的 VMs 持开放态度的原因之一，特别是替代我们技术空白的可执行分片这一块。

&lt;br/&gt;

2. **u/thomas_m_k 提问**

&gt; 我的理解是，对 EVM 进行一些小的调整，拥有 optimistic EVM 可能就变得容易 10 倍。

你有关于这个的样本吗？或者有相关链接以了解更多信息吗？

&lt;br/&gt;

**基金会 Justin Drake 回答**

理想情况是一个操作码，它将 Eth1 区块与状态访问的非确定性数据一起作为输入，执行 Eth1 区块，并返回相应的状态根。这样的操作码会使得构建 OVM 变得非常简单。

&lt;br/&gt;

3. **u/bcn1075 提问**

一些人认为 L2 解决方案会对以太坊的可组合性产生不好的影响。L2 扩容解决方案对可组合性的真正影响是什么？

&lt;br/&gt;

**基金会 Justin Drake 回答**

&gt; L2 扩容解决方案对可组合性的真正影响是什么？

主要的影响是我们从同步可组合性转向了异步可组合性。缩小这一点对于在计算机科学中实现扩容相当重要。例如，“网”是围绕着对服务器和对等节点的异步网络查询而构建的，它本身也在进行异步查询，例如对数据库进行查询。即使是一台独立的计算机在处理多个核心、多个处理引擎 (比如 GPUs) 和 I/O (比如用户输入、外部驱动器) 时，也具有基本的异步性。

好消息是，异步性是完全可管理的，并且几乎在所有情况下都可以从终端用户中完全抽象出来。坏消息是，在很大程度上，必须重新考虑和重新实现区块链可组合性基础设施。我预计将会有一段关于 “rollup 和侧链可组合性” 的实验时期，随后会有一段类似于代币标准化 (例如 ERC20 和 ERC721) 的整合以及标准化时期。

&lt;br/&gt;

**基金会 Dankrad Feist 回答**

我在这里提出另一个答案，因为我非常不同意 Justin Drake 的观点！

我想很多人都没有注意到，当我们的关注点从可执行分片转向数据分片时，“我们是否仍然具有可组合性”的答案已经“完全”改变了。

人们认为“跨分片交易是困难且具有异步性的”。但是对于数据分片，我们不应该讨论分片，而是讨论 “Rollups”。没错，跨 rollup 交易仍然很困难，并且 (大多数) 是异步的。但是一个 rollup 不必只存在于一个数据分片上。事实上，可以构建一个 rollup，这个 rollup 使用 10 个数据分片来发布其所有区块，但是在内部保持了其完整的可组合性。想要以去中心化的形式实现上面的技术是一项艰难的工程任务，但也不是不可能的。

我真的很希望这能实现，希望我们能够打破这种“分片将破坏可组合性”的神话。

也就是说，我确实希望不同社区会有不同的 rollups，这些 rollups 将更加松散地耦合 (异步地)。不管没关系。到时可能会有面向所有交易者的、一个大型的 DeFi rollup (例如，包括所有闪电贷和他们想要的东西)。比方说会有一个大型的针对 “旅行” 分片，其中所有火车票和酒店都可以进行原子预订。等等。

&lt;br/&gt;

4. **u/bcn1075 提问**

L2 解决方案上线、合并以及分片都完成之后，下一个提高网络可扩展性的最大机会是什么？预计的可扩展收益是什么？

&lt;br/&gt;

**基金会 Justin Drake 回答**

让我对长期可扩展性持乐观态度的大趋势是一种较深奥的观察，称之为尼尔森定律。尼尔森互联网带宽定律指出，带宽以每年 50% 的速度呈指数增长。该定律自 1983 年以来一直有效，并且与连续 CPU 计算的扩展 (已基本趋于平稳) 或者 RAM 的扩展 (已显着放缓) 形成鲜明的对比。

带宽是区块链扩容的终极障碍。我们知道如何解决所有其他共识层的计算瓶颈 (例如，磁盘 I/O 可以通过无状态解决，计算可以通过递归 SNARKs 解决)。好消息是，没有理由相信尼尔森定律会很快停止，因为带宽基础设施是可并行化的。例如，要将海底互联网电缆的带宽增加一倍，就需要铺设两倍的光纤电缆和中继器。

尼尔森定律相当于每十年带宽增长 57 倍。因此，如果尼尔森定律再保持十年，我们在考虑可扩展性为 20 个基本 TPS/分片 * 64 个分片 * 100 倍扩容的 rollup * 57 尼尔森扩展 = 730 万 TPS，更何况我们还可以增加分片的数量。正如你所看到的，区块链可扩展性的前景是非常光明的。对于以太坊这样的区块链平台来说，最终能够处理互联网上绝大多数 (如 95% 以上) 的去中心化价值交易是绝对合理的。因为将来会有足够的可扩展性，并且共享安全的网络效应也相当强。

&lt;br/&gt;

5. **u/AllwaysBuyCheap 提问**

有没有可能在没有中间商的情况下实现 zkRollups 的互操作性？

&lt;br/&gt;

**基金会 Justin Drake 回答**

我不确定你指的是哪个特定的中间商。zkRollup 的长期目标是剔除单点故障的可能性。区块构建可以通过 PoS 实现去中心化 (类似于 PoS 侧链) 而 SNARK 证明可以通过一种称为证明携带数据 (PCD, proof carrying data) 的特殊递归 SNARKs 类型来实现去中心化。这种类型的递归 SNARKs允许轻易地将 SNARK 证明任务拆分并分发到相互不信任的证明者中。一旦区块构建和 SNARK 证明实现去中心化，就没有所谓的中间商来看守跨 rollup 活动，尤其是异步可组合性。

&lt;br/&gt;

6. **u/Liberosist 提问**

关于 zkRollups 的一些问题，以及它们如何影响 L1 升级的：

- 假设 zkRollups 证明可编程性有效，正如 zkSync 2.0 和 StarkNet 声称的那样，那么它会是对 L1 可扩展性更好的升级吗？将 EVM 进行 zk-SNARK 化，并且继续关注分片的数据可用性？还是说实现可执行分片更好？
- 另外，StarkNet 已经在测试网上线，并宣布将于今年年底上线。Nethermind 甚至正在开发 一个 EVM &gt; Cairo 的转译器。我看到当前的计划是先实现 zk-SNARK，然后将来再实现 STARKs。假设 StarkNet 可以良好地运行数年，并且 STARK 系列已经准备好生产了，为什么不直接转到 zk-STRAKs 呢？

&lt;br/&gt;

**基金会 Dankrad Feist 回答**

假设我们确实能够实现高效的、完全可编程的 zkVM rollups，我认为可执行分片基本上变得毫无意义。或者这些分片将简单地利用 VM，并宣布其为新的基础层。

[https://twitter.com/dankrad/status/1407456684063219724](https://twitter.com/dankrad/status/1407456684063219724)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊核心开发者会议更新004 ⛓]]></title><description><![CDATA[“合并” 的 eth2 部分已有成熟规范，上海升级有新进展]]></description><link>https://www.ethereum.cn/Technology/allcoredev-update004</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/allcoredev-update004</guid><pubDate>Wed, 23 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [AllCoreDev Updates](https://hackmd.io/@timbeiko/acd/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2Facd-update-004)

&lt;br/&gt;

# 摘要 👀

- 在未来几周内，伦敦升级将在测试网启动。JSON RPC 的变更已经文档化了，还有项目可用于添加 1559 支持的参考手册；
- “合并” 的 eth2 部分已经有成熟的规范了。eth1 部分的相似文档在撰写中，且还会有一份可执行的规范；
- 尽管还没有作出决定，但上海升级的两份候选 EIP 都有了进展：EIP-3074 的审计报告已出， EIP-3540 有了路线图

&lt;br/&gt;

# 伦敦升级测试网

在未来几周内，伦敦升级将会在测试网启动：第一个是 Ropsten 测试网，大约在 6 月 24 日，然后是 Goerli 测试网，计划在 6 月30 日，最后是 Rinkeby 测试网，将在 7 月 7 日升级[0]。具体的升级区块和与伦敦升级兼容的客户端版本可以看[这篇文章](https://blog.ethereum.org/2021/06/18/london-testnets-announcement/)的列表。**如果你还没升级你的测试网节点，现在是时候了！**

在测试网分叉后，我们预期会进行一些测试，用大量交易轰炸网络，以确保在这样的条件下网络依然运行正常。当客户端开发者觉得伦敦升级在各个测试网上的部署都没有问题了，我们就会确定主网分叉的区块高度。考虑到[难度炸弹](https://github.com/ethereum/pm/issues/245#issuecomment-866193842)所在的大约区块高度，主网实际上需要在未来 300,000 到 400,000 个区块里进行分叉。

  - 添加了字段 &lt;span&gt;baseFeePerGas&lt;/span&gt;（译者注：每单位 gas 的基本费用) 到区块头；
  - 添加了字段 &lt;span&gt;maxFeePerGas&lt;/span&gt; (译者注：每单位 gas 的费用上限) 和 &lt;span&gt;maxPriorityFeePerGas&lt;/span&gt; (每单位 gas 的小费) 到 1559 式交易；
  - 在这些交易的收据里添加了字段 &lt;span&gt;effectiveGasPrice&lt;/span&gt; (译者注：交易实际支付的 gas 费用)；
  - 添加字段 &lt;span&gt;eth_feeHistory&lt;/span&gt; (译者注：gas 费用历史数据) 到终端，使钱包更容易根据近期的历史数据提供 gas 预估值。详情看[这里](https://gist.github.com/zsfelfoldi/473e29106d38525de6b4413e2ebcddf1)。
- [1559 钱包参考手册 (1559 Wallet Cheatsheet)](https://hackmd.io/@q8X_WM2nTfu6nuvAzqXiTQ/1559-wallets)，解释了与 EIP-1559 相关的非共识变更，提供了支持这份 EIP 的最佳实践。它具体包括：
  - [Calaveras](https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/calaveras.md) 开发者测试网的说明，现在应用可以用它来测试伦敦升级的内容
  - &lt;span&gt;maxPriorityFeePerGas&lt;/span&gt; （即小费）涉及的多个函数，以及如何在拥堵和不拥堵的情况对其进行设置；
  - 关于如何顺滑地将用户迁移到 1559 式交易的指南

一如既往地，如果你的项目会受 EIP-1559，或更广泛地受伦敦升级影响，你可以在 [Discord](https://discord.gg/B4yx9SQ) 联系客户端团队。

也就是说，伦敦升级要来了🎉 ！

&lt;br/&gt;

#  “合并”⛓️

当大多数客户端团队专注于伦敦和 Altair 升级时，“合并”的进展并没有停止。

首先，在共识层 (即 eth2) 部分已经有了成熟的规范！它的开发工作仍在如火如荼地进行中，你可以在 eth2.0-specs 库里关注内容的更新。

在执行层部分 (即 eth1)，将会有一份关于所需变更的概述。🔜 它将作为一份“主文档”，能链接到更细化的规范变更，这些规范变更会以相应的格式呈现 (例如，EIP 用于引入新的操作码)。

采用不同方法的原因是共识层 (eth2) 与执行层 (eth1) 之间的规范格式是不一样的。

虽然以太坊的规范格式一开始是[黄皮书](https://github.com/ethereum/yellowpaper)，但其大量数学语构的特点使其难以说明变更。相反，我们通常使用[核心 EIP (Core EIPs)](https://eips.ethereum.org/core) 来说明协议规则的变更。这些内容又再反馈到黄皮书上。

另一方面，以太坊 2.0 的规范一开始是用 markdown 文档来写，逐渐发展成现在用可执行的 python 规范。不用说，存在两套不同的方法是远不够理想的！

因此，“合并”的一个辅助举措是为执行层创建可执行的规范，与 eth2.0-specs 库的格式相匹配。这样，我们不仅可以为整个以太坊协议提供一个共同的规范格式，还能从规范生成自动化测试。这仍处于早期，[Quilt 团队已经开了一个 PR，有一个初步的实现](https://github.com/ethereum/eth1.0-specs/pull/219)👀

&lt;br/&gt;

# 上海升级 

如之前的更新提到的，尽管“合并”是伦敦和 Altair 升级后的工作重点，开发者已经对下一次执行层的升级——上海升级有想法了。

这次升级会在“合并”之前或之后进行，取决于二者在 12 月的准备情况，因为届时难度炸弹需要再次被推迟。尽管这次升级目前还没有规范，也没有 EIP 被正式纳入，但有两份候选的：[EIP-3074](https://eips.ethereum.org/EIPS/eip-3074) 和 [EIP-3540](https://eips.ethereum.org/EIPS/eip-3540)。

## EIP-3074

这份 EIP 旨在让智能合约在与用户地址互动上有更多的灵活性。这份 EIP 作者之一的 @lightclient 发的这个[推文](https://twitter.com/lightclients/status/1371911245561917441)很好地总结了它的主要裨益。

有人担心这份 EIP 会改变一些安全假设，特别是关于&lt;span&gt;msg.sender&lt;/span&gt; 代表的地址，以及智能合约可以代表用户账户采取的行为广度。两家审计机构受委托研究这份 EIP，以探索这些安全忧虑：Least Authority 负责研究这份 EIP 本身；Dedaub 负责研究 EIP-3074 会如何影响当前部署了的合约。

[这](https://leastauthority.com/static/publications/LeastAuthority_Ethereum_Foundation_EIP-3074_Final_Audit_Report.pdf)是 Least Authority 的完整审计报告，审计者在最新的一次核心开发者会议里分享了他们研究成果的总结 ([从 1:07:00 开始](https://youtu.be/XYhN26UrJ5o?t=4017))。在该次会议里，Dedaub 也在 Least Authority 的分享后讨论了他们的审计结果，在[推特](https://twitter.com/dedaub/status/1403083441772638211)上分享和总结了他们的报告。

尽管在该次会议里没有对 3074 作出任何决定，这些审计结果有助于澄清纳入这份 EIP 所涉及的安全权衡。同时，有人在 Ethereum Magicians 论坛上提出了 [&quot;3074 的替代方案&quot;](https://ethereum-magicians.org/t/a-case-for-a-simpler-alternative-to-eip-3074/6493) ，这将在本周的核心开发者会议上讨论。

## EIP-3540

此提案依附于已被纳入伦敦升级的 EIP-3541。它引入“一种用于 EVM 的可扩展、版本化容器格式，在部署时进行一次性验证。”这将有助于更好地分离代码与数据，两者现在客户端都需要在运行时间验证。

这个变更对多种用例都有所裨益，比如二层网络的代码验证、多字节操作码，可能会弃用  &lt;span&gt;JUMPDEST&lt;/span&gt; 等。

这份 EIP 作者之一的 Alex Beregszaszi 最近分享了一个[更完整的概述和路线图](https://notes.ethereum.org/@ipsilon/evm-object-format-overview)。

如果时间允许的化，下一次的核心开发者会议会讨论这份 EIP。如果时间不允许的话，可能是再下一次会议。

------

更新到这里就结束了！请留意未来几周在 [blog.ethereum.org](http://blog.ethereum.org/) 上发布的伦敦主网升级公告，以及大约一个月后的以太坊核心开发者会议更新。👋

------

发布于 2021 年 6 月 22 日

------

[0] Kovan 测试网的升级日期还未定，很可能是主网升级之后。以及，OpenEthereum 客户端在伦敦升级后会被弃用。详情请看[这篇文章](https://medium.com/openethereum/gnosis-joins-erigon-formerly-turbo-geth-to-release-next-gen-ethereum-client-c6708dd06dd)。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/6/22]]></title><description><![CDATA[Optimism 将集成多个基础设施；Altair 升级详解]]></description><link>https://www.ethereum.cn/eth-weekly-2021-6-22/</link><guid isPermaLink="false">https://www.ethereum.cn/eth-weekly-2021-6-22/</guid><pubDate>Tue, 22 Jun 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/qDJBML1/30.png)

**Gitcoin Grants 第十轮火热进行中**
开源协作和资助平台 Gitcoin 的第十轮 Grant 已经于6月16日启动，除了常规的基础设施、DApp、社区和 NFT 板块之外，本轮增加了拉丁美洲地区、Gitcoin 建设和 DGOV (去中心化治理) 板块，本轮仍然支持使用二层解决方案 zkSync 进行结算。

![6.22七日谈3](https://i.ibb.co/wKGpxZt/6-22-3.png)

此外，为了提高捐赠的公平性和抗女巫攻击性，Gitcoin 在本轮中开始激励用户进行身份验证，经验证的用户最高能够将其 150% 的捐赠计入匹配资金，而未经验证的用户则默认为 50%。本轮截至时间为 7 月 1 日，在此之前用户都能前往支持优秀的生态项目。
ECN on Gitcoin：https://gitcoin.co/grants/380/ethereumcn-ecn

&lt;br/&gt;

# Eth2

**活动预告：以太坊基金会研究团队即将举行第六次 AMA**

北京时间 6 月 23 日晚上 9 点，以太坊基金会研究团队将在 reddit 论坛举行第六次 AMA。现在已经可以在 reddit 上提前发布问题：https://www.reddit.com/r/ethereum/comments/o4unlp/ama_we_are_the_efs_research_team_pt_6_23_june_2021/

上一期 AMA 整理请阅读：《[以太坊基金会第五次Reddit AMA](https://www.ethereum.cn/ama-we-are-the-efs-eth-20-research-team-pt-5-18)》

&lt;br/&gt;

**Altair 升级讲解**

Danny Ryan 和 Vitalik 在 [PEEPanEIP 系列](https://www.youtube.com/watch?v=iaAEGs1DMgQ) 做了一次关于 Altair 升级即将带来哪些变化的精彩介绍。此期七日谈对 Danny 分享的部分做了编译。

分享概要：

- 惩罚参数更新

  失败模式下更多的惩罚

- 怠工计分机制改革

  更容易从无法做最终敲定的状态恢复，以及更公平

- 同步委员会

  使轻客户端可用的特别角色

  

### 惩罚参数更新

![outline](https://i.ibb.co/YcLKnbR/outline.png)

![punitivity](https://i.ibb.co/tzyV3LG/punitivity-in-altair.png)

根据 EIP-2982，信标链创世时，验证者的惩罚参数与最终设定相比是惩罚力度更小的，因为考虑到给早期的验证者和客户端一个更宽容的环境，鼓励更多的验证者在早期、有更高技术风险的阶段加入。而在 Altair 升级后，怠工惩罚的商从32除以128等于25%，调整为32除以64等于50%，即惩罚从 0.25 个 ETH 变成 0.5 个 ETH。 最终这个惩罚会调整为 1 个 ETH。

`inactivity penalty quotient` （怠工惩罚商）影响的是在区块链因为在线验证者数量不足三分之二无法进行最终确定时对离线状态的验证者的惩罚。这个惩罚现在是比较小的，Altair 升级后这个惩罚会加大一点，这样区块链也能更快恢复到可以进行最终确定的状态。它的设定从`2**26` 变为 `3 * 2**24`，减少了 25%，这应该会缩短 13.4% 的余额扣除时间 (因为扣除时间与这个 quotient的平方根成比例关系)。

`MIN_SLASHING_PENALTY_QUOTIENT` （最低罚没惩罚商）从128变成64。这一点影响的是当你被罚没的时候，你会失去你余额的一部分，通常是 32 除以 128，即 0.25 个 ETH，Altair 升级后是 32 除以64，即 0.5 个 ETH。

`PROPORTIONAL_SLASHING_MULTIPLIER` （成比例罚没乘数）从 1 变成 2。这个乘数是在大型罚没事件中用来保证充分安全性的。在这些事件中，你罚没的数额=初始的罚没惩罚商+在相近罚没时间段与其他验证者数成比例的额外惩罚。在创世时，如果在过去两周里，比如10%的验证者被罚没了，你在这段时间你也被罚没了，那么你的惩罚比例是你余额的10%。Altair 升级后，这个数值就变成 20%。

### 怠工计分机制改革

![phase 0](https://i.ibb.co/8mL8Vg2/phase-0.png)

在阶段 0 ，所有人用的是统一的怠工计分，这导致区块链恢复进行最终确认不稳定，像 Medalla 测试网的情况，而且惩罚一半的在线验证者是非常不公平的。

![altair](https://i.ibb.co/dfkV3GF/altair.png)

在 Altair 升级后，这个机制会用一个数据队列来追踪每个验证者的表现数据。这样可以减少触发无法进行最终确定的机会，对验证者的离线惩罚判断也更公平。

![leak demo](https://i.ibb.co/86C3B2K/leak-demo.png)

![image-20210622144214220](https://i.ibb.co/Tt4wpy5/leak-demo-balance.png)

即使无法进行最终敲定的情况反复出现，那些导致无法敲定的离线验证者的怠工惩罚比率是持续增长的，因为这个机制对每个验证者的离线情况有分别的记录。

![modificatons to the consensus structure](https://i.ibb.co/w0fsVbs/modificatons-to-the-consensus-structure.png)

对共识结构的修改：

添加`inactivity_scores` （怠工计分）列表到 `BeaconState`，以取代之前适用于所有人的计算方法。

把`get_inactivity_penalty_deltas` （获取怠工惩罚差值）改为基于 `inactivity_scores` 列表。

添加每个 epoch 计分变化的 `process_inactivity_updates` （处理怠工更新）。

### sync committes 同步委员会

![sync committee](https://i.ibb.co/SxZGF8j/sync-committee.png)

设置同步委员会是为了让轻客户端作为一等公民！

![validators duties](https://i.ibb.co/mcx42wW/validators-duties.png)

在阶段0，验证者的职责只有区块提议和区块证明。

![new and modify duty](https://i.ibb.co/ThNz8mJ/new-and-modify-duty.png)

新增的同步委员会有以下职责：

- 同步委员会签名 (同步委员会成员对信标区块的每个 slot 签名与广播)
- 同步委员会聚合 (委员会的一个子集会被选出做聚合交易，并把最佳聚合再广播出去)
- 同步聚合打包 (提议者密切注意上一个 slot 的最佳聚合来打包，以最大化奖励)

![modificatons to the consensus structure2](https://i.ibb.co/Qvbjz5H/modificatons-to-the-consensus-structure2.png)

对共识结构的修改：

添加 `sync_aggregate` （同步聚合）和 `BeaconBlockBody` （信标区块主体）来记录签名和奖励参与。`sync_aggregate`  是关于谁参与了以及BLS签名。

添加 `sync_committee` 到 `BeaconState`，用于简化轻客户端。

添加`process_sync_committee`到函数 `process_block`，以验证同步聚合交易的数据，包括谁参与了，签名是否有效，是否指向前一个信标区块，然后给参与者与提议者发小额奖励。

添加`process_sync_committee_updates` （处理同步委员会更新）到 `process_epoch` ，大概每天更新同步委员会的变更数据。

视频：https://www.youtube.com/watch?v=iaAEGs1DMgQ

参考 Vitalik 的注释规范：https://github.com/ethereum/annotated-spec/blob/master/altair/beacon-chain.md#beacon-state-mutators

&lt;br/&gt;

## Eth1

**伦敦升级测试网发布时间**

目前只计划了测试网 (Ropsten, Goerli, Rinkeby) 的伦敦升级时间。一旦此次升级在这些测试网络成功启动，就会确定以太坊主网的升级区块。发布计划和客户端版本如下：

![image-20210622191204https://i.ibb.co/mb5FXj8/6-22-1.png772](https://i.ibb.co/mb5FXj8/6-22-1.png)

![6.22七日谈2](https://i.ibb.co/ydTPswh/6-22-2.png)

关于伦敦升级测试网的更多内容请阅读《[伦敦测试网公告](https://www.ethereum.cn/Eth1.x/london-testnets-announcement)》。

&lt;br/&gt;

**EIP-1559 中烧毁 ETH 是什么体验？**

工程师@mohamedmansour 因应社区想看烧毁 ETH 的愿望，他搭建了[http://watchtheburn.com](https://t.co/0hooTlFCNb?amp=1)，内容包括：

- 新的首页有实时烧毁的数据
- 新页面包括区块、交易和账户
- 全新的设计

来源：https://twitter.com/mohamedmansour/status/1406948839773261829?s=20

&lt;br/&gt;

# Layer2

**区块链数据索引项目 The Graph 将为以太坊扩容解决方案 Optimism 提供支持**

6 月 18 日，The Graph 宣布与 Optimism 达成合作：为在 Optimistic Ethereum L2 上构建应用的开发者提供数据索引和查询服务。一旦 Optimism 公开发布，The Graph 即上线其为 Optimism 提供的服务，为 Optimism 社区的开发者提供支持。准备在 Optimistic Ethereum 上构建应用的开发者现在就可以通过 The Graph Foundation 获得资助，例如使用 Optimism 和 The Graph 构建 dApps、开发 subgraph 工具或者制作教育资料。

在过去的几个月里，The Graph 为 19+ 个基于 EVM 的解决方案提供支持。其中包括扩容解决方案 Polygon (2 月份完成集成) 和 Arbitrum (6 月)，很快 Optimism 也会加入。

在 Optimistic Ethereum 上集成 The Graph 意味着 Optimism 的开发者将更加容易地访问链上数据，这使得开发者共享开放 APIs、调用 subgraphs 更加容易。

来源：https://thegraph.com/blog/graph-optimistic-ethereum

&lt;br/&gt;

**ConsenSys 旗下产品 Infura、Truffle、MetaMask 将为 Optimism 提供支持**

6 月 17 日，区块链技术研发公司 ConsenSys 宣布为以太坊扩容解决方案 Optimism 提供支持。ConsenSys 的开发者套件使得去中心化网络上的开发与在现代云平台一样简单，ConsenSys 旗下的产品如以太坊开发工具 Infura、Truffle 和去中心化钱包 MetaMask 将为 Optimism 提供支持。首先，Infura 将为 Optimism 上的开发者提供 API 服务。其次，Truffle 也将为 Optimism 社区构建所有部署、测试以及运行应用程序所需的工具。并且 Truffle Box 也快推出了，它将简化在 Optimistic Ethereum 上部署应用程序的过程。最后，当用户需要添加 Optimistic Ethereum 的终端至其钱包上时，MetaMask 将为用户提供更方便的确认方式。

来源：https://consensys.net/blog/press-release/infura-truffle-and-metamask-to-support-optimistic-ethereum/

&lt;br/&gt;

**以太坊状态通道扩容解决方案 Raiden Network 发布 Raiden Light Client &quot;Ashvini&quot;**

&quot;Ashvini&quot; 是 Raiden Light Client (轻客户端) 在以太坊主网上发布的首个版本。它是基于 Typescript 编写的 Raiden 的完整实现，它可以在任何支持以太坊的浏览器中运行。Raiden Light Client 的功能与特性和 Raiden Python 客户端版本相同。基本的功能有：

(编者注：上期七日谈简要介绍了 Raiden Python 客户端)

- 创建通道
- 存款至通道
- 从通道中提出部分存款 (不需要关闭通道)
- 关闭通道
- 设置通道
- 发送直接转账
- 发送间接转账
- 接收转账 (接收方节点需要在线)
- 间接转账

Light Client 链接：http://lightclient.raiden.network/

来源：https://raiden-network.medium.com/announcing-the-raiden-light-client-ashvini-release-60d2a66b0d4

&lt;br/&gt;

**L2 Beat 增加对以太坊扩容解决方案 Arbitrum 锁仓资产的追踪**

此前，Layer2 扩容解决方案 Arbitrum Rollup 的合约于 5 月 28 日部署至主网，并面向开发者开放。

![6.22七日谈6](https://i.ibb.co/ph4XQt6/6-22-6.png)

来源：https://l2beat.com/

&lt;br/&gt;

## 生态

**Republic Realm 基金刷新虚拟土地购买记录**
6 月 18 日，投资平台 Republic 旗下的 Republic Realm 虚拟地产基金以超过 91.3 万美元 (1,295,000 MANA) 的总价购入 Decentraland 中编号为 #4247 的地皮，在不到一个月的时间里刷新了月初 Boson Protocol 创下的 70.4 万美元记录。虚拟地产是 NFT 领域中的一种独特用例，用户能够购买并拥有虚拟世界中的土地，例如在 Decentraland 中，用户可以在自有土地上进行建设和开发。

![6.22七日谈4](https://i.ibb.co/3v9HHLt/6-22-4.png)

图注：Republic Realm 所购 Decentraland 土地

来源：https://twitter.com/joinrepublic_RE/status/1405579575417991170

&lt;br/&gt;

**Flashbots 中 MEV 支付占交易费用的百分比呈上升趋势**

Flashbots 的研究员 Robert Miller 在推特中发布了一张关于 MEV 的统计图表 —— Flashbots 的 MEV 支付占一周平均交易费用的百分比。注意：该图表多少有点低估了交易费用，并且只统计了 Flashbots 的区块，但是这个趋势是比较明显的。

![6.22七日谈5](https://i.ibb.co/F7VZCbr/6-22-5.jpg)

Robert Miller 指出，五月份的比例上升很可能有两个原因：1、市场波动；2、交易捆。

除此之外，Robert 还发现 MEV 在矿工赚取的费用中所占比例越来越高，这在 gas 费下降的情况下尤其有趣。

来源：https://twitter.com/bertcmiller/status/1405236836105064458

</content:encoded></item><item><title><![CDATA[Eth2进展更新 (截至2021/6/18)]]></title><description><![CDATA[预计主网 Altair 升级于 8 月进行，Justin Drake 已整理并发布“合并”规范的共识层部分]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-6-18</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-6-18</guid><pubDate>Mon, 21 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_210618)

&lt;br/&gt;

## Top picks 本周推荐

Danny Ryan 和 Vitalik 在 [PEEPanEIP 系列](https://www.youtube.com/watch?v=iaAEGs1DMgQ) 做了一次关于 Altair 升级即将带来哪些变化的精彩介绍。Vitalik 对“[轻客户端同步](https://youtu.be/iaAEGs1DMgQ?t=2172)”的讲解使我恍然大悟——我终于明白各个部分是如何结合在一起的；它没有我想象得那么复杂。

还有这个 [meme](https://twitter.com/Freddmannen/status/1405819270639099907)，看起来！

&lt;br/&gt;

# 信标链

信标链一直正常良好运行——没什么好说的了。信标链的新存款在五月达到了[历史新高](https://www.coindesk.com/deposits-ethereum-2-0-reach-record-high-may-iss-space)——新增 26,681 笔存款。

这周出现的问题：有一百个验证者[每人质押了 64 个 ETH](https://www.reddit.com/r/ethstaker/comments/o19fkz/there_is_a_huge_spike_of_double_deposit_64_eth/)。大家都知道一笔存款需要 32 个 ETH，超出的部分是徒劳的 (不会赚取任何奖励)，且在提款启动之前都需要锁仓大概一年。这些验证者首先[每人质押了 32 个 ETH](https://etherscan.io/tx/0x5f40ae6038f7875946f199893c008c6ab5317fe5cadc95656fd7f7f4b88f4323)，然后在同一个 Eth1 区块里，同一个验证者又在他们现有的存款里再[加入 32 个 ETH](https://etherscan.io/tx/0xbf6d219d87520541ffe93ff383bf944c122f8c2353c2f68fc31f58b32572d7c4) 。这些交易都是通过[Stakefish的](https://etherscan.io/address/0x0194512e77d798e4871973d9cb9d7ddfc0ffd801)批次存款合约完成的，且两笔存款经由的两次调用是具有相同输入数据的。看起来像是简单的用户操作失误，但奇怪的是，第二笔交易的 gas 价格是零，却仍然被打包了。根据 Etherscan 的数据，它们可能已经直接被提交到矿池，因为它们来自一个  F2Pool 的地址。


📣**行动起来**！目前正在使用 Prater 或 Pyrmont 测试网的人，请务必确保在 Goerli 测试网区块 5062605 进行伦敦升级分叉前[升级你的 Eth1 节点](https://blog.ethereum.org/2021/06/18/london-testnets-announcement/)，预计会在 6 月 30 日进行。

&lt;br/&gt;

# Altair 测试网

Altair 是一个计划中的信标链升级，将在几个月后进行。

正如在[常规会议](https://hackmd.io/@benjaminion/ry7yjxcs_#Implementers)里报告的，客户端团队正在实现 Altair 升级的 alpha 7 版本规范。Teku 团队搭起了[一系列的开发者测试网](https://github.com/eth2-clients/eth2-networks/tree/master/teku)，其他团队可以通过同步进行试用。这是一个很好的学习机会，也同时让一些问题浮现出来。

我们在会议里详细讨论了其中一个问题，关于同步委员会应该在什么时候发布它们的签名。问题是，如果另一个节点在收到相关区块前收到了签名，它会把签名视为无效并丢弃它。因此，我们要么需要短时间缓存接收方的签名，要么需要延迟发送方广播签名。

至于 Altair 的计划，我们希望在 7 月 1 日，即下一次会议，确定信标链测试网 (Pyrmont 或 Prater) 的分叉 slot，以期在 8 月可以升级主网。

📣**行动起来**！正在使用信标链测试网的人，请在 7 月留意客户端团队发布的信息，并在要求升级时做好准备。

&lt;br/&gt;

# “合并”

“合并”是指把 Eth1 和 Eth2 两条链合起来，以关闭工作量证明机制。

Justin Drake 已经通过了[“合并”规范](https://github.com/ethereum/eth2.0-specs/tree/dev/specs/merge)的 Eth2/ 共识层部分，并已完成[整理](https://github.com/ethereum/eth2.0-specs/pull/2472)。

在常规[合并会议](https://hackmd.io/@benjaminion/ry7yjxcs_#Regular-Calls)里，我们讨论了用信标链的 RANDAO 替代 Eth1 上即将过时的 &lt;span&gt;DIFFICULTY &lt;/span&gt;操作码的机制，因为大家都知道智能合约有时候会用 &lt;span&gt;DIFFICULTY&lt;/span&gt; 作为随机性的来源。

我们还讨论了记录“合并”所需的 Eth1 变化的流程。基本上，标准的 EIP 流程将适用于影响共识的 Eth1 内容变更。

在完成伦敦升级 (Eth1) 和 Altair 升级 (Eth2) 之前，不要期待有太多关于“合并”的、令人振奋的消息。“合并”的工作在进行中，但只有当开发团队能完全专注其上才能加速。

&lt;br/&gt;

# 质押

[beaconcha.in](http://beaconcha.in/) 的这款很棒的手机应用出了[新版本](https://twitter.com/etherchain_org/status/1402909186913153024)。它有非常酷的新功能，可以远程监控你的质押设备：CPU、内存、网络情况等。目前 Prysm 和 Lighthouse 能提供兼容的指标。

&lt;br/&gt;

# 释义性文章

Reddit 用户 [Liberosist](https://www.reddit.com/user/Liberosist/) 发布了一篇充满洞见的文章《理解以太坊以 rollup 为中心的路线图 ([Understanding Ethereum’s rollup-centric roadmap](https://www.reddit.com/r/CryptoCurrency/comments/nte1h2/understanding_ethereums_rollupcentric_roadmap/))》。这是关于过去一年多来我们称之为以太坊2.0的更新和变更。在几个月前，我写过对这个[不断发展的路线图](https://hackmd.io/@benjaminion/wnie2_210213#Editorial)的看法。

我们一直推动客户端多样性，那么 [Nimbus + Hyperledger Besu](https://etherworld.co/2021/06/03/how-to-become-an-eth2-validator-on-nimbus-hyperledger-besu/) 这个组合怎么样？QuickNode 的这篇文章介绍了如何[运行 Besu](https://www.quicknode.com/guides/infrastructure/how-to-run-a-hyperledger-besu-node)。

Avado 发表了文章《在交易所上质押的危险 vs. 在Avado上质押的好处 ( [Dangers of Staking on Exchange](https://medium.com/avado-node/dangers-of-staking-on-exchange-vs-benefits-of-staking-on-avado-21e961ef03d4) vs. Benefits of Staking on Avado)》，我认为是好文章。我可能是错的，但似乎 Avado 的设备目前只能运行 Prysm 客户端。我会继续关注，看看文章里关于在交易所质押的危险的论点是否同样适用于一个由单个客户端主导做质押的生态。

&lt;br/&gt;

# 媒体及其他资源

注意，*[Beacon Book* 要开始送出去了](https://stateful.mirror.xyz/vIxmsyBIm--ZFs_xQFLIrjpfi4hAfuBfWTjQbivWMzI)！这本书包含了各个领域的开发者和其他人对信标链发展的看法，还有一些非常漂亮的艺术品。

Christine Kim 最新的两期 Valid Points 新闻信：[6.2](https://www.coindesk.com/staking-eth-2-0-lucrative-for-exchanges-web-3-hackathon) 和 [6.9](https://www.coindesk.com/deposits-ethereum-2-0-reach-record-high-may-iss-space)——以太坊冲啊！🚀

至于我们的合作播客：在 [6 月 10 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/ethereum-wallet-mew-staking-through-phone)那期，我们跟来自 MyEtherWallet 的 Kosala Hemachandra 聊了关于直接通过 MEW 钱包质押的话题；在 [6 月 17 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/eth2-0-validator-decentralization)那期，我们讨论了由 Avalanche 区块链团队引发的关于以太坊2.0中“验证者”这个词的小型[推特争论](https://twitter.com/kevinsekniqi/status/1402990295017431041)。我们最后似乎达成了某种程度的[和解](https://twitter.com/kevinsekniqi/status/1405535077803560972)。

&lt;br/&gt;

# 研究工作

MEV (矿工/最大可提取价值) 是一个非常热门的话题。Flashbots 团队对 [Eth2里的 MEV](https://hackmd.io/@flashbots/mev-in-eth2) （即合并后的 MEV) 做了一些研究。提醒一下，Vitalik 关于形成一个[区块构建者市场](https://ethresear.ch/t/proposer-block-builder-separation-friendly-fee-market-designs/9725?u=benjaminion)的这个提案继续吸引大家参与讨论。

事实上，在这周的实现者会议里，Protolambda 解释说如果我们采用的分片设计是类似于专业分片区块构建者与分片区块提议者之间的市场的话，可能会有很大的裨益。他发表了一个[PR草案](https://github.com/ethereum/eth2.0-specs/pull/2486)来解释这个想法。请注意，这些提案并不“解决” MEV 问题；它们只是使所有人可以更平等地提取 MEV，这有助于避免中心化的趋势。我想区块构建者中心化问题是更容易解决的。

值得注意的是，构建者/提议者分离并不是什么新想法了。三年前，在我和 Nicolas Liochon 合写的[这篇文章](https://ethresear.ch/t/exploring-the-proposer-collator-split/1632?u=benjaminion)里 (我在Ethrear.ch上唯一的文章)，我们解构了这个模型的早期版本。我需要再深入思考，但该文章的逻辑大概是不能应用到有 MEV 的系统的，因为提取价值的过程比只是验证交易要专业得多。 

&lt;br/&gt;

# 常规会议

## 实现者会议

第 66 次会议于 6 月 17 日进行。这次的会议没有直播，因为 Danny 那边的带宽出了点问题。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/222)
- [会议视频](https://www.youtube.com/watch?v=ZSMrxG1LAck) (事后上传了)
- [我的记录](https://hackmd.io/@benjaminion/SJoLSp_s_).

## “合并”会议

第六次“合并”会议于 6 月 17 日进行，就在实现者会议之前。

- [会议议程](https://github.com/ethereum/pm/issues/340)
- [会议视频](https://www.youtube.com/watch?v=b5gh0Mw2oPU)
- [Protolambda的记录](https://notes.ethereum.org/@protolambda/Sy54x0_iO)

这次会议仅进行了 30 分钟。

&lt;br/&gt;

# 其他消息

- Lodestar 完成了新的品牌设计。阅读[此文](https://medium.com/chainsafe-systems/lodestars-brand-new-brand-6417d5014aa2)了解详情。

&lt;br/&gt;


# 写在最后…

昨天是 DAO 攻击事件五周年—— 早期以太坊区块链历史上一个关键和决定性时刻。我非常喜欢 Matt Leising 写的这本 *[Out of the Ether](https://www.amazon.com/Out-Ether-Amazing-Ethereum-Destroyed-ebook/dp/B08HSRLSCB/)*，整本书都是关于 DAO 这个事件的。从事件规模来看，DAO 攻击者拿走了 360 万个 ETH，按今天的币价计算价值超过 80 亿美元。不同于平常的 DeFi 薅羊毛事件。

当时，我已经对以太坊产生兴趣几个月了，尽管我还没真正投入到这个领域。但此次攻击事件的戏剧性和精彩之处——技术问题、社区反应、白帽组织、失败的软分叉设计，以及最终的硬分叉——都让深深吸引了我。我彻底入坑了。

关于整个事件的简要介绍，请看 Emin Gün Sirer 的推特。(很多人都知道，Gün 和 Phil Daian 当时发现了代码里的漏洞，但错误认为它是无法被利用的。)

那是多么非凡的时代啊！

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[科普：白话解读“Rollups”]]></title><description><![CDATA[Rollups 是以太坊的“草稿纸”？]]></description><link>https://www.ethereum.cn/Technology/rollups-introduction/</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/rollups-introduction/</guid><pubDate>Sun, 20 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [mechanism.capital](https://www.mechanism.capital/rollups-introduction/)

&lt;br/&gt;

# 介绍

本文就从一个比喻开始吧。

想象一下我们回到了中学的数学课上。我们的老师，和其他中学数学老师一样残忍，给我们列出了一百道长除法问题，每道题的数字都很大。我们的任务是解决尽可能多的问题。但是要注意，我们必须将最终答案和每个计算步骤都写在一张纸上。几分钟内，我们可能就会眉头一皱，意识到问题并不简单。一张纸所能容纳的，除了所有完全解出的答案之外，不可能再包含计算步骤。

这个卡夫卡式的故事与 Rollups 有什么关联呢？

在这个比喻中，这张纸就是一个以太坊区块，数学问题是智能合约事务。目前的以太坊非常拥挤。 每个区块中需要包含的交易太多了。雪上加霜的是，这些交易中的大多数都需要大量计算，例如闪电贷或经过聚合器路由的交易。前 DeFi 时代的简单转账和支付模式已经是过去时了。

这就是问题的关键。正如比喻中的数学老师一样，要求我们把长除法的每一行都塞在一张纸的空间里，以太坊也必须处理和记录每笔交易的每一步计算。

直到 Rollups 的出现[1]。

Rollups 将计算移到了链下进行，同时只在链上存储最少的交易数据。从这个基本意义来说，Rollups 是以太坊的草稿纸，负责处理所有杂乱的数据，允许在单个以太坊区块内“汇总”几何倍数的智能合约交易。

这个比喻有助于厘清 Rollups 旨在解决的问题 (“由于计算过载导致的网络拥堵”)。它甚至提供了 Rollups 解决方案必备条件的大致概念 (“计算移至链下”)。但至于 Rollups 实际的工作方式，它们是什么模样，以及为什么能让像我这样的人感到如此兴奋——我们还需要深入探讨。

&lt;br/&gt;

# 什么是 Rollup？

Rollup 本质上是一条独立的区块链，但进行了修改。与以太坊一样，Rollup 协议具有执行智能合约代码的“虚拟机”。Rollup 的虚拟机独立于以太坊的虚拟机 (即“[EVM](https://ethereum.org/en/developers/docs/evm/)”) 运行，但由以太坊智能合约管理。这种连接使得 Rollups 能够和以太坊进行通信。Rollup 执行交易并处理数据，以太坊接收并存储结果。[2]

从技术层面来说，Rollup 链和其他传统区块链的关键区别在于新区块的生产方式。

通常来说，区块链是由分布式网络中的不同参与者来进行维护 (“矿工”或“验证者”)。这些参与方通过共识机制来共同生产区块。简单来说，参与方投票决定如何处理一组交易，或者说如何构建下一个区块。获得大多数支持的区块就会被永久写进区块链。

相比之下，Rollup 链不遵循“大多数”规则运行。相反，监控 Rollup 状态的一方可以将所谓的“断言” (assertion) 发送回以太坊，说明交易应该如何处理。重要的是，以太坊将接受或拒绝此断言 [3]，无论其他 Rollup 参与方的大多数是否支持此断言。在实践中，这通常意味着 Rollup 中的单个参与方被指定了处理交易和生成区块的任务。[4]

&lt;br/&gt;

# 等等……Rollup是中心化的？

Rollup 区块生产的中心化特性是其能够如此高效处理交易的原因之一。但这也引发了一个显而易见且令人担忧的问题：如果没有大多数共识，Rollup 如何确保区块生产的正确性？如果区块生产者碰巧是恶意的，又会发生什么？

这种中心化不免使习惯了基于共识的区块链用户感到困惑。事实上，如果故事到此结束，我们可能会 (错误地) 得出结论：Rollups 只是“由单个参与方再造的数据库”，正如 Avalanche 的联合创始人 Kevin Seqniqi 最近在[推特](https://twitter.com/kevinsekniqi/status/1380333916519866373)上所说。

实际上，正如我们将看到的，与其说对中心化的指控是错误的，不如说是逻辑上的误导。通常情况下，共识机制不够强大的中心化区块链很容易遭受贿赂和[恶意攻击](https://www.coindesk.com/ethereum-classic-blockchain-subject-to-yet-another-51-attack)的影响。然而，在 Rollups 的特例中，不够去中心化实际上并不会破坏其安全性和完整性[5]。要理解其中的原因，我们需要再进一步。

&lt;br/&gt;

# 数据可用性的重要性

回想一下我们开头的数学作业。用来计算的草稿纸是我们的救命稻草，因为它使我们可以在答题纸上只写问题及其答案。将 Rollups 与草稿纸进行比较，我们则称其“将智能合约计算移到链下，同时仅在链上存储最少的交易数据。”

事实上，链上交易数据的存储对于 Rollups 的运作至关重要。在 Rollups 中，只有计算、数据处理在链下，处理的每笔交易仍将其输入数据 (即“calldata”) 存储在以太坊区块链上。

为什么将交易数据保存在链上这么重要？在数学作业的比喻中，我们交给老师的最后一张纸包括长除法问题及其答案。以便老师事后检查我们的作业，即使我们没有记录单独的计算步骤。同样，链上数据持续的可用性意味着以太坊基础层可以重复 Rollups 上的任何计算。


简而言之，Rollups 的链上数据可用性允许内置的审验过程。以太坊可以对 Rollups 链上处理的交易的正确性进行双重检查，然后再将其永久写入账本，类似美国最高法院的[司法审查](https://en.wikipedia.org/wiki/Judicial_review_in_the_United_States)权。[6]

&lt;br/&gt;

# 局限性也是一种优势

因此，Rollups 的关键特性在于其局限。Rollups 只是将交易推到基础层，无法强制区块链接受，因为以太坊可以在有需要时推翻任何 Rollups 交易。因为它们受制于这个审验过程，所以 Rollup 上的交易被认为缺乏真正的最终确定性。

考虑到 Rollups 的局限性，我们可以再回到其中心化控诉。Rollup 的单个区块生产者可能会尝试恶意处理交易。但如果是这样，以太坊将在审验过程完成后拒绝该批量交易，并且区块生产者将受到惩罚。[7]

现在，“审验过程”究竟如何运作取决于 Rollups 是基于 Optimistic 还是零知识 (点击[此处](https://insights.deribit.com/market-research/making-sense-of-rollups-part-one-optimistic-vs-zero-knowledge/)可了解更多)。但对于两者而言，审验过程仍然比没有 Rollup 的以太坊处理交易的效率要高出几何级。

总之，Rollup 系统基于“制衡” (checks and balances)，确保以太坊仍然是主权链；以太坊主链的共识是事实的最终仲裁者。但重要的是，侧链却不是这种情况。由于缺乏相同的审验流程，侧链通过其完全独立的共识机制处理交易。侧链交易是“最终确定的”，而 Rollup 中交易则不是 (直到在以太坊上得到确认)。因此，侧链需要更强大的信任假设，因为它们不能共享以太坊的去中心化安全性。事实上，我认为侧链更类似于兼容 EVM 的 Layer 1，而不是 Rollups。

&lt;br/&gt;

# 结语

概括来说：Rollups 将计算移至链下以释放更多链上空间。链上数据可用性至关重要，因为它允许以太坊对 Rollup 交易的正确性进行审验。反过来，此审验过程可作为对 Rollup 区块生产的“检查”，从而无需共识机制。

Rollups 最终让以太坊获得了它得蛋糕和好处：它们在不破坏网络去中心化安全性的情况下成倍地释放了更多的链上容量。至少在我看来，这是我们所能期望的最优雅的扩容解决方案。

*感谢 [t11s](https://www.twitter.com/transmissions11) 和 [Hasu](https://www.twitter.com/hasufl) 的评论建议。*

1. 注意：我最近在 Deribit Insights 上开启了 Rollups 系列文章，其中[第一期](https://insights.deribit.com/market-research/making-sense-of-rollups-part-one-optimistic-vs-zero-knowledge/)探讨了零知识 Rollups 和 Optimisitic Rollups 之间的一些差异。许多读者问我是否有非技术性的 Rollup 介绍文章推荐，因为我的文章假设读者具备了这个主题的基础知识。事实上，有许多有用的概述 (参阅[此处](https://vitalik.ca/general/2021/01/05/rollup.html)、[此处](https://medium.com/offchainlabs/whats-up-with-rollup-db8cd93b314e)和[此处](https://medium.com/matter-labs/optimistic-vs-zk-rollup-deep-dive-ea141e71e075))。但是我还没找到针对初学者的绕开了技术术语 (至少在可能范围内) 的全面介绍。以下介绍旨在填补这一空白。

2. 顺便说一句，这种连接是通过称为“状态根”的东西在链上维护的，它跟踪 Rollups 的内部状态——账户余额、交易、代码等。请参阅 Vitalik 的[介绍](https://vitalik.ca/general/2021/01/05/rollup.html)了解更多细节。

3. 事实上，在 Optimistic Rollup 中，即使所有其他网络参与者不同意，一方也可以 (正确！) 处理交易。这是 Optimistic Rollup 的“1 of N”诚实参与者假设，我在[这篇 Deribit 文章](https://insights.deribit.com/market-research/making-sense-of-rollups-part-one-optimistic-vs-zero-knowledge/)“Security Considerations”部分中进行了更深入的探讨。

4.  区块生产者角色在 Optimistic 和零知识 Rollup 中有不同的要求。有关这方面的更多信息，请参阅 [Deribit 文章](https://insights.deribit.com/market-research/making-sense-of-rollups-part-one-optimistic-vs-zero-knowledge/)的同一部分（“Security Considerations”）。

5. Haseeb Qureshi 关于去中心化的文章[发人深省](https://haseebq.com/why-decentralization-isnt-as-important-as-you-think/)。Qureshi 的论点是，去中心化本质上并没有价值，相反，中心化本质上也不是坏事。虽然 Qureshi 在文章中没有讨论 Rollups，但他的论点仍然非常相关。

6. 在马布里诉麦迪逊案 (1803) 中，马歇尔法院裁定最高法院有权推翻其认为违宪的国会立法，有效地赋予司法部门对所有立法事项的最终决定权。

7. 事实上，ZK Rollups 中的区块生产者以密码学形式禁止欺诈，因为交易的零知识证明本身可能是无效的。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[伦敦升级测试网公告]]></title><description><![CDATA[伦敦升级测试网的区块高度、日期和客户端版本已确定]]></description><link>https://www.ethereum.cn/Eth1.x/london-testnets-announcement/</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1.x/london-testnets-announcement/</guid><pubDate>Sat, 19 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Foundation Blog](https://blog.ethereum.org/2021/06/18/london-testnets-announcement/)

&lt;br/&gt;

期待已久的伦敦升级现在已经准备好在以太坊测试网络上部署了！此次升级将首先在测试网 Ropsten 区块 **10499401** 上分叉，预计将在 2021 年 6 月 24 日左右进行。

这是继几个月前主网柏林升级后的又一次升级。伦敦升级工作的启动是与柏林升级的推进同步展开的，客户端团队能够在这么短的时间内发布此次网络升级可谓创纪录！此次升级包括以下 EIP：

- [EIP-1559: Eth1.0 费用市场变更](https://eips.ethereum.org/EIPS/eip-1559)
- [EIP-3198: BASEFEE 操作码](https://eips.ethereum.org/EIPS/eip-3198)
- [EIP-3529: 减少gas返还](https://eips.ethereum.org/EIPS/eip-3529)
- [EIP-3541: 拒绝以 0xEF 字节开头的新地址](https://eips.ethereum.org/EIPS/eip-3541)
- [EIP-3554: 难度炸弹延迟至 2021 年 12 月](https://eips.ethereum.org/EIPS/eip-3554)


Ethereum Cat Herders 上[这篇文章](https://medium.com/ethereum-cat-herders/london-upgrade-overview-8eccb0041b41)介绍了这些 EIP 的细节。

值得注意的是， EIP-1559 虽然向后兼容当前的交易格式，但会对区块头进行修改：增加新的交易类型、新的 JSON RPC 终端，以及改变客户端在多个领域 (挖矿、交易池等) 的行为 。我们强烈建议项目主动熟悉此份 EIP。与 EIP-1559 相关的更多资源可以在[这里](https://hackmd.io/@timbeiko/1559-resources)找到。

&lt;br/&gt;

# 伦敦升级时间

目前只计划了测试网 (Ropsten, Goerli, Rinkeby) 的伦敦升级时间。一旦此次升级在这些网络成功启动，我们就会确定以太坊主网的升级区块，并在以太坊基金会博客和其他地方发布。

发布计划如下：

| 网络  |  区块高度                                     |  预计日期                                    |
| :----------- | :-------------------------------------------------------- | :-------------------------------------------------------- |
| Ropsten      | 10499401                                                  |  2021.6.24                                   |
| Goerli       | 5062605                                                   |  2021.6.30                                   |
| Rinkeby      | 8897988                                                   | 2021.7.7                                     |
| 主网 |  测试网分叉成功后确定 |  测试网分叉成功后确定 |


注意：Kovan 测试完升级的日期会晚点，可能在确定主网分叉区块后进行。

**以太坊节点运行者应该在想要参与的网络的分叉区块之前升级他们的节点。考虑到区块时间的不确定性，建议在预计日期前几天进行升级。请参阅下文，了解应升级的客户端版本。**

&lt;br/&gt;

# 客户端版本

为了与伦敦升级兼容，节点运行者需要升级他们的客户端版本。下表列出了每个客户端在以太坊测试网中支持伦敦升级的版本。**当主网的分叉区块确定下来后，各个客户端会再发布一个新版本。**

| 客户端                | 版本数 | 下载链接                                       |
| :--------------------------- | :-------------------- | :----------------------------------------------------------- |
| go-ethereum (geth)           | 1.10.4                | [下载](https://github.com/ethereum/go-ethereum/releases/tag/v1.10.4) |
| Nethermind                   | 1.10.73               | [下载](https://github.com/NethermindEth/nethermind/releases/tag/1.10.73) |
| Erigon (即 TurboGeth)        | 2021.06.04-alpha      | [下载](https://github.com/ledgerwatch/erigon/releases/tag/v2021.06.04) |
| Besu                         | 21.7.0-RC1            | [下载](https://github.com/hyperledger/besu/releases/tag/21.7.0-RC1) |
| OpenEthereum (f.k.a. Parity) | 3.3.0-rc2             | [下载](https://github.com/openethereum/openethereum/releases/tag/v3.3.0-rc2) |
| EthereumJS VM                | 5.4.1                 | [下载](https://github.com/ethereumjs/ethereumjs-monorepo/releases/tag/%40ethereumjs%2Fvm%405.4.1) |


**注意：OpenEthereum 客户端在伦敦升级后会被弃用**。该团队目前正在与 Erigon 团队合作为用户提供迁移路径。可以在这里了解更多[资讯](https://medium.com/openethereum/gnosis-joins-erigon-formerly-turbo-geth-to-release-next-gen-ethereum-client-c6708dd06dd)。

&lt;br/&gt;

# FAQ

### 作为一名以太坊用户和 ETH 持有者，我需要做些什么？

本文中列出的升级仅影响以太坊测试网，而不影响以太坊主网。 如果您只是以太坊主网的用户，那么您现在无需执行任何操作。

### 作为一名 Ropsten 测试网的矿工，或者 Goerli/Rinkeby 的验证者，我需要做些什么？

首先，下载最新版本的以太坊客户端，如下表所列。 **然后，您需要手动将 Gas 限制目标更改为当前的两倍**。 这是因为一旦 London 升级上线，区块大小将增加一倍，而 EIP-1559 将使区块保持约 50% 的容量。

举个例子，如果在伦敦升级之前你是 Ropsten 矿工，目标区块大小为 8,000,000 gas，那么现在需要将目标设为 16,000,000 gas limit，以保持每个区块的平均交易量相同。**如果你不改变 gas limit，会使网络中的区块大小减小**。下表详细说明了根据客户端更新的具体参数。



| 客户端                       | 参数                                                         |
| :--------------------------- | :----------------------------------------------------------- |
| go-ethereum (geth)           | [`miner.gaslimit`](https://geth.ethereum.org/docs/interface/command-line-options) |
| Nethermind                   | [`TargetBlockGasLimit`](https://docs.nethermind.io/nethermind/ethereum-client/configuration/mining) |
| OpenEthereum (f.k.a. Parity) | [`parity_setGasCeilTarget`](https://openethereum.github.io/JSONRPC-parity_set-module#parity_setgasceiltarget) |
| Besu                         | [`target-gas-limit`](https://besu.hyperledger.org/en/stable/Reference/CLI/CLI-Syntax/#target-gas-limit) |
| Erigon (f.k.a. TurboGeth)    | [`miner.gaslimit`](https://github.com/ledgerwatch/erigon#mining) |

###  如果不是验证节点也不是矿工，那我需要做什么？

下载你所使用的以太坊客户端的最新版本，如上表所示，并且在接下来的几周里关注主网升级公告。

### 如果我是矿工或者节点，但是没有参与升级会怎样？

如果你使用的以太坊客户端未更新到最新版本 (如上所列)，在升级之后你的客户端将同步到分叉前的区块链。将身处不兼容的链上，并且遵循旧规则运行，将无法发送 ETH 或在升级后的以太坊网络中进行操作。

### 以太坊世界中的“网络升级”是什么？

网络升级是对底层以太坊协议的更改，创建新规则来改进系统。区块链系统的去中心化特性使得网络升级的难度更大。区块链中的网络升级需要与社区以及各种以太坊客户端的开发人员进行合作和沟通，以确保过渡顺利进行。

### 在网络升级过程中会发生什么？

在社区就升级应包含哪些更改达成一致后，对协议的更改将写入各个以太坊客户端，例如 geth、Erigon、Besu 和 Nethermind。协议更改在特定区块高度处激活。任何没有升级到新规则集的节点都将停留在旧链上，而之前的规则仍然存在。

### 为什么叫“伦敦”？

在 Istanbul 升级之后，我们计划内的网络升级名称已经用完了。经[提议](https://ethereum-magicians.org/t/more-frequent-smaller-hardforks-vs-less-frequent-larger-ones/2929/33)，我们使用了历届 Devcon 举办地的城市名来命名升级。[Devcon 1](https://archive.devcon.org/#dc-1) 的举办地就是伦敦，[Devcon 0](https://archive.devcon.org/#dc-0) 在柏林举行。

&lt;br/&gt;

# 致谢！

**对参与了研究、策划、实现、测试、破坏、修复、再次测试和部署伦敦的所有人员致以感谢！😁**

感谢 [Henry Be](https://unsplash.com/@henry_be) 提供了本文的封面图！

&lt;br/&gt;

# 免责声明

这是一个不断发展的新兴技术领域。如果您选择实施本文中的建议并继续参与，应该确保了解您可能受到的影响。 您应该了解其中涉及的风险，包括但不限于意外漏洞等风险。如果选择实施这些建议，您将独自承担可能的风险。 这篇文章和建议不涉及任何销售行为，也不构成任何形式的担保，包括但不限于与以太坊网络或此处提及的以太坊客户端相关的所有事宜。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[对 Eth2 里 MEV 的初步探索]]></title><description><![CDATA[文章对 eth2 里 MEV 对验证者奖励的影响进行了定量分析，对 eth2 新共识参与者进行定性分析，以更好了解与 MEV 的互动关系]]></description><link>https://www.ethereum.cn/Ecosystem/mev-in-eth2-01</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/mev-in-eth2-01</guid><pubDate>Thu, 17 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Flashbots](https://hackmd.io/@flashbots/mev-in-eth2)

&lt;br/&gt;

以太坊即将从工作量证明 (PoW) 共识过渡到权益证明 (PoS) 共识协议。实现过渡的开发工作已经进行多年了，并将分多个步骤进行。第一步是在 2020 年 12 月启动信标链。在写此文时，它已启动，并有超过 16 万的验证者，或相当于 [500 万个 ETH 质押](https://www.notion.so/219ab540356cbb839cbe05303d7705fa)在上面了。

第二步是“合并”，可能在 [2022 年年初](https://twitter.com/drakefjustin/status/1379052831982956547?s=20)发生。尽管这一步以外还有很多细节有待解决，但 PoS 以太坊 (eth2) 已经固定下来的内容对我们来说已充分能够分析出 MEV 将是如何的。

在这篇文章里，我们研究 eth2 里的交易排序以及分析 MEV 带来的质押收益。我们发现 MEV 将显著提高验证者的奖励，但可能强化了 eth2 参与者间的不公平。我们还对 eth2 里 MEV 的定性问题进行讨论，例如它的最大利益相关者交易所与验证者池之间的动态关系将是什么样的。

*这篇文章由来自 Flashbots 的 [Alex Obadia](https://twitter.com/ObadiaAlex) 和 [Taarush Vemulapalli](https://twitter.com/taarushv) 共同撰写。[此处](https://github.com/flashbots/eth2-research)有完整分析。*

---

# eth2 总结 

以太坊的共识当前是由矿工通过运行最好的硬件设备以解决工作量证明难题来实现的。从 PoW 共识到 PoS 共识的转变意味着网络将由验证者来维持，这些验证者存入 32 个 ETH 作为保证金，然后对信标链上的状态进行投票以达成共识。验证者这样做是有经济激励的，因为他们的良好行为会得到奖励，而离线或恶意行为会受到惩罚 (例如罚没)。

现在，信标链与 eth1 链式平行运行的，且自 2020 年12 月起一直运行顺利。而”合并“则意味着——你猜对了——[信标链与现在的 eth1 链并在一起](https://notes.ethereum.org/@vbuterin/B1mUf6DXO)。在文章的其余部分，我们将用 &quot;eth1&quot; 指代包含现在的区块和交易数据的以太坊执行引擎，”信标链“指代 eth2 的新底层 PoS 共识机制，而 ”eth2&quot; 指的是“合并”后的以太坊权威区块链，它包含 eth1 的执行引擎以及信标链的共识机制。

eth2 每 6.4 分钟达成一次共识，称为 epoch。每个 epoch 包含 32 个 slot，每个 slot 是 12 秒长，且都是把区块添加到信标链上的机会。在正常的操作条件下，每个 slot 将有 1 个区块，但像验证者离线这种情况会导致一些 slot 不产生区块。

在每个 epoch 里，所有验证者都会被伪随机分配做区块提议或对其他验证者所提议的区块做证明。这些分配证明者和提议者分别会提前 2 个 epoch 和1 个 epoch 得知。在区块的每个 slot里，该区块的所有信息 (包括来自 eth1 和信标链的数据）都将由一个验证者负责提议，非常多的验证者负责证明。证明者需要对信标链三方面的当前值进行投票：链头、被证明的检查点和被最终确定的检查点，如果都准确投票了会得到奖励。^[关于证明与最终确定的更多内容]

&lt;br/&gt;

# eth2 里的 MEV

MEV (Maximal Extractable Value, 可提取最大价值) 指的是一个区块提议者可以从对交易重新排序、审查或在区块里插入交易这些操作里获得的所有潜在价值[2]。为了了解在 eth2 里的交易排序，我们首先关注将会被使用的软件的内部运作。

## eth2 客户端


由于 eth2 本质上是两条链的合并，它的客户端自然由两个子客户端组成，一个用于执行引擎，一个用于共识。值得注意的是，现在的 PoW 以太坊客户端会继续存在于 eth2 里，与信标客户端一起运行，各自承担不同的分工。

eth1 客户端是一个 PoW 以太坊客户端，但除去了它仅专注于 eth1 交易池、eth1 执行有效性、以及 EVM 的共识责任。而信标客户端则负责共识和验证者职责 (例如，信标区块证明和提议)。它们是同时运行的，各自维持着自己的 p2p 网络堆栈 (信标链的 libp2p、eth1 的 devp2p)。

eth2 客户端大概如下修改图所示 (图片来自 Danny Ryan 的[这篇文章](https://ethresear.ch/t/eth1-eth2-client-relationship/7248))。

![https://hackmd.io/_uploads/S1NOqU7K_.png](https://i.ibb.co/KNfcxtf/eth2-client.png)

## eth1 区块提议

就像现在的 PoW 以太坊，在 eth2 里的 eth1 客户端负责维持从它的 p2p 网络里收到交易的本地交易池。如在 [Rayonism 的规范](https://github.com/ethereum/rayonism/blob/master/specs/merge.md#assemble-block)所写的，信标客户端与 eth1 客户端交互，以形成一个 eth1 区块。尽管规范里的通信渠道在成产品时会有改变，但方法的语义应该变化不大：

- 经过几个来回，信标客户端向 eth1 客户端某 eth1 区块的信息 (该区块由它的交易池所收到的交易组成) ，检查它是否符合各种有效性条件。
- 当信标客户端收到了 eth1 区块，该区块也符合了各种有效性验证，它会由区块提议者把它打包到当前的信标区块，使其成为证明者要进行投票的数据。
- 然后信标客户端会请求 eth1 客户端把将其链头更新为最新被打包的 eth1 区块。
- 一段时间后，信标区块所在的 epoch 会被最终确定了，信标客户端会通知 eth1 客户端 eth2 区块已经在共识层被[最终确定](https://hackmd.io/@prysmaticlabs/finality#How-Finality-Works-in-ETH2)了。

![https://hackmd.io/_uploads/HkyBtLQFO.png](https://i.ibb.co/pPqjMvp/two-chains.png)


尽管在 eth2 上达成共识的方式改变了，在每个 eth1 区块里的交易排序还是跟现在一样，都是在软件里对交易进行排序 (就像以太坊的 PoW 客户端 Geth那样运作)，与在 p2p 网络里广播交易。

##  eth2 里存在 MEV 吗？

由于在 eth2 里交易排序的过程与 PoW 以太坊是一样，因此有理由认为 MEV 机会仍将存在，[就像我们今天了解到的情况一样](https://medium.com/flashbots/quantifying-mev-introducing-mev-explore-v0-5ccbee0f6d02)。不同点在于谁拥有排序的最终控制权，即验证者而不是矿工，因为是验证者选择提议的信标区块，它包含了从 eth1 客户端询问到的新 eth1 区块。

![https://hackmd.io/_uploads/ByzeH8NFd.png](https://i.ibb.co/c2ZDT6H/before-after-merge.png)

这意味着像 Flashbot 的  [MEV-geth](https://docs.flashbots.net/flashbots-core/overview) (a modified eth1 client software optimized for MEV extraction) (为提取 MEV 而优化的、修改后的 eth1 客户端软件) 这样的技术仍然可以存在，它们允许 eth1 交易发送者为了他们的交易能排在想要的位置而给区块提议者 (和交易排序者) 小费。在确定了这点后，我们现在可以充分思考验证者通过运行像 Flashbot 这样的软件可以获得多少收益。

&lt;br/&gt;

# 验证者奖励经济分析


开发者 Pintail 最近发布了一份关于信标链验证者奖励的[详细分析](https://pintail.xyz/posts/beacon-chain-validator-rewards/)。我们的研究沿用了他们的方法 (也重新使用了他们的代码)，你可以在[这里](https://github.com/flashbots/eth2-research/blob/main/notebooks/mev-in-eth2/eth2-mev-calc.ipynb)查看，下面是从我们的研究结果里选出的几点总结。我们还建立了一个线上活页夹，你可以直接在你的浏览器里的 Python Notebook 试用。

尽管 MEV 出了名是难以量化的，我们使用 [Flashbots 数据](https://dashboard.flashbots.net/)作为区块提议者从 MEV 中获得的最低额外收入的下限。这是下限是因为只有一部分的 MEV 活动是在 Flashbots 上进行的。

阅读这个分析时需要注意，它只分析了在协议规定的质押收益基础上的 MEV，而不包括区块提议者理应获得的交易费。这样做的主要原因是现在很难预测在 EIP-1559 后的交易费是什么样的。这应该不会是一个很糟糕的假设，因为不打算利用 MEV 的人也不大可能在 `basefee` (基本费用) 之上花多于默认设置的 1 gwei 小费，但这的确意味着 MEV 对质押收益的相对影响是被夸大了。

## 理想情况


让我们先考虑这样一种情况：所有验证者都完美参与并获得协议可能的最大奖励 (即没有罚没情况)，以及所有的奖励都平均分配，因为所有验证者理应在无限的时间里获得相同的提议区块机会。

![https://hackmd.io/_uploads/SJe9Dg2cd.png](https://i.ibb.co/56LyZz0/ideal-case.png)


根据目前的验证者数 (1.6万名)，我们发现 MEV 可以提高验证者奖励 75.3%，或给出 12.86% 的年化率 （没有 MEV 的情况下，质押 ETH 的年化率是 7.35%）。这里的一个启示是，更高的验证者收益意味着会吸引更多 ETH 持有者成为验证者，这意味着以太坊会因为有更多的验证者而变得更安全。

展望不久的未来，当有更多的验证者加入时，验证者收益的增长会变得缓慢，例如，当有 25 万名验证者 (有 800 万个 ETH 被质押）时，MEV 对验证者奖励的提高减少到 60%。如上所述，这份分析没有考虑验证者将获得的交易费用，这会降低 MEV 对收益的相对影响。但是，对于与今天 Flashbots 给矿工带来的额外收益相比，这些数字仍然是有意义的，后者是[大约 5.6%](http://dashboard.flashbots.net/public/question/a353e200-cd4d-44c7-93f6-4b63a8859472)。两者如此大的差异是来源于 [PoS 系统显著降低的发行率](https://www.attestant.io/posts/charting-ethereum-issuance/)。这表明，MEV 的提取在 eth2 将会比在 eth1 有吸引力得多，而这可能会大大推动质押者赚取 MEV 带来的质押收益。

## 以时间和 REV 分布作为变量进行分析

在任何有限的时间范围内，验证者的奖励都会有变化，因为提议区块是有特定的协议奖励的，同时因为一些验证者很幸运，获得多于平均提议区块的机会，而一些验证者没那么幸运，获得比较少的提议区块的机会。

例如，在 100,000 验证者里，每个验证者的区块提议的平均数是每年 26 次，而运气最差的 1% 验证者获得的提议机会最多是 15 个区块，运气最好的 1% 是 39 个区块。

![https://hackmd.io/_uploads/rJfIeqH5O.png](https://i.ibb.co/2yVrRmT/per-year.png)

按照这个逻辑，我们可以根据区块提议运气的三个不同级别绘制出奖励的变化图：

![https://hackmd.io/_uploads/SyhbnlncO.png](https://i.ibb.co/grSysHF/ideal-reward.png)

现在加上每个区块记录在 Flashbots 的、每个区块给矿工的[实际可提取价值](https://hackmd.io/@flashbots/quantifying-REV) (Realized Extractable Value, REV) 的平均值，我们可以对比这三种水平在有和没有 MEV 提取情况下的表现：

![https://hackmd.io/_uploads/SyhoRN2cu.png](https://i.ibb.co/fX00T06/ideal-reward2.png)


没有 MEV 提取的三个级别在这个图表里是无法辨识出来的。这表明，MEV 提取加剧了由区块提议运气带来的不平等。

此外，REV 的分布也是不平均的，可以看作是运气的第二个维度，有些区块会比其他区块有更大的 MEV 奖励。例如，下图显示的是 Flashbots 上最近 10 万个连续以太坊区块 (从区块 11600000 开始）矿工奖励的长尾分布。

![https://hackmd.io/_uploads/rJNAAE39d.png](https://i.ibb.co/TtX7cKn/miner-rev.png)

为了便于观察，我们截取了 x 轴 0—3 个 ETH 的部分，但在我们的样本里，矿工奖励最高可达 101 个 ETH，你可以通过上文我们的分析链接找到。我们把 Flashbots 上的矿工奖励分布用作 REV 分布的指标，可以基于运气最差的 1%、中位数和运气最好的 1%的验证者应该获得的 MEV 奖励对三个级别的运气情况进行定义，并绘制以下图表：

![https://hackmd.io/_uploads/Hy1MkpTcd.png](https://i.ibb.co/THC1W0r/ideal-reward3.png)

尽管前面的图表显示，MEV 加剧了由区块提议运气导致的验证者奖励不平等，这个图表显示的是 REV 的不平衡分布是验证者间不平等的更大源头——特别是考虑到在上一张图里 y 轴的数值跨度是 600% 到 80%。

然而，在现实中，验证者会通过集中在验证者池的资源抵消了由区块提议运气和 REV 分布带来的奖励差异。尽管以太坊 PoS 的设计是验证者做有效证明可以得到相当可观、近乎恒定的奖励 (不同于在 PoW 机制，只有提议了区块才能得到奖励)，在验证者奖励里引入 MEV 可能会成为一种中心化力量，因为它使得单独验证者的操作变得没那么有利可图，而加入到验证池则变得经济上更有吸引力，资金也能更早获得流动性。


最后，我们担心 MEV 会使 eth2 中的寡头情况变严重——有最多份 32 个 ETH 作为押金的实体比那些拥有更少的更快获得财富 (富者更富的态势)。这将使得去中心化的 MEV 提取在 eth2 里变得尤其重要，这样才能保持共识投票权的去中心化。[3]

## 进一步分析

上文分享的 [Python notebook](https://github.com/flashbots/eth2-research/blob/main/notebooks/mev-in-eth2/eth2-mev-calc.ipynb) 有我们分析的其他详细内容，其中我们在模型里把罚没限制纳入为考虑因素，研究在线时间不足和低验证者参与率导致的惩罚是如何受 MEV 奖励影响的。为了简洁，我们不在此赘述我们的结果，但鼓励你去查看并发表你们的意见。

&lt;br/&gt;

# 新的共识参与者

虽然上面的定量分析对开始思考 eth2 中的 MEV 问题很重要，但没有对它的参与者的定性分析是不完整的。如前所述，哈希率离开了需要质押 ETH 的 eth2 舞台。矿工和矿池被新的参与者取代了——对大量 ETH 持有控制权的交易所、协议库、投资基金和验证者库等。根据目前 [beaconcha.in](http://beaconcha.in/) 上的数据， eth2 验证者集的 eth1 存款地址分布可以看出这一点了。

![img](https://i.ibb.co/bBVxdb2/pie-chart.png)

值得注意的是，这个饼图并没有区分拥有共识投票权的最终实体和它运行所在的基础设施。尽管共识投票权中心化问题堪忧，基础设施中心化的情况则没这么严重，因为 PoS 的经济激励机制鼓励设施去中心化，以尽量减少[相关的罚没风险](https://blog.ethereum.org/2020/01/13/validated-staking-on-eth2-1-incentives/)。

具体来说，这意味着像 Kraken 这样持有大量 ETH 的交易所可能会通过以下途径来减少罚没风险：把它们的押金质押在多个基础设施提供商、在不同地区、使用不同的硬件和客户端运行，而不是内部承担这个巨大的基础设施投入与运维。

## 交易所

eht2 中最明显的权力关系变化是交易所作为最大的 ETH 持有者成为了最大的验证者。像 Coinbase、Binance 和 Kraken 这些中心化企业将可能控制最多的验证者 slot。这些参与者所受的法律监管不同于矿池，且在非常多方面享有声誉。这些差异将可能对验证者格局产生不同于矿工格局的新影响，可能影响验证者参与的活动，例如它们接受收入的 MEV 类型。

有趣的是，这些实体还从事质押以外的若干活动，这可能会为这些交易所提供的现有服务和 MEV 提取带来协同效应的新机会。[这里](https://twitter.com/petejkim/status/1391878000866742276?s=20)提到的包括提供特快交易、在交易还没被打包到链上前提供隐私加密货币提款，以及更低的链上费用，相当于用作订单流的加密货币本地支付。

提供的这些服务一开始可能是优势，并能吸引用户迁移到提供这些服务的交易所，结果会让不提供或出于规管原因无法提供这些服务的交易所受损。此外，交易所在 MEV 游戏里的垂直整合 (例如，交易所运行它们的机器人提交交易到它们的验证者节点) 也是一个隐忧，值得我们深入研究。

## 验证者池

eth2 的另一个重要转变是验证者池的出现，它们提供的好处包括：减低质押所需的最低 ETH 数额、启动面向客户的验证者、抵消来自区块提议运气 (MEV + 交易费用) 带来的差异，并提供额外的服务，例如基于它们管理的资金基础的质押衍生品。

像 Rocketpool 和 Lido 这样的元池的出现是一个有趣现象。这些实体与非常多验证者池连接，并可能成为质押量的重要来源，因此可以对验证者池施加影响，例如它们采用 MEV 类型和提供给质押者的利润份额。

这些元池通常提供质押衍生品。这方面的一个例子是，元池能给用户提供代表质押存款 (一般锁在信标链上）的流动代币，这些代币可以在网络的其他地方使用。允许在 DeFi 中使用流动的质押 ETH 代币将进一步增加验证者在 MEV 上赚取的收益。

回顾上文对基础设施去中心化的论述，不难发现交易所是另一种类型的元池，因为它们也可以在后端与验证者基础设施连接。交易所也很可能会提供质押衍生品服务，这些传统机构与本地运行节点的质押者将在多个维度上展开竞争，如去中心化、流动性护城河、以及规管上的灵活性。[4]

&lt;br/&gt;

# 开放性问题


我们对 eth2 里 MEV 问题的探索发现了许多开放性问题，我们计划在未来几个月内进行研究。下面是其中四个：

## eth1 区块提议者市场

由于现在实际上有两个客户端需要运行 (eth1+信标)，单独验证者的 eth1 节点很可能就默认选择像 Infura 这样的服务提供商，因为自己运行的开销很大。这可能在一开始就隐含着 eth1 和 eth2 节点的运行者是分开的。假设这种情况铺开发展，可以想象运行高性能硬件和 MEV 模拟软件的 eth1 节点运行者会形成市场竞争，以满足 eth2 区块提议者的需求。

## MEV 搜索优化的新限制

eth2 里仍然会有像价格套利和清算这样的 MEV 机会，但 MEV 提取所在的系统有一些新的参数，它们可能会改变或引进对 MEV 提取的限制。

出块时间现在是固定在 12 秒，而不像在 eth1 中是可变的，而提议者 slot 是在每个 epoch 开始时就分配的，这意味着提议者最多有 6.4 分钟的时间计算他们的任务 (在 epoch 开始时就分配到的提议者的时间肯定少于 6.4 分钟)[[5]](https://hackmd.io/@flashbots/mev-in-eth2#fn5)。这不仅为验证者提供了更多的时间在 eth1 客户端交易池上运行最佳的 MEV 提取计算工作，而且由于出块时间的可预测性，模拟和执行会变得更容易。

这表明，如果用于计算和执行 MEV 提取策略有更长、更可预测的时间间隔， MEV 提取可能需要更复杂、更大量的计算。

## 领导者选举机制变更

验证者会提前知道他们是否有机会做区块提议 (除非是新 epoch 的第一个 slot)。他们甚至可以 （尽管概率很低）在一个 epoch 里做多个区块的提议者。区块提议者的保证是如何改变 MEV 提取的？那多个区块提议者或连续多个区块提议者的保证呢？

特别地，大型验证者池或交易所很可能分到同一个 epoch 里多个连续的 slot。当某单一实体持有多个连续 slot 并把它们组成的“元 slot”的时候，可能会出现多个区块 MEV 提取的情况，这可能会制造出一个新的攻击向量。  [6][7]


## 二层网络与分片


这篇文章的大部分内容都假设 eth1区块的内容保持现在的样子。然而现实是，大量的交易流将被移到二层，而一层会用作数据可用性层，zk-rollup 和 optimistic rollup 会提交排好序的批次交易。

按照直觉，这将降低验证者从 MEV 中获得的价值。然而，情况会难以预测，因为多个二层网络会带来额外的复杂性，可能会有新的 MEV 形式 (例如跨二层网络、一层与二层间) 出现。另外，在跨二层的交互里，eth1 内的交易批次排序可能仍然非常重要。

同样地，随着 eth2 不断发展、分片进入成熟阶段，信标区块里分片的排序也会变得重要，MEV 可能会成为促进分片交错的激励机制。[8]

---
1. 关于证明与最终确定的更多内容 https://our.status.im/two-point-oh-justification-and-finalization

2. MEV 是一个指标，代表可以从区块链上一个正在生成的区块里，通过交易打包的重新排序或交易审查可以不须许可地提取的总价值。到目前为止，在以太坊上的 MEV 提取主要由 DeFi  交易员和机器人操作员通过执行交易策略实现，因为交易排序在其中非常重要，一小部分 MEV 会通过 gas 费给到参与这次 MEV 交易的矿工。[这里](https://medium.com/flashbots/quantifying-mev-introducing-mev-explore-v0-5ccbee0f6d02d)有更多关于 MEV 的内容 

3. Phil Daian 在[这篇文章](https://pdaian.com/blog/mev-wat-do/)对这个话题进行了讨论。

4. 如果想了解更多质押池与质押衍生品，请阅读[这篇文章](https://research.paradigm.xyz/staking) 

5. https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/#compute_proposer_index 

6. 如果一个池有总验证者数 N 中的 k 个验证者，产生一个独立 slot 的概率是 p=k/N。在一个 epoch 里产生池里两个连续 slot 的概率是$$p_2=\frac{k}{N} \frac{k-1}{N}$$ ![math](https://i.ibb.co/nf1Bcb3/math.png) (因为现在唯一验证者可以在不同 epoch 中产生相邻的 slot，在放开了单个 epoch 的限制后，生成连续两个 slot 的概率实际上会稍微高一点——对于我们在这里关心的更大 k 值来说，这是一个微小影响）。如果我们取相近的数， N=120k 是总验证者数，最大的池 (Kraken) 运行其中的 k=20k 个验证者节点，我们得到 p≃0.17 和 p2≃0.026，也就是2.6%。


7. 另外，Vitalik 在[这篇文章](https://ethresear.ch/t/rng-exploitability-analysis-assuming-pure-randao-based-main-chain/1825) 里也提到在 epoch 末对连续 slot 控制的随机性操纵是存在隐忧的。

8. Vitalik 的[这篇研究](https://ethresear.ch/t/simple-approach-to-incentivizing-shard-staggering/9149)有更多激励分片交错的内容。

$$r^{i}\tfrac{A_{i}(X)-y_i}{X-x_i}$$

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[StarkNet Planets Alpha 版上线 Ropsten 测试网]]></title><description><![CDATA[实现无需许可 zkRollup 的第一步：StarkNet Planets Alpha]]></description><link>https://www.ethereum.cn/Technology/starknet-planets-alpha-on-ropsten</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/starknet-planets-alpha-on-ropsten</guid><pubDate>Wed, 16 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [StarkWare](https://medium.com/starkware/starknet-planets-alpha-on-ropsten-e7494929cb95)

&lt;br/&gt;

# 摘要


- [StarkNet Planets Alpha](https://voyager.online/) — 已经部署在 Ropsten 测试网上，这是我们通往主网的第一步。

- [StarkNet](https://starkware.co/product/starknet/) 是无需许可的、图灵完备的 zkRollup 解决方案。

- 开发者可以无需许可地在 StarkNet 上部署实现其业务逻辑的智能合约。

- StarkNet 的状态转换在链下证明，并在链上验证。

- 与以太坊非常相似，用户可以直接与智能合约进行交互。

&lt;br/&gt;

# 介绍

我们于 2021 年 1 月[公布](https://medium.com/starkware/on-the-road-to-starknet-a-permissionless-stark-powered-l2-zk-rollup-83be53640880)了 [StarkNet](https://starkware.co/product/starknet/) 的路线图。(译者注：路线图详见本周七日谈) 扩容解决方案的圣杯 StarkNet  (i) 支持任意智能合约；(ii) 具有可组合性；(iii) 在去中心化网络上运行。今天我们宣布在 Rosten 上部署阶段一：StarkNet Planets Alpha。该 Alpha 系统支持任意智能合约。今年晚些时候将支持可组合性，再接下来会去中心化 StarkNet。


对我们来说，完全透明并且恰当地设定预期值是非常重要的。本文的目的就是明确地列出 StarkNet 已支持什么功能，什么功能还处于研发工作中。我们今天在测试网上发布的版本仍在开发中。我们认为这个早期版本有助于 StarkNet 以及其工具形成一个健康的生态。我们渴望开发者们加入我们，一起构建 StarkNet 网络，并从社区中获得持续的反馈。

&lt;br/&gt;

# StarkNet Planets Alpha 中有什么？


**功能** ：该 Alpha 版本允许开发者编写和部署用于一般计算的 StarkNet 合约。 不以白名单的形式公开测试网，也就是说任何开发者都可以编写和部署他们想要的任何合约。用户可以通过向这些合约发送交易并检查其状态来与这些合约进行交互。所有合约都存在于一个单独状态中。^[与当前已在主网部署的 StarkEx 所维护的单独状态不同。] 对此状态的更新在链下证明，并在链上进行验证 —— 在 Alpha 版本中，验证是在 Ropsten 上完成的。

**StarkNet OS**：上述功能由一个新操作系统 StarkNet OS 支持。它在 StarkNet 上提供可证明的状态转换。以太坊开发者可以把它当作 EVM ：StarkNet OS 负责调用智能合约函数、处理合约的存储等等。我们将单独发布一篇文章详细介绍 StarkNet OS 的架构。

**Alpha 中没有什么**？这个版本的 Alpha 仍然缺少一些关键的功能，例如 L1 与 L2 之间的交互、链上数据可用性和可组合性。更多相关内容见下。

&lt;br/&gt;

# 踏出第一步

Start out with our [tutorial and documentation](https://www.cairo-lang.org/docs/hello_starknet/).

如果想要参与 StarkNet 的测试网，请先阅读我们的[教程和文档](https://www.cairo-lang.org/docs/hello_starknet/)。

然后，继续浏览我们在 StarkNet 上编写和部署的 “AMM 智能合约示例” ([http://cairo-lang.org/docs/hello_starknet/amm.html](http://cairo-lang.org/docs/hello_starknet/amm.html))。这是一个简单的 AMM，你可以访问此处 ([https://starkware-amm-demo.netlify.app/swap](https://starkware-amm-demo.netlify.app/swap)) 与它进行交互。好了，现在你已经准备好在 StarkNet 上编写和部署智能合约。此外，任何人都可以访问 StarkNet 的区块浏览器 Voyager ([https://voyager.online/](https://voyager.online/))，以查看 StarkNet 的状态。

随着我们继续推出其他功能，我们相信大家开始了第一步的尝试之后，将会做好更充分的准备以在 StarkNet 上构建。我们已经开始计划开展第一期黑客松以及面向开发者的工作坊。

&lt;br/&gt;

# StarkNet 接下来的计划？

我们刚发布的 StarkNet Planets Alpha 版本还欠缺一些功能，将在未来几周逐渐推出：

- L1 与 L2 之间的交互，如：在 L1 存款以及从 L1 中提款的功能。

- 链上数据可用性：在以太坊上发布所有存储变化

- 可组合性：允许合约之间互相通信


这些功能推出之后，我们就准备将 StarkNet 引入以太坊主网。在 StarkNet 的部署路线图中，我们把这一步成为星系计划 (Constellations)。当我们实现这一步时，用户将能够在以太坊主网上构建以及无需许可地部署可扩展的 L2 dApp。

&lt;br/&gt;

# StarkNet 生态系统

我们对 StarkNet 的生态系统感到非常兴奋，因而特此感谢我们迄今为止的合作伙伴。

我们紧密合作的伙伴有：[Nethermind](https://twitter.com/nethermindeth) 和 Nubia 团队、[Alexey Akhunov](https://twitter.com/realLedgerwatch) 、 [Igor Mandrigin](notion://www.notion.so/https%20://twitter.com/mandrigin) 、 [Iddo Bentov](https://www.cs.cornell.edu/~iddo/)、[dOrg](https://twitter.com/dOrg_tech)、[Prof. Tim Roughgarden](https://twitter.com/algo_class)、[Prof. Jeremy Avigad](https://www.andrew.cmu.edu/user/avigad/) 、Yoav Seginer，最后但也十分重要的 [Paradigm](https://twitter.com/paradigm) 团队。

我们早期的合作伙伴有：[dYdX](https://twitter.com/dydxprotocol)、 [Immutable](https://twitter.com/Immutable)、 [DeversiFi](https://twitter.com/deversifi)、[Sorare](https://twitter.com/SorareHQ)、[Celer](https://twitter.com/CelerNetwork) 等等。他们从第一天起就为我们提供了宝贵的意见，并让我们能够为真实用户构建产品级的网络。

我们对社区创造的高质量内容感到兴奋，感谢： [Bobbin Threadbare](https://twitter.com/bobbinth)、[Daniel Kroni](https://github.com/danielkroeni/cairo-playground/blob/main/anon-bank/README.md)、 [Adrian Hamelink](https://twitter.com/adr1anh)、[perama](https://twitter.com/eth_worm)、[Francesco Ceccon](https://twitter.com/ceccon_me)、[Ilian Malchev](http://twitter.com/imalchev) 以及 [Alexandria 团队](https://blockchainpartner.fr/)。

我们渴望看到社区能够构建：开发工具、内容以及 StarkNet 应用程序。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/6/15]]></title><description><![CDATA[StarkNet Planets 推出测试网版本，初定伦敦升级测试网分叉区块]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-6-15/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-6-15/</guid><pubDate>Tue, 15 Jun 2021 00:00:00 GMT</pubDate><content:encoded>![29](https://i.ibb.co/qMDsNt1/cover.png)

&lt;br/&gt;

# Layer2

**zkRollup 解决方案 StarkNet 推出 Planets 的 Alpha 测试版**

零知识证明研究团队 StarkWare 宣布其 StarkNet Planets (行星计划) 的 Alpha 测试网版本已上线 Ropsten。此前，StakWare 于 2021 年 1 月宣布了 StarkNet 的部署路线图：一个去中心化的、无需许可的、抗审查的、由 STARK 支持的图灵完备的 L2 zk-Rollup 解决方案。


StakNet 将分四步推出，分别是：基础搭建、行星计划 (单个App Rollups)、星群计划 (多个App Rollups)、宇宙计划 (去中心化 Rollups)。这次在 Ropsten 测试网推出的版本就是 StarkNet Planets。开发者可以无需许可地在 StarkNet 上构建实现其自身逻辑的应用。此外，StarkNet 的状态转换在链下证明，然后在链上验证。与在以太坊主链上一样，用户可以直接与这些智能合约进行交互。

StarkNet Planets Alpha里有什么：该版本允许开发者编写和部署用于一般计算的StarkNet合约。并且不是以白名单的形式开放—— 任意开发者都可以编写和部署任何他们想要的合约，用户可以通过向这些合约发送交易并检查状态来与它们进行交互。以上的功能是由一个新的操作系统 StarkNet OS 提供支持。

而该 Alpha 版本仍未上线一些关键的功能，比如 L1 和 L2 之间的交互、链上数据可用性、可组合性。

此外，StarkWare 的联合创始人 Uri Kolodny 在评论补充：从 HLLs 到 Cairo 的编译器 (多种形式) 即将推出，但目前，只能基于 Cairo 语言部署 StarkNet 智能合约。

来源：https://twitter.com/ukolodny/status/1404478442436022275

 &lt;br/&gt;

**以太坊状态通道扩容解决方案 Raiden Network 的 2.0 版本 Bespin 上线主网**

[Raiden Bespin](https://medium.com/raiden-network/bespin-mainnet-release-announcement-87f5d5ede018): 以太坊状态通道扩容解决方案 Raiden Network 的Raiden Python 客户端版本“Bespin”上线主网。该版本最大的更新就是改善了传输层和加快了同步时间。同时，该版本为接下来即将发布的 Raiden Light Client 版本打好基础。

文档：https://raiden-network.readthedocs.io/en/latest/getting_started.html

下载：https://github.com/raiden-network/raiden/releases/tag/v2.0.0

来源：

https://medium.com/raiden-network/bespin-mainnet-release-announcement-87f5d5ede018

&lt;br/&gt;

**L2 扩容解决方案 Arbitrum 推出稳定测试网 ArbRinkeby**

以太坊 Layer2 扩容解决方案 Arbitrum 推出测试网 ArbRinkeby，将其作为未来稳定的测试网。

以下是测试网的相关信息：

RPC URL：https://rinkeby.arbitrum.io/rpc

chain id：421611 / 0x66EEB

浏览器：https://rinkeby-explorer.arbitrum.io

开发者可以在 ArbRinkeby 测试网上部署合约，用户可以通过 Arbitrum 的桥存款、提款 ETH 或其他代币。

来源：https://twitter.com/arbitrum/status/1403102638699433984

&lt;br/&gt;



# Eth2

**去中心化质押解决方案 Rocket Pool 完成两轮审计，即将发布主网候选版本**

去中心化质押解决方案 Rocket Pool 发文向社区通报开发进展，包括团队扩张、审计结果以及准备发布主网候选测试版本。经 Sigma Prime 和 ConsenSys Diligence 的两轮审计，Rocket Pool 完成了对合约漏洞、协议设计以及 Gas 消耗的修复和优化，并计划在八月再次由 Trail of Bits 进行主网版本的最终审计，以保障最高安全性。
随着前序的审计和优化，目前团队将全力准备在 Prater 测试网中发布主网候选版本。另外，Rocket Pool 团队近期还提交了 0x02 提款凭证的提案，以便在 Eth1 和 Eth2 合并后，去中心化质押池能够公平分配验证者收益。
来源：https://medium.com/rocket-pool/development-update-june-2021-89f3a83011c0

&lt;br/&gt;

**beaconcha.in 移动端应用 v2.0上线**

beaconcha.in 移动端应用 v2.0 已于 6 月 10 日上线，IOS 和安卓系统皆可用。功能包括：

- 实时在手机监控你的 Lighthouse 和 Prysm 节点
- 支持小组件
- 可选主题
- 支持 Prater 测试网

![beacon](https://i.ibb.co/dKv2Cn8/beaconchain.jpg)

详情：https://kb.beaconcha.in/beaconcha.in-explorer/mobile-app-less-than-greater-than-beacon-node

App：https://beaconcha.in/mobile

&lt;br/&gt;

# 伦敦升级

第 115 次核心开发者会议对伦敦升级就以下议题进行了讨论：

- 测试网 Calavera 的现状和后续工作
- JSON RPC 规范#334
- 黄皮书上 EOA (外部账户) 的说明/EIP-3607/EIPs#3607
- 测试网分叉区块高度



**JSON RPC 规范**

根据 Tim Beiko 的会议记录，关于对 EIP-1559 支持的 JSON RPC，会议做的第一项决定是`effectiveGasPrice&quot;`(即交易实际支付的费用) 的数据存储在`eth_getTransactionReceipt` (交易收据) 上。

PR详情：https://github.com/ethereum/eth1.0-specs/pull/206

第二项决定是关于如何修改，使`eth_call` 适用于 EIP-1559 引入的各种参数。Geth 团队的 Péter Szilágyi 已有一份用于 Geth 的PR，非常详尽周密，其他客户端都表示同意采用相似的方法。

![ethcall](https://i.ibb.co/XVzXHRG/eth-History.jpg)

PR详情：https://github.com/ethereum/go-ethereum/pull/23027

最后一个议题是关于客户端应如何返回 ”priority fee&quot; （即小费) 预估值。目前，很多钱包都依赖于客户端建议的 gas 价格，但 EIP-1559 后，这可能不是一个最佳方法。如果我们返回一个单一值，即添加一个 `eth_maxPriorityFeePerGas` 终端，这可能会导致用户超额支付，因为它们依赖的这个值可能在最近峰期的影响下已过期或有偏差。而且与其他工具相比，加入客户端里的东西更难修改，因为人们依赖客户端的功能，且要处理版本兼容问题。

相反，客户端可以返回最近几个区块的“已消耗gas”和“ priority fee&quot; 数据，这样钱包可以了解网络是否处于拥堵状态，以及在没有拥堵的情况下的最低可接受”priority fee&quot;。（具体说明见上期七日谈）

据此，Zsolt Felfoldi 写了关于`feeHistoroy` (小费历史数据) 的提案，对一个可兼容钱包的新 GPO API 函数进行了定义，调用格式如下：

```
feeHistory(blockCount, lastBlock) (firstBlock, []baseFee, []gasUsedRatio)
feeHistory(blockCount, lastBlock, []rewardPercentile) (firstBlock, [][]reward, []baseFee, []gasUsedRatio)
```

这个函数可以提供所有 1559 API 愿望清单 (见上期七日谈) 的内容。

详情：https://gist.github.com/zsfelfoldi/473e29106d38525de6b4413e2ebcddf1

如果不出其他问题的话，这是会1559 JSON RPC 的最后一个问题了。

&lt;br/&gt;

**黄皮书上 EOA (外部账户) 的说明**

开发者 Dankrad Feist 提出黄皮书存在一个问题：现在用一个非外部账户的私钥发起的交易行为是未被定义的。也就是说，如果有人拥有某个智能合约地址的私钥，他们就可以发起一笔交易。尽管发生的几率很低，它们仍然比找到某个私钥的几率要高得多。解决外部账户与合约地址共谋的方法很简单：由有部署代码的账户发起的所有交易都会被拒绝。

EIP-3607: https://github.com/ethereum/EIPs/pull/3607

开发者认为这个修复不需要通过硬分叉实现 (因此不会对伦敦升级造成影响），客户端都同意应该实现这个 EIP的内容，使之成为标准。Geth 团队说可能会在伦敦前实现，其他客户端也会在它们认为合适的时候实现。

&lt;br/&gt;

**测试网分叉区块高度**

![Image](https://i.ibb.co/dBjxBbZ/fork-block.png)

来源：https://twitter.com/TimBeiko/status/1403390897614561282?s=20

&lt;br/&gt;

# 生态

**以太坊区块链用户与开发者调查**

为了更深入了解以太坊开发者在未来对工具和文档的需求，Ethereum Cats Herders 社区开展了“以太坊区块链用户与开发者调查”。调查对象包括与以太坊区块链有交互、运行 Eth1 或 Eth2 节点，或对区块链技术有贡献的人。如果有兴趣参与，请戳：https://docs.google.com/forms/d/e/1FAIpQLSeugRHv93fizew0zeqXFOOnQIbjbWnVHoThLJR3f3g6gVvXhQ/viewform 

&lt;br/&gt;

**可视化主流借贷协议的贷款量**

@Token Terminal 制作了一个 gif 图以可视化过去一年来以太坊上的借贷协议的日贷款量。从截图可以看出，到今年六月为止，日贷款量最大的是 Aave 协议。

![gif](https://i.ibb.co/1XLtfWd/6-15-gif.gif) 



来源：https://twitter.com/tokenterminal/status/1401901076903776260

&lt;br/&gt;

**NFT的拍卖新纪录**

由 @sillytuna 所有的 “Alien&quot; CryptoPunk #7523 于 6 月 10 日苏富比的伦敦拍卖场以高达 1180 万美元成交，创下单个 CryptoPunk 的新世界记录。

![cryptopunk](https://i.ibb.co/xLs5ssS/nft.jpg)

来源：https://twitter.com/Sothebys/status/1402996062474760193?s=20

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[zkSync 2.0：首个测试网版本上线]]></title><description><![CDATA[zkEVM 测试网 Alpha 版本上线，本文介绍了 zkSync 2.0 的架构]]></description><link>https://www.ethereum.cn/Technology/zksync-2-0-hello-ethereum</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/zksync-2-0-hello-ethereum</guid><pubDate>Sun, 13 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Matter Labs](https://medium.com/matter-labs/zksync-2-0-hello-ethereum-ca48588de179)

&lt;br/&gt;

# 介绍

克服了最困难的技术挑战之后，我们进入了这项工作的冲刺阶段：在兼容 EVM 的环境中部署智能合约。zkSync 推出 zkSync 2.0 首个测试网版本：用户已经可以使用区块浏览器查看 zkSync 2.0 的交易活动。在本文中，我们将深入解释每个关键组件，公布进度更新以及下一个版本的计划。

&lt;br/&gt;

# 关键成就

- **在密码学方面**，zkEVM 的指令集已经确定下来，并且两种实现都已经完成：在电路中和在执行环境中。
- **在编译器方面**，用 Solidity 和 Zinc 编写的智能合约现在可以编译到 zkEVM 字节码中。
- **在核心基础设施方面**，全节点集成已完成，并且能够成功地部署和执行已编译的智能合约。

虽然 zkEVM 和 2.0 的核心基础设施已经准备好向公众公开，但是该版本的编译器还需要更多工作进行完善，以应对所有极端情况。为了提供更加全面的开发者体验，我们决定在该编译器 100% 可靠之后，将同时开放对 zkEVM、编译器和核心 SDK 的访问。

&lt;br/&gt;

# 比较 zkSync 2.0 和以太坊

两者看起来大部分相同，以下几点是比较重要的区别：

## 智能合约

zkSync 2.0 支持以太坊上的大部分操作码。然而，有以下这些例外：

1. 这次的测试网版本不支持 ADDMOD、SMOD、MULMOD、EXP 和 CREATE2 操作码，但是未来的版本会支持。

2. 我们将暂时不支持 KECCAK256 操作码，而是通过自动调用另一个抗碰撞的哈希函数来替代它的所有调用。KECCAK256 之后将作为预编译引入。

3. 我们决定不再包含 SELFDESTRUCT 操作码，因为以太坊正计划将其移除。

4. 我们可以移除对完整 256 位 XOR/AND/OR 操作码的支持，因为这些操作码只存在于那些用于位屏蔽的已编译的 solidity 代码中。这可以由编译器使用其他操作码来完成。

## Gas

在 zkSync 2.0 中，有一个不同概念的 gas。交易费价格将根据当前 L1 gas 费和生成零知识证明 (ZKP) 的成本而波动。智能合约的调用将有一个最大的 zkEVM 步骤和存储写入参数。



## Web3 API

下一个版本将包含我们 Web3 API 实现，它将与以太坊文档所定义的 Web3 标准兼容。事件将开箱即用，并且所有服务都可以轻松整合。

zkSync 包含 L1 没有的特性，比如已验证和已敲定区块的概念。因此，还会有其他方法让开发者更精确地控制数据。Web3 客户端代码将接收与以太坊相同的数据，但可以通过 `zksync_` 名称空间请求特定的信息。

因为 zkSync 有多种交易类型，并且使用 EIP712 签名，所以 `eth_sendRawTransaction` 数据的格式与 L1 不同。然而，编码与以太坊 ABI 相对应，所以支持它并不困难。

## 对交易进行签名

zkSync 2.0 中的交易可以通过两种方式进行授权 (除了优先级队列机制)：

1. 用户可以通过对一个 EIP712 信息签名，从而用他们普通的以太坊钱包 (如 Metamask 或者任意的 WalletConnect 钱包) 对交易进行签名。

2. 任何账户都可以设置一个公钥来创建我们的内部 Schnorr 签名来对交易进行签名。这允许基于智能合约的钱包与 zkSync 2.0 进行交互，而无需额外的成本发送 L1 的信息。

## 存储效率提升


每个区块只能对存储槽覆写一次。这意味着，如果多个用户与单个 AMM 合约交互，那么该 AMM 合约的存储槽只会被覆写一次。这允许排序者稍后向用户退还单次写入的共享成本。

## 预编译

“预编译”机制是在计划中的，但将在稍后发布。我们计划首先支持 keccak256、sha256 哈希和 ECDSA 恢复原语。此外，我们会根据需求和复杂性考虑包含其他预编译，例如 Blake2f 轮函数 (以当前形式在以太坊中几乎无法使用)。

## 进一步的限制

zkSync 2.0的第一次迭代可能会增加一个额外的限制，即每笔交易只能调用 32 次智能合约，直到可以实现恰当的记账机制。

执行跟踪将有硬限制，但它将与以太坊区块大小目前的限制相当，不应影响大多数。

可能会有更多的限制，但我们的目标是在最终版本中将这些限制尽可能减少到最低限度。

&lt;br/&gt;

# 深入了解 zkSync 2.0 的架构

你可能听说过“区块链的不可能三角”，但当谈到扩容以太坊时，还有第4个因素：可编程性。
所有当前的扩容解决方案都牺牲了一些安全性、去中心化和可编程性来实现可扩展性。zkSync 2.0 的设计结合了下列两大技术突破，旨在最大化实现上面说到的四个特性：

1. zkEVM：为兼容 EVM 的 zkRollup 提供支持的引擎，这是同时提供 L1 安全性以及支持 solidity 智能合约的解决方案。

2. zkPorter：一个链下数据可用性系统，其可扩展性比 rollups 高出两个数量级。

![img](https://i.ibb.co/Sw4gtkX/sidechain.png)

![img](https://i.ibb.co/ykNbGXH/zk2-0.png)


由于 zkEVM 和 zkPorter 是可互操作以及可组合的，zkSync 2.0 显著优于所有其他扩容解决方案。

目前的共识是：[Eth2数据分片](https://vitalik.ca/general/2021/04/07/sharding.html) 将在 [2022年底](https://ethereum.org/en/eth2/shard-chains/) 上线，在不牺牲去中心化的前提下提供更大的数据可用层。**结合了 Eth2 数据分片的 zkRollup 技术是 zkSync 的最终目标，在不牺牲 4 个因素中任意一个的前提下达到 10 万以上的 TPS。**

## 状态树

zkSync 2.0 状态树覆盖了以太坊全部的 160 位地址空间。每个帐户将存在于 zkRollup 部分或 zkPorter 部分的状态中。zkRollup 和 zkPorter 帐户完全相同，除了一点不同：获取[数据可用性](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding)的地方不同。zkRollup 交易数据通过数据调用发布到以太坊主网中；而 zkPorter 的交易数据发布到 zkSync Guardian 网络中，其中，zkSync 代币持有者能够参与该网络的 PoS 机制。

选择在哪里发布数据，是在成本和安全性两者间做出权衡。zkPorter 的交易费比 rollup 的交易费要便宜很多，但是用户的资金可能会被冻结。然而，zkRollup 和 zkPorter 账户的*有效性*是由零知识证明和以太坊来提供保证的。
换句话说，[zkPorter中的资金只能被冻结，不能被窃取](https://medium.com/matter-labs/zkporter-a-breakthrough-in-l2-scaling-ed5e48842fbf)。


zkRollup 和 zkPorter 帐户的互操作性和可组合性给了每个用户成为 zkSync 一流公民的机会。假设，Uniswap 部署在 zkRollup 端，用户可以通过 zkPorter 账户访问，并以最低的手续费进行 swap。zkSync 2.0 是一个专门为整个金融领域用户设计的系统。

## 密码学

我们的虚拟机，通常被称为 zkEVM，它并不是完成 1:1 复刻 EVM 的。但是，zkEVM 旨在能够运行 99% 用 Solidity 编写的合约，并且在遇到回滚和异常时也能维持同样的行为。同时，zkEVM 能够有效率地在一个电路中生成零知识证明。

zkEVM 的实现不需要我们对此前的证明系统做出重大的变动；我们继续使用带有自定义门和查询表的 PLONK  (通常被称为 UltraPLONK) 和以太坊的 BN-254 曲线。这是有利的，因为这个证明系统已经过实战测试 (自 2020 年 6月以来，zkSync 1.0 和其他项目就开始使用这个证明系统)。

**经过几个月的努力，zkEVM 的指令集已完成，并在电路和执行环境中实现。**

这里有一个重要的区别：电路和执行环境中的实现是分开的，用于不同的目的。电路的工作是生成执行跟踪的证明并提供证人，但这个过程十分缓慢。另一方面，执行环境是 zkEVM 在 rust 中的直接实现，效率高、速度快。如果我们在生成证明和执行的过程中都依赖于电路，那么敲定交易需要几个小时。而生成证明和简单执行的分离使得 zkSync 上的交易能够即时结算。

接下来，我们的工作将专注于将 zkEVM 和编译器结合在一起，并和递归结合在一起：区块之间的递归允许我们为 N 个区块发布一个证明；而区块内的递归聚合了区块不同逻辑部分的子证明。这是简单的部分！自 2020 年 6 月以来，zkSync 1.0 主网上已经使用了区块之间的递归聚合证明。更多关于区块内递归和我们的 zkEVM 如何工作的信息，请观看[视频解释](https://www.youtube.com/watch?v=6wLSkpIHXM8&amp;t=735s)。

## 编译器

![img](https://i.ibb.co/VgZ2FpF/compiler.png)


我们同时研究两种针对 zkEVM 的编译器前端：Yul 和 Zinc。[Yul](https://docs.soliditylang.org/en/v0.8.4/yul.html)  是一种 Solidity 的中间表示，可以为不同的后端编译成字节码。[Zinc](https://zinc.zksync.io/) 是我们基于 rust 的语言，用于智能合约和通用零知识证明电路。


因为编译器是使用 [LLVM](https://llvm.org/) 框架构建的，所以可以认为它有一个前端、Yul→LLVM IR 和后端、LLVM IR→zkEVM 字节码。LLVM 的采用带来了几个主要的优点：

1.  LLVM 优化框架是不匹配的：它从 LLVM IR 中生成最有效的 zkEVM 字节码。

2. 有了新版的 Solidity 或 Zinc，编译器前端将处理所有更改，而 LLVM 将使我们无需更改编译器后端。

3. 在未来，如果开发者想基于原生的 Rust 或 Javascript 编写智能合约，只需为该语言构建编译器前端，智能合约就可以在 zkSync 中开箱即用。

编译器的安全性对我们来说是至关重要的，并且已经经过了多个套件的测试:

1. Zinc 和 Yul 编译器中的词法、语法和语义测试。
2. 我们自己针对 Zinc 和 Solidity 的[**集成测试**](https://github.com/matter-labs/compiler-tests/tree/main/solidity/simple)，它贯穿整个智能合约生命周期：从解析源代码到合约部署，再到在 zkSync 上执行交易。
3. 从 Solidity 存储库集成的[**广泛测试套件**](https://github.com/ethereum/solidity/tree/develop/test/libsolidity/semanticTests)，适合我们的集成测试工具。


每个套件已经包含了几千个测试，我们将至少增加一个数量级。

**我们的两编译器已经成功部署并用两种语言执行了简单的智能合约**。但是仍然有更多的优化需要完成，一些复杂的LLVM IR 语句需要转换为 zkEVM 字节码。因此，我们决定等到我们的编译器运行状态更强健再发布。

完成编译器的工作之后，我们将集中精力完善 [Zinc](https://zinc.zksync.io/) 的功能，然后构建 Rust 编译器前端来允许使用原生 Rust 编写智能合约。

## 核心基础设施

zkSync 2.0 核心基础设施由几个关键部分组成：

**全节点**

1. 利用虚拟机的 zkEVM 字节码的预电路执行器环境，
2. 状态在交易发送后的几秒内可用，
3. 过滤掉明显无效的交易 (例如，没有足够的资金进行交易)，这些交易可能会使区块膨胀，
4. 在内存池中执行交易并生成区块。

**证明者**

1. 接收区块的见证者并生成零知识证明，
2. 用于并行证明生成的证明者接口，
3. 证明者自动缩放器，可根据需要创建和终止证明者机器。

**交互器**

1. 用以监测以及与以太坊 L1 交互的工具，

2.  基于代币价格、ZKP 生成成本以及 L1 gas 费来计算交易费用。

**监视器**

Prometheus、弹性、哨兵、正常运行时间，几个单独的事件通知系统以及自定义的安全运行检查服务。

***

zkSync 2.0 的核心基础设施功能齐全，已经集成了 zkEVM 执行器。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[Vitalik: 区块链信任模型]]></title><description><![CDATA[区块链语境下的“信任”究竟为何？对比 Layer2 方案的“信任模型”]]></description><link>https://www.ethereum.cn/Thinking/trust-model</link><guid isPermaLink="false">https://www.ethereum.cn/Thinking/trust-model</guid><pubDate>Fri, 11 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2020/08/20/trust.html)

&lt;br/&gt;

大多区块链应用最有价值的属性之一就是“免信任” (*trustlessness*)，即应用能够以预期的方式保持运行而无需依赖特定参与者以特定形式行事，即使他们将来的相关利益可能产生变化并使其做出意料之外的举动。区块链应用从来都不是完全的免信任化，但是某些应用确实比其他应用的免信任程度更高。如果我们想要朝着信任最小化的目标前进，就需要首先具备辨别信任程度的高低。

首先，我个人对“信任”的简单定义是：**信任就是对他人行为进行假设**。在疫情爆发前，你走在街上不会因为防止有人突然捅你一刀而刻意跟他人保持两米的距离，这就是一种信任：一是信任人们很少会失心疯，二是法制系统的维护者有很强的动机约束这种行为。当你运行其他人写的一段代码时，你信任他们在编写代码时是诚实的 (无论是出于他们自己的良知或是维持声誉的经济利益)，或者至少存在足够多的人对代码进行检查以找到漏洞。不亲自种粮食也是另一种信任，相信会有足够多的人为了获取收益耕种粮食并出售给你。你可以信任不同规模的群体，信任的类型也不尽相同。

为了对区块链进行分析，我尝试将信任分解为以下几个维度：

- 你需要多少人按照你的预期行事？
- 人数总量多大？
- 人们需要什么动机？他们需要是利他主义者，还是唯利是图者？他们[需要避免协作](https://vitalik.ca/general/2017/05/08/coordination_problems.html)吗？
- 如果违反了这些假设，系统会受到多严重的影响？

现在，我们先关注前两点，下面有一个图表：

![https://vitalik.ca/images/trust/trustout.png](https://i.ibb.co/r2SZz48/trustout.png)

绿色越深，表示该模型越健康。让我们对这几个种类进行详细分析：


- **1 of 1**：整个系统只有一个参与者。如果这名参与者按照你预期的那样行事，系统就会 (才会) 正常运行。这就是传统的 “中心化” 模型，也是我们要超越的模型。

- **N of N**：“反乌托邦” 世界。系统中的所有参与者都要按照预期行事，系统才能正常运行，如果其中任何人失败，我们没有补救措施。

- **N/2 of N**：这是区块链的运作方式，如果大部分矿工 (或 PoS 验证者) 是诚实的，区块链就能正常运作。要注意的是，N 值越大，N/2 就越有价值。相比只由少量矿工/验证者控制的区块链，矿工/验证者广泛分布的网络更有意义。尽管如此，由于 [51% 攻击](https://vitalik.ca/general/2020/08/17/philosophy.html)的可能性，我们还是想在这种程度的安全性上更进一步。

- **1 of N**：有很多参与者，只要其中至少有一个按照预期行事，系统就能正常运作。任何基于欺诈证明的系统都属于这一类，信任设置也是如此，尽管在这种情况下 N 值通常较小。请注意，我们确实希望 N 值尽可能大！

- **极少数 of N**：在众多参与者中，只要有固定数量的小部分参与者按照预期行事，系统就能正常运行。[数据可用性检查](https://arxiv.org/abs/1809.09044)就当属其中。

- **0 of N**：系统无需依赖外部参与者即可正常运行。亲自验证区块就归为这一类。


尽管除 “0 of N” 之外的模型都有一定“信任”程度 ，但是这些模型之间存在巨大差异！相信特定的某个人 (或组织) 会按照预期行事，与相信随便一个人都会按照预期形式，是完全不同的情况。相比 “N/2 of N” 和 “1 of 1”，“1 of N” 与 “0 of N” 更相似。可能有人会觉得 “1 of N” 模型与 “1 of 1” 模型很像，因为这两种模型都依赖一名参与者，但实际上这两者十分迥异：在 “1 of N” 系统中，如果该名参与者突然消失或者黑化，大可以重新换一个参与者，但在 “1 of 1” 系统中我们别无他选。

尤其要注意即使是你所运行的软件，其正确性通常取决于 “极少数 of N” 信任模型，以确保代码出现漏洞时有人会进行纠查。明白这一点后，努力使应用中其他部分从 “1 of N” 模型切换到 “0 of N” 模型就像是为你家装上防盗门，但窗户是打开的。


另一个重要的区别在于，如果你的信任假设被打破，对系统的破坏有多大？在区块链上，最常见的两种故障类型是活性故障（liveness failure） 和 安全性故障（safety failure）。活性故障就是你暂时无法进行操作（例如，提币、将交易打包进区块、读取链上数据）。安全性故障就是出现了系统想要预防的情况（例如，无效块被添加到区块链上）。

以下列举了一些区块链 layer 2 协议所采用的信任模型。我用 **“small N”** 来指代 layer 2 系统本身的参与者集合，**“big N”** 来指代区块链底层的参与者。我的假设是 layer 2 的社区总是小于底层区块链。另外，我使用的 “活性故障” 一词特指代币长时间无法提出的情况。无法使用系统但是能够几乎即时提款的情况不算作活性故障。


- “**通道”方案** (Channels，包括状态通道、闪电网络等)：使用 “1 of 1” 信任模型来确保活性 (你的对手方可以暂时冻结你的资金，不过你可以通过将资金分散在多个通道中减少风险)，使用 “N/2 of big N” 模型来确保安全性 (有可能在 51% 攻击中失去资金)。

- **Plasma** (中心化运营者)：使用 “1 of 1” 信任模型来确保活性 (运营者可以暂时冻结你的资金)，“N/2 of big N” 模型来确保安全性 (有可能在 51% 攻击中失去资金)。

- **Plasma**（半去中心化运营方，如 DPOS）：使用 “N/2 of small N” 信任模型来确保活性，“N/2 of big N” 模型来确保安全性。

- **Optimistic rollup**：使用 “1 of 1” 或 “N/2 of small N” 信任模型来确保活性 (取决于运营者的类型)，“N/2 of big N” 模型来确保安全性。

- **ZK rollup**：使用 “1 of small N” 信任模型来确保活性 (如果运营者未能打包你的交易，你可以提款，如果运营者没有立即打包你的取款交易，就无法打包更多交易包，你可以在 rollup 系统中任何一个全节点的帮助下自行提款)；不存在安全故障风险。

- **ZK rollup**（[轻取款增强型](https://ethresear.ch/t/efficient-unassisted-exit-witness-generation-from-rollups/7776)）：不存在活性故障风险和安全故障风险。

最后就是“激励”的问题。要促使参与者遵循预期，你所信任的参与者需要非常利他主义、轻微利他主义，还是说足够理性？默认情况下，“欺诈证明” (fraud proofs) 需要参与者具有轻微利他主义倾向，但其程度取决于计算的复杂性 (详见 “[验证者困境](https://eprint.iacr.org/2015/702.pdf)” )，并且存在很多方式改进过程，使其更加理性。

如果我们增加一种为服务支付费用的机制，那么帮助他人从 ZK rollup 中提款的行为就是理性的，因此几乎没必要担心无法退出 rollup 的问题。与此同时，如果[社区都同意](https://vitalik.ca/general/2020/08/17/philosophy.html)[不接受 51% 攻击下的区块链](https://ethresear.ch/t/timeliness-detectors-and-51-attack-recovery-in-blockchains/6925) (回滚很长的交易历史或是审查区块过久)，那么其他系统所面临的风险可以被减轻。


结论：如果有人说某个系统 “依赖于信任机制”，那我们可以刨根问底！他们的意思是 “1 of 1” 模型、“1 of N” 模型还是 “N/2 of N” 模型？该系统需要参与者是利他主义还是理性主义？如果是利他主义，参与者的代价有多大？如果违反了假设，需要等待多久才能取回自己的资金？几个小时？几天？还是永远被冻结？明白这些问题后，我们可能对于是否采用该系统会有截然不同的答案。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth1与Eth2合并后，以太坊如何发展？ (视频)]]></title><description><![CDATA[Vitalik 分享了合并后他心中以太坊在短期、中期和长期的规划]]></description><link>https://www.ethereum.cn/Technology/what-happens-after-the-merge</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/what-happens-after-the-merge</guid><pubDate>Fri, 11 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [EthGlobal](https://www.youtube.com/watch?v=7ggwLccuN5s)

&lt;br/&gt;

2020 年的 12 月，Eth2 的信标链创世，至今已运行了半年，但它其实还没开始成为以太坊数据的共识层，Eth1 与 Eth2 目前是两条平行运行的链。这样的安排一方面让信标链先健康运行一段时间，修复漏洞，社区可以开发 Eth2 上的应用与生态等，另一方面是证明给社区看 PoS 是真的会发生的。等信标链成熟后，根据现在采用的可执行信标链方案，Eth1 作为执行层 (execution chain)，它的状态、执行、交易等都会并入到作为共识层 (consensus chain) 的信标链里，成为 Eth2 的一部分，每个 PoS 区块都将包含执行层的数据，同时，创建新区块时就不再需要 PoW 机制了，也就实现了Eth1 到 Eth2 的过渡。

关于实现合并的时间，根据第 111 次核心开发者会议，难度炸弹时间定在了 2021 年 12 月，计划实现合并的时间理想情况下是12月，更现实的时间是 2022 年年头。

那么在实现了 Eth1 到 Eth2 的过渡后，What&apos;s next?

在 4 月 EthGlobal 举办的 Scaling Ethereum 系列活动中，Vitalik 分享了合并后他心中以太坊在短期、中期和长期的规划。ECN 对视频的讲演部分做了双语字幕， Q&amp;A 部分做了不完全文字转译。此外，由于视频涉及内容广泛，我们还对Vitalik的幻灯片内容进行了翻译，提供相关的中英文参考资料，方便读者进一步深入了解。

&lt;br/&gt;

&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;https://i.ibb.co/7KpVQN0/cover.png&quot;&gt;
&lt;source id=&quot;mp4&quot; src=&quot;https://www.bilibili.com/video/BV1Af4y1876z?p=1&amp;share_medium=iphone&amp;share_plat=ios&amp;share_source=WEIXIN&amp;share_tag=s_i&amp;timestamp=1623417479&amp;unique_k=X48cu5&quot; type=&quot;video/mp4&quot;&gt;
&lt;/video&gt;

&lt;br/&gt;

&lt;br/&gt;

# 讲演部分

## 短期规划

### 合并后的清理分叉 (03:40)

![post-merge cleanup fork](https://i.ibb.co/nDP9c08/post-merge-cleanup-fork.png)

- 移除 eth1 的数据投票
- 添加提款功能
- 把整个执行链转换为SSZ编码
  - 先添加新的SSZ交易格式，最终淘汰基于RLP的交易格式
- 商定客户端不再下载合并前 PoW 链的数据？
- 信标状态访问操作码

**参考资料**

[SSZ 编码方法手册](https://www.ssz.dev/)

[EIP-2929](https://eips.ethereum.org/EIPS/eip-2929)

[Vitalik: 柏林升级里，EIP-2929 提高 gas 开销有何意义](https://www.ethereum.cn/Technology/a_quick_explanation_of_what_the_point_of_the_eip)

[柏林硬分叉对 Gas 影响几何？](https://www.ethereum.cn/Eth1.x/gas-costs-after-berlin)

&lt;br/&gt;

## 共识层的中期规划

### 分片！(10:37)

![sharding!](https://i.ibb.co/QpcFmk2/sharding.png)

- 64 个数据分片
- 每个分片每12秒生成大约 512kB 的区块
- 一开始是基于委员会的安全性，之后会加上数据可用性采样提供的安全性
- 理想情况下会加入交错的分片区块，使得rollup可以超快速出块

**参考资料**：

[详解以太坊2.0信标链](https://www.ethereum.cn/ethos-dev-beacon-chain)

[Vitalik：从技术角度揭秘“分片”的优势](https://www.ethereum.cn/Eth2/why-sharding-is-great)

[Vitalik：分片+数据可用性采样](https://www.ethereum.cn/sharding-proposal)

[激励交错地生产分片区块的简单方法](https://ethresear.ch/t/simple-approach-to-incentivizing-shard-staggering/9149)

&lt;br/&gt;

### 数据可用性采样 (13:23)

![data availability sampling](https://i.ibb.co/gjVrdM0/data-availability-sampling.png)

- 每个节点随机下载每个分片区块的一些样本数据
- 使用多项式承诺对分片区块内容加密，证明其正确性
- 使数据可用性保证成为可能，即使诚实委员会的大多数假设崩溃了

**参考资料**：

[Kate polynomial commitments](https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html)

[Data availability sampling in practice](https://notes.ethereum.org/@vbuterin/r1v8VCULP)


&lt;br/&gt;


### 更多安全性改善 （16:23）

![more security improvements](https://i.ibb.co/zxGTsBS/more-security-improvements.png)

- 单个秘密领导人选举
  - 下一个区块提议者将不再使公共可见，缓解DoS攻击和共谋危机
- VDFs (可验证延迟函数)
  - 委员会和以太坊应用的随机性是可验证的
- 托管证明
  - 进一步要求节点保存和验证区块数据的机制

**参考资料**：

[Provable Single Secret Leader Election](https://ethresear.ch/t/provable-single-secret-leader-election/7971)

[Verifiable Delay Functions](https://eprint.iacr.org/2018/601.pdf)

[Verifiable delay functions and attacks](https://ethresear.ch/t/verifiable-delay-functions-and-attacks/2365)

[A 0.001 bit proof of custody](https://ethresear.ch/t/a-0-001-bit-proof-of-custody/7409)

&lt;br/&gt;

## 执行层的中期规划

### 地址扩展（18:24）

![address extension](https://i.ibb.co/VHVtwHY/address-extension.png)

- 把地址长度从20个字节扩展到32个字节
- 有利于长远发展的重要安全性改善 (对于抗合谋来说20个字节不够安全)
- 为了未来兼容性，添加字节用于版本数
- 状态有效期提案也有需要

&lt;br/&gt;

### 无状态+状态有效期 (18:55)

![stateless+state expiry](https://i.ibb.co/n8fgJ36/stateless-state-expiry.png)

- 现在增加 gas limit 的主要障碍在于状态大小
- 目前的可能路径：无状态和状态有效期同时实现 (这实际上比分开实现更简单！)
  - Verkle tree (包括代码默克尔化)
  - 状态有效期 (旧状态会被移出主状态，重新访问它需要见证数据)

**参考资料**：

[以太坊状态管理诸提议](https://mp.weixin.qq.com/s/fEEHT3bmcqXEfqFCGiOpFg)（by EthFans）

 [状态膨胀和无状态性](https://mp.weixin.qq.com/s/lLOaplyoYL2dR6Bc7XYWJA)（by EthFans）

[一份新的无状态以太坊路线图](https://mp.weixin.qq.com/s/iJCTOcYEsXXmFq-_P55qhg) （by EthFans）

[弱无状态性以及/或者状态保质期机制：即将到来](https://mp.weixin.qq.com/s/zeVmefqeBUN-QLx8-Q3auw) （by EthFans）

[Proposed Verkle tree scheme for Ethereum state](https://ethereum-magicians.org/t/proposed-verkle-tree-scheme-for-ethereum-state/5805)

[Verkle trie for Eth1 state](https://notes.ethereum.org/_N1mutVERDKtqGIEYc-Flw)

&lt;br/&gt;

### 账户抽象 (29:26)

![account abstraction](https://i.ibb.co/zhxW8DY/account-abstraction.png)

- 使智能合约钱包和其他应用的使用更容易
- 多个路径
  - EIP-2938 或类似的提案
  - Flashbots
  - 以上两者的结合？

**参考资料**：

[账户抽象化 (EIP-2938) : 为什么&amp;做了什么](https://mp.weixin.qq.com/s/CKtk6xKcXFVjyPKDxHBnhw) （by EthFans）

[账户抽象的动机、历史和分析](https://mp.weixin.qq.com/s/ZGzw3VE-8KEQE5xu7Jw_8A) (by 因雨成歌)

[Implementing account abstraction as part of eth1.x](https://www.youtube.com/watch?v=7ggwLccuN5s)

[flashbot:](https://github.com/flashbots/pm)

[Flashbots: Frontrunning the MEV crisis](https://ethresear.ch/t/flashbots-frontrunning-the-mev-crisis/8251)

&lt;br/&gt;

### EVM 的改善 (31:25)

- EVMX (384比特以及其他模运算)
- 其他改善？

&lt;br/&gt;

## 长期规划

### CBC Casper (32:22)

![CBC Casper](https://i.ibb.co/rF59w0q/cbc-casper.png)

- 更加安全，因为与LMD GHOST 有更少的交互条件
- 最终确定性的阈值更加灵活
- 仍然需要一些研究工作才能有效实现
- [现有的最佳成果](https://github.com/ethereum/eth2.0-specs/issues/701)

**参考资料**：


[CBC Casper: 什么是共识和确定性？](https://mp.weixin.qq.com/s/g8IcNdD-Hw4cnwtIN8XxJw)

[CBC Casper: 安全性证明 (一)](https://mp.weixin.qq.com/s/unmIY1Zx3LL6mdT2NfZk_A)

[CBC Casper：安全性证明 (二)](https://mp.weixin.qq.com/s/6agROwL7yo7LuyEiGFK_kg)

[CBC Casper 简要说明](https://mp.weixin.qq.com/s/ExV0bXnCjZoPO8zthhOhww)

&lt;br/&gt;

### 全方位使用SNARK技术 (33：44)
![snark everything](https://i.ibb.co/pzJG7Br/snark-everything.png)

- 对信标链进行SNARK加密
- 对EVM进行SNARK加密
  - 或者对一个更好的虚拟机进行 SNARK 加密，使得EVM代码能编译到这个虚拟机，还在本地更高效
  - 如果想的话，使EVM更容易添加本地执行到分片

 **参考资料**：

[从零开始学习 zk-SNARK 系列](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIxNjkwODE5NQ==&amp;action=getalbum&amp;album_id=1432629901374636033&amp;scene=173&amp;from_msgid=2247484148&amp;from_itemidx=1&amp;count=3&amp;nolastread=1&amp;uin=&amp;key=&amp;devicetype=Windows+10&amp;version=620603c8&amp;lang=zh_CN&amp;ascene=0&amp;winzoom=1) (by 安比实验室)

[zkSNARKs in a nutshell](https://blog.ethereum.org/2016/12/05/zksnarks-in-a-nutshell/)

[An approximate introduction to how zk-SNARKs are possible](https://vitalik.ca/general/2021/01/26/snarks.html)

[STARK](https://starkware.co/math/)

&lt;br/&gt;

### 量子安全 (35:48)

- 用 STARKs 取代 SNARKs
- 用基于 STARK的聚合签名替代 BLS签名
- 用STARK 加密的默克尔树取代Verkle tree



&lt;br/&gt;

# Q&amp;A 部分

Q：为什么无状态和状态有效期方案同时进行会更简单而不是分开来做？有哪些原因？

A:  状态有效期方案是可行的原因是它不再是只有一个状态树，而是每个 epoch 有一个状态树，这个模型好在这使得更新状态树格式变得更容易。因为如果你更新状态树格式，你只需更新版本，把它应用到新的epoch，就可以了。而当前的模型是，如果你想更新状态树，你必须有非常复杂的协议：首先你需要对当前状态进行快照，然后让每个人都重新计算该状态，记录重新计算时的差量，然后应用新的状态，开始采用该差量，并把它移到你创建的新状态树。这是相当复杂的5步协议。

而如果我们采用状态有效期方案，它自动给我们带来更新状态树尽可能简单的方法。因为我们需要做的只有，比如一切从epoch 1 开始使用verkle tree 而不是十六进制 patricia tree，如果我们想的话我们可以在epoch 1 开始大概一个月后做一次硬分叉，我们都只需要计算新的 verkle tree 根，即取代epoch 0 的 verckle tree 根，所以只需要做状态转换就可以了，是一次性的。这个模型的状态数更新正好使无状态成为可能。

&lt;br/&gt;

Q: Verkle tree 什么时候上线，是“合并”前还是后？

A: 我在这次分享里讲的内容，包括 Verkle tree，都在“合并”之后。

&lt;br/&gt;

Q：为什么合并后是先做数据可用性采样而不是 layer1 killing?

A: 我们做这个以数据可用性为中心的路线图是因为，首先rollup是实现扩容的第一步，且最接近可以发布的。它们存在不确定性，但其他东西的不确定性更大。而只作数据分片能立即提升它们的扩容能力。第二点，某种程度上，数据分片本身其实是实现执行分片的垫脚石，要先解决数据分片才能解决执行特有的问题。我们其实是在实现执行分片的路上，所以这显然应该成为短期规划的重点。

&lt;br/&gt;

Q: “合并”前如何减少技术债？

A：在我看来，在合并前，相当多技术债是很难被减少的，我想主要原因在于我们要继续遵守这个社会规范——以太坊客户端必须能够处理从创世到现在的一切数据。我认为从长远来看，这个准则需要被移除。在未来，客户端应该只需要能够验证，例如最近一年的历史数据。如果我们做到这点，最近一次硬分叉之前的旧版本协议以后将不再被认为是协议必要代码库。特别地，我们最大的获益是我们决定核心以太坊协议不再需要同步从“合并”前工作量证明的历史数据。因为一旦生效了，我们就不再需要触及工作量证明链的数据，而可以直接使用一条链的数据，这样执行客户端会变得简单很多，你可以完全移除分叉选择代码，把同步代码从执行客户端分离出来。因此，有很多好处。

&lt;br/&gt;

Q: EVM和 ewasm

A：我个人的看法是，我对ewasm越来越不 感兴趣了。我一开始对ewasm感兴趣是它可以是更先进的虚拟机，它具备把现在很多的专业成果变为优化实现。它们甚至可以成为编译器而不是解释器，因此它们的速度会非常快，你可以在上面执行密码学运算，你不需要再做预编译。但研究结果表明，事实不是这样。现实是ewasm编译器会出现最坏情况的漏洞，你可以用最坏情况的代码对它们发起攻击，使它变得非常慢。与EVM相比，编译器并没有改善很多。而且我们可能可以扩展 EVM，把它改善至足以做密码学计算，或者是由两到三个EVM-384组成的小组，我现在把它命名为 EVMX 做大量的密码学计算。因此这是更好的路径。现实的长期虚拟机升级的可能性可能是我提到的，在长期规划里，我们会构造更SNARK友好的虚拟机。那时，EVM可能会引入更多的功能，例如利用更快速的执行而不需要用256比特来处理所有事情。但重要的是它必须可以与EVM向后兼容，它必须由某种从目前的EVM到该EVM的编译路径，因为现有的应用都在使用这个EVM，我们不可能让它们不再运行了。如果我们想让我们的链是可证明的，那些这些东西都必须是可证明的。

&lt;br/&gt;

Q: 合并会期望有一个活跃验证者最优数量吗？

A：我觉得我们现在的验证者数量已经足够多了，当然如果增长到3倍，那也很好。但我不担心验证者数量太少或太多。

&lt;br/&gt;

Q：在合并后和分片里，合约可组合性在同步环境里会如何？

A：合并本身不会影响任何东西，因为合并本身只是共识引擎的改变。我期望我们可以在rollup里学到很多关于同步交互的内容。rollup项目在今年开始要上线了，我们现在已经有zkSync、DeversiFi，并将看到Optimism和Arbitrum上线。在每个这些系统上都会有应用，而且会需要有能轻易在不同系统跳转的互操作性。这是生态系统必须解决的问题。我感觉我们能在rollup世界学到很多，这不是一个问题，而是一次机遇。比如你可以有zone (地带) 的概念，你可以在一个zone里做同步工作，如果你想的话，你可以在不同的zone里轻易跳转。但你不可以直接跨多个zone做秘密的事情。这是我的第一项预测，我们还可以有其他的方案。

&lt;br/&gt;

Q：你期待合并后会出现更多面向消费者的用例吗？

A：在这方面我期待的不是合并，而是rollup和分片。原因是rollup和分片将大大提高扩展性，大幅降低交易费，这点正是我们开启非金融应用之所需。有非常多的非金融应用，比如ENS、NFT、人性证明 (Proof of Humanity)、DAO等。但这些应用要运行起来的话，交易费一定要非常大幅地下降。rollup和分片可以做到，即使是在非常大型的社区、面对高得多的需求的情况下。这是我非常期待的事情。我希望以太坊生态可以成为所有这些很棒的非金融应用部署的平台。

&lt;br/&gt;

Q：在长期规划里，你把非常多的重点放在了SNARK和STARK上，这些内容大概会在多久以后实现？

A：大概三到五年。很重要的一点是，这些内容不能进展地太快，因为要把SNARK做好需要使用SNARK友好的哈希函数，原因是现有的哈希函数 (例如Keccak256) 与SNARK比，其实效率非常低。这些函数需要一定的时间进行风险消除、学术测试、密码学分析等。另外，构建一个SNARK版本的 EVM 是非常复杂的，需要大量的工程和研究工作，这些都需要花大量的时间。所以我自己预期这是需要多年的工作，所以在实现上是低优先级。而状态有效期对于可持续发展、允许gas增长至关重要，所以是高优先级。

&lt;br/&gt;

Q：有没有什么很酷的点子是你希望在扩容性相关黑客松上看到的，无论是工具还是应用，任何能显著改善用户体验的且人们还没做到的东西。

A：第一是在rollup里的社交式可恢复钱包。我很喜欢这个概念，我在我的博客上也有谈到原因。rollup好像是实现它的一个好机会，并让用户形成使用它的习惯。另一个想法是构建用于读取以太坊区块链、以太坊历史、rollup、分片数据的可扩展基础设施。这一点之所以重要是因为我们正往远离“普通用户需要运行处理所有数据的节点”这个方向发展。因为我们谈到的像rollup、纠删码(erasure coding)、数据可用性采样这些技术是安全的，但用户还需要有其他方法来获取所需数据，无论是因为他们需要读取它还是创建事务。所以如果能创建可以替代全节点的去中心化协议或 API ，无须任何个人节点存储任何东西，会是非常有价值的。

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。


</content:encoded></item><item><title><![CDATA[伦敦升级概览]]></title><description><![CDATA[纳入伦敦升级的EIP简介]]></description><link>https://www.ethereum.cn/Eth1x/london-upgrade-overview</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1x/london-upgrade-overview</guid><pubDate>Thu, 10 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Cat Herder](https://medium.com/ethereum-cat-herders/london-upgrade-overview-8eccb0041b41)

&lt;br/&gt;

在过去数月里，以太坊核心开发者一直在进行伦敦网络升级的工作。它是继[柏林升级](https://medium.com/ethereum-cat-herders/the-berlin-upgrade-overview-2f7ad710eb80)（四月在主网实现分叉）后的一次升级。尽管各个网络的升级区块高度目前还未定，但纳入伦敦升级的 EIP 已经确定了。根据[升级规范](https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)，EIP 如下：

- [EIP-1559: Eth1.0 费用市场变更](https://eips.ethereum.org/EIPS/eip-1559)
- [EIP-3198: BASEFEE 操作码](https://eips.ethereum.org/EIPS/eip-3198)
- [EIP-3529: 减少gas返还](https://eips.ethereum.org/EIPS/eip-3529)
- [EIP-3541: 拒绝以 0xEF 字节开头的新地址](https://eips.ethereum.org/EIPS/eip-3541)
- [EIP-3554: 难度炸弹延迟至 2021 年 12 月1 日Difficulty Bomb Delay to December 1st 2021](https://eips.ethereum.org/EIPS/eip-3554)

现在看看每个 EIP 的详细内容吧！

&lt;br/&gt;

# EIP-1559:  Eth1.0 费用市场变更

EIP-1559 是以太坊史上最令期待的变更之一，也是伦敦升级里带来最大变更的EIP。这份 EIP 将在网络区块里引入“基本费用 (`basefee`)&quot;，它会追踪 gas 价格，这些价格来自网络将接受的、基于对区块空间需求的交易。这意味着钱包和用户将可以更容易预测他们交易的价格。另外，EIP-1559 新增了一种交易类型，用户可以指定他们愿意支付的最高限额，当他们把这个最高限额费用发送给矿工时，会获得最高限额费用减去基本费用与矿工小费之和的差值退款。最后，这份 EIP 还将导致部分交易费被烧毁，这一点被社区的大部分人认为是以太坊网络经济上的一个重要改善举措。

一篇简单的文章难以涵盖EIP-1559 的机制、裨益与影响。[这份清单](https://hackmd.io/@timbeiko/1559-resources)汇总了这份 EIP 各方面内容。还有关于 EIP-1559 的一期 PEEPanEIP， 这是[完整视频](https://www.youtube.com/watch?v=ZbSKo_x9RvU&amp;feature=youtu.be)。

&lt;br/&gt;

# EIP-3198: BASEFEE 操作码

这份 EIP 是与 EIP-1559 搭配的。它只是简单添加了一个`BASEFEE`操作码，它返回的是执行交易所在的区块的基本费用。这将使得智能合约可以在链上访问这个值，这有助于提交欺诈证明和创建去信任的 gas 价格衍生品。通过这期由[Ratan Rai Sur](https://youtu.be/QQ3NHtEaCLk) 主讲的 PEEPanEIP，读者可以对这份 EIP 有一个全面的认识。

&lt;br/&gt;

# EIP-3529: 减少 gas 返还

在伦敦引入的另一个重大变更是取消了操作码`SELFDESTRUCT` 的 gas 返还和减少了操作码 `SSTORE` 的 gas 返还。虽然设立返还的初衷是希望激励开发者在可能的情况下清除状态，然而现实是，这导致了Gas Token的出现，反而增加了状态大小。利用这些返还的 gas，Gas Token 可以在 gas 价格很低的时候填满状态，然后在 gas 价格上升的时候获得执行这些交易的返还。

除此外，gas 返还还会导致区块执行时间的变化。在伦敦升级之前，多达 50% 的返还 gas 可以在同一个区块里进一步执行计算。也就是说，在实际上，最大的区块容量可达 1.5 倍的 gas limit。EIP-2539 把&quot;执行 gas 返还&quot;从 50% 下调到最多 20%。这一变更将有助于抵消由 EIP-1559 引入的额外区块大小变化，因为 EIP-1559 允许区块使用的 gas 是现在 gas limit 的两倍。

&lt;br/&gt;

# EIP-3541:  拒绝以 0xEF 字节开头的新地址

EIP-3541 是一个简单的变更，为以后更广泛的 EVM 改善奠定基础，想看 [EIP-3540](https://eips.ethereum.org/EIPS/eip-3540)。这份 EIP 将使得以 0xEF 比特开头的新合约无法部署。现有的合约将不受影响。主网进行伦敦升级后，以 0xEF 开头的最短字节序列与现有合约的开头序列并不匹配，它们可以保留作为识别与 EIP-3540 语义相符的合同的方式。请注意：EIP-3540 将要求一次额外的网络升级来部署。值得注意的是，如果 EIP-3540 从未被部署，EIP-3541保留下来的开头字节也在其他方案里使用。

&lt;br/&gt;

# EIP-3554: 难度炸弹延迟至2021年12月 1 日

EIP-3554 延迟难度炸弹，也以冰河时代为人所知。难度炸弹或冰河时代是以太坊引入的一种机制，在网络过渡到权益证明时”冻结“挖矿。由于权益证明的过渡还未准备好，我们需要推迟炸弹的”爆炸“时间。这在过去已经进行过三次：在大都会([EIP-649](https://eips.ethereum.org/EIPS/eip-649))、君士坦丁堡 ([EIP-1234](https://eips.ethereum.org/EIPS/eip-1234)) 和穆尔冰川 ([EIP-2384](https://eips.ethereum.org/EIPS/eip-2384))。

尽管之前的延迟时间都相当长，但这次核心开发者选择了较短时间的延迟，把难度炸弹推迟到2021年12月。到时，网络不是要进行到权益证明的过渡就是另一次网络升级。

这就是纳入伦敦升级的整个变更列表了。测试网的升级区块高度和相关的客户端发布版本很快会在[以太坊基金会博客](https://blog.ethereum.org/)上发布。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[一文解释 Commit-Chains]]></title><description><![CDATA[什么是非托管侧链？本文介绍了 commit-chain 的运作原理]]></description><link>https://www.ethereum.cn/Technology/commit-chains/</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/commit-chains/</guid><pubDate>Wed, 09 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [ethhub.io](https://docs.ethhub.io/ethereum-roadmap/layer-2-scaling/commit-chains/)

&lt;br/&gt;

# 什么是 commit-chains？

Commit-chains 也是 &quot;Plasma&quot; 的通用术语 —— 以太坊以及其他区块链的 Layer-2 扩容解决方案。

Vitalik Buterin 曾开玩笑地说，&quot;Commit chains&quot; 更符合比特币的品牌形象，而 &quot;Plasma&quot; 对以太坊来说更符合其品牌形象。

Commit-chains 有时也被形容为非托管的侧链，它们并不像侧链那样引入新的共识机制 —— 它们依赖于主链的共识，这使得它们与主链一样安全。

在 commit-chains 中，无需信任和非托管的运营者促进了交易各方的通信。运营者通过定期发送更新至主链，以验证用户账户余额的状态。

&lt;br/&gt;

# Commit-chains 的工作原理？

![commit](https://i.ibb.co/8XCvCRZ/commit.png)

与支付通道不同，commit-chains 一旦启动就一直处于持续状态，而不是依赖于“三种状态”模型 (开放、实时、争议/关闭)。

运营者启动 commit-chain 后，用户可以加入并执行记录在 commit-chain 上的交易，同时用户任何时候都可以将其资产提款至主链中。

## 定期检查点证明 (Commitments)

Commit-chain 的用户可能需要定期观察链上检查点证明，该证明的实例可以为默克尔根或者零知识证明 (ZKP)。

虽然零知识证明在链上执行一致的状态转换，但&quot;默克尔根证明&quot;并不会执行，这就要求用户参与挑战回应协议，以挑战运营者的不当行为。

## 数据可用性请求

因为数据并不是广播到网络上的，所以用户必须检索和维护退出 commit-chain 所需的数据。

根据不同的实现，当数据不可用时，要么用户会被强制退出 (就像在 Plasma 中) 或者运营者会被要求提供必要的数据 (就像在 NOCUST 中)。

遇到作恶的行为时，允许用户带着他们最后确认的余额退出。

## 中心化但无需信任的中介

中心化运营者从不持有托管资金，所以如果运营者不可用，最坏的情况只是用户无法再进行链下交易，但他们在任意时间退出并转移到另一条 commit-chain 上。

## 交易敲定

与支付通道不同，commit-chain 运营者不需要链上抵押品来安全地在用户之间进行支付。

Commit-chain 交易不像支付通道那样提供即时的交易敲定，但是提供链上检查点之后的最终敲定。

然而，如果运营者选择为每个用户分配抵押品，实质上是在 commit-chain 上实现一个支付通道，那么就有可能实现即时的交易敲定。

## 减少路由需求

单个 commit-chain 有可能承载数百万名的用户，所以我们设想用几个静态连接的 commit-chain 来产生稳定的网络，并降低路由的复杂性。目前还没有人提出原子式跨 commit-chain 交易。

&lt;br/&gt;

# Commit-chain 的安全属性

用户端的安全属性可以概括如下：

## 商定的转换

Commit-chain 交易至少需要发送方和 commit-chain 的运营者同意。

## 余额安全

诚实的用户总是可以利用链上争议从 commit-chain 上撤回商定的余额。

即使运营者和所有其他 commit-chain 用户串通，也能够为诚实用户提供余额安全保障：因为只有当发送者和运营者同意某笔支付，并通过定期的链上检查点验证时，交易才可以被敲定。

## 状态发展

用户任何时候都可以在链上强制执行链下的状态转换。

## 证明的完整性

由于 commit-chain 没有固定的 3 个阶段的生命周期，commit-chain 的用户能够在任意时间点验证运营者的证明完整性，并强制运营者操作并回滚到之前的定期证明中。

&lt;br/&gt;

# NOCUST commit-chain

## 概述

“NOCUST commit-chain” 的概念是由 Liquidity Network 以及他们的同行在一篇[学术论文]((https://eprint.iacr.org/2018/642.pdf))中首次提出。

NOCUST 是一种基于账户的 commit-chain，在 NOCUST 中，一个链上地址与一个 commit-chain 账户相关联。

NOCUST 链上合约期望能够定期从运营者 (该运营者包含了抵押池中的每个用户账户) 中接收证明，这是一个 commit-chain 账本状态的恒定大小的证明。

## 自由建立

用户可以在合约中存入任意数量的代币，并对其他用户进行任意面额的 commit-chain 支付。而用户可以不需要链上交易就可以自由加入 commit-chain，用户可以要求运营者签名，然后立即接收 commit-chain 交易。

## 商定的转换

NOCUST 内的交易是由发送者和运营者共同签名而执行的，以预防潜在的双花情况。

## 即时的交易敲定

只有当运营者将抵押品抵押给接收者时，才有可能实现状态发展。NOCUST 规定了一种机制，即在恒定大小的链上证明中向所有 commit-chain 的用户分配抵押品，这能够实现特定数量的即时交易敲定。

在每个链上检查点之后，分配的抵押品是可以重复使用的，在这一点上，交易吞吐量只受运营者的带宽和计算吞吐量限制 —— 与检查点证明的间隔无关。

## 证明的完整性

每个用户只需向运营者请求数据，并在定期的时间间隔内将其与本地存储的状态进行比较来观察完整性，从而验证自己余额证明。

遇到作恶行为时，用户可以使用 NOCUST 智能合约提出挑战。如果运营者返回的无效信息或者不回应，用户就能够证明其不当行为。

NOCUST 通过 zkSNARKs 支持可证明的一致操作模式。底层智能合约将验证 Layer-2 状态转换，如果不停止，运营者将无法验证无效的状态转换。

&lt;br/&gt;

#  比较 commit-chains

将 NOCUST commit-chain 与 Plasma Cash 进行比较，后者是一份最全面的 Plasma 实现的运行草图。

比较数据基于 [知识学术论文的系统化](https://eprint.iacr.org/2019/360.pdf)，并来源于与 [Georgios Konstantopoulos](https://twitter.com/gakonst?lang=en) 的讨论。

|                一般属性                | Plasma Cash | NOCUST |
| :------------------------------------------------------: | :---------: | :----: |
|                 安全证明                  |      ✕      |   ✓    |
|        链下交易接收         |      ✓      |   ✓    |
|            同质化代币的支付             |      ✕      |   ✓    |
|     客户端可以保持离线状态     |      ✕      |   ✕    |
|               安全大批量退出               |      ✓      |   ✓    |
|        即时的交易敲定        |      ✕      |   ✓    |
|                 代币支持                   |      ✓      |   ✓    |
|           非同质化代币 (NFT)          |      ✓      |   ✕    |
|  可证明的一致的状态 (ZKP) |      ✕      |   ✓    |
|                    Commit-chain swaps                    |      ✕      |   ✓    |



Plasma 是基于 UTXO 的 commit-chain，而 NOCUST 是基于账户的 commit-chain。

在 Plasma Cash 中，一枚代币是通过链上存款铸造的，不能与 commit-chain 上的另一枚代币合并或拆分，因此它只对 NFT 有用，但不可以作为一个支付系统来使用。

NOCUST 使用 ZKPs 在链上执行一致的状态转换，Plasma Cash 利用默克尔根证明，它不要求用户参与挑战回应协议以挑战运营者的不正当行为。

&lt;br/&gt;

# 参考资源

- [Commit-Chains: Secure, Scalable Off-Chain Payments Academic Paper](https://eprint.iacr.org/2018/642.pdf)
- [Systemization of Knowledge: Off The Chain Transactions Academic Paper](https://eprint.iacr.org/2019/360.pdf)
- [Liquidity Network Research Papers](https://liquidity.network/research)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/6/8]]></title><description><![CDATA[Uniswap V3 部署在 Arbitrum；zksycn 2.0测试网上线]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-6-8/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-6-8/</guid><pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate><content:encoded>![8](https://i.ibb.co/Dt7R80h/28.png)

# Eth2

**Lighthouse可以在Windows上跑了**

Lighthouse客户端将于六月中旬上线的 v .1.4.0 版本加入了对 Windows系统的支持，目前仅支持Windows 10，Windows 8 和 7 还未测试。

教程指路：[https://www.reddit.com/r/ethstaker/comments/nre9tz/how_to_compile_and_run_lighthouse_on_windows/](https://www.reddit.com/r/ethstaker/comments/nre9tz/how_to_compile_and_run_lighthouse_on_windows/)

&lt;br/&gt;

# Eth1

**Geth的快照同步功能已成默认设置**

Geth 客户端在 v.1.10.4 版本里把同步的默认设置从快速变为快照同步，同步时间从大约11小时缩短到2小时。团队负责人Péter Szilágyi表示实现这点花了3.5年的时间。

![geth](https://i.ibb.co/rFb8SMT/geth.png)

来源：[https://twitter.com/peter_szilagyi/status/1399266019407970305?s=20](https://twitter.com/peter_szilagyi/status/1399266019407970305?s=20)

&lt;br/&gt;

**伦敦升级新测试网 Calaveras**

伦敦升级的新测试网 Calaveras 已上线，这意味着上周的核心开发者会议提出的，关于`MaxFee`和`maxPriorityFee`没有形成一个明确的上限，这一问题已解决。

来源：[https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/calaveras.md](https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/calaveras.md)

&lt;br/&gt;

## EIP-1559 GAS API会议

Tim Beiko对上周进行的 EIP-1559 GAS API 会议进行了总结，列出了1559 API愿望清单，内容包括：

**`priority fee`历史数据**

- 返回过去N个区块中被接受的最低 `priority fee` 的列表，
    - 矩形图？
    - 前十分位的数而不是最低值？
    - 客户端应该把满的区块过滤了，因为在这种情况里，矿工可能会漏掉那些本可以被放进待处理交易池里，也就是说我们可能实际上不会在被打包的交易里看到给矿工的最低小费
    - 考虑点：我们可以把矿工自己的交易过滤掉吗？起码我们应该过滤掉任何小费是`0`的交易

**消耗的gas的历史数据**

- 返回过去N个区块消耗的gas (%满)
    - 矩形图？
    - 每个区块消耗的gas数列

**基本费历史数据**

- 有的话不错
- 矩形图？

**上一个区块的基本费+消耗的gas**

- 当你想要 gas 价格计算的所必须的数据时，如果能有一个终端返回`eth_getBlockBy*`里的子集数据会很不错
- 长期的解决方案可能会是像 GraphQL这样的方案

**下一个区块的 `baseFeePerGas`**

- 返回下一个区块的预期 `baseFeePerGas`
    - 注意：可以在Geth客户用`eth_getBlockByNumber(&quot;pending&quot;)`实现

**会议中的有趣争论的编译：**

API存在这样的问题：在区块大小是稳定没有高峰，以及在过去20个区块里出现过峰值，但当前峰值已过去这两种情况下，API提供的数据没有问题。但如果正值峰期，API会失效。

争论点：`priority fee`是否应该对峰期作出反应？

开发者：总的来说，我反对任何`priority fee` 预估，因为这等于强化了让用户进入竞拍和竞价战的情况，在大多数情况下，这是没有必要的。现有的做法对用户的好处和弊端参半。我希望在小费的设定上，是我们知道矿工会接受1、2 gwei 的小费，然后我们就不改了，就把小费设成固定的1、2 gwei。

实现者：这就是为什么我说有时根据历史数据，这是可行的最低值，但你是说使用一个固定值，但ETH 的价格在不断变化，还有矿工的偏好，还有技术等多个变量，如果矿工的设置真的变了，且我们不根据现实的交易提供数据，用户要如何发现？

开发者：我同意这需要是一个动态系统，但这应该是在一个长时间的范围里。这里我希望要严谨一点，有可能矿工获得基于MEV的动态小费就已足够激励他们去工作了。这很复杂也很难，但这是可能的且理论上有道理的。但我不认为矿工很快能做到这一点，因为他们有很多大型工作，而这只是小工程。因此我们可以长远地看，像 geth这样的客户端矿工都在用，它有一个命令行选项用于设置最低priority fee，我们相信矿工都会把它设在某个值。根据过去数以上万的区块，95%的矿工把它设为低于2，即以低于2 gwei挖一个区块。我想说的是API 是保持动态，但同时不需要变化太快，因为大多数时候这些变化都是基于短期的拥堵峰期，不会持续很久。

实现者：我认为这些数据应该是动态的，但以过去的数据作为指标可能反应过慢，当交易处于峰值时你还在推荐最低的priority fee，当峰值过去了，你推荐高的priority fee。因此这样可能作用不大。我们其实有1559本身提供的免费客观数据来源——我们不需要看用户做什么，我们可以看区块有多满，可能是最近的2、3个区块，如果它们都是满的，我们就知道峰期来了，所以直接看区块的gas消耗就足够了解情况，这可能与现有的模式不同，且有更多的实现难度，但这是我对API的看法。

所以还是主张对峰值作出反应，但我认为让用户至少有指标来了解现时情况还是很有价值的。因此根据过去几个区块消耗的gas而不是用户的主观竞价。因此我认为需要返回一些指示，告诉用户目前的紧急程度，然后由用户来决定是否要他们的交易被优先打包，给用户一个选择我认为是好的。

开发者：关于是否要对拥堵情况作出反应，我们肯定是要知道前面的满块程度以确认拥堵，同样地，当我们尝试确定95%矿工的最低小费值是多少时，也需要在满块情况才能知道95%的矿工设置的最低小费值，我们要首先过滤了满的区块，这样才能看到最低值而不是拥堵时的值。这个讨论的一个重点是，如果大家都对拥堵作出反应，就会走向最后大家都支付更多。反应性对竞赛是有利的，在比赛中，有反应的会赢得比赛。如果你想构造一个生态系统是用户间达到大致平等，那么你为比赛中每个人使用同样的策略来造工具时，你最终会给矿工支付不必要的费用。如果我们在核心层，比如geth客户端引入这个策略，我们要确保引入后大多数的人不会使用它。这听上去很奇怪，但如果引入后大家都用了，那其实作用就不大了。像这种“高速、一般、缓慢”模式，高速表示会作出反应，缓慢表示不会，这种模式的一个坏处在于我担心如果基本费是100，三个速度分别是1、2、3 gwei，这样每个人都选高速，其实没人在里面获益。因此，我们需要大家用不同的策略，大家用同一个策略，那么这个策略就没用。这在博弈论里非常常见。

来源：[https://hackmd.io/@timbeiko/1559-api-wishlist](https://hackmd.io/@timbeiko/1559-api-wishlist)

会议视频：[https://www.youtube.com/watch?v=SpU6WACP2cM](https://www.youtube.com/watch?v=SpU6WACP2cM)

&lt;br/&gt;

# Layer2

**Uniswap V3 已在 Arbitrum One 上部署**

此前，社区投票通过了在 Arbitrum 上部署 Uniswap V3。随后，为了响应社区的需求，Uniswap Labs 于 6 月 5日发推表示，V3 版本已经部署在 Arbitrum 主网上。[app.uniswap.org](https://t.co/liqYXtQoM2?amp=1) 已更新支持部署。Arbitrum 目前只对白名单进行开放，已经申请为白名单的开发者们现在可以使用该版本了。一旦 Arbitrum 向所有用户开放，Uniswap V3 将不需要额外的工作，用户就可以体验其部署在 Arbitrum 上的版本。

来源：[https://twitter.com/Uniswap/status/1400847744596598792](https://twitter.com/Uniswap/status/1400847744596598792)

&lt;br/&gt;

**The Graph 的数据索引和查询服务上线 Arbitrum One**

区块链数据索引项目 The Graph 为 Arbitrum One 提供的数据索引和查询服务已上线。Arbitrum 上的开发者可以构建和发布开放的 APIs，调用 subgraphs，应用程序可以使用 GraphQL 进行查询。也就是说，开发者现在可以使用 subgraphs 来搜集和访问 Arbitrum One 的数据，就像在以太坊主网一样。

![the_graph](https://i.ibb.co/wL92p0T/arbitrum.png)

来源：[https://offchain.medium.com/the-graph-indexing-and-querying-services-are-live-on-arbitrum-one-c539a122da14](https://offchain.medium.com/the-graph-indexing-and-querying-services-are-live-on-arbitrum-one-c539a122da14)

&lt;br/&gt;

**开发者平台 Alchemy 已开放对 Arbitrum 的支持**

6 月 1 日，区块链开发者平台 Alchemy 对 Layer2 扩容解决方案 Arbitrum 主网的支持正式开放。Arbitrum 提供的 Layer2 技术让开发者的 gas 费可以节省最多 270 倍，而 Alchemy 开发者平台为此提供支持。这意味着开发者可以利用 Alchemy 的 Supernode 以及其开发者工具来访问 Arbitrum。

所有 Alchemy 用户都可以访问 Arbitrum，并使用与以太坊相同的 API 方法。此外，Arbitrum 几乎与所有目前的以太坊智能合约兼容，所以将来不需要有任何的代码变化。

这是 Alchemy 帮助其用户解决扩容问题以及 UI 问题的第一步，在接下来几个月，Alchemy 将进一步加深对 Arbitrum 和其他 Layer2 解决方案的支持。

Arbitrum API 文档：[https://docs.alchemy.com/alchemy/documentation/apis/arbitrum](https://docs.alchemy.com/alchemy/documentation/apis/arbitrum)

来源：[https://blog.alchemy.com/blog/arbitrum-is-live](https://blog.alchemy.com/blog/arbitrum-is-live)

&lt;br/&gt;

**zkSync 2.0：zkEVM 测试网的 Alpha 版本上线**

zkSync 推出 2.0 版本的 Alpha 测试网，添加了 zkEVM 和 zkPorter 两项技术。该测试网版在以下三个方面达成的成就有：

- 在密码学方面，zkEVM 已经准备就绪，整个指令集已经确定下来，并且两种实现都已经完成：在电路中和在执行环境中。
- 在编译器方面，用 Solidity 和 Zinc 编写的智能合约现在可以编译到 zkEVM 字节码中。
- 在核心基础设施方面，全节点集成已完成，并且能够成功地部署和执行已编译的智能合约。

当编译器 100% 准备好时，zkSync 将向开发人员开放测试网。届时将会公布上线第一批项目的流程。

zkSync 2.0 测试网浏览器：[https://zksync2-alpha.zkscan.io/](https://zksync2-alpha.zkscan.io/)

来源：[https://medium.com/matter-labs/zksync-2-0-hello-ethereum-ca48588de179](https://medium.com/matter-labs/zksync-2-0-hello-ethereum-ca48588de179)

&lt;br/&gt;

# 生态

**Gitcoin Grants Round 10 即将开始**

开源软件资助平台 Gitcoin 将于 6 月 16 日 —— 7 月 1 日进行第 10 轮捐赠活动 Grants Round 10，并于 6 月 16 日 —— 7 月 7 日进行 Gitcoin Grants Round 10 黑客松。

本轮活动资助者有 BadgerDAO、CenterPrime、Teller、Perpetual Protocol、Polygon、Mask Network、IOSG Ventures、Algorand 、Aave、The Graph Protocol 、Uniswap 等等。

此外，ENS 团队于今宣布向 Gitcoin Grants Round 10 捐赠 70 万美元。

![gitcoin10](https://i.ibb.co/NV89146/gitcoin.jpg)

cr：Gitcoin

来源：[https://gitcoin.co/grants/explorer/](https://gitcoin.co/grants/explorer/)

[https://gitcoin.co/hackathon/gr10/onboard](https://gitcoin.co/hackathon/gr10/onboard)

&lt;br/&gt;

**Lex Fridman 对话 Vitalik Buterin**

6 月 4 日，以太坊联合创始人 Vitalik Buterin 参加了由 Lex Fridman 主持的访谈节目，该访谈持续了 3 小时，谈及 SHIB 代币的故事、加密货币监管、PoS vs PoW、MEV、扩容、比特币区块大小战争、分片、Rollups、合并、狗狗币 vs 以太坊、NFT、Polygon 以及其他 Layer2 侧链解决方案等等话题。

完整视频：[https://www.youtube.com/watch?v=XW0QZmtbjvs](https://www.youtube.com/watch?v=XW0QZmtbjvs)

&lt;br/&gt;

**5 月份，ETH 在多个指标上超过 BTC**

The Block 研究员 @lars0x 发布了几组图表，其中一个图表，显示了 ETH 在 5 月份链上流通量总值增长了 35.4%，超过了 BTC 的链上流通量总值。

![flipping](https://i.ibb.co/dkLMxm0/flipping-btc.jpg)

来源：[https://twitter.com/lars0x/status/1399734913218355201](https://twitter.com/lars0x/status/1399734913218355201)

&lt;br/&gt;

# 本期最佳meme

![meme](https://i.ibb.co/442RGMX/meme.png)

cr：[@hasufl](https://twitter.com/hasufl)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2 进展更新 (截至2021/6/5)]]></title><description><![CDATA[信标链平稳运行超过六个月；Eth2合并工作的路线和进展]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-6-5</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-6-5</guid><pubDate>Mon, 07 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210605)

&lt;br/&gt;

# 本周推荐

过去一周有些不错的播客值得一听：

- Danny Ryan 参加 Epicenter：[Ethereum Foundation – An Eth2 Progress Update](https://epicenter.tv/episodes/393/) (以太坊基金会 — Eth2进展更新)
- Vitalik 作为 [Lex Fridman](https://www.youtube.com/watch?v=XW0QZmtbjvs) 播客嘉宾进行了重要的三小时访谈

&lt;br/&gt;

# 信标链

信标链已经持续运行超过[六个月](https://twitter.com/etherchain_org/status/1399625222454718464)了，除了 [Prysm 停止生产区块数小时](https://hackmd.io/@benjaminion/wnie2_210424#-Newsflash-)的那次意外事件，其运行状态已经非常不错了。[罚没 (slashing)](https://beaconcha.in/validators/slashings) 比我想象得要多，但其中的大多数是由单一的服务商导致的，总体而言，罚没事件数量不大。据我们所知，所有罚没都是由于节点运营者 (无论是个人还是质押服务) 的错误配置造成的，不涉及客户端或协议漏洞。请注意，验证者只会因为违反协议规则而被罚没，而不是因为离线：如果你遵循基本的良好行为和建议，就不会被罚没。

在过去的六个月中，验证者的队列很少清空。创世时有 21,063 个验证者，现在我们有 157,479 个验证者 (加上 140 个因削减而退出)。 因此平均而言，在这段时期中验证者以大约 735 个/天的速度增加。这与 900 个/天的最大速度相差不远。[Eth2 存款合约](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)持有 5,324,034 以太币，目前价值 140 亿美元。这是对以太坊的技术、团队、实现及其未来的极大的信任投票。我很荣幸成为其中的一份子。

[The Daily Gwei](https://thedailygwei.substack.com/p/6-months-of-the-beacon-chain-the) 对六个月纪念日也进行了记叙。

Omni Analystics 一直在[对网络的功能和健康情况进行可视化](https://crypto.omnianalytics.io/2021/05/14/tiering-and-dashboarding-eth-2-0-validator-behavior/)。许多漂亮的图表比较了 Medalla 测试网和主网上的验证者行为，以及网络健康面板的预告。(奇怪的是，他们似乎忽略了第 3.7/3.8 节和第 3.9 节之间的联系：由于罚没强制退出)

&lt;br/&gt;

## Staking

想要在 Windows 上进行质押吗？那么 Lighthouse 客户端正在加入，其他客户已经实现了支持。如果你沿用了 Windows 路线，无论选择哪种客户端，[这些技巧](https://www.reddit.com/r/ethstaker/comments/nqvkv4/tips_for_eth2_staking_on_windows_avoid_issues_and/)可以使你的设置保持良好状态。

## 工具

此处是一份建议客户端除其他标准 API终端之外，添加对[标准验证者 API 终端](https://hackmd.io/@dapplion/eth2-validator-api)支持的提案。这能帮助提供客户端之间的通用用户界面，使得切换客户端更加容易，并且提升网络的客户端多样性。

&lt;br/&gt;

# 合并工作

合并 (The Merge) 指的是以太坊从 Proof of Work 链转换到 Proof of Stake 信标链运作。

虽然 Rayonism 项目证明了 The Merge 的整体可行性，但并没有探索从 PoW 到 PoS 的实际切换。 Mikhail 最近发布了[切换过程的技术设计](https://github.com/ethereum/eth2.0-specs/pull/2462)，有很多事情要小心。在合并之前，现有矿工的行为很可能是最不可预测的，因此在规划中需要考虑各种场景。

&lt;br/&gt;

# 释义性资源

在区块链中进行真正的扩容并不容易。否则，我们早就实现了。Vitalik 在其文章中 [The Limits to Blockchain Scalability](https://vitalik.ca/general/2021/05/23/scaling.html) (区块链的扩容瓶颈) 解释了原因。要了解其中不同的挑战和可能的解决方案，这是一个可读性很强的介绍。

Alex Stokes 就 [Altair 中的计算改革](https://www.google.com/sorry/index?continue=https://www.youtube.com/watch%3Fv%3DKdhHJa2SEwY&amp;q=EgSdNIouGM2E94UGIhD2e9wSfREbXe1LNTvQLLhKMgFy)进行了 EIP 演示。活动中的讨论范围要广得多，我们几乎没有谈到计算改革，但我们确实在此过程中覆盖了很多干货。

Jeff Lau 的系列推文向我们解释了[合并工作](https://twitter.com/_jefflau/status/1399598794451345411)。

关于 [SSZ](https://www.ssz.dev/)，想知道却又不敢问的一切。

了解 [Kate (KZG)](https://hackmd.io/yqfI6OPlRZizv9yPaD-8IQ) 承诺 以及 Verkle Tries。这些是重要的密码学工具，可用于转向无状态以太坊并确保分片中的数据可用性。

&lt;br/&gt;

# 媒体及其他资源

James Beck 采访了我优秀的同事 Sajida Zouarhi (Besu Eth1 客户端的产品经理) 和 Mikhail Kalinin (负责合并的技术设计)，并将内容总结在一篇文章中：[Charting The Path To Proof of Stake Ethereum](https://consensys.net/blog/blockchain-explained/charting-the-path-to-proof-of-stake-ethereum/) (绘制权益证明以太坊的路径)。 这是[预热推文](https://twitter.com/JamesJohnBeck/status/1400552379066503168)，但完整的采访非常值得一看。

NBC 新闻引用 Danny Ryan 的一些叙述撰写了关于[权益证明](https://www.nbcnews.com/tech/tech-news/cryptocurrency-goes-green-proof-stake-offer-solution-energy-concerns-rcna1030)的文章。我特别喜欢，“这是人类的一项根本性突破，我们现在可以实现采用其他方式做不到的事情”。

Vitalik 和 Lex Fridman 的[三小时](https://www.youtube.com/watch?v=XW0QZmtbjvs)访谈 (此处是[音频版](https://lexfridman.com/vitalik-buterin-2/)，前八分钟是广告)，以下是一些花絮：

- “Craig Wright 是个骗子……起诉我吧” ([0:57:39](https://youtu.be/XW0QZmtbjvs?t=3459) 和 [2:22:42](https://youtu.be/XW0QZmtbjvs?t=8562))

- “Polygon 是一条侧链” ([1:20:40](https://youtu.be/XW0QZmtbjvs?t=4840) 所以这算是最终确认了)

- 关于合并的时间，“2022年初是最实际的” ([1:34:50](https://youtu.be/XW0QZmtbjvs?t=5690))

如果不想全部都听完，[YouTube](https://www.youtube.com/watch?v=XW0QZmtbjvs) 的视频能够跳转到不同的话题，其中 Eth2、PoS 以及扩容相关的讨论都不错。

Christine 和我在 Coindesk 的 [Mapping out Eth2.0](https://www.coindesk.com/podcasts/mapping-out-eth-2-0) 播客上进行了讨论。在 [5 月 27 日的那一集](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/centralization-crisis-ethereum)中，我们讨论了如何处理去中心化生态系统中的安全漏洞，而在 [6 月 3 日](https://www.coindesk.com/podcasts/hard-problems-bram-cohen/elon-musk-bitcoin-ethereum-layer-2)，我又谈到了比特币的环境友好尝试。虽然表达上不是最连贯的，但都很有趣。

Coindesk 的 Valid Points 刊物: [The Risks and Rewards of Sharding](https://www.coindesk.com/ethereum-2-0-risks-and-rewards-of-sharding) (分片的风险和益处) 以及 [Why Staking on Eth 2.0 Is Becoming Lucrative for Exchanges](https://www.coindesk.com/staking-eth-2-0-lucrative-for-exchanges-web-3-hackathon) (为何 Eth2.0 质押对于交易所来说有利可图)

&lt;br/&gt;

# 研究工作

矿工/验证者的可提取价值 (MEV) 正在成为一个重要话题，无论是在当前还是合并后的以太坊中。这篇文章引发了人们对 [MEV 对信标链去中心化的影响](https://hackmd.io/@Izzy-/Eth2VevStaking)的担忧。简而言之，MEV 的经济学将使个人验证者处于不利地位。出于几个原因，我绝不认为这是理所当然的。一方面，这个领域充斥着大量的研究 (因此将其放入本节)。Flashbots 这样的举措旨在使 MEV 民主化，并且很可能会成功。事实上就在几天前，Vitalik 就这个主题发表了一篇文章：[Proposer/block builder separation-friendly fee market designs](https://ethresear.ch/t/proposer-block-builder-separation-friendly-fee-market-designs/9725?u=benjaminion) (提议者/区块生产者友好的区别费用市场设计)。另一个原因是，在未来几年，底层链很可能仅用于 L2 解决方案的数据可用性；MEV 将迁移到 rollups 中，并且不再是验证者的问题

Georgios Konstantopoulos 担心验证者因丢失提款密钥而无法取回他们的存款，并提出了一种[简单提款凭证轮换](https://ethresear.ch/t/simple-withdrawal-credentials-rotation/9555?u=benjaminion)机制。这绝对是一个问题：我们最初使用的 BLS 提款密钥机制是一个新的工作流程，几乎没有标准工具，我相信质押者可能会在不经意间丢失对其提款私钥的访问权限。现在我们有可用的`0x01`凭证，它使用了标准的以太坊账户，对未来的质押者来说应该不是问题。尽管如此，该提案不太可能实施：非托管型质押服务有太多机会窃取质押者的资金。但我相信这方面的工作会继续下去。Protolambda 发布了他对合并后[分片路线](https://twitter.com/protolambda/status/1399436703669051394)的看法，并总结了未来的挑战。[幕后](https://twitter.com/protolambda/status/1399436720479870976)正在进行大量工作。

&lt;br/&gt;

# 常规会议

## 实现者会议

第 65 次会议于 6 月 3 日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/220)
- [会议视频](https://youtu.be/cgH8OsCg9tY?t=96)
- [我的速记](https://hackmd.io/@benjaminion/HkCsML89u)

这次会议比我们习惯的时间更长互动更多。围绕三个主题进行了讨论 (我的笔记中没有详细记录，如果感兴趣的话建议看看会议视频)。

首先，是否更改 Altair 规范中同步委员会的奖励结构。当前的方法可能会导致表现同样出色的验证者获得的奖励之间存在[显着差异](https://github.com/ethereum/eth2.0-specs/issues/2448)。改进这一点基本上是没有异议的，主要讨论了采用以下两个提案中的哪一个：[来自 Potuz](https://github.com/ethereum/eth2.0-specs/pull/2450) 的提案，和[来自 Vitalik](https://github.com/ethereum/eth2.0-specs/pull/2453) 的提案。两个方案都很好，但 Vitalik 的版本最终获得了采用。

其次还讨论了 Jacek 提出的将[历史区块根累加器](https://github.com/ethereum/eth2.0-specs/pull/2428)纳入状态的提案，以及这最好在一次协议还是跨两次协议升级中完成。在此阶段，有些建议是不为 Altair 添加更多内容，但所有人都同意这个基本概念是合理的。最后，最终的 Altair 规范 (Alpha 7) 推迟到下周发布，以便对此进行更多讨论。

第三，Rocket Pool 的 Joe Clapis 客串提出 `[0x02](https://github.com/ethereum/eth2.0-specs/pull/2454)`提款凭证，以便在合并后的质押池中公平分配交易奖励。这件事并不紧迫，因此这次是对该问题的概述。

## 合并会议

第五次合并会议于 6 月 3 日进行，就在实现者会议之前。

- [会议议程](https://github.com/ethereum/pm/issues/331)
- [会议视频](https://www.youtube.com/watch?v=j61FqoQwEHo)
- Protolambda 的[笔记](https://notes.ethereum.org/@protolambda/Hkg21v8qu)

会议包括对合并转换过程的讨论、共识和执行客户端之间的 API 以及是否在信标状态中存储 `ExecutionPayloadHeader` 或完整的 `ExecutionPayload`，以及如何处理合并后操作码的 `difficulty`。

&lt;br/&gt;

# 近期活动

- UTC 时间 6 月 23 日 1300，以太坊基金会将在 [/r/ethereum](https://www.reddit.com/r/ethereum/) 进行 [Eth2 团队 AMA](https://twitter.com/drakefjustin/status/1398375498342977544)

&lt;br/&gt;

# 其他资讯

- Danny Ryan：[Finalized no. 26](https://blog.ethereum.org/2021/05/25/finalized-no-26/)，简单更新了 Altair，Rayonism 以及合并的进展。

- Chainsafe 的 Lodestar 客户端诞生了！最新的[开发进展](https://medium.com/chainsafe-systems/lodestars-recent-progress-metrics-and-other-oddities-49c6e646e421)更新推荐一读。

- [Prysmatic Labs](https://medium.com/prysmatic-labs/prysmatic-labs-ethereum-monthly-development-update-94c41df0a1f8) 的开发月报

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Vitalik：区块链可扩展性的限制]]></title><description><![CDATA[为什么区块链扩容没有我们想得那么容易？]]></description><link>https://www.ethereum.cn/Technology/the-limits-to-blockchain-scalability</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/the-limits-to-blockchain-scalability</guid><pubDate>Fri, 04 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/05/23/scaling.html)

&lt;br/&gt;

*感谢Felix Lange、Martin Swende、Marius van der Wijden 和 Mark Tyneway的反馈和校对。*



我们能将区块链的可扩展性提升到多少？是否真的能像 [Elon Musk 所说](https://twitter.com/elonmusk/status/1393738154889338884)的那样“区块时间加速十倍，区块大小增长十倍并且手续费降低一百倍”，而不会导致极度中心化并违背区块链的本质属性？如果答案是否定的，那我们能达到什么程度？改变公式算法会怎样？更重要的是，如果引入类似 ZK-SNARK 或分片的功能会怎样？一个分片型的区块链在理论上能够不断添加分片，那么是否真的可以这么做呢？


事实证明，无论是否使用分片，都有重要且非常微妙的技术因素限制了区块链的可扩展性。许多情况都有解决方案，但是即使有了解决方案，也存在局限性。这篇文章将探讨其中的许多问题。


如果只是简单地拔高参数，问题似乎就能得到解决。但是我们会因此付出什么代价？

![https://vitalik.ca/images/scaling-files/elontweet.png](https://i.ibb.co/HT1p3v9/elontweet.png)

&lt;br/&gt;

# 普通用户能够运行节点对于区块链的去中心化至关重要

想象一下凌晨两点多，你接到了一个紧急呼叫，来自世界另一端帮你运行矿池 (质押池) 的人。从大约 14 分钟前开始，你的池子和其他几个人从链中分离了出来，而网络仍然维持着 79% 的算力。 根据你的节点，多数链的区块是无效的。这时出现了余额错误：区块似乎错误地将 450 万枚额外代币分配给了一个未知地址。

一小时后，你和其他两个同样遭遇意外的小矿池参与者、一些区块浏览器和交易所方在一个聊天室中，看见有人贴出了一条推特的链接，开头写着“宣布新的链上可持续协议开发基金”。

到了早上，相关讨论广泛散布在推特以及一个不审查内容的社区论坛上。但那时 450 万枚代币中的很大一部分已经在链上转换为其他资产，并且进行了数十亿美元的 defi 交易。79％的共识节点，以及所有主要的区块链浏览器和轻钱包的端点都遵循了这条新链。也许新的开发者基金将为某些开发提供资金，或者也许所有这些都被领先的矿池、交易所及其裙带所吞并。但是无论结果如何，该基金实际上都成为了既成事实，普通用户无法反抗。

或许还有这么一部主题电影。或许会由 MolochDAO 或其他组织进行资助。

![https://vitalik.ca/images/scaling-files/forkwars.png](https://i.ibb.co/LxT9XhY/forkwars.png)

这种情形会发生在你的区块链中吗？你所在区块链社区的精英，包括矿池、区块浏览器和托管节点，可能协调得很好，他们很可能都在同一个 telegram 频道和微信群中。如果他们真的想出于利益突然对协议规则进行修改，那么他们可能具备这种能力。以太坊区块链在十小时内完全解决了[共识失败](https://blog.ethereum.org/2016/11/25/security-alert-11242016-consensus-bug-geth-v1-4-19-v1-5-2/)，如果是只有一个客户端实现的区块链，并且只需要将代码更改部署到几十个节点，那么可以更快地协调客户端代码的更改。能够抵御这种社会性协作攻击的唯一可靠方式是“被动防御”，而这种力量来自去一个中心化的群体：用户。

想象一下，如果用户运行区块链的验证节点 (无论是直接验证还是[其他间接技术](https://vitalik.ca/general/2021/04/07/sharding.html#improving-sharding-with-better-security-models))，并自动拒绝违反协议规则的区块，即使超过 90% 的矿工或质押者支持这些区块，故事会如何发展。

如果每个用户都运行一个验证节点，那么攻击很快就会失败：有些矿池和交易所会进行分叉，并且在整个过程中看起来很愚蠢。但是即使只有一些用户运行验证节点，攻击者也无法大获全胜。相反，攻击会导致混乱，不同用户会看到不同的区块链版本。最坏情况下，随之而来的市场恐慌和可能持续的链分叉将大幅减少攻击者的利润。对如此旷日持久的冲突进行应对的想法本身就可以阻止大多数攻击。 

Hasu 关于这一点的看法：

“我们要明确一件事，我们之所以能够抵御恶意的协议更改，是因为拥有用户验证区块链的文化，而不是因为 PoW 或 PoS。”

![https://vitalik.ca/images/scaling-files/hasutweet.png](https://i.ibb.co/TWnkZQ7/hasutweet.png)

假设你的社区有 37 个节点运行者，以及 80000 名被动监听者，对签名和区块头进行检查，那么攻击者就获胜了。如果每个人都运行节点的话，攻击者就会失败。我们不清楚针对协同攻击的启动[群体免疫](https://vitalik.ca/general/2020/08/17/philosophy.html)的确切阈值是多少，但有一点是绝对清楚的：好的节点越多，恶意的节点就越少，而且我们所需的数量肯定不止于几百几千个。

&lt;br/&gt;

# 那么全节点工作的上限是什么？

为了使得有尽可能多的用户能够运行全节点，我们会将注意力集中在普通消费级硬件上。即使能够轻松购买到专用硬件，这能够降低一些全节点的门槛，但事实上对可扩展性的提升并不如我们想象的那般。

全节点处理大量交易的能力主要受限于三个方面：


- **算力**：在保证安全的前提下，我们能划分多少 CPU 来运行节点？

- **带宽**：基于当前的网络连接，一个区块能包含多少字节？

- **存储**：我们能要求用户使用多大的空间来进行存储？此外，其读取速度应该达到多少？(即，HDD 足够吗？还是说我们需要 SSD？)



**许多使用“简单”技术对区块链进行大幅扩容的错误看法都源自于对这些数字过于乐观的估计**。我们可以依次来讨论这三个因素：

## 算力


- 错误答案：100% 的 CPU 应该用于区块验证

- 正确答案：约 5-10% 的 CPU 可以用于区块验证


限制之所以这么低的四个主要原因如下：


- 我们需要一个安全边界来覆盖 DoS 攻击的可能性 (攻击者利用代码弱点制造的交易需要比常规交易更长的处理时间)

- 节点需要在离线之后能够与区块链同步。如果我掉线一分钟，那我应该要能够在几秒钟之内完成同步

- 运行节点不应该很快地耗尽电池，也不应该拖慢其他应用的运行速度

- 节点也有其他非区块生产的工作要进行，大多数是验证以及对 p2p 网络中输入的交易和请求做出响应


请注意，直到最近大多数针对“为什么只需要 5-10%？”这一点的解释都侧重于另一个不同的问题：因为 PoW 出块时间不定，验证区块需要很长时间，会增加同时创建多个区块的风险。 这个问题有很多修复方法，例如 [Bitcoin NG](https://www.usenix.org/system/files/conference/nsdi16/nsdi16-paper-eyal.pdf)，或使用 PoS 权益证明。但这些并没有解决其他四个问题，因此它们并没有如许多人所料在可扩展性方面获得巨大进展。


并行性也不是灵丹妙药。通常，即使是看似单线程区块链的客户端也已经并行化了：签名可以由一个线程验证，而执行由其他线程完成，并且有一个单独的线程在后台处理交易池逻辑。 而且所有线程的使用率越接近 100%，运行节点的能源消耗就越多，针对 DoS 的安全系数就越低。

## 带宽


- **错误答案**：如果没 2-3 秒都产生 10 MB 的区块，那么大多数用户的网络都大于 10 MB/秒，他们当然都能处理这些区块

- **正确答案**：或许我们能在每 12 秒处理 1-5 MB 的区块，但这依然很难


如今，我们经常听到关于互联网连接可以提供多少带宽的广为传播的统计数据：100 Mbps 甚至 1 Gbps 的数字很常见。但是由于以下几个原因，宣称的带宽与预期实际带宽之间存在很大差异：

1.  “Mbps”是指“每秒数百万 bits”； 一个 bit 是一个字节的 1/8，因此我们需要将宣称的 bit 数除以 8 以获得字节数。
2.  网络运营商，就像其他公司一样，经常编造谎言。
3.  总是有多个应用使用同一个网络连接，所以节点无法独占整个带宽。
4.  P2P 网络不可避免地会引入开销：节点通常最终会多次下载和重新上传同一个块 (更不用说交易在被打包进区块之前还要通过 mempool 进行广播)。


当 Starkware 在 2019 年进行一项实验时，他们在[交易数据 gas 成本降低](https://eips.ethereum.org/EIPS/eip-2028)后首次发布了 500 kB 的区块，一些节点实际上无法处理这种大小的区块。处理大区块的能力已经并将持续得到改善。但是无论我们做什么，我们仍然无法获取以 MB/秒为单位的平均带宽，说服自己我们可以接受 1 秒的延迟，并且有能力处理那种大小的区块。

## 存储


- **错误答案**：10 TB

- **正确答案**：512 GB



正如大家可能猜到的，这里的主要论点与其他地方相同：理论与实践之间的差异。理论上，我们可以在亚马逊上购买[ 8 TB 固态驱动](https://www.amazon.com/SAMSUNG-870-QVO-SATA-MZ-77Q8T0B/dp/B089C3TZL9/ref=sr_1_3?dchild=1&amp;keywords=8tb&amp;qid=1621637865&amp;s=pc&amp;sr=1-3) (确实需要 SSD 或 NVME；HDD 对于区块链状态存储来说太慢了)。实际上，我用来写这篇博文的笔记本电脑有 512 GB，如果你让人们去购买硬件，许多人就会变得懒惰 (或者他们无法负担 800 美元的 8 TB SSD) 并使用中心化服务。即使可以将区块链装到某个存储设备上，大量活动也可以快速地耗尽磁盘并迫使你购入新磁盘。

一群区块链协议研究员对每个人的磁盘空间进行了调查。 我知道样本量很小，但仍然...

![https://vitalik.ca/images/scaling-files/poll.png](https://i.ibb.co/gjDNpgS/poll.png)

此外，存储大小决定了新节点能够上线并开始参与网络所需的时间。现有节点必须存储的任何数据都是新节点必须下载的数据。这个初始同步时间 (和带宽) 也是用户能够运行节点的主要障碍。在写这篇博文时，同步一个新的 geth 节点花了我大约 15 个小时。如果以太坊的使用量增加 10 倍，那么同步一个新的 geth 节点将至少需要一周时间，而且更有可能导致节点的互联网连接受到限制。这在攻击期间更为重要，当用户之前未运行节点时对攻击做出成功响应需要用户启用新节点。

## 交互效应

此外，这三类成本之间存在交互效应。由于数据库在内部使用树结构来存储和检索数据，因此从数据库中获取数据的成本随着数据库大小的对数而增加。事实上，因为顶级 (或前几级) 可以缓存在 RAM 中，所以磁盘访问成本与数据库大小成正比，是 RAM 中缓存数据大小的倍数。

不要从字面上理解这个图，不同的数据库以不同的方式工作，通常内存中的部分只是一个单独 (但很大) 的层 (参见 leveldb 中使用的 [LSM 树](http://paperhub.s3.amazonaws.com/18e91eb4db2114a06ea614f0384f2784.pdf))。但基本原理是一样的。

![https://vitalik.ca/images/scaling-files/tree.png](https://i.ibb.co/BchsfNs/tree.png)


例如，如果缓存为 4 GB，并且我们假设数据库的每一层比上一层大 4 倍，那么以太坊当前的 ~64 GB 状态将需要 ~2 次访问。但是如果状态大小增加 4 倍到 ~256 GB，那么这将增加到 ~3 次访问。 因此，gas 上限增加 4 倍实际上可以转化为区块验证时间增加约 6 倍。这种影响可能会更大：硬盘在已满状态下比空闲时需要花更长时间来读写。

## 这对以太坊来说意味着什么？

现在在以太坊区块链中，运行一个节点对许多用户来说已经是一项挑战，尽管至少使用常规硬件仍然是可能的 (我写这篇文章时刚刚在我的笔记本电脑上同步了一个节点！)。 因此，我们即将遭遇瓶颈。**核心开发者最关心的问题是存储大小。**因此，目前在解决计算和数据瓶颈方面的巨大努力，甚至对共识算法的改变，都不太可能带来 gas limit 的大幅提升。即使[解决了以太坊最大的 DoS 弱点](https://blog.ethereum.org/2021/05/18/eth_state_problems/)，也只能将 gas limit 提高 20%。

对于存储大小的问题，唯一解决方案是[无状态和状态逾期](https://hackmd.io/@vbuterin/state_expiry_paths)。无状态使得节点群能够在不维护永久存储的情况下进行验证。状态逾期会使最近未访问过的状态失活，用户需要手动提供证明来更新。这两条路径已经研究了很长时间，并且已经开始了关于无状态的概念验证实现。这两项改进相结合可以大大缓解这些担忧，并为显著提升 gas limit 开辟空间。**但即使在实施无状态和状态逾期之后，gas limit 也可能只会安全地提升约 3 倍，直到其他限制开始发挥作用。**

另一个可能的中期解决方案使使用 ZK-SNARKs 来验证交易。ZK-SNARKs 能够保证普通用户无需个人存储状态或是验证区块，即使他们仍然需要下载区块中的所有数据来抵御[数据不可用攻击](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding)。另外，即使攻击者不能强行提交无效区块，但是如果运行一个共识节点的难度过高，依然会有协调审查攻击的风险。因此，ZK-SNARKs 不能无限地提升节点能力，但是仍然能够对其进行大幅提升 (或许是 1-2 个数量级)。一些区块链在 layer1 上探索该形式，以太坊则通过 layer2 协议 (也叫 [ZK rollups](https://vitalik.ca/general/2021/01/05/rollup.html)) 来获益，例如 [zksync](https://zksync.io/), [Loopring](https://loopring.org/) 和 [Starknet](https://medium.com/starkware/on-the-road-to-starknet-a-permissionless-stark-powered-l2-zk-rollup-83be53640880)。

&lt;br/&gt;

# 分片之后又会如何？


**分片从根本上解决了上述限制，因为它将区块链上包含的数据与单个节点需要处理和存储的数据解耦了**。节点验证区块不是通过亲自下载和执行，而是使用[先进的数学和密码学技术](https://vitalik.ca/general/2021/04/07/sharding.html)来间接验证区块。

因此，分片区块链可以安全地拥有非分片区块链无法实现的非常高水平的吞吐量。这确实需要大量的密码学技术来有效替代朴素完整验证，以拒绝无效区块，但这是可以做到的：[该理论](https://hackmd.io/@vbuterin/das)已经[具备了基础](https://vitalik.ca/general/2021/01/26/snarks.html)，并且基于[草案规范](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/sharding/beacon-chain.md)的概念验证[已经在进行中](https://github.com/protolambda/eth2-das)。

![https://vitalik.ca/images/sharding-files/beacon_chain.jpg](https://i.ibb.co/Tbbpckf/beacon-chain.jpg)

以太坊计划采用**二次方分片 (quadratic sharding)**，其中总可扩展性受到以下事实的限制：节点必须能够同时处理单个分片和信标链，而信标链必须为每个分片执行一些固定的管理工作。如果分片太大，节点就不能再处理单个分片，如果分片太多，节点就不能再处理信标链。这两个约束的乘积构成了上限。


可以想象，通过三次方分片甚至指数分片，我们可以走得更远。在这样的设计中，数据可用性采样肯定会变得更加复杂，但这是可以实现的。 但以太坊并没有超越二次方，原因在于，从交易分片到交易分片的分片所获得的额外可扩展性收益实际上无法在其他风险程度可接受的前提下实现。

那么这些风险是什么呢？

## 最低用户数量

可以想象，只要有一个用户愿意参与，非分片区块链就可以运行。但分片区块链并非如此：单个节点无法处理整条链，因此需要足够的节点以共同处理区块链。 如果每个节点可以处理 50 TPS，而链可以处理 10000 TPS，那么链至少需要 200 个节点才能存续。如果链在任何时候都少于 200 个节点，那可能会出现节点无法再保持同步，或者节点停止检测无效区块，或者还可能会发生许多其他坏事，具体取决于节点软件的设置。

在实践中，由于需要冗余 (包括[数据可用性采样](https://hackmd.io/@vbuterin/das))，安全的最低数量比简单的“链 TPS 除以节点 TPS”高几倍，对于上面的例子，我们将其设置位 1000 个节点。

如果分片区块链的容量增加 10 倍，则最低用户数也增加 10 倍。 现在大家可能会问：为什么我们不从较低的容量开始，当用户很多时再增加，因为这是我们的实际需要，用户数量回落再降低容量？


这里有几个问题：

1. 区块链本身无法可靠地检测到其上有多少唯一用户，因此需要某种治理来检测和设置分片数量。对容量限制的治理很容易[成为分裂和冲突的根源。](https://en.bitcoin.it/wiki/Block_size_limit_controversy)
2. 如果许多用户突然同时意外掉线怎么办？
3.增加启动分叉所需的最低用户数量，使得防御恶意控制更加艰难。



最低用户数为 1,000，这几乎可以说是没问题的。另一方面，最低用户数设为 100 万，这肯定是不行。即使最低用户数为 10,000 也可以说开始变得有风险。**因此，似乎很难证明超过几百个分片的分片区块链是合理的。**

## 历史可检索性



用户真正珍视的区块链重要属性是**永久性**。当公司破产或是维护该生态系统不再产生利益时，存储在服务器上的数字资产将在 10 年内不再存在。而以太坊上的 NFT 是永久的。



是的，到 2372 年人们仍能够下载并查阅你的加密猫。

![https://vitalik.ca/images/scaling-files/cryptokitties.png](https://i.ibb.co/q1yrLZF/cryptokitties.png)


但是一旦区块链的容量过高，存储所有这些数据就会变得更加困难，直到某时出现巨大风险，某些历史数据最终将……没人存储。


要量化这种风险很容易。以区块链的数据容量 (MB/sec) 为单位，乘以 ~30 得到每年存储的数据量 (TB)。 当前的分片计划的数据容量约为 1.3 MB/秒，因此约为 40 TB/年。如果增加 10 倍，则为 400 TB/年。如果我们不仅希望可以访问数据，而且是以一种便捷的方式，我们还需要元数据 (例如解压缩汇总交易)，因此每年达到 4 PB，或十年后达到 40 PB。Internet Archive (互联网档案馆) [使用 50 PB](https://archive.org/web/petabox.php)。所以这可以说是分片区块链的安全大小上限。


因此，看起来在这两个维度上，**以太坊分片设计实际上已经非常接近合理的最大安全值**。常数可以增加一点，但不能增加太多。

&lt;br/&gt;

# 结语

尝试扩容区块链的方法有两种：**基础的技术改进和简单地提升参数。**首先，提升参数听起来很有吸引力：如果您是在餐纸上进行数学运算，这就很容易让自己相信消费级笔记本电脑每秒可以处理数千笔交易，不需要 ZK-SNARK、rollups 或分片。不幸的是，有很多微妙的理由可以解释为什么这种方法是有根本缺陷的。

运行区块链节点的计算机无法使用 100％的 CPU 来验证区块链；他们需要很大的安全边际来抵抗意外的 DoS 攻击，他们需要备用容量来执行诸如在内存池中处理交易之类的任务，并且用户不希望在计算机上运行节点的时候无法同时用于任何其他应用。带宽也会受限：10 MB/s 的连接并不意味着每秒可以处理 10 MB 的区块！也许每 12 秒才能处理 1-5 MB 的块。存储也是一样，提高运行节点的硬件要求并且限制专门的节点运行者并不是解决方案。**对于去中心化的区块链而言，普通用户能够运行节点并形成一种文化，即运行节点是一种普遍行为，这一点至关重要。**


然而，基础的技术改进是可行的。当前，**以太坊的主要瓶颈是存储大小，而无状态性和状态逾期可以解决该问题，**并使其能够最多增长约 3 倍，但不能再多，因为我们希望运行节点比当前更容易。**采用分片的区块链可以进一步扩展**，因为分片区块链中的单个节点不需要处理每笔交易。但即使是分片区块链，容量也有局限性：随着容量的增加，最低安全用户数增加，归档区块链的成本 (以及如果没有人归档链，数据存在丢失的风险) 就会上升。但是我们不必过于担心：这些限制足以我们在保证区块链完全安全性的同时每秒处理一百万笔交易以上。但是要在不损害区块链最宝贵的去中心化特性的前提下实现这一点，我们需要付出更多努力。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Polygon (MATIC): 以太坊扩容瑞士军刀]]></title><description><![CDATA[以太坊扩容解决方案 Polygon 的基础介绍与应用]]></description><link>https://www.ethereum.cn/Technology/polygon-crypto-matic-network-dapps-erc20-token</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/polygon-crypto-matic-network-dapps-erc20-token</guid><pubDate>Wed, 02 Jun 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [cryptopedia](https://www.gemini.com/cryptopedia/polygon-crypto-matic-network-dapps-erc20-token)

&lt;br/&gt;

# 摘要

*Polygon (前 Matic 网络) 通过大幅提高其网络可扩展性和整体的交易处理速度来改善以太坊区块链的功能。Polygon 使用自己的 PoS 区块链和 Commit Chain (提交链) 连接来实现扩容以太坊网络的目标，并试图解决可能会阻碍区块链技术被广泛采用的低效率问题。*

![1](https://i.ibb.co/26nvzn1/Gemini-Category-Defi-3.png)

&lt;br/&gt;

# 大纲

- Polygon 加密网络基础知识
- Matic 代币和 Matic 钱包
- Polygon 加密网络的实际应用
- Polygon 正在扩展 Matic 的性能

&lt;br/&gt;

# Polygon 加密网络基础知识

Polygon 作为一个 Layer-2 扩容解决方案，旨在帮助[以太坊平台](https://www.gemini.com/cryptopedia/ethereum-blockchain-smart-contracts-dapps)被大规模采用。它通过提供工具来创建可扩展的[去中心化应用](https://www.gemini.com/cryptopedia/decentralized-applications-defi-dapps) (dApps)，以性能、用户体验和安全性为优先级，满足了开发者的各种需求。Polgon 方案能够实现，很大程度上取决于它的两种底层技术架构：[PoS](https://www.gemini.com/cryptopedia/proof-of-stake-delegated-pos-dpos) Commit Chain 和 [More Viable Plasma](https://www.gemini.com/cryptopedia/glossary#more-viable-plasma) (更可行的 Plasma，MoreVP) L2 扩容解决方案。作为以太坊主链的 Commit Chain，Polygon 的 PoS 链吸引了超过 80 个以太坊 dApps 在其平台上部署。而在这个平台上，不会出现像以太坊和其他 PoW 链那样常见的网络拥堵情况。

Polygon 主要通过 Commit chain 发挥作用，Commit chain 是与主区块链 (在这里指的是以太坊) 相邻的交易网络。Commit chain 将批量交易打包在一起，并在将数据返回到主链之前对它们进行批量确认。理论上来说，Polygon 最终将拥有成千上万的链来共同扩容以提高网络的吞吐量，当连接到以太坊这样的主链时，有可能会有 TPS 达到数百万的那么一天。Polygon 目前仅使用 Commit Chain 连接来缩短交易处理时间，但最终将使用其他 Layer-2 扩容机制如 [Optimistic Rollups](https://www.gemini.com/cryptopedia/glossary#optimistic-rollup-or) 等等。

虽然 Polygon 目前完全专注于以太坊，但其计划开发自己的可扩展性产品以支持其他区块链，并在不同协议之间提供[跨链互操作性](https://www.gemini.com/cryptopedia/Cross-Chain%20Communication) 解决方案。

&lt;br/&gt;

# Matic 代币和 Matic 钱包

MATIC 代币是 Polygon 的原生代币，它有几种不同的用途，其中之一是通过一个基于 gas 的机制来支持协议，该机制用于支付网络传输数据所需要的计算能力所产生的费用。该机制还允许开发者和生态系统贡献者通过支付 MATIC 代币来使用 Polygon 以及其开发框架在 Polygon 上构建 dApp。

MATIC 可以存储在 Matic 钱包中，持有者可以选择立即质押其代币以及直接管理他们自己的投资。Matic 钱包

利用 Polygon 的 MoreVP 技术以提供一种易于使用的解决方案，让 MATIC 代币持有者安全地、简单地管理其加密资产。该钱包使用速度快如闪电，并与 WalletConnect 集成以确保妥善保管用户的私钥，并提供访问其他 Polygon 性能的权限。该钱包还允许用户连接各种 dApp，质押其 MATIC 代币，并持有其他 ERC-20 代币。

在未来，Polygon 希望将其版图扩展到以太坊之外，并被用于其他正在创建自己的[去中心化金融](https://www.gemini.com/cryptopedia/open-vs-decentralized-finance-defi)生态系统的区块链中。为了实现 DeFi 被大规模采用的目标，新的区块链基础设施必须以去中心化的、不可纂改的以及[去信任](https://www.gemini.com/cryptopedia/glossary#trustless)的方式构建，同时又拥有高吞吐量的性能，以及能够实现快速地、便宜地进行交易。以上都是 Polygon 希望能够完成的挑战。

&lt;br/&gt;

# Polygon 加密网络的实际应用

支付：Polygon 加密平台旨在让 dApp 提高支付速度，通过专门的[应用程序编程接口](https://www.gemini.com/cryptopedia/glossary#application-programming-interface-api)( (API) 和[软件开发工具包](https://www.gemini.com/cryptopedia/glossary#software-development-kit-sdk) (SDK) 集成，而实现近乎即时的支付结算。这个过程允许 dApp、商家和用户以任意类型的加密货币 (尽管通常是 ERC-20 代币或 ETH) 来实现即时接受或支付资产。该系统分三个不同的阶段推出：

1.  以太坊 (ETH) 和 ERC-20 代币支付
2.  利用[原子交换](https://www.gemini.com/cryptopedia/glossary#atomic-swap)和[流动性提供者](https://www.gemini.com/cryptopedia/glossary#liquidity-providers)，进行跨链多资产代币转移与支付
3.  利用法币流动性提供者来实现基于法币的支付系统

借贷平台：Polygon 正在构建一种机制，当用户注册使用该借贷平台时，允许商家通过评估这些用户的交易历史来分析他们的信用等级。此功能是与 Dharma Protocol 合作执行的。借贷协议 Aave 在其部署在 Polygon 的市场上拥有 8000 多个用户，锁定了超过 10 亿美元的流动性。

游戏：Polygon 的 Layer-2 侧链扩容解决方案旨在提高区块链游戏的速度与性能。由于交易速度慢与网络延迟高，区块链游戏的发展落后于传统的 PC 和控制台游戏系统。利用 Polygon 的 Commit Chain 扩容技术以及协同以太坊网络一起，开发者将能够更有效的构建游戏，游戏玩家也将提高游戏体验。现在正是 Polygon 推动区块链游戏行业发展的好时候，因为[非同质化代币](https://www.gemini.com/cryptopedia/nft-non-fungible-token-crypto-collectibles) NFT 和 NFT 市场的火爆推动区块链和加密行业的普及 —— 许多游戏玩家购买、销售和交易不同类型的游戏 NFT。Aavegotchi、Neon District、Zed Run 和 Cometh 等顶级游戏和 NFT Dapps 已经通过 Polygon 提高了其用户体验。

其他用例：Polygon 还可以用于其他用例，例如，帮助 [DEXs](https://www.gemini.com/cryptopedia/decentralized-exchange-dex-crypto) 实现快速结算以提供其用户更快、更便宜的交易体验。 Quickswap、Dfyn 和 ComethSwap 是一些部署在 Polygon 的 DEXs，它们拥有着庞大的交易量和活跃的用户。Curve 和 mStable 等协议也确保了低成本和低滑点的稳定币 swap。此外，Polygon 的 Plasma 扩容解决方案能够加快代币化和非代币化资产的跨链原子交换。由于用户隐私问题，大多数 dApps 需要一种无需提交私钥即可签署交易的方法。由于其可扩展性增强，Polygon 有助于为 dApp 设计和使用启用一个开放的身份框架。

&lt;br/&gt;

# Polygon 正在扩展 Matic 的性能

Polygon 于 2017 年发布，最初名为 Matic Network，其主要目标一直是构建以太坊扩容框架。Matic Network 运营了几年，其扩容解决方案为 PoS 链和 Plasma 侧链。随后它于 2021 年 2 月正式更名为 Polygon，其愿景不变，但其范围和技术野心都扩大了。

与此前的 Matic Network 不同的是，Polygon 提供的解决方案是多方面的。Polygon 旨在将以太坊转变为一个真正的多链生态系统，这个生态系统将包含所有 Layer-2 扩容解决方案，不仅仅是 Matic Network 最初提供的实现。Polygon 为以太坊的扩容问题提供了一套解决方案 —— 因而项目的新命名中包含 “poly” 一词。截至 2021 年 4 月，Polygon 仍主要处理侧链连接并运行其主要的 PoS 链。但 Polygon 已计划扩展其版图，纳入其他 L2 解决方案到它的项目中，如：[zkRollups](https://www.gemini.com/cryptopedia/glossary#zero-knowledge-rollups-zk-rollups)、Optimistic Rollups、独立侧链、企业链、共享安全链以及链与链之间的通信协议。因此，Polygon 将自己比喻为以太坊扩容和基础设施开发的瑞士军刀。

值得注意的是，Polygon 此前已经经过验证的基础设施 (PoS 链和 Plasma 侧链) 将继续运行。Polygon 新增的功能和扩容解决方案将完全围绕这些基石构建。迄今为止，Polygn 的扩容解决方案已被 250 多个 dApps 采用，交易约 2000 万笔以及拥有约 39 万个独立钱包用户。

有了额外的扩容基础设施以及成熟的多链系统，Polygon 希望将以太坊转变为“区块链互联网”。Polygon 现在比以往任何时候都要获得更多的直接支持 (主要以太坊开发者)，一些以太坊社区成员加入 Polygon 担任顾问 —— 这是一个项目能够持续发展的优势。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Reddit热文：以太坊常常面临哪些抨击？]]></title><description><![CDATA[辩证看待以太坊常遭诟病的“缺陷”]]></description><link>https://www.ethereum.cn/Ecosystem/addressing-common-criticisms-about-ethereum</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/addressing-common-criticisms-about-ethereum</guid><pubDate>Tue, 01 Jun 2021 00:00:00 GMT</pubDate><content:encoded>
来源 | [r/ethereum](https://www.reddit.com/r/ethereum/comments/najp2c/addressing_common_criticisms_about_ethereum/)

编者注：本文由名为 Liberosist 的用户首发于 Reddit 论坛 r/ethereum 板块，引发社区热议，也启发了社区辩证看待面向以太坊的“批判观点”。本文仅代表作者个人观点，ECN 仅对其贴文进行编译。

&lt;br/&gt;

下文列出了一些对以太坊常见批评，也会提供我个人的看法。这些批评充斥着误解、FUD 和谎言，我希望本文能鼓励大家进行批判性思考，亲自获取准确的信息。如果你有其他问题，请留下评论。如果你不同意本文观点，我也接受，我也已经表达了自己的观点。当然，如果与事实不符或者出现了疏忽遗漏，我也会修正自己的观点。

特别感谢 r/ethfinance 收集问题的朋友们。

&lt;br/&gt;

### 以太坊无法扩容？

这显然是错误观点，因为目前上线了多个rollups，其中一些已经运行了一年！例如Loopring,、zkSync、DeversiFi、Hermez、Aztec、dYdX和Immutable X等等。这些项目中大多数可以通过极低Gas费用，达到数千TPS，其中一些项目还能进行补贴 (或减少用户体验的Gas费用)。

目前缺少的是通用可编程rollups。自1月以来 Optimism 一直活跃在主网上，但目前仅限于Synthetix。Optimism下一个发布的重大项目是 Uniswap V3，在7月或以后开放公共智能合约部署。顺便说一句，今年 Optimism 在沟通方面做得不尽人意，所以批评是理所当然的。不管是不是工程项目，沟通和公共关系总是很重要的。

但 Optimism 只是解决方案之一。今年将推出 zkSync 2.0、Arbitrum 和 StarkNet等其他解决方案，而 OMGX 和 Cartesi 等也将加入竞争。事实上，现在看来，Arbitrum 将先于 Optimism 投入使用。更不用说侧链或 commitchain，如 Polygon、xDai 或其他EVM链，如 BSC 或 Avalanche。最终，所有这些都会成为扩展后以太坊生态系统的一部分。

与此同时，这一观点也有符合事实的部分。我要指出的是，以太坊L1的Gas费用可能会永远居高不下，因为缺乏尚不存在的技术支持。即使对于 rollup，在分片发布之前，Gas 费也不会降到极低水平，这要几年以后才能实现，就算能够实现，也不能满足长期需求。另外，EVM 区块空间仍有非常大的需求。

相关文章：[Opinion: Rollups are 4th gen blockchains : CryptoCurrency (reddit.com)](https://www.reddit.com/r/CryptoCurrency/comments/my0h9s/opinion_rollups_are_4th_gen_blockchains/)

&lt;br/&gt;

### 过高的 Gas 费用会扼杀以太坊？

这个奇怪观点在加密货币圈里传得很广，但是该观点完全没有任何根据，一个产品产生过度需求会导致其失败吗？显卡价格已经高得离谱了，那么 AMD 和 Nvidia 是否很快就会被淘汰？

答案当然是否定的，现实情况是，正如前文所述，EVM 区块空间需求非常大，而 Gas 供应有限。目前，高昂的 Gas 费用表明对以太坊L1区块空间需求非常大，人们愿意为其支付高昂溢价。

这就是以太坊网络和ETH的价值所在。两个月后，基于EIP-1559机制，每个ETH利益相关者都能获得这些价值。

随着时间的推移，Gas 供应量会逐步增加，Gas 费用也会下降——从现实长远角度来看，区块空间供应永远不能满足全球对 EVM 区块空间的需求。未来会出现 rollups、zkPorter/Validium 等混合解决方案、侧链/替代链和中心化解决方案。整个以太坊生态系统将协同运行，在去中心化和交易费用方面作出不同权衡。


&lt;br/&gt;

### 以太坊是中心化系统，所有决策都由Vitalik做出？

尽管Vitalik仍然是以太坊生态系统中重要组成部分，但随着时间推移，以太坊的开发已经变得足够去中心化。以太坊的独特之处是采用多种客户端，研究与开发人员一起创建易懂的规范。然后，多个独立工作的客户端开发人员会应用规范。这与所有其他区块链项目不同，因为后者由核心团队开发单个客户端。当然，现在也有人支持单个客户端——将所有资源集中于一个客户端，这样该客户端的质量可以比其他4、5个独立客户端更高，但开发多客户端显然是最去中心化的方法。例如，目前以太坊采用了4个共识层客户端，还有一个在开发中，所有这些客户端的开发者团队除了获得资助外，都独立于以太坊基金会。对于任何共识升级，这5个开发团队必须达成一致，然后135000多个验证节点也要进行更新。这与中心化网络相反。更不用说以太坊强大的“Layer 0”，也就是以太坊社区，所有开发者和验证节点都参与其中。例如 EIP-1559 在很大程度上是由社区意愿驱动的。


&lt;br/&gt;

### 以太坊采取了预挖机制，Vitalik 在控制以太坊？（来自[u/aaqy](https://www.reddit.com/u/aaqy/)和[u/ec265](https://www.reddit.com/u/ec265/)）

我不是 ICO 的粉丝，虽然以太坊确实进行过ICO。我也不喜欢自私挖矿 (ninja mining)，比如比特币。我们已经看到一些 DeFi 项目公平的上线方式，其中包括向用户进行空投，这当然是代币分配的最佳方式。

然而重要的是，我们要理解当时以太坊 ICO 的背景。在2014年这是最公平的募资方式。在以太坊创世后，以太坊基金会持有约 1200 万个 ETH。然而这些年来，许多 ETH 都分发出去了，其中很多都用于筹集资金，就像以太坊当时的情况一样。目前以太坊基金会和早期开发者最多持有 2% 的供应量。Vitalik拥有的 ETH 占总量的 0.3%。

相比之下，其他项目创始人往往持有 20% 或以上的代币，例如特斯拉或亚马逊等上市公司，中本聪持有 BTC 总量的 5% (在2009至2010年，其持有量高达 50% 以上，但是这些比特币被认为是丢失了，所以没有可比性)。因此我会说，0.3% 不足以充分激励Vitalik继续进行以太坊开发！

我是否希望看到 ETH 代币分配更加公平？答案是肯定的。但如今，与所有其他项目相比，以太坊代币分配最为公平。


&lt;br/&gt;

### 挖矿正在破坏环境？

虽然不同挖矿机制确实有细微差别，但该观点在一定程度上是正确的——工作量证明挖矿机制非常低效。在未来几个月内以太坊将转向权益证明，这将使以太坊的能源消耗减少 99% 以上。

这也不仅仅是用电问题，我们知道目前全球半导体严重短缺。目前许多台积电有限的晶圆供应被用于制造矿卡，例如ASIC和GPU，这些资源可以重新分配为工程、科学等领域服务，当然，也能用来玩游戏。


&lt;br/&gt;

### 以太坊曾进行过回滚，这种情况还会发生？

人们喜欢用DAO分叉这个例子来证明以太坊会进行回滚。但人们也选择性地忽略了这其中的许多细节：

- 首先，DAO分叉不是回滚。这是一个特殊情况，攻击者必须等28天才能取款，所以社区执行了更改智能合约的操作。

- 开发者、用户、矿工和社区都达成了强烈共识——所以很难说回滚是一个中心化决定。

- 那些拒绝回滚的人干脆选择了以太坊经典。这对所有人都是双赢。

- 当时以太坊还是一个非常非常新的项目。你知道哪个项目在诞生不到2年就进行了回滚吗？ [Value overflow incident - Bitcoin Wiki](https://en.bitcoin.it/wiki/Value_overflow_incident)

- 针对这一假设，[EIP-999遭到拒绝](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-999.md)是最有力的反击证据。曾经有机会为以太坊联合创始人之一管理的实体回滚 50 万个 ETH，但社区强烈反对这一决定。以太坊不会再次发生回滚。


&lt;br/&gt;

### 以太坊依赖 Infura？

虽然Infura确实是一个占主导地位的服务提供商，而且以太坊生态系统肯定需要多样化，但这显然是个错误观点。在2020年11月，[Infura遭遇了一次大规模宕机](https://blog.infura.io/infura-mainnet-outage-post-mortem-2020-11-11/)，但以太坊一直运行良好。当然，这次事件对一些前端、交易所和钱包造成了干扰，但只要自己运行节点或使用不同服务提供商，就可以解决该问题。自从这次宕机后，许多前端和钱包开始运行自己的节点，并使用像Alchemy这样的替代方案。虽然在这方面还要做很多工作，但认为以太坊依赖Infura是错误观点。


&lt;br/&gt;

### 以太坊状态增长过快？

与比特币相比，这当然是正确观点。如果想要一个区块链以归档模式回溯数据，验证创世区块起的每笔交易，那么比特币确实是一个更好的选择。那么其价值有多大？如果你想使用比特币网络，那么你已经信任了矿工。在以太坊上，你可以用 1TB 的SSD，在第四代树莓派系统 (Raspberry Pi 4) 上运行全节点（非归档节点），发送和验证交易。对于大多数用户和消费者来说，这是相对容易购买的硬件。有些人可能会说，即使运行归档节点，通过 TurboGeth 这样的客户端也能很容易实现。

同样，与币安智能链、EOS、Solana或其他高 TPS 的 Layer1 链相比，以太坊状态增长更接近比特币。对于这些链来说，用户验证交易的概念甚至不存在。

同时也要注意，以太坊将在这方面作出更多取舍，慢慢实现弱主观性、无状态、状态逾期机制等等更新。纯粹主义者会觉得这不公平，不过不会带来影响，考虑到其他好处，会有一群用户很乐意同步从创世区块起的数据。


&lt;br/&gt;

### ETH供应没有固定上限？

该观点符合事实，但背后考虑到了安全因素。我想补充的是，在 EIP-1559 和合并进行后，ETH 供应很可能会达到大约 1.2 亿枚，并在此之后继续通缩或保持稳定。


&lt;br/&gt;

### 以太坊的货币政策不可靠？

该观点部分正确。虽然很多人夸大了这一点，但以太坊的区块奖励确实经历了两次削减，而且背后原因都是由社区共识而不是代码。EIP-1559 和合并会彻底改变以太坊货币政策。但如果在未来几年内这两者并没有给以太坊带来进一步改变，该批评仍然有效。就代币供应的可预测性及可靠性而言，比特币仍然是标准——尽管它在未来会面临安全风险。


&lt;br/&gt;

### 以太坊2.0还需要很多年才能实现？

关于以太坊2.0存在很多误解，尽管在很大程度上，以太坊的研究和开发人员要为信息传达的含混负责。首先，我们现在都不会称其为“以太坊 2.0”。总之，这是指一系列升级。信标链于2020年12月上线，是第一次升级，相关人员正在积极推进合并，计划于2021年底进行。接下来我要谈谈分片。另一个误解是，在这些升级后 Gas 费用会更低——但这绝不会发生在 Layer 1。分片的作用是加速rollups。无状态和状态逾期结合会对 Layer1 产生更大影响，如果需要的话，会再加上分片执行 (这一点目前尚无定论)。

&lt;br/&gt;

### 以太坊没有内在价值，是无中生有？

以太坊是一个全球去中心化的SaaS平台，通过交易费用产生收入。现在这些交易费用相当可观——每月超过10亿美元。与世界上最大的公司相比，以太坊收入排名第二。我目前不认为这是可持续的，但我的意思是这是可能的，并且对未来有一定认识。

EIP-1559会在7月上线，大部分交易费用将被销毁，直接为ETH利益相关者创造价值。合并后，除了质押产生的收益外，剩余未销毁的交易费用 (tips) 将分配给质押者。

以太坊不仅是世界上最具生产力的资产之一，还具有最先进的价值捕获机制。


&lt;br/&gt;

### ETH质押难度过高？

该观点非常符合事实，32 ETH是一大笔钱。然而，我认为人们对质押的定义有一个严重误解。在许多委托型区块链中，当你进行“质押”时，实际上是委托别人进行验证。Algorand等较新的共识模型会随机化此过程，但你仍然是在委托他人，而不是亲自进行验证。你实际上什么都没做就能获利。

在以太坊信标链中，你通过质押自己的ETH成为验证节点，从而通过向网络提供服务赚取质押收益。

对于那些只想质押而不关心技术细节的人，信标链只是基础层，在此基础上衍生出了多种质押服务，这些方案在去中心化程度上有所不同。这些服务让你能够质押少量ETH获得奖励。点此查看质押服务列表：[Ethereum 2.0 Beacon Chain (Phase 0) Block Chain Explorer - Ethereum 2.0 Staking Services Overview - beaconcha.in - 2021](https://beaconcha.in/stakingServices)


&lt;br/&gt;

### 以太坊从未按时执行更新，经常改变计划？（来自[u/I_haven-t_reddit](https://www.reddit.com/u/I_haven-t_reddit/)）

以太坊是否不断改变计划？这绝对符合事实，但这一点很符合实际需求。加密货币行业在快速创新，当你取得突破性进步时，坚持旧技术没有任何意义。即使你已经有一年左右没有研究该行业，放弃PoW/PoS混合共识仍有其道理。以太坊采用以rollup为中心的路线图是有意义的，因为能极大提高以太坊扩容性，其到来的速度比我们想象的都快。各种升级的确正在进行，信标链在2020年12月上线，在两个月内就会实现EIP-1559，我们距离合并不到6个月。


&lt;br/&gt;

### 权益证明机制会聚集资产，导致中心化？（来自[u/epic_trader](https://www.reddit.com/u/epic_trader/)和[u/Mathje](https://www.reddit.com/u/Mathje/), [u/sn00fy](https://www.reddit.com/u/sn00fy/)）

虽然乍一看该观点似乎有其道理，但其中也涉及到许多细微差别：

- 运行了6年多的工作量证明机制给以太坊带来了很多益处，期间我们看到了有效的代币分配。现在，论及代币分配的去中心化程度，以太坊仅次于比特币。

- 验证节点和 (非验证节点) 质押者也有参与成本。虽然硬件成本显著降低，但存在税收问题以及会经过再分配的成本。


- 经常被忽视的一个最大因素是，在权益证明机制 (Proof of Stake) 下，代币发行量非常低。合并发生后，发行量大约为 0.5%。社区正在提议设定验证节点上限，随后发行量会限制在 0.8% 左右。


&lt;br/&gt;

### 若以太坊得到各大公司采用，他们只会运行私有链？（来自[u/sn00fy](https://www.reddit.com/u/sn00fy/)）

不仅仅是公司，未来也会推出针对消费者的私有链。币安智能链上已经出现了这样的情况，但我认为，在未来政府、银行和企业等大公司将运行私有链。

当然，企业也会采用支持B2B的公有链。

正如开头所述，长期来看，以太坊 Layer1 所消耗的 gas 非常有限。但这并不重要，Layer1的空间将一直保持 100% 饱和，而其他基于以太坊构建的解决方案会增加其网络效应和林迪效应 (Lindy Effect)。


&lt;br/&gt;

### 以太坊采用的都是老技术，新诞生的区块链会采用更新的技术？（来自[u/Mathje](https://www.reddit.com/u/Mathje/)）

尽管加密领域里存在很多错误信息，导致了很多恐慌、疑惑和不确定性，这是最让我头疼的一个观点。以太坊一直处于创新前沿，并将继续保持这种状态。虽然这一领域确实有创新项目，但没有任何项目试图解决大问题：区块链不可能三角问题。假设一个情况：其他所有智能合约链都使用某种形式的委托型共识机制，许多都对验证节点数量设置了硬顶。例如，Cosmos: 300 (目前达到150)；Polkadot: 1000；币安智能链和EOS: 21。最终对区块链而言，验证节点数量越多，可扩展性越差。

信标链使用了革命性新技术，如弱主观性和签名聚合，以支持多达100万个验证节点，实现大规模去中心化。目前已经有13.5万个验证节点，每周还有数以千计的验证节点加入。更不用说信标链验证节点不需要像其他链一样全天候在线。

第一种情况：在ETH转账方面，这些Layer1链的吞吐量可以超过以太坊 (55 TPS左右)，总体吞吐量也会超过以太坊 (20 TPS左右)。但以太坊正在利用突破性新技术，例如数据可用性抽样，在不影响去中心化的前提下，通过赋能rollup和数据分片技术，达到10万以上TPS。即使完全放弃去中心化，Layer1也不会达到这么高的TPS。如果加入zkPorter和Validium等混合解决方案，以太坊能取得更高TPS。

第二种情况：最具创新性的区块链实际上是rollup。StarkNet取得了非常大的成就，StarkNet等rollups解决方案之所以基于以太坊，其原因在于以太坊拥有行业内最好的共识机制。

第三种情况：几乎所有创新性新智能合约都是在以太坊上发布，然后复制到其他链上。

简而言之，以太坊生态系统拥有行业中最尖端的技术。


&lt;br/&gt;

### 以太坊没有真实使用场景，不过是赌徒的游戏，或者为一些同样无用的代币提供交易平台？（来自[u/sn00fy](https://www.reddit.com/u/sn00fy/)）

赌徒也像其他人一样支付交易费用，基于可信中立性和无需许可的特征，以太坊允许人们通过该平台做任何事。

也就是说，以太坊上的许多活动似乎都带有投机性质，这一点确实令人担忧。当然，所有早期技术都是如此。我们也看到了大公司在真正采用以太坊，例如Visa，欧洲投资银行也在以太坊上发行债券。我们还需要做大量的工作来拓展这些真实用例。


&lt;br/&gt;

### Rollup是中心化的？

确实，一些早期rollup有中心化的sequencer (排序者)。但这不是安全风险，因为欺诈证明或有效性证明将提供与以太坊主网相同的安全性。活性和审查风险也存在，中心化sequencer绝对不是去信任化的系统。幸运的是，大多数rollups在路线图中都有对sequencer进行去中心化的计划，所以这不会是一个长期问题。


&lt;br/&gt;

### 以太坊路线图以rollup为中心，会破坏其可组合性？（来自[epic_trader](https://www.reddit.com/user/epic_trader/)）

是，但又不是。在 rollup 内部，一切都是可组合的，但是 layer1 和 rollup 之间以及 rollup和 rollup 之间的可组合性确实遭到了破坏。幸运的是，有很多项目正在努力解决这个问题，实现相对流畅的Layer2互操作性，但这项工作仍在进行中，就目前来看，可组合性更像是一个工程问题，而不是理论上的障碍。


&lt;br/&gt;

### 以太坊就像是个四不像怪物，有两条区块链以及ETH1和ETH2两种资产？

这是错误观点，只有一种 ETH 代币。虽然现在有两条链并行运行，但可以把信标链看作一个激励测试网，以确保全新共识机制能够流畅运行。这两条链将在不久的未来合并成为一个以太坊。

 
&lt;br/&gt;

### 原帖作者对部分评论的回复：

我觉得下面有一半的评论都忽视了区块链不可能三角问题。除了以太坊，没有任何项目能够解决这个问题，也没有尝试解决这个问题。除了比特币和以太坊以外，所有项目都在去中心化和安全性上做出了不同程度的妥协，而且大多数项目仍然无法提供以太坊rollup的扩展性，在分片投入使用之后，rollup能够实现更强的扩展性。如果你应用一个非委托共识机制，其中有135000个验证节点 (更不用说100万个了)，同时将状态维持在可控范围，让该区块链在消费型笔记本电脑或第四代树莓派 (Raspberry Pi 4) 上运行，那肯定是在做梦。正如前文所述，大多数区块链最多有几百个验证节点，这些节点接受委托，进行中心化质押。有人提到了Solana，根据该项目的系统要求页面 (验证节点要求 | Solana Docs)，若要一个运行Solana节点，需要每月花费1200美元租用云实例，每个月状态大小就会增加几个TB。这只是一种不同类型的产品，无法与以太坊相提并论。但是 Solana 的设计思路并没有错，正如我上面所提到的，基于以太坊或与以太坊并行的解决方案会各有优缺点，在去中心化和交易成本之间进行取舍。

90% 批评这篇文章的评论似乎都与交易费用有关。我想再次重申一下，对于区块链不可能三角问题，以太坊生态系统拥有独特优势，可以通过 rollup，实现高度去中心化，保证安全和高扩容性。Layer1 的Gas 费用将保持在高水平，这是可以接受的情况，因为大多数人的交易将通过 rollup、zkPorter/Validium 混合解决方案甚至是中心化侧链。我认为很多人有一种固化的思维，认为 rollup 等于其他 Layer1 解决方案。相反，rollup 正是替代这些解决方案的直接竞争对手，而且在几乎所有方面都有优势。至关重要的是，许多人似乎有一个误解，即没有单一的 Layer1 能提供以太坊生态系统在多层作用下所展现的可扩展性。
&lt;br/&gt;

&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/5/31]]></title><description><![CDATA[伦敦升级新测试网 Calaveras，Arbitrum One beta 版本上线主网]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-31/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-31/</guid><pubDate>Mon, 31 May 2021 00:00:00 GMT</pubDate><content:encoded>![27](https://i.ibb.co/FVFKprw/27.png)
&lt;br/&gt;

# EIP-1559
**AllCoreDev 进展**

5月29日举行的第144次AllCoreDev 首先处理了 EIP-1559 新引进的字段 ` MaxFee` (即最高费用)  和`maxPriorityFee`  (即小费) 没有形成一个明确的上限，这意味着攻击者可以任意创造大量交易。在1559以前，这种情况是不可能存在的，因为如果你想用很高的gas 价格创建一个交易，你需要真的支付这个价值的ETH。因为在1559的字段是最大值，你可以滥用它——不支付这些高额的gas 费，且能攻击网络。此外，一些客户端已经有对这些字段的检测了，大于2^256 的会被阻拦，但因为这没有明确在规范里写明，不是全部客户端都这样做。这意味着有些坏区块不但会对交易池进行DoS 攻击，还会分叉链。所幸的是，解决这个问题相当简单。
在会议里，经过多番讨论，决定对这个情况作4种检测：
1. `MaxFee`&lt;2256
2. `maxPriorityFee`&lt;2^256
3. `maxFee`大于等于`maxPriorityFee`
4。交易发送者的余额大于`maxFee`与所消耗gas的乘积。这确保帐户确实有足够的资金支付最坏情况的`maxFee`

第四个检测最具争议，但经过讨论后决定把它加上，未来有人想到移除它的更有力的理由，大家可以轻易把它移除。
尽管这些变更是简单的，我们还是需要在客户端实现后对其做测试。
会议决定需要一个新的开发者测试网 Calaveras 来对这些新变更作测试，并预期在未来两周上线，将对其进行充分测试至敲定交易池的实现。
Calaveras规范：https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/calaveras.md
如果进行得顺利，下一期的AllCoreDev 将讨论新测试网的分叉区块。如果测试网分叉顺利的话，下一步是设主网的分叉区块。
来源：https://twitter.com/TimBeiko/status/1398329483434741762?s=20

&lt;br/&gt;

**1559钱包界面会议**

此次会议的议程为： 1）对 JSON RPC 文档修改的讨论；2）PriorityFee 的建议最低值； 3）钱包服务商需要与各自的用户沟通这些修改； 4）需要 ERC 编辑程序，以及核心开发者对钱包服务商问题的解答。
以下为对此次会议一些问题和答案的整理，希望从钱包界面设计角度能加深大家对EIP-1559的认识：

Q：如何预估`Priority Fee`，怎么算高，怎么算低？

A：A: 我们现在有些大致的数值。`Priority Fee`是你想支付给矿工足够多的费用，以把你的交易打包到链上。越多的交易打包到区块里，你的交易进入叔块的风险越高。这个数值在以前很容易计算，但现在主要的风险来自 MEV 的交易捆。因此，如果矿工的区块里有 MEV，该区块里的交易进入区块的风险就高很多。在“Cheatsheet: 1559 for Wallets &amp; Users”里，你可以看到一个图表展示了“区块的 MEV 平均风险与 小费数额之间的线形关系”。Flashbot 有一个追踪 MEV 的仪表盘，现在还没有钱包可用的插件。但如果你想要一个大概的数值的话，可以在 EIP 上主网前的1 到2周看一下仪表盘，你会了解到那时区块的平均 MEV，然后再回到那张图表，看看对应的小费是多少。经过了一轮优化后，现在每单位gas的小费大概是2 gwei。上主网后，还要看 MEV 如何发展。

![mev](https://i.ibb.co/XSKzdLC/mev-and-tips.png)
 
如果你想做得精细点，上面所说的是一般情况，你的快速模式可能是区块里有95%都是MEV 也仍然能打包交易到区块，一般模式可能是区块有30%~40% 的 MEV，而缓慢模式是等待MEV 的区块出现，然后以1 到2 gwei 把交易打包到区块，平均来说是2到3 个区块后。

Q：关于计算 basefee 的预测时间，因为有太多不断在变动的变量，钱包开发者很担心在高度拥堵，出现不同钱包间的竞价战时，用户无法获得及时有效的信息进行交易。

A：要解决这个问题，我们需要链上数据，上线后几周的数据将非常有用，只有获得这些数据时才能得知如何设默认值。当 1559 上线主网后，基本费会设为 1 gwei，这是非常低的数值，这意味着将会有一段时间区块都是满的，因为会有竞价战。因此我估计钱包解决这个问题的最简单方法是等待 1559 的UI (用户交互 ) 设计起作用，也就是等到区块不是完全满的时候。我的预估数据时15~30 分钟。在经历了这些峰值 后，你会发现竞价战消失了，价格平稳了，1559 的 UI 起作用了。一开始的时候，用户可能要在超额支付和交易不卡在等待状态间做 权衡。

Q：链下 API 如何解决

A：目前 Etherscan 还没有明确的方案，Barnabé 提出可以有适用于1559的预言机。虽然还没与数据，但一个很强的直觉是竞价战不会频繁发生，如果发生了也会是短时间的，因为基本费用会上涨得很快形成压力，过了某个点后它能让系统稳定下来，因此小费的预言机应该与我们现有的预言机很不一样，现有的预言机需要对非常长的历史数据作分析，起码200个区块数据。但我认为小费的预言机是不需要的，最近5到10个区块的数据就足够了，然后就可以看到人们竞价的中间值。

Q：json rpc 有哪些变更:

A：1. 添加` baseFeePerGas` 到区块头 to the block header
2. 添加` maxFeePerGas`和 `maxPriorityFeePerGas`到交易，如果交易类型是2的话，这表明这是1559式交易
3. 每个客户端都是执行的api
视频：https://www.youtube.com/watch?v=FEgFd7un9q4

&lt;br/&gt;

**1559 社区再起讨论**

钱包服务商MyCrypto 的创始人Taylor Monahan 于5 月27日发了很长的推特对EIP-1559 表达了不满，再次掀起社区对此EIP的热烈讨论。她提出的观点颇具争议，但以下观点得到了很多人的认同：
“社区对这份EIP 的关注更多变成“ETH价格上升”和“交易费下降”，而已开始承诺的减少超额支付的gas 费、更高的市场效率、更稳定的gas费、甚至减少交易费等似乎没人再提。”
此外，对eip-1559 设计的合理性与实现的可能性上的质疑，也得到大量的回应，此处推荐

基金会的研究员Barnabé的回复：https://twitter.com/barnabemonnot/status/1397731718723821569?s=20
Paradigm 的研究员的回复：Georgios Konstantopoulos：https://twitter.com/gakonst/status/1397855965429612547?s=20

来源：https://twitter.com/tayvano_/status/1397725861575421953?s=20

&lt;br/&gt;

“EIP-1559 Gas API 会议”将于北京时间6月4日22：00举行，时长为1小时
议程：

&lt;br/&gt;

•	Gas API 提供商的演示
•	用于gas 价格的JSON RPC 终端
•	开放讨论
来源：https://github.com/ethereum/pm/issues/328

&lt;br/&gt;

# ETH2
以太坊基金会 ETH2 团队的AMA将于北京时间6 月23日下午9点于Reddit 论坛的/r/ethereum 板块进行。
来源：https://twitter.com/drakefjustin/status/1398375498342977544?s=20

&lt;br/&gt;

最新的以太坊2.0规范中SSZ 与默克尔证明教程上线
指路：https://www.ssz.dev/

&lt;br/&gt;

# Layer2

**Arbitrum One beta 版本上线主网**
UTC 时间 5 月 28 日，Layer-2 扩容解决方案 Arbitrum Rollup 的合约部署至主网，并面向开发者开放。截至发布为止，已超过 250 个团队申请部署至 Arbitrum One 上。Abitrum 团队表示，之所以将其部署在主网的链命名为 Arbitrum One，是因为 Arbitrum 表示技术，而 Arbitrum One 是我们主要的链。也就是说，未来可能会有其他 rollup 链使用 Arbitrum 技术，为了避免混淆，便给出了 Arbitrum One 这个概念。
在上线主网之前，Arbitrum 宣布与区块链浏览器 Etherscan 以及区块链开发平台 Alchemy 达成合作关系，将为 Arbitrum 提供浏览器 (将在七月准备就绪) 和开发平台的支持。

来源：
https://offchain.medium.com/introducing-arbitrum-one-our-mainet-beta-ed0e9b63b435

&lt;br/&gt;

**社区投票支持 Uniswap V3 部署至 Arbitrum 上**
@rleshner 于 5 月 27 日，在区块链投票平台 snapshot 发起投票：提议在 Arbitrum 上部署 Uniswap v3，投票为期两天。投票链接：https://snapshot.org/#/uniswap/proposal/Qmehop1NNWP9VEf7tGLEAYRphVsXtdxkL7oKEhaXL2Xao6
截至投票通道关闭，共 4323 万 UNI 签名投了支持票，309.34 UNI 投了反对票，比实际通过提案所要求的门槛多了 100 多万。
对于此次社区的自发投票支持将 Uniswap v3 部署至 Arbitrum 的行为，Uniswap 的创始人 Hayden 表示：
“如果 snapshot 上的投票通过了，Uniswap 将应社区的需求，部署 v3 至 Abitrum 上，我们已经开始了接口支持和计划部署的工作。同时，我们将继续与 Optimism 团队的合作，并在不久之后部署。”
来源：https://twitter.com/haydenzadams/status/1397675094001045508
zkSync 1.x 即将上线主网
5 月 25 日，zkSync 推出了 1.x 版本的测试网，开发者可以在 Rinkeby-beta 和 Ropsten 测试网上测试以下新功能：
•	ERC-20 代币 swap
•	铸造、发送以及 swap NFT
•	将 NFT 从二层提至一层
zkSync 1.x 升级主网版本新增的功能包括 swap、NFT、新的事件系统，还将发行无需许可的代币，1.x 将于 5 月末上线主网，并在 2 周的升级时间锁定后生效，以便用户有时间选择退出。
 
此次升级将需要添加 Regenesis：改变 zkSync 状态的结构。也就是说，所有的账户将保持不变，但我们将把每个账户的代币余额树的高度从 11 增加到 32。这个新的根哈希将由 zkSync 安全委员会的大多数成员 (15个成员中的8个) 进行计算和签名。

![zk](https://i.ibb.co/Z2pQjQ9/zk-sync.png)

来源：https://medium.com/matter-labs/zksync-1-x-swaps-nfts-event-system-and-permissionless-token-listing-e126fcc04d61

&lt;br/&gt;

# 生态
**Gitcoin 推出治理代币 GTC，其中 15 % 进行了回溯空投**
5 月 25 日，开源软件资助平台 Gitcoin 宣布推出治理代币 GTC 代币和 Gitcoin DAO，这两个关键组成部分将使 Gitcoin 去中心化，并为资助开源开发构建一个公平的协议。
治理代币 GTC 的总发行量为 1 亿，分配如下：
•	15% 进行回溯空投
•	50% 用于 Gitcoin DAO
•	35% 分给当前的利益相关者
根据 Gitcoin 的公告，其治理代币 GTC 没有经济价值，这是一种用来监管 Gitcoin 生态系统的治理代币。通过推出 GTC 和 Gitcoin DAO，Gitcoin 的目标是构建一个 Quadratic Lands —— 一个由数字民主统治的数字生态系统，在这里为社会带来贡献的项目将能够得到很好的资助。最重要的是，Quadratic Lands 是由它所服务的社区建立的 —— 创造了一个积极的反馈循环，让居住其中的市民不断改善他们所居住的数字社区。

来源：https://gitcoin.co/blog/introducing-gtc-gitcoins-governance-token/

&lt;br/&gt;

**Flashbots 发布 v0.2 版本**
Flashbots 是一个开源研发机构，主要专注于构建一系列工具以帮助分析 MEV 问题。5 月 25 日，Flashbots 发布了 v0.2 版本，添加了 &quot;bundle merging&quot; (捆绑合并) 功能。意味着 Flashbots 的矿工现在可以在每个区块挖多个捆绑交易。

来源：https://twitter.com/bertcmiller/status/1396961882121121799

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。


</content:encoded></item><item><title><![CDATA[Vitalik: 要正确评价区块链投票，你要了解这些]]></title><description><![CDATA[本文分析了区块链属性与投票的匹配程度，以及区块链投票的前景]]></description><link>https://www.ethereum.cn/Thinking/blockchain-voting</link><guid isPermaLink="false">https://www.ethereum.cn/Thinking/blockchain-voting</guid><pubDate>Fri, 28 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/05/25/voting2.html)

&lt;br/&gt;

*特别鸣谢 Karl Floersch、Albert Ni、Mr Silly 以及其他人的反馈与讨论*


投票作为一个程序对过程正义有非常高的需求。投票的结果必须是正确的，且这必须由一个透明的过程来保证，这样每个人才信服这个结果是正确的。[干扰任何人投票](https://en.wikipedia.org/wiki/Voter_suppression)或阻止别人的投票被计为有效票这样的行为都不应该发生。

区块链作为一种技术本身就是旨在给程序正义提供保障的。如果一个过程在区块链上运行，区块链可以确保该过程会根据预先商定的代码运行，并提供正确的输出。没有人可以阻止其执行，没有人可以篡改其执行，没有人可以审查或阻止任何用户的输入被处理。

因此，乍一看，区块链提供的正是投票需要的。曾经持有这一想法的远不止我一个；[很多](https://www.alaskapublic.org/2021/04/15/alaska-would-be-first-state-to-use-blockchain-based-voting-system-under-proposed-bill/)主要[潜在](https://inc42.com/buzz/india-explores-blockchain-based-e-voting-by-2024-general-elections/)用户都表现出[相同的看法](https://fortune.com/2018/07/03/blockchain-voting-trial-zug/)。但其实，有些人持有截然相反的观点......

![https://vitalik.ca/images/voting2-files/votingthreat.png](https://i.ibb.co/Lvzfvvf/votingthreat.png)


尽管看上去投票的需求与区块链提供的技术优势可以完美匹配，但我们经常看到一些吓人的文章是[反对两者结合的](https://www.computerworld.com/article/3430697/why-blockchain-could-be-a-threat-to-democracy.html)。这样的文章不是个例，[《科学美国人》有一篇反对区块链投票的文章](https://www.scientificamerican.com/article/are-blockchains-the-answer-for-secure-elections-probably-not/)，[CNet](https://www.cnet.com/news/blockchain-isnt-answer-to-voting-system-woes/) 和 [ArsTechnica](https://arstechnica.com/tech-policy/2018/11/blockchain-based-elections-would-be-a-disaster-for-democracy/) 各有一篇反对文章。还有一些不是普通技术记者的反对文章：[Bruce Schneier](https://www.schneier.com/blog/archives/2020/11/on-blockchain-voting.html) 反对区块链投票，MIT 的研究院写了[一整篇论文](https://people.csail.mit.edu/rivest/pubs/PSNR20.pdf)论证这是一个坏主意。所以，到底是怎么回事？

&lt;br/&gt;

# 概要

对以太坊投票协议的最常见的两点批评：

1. **区块链不是适合选举的软件工具**。它们提供的信任属性不符合投票所需的特性，其他提供不同信息流和信任属性的软件更好。
2. **总的来说，无法信任任何软件**来进行选举，不管是什么软件。无法检测的软件、硬件漏洞带来的风险都太高，无论平台是如何组织的。

**本文将依次讨论这些观点 (说是&quot;反驳”的话，语气就太重了，但我对这两种观点的反对意见绝对多于赞同）**。首先，我将讨论现在尝试使用区块链进行投票的安全问题，以及为什么正确的解决方案不是弃用区块链，而是结合其他加密技术。第二，我将回答关于软件（和硬件）能否被信任的忧虑。我的回答是：计算机安全实际上取得不错的进展，我们可以继续在这个趋势上努力。


从长远来看，**永久地坚持纸质投票将是我们使投票变得更好的巨大障碍**。N 年一次投票是 250 年前就发明的民主形式了，如果投票可以变得方便和简单地多的话，我们可以更经常地进行投票，这样我们可以拥有更好的民主。

**毋庸讳言，这整篇文章的前提是拥有好的区块链扩容技术（例如，[分片](https://vitalik.ca/general/2021/04/07/sharding.html)）**。当然，如果区块链无法扩容，这些都不可能发生。但目前，这项技术的开发进展地很快，没有理由相信它不会发生。

&lt;br/&gt;

# 不好的区块链投票协议


区块链投票协议经常受攻击。两年前，一家名为 Voatz 区块链投票技术公司风行一时，很多人都对它很感兴趣。但是去年，一些 MIT 研究员发现了他们平台[一串严重安全漏洞](https://internetpolicy.mit.edu/wp-content/uploads/2020/02/SecurityAnalysisOfVoatz_Public.pdf)。同时，在莫斯科，一个准备用于即将到来的选举的区块链投票系统[被攻击](https://medium.com/swlh/why-was-moscows-blockchain-voting-system-cracked-a-month-before-an-election-6da5e6d9abbb)了，幸运的是，攻击发生在选举的一个月前。

这些攻击都非常严重。以下是[分析 Voatz 的研究人员](https://internetpolicy.mit.edu/wp-content/uploads/2020/02/SecurityAnalysisOfVoatz_Public.pdf)揭露的攻击能力表：

![https://vitalik.ca/images/voting2-files/voatzpaper.png](https://i.ibb.co/7WDjwF3/voatzpaper.png)


这本身并不是反对使用区块链投票的论据，而是说明区块链投票软件应该被更审慎地设计，且应该慢慢扩展，且随着时间扩大规模。

&lt;br/&gt;

# 隐私与抗胁迫


但是即使是技术上不是经常出问题的区块链投票协议仍然是糟糕的。要理解为什么，我们需要深入探究区块链提供了具体哪些安全属性，以及投票需要哪些特定的安全特性—— 当我们了解了，我们就会看到其中不匹配的地方。

区块链提供了两个关键属性：**正确的执行**和**抗审查**。 正确的执行只意味着区块链接受来自用户的输入(“事务”），按照一些预先订立的规则正确地处理它们，然后返回正确的输出 (或以正确的方式调整区块链的“状态”）。抗审查也很容易理解：任何用户想要发送一个事务，且愿意支付足够高的交易费的话，就可以发送该事务并期望看到它快速被打包上链。

这两个属性对投票来说都非常重要：你想投票的输出实际上是计算每个候选人的票数并选择得票最多的候选人的结果，而且你肯定希望任何有资格投票的人都能投票，即使是一些强大的行为者试图阻止他们。**但是，投票还需要一些至关重要的属性，这些是区块链不提供的：**

- 隐私：你不应该知道某些人投给了哪个候选人，甚至不知道他们是否投了票。
- 抗胁迫：你不应该向其他人证明你是如何投票的，尽管你想这样做

第一个要求的必要性是显而易见的：你希望人们根据他们的个人感受来投票，而不是身边的人、他们的雇佣者、警察或街上随机的暴徒对他们选择的感受。第二个要求是需要防止卖票：如果你可以证明你是如何投票的，卖票就会变得非常容易。投票的可证明性也会促成各种形式的胁迫，即胁迫者要求看到某种投票给他们偏向的候选人的证明。大多数人，甚至是那些意识到第一个要求的人，都不会想到第二个要求。但是第二个要求也是必须的，但达到这个要求在技术上也不容易。**更不用说，人们看到的一般的“区块链投票系统”根本没有尝试提供第二个属性，并且经常在提供第一种属性上就是失败的。**

&lt;br/&gt;

# 非区块链的、安全的电子投票

社会机制的加密安全执行概念不是有区块链极客发明的，且在我们之前已经存在了。在区块链空间以外，密码学家研究安全电子投票问题已经有 20 年的传统了，好消息是他们已经有解决方案了。在过去 20 年，有一篇被多次引用的重要论文——“《抗胁迫的电子选举》 ([Coercion-Resistant Electronic Elections](https://eprint.iacr.org/2002/165.pdf))&quot;，由 Juel、Catalano 和 Jakobsson 于 2002 发布的：

![https://vitalik.ca/images/voting2-files/elections.png](https://i.ibb.co/vc572j0/elections.png)


从那时起，这个概念有很多迭代；[Civitas](https://orbilu.uni.lu/bitstream/10993/29212/1/Civitas-VFinal.pdf) 是一个突出的例子，尽管[还有](https://www.usenix.org/system/files/conference/jets15/jets_0302-achenbach.pdf)[很多](https://www.researchgate.net/publication/221947496_Coercion-Resistant_Cryptographic_Voting_Implementing_Free_and_Secret_Electronic_Elections)[其他例子](https://link.springer.com/chapter/10.1007/978-3-642-32747-6_5)。这些协议全都使用一套相似的核心技术。有一个商定的”统计员“集，且有一个信任假定大多数统计员都是诚实的。每个统计员都有内部秘密共享的密钥的部分，而对应的公钥是公布出来的。投票者把加密了的投票公布给统计员的公钥，统计员使用一个[安全的多方计算 (multi-party computation, MPC) 协议](https://www.cs.virginia.edu/~evans/pragmaticmpc/pragmaticmpc.pdf)解密并验证投票，并把结果计算出来。记录结果的计算是”在 MPC 里“进行的：统计员永远不会知道他们的私钥，他们只能通过查看最终结果了解情况，他们在计算时是无法知道每个人的具体投票的。


加密投票提供了隐私，并在上面添加了一些额外的基础设施，比如加入[混合网](https://en.wikipedia.org/wiki/Mix_network) (mix-nets) 使得隐私更强大。为了提供抗胁迫性，使用了两种技术中的一种。一个选项是在注册阶段 (统计员收集每个注册投票者的阶段），投票者生成或收到一个秘密密钥。对应的公钥在统计员间是秘密共享的，统计员的 MPC 只计算用秘密签名的投票。投票者没有办法向第三方证明他们的密钥是什么，因此如果他们受贿或被胁迫，他们只需要展示和投用错误密钥签名的票。或者，选民可以有能力发送一条信息修改它们的密钥。选民没有办法向第三方证明他们没有发送这样的信息，从而导致相同的结果。


第二选项是一种技术，即投票者可以进行多次投票，第二次投票覆盖第一次投票。如果投票者被贿赂或胁迫，他们可以给贿赂者/胁迫者偏向的参选者投票，但在第二次的投票可以覆盖第一次投票。

![https://vitalik.ca/images/voting2-files/tallyingscheme.png](https://i.ibb.co/XpvRYFC/tallyingscheme.png)

*赋予投票者在下一次投票推翻之前投票的能力，是[2015年这个协议里](https://www.usenix.org/system/files/conference/jets15/jets_0302-achenbach.pdf)关键的抗胁迫机制。*


现在，我们开始讨论所有协议间的重要区别。它们都依赖于一个外在的元件来完成它们的安全性保障——**bulletin board** (公告栏，也就是上图数据里的&quot;BB&quot;)。公告栏是任何投票者发送一条信息过去都保证：(1) 任何人都可以读到公告栏的信息，(ii) 任何人发送到公告栏的信息都会被接受。大多数大家可以找到的抗胁迫投票论文都是对公告栏的存在一笔带过 （例如，”正如常见的电子投票方案，我们假设有一个可公共访问的、仅能添加的公告栏“），但很少论文谈到公告栏实际上是如何被实现的。在这里，读者大概可以看出我想表达的是什么：**实现公告栏最安全的方法就是使用现有的区块链！**

&lt;br/&gt;

# 用区块链提供电子投票的安全性

当然，在区块链之前已经有大量制作公告栏的尝试。[2008年这篇论文](https://epubs.surrey.ac.uk/107392/5/append-only.pdf)就是这样的尝试；它的信任模型是一个符合标准要求的”`k` /`n` 个服务器必须是诚实的“（(`k = n/2` 是常见的）。[2021 年这篇文献综](https://eprint.iacr.org/2021/047.pdf)述涵盖了区块链以前制作公告栏的尝试，以及对由区块链来实现进行了探索；所回顾的区块链前的解决方案都与依赖 k/n 信任模型相似。

区块链也是一个 k/n 的信任模型；它要求至少一半的矿工或者权益证明的验证者遵循协议，如果该假设失败，往往会导致”51%攻击“。所以为什么区块链要优于一个特别设计的公告栏？答案是：设置一个真正可信的 k/n 系统是很难的，区块链是解决了这个问题的唯一系统，而且是大规模地。假设一些政府宣布它们要造一个投票系统，并提供一份 15 个当地组织和大学的清单，它们将运行一个有特殊用途的公告栏。作为一名旁观者，你怎么知道政府不是按照他们的意愿从 1000 个名单里选出 15 个机构，以秘密与情报机构串通？

**另一方面，公共区块链具有每个人都可以参与的、无须许可的经济学共识机制（工作量证明或权益证明），它们有一个现有的、多元的、高激励的基础设施，例如区块浏览器、交易所、和其他观测节点，以不断地实时验证没有坏情况发生。**

这些更复杂的投票系统不只是使用区块链；他们依赖像[零知识证明](https://vitalik.ca/general/2021/01/26/snarks.html)这样的加密技术以确保正确性，依赖 MPC 保证抗胁迫。因此，它们避免了那些简单系统的弱点，即仅仅”把票直接投在区块链上“，而忽略了带来的隐私和抗胁迫问题。但是，区块链公告栏仍然是整个设计安全模型的关键部分：如果委员会被破坏了，但区块链没有，抗胁迫性就会丢失，但所有其他围绕投票过程的保障还在。

## MACI:  在以太坊上的抗胁迫区块链投票

以太坊生态现在正在实验一个名为 MACI (Minimal Anti-Collusion Infrastructure，最小反合谋基础设施）的系统，它结合了区块链、ZK-SNARKs 和一个确保抗胁迫的单一中央角色 （但没有权力损害抗胁迫性以外的任何属性）。MACI 在技术上并不十分困难。用户通过用他们的私钥签名信息来参与，把签署的信息加密到一个中央服务器发布的公钥，然后把加密了的签名信息发布到区块链。服务器从区块链下载信息，解密，处理，用一个 ZK-SNARK 把结果输出，以确保它们的计算是正确的。

![https://vitalik.ca/images/round9/maci2.png](https://i.ibb.co/M1KPmcS/maci2.png)

用户不能证明他们是如何参与的，因为他们有能力发送一个“改密钥”信息去骗任何想要审核他们的人：他们可以首先发送一条改密钥信息把他们的密钥从 A 改为 B，然后发送一条用 A 签名的“假信息”。服务器会拒绝这条信息，但没有其他人可以通过任何途径知道修改密钥的信息有没有被发送过。这里需要对服务器有信任要求，虽然只是为了保护隐私和抗胁迫；服务器不能发布错误的结果，无论是因为错误计算还是信息审查。从长远来看，多方计算可以在一定程度上对服务器进行去中心化，加强隐私和抗胁迫的保证。

在 [clr.fund](https://clr.fund/) 上有一个这个方案的工作演示，被用于四维资金。使用以太坊区块链来确保投票的抗审查性，保证了比依靠委员会更强的抗审查性。

## 上文回顾

- 投票过程有四个重要的安全要求，只有当这些要求都得到满足才能保证投票的安全：正确性、抗审查、隐私和抗胁迫。
- 区块链擅长前两项，不擅长后两项。
- 在区块链上对投票加密可以添加隐私性。零知识证明可以提供正确性，尽管观察者无法直接合计投票，因为它们都加密了。
- 多方如果与用户可以与系统多次交互的机制相结合，计算解密和检查投票可以提供抗审查性；要么第一次交互使第二次无效，要么反之。
- 使用区块链可以确保你有非常高安全系数的抗审查能力，而且即使委员会串通打破抗胁迫性，你仍然可以保持抗审查。**引入区块链可以大大增强系统的安全性。**

&lt;br/&gt;

# 但技术是可以信任的吗？

但现在我们回到对任何类型的电子投票的第二点、更深层次的批评：技术本身太不安全、不值得信任。

[最近 MIT 这篇批评区块链投票的论文](https://people.csail.mit.edu/rivest/pubs/PSNR20.pdf)提供了这个非常有用的表格，它认为任何非纸质形式的投票从根本上来说都太难确保可信任：

![https://vitalik.ca/images/voting2-files/fourcategories.png](https://vitalik.ca/images/voting2-files/fourcategories.png)

作者关注的关键属性是“软件独立性”，他们将其定义为“系统软件中未被发现的变化或错误不能导致选举结果中出现不可察觉的变化”。基本上，代码中的一个错误不应该能够意外地使 Prezzy McPresidentface 成为国家的新总统 （或者，更现实的是，一个故意嵌入的漏洞不应该能够把某候选人的份额从 42% 增加到 52%)。

但还有其他方法可以用来处理漏洞。例如，任何基于区块链的投票系统，如果使用可公开验证的零知识证明，都可以独立被验证。有人可以编写自己的证明验证器，并自己验证Zk-SNARK。他们甚至可以写自己的软件来投票。当然，真正做到这一点的技术复杂性超出了现实 99% 的选民基础的能力范围，但如果成千上万的独立专家都有能力做到这点并验证它是否可行，在实践上能做到这点是已经非常不错了。

但是，对 MIT 的作者来说，这还不够：

&gt; 因此，在可预见的未来，任何只有电子的系统，即使是端对端可验证的，似乎耶不适合用于政治选举。美国投票基金会注意到了 E2E-V 方法在提高在线投票安全性方面的前景，但发布了一篇详细的报告，建议避免将器用于线上投票，除非该技术发展地更加成熟，并在投票站投票中得到充分测试 [38]。其他人提议对这些想法进行延伸。例如，Juels 和其他人的提案[55]强调使用加密技术来提供多种形式的“抗胁迫”。Clarkson 等人的 Civitas 提案实现额外的抗胁迫机制，lovino 等人进一步在他们的 Selene 系统里整合和阐述了这些机制。在我们看来，这些提案都非常创新，但不现实：它们相当复杂，且最重要的是，它们的安全性依赖于选民的设备没有受损且如预期版运作，这是一个不现实的预设。

作者关注的问题不是投票系统的硬件是否安全；该方面的风险实际上可以用零知识证明来化解。相反，作者关注的是另一个安全问题：大体上，用户的设备能达到安全水平吗？

鉴于消费者设备多年以来遭遇到的各种漏洞和攻击，人们又理由给出否定的答案。引用我自己[ 2013 关于比特币钱包安全的文章](https://bitcoinmagazine.com/culture/bitcoin-self-defense-part-i-wallet-protection-1368758841)：

&gt; 昨晚太平洋夏令时晚上大概 9 点，我点击了一个链接前往 CoinChat[.]freetzi[.]com，并提示我运行java。我照做 (觉得这是一个合法的聊天室），然后什么都没有发生。我关掉窗口，什么也没想。14 分钟后，我打开我的 bitcoin-qt 钱包，看到一笔我没有同意的交易发送到钱包 1Es3QVvKN1qA2p6me7jLCVMZpQXVXWPNTC，几乎把我整个钱包的余额转走......

以及:

&gt; 在 2011 年六月，Bitcointalk 成员“allinvain&quot; 在一个未知的入侵者以某种方式直接访问了 ta 的电脑后，丢失了 25,000 个 BTC (当时价值500,000 美元）。攻击者能够访问 allinvain 的 wallet.dat 文档，并快速把钱包里的钱都转走——不是从 allinvain 的电脑发送交易，就只是上传 wallet.dat 文档然后在 ta 自己的电脑里把钱转走。

但这些灾难掩盖了一个更大的事实：在过去 20 年里，计算机安全实际上一直[在缓慢而稳定地改进](https://www.infosecurity-magazine.com/opinions/cybersecurity-getting-better-worse/)。攻击现在更难发生了，经常需要攻击者在多个子系统里找到漏洞，而不是在一大段复杂的代码中找到一个漏洞。备受瞩目的事件比以往任何时候都大型，但这并不表明所有事情都变得没那么安全了；相反，这只是我们越来越依赖互联网的一个迹象。

[可信的硬件](https://link.springer.com/referenceworkentry/10.1007%2F978-0-387-39940-9_1491)是近来取得非常重要的进步领域。一些新的“区块链手机”（例如 [HTC 的这款](https://www.htcexodus.com/mea-en/cryptophone/exodus1s/)）在这项技术上走得很远，并在可信硬件芯片上放置了一个专注安全性的极简操作系统，允许对安全要求高的应用程序 (例如，加密货币钱包）与其他应用分开。三星已经开始制作使用[相似](https://pixelplex.io/blog/what-is-samsung-blockchain-keystore/)[技术](https://www.samsung.com/us/business/solutions/samsung-knox/)的手机。即使从未宣传作为”区块链设备“的产品 (例如，苹果手机）也频繁推出某些可信硬件。加密货币硬件钱包实际上是同样的东西，除了可信硬件组件物理上是在计算机以外，而不是在里面。可信硬件在安全性领域，特别是区块链社区是当之无愧的坏口碑之王，因为它[一次次](https://arstechnica.com/information-technology/2020/03/hackers-can-steal-secret-data-stored-in-intels-sgx-secure-enclave/)地[出](https://techmonitor.ai/techonology/cybersecurity/intel-sgx-plundervolt-attack)[问题](https://www.theregister.com/2020/11/14/intel_sgx_physical_security/)。而且事实上，你肯定不会想用它来替代你的安全保护设备。但就事论事来说，它的确是一个巨大的进步。

最后，像加密货币钱包和投票系统这样的单一应用程序，其实比整个消费者操作系统要简单得多，且有更少空间出错——即使你必须纳入对[二次方投票](https://vitalik.ca/general/2019/12/07/quadratic.html)、[排序](https://en.wikipedia.org/wiki/Sortition)、[二次方排序](https://ethresear.ch/t/quadratic-voting-with-sortition/6065)等 Glen Weyl 在2040 年发明的下一代其他什么可怕东西的支持。像可信硬件这样的工具的好处是它们能够将简单的东西从复杂的、可能会出错的东西隔离开来，而这些工具正取得一些成功。

&lt;br/&gt;

# 因此风险会随时间减少，但有什么裨益呢？

安全技术上的这些进步指明，未来消费者硬件可能比现在更值得信赖。过去几年在这个领域做的投资很可能在接下来的十年不断得到回报，且我们可以预期会有进一步的重要提升。但投票电子化有哪些好处使得探索这整个领域是合理的呢？

我的答案很简单：投票会变得高效得多，使得投票可以更经常地进行。目前，对组织 (政府或企业）的正式民主输入倾向于限制在每 1-6 年进行一次的投票。这实际上意味着，每个选民每年只向系统提供不到一点点的投入。也许在很大程度上是由于这个原因，我们社会的去中心化决策被严重地走向两个极端：纯民主和纯市场。民主要么是非常低效的 (企业和政府投票），要么是非常不安全的 (社交媒体上的点赞或转发）。市场在技术上则高效得多，且比社交媒体安全得多，但它们的基本经济逻辑使其不适合许多种类的决策问题，特别是与公共物品有关的问题。

![https://vitalik.ca/images/voting2-files/triangle.png](https://i.ibb.co/7pqVTs5/triangle.png)

*是的，我知道这又是一个三角形，我真的非常抱歉不得不使用它。但是，请容忍我这一次...... (好吧，我确信我将来会做出更多的三角形；忍忍吧）*



如果我们能够建立更多介于民主与市场之间的制度，从前者的平等主义、后者的技术效率、以及光谱两级间的经济特性间获益。[二次方募资](https://vitalik.ca/general/2019/12/07/quadratic.html)是一个极佳的例子。流动式民主是又一佳例。即使我们不再引入复杂的新委托机制或二次方计算方法，我们也可以通过在更小范围内更频繁地进行投票，以适应每个选民可接收到的信息。但所有这些想法的挑战在于，为了一个可持久的、支持任何水平的民主的方案，你需要一些抵抗女巫攻击和化解买票问题的形式：这正是这些复杂的 ZK-SNARK+MPC+区块链投票方案试图解决的问题。

&lt;br/&gt;

# 加密世界对解决问题有帮助


加密世界的有一个被低估的好处，就是它是一个极好的”虚拟特别经济区“，可以在一个对抗性很强的环境里测试一些经济和加密理念。无论你构建和发布什么，一旦它所控制的经济力量达到一定规模，一大批不同的、有时是利他的、有时是利益驱动的人、有时是恶意的行动者（大多数是完全匿名的）会进入这个系统，并尝试把该经济力量扭转为服务他们自己的各种目的。


攻击者的激励很高：如果攻击者从你的加密经济工具里投了 100 美元，他们往往可以得到完整的 100 美元的奖励，而且可以逃脱。但是防御者的奖励也非常高：如果你开发一个工具可以帮助用户不会丢失他们的资金，你可以（至少有时）把它转化为一个工具，赚取数百万美元。加密世界是一个终极训练场：如果你构造的东西可以在这个环境里生存下来，且发展成规模，它很可能也能在更大的世界里生存。

这适用于[二次方募资](https://vitalik.ca/general/2021/04/02/round9.html)、[多签](https://gnosis-safe.io/)和[社交恢复式钱包](https://vitalik.ca/general/2021/01/11/recovery.html)，且它也使用与投票系统。区块链空间已经帮助推动了以下重要安全技术的崛起：

- 硬件钱包
- 高效多功能零知识证明
- 形式验证工具
- 有可信硬件芯片的”区块链手机“
- 抗女巫攻击机制，比如人性证明 ( [Proof of Humanity](https://www.proofofhumanity.id/))


在所有这些案例里，该技术的某些版本在区块链出现之前就已经存在。但难以否认的是，区块链在推动这些成果方面已经有非常重要的影响，而这个领域固有的激励在为技术的开发到落地提供充足资金方面扮演一个非常重要的角色。


&lt;br/&gt;

## 结论


在短期内，任何形式的区块链投票肯定只能继续限制在小规模实验里，如论是用于主流应用的小测试还是用于区块链本身。当然，目前还是计算机的安全性还没有好所有事务在依赖于其上的水平。但它在不断完善，如果我的判断错的了，安全性无法提升，那么不只是区块链投票，连整个加密货币世界都将难以成功。因此，有非常巨大的动力持续完善这项技术。


我们都应该继续关注提高安全性的技术和不同地方正在进行的努力，并慢慢地在非常重要的社会进程中更自如地使用技术。技术已经是我们金融市场的关键，而大部分经济的加密化 (或甚至只是取代黄金） 将把更大一部分的经济放到我们的加密算法和运行它们的硬件手里。我们应该认真关注并支持这个进程，并渐渐利用其优势，把我们的治理技术带进 21 世纪。</content:encoded></item><item><title><![CDATA[社区争议：侧链算不算L2？]]></title><description><![CDATA[PoS 侧链与L2 和Eth2 PoS的安全性比较]]></description><link>https://www.ethereum.cn/Technology/what-everyone-gets-wrong-about-51percent-attacks</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/what-everyone-gets-wrong-about-51percent-attacks</guid><pubDate>Wed, 26 May 2021 00:00:00 GMT</pubDate><content:encoded>  5 月 16 日，以太坊扩容解决方案 Polygon 的市值跻身加密货币市值前 20，随后 StarkWare 的联合创始人 Uri Kolodny 转推祝贺，但同时他强调：“Polygon 是侧链，而不是 Layer-2。L2 的安全性依赖于以太坊；而侧链的安全性与以太坊的不相关 (甚至更低)。” 因此，社区围绕 Polygon 到底是不是 L2 开始了激烈的讨论。
针对 Uri Kolodny 的评论，Mihailo Bjelic 做了以下回复[[1]](https://twitter.com/MihailoBjelic/status/1393686451255226368)：


首先，Polygon 并不是一条侧链，它是一套扩容解决方案。其次 (也是最重要的)，默认 L2 比 PoS 侧链 (我们的是提交链 commit chain) 更安全是绝对错误的。为了解释其中原因，我将简单地比较一下 Polygon 的 PoS 链和 StarkWare 的 zkRollup 或者 Validium。
我们的 PoS 链的确有自己的验证者集，但这是完全无需许可的，且质押金额已达到 28 亿美元。此外，该实现已经经过了实战测试 (1400 万个区块且零事故)。
然而 StarkWare Rollup 只有一个 PoA 运营者。这个运营者可能会宕机，抢跑、审查用户的交易等。并且，它由 STARKs 提供安全性，这是一个全新的、未经过验证的密码学。至于 Validium，情况甚至更令人担忧。DeversiFi 所使用的 Validium 方案还依赖于一小组 PoA 数据可用性节点。这些节点可以合谋，通过拒绝访问数据来阻止任何或所有用户提取资金。
考虑到上述情况，我认为那种默认 L2s 比侧链/提交链更加安全的想法是错误的。
来源：

针对 Mihailo Bjelic 的回复，社区分别从三个角度进行了讨论：

(1) Layer-2 与侧链在安全性上的区别；

(2) Layer-2 能否达到与 Layer-1一样的安全性；

(3) Eth2 与侧链在安全性上的区别。而对于社区上的困惑，以太坊基金会开发者 Dankrad Feist 发布了文章《关于 51% 攻击，大家都搞错了什么》[[2]](https://dankradfeist.de/ethereum/2021/05/20/what-everyone-gets-wrong-about-51percent-attacks.html)(见下文)，该文章基本上囊括了以上讨论中的问题与解答。

1. 首先，关于第一个问题，Dankrad Feist 表示不赞同，他说 L2 确实更安全，因为作为 L2 必须提供与基础层相同的安全性。而 PoS 侧链具有较弱链 (通常是侧链) 的安全性。[[3]](https://twitter.com/dankrad/status/1393721324300865537?s=20)
James Prestwich 也参与了讨论[[4]](https://twitter.com/_prestwich/status/1393730794238005253)：“与侧链相比，L2 需要更少新的安全假设，但其安全性并非与主网完全一样。”他指出 L2 与侧链相比，具有以下不同的特点：
1)依赖于非审查 (欺诈证明)
2)依赖于新的密码学和可信的设置 (有效性证明) 补充一点，Starks 不需要依赖可信的设置
3)更高的硬件和带宽需求

![1](https://i.ibb.co/0qPTC7s/1.png)

在下文中，Dankrad Feist 指出“侧链不验证有效性，仅验证共识条件的绝大部分，并且其不具有数据可用性检查。”关于侧链的安全性问题，详见文章中“侧链如何运作？”那一部分。

2. 至于 L2 能否达到与 L1 一样的安全性。Patrick McCorry 认为[[5]](https://twitter.com/stonecoldpat0/status/1393869662572748801)，L2 的目标是尽可能地接近 L1 的安全性，但想要完全一样，是不可能的：
- 欺诈证明不是尚方宝剑，尤其是当发布欺诈证明的费用太高时，其安全性就更小了
- 同样的，零知识证明也不是万能的，会出现排序者掉线以及 L1 无法应对大规模退出的情况

他还提到，L2 解决方案可以归结为以下四点：
- 数据可用性 (委员会/rollup/等)
- 状态转换完整性 (零知识证明/欺诈证明)
- 提款完整性 (退出保证)
- 协议活性 (排序者的选择)

这个混合的方案难以完全达到 L1 的安全性。

![2](https://i.ibb.co/Kz1jVRP/2.png)

回到下面的文章，Dankrad Feist 解释了“区块链的安全模型”，以强调为何 L1 的安全性如此难达到。

3. 那么 Polygon 的 PoS chain 与 Eth2 的 PoS 机制对比呢？在讨论中， Dankrad Feist 指出，在长期发展来看，PoS 侧链会是一个很大的隐患。在 Eth2 中我们尽量移除大多数诚实假设，然而 PoS 桥接并不能做到。

![3](https://i.ibb.co/g42srcy/3.png)

以下是文章内容：

&lt;br/&gt;

# 关于 51% 攻击，大家都搞错了什么

&lt;br/&gt;

请大家原谅标题中的挑衅意味。显然，并不是每个人都会误解 51% 攻击，但还是有相当一部分人没有搞清楚，因此写一篇相关的文章并无坏事。
区块链圈内大概有一个神话：只要有人控制了比特币、以太坊或者其他区块链的超过 50% 的算力，那么 ta 就可以对网络做任何事。在 PoS (权益证明) 机制中，只要有人聚集了质押总额的 2/3，ta 同样可以对网络做任何事情。ta 可以转走别人的资产，随意发行代币等等。
这种想法是错误的。以下是 51% 攻击可以做的事情：
- 攻击者可以阻止用户使用区块链，即，拦截任何他们不喜欢的交易。这叫做审查。
- 他们可以回滚区块链的交易，即撤销一定数量的区块并更改其中的交易顺序。

他们不能做到的是：更改系统的规则。这意味着：

- 他们不能简单地在区块链系统规定之外发行新代币；例如，比特币目前为每个新的区块生产者 6.25 BTC；他们不能将这个数字变成 100 万比特币
- 如果他们没有某个地址的私钥，他们就不能使用该地址的代币
- 他们生产的区块不能比共识规则规定的大

这并非说明 51% 攻击的后果不严重，这仍然是十分恶劣的攻击。重新排序交易可以造成双花，这是非常严重的问题。但他们能做的事情仍然有局限性。

那么包括比特币和以太坊的大多数区块链，他们现在如何确保这一点？如果有一名矿工挖出了违法共识规则的区块会如何？或者，如果绝大部分质押者对一个违反共识规则的区块签名会发生什么？

&lt;br/&gt;

## 区块链安全模型

有时人们声称最长链为有效的比特币或者以太坊链。这个说法不太完整。对当前链头的正确定义是
- 总难度最高的有效链。

因此，在客户端接受区块链应该用来记录当前历史数据这个条件之前，他们需要验证两个属性：
1.该区块链必须有效。这意味着，所有状态转换都是有效的。比如，在比特币上，所有交易只花费此前没有花费的交易输出，coinbase 仅接收交易费和区块奖励，等等。
2. 它必须是难度最高的链。通俗地说，这是一条最长链，然而“最长”不是以区块的数量来衡量的，衡量的是总共花了多少挖矿算力在这条链上。

这听起来可能有点抽象。我们有理由提出一个疑问，上述中的第一个条件由谁来验证，即谁来验证者区块链上的所有区块均应有效？因为如果还是矿工验证该链有效，那么这只是重复工作了，我们并没有真正从中获得什么。

但区块链不一样。让我们分析一下为什么，先从一个普通的客户端/服务器数据库架构开始：

![4](https://i.ibb.co/BrJwjZS/4.png)

请注意，对于典型的数据库，用户信任数据库服务器。他们不会检查回应是否正确；客户端确保已按照协议对其有效格式化，仅此而已。客户端 (此处用一个空白的方块表示) 是“非智能的”：它无法验证任何内容。

但是在区块链的架构中，是这样的：

![5](https://i.ibb.co/nz2XD67/5.png)

我先来总结一下上图包括的组件。首先矿工 (或质押者) 生产区块链。P2P (点对点) 网络确保每个人都能够使用有效的链，尽管存在一些不诚实节点 (你需要连接到至少一个诚实且连接良好的 P2P 节点，以确保自己始终与有效链保持同步)。最后，客户端将交易发送至 P2P 网络并从网络中的其他节点接收最新的链更新 (或者是完整的链，如果它们正在同步的话)。客户端实际上是网络的一部分，它们也将通过转发区块和交易来做贡献，但在这里不是那么重要。

重要的部分是，用户正在运行一个全节点，上图中由客户端中的柱体表示。只要客户端获得一个新的区块，就像任何其他节点一样，无论是一个矿工还是 P2P 网络中的一个节点，这些客户端都将验证该区块是否为有效的状态转换。

如果这不是一个有效的状态转换，该区块则会被忽略。这就是为什么网络中的矿工试图挖掘无效的状态转换是没有意义的。所有人都只会忽略它。

许多用户运行自己的节点，与以太坊或比特币等区块链交互。许多社区已将此模式作为其文化的一部分，并且非常强调每个人都运行自己的节点，由此他们就成为验证过程的一部分。确实，让大多数用户 (尤其是那些质押了大笔资产的用户) 运行全节点是非常重要的；如果大多数用户变得懒惰，那么矿工可能会突然被诱使生产无效区块，如此一来该模型将不再适用。

&lt;br/&gt;

## 打个比方：三权分立


这有点像民主制中的三权分立 —— 政府有不同的分支，而仅仅因为你在其中一个分支拥有多数席位 (比如立法机构)，并不意味着你可以做任何你喜欢的事以及藐视所有的法律。同样，矿工或质押者有权排序区块链中的交易；而他们无权轻易对社区制定新规则。

&lt;br/&gt;

## 但是所有区块链都是这样运作的吗？

这是个好问题。需要注意的一个重点是，以上所说的模型只有在全节点易于运行的情况下才会奏效。作为普通用户，如果运行全节点必须要花 $5000 购买另一台计算机，并且一直需要 1 GBit/s 的网络连接，那么 ta 根本不会选择运行全节点。尽管 ta 可以在某些地方达到该网络要求，但是永久地保持以运行自己的区块链节点很可能不那么方便。在这种情况下，普通用户很有可能不会选择自己运行节点 (除非 ta 的交易非常有价值)，这意味着 ta 将信任其他人来为其执行该操作。

假设有一条链，其运行成本太高，以至于只有质押者和交易所会运行全节点。你刚刚改变了信任模型，然后大多数质押者和交易所能够聚集在一起并改变共识规则。对于这一点，用户是没有任何争议的 —— 如果用户对该链完全没有控制权，那么他们无法发起分叉。他们可以坚持使用旧的规则，然而，除非他们开始运行全节点，否则，他们根本不知道自己的请求是否在自己想要的链 (满足其共识要求的链) 上得到了回应。

这就是为什么每当出现提高以太坊或比特币的区块大小的讨论时，总会引起大量的争论 —— 区块大小每提高一次，都会增加大家自己运行节点的负担。这对矿工来说不是什么大问题 —— 与实际的挖矿操作相比，运行一个节点的成本要小得多 —— 因此，这将权力的天平从用户转移到了矿工 (或质押者) 身上。

&lt;br/&gt;

## 轻客户端如何运作？

但是，如果用户只是想用加密货币来买咖啡，该怎么办？Ta 需要在手机上运行全节点吗？

当然，没人希望需要这样做，用户也不希望。那么这时候就是轻客户端发挥作用的时候了。轻客户端是较简单的客户端，它们不需要验证整条链 —— 它们仅验证共识，即总难度或者已投票的质押金额数量。

换句话说，轻客户端会被诱使跟随一条包含无效区块的链。对此有补救措施，例如数据可用性检查和欺诈证明。据我所知，目前还没有任何一条链实现了这些，但至少以太坊未来会这样做。

因此，使用具有数据可用性检查和欺诈证明的轻客户端，用户在不需要运行全节点的情况下，也可以使用区块链的安全模型了。这是我们最终的目标，即任何智能手机都能够轻松地运行以太坊轻客户端。

&lt;br/&gt;

## 侧链如何运作？

侧链是当前的热门话题。它们似乎可以提供一种简单的扩容方案，不像 rollups 那么复杂。简而言之：
- 创建一条新的 PoS 链
- 在自身和以太坊之间创建一个双向桥接
- …

-重点！请注意，侧链的安全性几乎完全依赖于桥接 —— 这是一种允许某条链读取另一条链的状态的构造。毕竟，如果攻击者能够欺骗主链上的桥，让桥接链上的所有资产都为其所有，那么即便 PoS 链上的全节点提出异议也没办法了。所以一切都取决于桥。

不幸的是，桥的状态与轻客户端相同。它们不验证有效性，仅验证共识条件的绝大部分。然而，侧链有两个方面比轻客户端更糟糕：
1.桥接用于价值非常高的交易，其中大多数用户会选择一个全节点，如果可以的话
2.不幸的是，我们没有办法加固桥接，而我们可以对轻客户端这样做 —— 原因就是它们无法验证数据可用性检查

第二点很微妙，可以花一到两篇文章讲解一下。但是简单来说，桥接不能做数据可用性检查，而没有数据可用性检查，欺诈证明也几乎没用了。而如果使用零知识证明，可以要求桥接打包所有有效区块的证明，从而改善这个问题 —— 不幸的是，这样还是有可能会受到数据可用性攻击，但也是一种改进了。

总言而止，侧链的安全模型与以太坊和比特币等区块链不同，而且要弱得多。它们无法防止无效的状态转换。

这些问题都需要靠分片来解决吗？

实际上，所有这些都与分片有很大的关系。我们之所以需要分片来进行扩容，是因为只有分片能够实现这样的扩容方式：既不需要提高运行全节点的门槛，同时又能够尽可能地维护区块链的完整安全性保证。
但如果有人撤销所有历史数据呢？那么 ta 还是可以盗取所有比特币/ETH/等

理论上说，在一条非检查点的 PoW 链上，可以通过回滚所有交易来盗取比特币。是的，你不能发行一万亿个比特币，但你仍然可以盗取现存的所有比特币，这也很好，对吧？

我认为这一点非常理论化。社区会接受一个修改其好几年数据 (甚至只是好几个小时) 的分叉的机率几乎为零。在所有可能的分叉中，都会出现大规模的争抢，很快就会得出结论并拒绝分叉，只同意有效的链为现存的那条链。

有了 PoS 和敲定，这种机制将变得形式化 —— 客户端永远不能回滚已敲定的区块。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2进展更新 (截至2021/5/22)]]></title><description><![CDATA[Nocturne 测试网的成功表明“合并”在技术上是可行的]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-5-22</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-5-22</guid><pubDate>Tue, 25 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210522)

&lt;br/&gt;

# 首推


所有人[比特币披萨节](https://www.moneycontrol.com/news/business/cryptocurrency/bitcoin-pizza-day-2021-some-interesting-facts-about-this-special-cryptocurrency-day-6924731.html)
快乐！🍕


你们有没有试过读到很好的文章，以至于希望是自己写出来的？“对以太坊常见批评的回应 ([Addressing common criticisms about Ethereum](https://www.reddit.com/r/ethereum/comments/najp2c/addressing_common_criticisms_about_ethereum/))&quot;就是这样一篇文章。这不是仅关于 Eth2 的内容，但仍然值得放在首推，因为每个人都应该读读它。

&lt;br/&gt;

# 信标链


还是偶尔会有一次性的[罚没事件](https://beaconcha.in/validators/slashings)，在上两周有又有两起。这些很难解释。有可能是有人尝试迁移到不同的客户端，但在过程中出现了问题。如果是你的话，请联系我们，我们希望你可以吸取教训。总的来说，从创世以来少于千分之一的验证者遭遇罚没，且他们的绝大多数是由一个质押服务商来运行的。

## 质押

Martin Köppelmann (引用[星火矿池的推文](https://twitter.com/sparkpool_eth/status/1395662646951641090)) 与社区开启了一次关于[质押中心化](https://twitter.com/koeppelmann/status/1395665689139101696)的对话。一如既往，事情比乍看之下有更多细节。我希望 Rocket Pool 的上线和验证者提款的实施将在适当的时候帮助缓解某些质押服务商越来越中心化质押的压力。

Bison Trails的Elias Simos创建了一个[Eth2 质押流动性](https://duneanalytics.com/eliasimos/Eth2-Liquid-Staking)的仪表盘，[这里](https://twitter.com/eliasimos/status/1393143355731742721)提供了解释。这些是接受少于 32 个 ETH 的质押池，并提供一定数量的质押衍生品代币，它们可以在一些 DeFi 协议里使用 (因此是“流动的”)。Lido 在这个领域占主导地位 (这里有它们的最新[进展更新](https://blog.lido.fi/lido-development-update-four-months-of-lido/))。

## Altair 升级

在最近的一次[开发者会议](https://hackmd.io/@benjaminion/wnie2_210522#PoS-Implementers)里，我们重新讨论了对 Altair 进度的规划。与上次相比没有大的改动：六月上半月进行一些联合测试网并最终确定规范；七月对现有测试网进行升级。

Altair 规范的 [`alpha.6`版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.6) 刚刚发布 (名为“Protostellar Evolution”)。主要的更新在于重新组织了配置常数，使创建有不同参数的测试网更容易，还有[其他一些内容](https://github.com/ethereum/eth2.0-specs/pull/2390)。

Alpha 6 还在网络层上添加了一个[`ResourceUnavailable` 应答](https://github.com/ethereum/eth2.0-specs/pull/2430)。这可以被正在同步的客户端用来示意它们没有其他节点以为它们有的区块。接收到这个应答的客户端可以判断这是否属于不良行为，并断开与发送者的联系，或者在它们完成同步前给它们一些宽限。

我们的计划是让 Alpha 6 保持稳定，作为最初多客户端测试网的基础。

Vitalik已经创建了一个[Altair升级注释规范](https://github.com/ethereum/annotated-spec/blob/master/altair/beacon-chain.md)。Vitalik比我高产多了。

## Rayonism 项目

以太坊权益证明黑客松项目 [Rayonism](https://rayonism.io/) 于上周结束。在这四周里，有两个合并测试网被构建起来：Steklo 运行了一天，而Nocturne 运行了一周。

[Nocturne](https://twitter.com/protolambda/status/1392448050191347716) 有一个[很好的开始](https://twitter.com/etherchain_org/status/1392458481983234050)，随后[表现地更好](https://twitter.com/protolambda/status/1392503445714767883)。跟上次一样，有 12 种 Eth1/执行层客户端与 Eth2/共识层客户端的组合，就我所知，测试网整个星期都运行得相当顺利。在 Eth1 区块投票和交易处理方面出现了一些初期问题，但没有什么根本性问题会影响“合并”的进展。

尽管最终演示的内容少于一开始的野心—— 比如没有涉及分片，但Rayonism 仍是一个巨大的成功，预示着“合并”的极好前景。我要向所有参与其中的人致以敬意！特别是 Protolambda，他全程不知疲倦地进行协调工作，令人印象深刻。🙌

正如 Protolambda [提到](https://twitter.com/protolambda/status/1392448057934028807)的，尽管这次黑客松已经结束了，但这不是 Rayonism 的终点。在适当的时候，那些未完成的目标会被实现，例如验证者提款和分片。其他还需要实现和测试的内容有新的状态同步协议，以及从工作量证明到权益证明的过渡。

## “合并”

由于 Rayonsim 进展顺利，”合并“两边的客户端团队将把他们的注意力先暂时集中在其他事情上，分别是伦敦升级 (EIP-1559) 和 Altair 升级的交付。

最近几天，围绕”合并“讨论的主要话题与往常一样是时间。Rayonism 表明整件事在技术上是可行的，但还有非常大量的工作需要及逆行，可能更多是在 Eth1/执行层客户端方面。

尽管 Eth2/共识层客户端的开发者明显表示需要在今年完成初步的“合并”，但至少有一个 Eth1/执行层客户端团队不愿意对此作出承诺。我对此的看法是“合并”更加可能在 2022 年的第一季度发生，而不是今年。其他人的观点：“Ethereum 距离 PoS 仅六个月之遥”，Preston Van Loon 在接受 [The Defiant](https://newsletter.thedefiant.io/p/ethereum-is-about-six-months-away-4b0) 访问时说。我在[前段时间](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_210313#fnref1)提醒过 Eth2 的开发者可能会遇到 Eth1 治理上的文化冲击 (有相关视频)。

我们可以肯定的是：(a) 所有以太坊核心开发者都有一个强烈的愿望，那就是尽快完成合并；(b) 这事不能操之过急，我们不会因为仓促行事而将网络置于危险中。大家可以自己在 Discord 的[#allcoredevs](https://discord.gg/6hGwGYn3EU) 频道跟进讨论。

## “合并”后

大多数人的观点是，尽可能保持“合并”简单，以尽快交付。这意味着目前的“合并”不包括押金提款机制，这部分会晚几个月交付。尽管如此，Consensys TX/RX 团队的 Dmitry Shmatko 一直在进行[提款的设计与规范](https://hackmd.io/@zilm/withdrawal-spec)的研究工作，包括只提取部分质押奖励。

&lt;br/&gt;

# 释义性文章

Carl Beekhuizen 估算了[以太坊合并后的耗能](https://blog.ethereum.org/2021/05/18/country-power-no-more/)，发现比 PoW 下的以太坊减少99.95%。清除地来说，是提高了 2000 倍能源效率，而且更安全 (`@jack`在这个问题上是[错的](https://twitter.com/jack/status/1395455356382351362))。Carl 还做了一些不错的比较。

Coogan Brennan 写了一篇很好的分步解释文章，展示如何一起使用 [Teku 的检查点同步](https://consensys.net/blog/teku/teku-and-infura-team-up-to-make-the-fastest-ethereum-2-0-client-sync/)功能和 Infura 来设置同步，且几乎能马上运行起来。Infura 是可选的——我用另一个 Teku 客户端提供的检查点使用了这个功能，真的超级方便。

这是一份[日文版质押教指南](https://www.reddit.com/r/ethstaker/comments/n630ih/japanese_staking_guide/) (链接到[指南](https://gure-it-memo.com/eth-staking/))。

Vedant Agarwala 写了一篇在家设置验证者节点而[无须监听器](https://vedantsopinions.medium.com/eth2-node-at-home-without-a-monitor-12ae3ee861fb)的教程。文章里的设置与我的很相似，只是我的客户端是 Teku 而不是 Lighthouse。

在 [/r/ethstaker](https://www.reddit.com/r/ethstaker) 上有人发了一些技术性文章，对在家质押的人可能会有用：

- 一个关于[改善Windows 10 时间同步问题](https://www.reddit.com/r/ethstaker/comments/nfca22/an_opiniated_solution_to_improve_time_sync_on/)的意见性解决方案（An opiniated solution to improve time sync on Windows 10）
- 减少 Linux 的切换 ([Reducing linux swapiness](https://www.reddit.com/r/ethstaker/comments/ndnwka/reducing_linux_swapiness_to_10_from_default_of_60/))

&lt;br/&gt;

# 媒体资源


Prysm 团队的 Raul 和 Preston 作客播客  [Go Time](https://www.youtube.com/watch?v=oXgcPKhQy6w) （&quot;围绕 Go 社区展开讨论&quot;）

Coindesk 的 Mapping Out Eth2 播客在 [5 月13 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/validating-eth-cloud-computing) 和 [5 月 20 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/ethereum-governance-process)各更新了一期。我无法参与 20 日那期的录制，于是 Tim Beiko 作为特别嘉宾谈论了 EIP-1559 和以太坊治理问题，非常推荐！

&lt;br/&gt;

# 研究

在 [ethresear.ch](https://ethresear.ch/) 上:

- Georgios Konstantopoulos 提议“简单的提款凭证轮换 ([Simple Withdrawal Credentials Rotation](https://ethresear.ch/t/simple-withdrawal-credentials-rotation/9555?u=benjaminion))”。这回使得丢失了提款密钥的质押者可以换上新的密钥。这个提案很有争议，但是，不妨看看下面的评论，了解其中的权衡。
- Vitalik 呼吁一个[理想的向量承诺方案](https://ethresear.ch/t/open-problem-ideal-vector-commitment/7421?u=benjaminion)的一年后，出现了一份关于[Hyperproofs](https://ethresear.ch/t/open-problem-ideal-vector-commitment/7421/28?u=benjaminion) 的提案 ([论文链接](https://eprint.iacr.org/2021/599))
- 可行的智能合约分片 ([Practical Smart Contract Sharding](https://ethresear.ch/t/practical-smart-contract-sharding-with-ownership-and-commutativity-analysis/9538?u=benjaminion))

&lt;br/&gt;

# 常规会议

## PoS 实现者会议

就是之前大家所熟知的 Eth2 实现者会议，第64次 PoS 实现者会议在 5 月 20 日举行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/218)
- [会议视频](https://youtu.be/A1L7wLYAqnM?t=151)
- 我的[速记](https://hackmd.io/@benjaminion/r1-aSk4tu), 和 Alex Stokes 的[实时推文](https://twitter.com/ralexstokes/status/1395418899466752002)

一如既往，相当简短且议程紧密。主要是围绕 Altair 升级的状态更新和规划。

## “合并”实现者会议

第 4 次的“合并”实现者会议在 5 月 13 日举行。

- [会议议程](https://github.com/ethereum/pm/issues/316)
- [会议视频](https://www.youtube.com/watch?v=uzjhLPtvTMQ)
- [文字记录](https://github.com/ethereum/pm/blob/master/Merge/Meeting%2004.md)


如果你对用 45 分钟辩论 JSON RPC 与 REST API 的优劣感兴趣的话，你会喜欢这次会议。围绕 API 的无尽讨论是核心开发者们[一直以来的传统](https://github.com/ethereum/eth2.0-specs/issues/1012#issuecomment-489660765)。

这次与之前的合并会议是在 PoS 实现者会议之间的休息周进行的。为了减少对不同时区的人睡眠的干扰，我们同意将这些会议提到 PoS 会议之前，因为参与两个会议的人人大多相同。这样会议时间可能会很长，但更合理，而且有一天我们最终会合并这些会议。所以，下一次“合并”实现者会议将在 6 月 3 日进行。

&lt;br/&gt;

# 其他新闻


- 有兴趣成为以太坊核心开发者吗？看看以太坊基金会的核心开发者学徒计划吧！
    - 另外，Teku 团队也在[招](https://consensys.net/open-roles/3040114/)[各个方面的](https://consensys.net/open-roles/?discipline=41276)协议工程师噢！
- Teku 演示把信标链过渡到 Altair 网络的视频（7分钟）。
- [Lighthouse](https://lighthouse.sigmaprime.io/update-36.html) 和 [Nimbus](https://twitter.com/ethnimbus/status/1395035682947612674) 的客户端团队更新
- Sigma Prime 团队的 [Lighthouse 研究报告](https://d24n.org/lighthouse-research-report/)，由 [Decentralization Foundation](https://d24n.org/) 资助。([报告链接](https://drive.google.com/file/d/12flM_E_A3DldbOUe8EYEN6Bg2bi4Yl6w/view))

&lt;br/&gt;

# 最后



三年前我看到 Zooko 的[这条推文](https://twitter.com/zooko/status/996120229792092165)我笑了，上周再次看到它，我又笑了。

&gt; 加密货币从工作量证明转为权益证明的珍贵镜头。

是的，这是我们正在做的事！

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/5/24]]></title><description><![CDATA[Vitalik 回应马斯克；Optimism集成 Etherscan]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-24/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-24/</guid><pubDate>Mon, 24 May 2021 00:00:00 GMT</pubDate><content:encoded>![26](https://i.ibb.co/CJyfvpv/cover.png)
# Eth2

**Altair 升级进度**

根据 Ben Edgington 对最新一次  PoS 实现者会议的记录，Altair 升级规范的 Alpha 6 版本已出，内容基本确定，并计划在演示互操作后确定规范内容和设定分叉日期。目标是六月上半月上线短期的测试网和敲定规范，有希望七月能分叉测试网。

来源：https://hackmd.io/@benjaminion/r1-aSk4tu

&lt;br/&gt;

另外， Vitalik 发布了注释版的 Altair 规范——”Ethereum 2.0 Altair Beacon chain changes&quot;。

指路：https://github.com/ethereum/annotated-spec/blob/master/altair/beacon-chain.md

&lt;br/&gt;

# 合并

Rayonism 项目上的测试网已关闭，现在需要在客户端回基到产品代码，把 API 分离开来。在过渡过程和状态同步方面还需要研究工作，可以在客户端团队进行伦敦和 Altair 升级工作时进行，未来会有一个更大型的测试网进行相关测试。

同时，分片和提款方面的开发工作仍在继续。

来源：https://hackmd.io/@benjaminion/r1-aSk4tu

&lt;br/&gt;

# EIP-1559

伦敦升级测试网Baikal 的区块浏览器现在可以展示完整的 1559 交易数据和区块信息（见下图）。其中，&quot;Transaction Type: 2&quot; 表示这是一笔原生 1559 式交易。“Gas Price: NAN&quot; 表示这笔交易没有使用 gas 价格，也就是说这应该是一笔 1559 式交易。因为，在 1559 式交易里使用的是&quot;MaxPriorityFee/Gas&quot;，也就是矿工小费，“MaxFee/Gas&quot; 也就是 Fee Cap (最高费用)。这两项都设置了。其他都是标准交易信息。

![1559](https://i.ibb.co/xm1kncJ/1559.png)

![15592](https://i.ibb.co/sQ7tVg0/1559-2.png)

有人提问为什么”Base Fee&quot; 是 7，Tim Beiko 回答说“那是 7 wei，即0.000000007 gwei。这其实是接近于 0 的数，这样设置因为在整数计算里，Base Fee 设为低于这个数会使得计算无法进行。在主网上，分叉后第一个区块的基本费是 1 gwei，然后随着区块容量达到 15m，Base Fee 才会增长到它的市场价格。因此，第一个区块将可能是满的，需要给矿工支付一大笔交易费，随后才慢慢开始以基本费用来支付交易费。“

来源：https://twitter.com/TimBeiko/status/1395416223395975169?s=20

&lt;br/&gt;

”1559 钱包界面会议“（伦敦基础设施准备系列）定在北京时间 5 月26 日 21:00，时长为 1 小时。

会议议程包括：

- 对 JSON RPC 文档修改的讨论
- `PriorityFee` 的建议最低值
- 钱包服务商需要与各自的用户沟通这些修改
- 需要 ERC 编辑程序

来源：https://github.com/ethereum/pm/issues/323

&lt;br/&gt;

@trent_vanepps 发表了”给钱包和用户的1559 参考手册 (Cheatsheet: 1559 for Wallets &amp; Users)“，内容包括：

- 1559 的变量和它们的功能
- 遗留交易支持
- 在 Baikal 测试网上的测试集成
- 伦敦升级的启动过程
- 模拟资源

来源：https://hackmd.io/@q8X_WM2nTfu6nuvAzqXiTQ/1559-wallets

&lt;br/&gt;

EF JavaScript Team 于 5 月 20 日发推表示如果最后没有出现漏洞或规范变更，他们将于这周发布适用于 EIP-1559/伦敦升级的 EthereumJS 区块、交易、虚拟机和公用库。

&lt;br/&gt;

# Layer2

**Etherscan 上线 Optimism 的区块浏览器**

以太坊 L2 解决方案 Optimism 于 5 月 21 日宣布其集成了以太坊浏览器 Etherscan，推出 Optimism 的区块浏览器：[optimistic.etherscan.io](http://optimistic.etherscan.io/)，其用户可以：

- 监控存款和提款
- 在 L1 上完成提款 (很快就上线了！)
- 查看 L2 交易何时被排序者预先确认，以及它们何时在 L1 上批量发布和敲定
- 验证并发布 OVM 编译合约的源代码

来源：https://optimismpbc.medium.com/integrating-etherscan-24a3811a765c

&lt;br/&gt;

**Sorare 将于 7 月在 StarkEx 上线**

以太坊扩容解决方案提供团队 StarkWare 发推称，以太坊上增长最快的体育 NFT 交易平台 Sorare 将于 7 月在 StarkEx 上线。

来源：https://twitter.com/StarkWareLtd/status/1395047034923765762

&lt;br/&gt;

**路印推出 IWO，首次钱包发行**

L2 扩容解决方案路印推出 IWO (首次钱包发行, Initial Wallet Offering) 机制。所有使用路印钱包的用户现在可以直接在以太坊的二层网络上参与新项目的首次代币发行。

来源：https://medium.com/loopring-protocol/introducing-initial-wallet-offering-iwo-289e4fb6a480

&lt;br/&gt;

# 生态

**Vitalik 撰文指马斯克早前的狗狗币扩容说法有根本性错误**

5 月 23 日，Vitalik 发表文章“The Limits to Blockchain Scalability (区块链可扩展性的限制)&quot;，对马斯克 5 月15 日发布的”狗狗币在理性情况下提速10倍区块时间、扩大10倍区块容量、减少100倍交易费，轻易大胜“推文进行长文回应，并强调在区块链网络的架构中存在去中心化和扩容的权衡。而要实现去中心化，让普通用户都能运行节点是至关重要的，但普通用户运行全节点会有在算力、带宽和存储上的限制。

![musk](https://i.ibb.co/R4w3ZT4/Musk-tweet.png)

&lt;br/&gt;

目前以太坊在存储容量上遇到瓶颈，他相信无状态和状态效期方案可以解决这个问题，而分片区块链可以进一步达到扩容。

文章：https://vitalik.ca/general/2021/05/23/scaling.html

&lt;br/&gt;

**Consensus by CoinDesk 2021**

CoinDesk 举办的最大型区块链活动 Consensus by CoinDesk 将于 5 月 24 —27 日举行，此次会议旨在汇聚全球的专业人士，深入探讨加密货币和区块链技术的发展。此次以太坊主题的活动有两个系列，安排如下：

![coindesk](https://i.ibb.co/XSTnG2C/Ethereum-at-consensus.png)

系列一：以太坊的执行层 (Eth1.0) 

北京时间：5 月 25 日 21:30—22:30

主题：以太坊的未来：路线图更新&amp;改善提案

讲者：Tim Beiko、Pooja Ranjan



主题：扩容DeFi—在Layer2 的ENS—Optimistic rollup (MVP)

讲者：Nick Johnson

&lt;br/&gt;

系列二：共识层

北京时间： 5 月 26 日  00:00—01:00 am

主题：Eth2 与合并的现状

讲者：Danny Ryan 和 Mikhail K



主题：KZG 承诺

讲者：Dankrad Feist

入口：https://www.coindesk.com/events/consensus-2021

&lt;br/&gt;

&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。


</content:encoded></item><item><title><![CDATA[千层蛋糕：Layer-2 指南]]></title><description><![CDATA[本文列举 Optimistic rollup、zkRollup、隐私 rollup 的优缺点]]></description><link>https://www.ethereum.cn/Technology/layer-cake-a-guide-to-layer2s</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/layer-cake-a-guide-to-layer2s</guid><pubDate>Fri, 21 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Aztec Network](https://medium.com/aztec-protocol/layer-cake-a-guide-to-layer-2s-79a281af6900)

&lt;br/&gt;

大家好 👋

我是 Zac，Aztec 的 CEO。我们发明了 Plonk 这种通用型的 ZK-SNARK 技术和 zk.money，这是世界上首个隐私 rollup 项目，也是最近部署至以太坊主网的其中一个 L2 协议。

随着越来越多 Layer-2 团队将其技术部署到以太坊主网上，不断将扩容以太坊的愿景转化为现实，Layer2 上的风景变得让人越来越着迷。

但如果用户还没有融入到这个生态中，并且还没搞懂 Layer-2 相关的术语，那么用户就有可能会踩雷了。

令人失望的是，大多数人解释 Layer-2 解决方案都是因为与其的利益相关，并且会偏向某个特定的技术 (i.e. 没错，就是他们的协议所使用的那种技术！)

那我和他们有什么不同呢？完全没有！但至少我坦率言之，而不是假装公正，对吧？

我将尽我所能公平地概述。基于区块链的密码学/扩容方案的世界很小，因此每个开拓其边界的团队都值得我们尊重。所以我想我们应该参与其中！

&lt;br/&gt;

# 什么是 Layer-2，为什么它这么重要？

Eth 1.0 的交易吞吐量有限，导致了极高的交易费。

ETH 交易费主要来自：

- 状态存储变更的费用
- 交易数据的费用
- 计算的费用

Layer-2 解决方案则将上述一项或多项工作委托给一个构建于以太坊之上的次级网络。

一般来说 Layer-2 有两种类型，每一种都有自己的安全要求和取舍：**optimistic rollups**  和  **zk rollups**。而 Aztec 定义了第三类：**隐私 rollup**。

&lt;br/&gt;

# Optimistic Rollups

一个 optimistic rollup 就像是微型版本的以太坊，它自己作为一个网络也能承载智能合约和交易。

Optimistic rollup 会定期将交易区块广播至 Layer-1 的一个智能合约中。这些“区块”包括区块中每一笔交易的完整交易数据，除此之外什么也没有。Layer-1 上的智能合约不执行任何计算或进行任何存储更新。这大幅减少了发布一个区块的成本。

之所以称之为乐观 (optimistic) 的 rollup，因为该方案假设默认情况下每一笔交易都是有效的 —— Layer-1 上的智能合约不会直接检查其有效性。

相反，如果有用户认为某笔交易不正当 (如，双花交易)，他们可以发布一个“欺诈证明”。而这时，Layer-1 上的智能合约就可以利用 rollup 发布的区块数据来验证那些涉嫌欺诈交易的有效性。

该操作成本非常高，但只有在怀疑有不正当行为时才必须这样做。

如果作恶行为坐实了，那么发布该 optimistic rollup 区块的实体 (通常称为验证者) 将丢失一些他们所质押的加密货币。

Optimistic rollups 依赖于这种经济共识来确保交易是正当的。

Optimistic rollups 的提款等候期时间通常比较久 (比如，一周)。这是因为，一旦某笔交易被发布至 rollups 中，用户需要等待是否有人指控其交易无效以及有无欺诈证明被发布至网络中 (这就像婚礼中牧师问“有人反对吗...”时出现的令人尴尬的沉默)。


![1](https://i.ibb.co/6YPGRtB/waiting.jpg)

&lt;center&gt;等待欺诈证明的时间会大幅减缓提款时间&lt;/center&gt;

Optimistic rollup 中执行交易的主要成本是将交易数据发布到链上的费用。所有 rollups 都面临这个数据可用性问题，不管是 optimistic rollup 还是其他的 rollup。为了防止自己的资金被冻结，用户需要拥有权限以访问 rollup 的所有交易数据。要么将这些数据发布在 Layer-1 上，要么需要用户额外的信任假设 (比如，相信一些侧链会允许用户访问这些数据)。

在我撰写本文时，如果你所使用的 rollups 没有将其交易数据发布至链上，这意味着你只能祈祷你所依赖的中心化服务商不会冻结你的资金了。

**优点:**

- 功能丰富。可以复制 Eth1.0 的架构并支持只能合约。
- 与 zk-rollups 相比，更容易构建和部署

**缺点:**


- 提款退出时间较长。从交易执行到交易被视为‘安全有效’ (即无欺诈证明提出) 需要等待约一周的时间。

- 退出时间缓慢的问题可以借助承保人来缓解 (就是那些收取少量费用，提供 L1 资金流动性的一方，旨在让用户实现快速提款)

&lt;br/&gt;

# ZK Rollups

由二级网络处理计算和存储。

L2 将交易数据广播至主网，并提供有效性证明 —— 这是一种数学证明，证明交易是有效的。也就是说，将 L2 上的批量交易汇总成一笔大交易，并发送至 L1 某个智能合约中。

zkRollups 中的前缀 “zk” 代表着 “zero knowledge” (零知识)。 然而，zkRollups 不提供隐私保护 —— 所有交易都默认公开，像 optimistic rollups 一样。之所以称之为 “zk”，是因为这种有效性证明通常是由零知识证明系统生成的 (例如，ZK-SNARK 或 ZK-STARK)。

这样做的好处在于，以太坊主网上就少了存储项更新和计算的开销。没有必要乐观地假设交易是有效的，如果证明是有效的，就可以确定交易是有效的。

这意味着 zkRollups 的提款时间比 optimistic rollups 要快许多，并且需要的信任假设也更少。

而房间里的白象是，零知识证明给一笔交易增加了惊人的计算开销。

为计算创建一个零知识证明比直接运行该计算要慢大概 100 万倍！这时一个粗略的估计，会根据所涉及的计算而有所不同，但对于在 Solidity 智能合约中的计算类型来说，这个估计是准确的。

zkRollups 通过将生成证明委托给具有大量计算资源的第三方 “rollup 提供商” 来处理这个问题。用户将依赖这些第三方服务商来为他们创建交易。Rollup 提供商可以审查或者抢跑交易，就像以太坊矿工可以做的那样。所需的算力越多，能够作为 rollup 提供商的主体就更少了，因此我们必须要从协议架构就充分解决审查问题。

当需要将智能合约移植到 L2 时，高昂的计算开销给我们带来了一些难题。完全兼容 EVM 是我们的目标，想要达到这个目标，就必须解决这个 100 万倍的减速问题。EVM 对 SNARK 极其不友好，因为字长是 256-位，并且原生支持 SHA3 和其他 SNARK-不友好的哈希算法。即便将计算证明委托给拥有大量计算资源的第三方也可能不足够。一种可能的解决方案就是，通过 FPGAs 或者 ASICs 把 zkSNARK 证明器算法直接写到硅中。Rollup 提供商将需要这种硬件来创建证明。

![2](https://i.ibb.co/5TKd7R7/transactor.png)

创建 zk 证明比运行一个普通程序要慢得多。我们研究的 Plonk 和 Plookup 将 SNARKs 的速度提高了一个数量级，但是与 optimistic rollups 相比，zkRollups 仍然存在性能问题。

通常，SNARK 和 STARK 编程语言不得不适应其底层证明系统的低效率。这两种语言通常难以实现可变长度循环和动态内存访问 (如动态数组和向量)。我们最新的 Plookup 研究中缓解了其中一些问题，但并非全部。

这意味着 zkRollup 可能会要求开发者将其合约移植到自定义语言中 (例如 Starkware 的 Cairo语言)。

对于那些不旨在实现完全 EVM 兼容性的 zkRollups 来说，有一个好处就是交易更加便宜。如果无需遵循 EVM 语义，那么就有可能减少每笔基本交易的广播数据量。Hermes network 就是这样做的。

**优点:**

- 交易成本可能比 optimistic rollups 更便宜
- 不需要欺诈证明，提款时间更短

**缺点:**

- 与 optimistic rollups 相比，添加功能速度更慢
- 依赖于使用自定义硬件的第三方来生成证明
- 可能需要功能有限的自定义语言

&lt;br/&gt;

# 隐私 Rollups

Aztec 已于 2021 年 3 月在主网上线了隐私 rollup。用户可以将 ETH 封装到一个隐私屏蔽罩 (privacy shield) 中，并通过我们的在线隐私钱包 zk.money 发送隐私交易。

隐私 rollups 的技术与 zkRollups 的非常相似，但他们的用途完全不同。隐私 rollups 旨在为 L2 用户提供强大的隐私保证。用户匿名持有资金。当执行交易时，发送者和接收者都是匿名的，并且连转账金额也是加密的。

为此，我们使用了最先进的零知识证明系统 Plonk。我们在 2019 年发明了 Plonk，它很快便成为在区块链上开发零知识证明的团队中的行业标准。

在设计上实现隐私需要一个与 zkRollup 截然不同的 rollup 架构。我们采用的方法为“隐私优先”，因为我们知道，如果想要将公开的 L2 改造为拥有可编程的隐私性，那么往往需要牺牲用户体验或者激进地重构整个协议。

当前基于以太坊的隐私解决方案是混币器 (mixer)。混币器可用于匿名化用户的资金数额，但几乎没有其他用途。我们的隐私 L2 的完整版本将包括更多功能：

- 完全可编程的隐私型智能合约。隐私货币将有更高级的交易逻辑
- NFT 的隐私所有权
- 可以完全隐藏 NFT 的属性，仅为该 NFT 的所有者可见
- 反洗钱和 KYC 检查可以直接通过编程写入隐私 代币/dApps 中 (例如，KYC tokens —— 用户可以在无需知道他们真实身份的前提下与可信任的对手方进行交易）
- 隐私性 DeFi！这是个很广泛的主题，需要专门写一篇文章来介绍 (很快就会发布出来了！)

只有一开始就把隐私放在首位，才有可能获得这些好处。协议的事务和状态模式也必须设计成与隐私特性相兼容。

**优点**

- 实现隐私交易。用户的金融活动不会被第三方分析
- Rollup 提供商也不能审查或者抢跑用户的交易。对那些提供商来说，每一笔交易就像一串随机数字
- 不需要欺诈证明，提款时间很短
- 不需要第三方执行计算，用户就可以单方面地提款

**缺点**

- 比公开的 L2 贵 (但比主网便宜)，直至数据可得性方案/Eth 2.0 推出
- 用户必须在本地构建隐私交易 zk 证明，不能委托给第三方。因而 zk 证明系统必须快如闪电
- 由于受到客户端构建证明性能的限制，隐私 rollups 添加功能的速度比 zkRollup 和 optimistic rollup 要慢。可以实现可编程性，但是实现完全兼容 EVM 还需要一段时间。
- 状态模式不同。价值必须像比特币那样以 UTXO ‘支票 (note)’ 表示，而不是通过以太坊的账户模型表示。当然，可以在应用程序中将其抽象表示出来。

&lt;br/&gt;

# 在喧闹中寻求信号

L2 领域竞争激烈，想要在同行之前发布解决方案并且收获大批用户需要顶住极大的压力。

这可能会出现一些偷工减料的方案，并且需要添加额外的信任假设，而这些对用户来说是模糊的。

目前最大的问题就是数据可用性问题。

&gt; 如果 L2 没有将其交易数据发布至链上，L2 的管理者就有可能冻结用户的资金。

每个 L2 团队都正努力地开拓当前扩容解决方案技术的边界。虽然这值得敬佩，但他们很有可能利用一些技术黑话来隐藏协议的缺陷。

如果用户正在考虑使用 L2，那么应该判断某个方案能不能充分解决下列问题：

- 该 L2 如何获得数据可用性？如果其交易费比以太坊上普通的转账费用低 20 倍以上，那么他们可能没有将所有数据广播至链上
- 用户可以仅凭借发布至以太坊主网上的信息单方面从 L2 中提款吗？
- 该协议有无公开的技术描述，以供第三方验证呢?

此外，对于 zkRollups 和 隐私 rollups，用户还需要考虑以下问题：

- 链上数据是否可证明有效？**所有这些数据都会作为公共输入发送到 rollup 的电路中吗？**
- 该 L2 依赖于集中式计算集群来创建 rollups 吗？如果是这样的话，他们有什么计划来防止审查和抢跑？当完全去中心化时，可能会有多少 rollup 提供商？
- 证明创建算法公开可见以及可审计吗？

&lt;br/&gt;

# 未来的图景

接下来的一年将是 L2 领域里非常激动人心的时刻。无数协议将正式在主网部署，该行业里多年的研发与工程工作将迎来最繁荣的时刻。

对于 Aztec 的隐私 rollup 来说，我们关注的重点是将可编程的隐私智能合约带给大家。我们的 Plonk 和 Noir 编程语言旨在将高级程序编译成高度优化的 ZKSNARK 电路，这些电路的速度足够快，得以在浏览器中构建证明。该项技术将成为 Aztec 3.0 rollup 架构的基石，用户将可以使用 Noir 自定义电路。

通过将可编程隐私与扩容结合，我们为推动 web3 技术成为主流添加了最后一个缺失的环节。最终，web3 将能够与传统的 web2 技术在同一平台上竞争，并且以能否提供强大的隐私保证作为标准。我们希望能够培育一个繁荣的隐私加密货币和 NFT 生态系统，能够以保护隐私的方式与更多 DeFi 协议和更多传统金融服务进行交互。

我们已经推出了 [zk.money](https://zk.money/)，向大家证明这并不是什么疯狂的未来技术。我们已经开发了一些关键技术，以构建这个雄心勃勃的项目，现在我们要开始努力工作以实现我们的愿景。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[能源密集型的以太坊，拜！]]></title><description><![CDATA[合并后，以太坊使用的能源将减少至少99.95%]]></description><link>https://www.ethereum.cn/Eth2/country-power-no-more/</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/country-power-no-more/</guid><pubDate>Fri, 21 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Etherum Foundation Blog](https://blog.ethereum.org/2021/05/18/country-power-no-more/)

&lt;br/&gt;

在未来几个月里，以太坊将完成向权益证明 (PoS) 的过渡，这将把多年来“纸上谈兵”的无数改善变为现实。但现在信标链已经运行了几个月了，我们可以挖掘一下它的数据了。我们非常乐于探索的一个方面是新的能源使用预测，因为我们结束了需要消耗相当于一个国家所需能源的共识。

到目前为止，还没有任何关于能源消耗 (甚至使用了哪些硬件) 的具体数据，因此下文对未来以太坊的能源消耗分析只是一个粗略估计。


由于许多人正在运行多个验证者节点，我决定使用存款的唯一地址数作为现在有多少服务器的指标。很多质押者可能使用了多个 eth1 地址，但这很大程度上可以抵消那些有多台设备的人。

在撰写此文时，信标链上共有 140,592 个验证者，来自 16,405 个唯一地址。很明显，这个数据被交易所和质押服务商严重歪曲了，因此把它们移除后还剩 87,897 个在家质押的验证者。由此可以推断，平均每个在家质押者运行 5.4 个验证者，这对我来说是个合理估计。

&lt;br/&gt;

# 电力要求

![power](https://i.ibb.co/VLWCjQb/power-consumption.png)

运行一个信标链节点 (BN)、5.4 个验证者客户端 (VC) 和一个 eth1 全节点需要多少电力？根据我自己的设置，大约是 15 瓦。Joe Clapis （一个 Rocket Pool 开发者) 最近运行 10 个 VC，一个 Nimbus的 BN 和一个 Geth 全节点，10 小时用完了一个 10Ah USB 电池组，也就是说这个设置的平均用电量是 5瓦。不太可能平均每个质押者都运行这样优化的设置，所以我们按全部 100 瓦来算。

把这个数与前面算得的 8.7 万个验证者相乘，得出在家质押者消耗接近 1.64 兆瓦。预计托管型质押者消耗的电量是有点难的，他们用多余和备用的设备运行数以万计的验证者客户端。


为了方便，我们假设他们每 5.5 个验证者使用 100 瓦。根据我沟通过的质押基础设施团队，这只是一个粗略的过高估计。真正的数值大约低 50 倍（如果你是一个托管型质押团队，且一个验证者消耗多于 5 瓦的话，联系我，我肯定能帮助你）。

因此，总的来说，PoS 以太坊消耗的能源接近 2.62 兆瓦。这不是一个国家、省、甚至城市消耗能源的量级，而只是一个小镇的量级(大约 2100 个美国家庭)。


作为参考，以太坊的工作量证明 (PoW) 共识现在消耗的能源相当于一个中型国家，但这实际上是保持 PoW 链安全的必要条件。顾名思义，工作量证明达成共识是基于哪个分叉上的工作量最大。有两个方法提高完成“工作”的速率——提高挖矿硬件的效率，以及同时使用更多的硬件。为了防止链被成功攻击，矿工必须以比攻击者更高的速率完成“工作”。因为攻击者可能有相似的硬件，所以矿工必须保持大量高效的硬件运行，以防止被攻击者超过，所有这些硬件需要消耗非常大量的电力。

在 PoW 下，由于 ETH 的价格于哈希率是正相关的。因此，随着价格攀升，网络消耗的电能也会增加。而在 PoS 下，ETH 的价格上升时，网络的安全性也会提高 (质押的 ETH 价值升高了)，但所需的能源保持不变。

&lt;br/&gt;

# 一些对比


[Digiconomist 预估](https://digiconomist.net/ethereum-energy-consumption/) 以太坊矿工现在每年消耗 44.49 太瓦时，也就是说需要持续消耗 5.13千兆瓦。这意味着 PoS 的能源效率保守估计比 PoW 高大约2000 倍，这反映在总能源使用量上至少减少 99.95%。

如果每笔交易的能源消耗更符合你的可承担水平，那就是每笔交易消耗大约 35 Wh (平均 60K gas/小时) 或者大约开 20 分钟的电视。相反，以太坊 PoW 下每笔交易消耗的电力相当于一个家庭 2.8 天的用电开销，比特币消耗的相当于家庭38天的用电开销。

![comparison](https://i.ibb.co/cr3HL1F/comparison.png)

&lt;br/&gt;

# 展望未来


虽然以太坊目前继续使用 PoW，但不会持续很久。在过去几周，我们看到了“合并”的第一个测试网的出现，“合并”也就寓意着以太坊从 PoS 转换到 PoS 的时刻。多个工程师团队正加班加点地工作，以确保“合并”可以尽早实现，且无须牺牲安全性。

扩容方案 (比如 rollup 和分片) 将有助于进一步利用规模经济来减少每笔交易的能源消耗。

以太坊需要消耗大量能源的日子已经不多了，我希望这个行业的其他部分也朝这个方向发展。

感谢 Joseph Schweitzer、Danny Ryan、Sacha Yves Saint-Leger、Dankrad Feist 和 @phil_eth 的意见。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[化险为夷：以太坊的状态问题]]></title><description><![CDATA[以太坊基金会正式揭露柏林升级之前的状态“险象”]]></description><link>https://www.ethereum.cn/Eth1.x/eth_state_problems/</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1.x/eth_state_problems/</guid><pubDate>Thu, 20 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Foundation Blog](https://blog.ethereum.org/2021/05/18/eth_state_problems/)

本篇博文的目的在于正式揭露以太坊平台在柏林硬分叉之前的一个严重且显而易见的问题。

&lt;br/&gt;

# 状态

我们先从以太坊和及其“状态”的背景开始梳理。

以太坊的状态由 patricia-merkle trie 组成，一种前缀树。本文不会深入技术细节，简单来说随着状态增长，树的分支会越来越密集。每个加入的账户都是一片新叶子。在树根之间和叶子之间，存在大量的“中间”节点。

为了查找某个特定账户，或是说这颗巨树中的一片“叶子”，从树根再通过中间节点，需要按序解决 6-9 个哈希才能最终对我们所寻找的数据进行哈希计算。


简言之，每执行一次查找账户的 trie 查询，都要执行 8-9 个解析操作。每次解析操作都是一次数据库查询，而每次数据库查询都可能是任意数量的实际磁盘操作。磁盘操作的数量难以预估，但是由于 trie 密钥是加密哈希 (抗冲突)，因此密钥是“随机的”，这对任何数据库来说都是最糟糕的情况。

随着以太坊的发展，一直以来都有必要提高树访问操作的 gas 费用。2016 年 10 月，在经历了“上海攻击”时间之后，以太坊网络在区块高度`2,463,000` 进行了`Tangerine Whistle` 硬分叉，其中包含 [EIP 150](https://eips.ethereum.org/EIPS/eip-150)，大举提升了某些操作的 gas 成本，并引入了大量更改以防御 DoS 攻击。

另一次对 gas 费用的提升是在 2019 年 12 月的`Istanbul`升级中，激活了[EIP 1884](https://eips.ethereum.org/EIPS/eip-1884)。

EIP-1884 针对 gas 费用引入了以下改动：

- `SLOAD` 从 `200` 提升至 `800` gas,

- `BALANCE` 从 `400` 提升至 `700` gas (并添加了一个更便宜的 `SELFBALANCE`)

- `EXTCODEHASH` 从 `400` 提升至 `700` gas

&lt;br/&gt;

# 出现的问题

2019 年 3 月，Martin Swende 当时在进行一些 EVM 操作码性能的测定。之后的 EIP-1884 就是基于该调查而成的。在 EIP-1884 被激活的前几个月，[Broken Metre](https://arxiv.org/abs/1909.07220) 发布了这篇论文 (2019/9)。

两位以太坊安全研究员，Hubert Ritzdorf 和 Matthias Egli，与论文的作者之一 Daniel Perez 将一个漏洞“武器化”，提交给了以太坊的漏洞赏金 (bug bounty) 项目。这是在 2019 年 10 月 4 日。

建议大家阅读这份他们提交的[完整文档](https://hackmd.io/@iwck0wkoSzauVnsYI0h7JA/SkyFmk4_r)，写得很详尽。

同日，在一个专门用于讨论跨客户端安全性的频道中，来自 Geth、Parity 和 Aleth 的开发者都得知了这份文档。

这个漏洞的本质在于触发随机的 trie 查询。以下是一个简单的示例：

![trie](https://i.ibb.co/2W2CWKz/trie.png)


在其报告中，研究员们通过`eth_call`对同步了主网的节点执行了这个 payload，以下是他们执行过程中的数据，耗费了一千万 gas：


-   消耗一千万 gas 的 `EXTCODEHASH` (400 gas)

    - Parity: `~90s`
    - Geth: `~70s`

-   消耗一千万 gas 的 `EXTCODEHASH` (700 gas)

    - Parity : `~50s`
    - Geth : `~38s`


显而易见，EIP-1884 的更改确实在降低该攻击的影响上起到了帮助，但还远远不够。

当时已经临近在大阪的开发者大会。在开发者大会上，这个问题的信息分享给了主网的客户端开发者。我们也和 Hubert、Mathias 以及 Greg Markou (来自 Chainsafe，当时也在进行一些 ETC 的工作) 见面了。ETC 的开发者也收到了这份报告。 

随着 2019 年临近尾声，我们知道这个问题比之前预期的要严重，恶意交易可能将区块时间提升到分钟范围。 更糟的是，开发者社区对 EIP-1884 感到不满，因为 EIP-1884 破坏了一些合约流程，而且用户和矿工都非常希望提高区块的 gas limit。

此外，仅两个月后的 2019 年 12 月，Parity Ethereum [宣布](https://www.parity.io/parity-ethereum-openethereum-dao/)停止运维，而 OpenEthereum 接管了代码库的维护工作。

随后搭建了一个新的客户端协调频道，Geth、Nethermind、OpenEthereum 和 Besu 的开发者在此继续进行协作。

&lt;br/&gt;

#  解决方案

我们意识到要解决这个问题，必须要双管齐下。一种方法是通过以太坊协议以某种方式在协议层解决该问题。最好不要破坏合约，并且避免波及“良好”行为，但仍要设法防止攻击。

第二种方式是通过软件工程来解决，修改客户端中的数据模型和结构。

&lt;br/&gt;

# 协议层的工作

关于如何处理这些类型的攻击的第一个版本在这里。2020 年 2 月，正式发布为 [EIP 2583](https://eips.ethereum.org/EIPS/eip-2583)。其理念是，每当一次 Trie 查找导致未命中时，施加一次罚款。

但是，Peter 找到了应对方法，即“shielded relay”攻击，可以有效地限制这种惩罚的上限 (约为 800)。

对未命中查询进行惩罚的问题在于，首先需要进行查找，以确定是否施加惩罚。但是如果剩余的 gas 不足以支付罚款，已执行了未付费的消耗。即使确实会导致抛出异常，也可以将这些状态读取包装到嵌套调用中，允许外部呼叫者继续重复攻击而无需支付 (全部) 罚款。

因为这个原因，这个 EIP 被放弃了，我们也在寻找更好的替代方案。

- Alexey Akhunov 提出了 [Oil](https://ethresear.ch/t/oil-adding-a-second-fuel-source-to-the-evm-pre-eip/7394) 的概念，gas 的第二来源，但和 gas 在本质上不一样，因为它对执行层不可见，并可能导致事务全局回滚。

- Martin 在 2020 年 5 月也撰写了一个类似的提案 ([Gas And Karma](https://gist.github.com/holiman/8a3c31e459ee1bff04256bc214ea7f14))

在对这些不同机制进行迭代的同时，Vitalik Buterin 提议直接提高 gas 成本，并且保留访问列表。2020 年 8 月，Martin 和 Vitalik 开始完善 [EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) 及配套的 [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)。

EIP-2929 有效地解决了许多之前的问题。

- 与无条件提升 gas 成本的 EIP-1884 相比，EIP-2929 只提升了未访问部分的 gas 成本。这导致净成本[提升了不足一个百分点](https://github.com/holiman/eip2929-stats/blob/main/README.md#summary)。

- 加上 EIP-2930，不会对任何合约流程造成破坏

- 并且能够在不造成破坏的前提下进一步调整 gas 成本


2021 年 4 月 15 日，这两个 EIP 都在`Berlin`升级中被激活了。

&lt;br/&gt;

# 开发工作

Peter 在 2019 年 10 月提出的解决方案是“动态状态快照” ([dynamic state snapshots](https://github.com/ethereum/go-ethereum/pull/20152))。

快照是用于以平面格式存储以太坊状态的辅助数据结构，在 Geth 节点的实时操作期间，可以完全在线构建。 快照的好处在于充当状态访问的加速结构：

- 无需通过`O(log N)`次磁盘读取 (`x` LevelDB 开销) 来访问一个账户或存储插槽，快照可以提供直接的`O(1)`访问时间 (`x` LevelDB 开销)。

- 快照支持每项条目以`O(1)`复杂度迭代账户和存储，这使远程节点能够以比以前便宜得多的方式检索顺序状态数据。

- 快照还启用了更多奇特的用例，例如离线修剪状态 Trie 或迁移到其他数据格式。


快照的缺点在于原始帐户和存储数据实际上是重复的。对于主网来说这意味着将占用额外的`25GB`SSD 空间。

动态快照的概念从 2019 年中就已经发轫，起初的目的主要是推动快照同步的实现。当时 Geth 团队在忙于许多“大项目”。


- 离线状态修剪
- 动态快照+快照同步
- 通过分片化状态实现 LES (Light Ethereum Subprotocol) 状态分发


然而，最终决定将快照的优先级排到最前，将其他项目暂时搁置。这为后来的`snap/1`同步[算法](https://github.com/ethereum/devp2p/blob/master/caps/snap.md)奠定了基础，并于2020年3月合并。


随着“动态快照”功能的发布，我们有了一些喘息的空间。如果以太坊网络受到攻击，那将是痛苦的，是的，但是至少有可能通知用户启用快照。完整生成快照将花费大量时间，并且当时尚无法同步快照，但是网络至少可以继续运行。

&lt;br/&gt;

# 总结


2021 年的三月到四月，`snap/1`协议在 geth 客户端中实现了，使得通过新的基于快照的算法进行同步成为可能。虽然仍不是默认的同步模式，但这是很重要的一个步骤，使快照不仅可用作攻击防护措施，并且对于用户来说也是一项重要优化。

在协议方面，柏林升级于 2021 年 4 月完成。


以下是在我们的 AWS 监控环境中制定的一些基准：


- 柏林升级之前，无快照，`25M` gas: `14.3s`
- 柏林升级之前，有快照，`25M` gas: `1.5s`
- 柏林升级之后，无快照，`25M` gas: `~3.1s`
- 柏林升级之后，有快照，`25M` gas: `~0.3s`



大致的数据显示柏林升级能够将攻击的效率降低 5 倍，快照能够将其降低 10 倍，总计将影响降低了 50 倍。


我们估计目前在主网 (15M gas)，对于未使用快照的 geth 节点来说，有可能创建执行时间在 2.5-3 秒的区块。对于非快照节点来说，随着状态增长这个数字会持续恶化。


如果通过 gas 退还来增加区块内的有效 gas 使用量，则可能会进一步加剧为 (最大) 2 倍。随着 [EIP 1559](https://eips.ethereum.org/EIPS/eip-1559) 的实施，区块的 gas limit 的弹性会更大，并且在临时爆发中会再增加 2 倍（`ELASTICITY_MULTIPLIER`）。

至于实施这种攻击的可行性，攻击者购买一整个区块的成本约为几个 ETH (100 Gwei 时 15M gas 为1.5 ETH)。

&lt;br/&gt;

# 为什么现在公布？

这个风险其实一直以来都是一个“公开的秘密”，已经不止一次被意外公开披露，并且在核心开发者会议中多次被提及，但并未涉及细节。

现在既然已经实施了柏林升级，geth 的节点也在默认情况下使用快照同步，因此我们估计现在的威胁性已经非常低了，现在是时候对幕后工作进行全面公开了。

重要的是，让社区有机会了解一些变更背后的原因，而这些变更会对用户体验造成负面影响，例如 gas 成本增加和限制 gas 返还。

---

本文由 Martin Holst Swende 和 Peter Szilagyi 在 2021-04-23 写就。并于 2021-04-26 与基于以太坊的项目进行分享，2021-05-18 公开发布。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[Vitalik：从技术角度揭秘“分片”的优势]]></title><description><![CDATA[分片是以太坊实现可扩展性未来的关键]]></description><link>https://www.ethereum.cn/Eth2/why-sharding-is-great</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/why-sharding-is-great</guid><pubDate>Wed, 19 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/04/07/sharding.html)

&lt;br/&gt;

 此处特别感谢Dankrad Feist和Aditya Asgaonkar的校对工作。

 

分片是以太坊可扩展性的未来，是让以太坊生态系统实现每秒数千笔交易的关键，这样大部分人才能以负担得起使用成本，成为该以太坊的用户。然而，在以太坊生态系统中，分片是容易受到误解的概念之一，在更广泛的区块链生态系统中也是如此。它指的是一组非常特定的概念，这些概念都拥有自己的特质，但人们经常将前者与一些技术混为一谈，后者的安全特性更弱，且与前者不同。本篇文章的目的是介绍分片的特定属性，并与其他非分片技术加以区分，且为了实现这些属性，分片系统需要做出哪些牺牲。

 
![1](https://i.ibb.co/yXrQrbm/beacon-chain.jpg)

&lt;center&gt;图注：以太坊分片系统，原图来自Hsiao-wei Wang，由Quantstamp设计&lt;/center&gt;

 

# 扩展性不可能三角

 

要介绍分片，最佳方式是从描述一个问题开始，即扩展性不可能三角，这个问题促成了该解决方案的诞生。

 

![2](https://i.ibb.co/B3GNBzG/trilemma.png)

 

根据扩展性不可能三角，一个区块链想要实现三个特性，若使用简单技术手段，只能实现三个特性中的两个。这三个特性如下：

 

- **可扩展性**：该区块链可以处理和验证的交易比单个普通节点更多，例如一台消费级笔记本电脑。

- **去中心化**：该区块链的运行可以不依赖于由大型中心化参与者组成的小群体。这通常理解为即使是大多数节点都是诚实的，也不应该信任不能用消费级笔记本电脑接入的节点群。

- **安全性**：该区块链可以抵御大量试图攻击的节点，理想情况下，要抵御50%的节点，一般情况下，要抵御超过25%的节点，但仅仅抵御5%的节点不能够保证安全性。

 

以下是三种不同类型的“简单解决方案”，但是这些解决方案只能实现三个特性中的两个。

 

- **传统区块链**包括比特币、实现PoS/分片之前的以太坊、莱特币及其他类似区块链。这些区块链依赖于每个参与者运行全节点来验证每笔交易，因此保证了去中心化和安全性，但没有实现扩展性。

 

- **高区块链**包含DPoS链，但也涵盖许多其他区块链。这种区块链依赖于少量节点维持共识，数量通常介于10-100个，用户必须信任大多数节点。根据上文的定义，该解决方案实现了扩展性和安全性，但没有实现去中心化。

 

- **多链生态系统**一般指让区块链“向外扩展”，即让各种应用程序在不同的链上部署，并使用跨链通信协议进行通信。这实现了去中心化和扩展性，但并不安全，因为攻击者只需要控制其中一个链的大多数共识节点 (通常数量小于整个生态系统1%的节点数) 就可以造成破坏，还可能引起连锁反应，对在其他链中的应用程序造成巨大损害。

 

**分片技术能够同时实现上文提及的三个特性**。一个分片型区块链拥有以下特征：

 

- **可拓展性**：其处理的交易量远高于单一节点。

- **去中心化**：能够完全基于消费级笔记本电脑运行，无需依赖超级节点等。

- **安全性**：攻击者无法通过少数资源对系统发动局部攻击，只能尝试控制整个系统，以进行攻击。

本文接下来的部分将讨论分片型区块链如何实现这些优势。

 &lt;br/&gt;

# 随机抽样分片

 

最容易理解的分片版本是通过随机抽样进行分片。与以太坊生态系统中构建的分片形式相比，随机抽样分片的信任属性更弱，但以太坊分片应用的技术更简单。

 

下文阐述了分片的核心思想。假设有一个PoS区块链，其验证者数量非常多，例如10000位验证者，并且需要验证区块的数量非常庞大，比如100个区块。在下一组区块产生之前，没有一台计算机能够验证这100个区块。

 

为了解决这个问题，我们需要**以随机的方式，分配验证工作。**我们对验证者名单进行随机混洗，然后选取名单中前100个验证者来验证第一个区块，第二组100位验证者来验证第二个区块，以此类推。随机抽样分片通过这种方式来验证区块或执行其他任务，这些随机选出的验证者称为**委员会(committee)**。

 

![3](https://i.ibb.co/YhCtCpR/committees.png)

 

验证者验证一个区块后，会通过发布一个签名来证明。其他所有节点都只需要验证10000个签名，而不是验证100个完整区块，这样会减少很多工作量，特别是应用了BLS签名聚合技术之后。每个区块的广播无需通过同一个P2P网络，而是通过不同子网，节点只需加入自己负责或其他想要验证的区块相对应的子网。

 

想象一下，如果每个节点的算力增加2倍，会产生什么效果。对于每个节点，现在能够安全验证签名的数量增加了2倍，那么可以减低最小质押数量，让验证者的数量增加2倍，这样就可以产生200个委员会，而不是100个。所以，每个时隙的区块验证数量能够达到200个，而不是100个。此外，**每个区块容量**可以扩大2倍。因此，总体区块链容量会增加4倍。

 

我们可以通过数学术语来解释其背后的原理。根据大O符号 ([Big O notation](https://en.wikipedia.org/wiki/Big_O_notation))，我们用“O( C )”表示单个节点的算力。O ( C )代表传统区块链能够处理的区块大小。如上所述，分片链可以并行处理大小为O( C )的区块 (请记住，每个节点来验证每个区块的间接成本为O(1)，因为每个节点只需要验证固定数量的签名)。因此，每个区块容量为O ( C )，分片链总容量是O (C^2^)。这就是为什么这种类型的分片称为二次方分片 (quadratic sharding)，基于二次方分片的关键作用，我们认为从长远来看，分片是扩展区块链的最佳方式。

 

**人们经常会问这样一个问题：“随机组成100个委员会与分裂为100条独立区块链有什么不同？”**

 

其不同之处主要在于以下两个方面：

 

**1.随机抽样能防止攻击者将算力集中于某个分片中。**在一个100条区块链组成的多链生态系统中，攻击者只要拥有总质押量的0.5%就可以造成破坏，意味着可以针对其中一个区块链发起51%攻击。在一个分片链中，攻击者必须拥有总质押量的30-40%，才能达到相同目标，换言之，该链的安全性能共享给分片。当然，攻击者可以等到运气好的时候，偶然在单个分片中获得51%的算力，尽管拥有的质押量不到50%，但对于质押量远远低于51%的攻击者来说，发起攻击的难度呈指数型上升。如果质押量少于30%，几乎不可能发起攻击。

 

**2.若有一个分片出现了坏块，整个链会重组，以避免接受该区块，这称为紧密耦合性**。根据社会契约，即使单个分片中出现了一个坏块，也不能被主链接受，一旦发现坏块，分片会被拒绝，本文后面章节将介绍一些从技术上强制执行社会契约的方法。有了这一机制，从应用程序的角度来看，分片链享有完美安全性，合约A能够信任合约B，即使由于区块链受到攻击，合约B出现故障，并且回滚了整个历史，其中也包含合约A中由于合约B出现问题而受到影响的交易。

 

这两种差异确保分片为应用创建了一个环境，该环境保留了单链条件下的关键安全属性，而多链生态系统则无法实现这一点。

 &lt;br/&gt;

# 通过更好的安全模型改善分片

 

我完全同意比特币社区中的一种普遍看法，**那就是像比特币（或以太坊）等区块链并不完全依赖诚实的大多数假设**。如果对这些区块链展开51％攻击，则攻击者可以做一些具有破坏力的坏事，例如回滚或审查交易，但不能插入无效的交易。而且即使他这么做了，运行常规节点的用户也可以轻松检测到这种行为，因此，社区若希望通过分叉来剥夺攻击者的力量，以协调的方式抵御攻击，可以迅速采取行动。

 

**对于更为中心化的高TPS链，它们的主要弱点是缺乏这种额外安全性**。这种区块链没有，也不可能具有让普通用户运行节点的文化，因此主要节点和生态系统参与者可以更轻松地聚在一起，强制实行一项协议更改，即使社区非常不喜欢这个改动。更糟糕的是，在默认情况下，用户的节点会接受这项改动。一段时间后，用户会察觉到，但等到那时，这个更改已经成为既成事实，意味着其中主要的协调负担，即拒绝更改，将由用户承担，并且不得不做出痛苦的决定，回滚一天或更多的交易记录，而其他用户都以为这些记录已经得到了最终确认。

 

**理想情况下，我们希望采用一种分片形式，其验证方式能避免上文提到的51%信任假设，并保留传统区块链的高安全性，这种安全性只有在经过完全验证的情况下才能实现。而这正是我们过去几年的大部分研究成果。**

 

## 可扩展计算验证

 

我们可以将能够抵御51%攻击的可扩展验证问题分为两种情况：

 

- **验证计算**：检查某些计算是否正确完成，并假设你拥有完成该计算的所有输入数据

- **验证数据的可用性**：检查计算本身输入的数据是否以某种形式存储，在必要情况下以供下载；执行此检查时，无需实际下载所有输入数据，因为数据可能太大，无法每个区块都进行下载。

 

区块链中的区块验证同时涉及计算和数据可用性检查，即你需要确信区块中的交易有效，并且区块中的新状态根哈希是执行这些交易的正确执行结果，但是你还需要确信该区块中有足够多的数据实际得到发布，这样下载数据的用户可以计算状态，继续处理区块。第二点关系到一个非常微妙但重要的概念，即数据可用性问题 (data availability problem)。下文会对这个问题进行探讨。

 

可扩展计算验证相对容易实现，其中会运用两类技术：**欺诈证明及ZK-SNARKs**

 

![4](https://i.ibb.co/RHrhprm/tree.png)

 

**欺诈证明能够验证计算的同时，保证扩展性。**

 

以下是对两类技术的简单介绍：

 

- **欺诈证明 (fraud proof)** 是一个接受计算结果的系统，你可以要求有质押存款的人签署以下形式的消息：“我证明，如果使用输入X进行计算C，则会得到输出Y”。你会默认信任该消息，但其他有质押存款的人会有*挑战*计算结果的机会，他们可以签名一条消息，称“我不同意，输出结果应该为Z，而不是Y。”仅发起挑战后，所有节点才会进行运算。这两方中任何一方出错都会失去保证金，并且所有基于错误计算的运算都会重新进行。

- **ZK-SNARKs**是一种密码学证明形式，可以直接验证“输入X后，执行计算C，会输出Y”。在密码学层面，该验证机制是“可靠”的，因为如果输入X后，进行计算C，结果不等于Y，则无法通过计算生成有效性证明。即使运行计算C本身花费大量时间，该证明也可以很快得到验证。有关ZK-SNARK的更多数理解释，请参阅此文章。

 

基于欺诈证明的计算之所以具有扩展性，是因为在“通常情况下”，你不用运行复杂计算，只需验证单个签名。在特殊情况下，挑战出现后，你必须在链上验证计算，但是特殊情况很少发生，因为触发这种情况的成本非常昂贵，因为最初的声明者或挑战者之一会失去大量保证金。ZK-SNARKs概念更简单，它们只是通过成本更低的证明进行验证，从而代替计算，但其背后的数学原理却要复杂得多。

 

有一种半可扩展系统，它能以可扩展的形式验证计算，但需要每个节点验证所有数据。该系统若能通过一系列压缩技术，通过运算替换大部分数据，效率便可大大提高。这便是Rollup所做的事。

 



## 对数据可用性进行可扩展性验证难度更高

 

欺诈证明不能用于验证数据可用性。运算的欺诈证明基于这样一种条件，即原始声明一旦提交，运算的输入数据要在链上发布，因此，如果有人发起挑战，该挑战的执行与原始执行的“环境”完全一致。对于数据可用性检查，上述操作无法实现，因为如果要在链上发布，需要检查的数据量太多。因此，针对数据可用性，如何生成欺诈证明方案变成了一个关键问题，有人可以声称“数据X可用”，但不在链上发布，等待挑战者出现，发起挑战后，再向整个网络发布该数据，使得网络中的其他参与者认为挑战者是不正确的

 

下图的“渔夫困境”能够很好阐释其中道理：

 

![5](https://i.ibb.co/48DgnbP/fisherman-dilemma.png)

 

“渔夫困境”的核心理念涉及到两种情况，一种情况是V1是恶意发布者，但V2是一个诚实挑战者，而另一种情况是V1是诚实发布者，而V2是恶意挑战者。两种情况对于当时未尝试下载该特定数据的任何人来说都没有区别。当然，在可扩展的去中心化区块链中，每个个人节点只期望下载一小部分数据，因此只有一小部分节点能够了解分歧之外的所有状况。

 

由于不可能辨识出哪一方是正确的，所以也无法为数据可用性生成有效的欺诈证明解决方案。

 

**人们经常问道：“如果某些数据不可用怎么办？ZK-SNARK可以确保一切数据的有效性，但这还不够吗？”**

 

不幸的是，仅仅保证数据有效性还不足以维持区块链正常运行。原因是如果区块链能经过验证，但所有数据均不可用，则用户将无法更新数据，生成证明验证未来的区块。攻击者如果能生成一个区块，该区块虽然能够经过验证，但数据不可用，可以有效阻碍区块链运行。有的攻击者还可以不上传特定用户的帐户数据，直到该用户支付赎金为止，因此这不仅仅是一个活性问题。

 

有一些强有力的信息论观点认为这个问题是根本性问题，没有优良解决方案 (例如密码学累加器的应用)。有关详细信息，请参见本文。

 

**那么，如何在不下载的情况下，检查1 MB数据是否可用？这听起来无法实现！**

 

关键的解决方案是一种称为数据可用性采样 (data availability sampling) 的技术。该技术的工作方式如下：

 

1. 通过**纠删码工具**，将具有N段的数据分成为2N段的数据，因此只需任意N个数据段都可以恢复整个数据。

 

2. 用户如果要检查可用性，无需下载全部数据，而是随机选择区块中的位置 (常数，例如30)，并且仅当在区块中找到所有选定位置的数据时，才接受这个区块。

 

![6](https://i.ibb.co/vZs4mv5/sampling.png)

 

通过纠删码，我们能够将问题从“检查100%数据可用性” (即保证每条数据均可用) 转变为“检查50%数据可用性” (即至少一半数据可用)。随机抽样则解决了50%可用性问题。如果可用数据量少于50%，那么这两种检查手段中至少一个不可行，并且如果至少50％的数据可用，那么，尽管某些节点可能无法得知一个区块的可用性，但只需要一个诚实节点运行纠删码重构程序，就能恢复剩余50%的区块数据。因此，为了检查1 MB区块的可用性，你无需下载1 MB数据，只需下载几KB。这样每个区块都能接受数据可用性检查。有关如何使用P2P子网有效进行数据检查，请参见这篇文章

 

通过ZK-SNARK证明，数据纠删码的正确性也能够得到验证，然后利用默克尔树的分支来验证各个数据块。另一种验证方式是使用**多项式承诺 (polynomial commitment)**，例如Kate commitments (KZG承诺)，本质上，该承诺通过一个简单组件进行纠删编码，证明每个要素和正确性验证，这就是以太坊分片所使用的技术。

 

**总结：如何保证所有数据的正确性？**

 

假设有100个区块，并且你不想依赖委员会有效地验证所有区块的正确性。为了实现这个目标，我们需要进行以下措施：

 

- 每个客户端在每个区块上进行**数据可用性采样**，以验证每个区块中的数据是否可用，同时需要下载每个区块几KB的数据，即使区块的整体大小为MB或更大。仅在所有数据可用性挑战得到正确回应后，客户点才会接受区块。

- 数据可用性得到验证后，那么验证其正确性将变得更加容易。验证正确性要通过以下两种技术：
  - 我们可以使用**欺诈证明**，一些质押了保证金的参与者可以提供签名，证明每个区块的正确性。其他挑战者或者是渔夫节点会进行随机检查，并尝试完整处理整个区块。因为数据可用性已经经过检查，所以其他节点始终可以下载数据，并对任何特定区块进完全处理。如果发现无效区块，节点会发布一个所有人都可以验证的挑战。如果该区块被证明是坏块，则基于这一区块的所有区块都需要重新经过运算。
  - 我们可以使用ZK-SNARK技术。这样每个区块的正确性都能得到这种技术的验证。
  - 在以上两种情况中，无论区块有多大，每个客户端仅需要对区块进行少量验证工作。对于欺诈证明，区块偶尔需要在链上得到充分验证，但这种情况很少发生，因为就算发起一个挑战，成本也十分高昂。

- 在以上两种情况中，无论区块有多大，每个客户端仅需要对区块进行少量验证工作。对于欺诈证明，区块偶尔需要在链上得到充分验证，但这种情况很少发生，因为就算发起一个挑战，成本也十分高昂。

以上就是全文的总结！ 就以太坊分片而言，短期计划是让分片中的区块只包含数据。 也就是说，这些分片的作用纯粹是“数据可用性引擎”，Layer2 rollup的工作则是使用安全的数据空间，另外还会利用欺诈证明或ZK-SNARK技术，实现高交易吞吐量，同时维持安全性。但是，我们还可以创建一个内部系统，“原地”实现高吞吐执行，这是完全有可能实现的。

 &lt;br/&gt;

# 分片系统的关键特性是什么？有哪些权衡？



分片的主要目标是尽可能地继承传统非分片区块链最重要的安全属性，同时无需每个节点验证每笔交易。

分片基本可以满足这些要求。以下是传统区块链的特征：

- **无效区块无法添加到区块链中**，因为验证节点会检测到该区块是无效的，并忽略该区块。

- **数据不可用的区块无法添加到区块链中**，因为验证节点无法下载数据，并选择忽略。

 

以下是强安全性的分片区块链特征：

 

- **无效区块无法添加到区块链中**，原因如下：
  - 欺诈证明会迅速检测到该区块，并告知整个网络其为不正确区块，并重罚创建者。
  - 或者通过ZK-SNARK验证其正确性，因为无法为无效区块生成有效ZK-SNARK证明。

 

-  **数据不可用的区块无法添加到区块链中**，原因如下：
  - 如果区块可用数据量只有不到50%，几乎可以肯定的是，每个客户端至少有一次数据可用性抽样检查会失败，导致客户端拒绝该区块，
  - 如果至少有50％的区块数据可用，那么实际上整个区块数据都是可用的，因为仅需一个诚实节点即可恢复其余数据。

 

传统高TPS链因为没有分片，无法实现上述特征。而多链系统面临的问题在于，攻击者如果选择一条链进行攻击，就可以轻易取得控制，系统中的链也可以共享安全性，但是如果安全性低，那将与传统高TPS链没有区别，还会继承传统区块链的所有缺点，若安全性较高，共享安全性只是上述分片技术的一种更复杂的实现。



**侧链(sidechain)** 高度依赖于实现方式，如果它们共享矿工或验证者，通常它们容易面临传统高TPS链的弱点；如果它们不共享矿工或验证者，也会面对多链生态系统的弱点。分片链避免了这些问题。

 

**但是，分片系统也有一些隐患。尤其是在以下几个方面：**

 

- **若遭遇适应性敌手攻击，仅依赖于委员会的分片链难以应付，并且较难追责**。也就是说，如果攻击者能够实时入侵或选择关闭任何节点集合，那么只需要攻击少量节点即可破坏一个委员会。此外，攻击者无论是应变能力强，还是拥有质押总数的50％，如果破坏了一个委员会，整个网络只能确认少数参与攻击的节点，即该委员会中的节点，结果处罚金额只占少量质押。这又是另一个关键原因，解释为什么数据可用性采样要与欺诈证明或ZK-SNARK结合，成为随机采样技术的重要补充。

- **仅在线客户端数量足够多，能生成足够多数据可用性采样请求时**，这些重复响应总是构成至少50%的区块数据。在实践中，这意味着必须有几百个客户端在线，并且此数量越大，系统容量与单个节点容量的比率就越高。这是一个few-of-N信任模型——通常非常值得信赖，当然，它不如非分片链节点在数据可用性方面的0-of-N信任模式那么稳健。

- **如果分片链依赖于欺诈证明，那么它要基于时序假设**，即如果网络太慢，则在欺诈证明显示数据有误之前，节点可能已经敲定了某一个区块。幸运的是，如果你严格遵循规则，一旦发现了无效区块，就会回滚所有无效区块，该时段参数由用户设置，每个用户都能设置确认区块前的等待时间，如果他们不想等待太久可能会遭受损失，但更谨慎的用户也更加安全。即使如此，这一机制会削弱用户体验。使用ZK-SNARK验证有效性可以解决此问题。

- **需要传输的原始数据量大得多**，增加了极端网络条件下发生故障的风险。与大量数据相比，少量数据更容易传输，如果强大的政府试图审查区块链，也更容易安全隐藏。若区块链浏览器想要维持整个链的信息，则需要存储更多数据。

- 分片链依赖于分片式的P2P网络，并且每个单独P2P“子网”由于节点较少，更容易受到攻击。因为子网之间存在一些冗余，数据可用性采样的子网模型可以缓解这种情况，但其中仍然存在风险。

 

这些是数据验证需要关注的问题，尽管在我们看来，让更多应用程序在链上运行，而不是通过中心化layer 2服务，减少用户层的中心化，会比上述方面更值得注意。也就是说，实际上这些问题，特别是最后两个问题，会对增加分片链吞吐量造成真正限制，使其无法超过特定规模。二次方分片 (quadratic sharding) 只能实现有限二次方性。

 

顺便说一句，如果吞吐量过高，分片链的安全风险将日益增大，很大程度上，这也是放弃扩展至超二次分片的主要原因。使二次方分片保持其有限二次方性似乎是合适的中间值。

 &lt;br/&gt;

# 区块生产中心化，而验证分片化是否可行？

人们经常提出一种替代分片的方法，那就是使用类似于中心化高TPS链的结构，除此之外，利用数据可用性采样和分片以验证数据有效性和可用性。

 

这种方案能够改善既有的中心化高tps区块链，但仍远没有分片系统强大。其中一些原因如下：

 

1. **在高TPS链中，更难监测到区块生产者的审查行为**。监测审查行为需要满足以下任一：(i) 能够看到每笔交易，并且验证没有合理交易莫名其妙未进入，或者（ii）在区块生产者中使用1-of-N信任模型，并验证没有区块无法上链。在中心化高TPS链中，第一点不可能实现，而实现第二点更困难，因为节点数少，甚至1-of-N信任模型都更容易被破坏，并且 如果该链的区块时间对于DAS (数据可用性采样) 来说太快 (就像大多数中心化高TPS链那样)，则很难证明节点的区块不会仅仅因为它们的发布速度太慢而被拒绝。

 

2. 如果大多数区块生产者和生态系统成员试图强制执行一项协议更改，虽然这项更改不受欢迎，用户的客户端肯定会检测到更改，但是对于社区，拒绝更改、进行分叉的难度要大得多，因为需要运行成本高昂的新的高吞吐量节点，维持基于旧规则的区块链。

 

3. **在中心化基础设施中，外部攻击者更容易实施审查**。区块生产节点交易吞吐量高，非常易被检测到，关停这些节点也很容易。审查专用的高性能计算在政治上和后勤上比在单个用户的笔记本电脑上进行审查要容易得多。改：与追踪个人用户的笔记本电脑相比，对专用的高性能计算进行审查在逻辑和实践中都更加容易。

 

4. **高性能计算向中心化云服务转移会面对更大压力**，增加了风险，因为整个链将在1-3家公司的云服务中运行，如果许多区块生产者同时出现故障，会增大区块链崩溃的风险。验证节点都在个人硬件上运行的分片链不会那么容易受到这种攻击。

 

系统适当分片化后，能更加适合作为基础层。基于一个分片化的基础层，你始终能够通过构建Rollup的方式创建一个中心化的产品系统 (例如用于DeFi的具有同步可组合性的高吞吐量领域)。但是，如果基础层依赖于中心化区块生产，则无法基于此构建一个更加去中心化的 Layer2。

 
&lt;br/&gt;
&lt;br/&gt;

 ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 </content:encoded></item><item><title><![CDATA[以太坊核心开发者会议更新 003 ⛓]]></title><description><![CDATA[伦敦升级纳入的 EIP 和测试网的分叉区块已经确定了]]></description><link>https://www.ethereum.cn/Technology/allcoredev-update003</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/allcoredev-update003</guid><pubDate>Tue, 18 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [AllCoreDev Updates](https://hackmd.io/@timbeiko/acd/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2Facd-update-003)

&lt;br/&gt;

# 摘要 

- 我们正在发起核心开发者学徒计划，并已经发布了两个新的关于协议研发领域的提案征集；
- 伦敦升级前的开发者测试网 Baikal 已上线并在运行中。你可以用它来测试伦敦升级相关 EIP 对你的项目的影响；
- 伦敦升级纳入的 EIP 和测试网的分叉区块已经确定了。在一个测试网成功分叉后，我们会设主网的分叉区块；
- Rayonism 项目是一个重大成功——一个运行合并后以太坊客户端的测试网被搭建起来，可以在上面做交易，且实现区块敲定！

&lt;br/&gt;

# 拨款与提议征集 💰

在过去几个月里，我们一直致力于通过各种途径来吸纳贡献者参与以太坊协议的开发。以下是我们已经公布的项目：


- 核心开发者学徒计划 ([Core Developer Apprenticeship Program](https://blog.ethereum.org/2021/05/13/core-dev-apprenticeship/) )⚒️如果你是一个有经验的开发者，而且希望进入以太坊协议开发，这个计划是一个试验，我们将为开始做贡献几个月的参与者提供津贴。已经开始接受申请了！

- 代码库提案征集 ([Requests for Proposals Repository](https://github.com/ethereum/requests-for-proposals)) 📑以太坊基金会经常为专门的项目推出提案征集，并且这样做的频率越来越高。现在这些都集中在一个地方了。代码库仍然是分开的，但现在有两项提案征集：一个是用于[状态过期](https://github.com/ethereum/requests-for-proposals/blob/master/rfps/state-expiry-initial-implementation-and-spec-development.md)，一个是用于[扩展地址大小](https://github.com/ethereum/requests-for-proposals/blob/master/rfps/expand-address-to-32-bytes-implementation-and-spec-development.md)。如果一个外部团队可以带来重大影响的话，这是我们需要解决的两个重要问题。

这两个方法很新且仍然是实验性的。我们会跟进看什么最有效，我会在这里分享后续更新。

&lt;br/&gt;

# Baikal 测试网 🏝️



在过去几周里，客户端团队已经搭建起 Baikal 开发者测试网，用来测试这些我们将纳入伦敦的 EIP。这个网络现在已经上线了，且几乎每个客户端 ^[Nethermind、Geth,、Besu 和 TurboGeth 正与 Baikal 同步，OpenEthereum 很快会跟上。]都可以跟它同步。

这里可以查看这个网络的规范，还有 EthStates 页面和水龙头的链接。下面是它 Baikal 网络的实时截图：

![img](https://i.ibb.co/9t1bCbS/Baikal.png)


值得注意的是，先不说难度炸弹，在 Baikal 测试网上启动的 EIP 就是即将进入伦敦升级的 EIP。如果你一直等着体验 EIP-1559，或者[EIP-3529](https://eips.ethereum.org/EIPS/eip-3529) 对你的应用在 gas 开销上有什么样的影响，现在正是时候了！对 [JSON RPC 规范](https://github.com/ethereum/eth1.0-specs/pull/47)的更新目前在进行中，这次更新会对1559 后对返回区块和事务数据的调用行为进行定义。

我们还将向网络发送大量交易以对 1559 的`base fee`机制进行充分测试，还可能对网络里所有新操作码行为和 gas 开销变更进行模糊测试。

有几个项目要求有一个测试网来试验 1559，因此我们会让 Baikal 运行一段时间，至少直到公共测试网分叉以前，接下来.....

&lt;br/&gt;

# 伦敦升级

在[第113次的核心开发者会议](https://github.com/ethereum/pm/issues/309)里，我们几乎解决了伦敦网络升级最后的细节问题！🎉

首先，此次升级将由以下的 EIP 构成：


- [EIP-1559：Eth 1.0 区块链的费用市场变更](https://eips.ethereum.org/EIPS/eip-1559)
- [EIP-3198：BASEFEE 操作码](https://eips.ethereum.org/EIPS/eip-3198)
- [EIP-3554：难度炸弹延迟到2021年12月1日](https://eips.ethereum.org/EIPS/eip-3554)
- [EIP-3529：减少 gas 返还](https://eips.ethereum.org/EIPS/eip-3529)
- [EIP-3541：拒绝以 0xEF 字节开头的新合约](https://eips.ethereum.org/EIPS/eip-3541)


这个列表是最终的，所有的 EIP 都已经被移到 Last Call 一栏，所以现在是审核 EIP 的时候了，并确保你的项目做好了支持它们的准备。以下是最新的变更：

- EIP-1559 做了一些修改，以尽量减少 API 中的潜在损坏。特别是它不再修改区块头，用 `gasTarget` 代替 `gasLimit`。相反，它继续使用 `gasLimit`，并要求矿工手动在分叉区块把 gas limit 提高到 2 倍，以保持相同的网络吞吐量。这会使得客户端实现更简单，与矿工的沟通工作即将开展。
- EIP-3554 取代了之前的 [EIP-3238](https://eips.ethereum.org/EIPS/eip-3238)，把难度炸弹的启动时间从 2022 年的第二季度提前到今年 12 月，旨在它之前实现上海升级或合并。
- EIP-3529 是“返还移除”系列迭代的最后版本，从[EIP-3298](https://eips.ethereum.org/EIPS/eip-3298) 到 [EIP-3403](https://eips.ethereum.org/EIPS/eip-3403)，到最后的 3529。
- EIP-3541 是最后加入的 EIP。它本身不会实现什么，但为未来 [EIP-3540](https://eips.ethereum.org/EIPS/eip-3540) 的部署铺垫。


最后，多个测试网的分叉区块高度已经定了。以下是写进[规范](https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md)的内容：

&gt; Ropsten: 10399301 (2021.6.9)
&gt;
&gt; Goerli: 4979794 (2021.6.16)
&gt;
&gt; Rinkeby: 8813188 (2021.6.23)


一旦第一个测试网分叉成功，我们就会设主网的分叉区块高度。考虑到 EIP-1559 带来的变化之大，我们想要确保在硬编码到主网区块前，事情在测试网是顺利进行的。这样做的原因是如果测试网上出问题了，修改主网区块是很危险的。^[如果我们设置了一个主网区块 `X` ，然后因为测试网上出了问题而改为 `Y`，我们就有可能让部分网络错过升级，并在区块`X`出现分叉。]

## EIP-1559 UI 会议

在第一次伦敦升级基础设施会议的成功举行后，[Trent 将组织第二次会议](https://twitter.com/trent_vanepps/status/1393250203289927680)，专注讨论钱包对 EIP-1559 的支持。时间和日期还没定，但可能在五月24~28日举行。MetaMask、Argent、Status 和其他会参与，讨论在它们的潜力支持 EIP-1559 的最佳方法。如果你的项目夜需要添加对 1559 式事务的终端用户支持，请联系 Trent！

&lt;br/&gt;

# Nocturne 测试网🌔

在过去四周里，由 [@protolambda](https://twitter.com/protolambda) 领导的 eth1 和 eth2 客户端团队一直在合作，构建“合并”后以太坊网络的原型。简言之，现在的 eth1 客户端会变成系统的执行引擎，负责处理交易和构建区块，而 eth2 客户端会变成共识引擎，负责交易排序和敲定。

在 Scaling Ethereum 黑客松期间，总共有 7 个客户端团队一起工作，使这个测试网运行起来，最后的成果是一个可运行的合并测试网，Nocturne。

这个网络能够处理 EVM 事务和使用信标链来请求和最终敲定区块，同时任何的执行与共识引擎组合都是可行的。

![img](https://i.ibb.co/W0QbpP1/Nocturne.png)


这是迈向“合并”的第一步！还有无数技术细节需要解决，但 [Rayonism](https://rayonism.io/)项目验证了合并后客户端的总体架构是可行的。

在接下来的几个月里，更多的测试基础设施将倍构建，且真正的 PoW -&gt; PoS 过渡规范会被确定下来。在伦敦和 Altair 升级部署时，“合并”方面的工作会稍微慢下来，但在这些升级上线后，它会成为执行和共识团队的工作重点。

虽然现在确定日期还为时过早，但我们现在可以有把握地说，结束以太坊工作量证明已经在望了！

------

 感谢阅读！下一次更新预计大约在一个月后，即伦敦被部署到测试网之后。

------

发布于2021年 5 月 17 日。

</content:encoded></item><item><title><![CDATA[以太七日谈2021/5/17]]></title><description><![CDATA[“合并”的第二个测试网；Arbitrum 即将上线主网]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-17/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-17/</guid><pubDate>Mon, 17 May 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/42VZXpR/cover25-1.png)
# Eth2

**“合并“的第二个开发者测试网上线**

5 月 12 日核心开发者 [@protolambda](https://twitter.com/protolambda) 发推宣布”合并“的第二个开发者测试网 Nocturne 上线，与上一个测试网 Steklo 一样，结合了 4 个共识层客户端 (Nimbus、Lighthouse、Prysm、Teku) 和 3 个执行层客户端 (Nethermind、Go-ethereum、Besu) 。不同于 Steklo 只运行了数小时就被关闭，Nocturne 上线后实现了区块敲定，并一直运行到现在。

![Image](https://i.ibb.co/jgrP9Cs/Nocturne1.jpg)



![Image](https://i.ibb.co/TvZWpC0/Nocturne2.jpg)

此次黑客松关于”合并“的 Rayonism 项目以 Nocturne 结束，请注意，此次测试网并不包括 PoW-&gt; PoS 过渡的内容，也不处理历史状态的同步，这些内容都需要在未来解决。之后的时间，核心开发者的会先专注于 Eth2 的 Altair 升级和 Eth1 的伦敦升级，并对”合并“规范进行产品化。

对”合并“规范的产品化内容包括：

- 完善共识层的 API (把它从用户的 JSON-RPC 分离)
- 实现最新的分叉过渡方法逻辑
- 把工作重新建立在 Altair 或伦敦升级的基础上

接下来构建的“合并”原型会往以下方向开发：

- 测试验证者提款
- 实验性的分片原型 (Teku 和 Prysm 正在实现规范)

来源：https://twitter.com/protolambda/status/1392448050191347716?s=20

&lt;br/&gt;

# Eth1

## 伦敦升级

5 月 14 日的 AllCoreDev 会议对伦敦升级的开发者测试网 Baikal、相关 EIP、JSON RPC 规范里的命名、区块高度等进行了讨论。

首先是各客户端在 Baikal 上的进度，Netthermind、Geth、Turbo-Geth 和 Besu 都开始与 Baikal 同步了，OpenEthereum 稍微落后一点，在进行最后 EIP 的合并，完成后才能加入网络。开发者同意这个开发者测试网会维持运行一段时间，直到推出面对用户的测试网为止。

读者如果想体验和测试，可以前往 github 的规范文档：https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/baikal.md



然后，会议同意把 EIP-3541 纳入伦敦升级，这份 EIP 旨在拒绝以 `0xEF` 开头的合约的部署，这个变化很小，但其实是为 EIP-3540 引入 EVM Object Format (EOF) 作铺垫。

EIP-3540：https://eips.ethereum.org/EIPS/eip-3540

EIP-3541：https://eips.ethereum.org/EIPS/eip-3541



关于在伦敦升级推迟难度炸弹，4 月 23 日进行的第111次 AllCoreDev 决定把难度炸弹爆炸时间从原定的 2022 年第二季度提早到今年 12 月，因此纳入伦敦升级的 EIP 从 3238 改为了 3554。 



5 月 8  日举行的伦敦升级基础设施会议遗留下了 JSON RPC 多个字段命名问题，在这次的 AllCoreDev 得到了解决，最终决定用`baseFeePerGas` 来表示消耗的每单位 gas 的基本费用，`maxFeePerGas` 表示 &quot;fee cap (用户可接受的每单位 gas 的最高价格)&quot;，以及 `maxPriorityFeePerGas` 表示每单位 gas 的小费。



会议还决定了测试网的伦敦升级区块高度和时间，如下：

![Image](https://i.ibb.co/vQYjmZs/London-testnet-block-number.png)

主网的伦敦升级时间仍然暂定是 7 月 14 日，但想等到第一个测试网分叉成功后在定主网的区块高度。



会议关于伦敦升级的最后一个话题是客户端如何处理 gas 价格不断变化的交易，开发者 Ansgar Dietrichs 写了文章，客户端团队将对其进行讨论。

文章：https://hackmd.io/@adietrichs/1559-transaction-sorting-part2

来源：https://twitter.com/TimBeiko/status/1393230961890906115?s=20

&lt;br/&gt;

## EIP-1559

@trent_vanepps 将组织一个集中讨论 EIP-1559 用户界面问题的会议，与会的有多个钱包服务商，包括 MetaMask、Status 和 Argent，时间大概在 5 月 24—28 日间。这个会议属于“伦敦/1559生态准备”系列。

来源：https://twitter.com/trent_vanepps/status/1393250203289927680?s=20



**EIP-1559 会使得以太坊因为 ETH 通缩而无法运行吗？**

近日，Arther Hayes 发表了文章“ 恐惧是心智杀手 ([Fear is the mindkiller](https://blog.bitmex.com/fear-is-the-mindkiller/))”，文章提到以太坊实施 EIP-1559 后，“随着使用量增大，gas 费会呈指数增长，这些费用会被烧毁，很快以太坊的货币增发计划会变成通缩......以致没有足够的 ETH 提供给以太坊系统运行。”

![Image](https://i.ibb.co/WxpCxWt/1559.png)

这点看法在以太坊社区引起广泛讨论，曾写过” EIP-1559 的经济学分析“的哥伦比亚大学教授 Tim Roughgarden 也对这个看法进行了回复，以下为他的回复的翻译：

对这两者的区分非常重要：1. gas 的市场清算价 (以USD 计价)；2. ETH 的市场清算价 (也是以USD计价)

如果对 gas 的需求保持不变，那么 gas 的市场清算价 (以USD 计价) 保持不变，与 ETH 的价格无关。

因此，在对 gas 的需求不变的情况下，ETH 的价格翻倍，使得以 ETH 计价的市场清算价格减半。例如，你现在看到的 gas 价格是 200 gwei，然后 ETH 价格翻倍 (需求保持不变)，你会预期 gas 价格变成 100 gwei。

当然两个市场间可能会有相关性 (比如出于心理因素，对 ETH 的需求增加会使得对 gas 的需求也增加)。更好地了解两者的关联性有多强，和在未来会有多强是非常有意思的。

重点在于，首先，大家会预期 ETH 供应减少 (比如减少一半) 会提高 ETH 的价格（翻倍），同时保持对 gas 的需求不变的话，gas 价格 (当以 gwei 来计价时) 会减少（一半）。

总结：我不认为减少 ETH 供应会形成对网络运作的威胁。（除非到了 1 wei 变得价值 100 美元，我们可能会出现问题，但我不觉得会有那么一天。）

来源：https://twitter.com/algo_class/status/1393221114017501190?s=20

&lt;br/&gt;

# Layer2

**Arbitrum 即将上线主网**

Arbitrum Rollup 于 5 月 14 日推出了最新的测试网，该测试网添加了 Sequencer (排序者)，并将于 5 月 28 日面向开发者们开放主网版本。

此前，Arbitrum 发布了候选测试网 V4，该测试网未包含 Sequencer。这意味着交易不会得到“即时响应”，并与以太坊主网一样有相同的延迟。原本的计划是先在主网发布不包含 Sequencer 的初始版本，并在之后的升级版本中添加 Sequencer。但基于 beta 测试者的反馈，Arbitrum 决定在主网上线前增加 Sequencer 这一功能。在上线主网前的接下来几周，Arbitrum 将发布公告，宣布与其合作的项目 (包括基础设施和 DApps)。

来源：https://medium.com/offchainlabs/wen-arbitrum-634969c14713

&lt;br/&gt;

**可视化分析扩容解决方案的锁仓量**

由 Stakerwat.ch 制作的网站 ethhole.link 可视化地分析了以太坊的 L2 以及其他侧链的锁仓数据。

![ethhole](https://i.ibb.co/kMmv1NN/ethhole.png)

&lt;center&gt;cr：ETH Hole&lt;/center&gt;

&lt;br/&gt;

**Infura 和 Truffle 宣布支持扩容解决方案 Polygon**

ConsenSys 旗下的开发工具 Infura 和 Truffle 于 5 月 12 日宣布支持 Polygon (以太坊扩容解决方案)，也就是说开发者可以在 Polygon 上用 Infura 和 Truffle 构建、部署、测试以及运行应用程序所需的所有工具。
来源：https://consensys.net/blog/press-release/infura-and-truffle-now-support-polygon/

&lt;br/&gt;

# 生态

**核心开发者学徒计划即将启动**

以太坊核心开发者 Piper Merriam 于 5 月 13 日公布了“核心开发者学徒计划” (Core Developer Apprenticeship Program)，让更多人有机会参与以太坊核心协议的开发。该计划由以太坊基金会支持，以下为该计划的细节：

- 申请时间截至 5 月 31 日，申请：https://notes.ethereum.org/RamEyPIeRQm0Hs8TrWU-8g
- 学徒计划时间：6 月中旬至 9 月中旬
- 入选者将被分成两人一组，共同确认并推进一个项目，以改善以太坊核心协议
- 参与者可以直接深入到跨组织和跨团队的核心开发者社区中

参与者可以在这个过程中深入学习以太坊协议的知识，并获得协议开发的第一手经验。

来源：https://blog.ethereum.org/2021/05/13/core-dev-apprenticeship/

&lt;br/&gt;

**Uniswap V2 LP 交易费超过比特币网络交易费**

Uniswap 创始人 [Hayden Adams ](https://twitter.com/haydenzadams) 发推称，根据 cryptofees.info 的数据显示，Uniswap V2 的 LP 交易费的七天平均值已超过比特币网络交易费的七天平均值。

![uniswap](https://i.ibb.co/z75H6w6/uniswap.jpg)

&lt;center&gt;cr: Hayden Adams 的推文&lt;/center&gt;

&lt;br/&gt;

**SHIB 代币 Vitalik 的瓜**

上周，加密圈发生了一件令人津津乐道的事：以太坊联合创始人 Vitalik Buterin 向印度新冠加密救济基金会等其他慈善机构捐赠了超过 10 亿美元。而这一切都源自于前段时间席卷加密世界的动物 meme 代币。

以下内容为 The Block 研究员 [Igor Igamberdiev](https://twitter.com/FrankResearcher) 于 5 月 11 日在推特的总结：

在过去几天，meme 代币 SHIB 成为了 gas 费高居不下的主要原因，并且一些早期的 SHIB 持有者获得了巨大的利润。

自 SHIB 发行以来，49.5% 的供应量被添加至 Uniswap 中，随后该池的 LP token 以及剩余的 SHIB 代币发送至 Vitalik Buterin 的钱包中。也就是说，Vitalik 无需出售，就可以轻易地撤出资金池中 93% 的流动性而不会产生任何价格影响 (1.18亿美元)。

![v神1](https://i.ibb.co/m49t7bW/v-1.jpg)



按照代币持有者数量排列的前 50 名账面利润从 500 万美元到 25 亿美元不等，平均账面利润为 6500 万美元。

![v神2](https://i.ibb.co/BZ0QLTy/v-2.jpg)

看一下 Uniswap V2 中流动性最大的 SHIB-WETH 池，其成交量从 5 月 7 日开始增长，并在第二天达到顶峰，但没有明显的冲销交易。套利交易和三明治机器人交易不超过交易量的三分之一。



![v神3](https://i.ibb.co/MsSLwbm/v-3.jpg)



与 Uniswap 路由交互的最大一笔交易和中心化交易所有关。有趣的是，5 月 8 日 Coinbase Wallet 的用户也加入了这场狂欢，开始购买 SHIB。


![v神4](https://i.ibb.co/sVdvxBy/v-4.jpg)


在过去三天里，与 SHIB 代币合约交互的交易占了 10% 以上的区块 gas 费。下图显示，大家对 SHIB 的兴趣开始消退，然币安上线 SHIB 又燃起了大家的热情。


![v神5](https://i.ibb.co/rv5rjCD/v-5.jpg)


推特来源：https://twitter.com/FrankResearcher/status/1392040055133384705



而 5 月 13 日，Vitalik 出售了其钱包中的 meme 代币，包括 SHIB、AKITA、ELON，并将换取的大量 ETH 和一些 meme 代币捐助给了慈善机构，包括 Givewell、印度新冠加密救济基金会 (捐赠了 50 万亿 SHIB)、Methuselah 基金会、Machine Intelligence Research Institute、Gitcoin multisg 等。

来源：https://www.forbes.com/sites/ninabambysheva/2021/05/12/ethereums-co-founder-vitalik-buterin-donates-over-1-billion-to-india-covid-relief-fund-and-other-charities/?sh=164f9d1a6548

&quot;就算是 Vitalik 也无法逃离黑暗森林里的怪物。推特并不是唯一一个监视 Vitalik 钱包的狂欢之地，与以往一样，机器人随时准备从他的待处理交易中获取 MEV。” @Robert Miller 在一条推文中总结了 Vitalik 在出售 meme 代币时的交易如何被“夹”，以及 Vitalik 如何通过 Archer Swap 使用 Flashbots 继续出售代币。

推文：https://twitter.com/bertcmiller/status/1392572970728574976

5 月 17 日，这场狂欢以 Vitalik 销毁 410 万亿枚 SHIB (约占 SHIB 总供应量的 41%) 暂时告一段落。

交易哈希：https://etherscan.io/tx/0x125714bb4db48757007fff2671b37637bbfd6d47b3a4757ebbd0c5222984f905

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[UNI 应该成为一种预言机代币]]></title><description><![CDATA[Vitalik 提议 UNI 成为预言机代币，实现治理最小化]]></description><link>https://www.ethereum.cn/DeFi/uni-should-become-an-oracle-token</link><guid isPermaLink="false">https://www.ethereum.cn/DeFi/uni-should-become-an-oracle-token</guid><pubDate>Fri, 14 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [https://gov.uniswap.org](https://gov.uniswap.org/t/uni-should-become-an-oracle-token/11988)

&lt;br/&gt;


对于一个成功的 DeFi 生态系统来说，一个非常重要的组成部分就是高度安全的价格预言机。算法稳定币(如，DAI、RAI、LQTY)、任何类型的合成资产、抵押贷款以及其他许多类型的项目都依赖于价格预言机。Uniswap 确实为其 ERC20 代币兑换提供了一个价格预言机，但这不是一个真正的预言机，因为它不为外部世界的任何东西提供价格流。这产生了一个问题：算法稳定币依赖于 ETH/USD 的价格预言机才能正常运行，并且它们尤其需要 USD 作为链下法币资产，而不是 USD 在任何链上实例的价格预言机 。类似地，合成资产也需要映射资产价格 (以 ETH 计价) 的预言机。


我提议，Uniswap 和 UNI 代币能够介入并提供这样的预言机 (例如，仿照 Augur 或 UMA 的设计)，专门用来提供一种价格数据，这些数据足够庞大，使得黑客的操纵和攻击成本极高。

&lt;br/&gt;

# 本文概要


- 稳定币需要一个 ETH/USD 的价格预言机 (见上文)

- 使用 ETH/USDC 价格预言这个方法并不长久

- Chainlink 是个很不错的项目，但是有一个简单的替代方案，专门用于高价值、接受高延迟的用例

- UNI 可以很好地成为此类预言机代币

- 更广泛地讲，以太坊 L1 需要保持治理最小化，但 L2 应该更具野心，而 UNI 可以成为其中一部分

&lt;br/&gt;

# 使用 ETH/USDC 价格预言这个方法并不长久


算法稳定币的目标是：通过摆脱对“法币世界”的依赖，实现最大程度上的抗审查和鲁棒性。如果这个目标对稳定币用户而言并不重要，那么他们可以通过直接使用 USDC 来避免算法稳定币的技术风险。如果这个目标对稳定币用户来说很重要，那么他们不仅要避免对法币市场的直接依赖，还要避免间接依赖。用 ETH/USDC 价格流代替 ETH/USD 价格流并不能实现该目标，因为这样的系统最终仍然依赖于 USDC，其能够正常运行的前提是 USDC 仍然存在且可以自由交易。


取多个 ETH/稳定币 (如 USDC、GUSD、USDT) 汇率的中位数充其量只是一个小小的改进，因为传统金融系统是相当协调的，并且很容易对所有以传统资产作背书的稳定币变得不那么友好。因此，如果我们想要拥有上文所说的算法稳定币，就需要一个提供 ETH/USD 的预言机。

&lt;br/&gt;

# Chainlink 是个很不错的项目，但是有一个简单的替代方案，专门用于高价值、接受高延迟的用例

目前，大多数“治理最小化的稳定币”都使用 Chainlink 作为它们的预言机。Chainlink 对于许多预言机用例来说是非常有价值的，但它也是一个具有许多特性的复杂系统。它的激励措施并不像 Augur 那样透明；尤其是没有一种自动的机制，可以使得提供错误答案的参与者受到惩罚。


就像我们希望用其他稳定币替代品来对 MakerDAO 的功能进行补充一样，如 [RAI ](https://reflexer.finance/) (声明一下：我同时持有 MKR 和 Rai 的 FLX)，这类稳定币追求治理最小化，因而以太坊生态系统将更加强韧。同样地，我们也希望用治理最小化的替代方案来对 Chainlink 进行补充，该替代方案更侧重于优化激励措施和最大程度地提高攻击成本。一个倾向于鲁棒性的预言机应该以这些性能为目标，即便代价是较长的解析时间以及仅限于某个特定类型的数据 (高流动性资产的价格指数)。

&lt;br/&gt;

# 可以很好地成为此类预言机代币

去中心化价格预言机 (如果它们想要避免对于身份层的依赖) 至少需要有一种可以抵御女巫攻击的代币。代币持有者会被要求提供价格信息，并且通常会引入一种经济机制 (提供多数答案的人会获得奖励，而提供少数答案的人会受到惩罚)。

如果大多数代币持有者作恶，他们可以成功地提供一个错误答案。这时，将取决于代币少数持有者来创建系统的分叉，在这个分叉中，攻击者的代币会清零，并说服社区在分叉链上继续生产区块。也就是说，这类攻击带来的后果是，**代币的总市值将减半**，还要考虑其他的情况 —— 会有一些非常懒的代币持有者不作为，尽管会丢失代币也不参与投票。

因此，对于 DeFi 项目来说，一个基于代币的去中心化预言机想要实现稳健发展，就必须要有一个市值庞大的的代币。预言机的效率并不重要：低效的预言机总是可以通过一种博弈机制增强，只有当一方提供某个价值数据且另一方不同意时，这种博弈才会开始生效。另一方面，攻击成本需要达到最大化，因此市值是关键。而市值最高的两个以太坊项目代币是 LINK 和 UNI。

对 Uniswap 来说，支持预言机不仅仅是一种无私之举；事实上，Uniswap 能够从一个更加强健稳定的稳定币生态系统中获益。Uniswap V3 进行了大量优化，以实现稳定币与稳定币之间的兑换交易的超高资本效率，并且很可能从这些交易中获得高手续费的利润。如果链上开始出现大量的、强健的合成资产，那么这对于 Uniswap 来说就更加有利了。

&lt;br/&gt;

# 更广泛地讲，以太坊 L1 需要保持治理最小化，但 L2 应该更具野心，而 UNI 可以成为其中一部分

与之前的区块链平台覆盖的范围相比，以太坊生态旨在成为能够容纳更多应用的基础层。我们的目标不仅仅是支持基本资产的持有和转让，还包括一个去中心化金融 (DeFi) 生态系统，以及越来越多的去中心化治理 (DeGov) 生态系统。在以太坊的生态系统中，对公共事业的赞助需求也很庞大。

想要实现这一更加远大的愿景，我们需要的东西不仅仅是“区块链”。可以说，我们需要朝着“[加密王国](https://www.city-journal.org/technological-developments-new-systems-of-governance)”这个方向前进，区块链生态系统提供的服务将不仅是安全性，还有预言机、争议解决、公共事业赞助、身份认证等等。但为了让以太坊成为一个稳定的平台，区块链基础层需要秉持治理最小化的原则。治理最小化能够让用户相信，他们关系的应用程序不会受到干扰，基础层也不会因为添加有争议的功能，而引起共识冲突和分裂。

因此，这些服务某种程度上需要在 Layer2 上提供。比如，Optimism 在其 rollups 上进行 [MEV 拍卖](https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788)以资助整个生态系统的公共事业。而 Uniswap 作为以太坊生态系统里的关键的去中心化交易所，也承担着更多的责任 (包括提供价格预言机)，这是迈向加密王国方向的一个不可或缺的步骤。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[EIP-3529: 减少 gas 返还]]></title><description><![CDATA[了解已被纳入伦敦升级的 EIP-3529 将如何通过修改 gas 返还来优化 EVM]]></description><link>https://www.ethereum.cn/Eth1x/eip-3529</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1x/eip-3529</guid><pubDate>Thu, 13 May 2021 00:00:00 GMT</pubDate><content:encoded>来源：[eips.ethereum.org](https://eips.ethereum.org/EIPS/eip-3529)

&lt;br/&gt;

# 简单总结

移除 SELFDESTRUCT 的 gas 返还，减少 SSTORE 的 gas 返还到一个较低水平，使得返还的量仍然相当大，但不会像现在高到可以被利用的地步。

&lt;br/&gt;

# 原因


 最初引入 SSTORE 和 SELFDESTRUCT 的 gas 返还是为了鼓励应用开发者写应用时能践行“良好的状态卫生”，清理不再需要的存储槽与合约。但是，结果证明这项技术带来的效率远低于预期，gas 返还还带来多项未预料到的有害后果：

- gas 返还导致 GASToken 的出现。GasToken 有益于把 gas 空间从低费用阶段转移到高费用阶段，但它也对网络有坏处，尤其是加剧状态大小膨胀 (由于状态槽被有效用作“电池”来积攒 gas) 和低效地堵塞区块链 gas 使用。
- gas 返还加剧区块大小变化。一个区块实际消耗的 gas 量的理论最大值是接近名义上的 gas limit (因为返还会增加同一区块里后面交易的 gas 空间，尽管返还的 gas 最多是该笔交易消耗 gas 的50%)。这一点不是致命的，但影响还是相当不好，特别是返还可以被用来维持比 EIP-1559 使用两倍 gas limit 更长的峰期。

&lt;br/&gt;

# 规范

## 参数

| 常量             |  值   |
| ------------------------- | ---------- |
| `FORK_BLOCK`              |  待决定 |
| `NEW_MAX_REFUND_QUOTIENT` | 5          |


对于存在`block.number &gt;= FORK_BLOCK`的区块，需要作下列变更。

1. 移除 `SELFDESTRUCT` 的返还
2. 用 `SSTORE_RESET_GAS + ACCESS_LIST_STORAGE_KEY_COST` ([EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) + [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) 合力下的 4,800 gas) 取代 `SSTORE_CLEARS_SCHEDULE` （ [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200) 定义的）
3. 把交易后的最大返还 gas 量减少到 `gas_used // NEW_MAX_REFUND_QUOTIENT`

&lt;br/&gt;

# 原理阐释


 [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200#specification) 引入了返还的三种情况：

1. 如果原始值是非零，新值是零，添加 `SSTORE_CLEARS_SCHEDULE` （当前是15,000）的 gas 量到返还计算器
2. 如果原始值是零，当前值是非零，新值为零，添加 `SSTORE_SET_GAS - SLOAD_GAS` (当前是 19,900) 的 gas 量到返还计算器
3. 如果原始值是非零，当前值是一个不一样的非零值，新值等于原始值，添加 `SSTORE_RESET_GAS - SLOAD_GAS` （当前是 4,900）的 gas 到返还计算器


在这三种情况里，只有 (1) 会启动 gastoken 且允许区块在执行上消耗超过区块 gas limit 的 gas。(2) 不具有这个特点，因为要获得 19,900 的 gas 返还，同一个存储槽必须在之前从零改为非零，这需要消耗 20,000 gas。无法从一个存储槽获得 gas 并用它来编辑另一个存储槽，意味着它不能被用作 gas token。另外，获得返还需要恢复存储的写入和扩展，使得返还的 gas 不会增加客户端处理区块的工作量。(3) 是相似的：只有当同一个存储槽在之前已经消耗了 5,000 gas 的时候才能获得 4,900 gas 返还。


此 EIP 处理第一种情况。我们可以通过使用一个相似的“配对” 变元来确定在何种条件下 gastoken 是不可用的 (例如，你不可以在一个存储槽里获得比你的输入更多的 gas) ，将每一笔返还映射到同一笔交易的同一个存储槽的前一笔支出。当一个存储槽的原始值是非零值，如果它被改为 0 时，有两个可能性：

1. 这可能是存储槽第一次被设置为零。在这种情况下，我们可以把这个时间与 `SSTORE_RESET_GAS + ACCESS_LIST_STORAGE_KEY_COST` 第一次读取和编辑存储槽的最小开销进行配对。
2. 这可能是存储槽第二次被设置为零或被设置为零后的情况。在这种情况下，我们可以把这个事件与最近一次数值从零改为其他值，且 `SSTORE_CLEARS_SCHEDULE` 的 gas 从返还中被移除的变元进行配对。


对于第二次或之后的情况，`SSTORE_CLEARS_SCHEDULE`  的值是什么并不重要，因为那个 gas 大小的返还是与相同大小的*清除*返还相匹配的。这就只剩下第一种情况了。为了确保存储槽上消耗的 gas 总量为正，我们需要 `SSTORE_CLEARS_SCHEDULE &lt;= SSTORE_RESET_GAS + ACCESS_LIST_STORAGE_KEY_COST`。因此，此 EIP 只把 `SSTORE_CLEARS_SCHEDULE`减少到那两项开销的总和。

此 EIP 的另一个原因是，清除还未被读取的数据 (通常是“无用”数据) 是不会有净返还的，但清除被读取过的数据 (通常是“有用”数据) 还继续会有净返还。

&lt;br/&gt;

# 向后兼容性


返还当前仅在交易执行后应用，因此无法对执行中任何特定可用的调用框架造成影响。因此，清除它们将不会破坏任何代码的执行，尽管它将使得一些应用变得经济上不可行。

Gas token 会变得没有价值。DeFi 套利机器人今天经常不是使用已有的 gas token 方案就是一个定制的，以减少链上的开销，这得益于重写它们的代码以清除对那些不再有用的 gas 存储机制的调用。

然而，完全保留在`new = original = 0 != current`  里的返还，以及保留在其他  `nonzero -&gt; zero`情况里的一些返还能确保一些接收 (和值得) 更好的 gas 开销待遇的关键用例能持续获益。例如，`zero -&gt; nonzero -&gt; zero` 的存储设置模式保持只需消耗大约 100 gas。这些模式包括两个重要实例：

- 反重入锁 (通常在一个子调用开始前从 0 变为 1，当子调用结束时再变回 0)
- ERC20 授权与发送 (当代币转移得到授权，&quot;授权值&quot;会从零变成非零，然后在代币转移过程中恢复到零)

## 对清除存储激励的影响

对之前关于移除返还的 EIP ([EIP-3298](https://eips.ethereum.org/EIPS/eip-3298) 和 [EIP-3403](https://eips.ethereum.org/EIPS/eip-3403)) 的批评是这些 EIP 完全消除了把一个值设为零的激励，相当于鼓励用户不要完全清除一个存储槽 (即使他们想这么做)，哪怕他们想再次使用该存储槽的几率是最小的。

举一个例子，如果你有一个单位的 ERC20 代币，且你要送出或卖出你的所有余额，你可以只给出 0.999999 个单位，把剩余的留下。如果你想在未来重新放入更多该种代币到同一个账户，你仅需要为 SSTORE 支付 5,000 gas (2,100用于读取 + 2,900用于非零变为非零的设置) 而不是22,100 (20,000 用于零到非零值的设置)。今天，这部分的 gas 会被清除存储获得的 15,000 gas 返还所抵消，因此，如果你有超过 `15000 / 17100 = 87.7%` 的把握会再使用这个存储槽，你才会有动力这样做；按照 EIP 3298 或 EIP 3403 的设定，抵消激励这部分是不存在的，因此，如果你再次使用该存储槽的可能性是大于 0 的，设为非零值会更好。

对于剩下的 4,800 gas 返还，如果你觉得再次使用某个存储槽的几率大于 `4800 / 17100 = 28.1%` ，你才有保持该存储槽为非零的动力。这并不是完美的，但它可能高于一般人在清除了他们的全部余额后在同一个地址重新获得同一代币的几率。

gas 返还的上限是所消耗 gas 量的1/5，这意味着这种返还仅够用于增加处理一个区块所需的存储写入操作量最多为25%，限制了利用这个机制进行以存储写入为重点的拒绝服务攻击。

&lt;br/&gt;

# 测试用例

## EIP-2929 的 gas 开销

注意，“热”和“冷”存储槽之间是有区别的。这个表展示了 [EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) 下的值，假定所有变动过的存储槽都已经是“热”状态 (区别是一次性消耗 2,100 gas)。

|  代码                          |  消耗了的 gas |  返还的gas | 原始的 |  第一次 |  第二次 |  第三次 | （返还后的）有效 gas |
| ---------------------------------- | --------------------- | ---------------- | -------------- | ---------- | ---------- | ---------- | ------------------------------------------------ |
| `0x60006000556000600055`           | 212                   | 0                | 0              | 0          | 0          |            | 212                                              |
| `0x60006000556001600055`           | 20112                 | 0                | 0              | 0          | 1          |            | 20112                                            |
| `0x60016000556000600055`           | 20112                 | 19900            | 0              | 1          | 0          |            | 212                                              |
| `0x60016000556002600055`           | 20112                 | 0                | 0              | 1          | 2          |            | 20112                                            |
| `0x60016000556001600055`           | 20112                 | 0                | 0              | 1          | 1          |            | 20112                                            |
| `0x60006000556000600055`           | 3012                  | 15000            | 1              | 0          | 0          |            | -11988                                           |
| `0x60006000556001600055`           | 3012                  | 2800             | 1              | 0          | 1          |            | 212                                              |
| `0x60006000556002600055`           | 3012                  | 0                | 1              | 0          | 2          |            | 3012                                             |
| `0x60026000556000600055`           | 3012                  | 15000            | 1              | 2          | 0          |            | -11988                                           |
| `0x60026000556003600055`           | 3012                  | 0                | 1              | 2          | 3          |            | 3012                                             |
| `0x60026000556001600055`           | 3012                  | 2800             | 1              | 2          | 1          |            | 212                                              |
| `0x60026000556002600055`           | 3012                  | 0                | 1              | 2          | 2          |            | 3012                                             |
| `0x60016000556000600055`           | 3012                  | 15000            | 1              | 1          | 0          |            | -11988                                           |
| `0x60016000556002600055`           | 3012                  | 0                | 1              | 1          | 2          |            | 3012                                             |
| `0x60016000556001600055`           | 212                   | 0                | 1              | 1          | 1          |            | 212                                              |
| `0x600160005560006000556001600055` | 40118                 | 19900            | 0              | 1          | 0          | 1          | 20218                                            |
| `0x600060005560016000556000600055` | 5918                  | 17800            | 1              | 0          | 1          | 0          | -11882                                           |

## 减少了返还后

如果通过把 SSTORE_CLEARS_SCHEDULE 从 15,000 变为 4,800 （以及去除 selfdestruct 的返还) ，减少了部分的返还，下面是是一个对比表。

|  代码                          |  消耗了的 gas |  返还的gas | 原始的 |  第一次 | 第二次 | 第三次 | （返还后的）有效gas |
| ---------------------------------- | --------------------- | ---------------- | -------------- | ---------- | ---------- | ---------- | ------------------------------------------------ |
| `0x60006000556000600055`           | 212                   | 0                | 0              | 0          | 0          |            | 212                                              |
| `0x60006000556001600055`           | 20112                 | 0                | 0              | 0          | 1          |            | 20112                                            |
| `0x60016000556000600055`           | 20112                 | 19900            | 0              | 1          | 0          |            | 212                                              |
| `0x60016000556002600055`           | 20112                 | 0                | 0              | 1          | 2          |            | 20112                                            |
| `0x60016000556001600055`           | 20112                 | 0                | 0              | 1          | 1          |            | 20112                                            |
| `0x60006000556000600055`           | 3012                  | 4800             | 1              | 0          | 0          |            | -1788                                            |
| `0x60006000556001600055`           | 3012                  | 2800             | 1              | 0          | 1          |            | 212                                              |
| `0x60006000556002600055`           | 3012                  | 0                | 1              | 0          | 2          |            | 3012                                             |
| `0x60026000556000600055`           | 3012                  | 4800             | 1              | 2          | 0          |            | -1788                                            |
| `0x60026000556003600055`           | 3012                  | 0                | 1              | 2          | 3          |            | 3012                                             |
| `0x60026000556001600055`           | 3012                  | 2800             | 1              | 2          | 1          |            | 212                                              |
| `0x60026000556002600055`           | 3012                  | 0                | 1              | 2          | 2          |            | 3012                                             |
| `0x60016000556000600055`           | 3012                  | 4800             | 1              | 1          | 0          |            | -1788                                            |
| `0x60016000556002600055`           | 3012                  | 0                | 1              | 1          | 2          |            | 3012                                             |
| `0x60016000556001600055`           | 212                   | 0                | 1              | 1          | 1          |            | 212                                              |
| `0x600160005560006000556001600055` | 40118                 | 19900            | 0              | 1          | 0          | 1          | 20218                                            |
| `0x600060005560016000556000600055` | 5918                  | 7600             | 1              | 0          | 1          | 0          | -1682                                            |

&lt;br/&gt;

# 安全考虑



返还对于事务执行时不可见的，因此这不会对事务执行逻辑产生任何影响。

如果我们不计算后来重置回零的零到非零的 SSTORE，在一个区块里执行的最大 gas 消耗量受到 gas limit 的限制。不计算这些事可以的，因为如果这样的 SSTORE 被重置了，存储不会被扩展，客户端实际上不需要调整默克尔树；gas 消耗是可以返还的，但客户端对这些操作码的处理通常也会被取消。如果 `new_value = original_value`，客户端应该保证不会进行存储写入；这是自以太坊创世以来的一次谨慎优化，但它现在变得更重要了。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2进展更新(截至2021/5/8)]]></title><description><![CDATA[首个合并后开发者测试网 Steklo 短暂运行；Altair 升级草拟了计划时间表]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-5-8</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-5-8</guid><pubDate>Wed, 12 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210508)

&lt;br/&gt;

# 信标链


截至本文发布🤯，信标链上的活跃验证者节点超 135,000 个，质押的 ETH 达到 445 万个，价值 180 亿美元。而且最近[新增质押存款](https://duneanalytics.com/hagaetc/eth2-0-deposits)的比率也有所上升。

自两周前的小故障之后，信标链的一直平稳运行着。随后 Prysmatic Labs 团队对此次主网事故展开了详细的[回顾](https://medium.com/prysmatic-labs/eth2-mainnet-incident-retrospective-f0338814340c)。ECN 翻译了该文章：《以太坊 2.0 主网事故回顾》。

不幸的是，信标链在连续两个月没有出现罚没事件后，上个月发生了[三起单独的罚没事件](https://beaconcha.in/validators/slashings)。我没有看到任何关于其原因的信息。

&lt;br/&gt;

# Staking

Adrian Sutton 发了一个视频，他展示了 Teku 如何在[大概一分钟里](https://www.youtube.com/watch?v=ce9uVRl23zI)从零同步信标链主网信息。这个 demo 直接从 Infura 中下载了初始状态，不过你可以使用任何已知同步的信标节点，或者已下载的包含该状态的文件。这个 demo 对于质押服务和个人质押者来说都是颠覆性的改变。当信标节点实现这个同步速度时 —— 用时[从几个小时](https://twitter.com/benjaminion_xyz/status/1388182493510131719)到几十秒 —— 用户基本上可以不用再管维护持续增长的存储信息以及冗余的设置。

如果用户想追踪自己的验证者节点在执行其验证职责时表现如何，那么可以看一下 Paul Hauner 发布的[电子表格工具](https://www.reddit.com/r/ethstaker/comments/n692yp/granular_validator_performance_tracking/)以及[使用说明](https://hackmd.io/xQfi83kHQpm05-aAFVV0DA?view)。这与 [Beaconcha.in](http://beaconcha.in/) 提供的单一的“有效性”数据相比要更加全面，用户还可以看到自己节点的表现与平均表现的比较。

读者们听说过秘密共享验证者 (SSV，Secret Shared Validators) 吗？如果没有听说过的话，是时候学习起来了。Alon Muroch 写了最近的 [SSV 第一阶段测试](https://medium.com/bloxstaking/secret-shared-validator-ssv-phase-1-testing-summary-5e3f5ab06083)。

&lt;br/&gt;

# Rayonism 项目


[Rayonism](https://rayonism.io/) 是俄罗斯抽象艺术的一种风格，也是以太坊正在进行的一个扩容项目，围绕 eth1-&gt;eth2 合并测试网以及分片的开发进行研究。这个项目在 EthGolobal 的 [Scaling Ethereum](https://scaling.ethglobal.co/) 黑客松下开展，不过肯定会再延伸到其他地方。

来自 Nethermind 团队的 Lukasz Rozmej 制作了一个非常有用的[视频教程](https://www.youtube.com/watch?v=UFcjPmBb0fs)，演示如何使用 Nethermind (Eth1/执行层) 和 Teku (Eth2/共识层) 设置合并测试网。

有一个重大新闻：首个合并后开发者测试网 Steklo，于 4 月 30 日运行了几个小时。

Steklo 在俄语中是“玻璃”的意思，它[被认为是易碎的](https://twitter.com/protolambda/status/1388093066993668098)。事实也是如此 (仅运行了几个小时)。公平地说，所有团队都是在没有准备任何测试向量的情况下投入开发工作的，所以这是首次、盲目的尝试。Decrypt 发布了相关文章，写了一些关于 [Steklo 的预览](https://decrypt.co/69635/ethereum-moves-toward-eth2-super-experimental-testnet)。该测试网共展示了 [12 种客户端组合](https://twitter.com/protolambda/status/1388093072936951811)，分别是 Nethermind、Besu 和 Geth/Catalyst 与 Teku、Nimbus、Lighthouse 和 Prysm 的配对。客户端组合见下图：

![Steklo](https://i.ibb.co/9cMxZVv/Steklo.jpg)

&lt;center&gt;cr: @protolambda 的推文&lt;/center&gt;


Lukasz 在 Rayonism Discord 频道上提供了[总结](https://discord.com/channels/595666850260713488/826479341784662056/837696090194444348) ：


&gt; - Lighthouse 出现共识问题，并且从一开始就分叉了 (状态根问题)，但在这个分叉上，Lighthouse 与所有执行层上的引擎都配合良好

&gt; - Prysm 出现一个故障 (一般或共识问题，仍不清楚具体问题)，并在创世就卡住了

&gt; - Besu 或 Teku 有时不能和其他客户端达成共识，但是最终他们还是达成了共识。如果它分裂，会变成两种集合：(Teku-Geth, Teku-Nethermind) 和 (Teku-Besu, Nimbus-Geth, Nimbus-Besu, Nimbus-Nethermind)。

&gt; - Nimbus 那边出现了与 Nethermind 在传输层的通信问题，但这需要 Nimbus 和 Nethermind 团队进行更多的调查。当然，它大部分时间都能正常工作 —— 有时需要重启一下


总之，有很多事情在进行！但是，很多方向都对了，总的来说，整个测试过程非常鼓舞人心。经过一些修复后，Lighthouse 随后可以与 Teku 和 Nimbus 达成共识。


上周我们准备了一些常用的测试向量，以便客户端可以在下一次共同测试前单独调试。计划是在下周初建立一个运行时间更长的合并开发者测试网。

&lt;br/&gt;

# Altair

Altair 是计划于年中进行的一次相对较小的信标链升级。

根据最近一次[开发者电话会议](https://hackmd.io/@benjaminion/wnie2_210508#Implementers)，客户团队在实现Altair规范方面进展得相当好。我们借此机会草拟了一个计划时间表(不作承诺):

- Altair 的规范大约在 5 月 21 日确定下来。
- 6月初的短期联合测试网(不测试分叉过渡，只测试Altair规范)
- 试着在6月底之前分叉目前的测试网。我想Pyrmont将是第一个，所以最好尽快迁移到Prater以避免不稳定。
- 7月底/ 8月初部署到信标链。

在规范确定之前，有一些问题需要解决。特别是，如何处理[这个问题](https://github.com/ethereum/eth2.0-specs/issues/2314)：在升级过程中丢失了一个 epoch 的奖励。

&lt;br/&gt;

# 合并

目前，大部分合并上的工作都集中在 Rayonism 项目上。

然后，Rayonism 项目结束之后，还有许多工作要做。Mikhail Kalinin 在 Rayonism 频道的一个 [Discord 帖子](https://discord.com/channels/595666850260713488/826479341784662056/840126264454021170)中总结了该开放话题：


&gt; 首先，过渡过程 (也称为对接过程)。我们需要弄清楚它，在测试网/开发者测试网中编写代码和尝试使用。第二，同步算法；设计工作已经开始了，接下来是实现和测试。区块提议方面的技术优化、通信通道协议、无论是 JSON-RPC 或 REST；用户的 JSON-RPC 修改 (添加已敲定区块的方法)。编写与执行层修改相关的具体 EIPs。解决 BLOCKHASH 随机性问题；进行多轮测试。区块链工具，以及获得证明它们有效的证据。基础设施的更新，主要问题是区块浏览器会是什么样的。


我们还有很多事情要做，但是对于在今年[年底之前](https://twitter.com/trent_vanepps/status/1387837123756240898)交付合并这一猜测，还是很乐观的。而持谨慎态度人认为于 2022 年第一季度交付，但是几乎没有人预估合并会晚于这个时间。

&lt;br/&gt;

# 工具

我的前同事 [Mostafa Farghaly](https://github.com/mFarghaly) [发布](https://hackmd.io/@benjaminion/wnie2_210508)了 [Kotal](https://www.kotal.co/)


&gt; Kotal 是一个与云无关的区块链部署工具，用户可以通过 Kotal 轻易地在任意云端部署可用性高的、自主管理的、自主修复的区块链基础设施 (网络、节点、存储集群...)。


它[支持](https://twitter.com/kotalco/status/1390015656939118593) Teku、Nimbus、Lighthouse 和 Prysm 的节点、IPFS 以及其他 Web3 的东西。

&lt;br/&gt;

# 释义性文章

Vitalik 在 Reddit 上发布了文章《[一些不大为人注意的以太坊 PoS 的优点](https://www.reddit.com/r/ethereum/comments/mxo151/some_lessappreciated_benefits_of_ethereums_pos/)》，点击此处阅读 ECN 的翻译。


Alex Stokes 制作了一个有用的 [验证者生命周期流程图](https://github.com/ralexstokes/ralexstokes.github.io/blob/master/assets/pdf/validator-lifecycle.pdf)，并共享了生成图表的 [源代码](https://gist.github.com/ralexstokes/cf41fa6fe33c1620b21899e44157f68a)。


在 Viktor Bunin 的 [eth2 更新系列 014](https://bisontrails.co/eth2/014/) 中，他针对该问题表达了一些观点：如果类似上周的事故在合并之后发生在信标链上会是什么样子。

&lt;br/&gt;

# 媒体和其他资源


信标链事故发生之后，客户端多样性继续成为大家热议的话题。Phil.eth 写了一篇非常好的概述《[客户端多样性有益于信标链的健康发展](https://phil-eth.medium.com/diversity-for-a-healthy-beaconchain-645ee1cea7ec)》：不要只关注自己运行的客户端。Superphiz 也很关心客户端多样性的问题，他出了一期视频《[以太坊客户端多样性&amp;如何解决该问题](https://www.youtube.com/watch?v=1hZgCaiqwfU)》。正好，我提醒一下读者们 Superphiz 的 SOTs ( [State of the Stake](https://www.youtube.com/playlist?list=PLOB9GGXGcc31_rKi1PlG0kGYf35e6l1wy)，质押的状态) 是一个非常不错的系列。


说到 Phiz，这里是 EthStaker 社区的 [4 月回顾](https://ethstaker.cc/ethstaker-community-april-in-review/)。他仍是我在这个世界上最喜欢的人。

Anthony Sassano 在他的 Daily Gwei 系列文章中写了我最喜欢的话题：合并以及 PoW 时代的结束。Status 也发布了一篇很好的文章《[以太坊很环保](https://our.status.im/ethereum-is-green/)》，文中展示了合并后将实现超低的能量消耗，让人印象深刻。


Camila Russo在 [Ethereal Virtual Summit](https://www.youtube.com/watch?v=bIUir2I-XxU) 上采访了 Vitalik Buterin 和 Aya Miyaguchi。在 [14:04](https://youtu.be/bIUir2I-XxU?t=844) 提到了 Eth2。下面是 Decrypt 划出的重点：


&gt; 在 #EtherealSummit 的一段对话：
&gt;
&gt; @CamiRusso: “可以说我们最迟将在明年初完成合并吗?”
&gt;
&gt; @VitalikButerin:“听起来很合理。”


Coindesk 的 Valid Points 出的 newsletter 系列依旧很值得阅读：4 月 28 日 和 5 月 5 日的。


至于 Mapping Out Eth2 播客，我们在 [4月29日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/eth-blocks-stop) 那期谈到了信标链事故和客户端多样性。在 [5月6日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/staking-ethereum-more-lucrative) 那期，我们讨论了 Steklo，以及合并后验证者将预估获得更高的奖励。

&lt;br/&gt;

# 研究

Vitalik有一个提议，允许验证者 [更改他们的签名密钥](https://ethresear.ch/t/adding-pos-validator-key-changes/9264?u=benjaminion)：它提供了一种方式，用户委托质押池参与质押，同时保留对其质押资产的管理，也能够为自己的罚没事件负责。

&lt;br/&gt;

# 常规会议

## 实现者会议


客户端实现者第 63 次会议于 5 月 6 日举行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/217)
- [会议视频](https://www.youtube.com/watch?v=qhcMxBh0GEc&amp;t=126s)
- [我的速记](https://hackmd.io/@benjaminion/B1wRBDWdd)，还有 [Alex Stokes的推特笔记](https://twitter.com/ralexstokes/status/1390370217524568064) 


我们讨论了升级至 Altair 会出现的一个问题，如果我们不采取[一次性修复](https://github.com/ethereum/eth2.0-specs/pull/2373)，将导致在升级过程中丢失一个 epoch 的奖励。对此大家意见不一。修复会增加实现和测试的复杂性，而不修复的话，可能丢失的奖励相对来说非常小。


我们还为 Altair 的交付制定了[一个暂定时间表](https://hackmd.io/@benjaminion/wnie2_210508#Altair)。

## 合并会议

第三次合并电话会议于 4 月 29 日举行。

- [会议议程](https://github.com/ethereum/pm/issues/305)
- [会议视频](https://www.youtube.com/watch?v=KAm718N_bvA)
- [会议笔记](https://github.com/ethereum/pm/blob/master/Merge/Meeting03.md)


关于 Rayonism 有很多详细的讨论和计划。另一个有用的信息是：Dmitry Shmatko 一直致力于验证者余额提款工作，并且即将开展下一阶段的工作，即允许部分提款 (提出验证者的质押奖励，但留下本金)。有人计划在某个时候在 Rayonism 网络上测试该功能。

&lt;br/&gt;

# 其他新闻


- Go 中的另一个 [bug](https://groups.google.com/g/golang-announce/c/cu9SP4eSXMc) 已经在 [Eth2 Bug Bounty 项目](https://ethereum.org/en/eth2/get-involved/bug-bounty/)中被人发现并修复。


</content:encoded></item><item><title><![CDATA[质押池与质押衍生品]]></title><description><![CDATA[Paradigm 对比质押方案，结合市场分析去中心化质押池对以太坊的影响]]></description><link>https://www.ethereum.cn/Staking/on-staking-pool-and-staking-derivatives</link><guid isPermaLink="false">https://www.ethereum.cn/Staking/on-staking-pool-and-staking-derivatives</guid><pubDate>Tue, 11 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Paradigm Research](https://research.paradigm.xyz/staking#fn:1)

&lt;br/&gt;


从工作量证明 (PoW) 到权益证明 (PoS) 的转变是以太坊自诞生以来最令人期待的里程碑。不同于使用需要消耗大量能源的 PoW 来扩展区块链，PoS 允许用户质押他们的 ETH 和运行名为“验证者”的区块生成节点。

以太坊迈向 PoS 的第一步是启动一个可以达成共识的独立网络——信标链 （[Beacon Chain](https://beaconcha.in/)）。为对这个系统提供安全的回报，质押者会获得增发的、新的 ETH。在未来，我们知道信标链会与现在的以太坊链合并，允许质押者也赚取交易费用和现在由 PoW 矿工获得的矿工可提取价值 ([MEV](https://research.paradigm.xyz/MEV))。


以太坊的 PoS 协议并没有像其他 PoS 实现，如 Cosmos、Tezos 和 Polkadot 那样为质押者提供一些功能。其背后的原因的是要促进去中心化，但我们认为市场一定会介入，使质押变得更有效率和更方便。因此，重要的是确保解决方案能最大化质押者的私人利益，且能为整个以太坊带来健康的系统性结果。

&lt;br/&gt;

# 单独质押 ETH 是如何运作的？


想要在以太坊上单独质押，用户必须把 32 个 ETH 存入[ETH2 存款合约](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa#code)，同时指定两个关键参数：

1. 验证者公钥：在存款前，用户会生成一个用于他们的验证者节点的密钥对。私钥是用于对区块签名的，而公钥是作为其唯一的标识符。
2. 存入的 32 个 ETH 的提款凭证：提款被许可后，本金 (32 个 ETH) 和质押奖励只能被提取到这个地址。

这里的一个关键是，公钥和提款凭证不需要由同一个实体控制。

然后，用户需要运行一个 ETH2 验证者节点和在轮到他们的时候对区块签名，否则，不遵守协议是要受到惩罚的。

&lt;br/&gt;

# ETH 质押者会遇到哪些问题？


质押协议的效率和便利性可以分解为以下特性，以及它们的以太坊实现：

| 特性                                                | 在以太坊上的实现                                 |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| **质押所需最低金额**：这决定了准入门槛。 | 最低需要 32 个 ETH，人们可以质押多个 32 个ETH |
| **委托**：质押者可以把运行验证者节点的工作外包吗？还是他们必须自己运行？如果委托是不可能的，硬件和带宽要求可能会妨碍一些人参与质押。 | 协议内没有把质押委托给其他验证者的设定 |
| **锁仓**：多久才能提取质押了的资金？较长的锁仓期会增加协议的安全性，但也会因为较低的灵活性和较高的机会成本而降低对质押者的吸引力。 |  [27 hours](https://github.com/ethereum/eth2.0-specs/blob/e59c0afe79c5d5eef73ddd31991e22beef27e366/configs/mainnet/phase0.yaml#L95-L96). 今天，质押者完全无法从信标链提取 ETH。允许提款后，取消质押的锁仓期会是[27 小时](https://github.com/ethereum/eth2.0-specs/blob/e59c0afe79c5d5eef73ddd31991e22beef27e366/configs/mainnet/phase0.yaml#L95-L96)。 |
| **回报**:  质押者能在一段时间内赚多少钱？回报越高，就会有越多人参与质押，带来更高的安全性。 | 现在在信标链上的质押者赚取的是增发奖励。“合并”后，[他们还会赚取交易费和 MEV](https://docs.google.com/spreadsheets/d/1FslqTnECKvi7_l4x6lbyRhNtzW9f6CVEzwDf04zprfA/edit#gid=0)。增发的奖励取决于[当前质押了](https://launchpad.ethereum.org/en/)多少 ETH。质押的 ETH 越多意味着增发给每个验证者的奖励越少，反之亦然。今天大约质押了400万个 ETH，年化率是 7.8%。 |


这些特性对质押者来说都是重大障碍。在其他条件相同的情况下，他们会更倾向于能够质押任意数量的 ETH、把运行设施的工作委托给其他人，以及即时提取他们的押金。如果可以的话，他们还想把他们质押的 ETH 用到其他应用上，这已经成为去中心化金融的标准程序。

在下文，我们会讨论

- 质押池如何解决委托和最低质押金额要求的需求；以及
- 由这些质押池推出的质押衍生品是如何解决长锁仓期和允许质押者解锁他们质押的 ETH 的流动性问题。

&lt;br/&gt;

# 质押池是如何运作的？

表面上，质押池的工作原理与 PoW 的矿池相似，但 PoS 的性质使得它可以给客户提供一些额外的好处：

1. 通过把 ETH 汇集在一起，质押者可以通过 32 个 ETH 的门槛。这使得小额质押者也可以参与 PoS。
2. 不同于每个用户都运行自己的验证者节点，质押池负责质押的操作部分。有些质押池还会给用户提供保险，不受像罚没这样的协议惩罚。
3. 质押池可以保持一个流动 ETH 的储备池，以满足立即提款的需求，类似于银行的方式。这就取消了提款期，预设了不是所有的用户都想要在同一时间提款。
4. 最后，资金池可以提供一种代表质押了的 ETH 的代币，这种代币可以用在其他应用里。这一点非常重要，在下文会用一个章节来深入讨论。

质押池既可以是中心化也可以是去中心化，各有其利弊权衡。

## 中心化质押池是如何运作的？


任何一家大型交易所都可以轻而易举地实现一个质押池。实际上，很多[已经](https://support.kraken.com/hc/en-us/articles/360052734432-Ethereum-2-0-staking-FAQ)[支持](https://www.binance.com/en/eth2) ([或将要支持](https://help.coinbase.com/en/coinbase/trading-and-funding/staking/ethereum-2-0-staking)) 信标链质押了。

交易所只需要：

1. 允许用户选择参与质押，然后获取质押奖励
2. 用客户的 ETH 来运行验证者节点

由于是由交易所来做质押的，用户不需要操作任何设备。提供及时的流动性对交易所来说也非常简单，因为它们本来就有大量的流动 ETH 储备。鉴于获得客户和资金流动性对交易所经营的重要性，它们给用户提供的这项服务不会收取额外的费用。

## 去中心化质押池是如何运作的？

现在我们已经了解了单独质押和质押池服务的区别，以及中心化质押池是如何运作的了，我们将以 [Lido](http://lido.finance/)作为例子，探讨去中心化质押池的结构。

从用户的角度来看，参与去中心化池很简单：他们把 ETH 存入一个以太坊智能合约，并收到 stETH 作为收据。 stETH 代币的余额是会变化的，以反映质该合约获得的质押奖励分配。这意味着，1 个 stETH 将总代表 1 个质押的 ETH。



在 Lido 的机制里，每次有 32 个 ETH 存入到以太坊智能合约，DAO 会从治理控制的注册表里选出一个新的验证者节点。该验证者会调用存款合约，把 32 个 ETH 发到该验证者的公钥里，然后使用 LidoDAO 的提款凭证。

这里需要回答两个问题：


- **如何管理提款凭证**？提款凭证是一个 ETH2 的 BLS 密钥，[一个分布式的密钥生成仪式把提款密钥分成11部分，集齐其中的6个多签才能获得提款凭证](https://blog.lido.fi/lido-withdrawal-key-ceremony/)。这不是一个最优方案，但在信标链还未允许提款时不会构成风险。到了质押者可以提款的时候，Lido 将已经过渡到以一个 ETH1 智能合约作为提款凭证，而不是一个多签。在那以后，假设智能合约对资金没有任何管理功能，1 个 stETH 将可以在无须信任的条件下兑换到 1 个 ETH。 
- **谁是验证者以及他们是如何注册的**？验证者节点由[专业的质押企业](https://mainnet.lido.fi/#/lido-dao/0x55032650b14df07b85bf18a3a3ec8e0af2e028d5/)，比如 p2p.org、Chorus One、或 stakefish 来运行，它们必须通过治理决策获得批准。每个验证者有它们自己所有的质押金额上限，这个数额由投票治理决定。

&lt;br/&gt;

# 剖析 stETH 代币


我们了解了 stETH 是对质押的 ETH 和智能合约获得的奖励的凭证。这也被称为*质押衍生品*。

质押衍生品将对整个以太坊生态带来重大影响，包括 ETH 质押者、一般的 ETH 持有者、质押池间的竞争、以及甚至以太坊本身。

**质押者**: 对质押者来说主要的好处是可以进行再抵押，质押者在参与质押的同时在其他应用使用本金，与 Uniswap 的流动性代币可以用来在各种 DeFi 上作为抵押物相似。这大大降低了质押的机会成本。


**没有做质押的 ETH 持有者**：如果 stETH 可以用来作为借 ETH 的抵押物，就可以在杠杆质押里释放借入 ETH 的需求。这回推高 ETH 供应率^[我们也请读者参考Chitra 和 Evans 关于“[质押与借贷](https://arxiv.org/abs/2006.11156) ”，以及这两种力量之间的[平衡](https://arxiv.org/abs/2001.00919)的文章。]，最终是所有的 ETH 持有者因高利率而受惠。


**质押池间的竞争**：stETH 的存在给了它的池子带来重要的网络效应。这种网络效应为参与市场的头部质押服务创造强大的激励，这表明 ETH 质押衍生品因为有流动性的保护和网络效应而按幂次定律 (power-law) 或网络效应发展。因此，stETH 有可能在许多用例里取代 ETH，甚至有可能完全取代 ETH。


**以太坊**：有一种普遍看法认为，质押衍生品回降低 PoS 的安全性，因为它们把区块生成从质押和罚没剥离开来。这也被称为委托代理问题，并可能导致取款生成者没有遵循协议的动机，因为他们在里面没有利益。


但是，这个论点必须与它创造的裨益相比较来看：如果质押衍生品降低了质押的成本，它们也会使得更多的（甚或全部的） ETH 都被拿去做质押。请注意，这是一个良性循环的完美例子：stETH 的流动性越高，质押的机会成本就越低，这会使得更多的 ETH 被拿去质押，又进一步加深了 stETH 的流动性，如此循环下去。

在没有质押衍生品的情况下，我们可能预期会有 15-30% 的 ETH 参与质押。但是，在有的情况下，这个数字可能会上升到 0-100%，因为质押与不质押之间不存在额外的开销。


为了说明为什么这会带来更高的经济安全性，请想象以下攻击场景：

- 如果 20% 的 ETH 被质押了，攻击者想拿下所有质押的 ETH 的66% （破坏区块链的关键临界点），那么他们必须在自由市场买入所有 ETH 的40%。
- 如果 60% 的 ETH 被质押了，但 stETH 是有流动性的，那么攻击者将必须买入所有 stETH 的66%，实际上相当于所有 ETH 的40%。请注意，这里涉及一些额外步骤，攻击者首先必须赎回 stETH 以去除诚实验证者，并重新用他们的 ETH 去质押。
- 如果超过 60% 的 ETH 被质押了，攻击者此时必须买下的 ETH 份额要高于 40%，且只能从40%起跳。
- 如果100% 的 ETH 都被质押了，攻击者则需要买入所有 stETH 的66% 才能达到相同的临界点。


**我们得出的结论是，如果质押衍生品可以使质押的 ETH 超过 60%，它们肯定可以增加以太坊的经济安全性，而不是减少。**

&lt;br/&gt;

# 那么谁会在质押市场里胜出呢？

去中心化常常被视为一种无形的好处，且要付出高昂的代价，因此用户往往不愿意为其付费 (可参见币安智能链 vs 以太坊的辩论)。这个逻辑的思考不适用于去中心化质押池，因为与中心化质押池相比有三点关键优势。

- **它们的社会可扩展性更强**：PoS 安全性的一个重要指标是，单个实体控制了多少质押份额。对于交易所来说，这个数字可能被限制在15-30%；高于这个比例的话，以太坊生态可能会出现对权力集中的社会忧虑。去中心化质押池可以控制网络里任何比例的质押份额，只要 DAO 里每个单独的质押者不会过大，以及提款凭证不能变或被投票。

  我们必须强调去中心化质押池舍去所有的治理功能这一点有多重要。无论是费用、提款地址、还是验证者注册表都不可以通过认为输入而修改。

- 它们的质押衍生品是去信任的：像 Coinbase 或者 币安这样的大型交易所只会发行托管型的代币，使用它们的人肯定是有限的，在其他条件一样的情况下，用户肯定会选择去信任的代币，而不选择需要信任的。这会使得中心化质押池错过质押衍生品的网络效应。

  有人可能会指出，通过 WBTC，一种中心化的代币能够赢得代币化 BTC 的市场。但是，我们认为者只是因为以太坊上的 BTC 不能以既去信任又有资本效率的方式进行代币化，而质押的 ETH 是可能实现的。

- **它们对 MEV 的提取有更少限制**：制度化的质押池 （比如交易所）可能会有社会或名誉上的限制，使他们无法提取某种形式的 MEV 。这使得没有这些限制的小型质押公司和去中心化质押池可以给它们的质押者提供更高的回报。这会使得上述使用去中心化质押池的溢价变成去中心化折扣。

**这些好处是如此之大，以至于领头的质押池服务将可能是一个去中心化、非托管型的质押池。如果上述质押池是充分治理最小化的话，它可能会赢得整个市场，而不会对以太坊造成任何系统性风险。**

&lt;br/&gt;

# 结论

质押池和它们的质押衍生品受制于类似提取 MEV 的市场现实，在这个意义上，它们的存在是不可避免的。只要有创造和使用它们的私人利益，它们都将继续存在和蓬勃发展。但是，如果正确的解决方案能赢出且被充分采用，它还可以为以太坊带来系统性好处。

由于 stETH 具有庞大的网络效应，以及去中心化质押池既是非托管的，又可能会从 MEV 赚取更多的收入，我们认为这样的去中心化池子很可能赢得整个市场。

因此，我们应该专注于确保一个像非托管的、强劲的 stETH 版本的质押池赢得市场，而不是中心化的池子，这样才能确保有一个良好的系统性结果。

*感谢 [Arjun Balaji](https://twitter.com/arjunblj)、[Vasiliy Shapovalov](https://twitter.com/_vshapovalov) 和 [Konstantin Lomashuk](https://twitter.com/Lomashuk) 提供的珍贵讨论和校对建议。*


*声明：此文仅供参考，不构成任何与资产买卖相关的投资建议，也不对任何投资决策作出价值评估。同时，关于会计、法律、税务或投资方面的任何建议，也不应参考这篇文章。本文仅反应了作者当前的观点，并不代表 Paradigm 及其附属机构的观点。尽管本文不做更新，文中所陈列的观点亦可随时变更。*

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/5/10]]></title><description><![CDATA[伦敦升级的开发进度；uniswap v3 主网上线]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-10/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-5-10/</guid><pubDate>Mon, 10 May 2021 00:00:00 GMT</pubDate><content:encoded>![24](https://i.ibb.co/ft2F3CY/24.png)

# Eth1

## 伦敦升级

以太坊基金会负责社区生态融合的@trent_vanepps 于 4 月 30 日在推特上宣布了新项目&quot;Ecosystem Readiness (生态准备工作)&quot;，旨在为伦敦网络升级 (7.14) 做好以太坊开发工具的准备。这个项目会追踪与像 EIP-1559 这些提案相关的代码库、开发者工具、生态基础设施等的进展。

5 月 8 日举行了第一次关于伦敦升级基础设施的会议，与会的除了核心开发者外还包括基础设施供应商、交易所、钱包、代码库等。

会议内容大致如下：

1. 在 EIP 规范里，保留区块头里`gasLimit`的名称而不变成`gasTarget`。根据 EIP-1559，新的`gasLimit`会变成“200%满”，需要注意的是这指的是之前 gas limit （12.5 m) 而不是现在的 15 m。这一点需要与矿工沟通。

2. EIP-1559 上主网后第一个区块的`basefee`以 1,000,000,000 来计算。

3. 关于 JSON RPC 里多个字段的命名问题，会议还没有达成一致

4. 讨论了伦敦升级用于客户端集成的测试网 Baikal 的规范 （Aleut 测试网即将关闭）

   规范：https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/baikal.md

目前 Baikal 测试网的进度如下：

![baikal](https://i.ibb.co/6th12YZ/Baikal.png)

来源：https://twitter.com/TimBeiko/status/1390703192153808899?s=20

&lt;br/&gt;

想在Aleut 测试网关闭前体验 EIP1559 开发者测试网的，以下为传送门：

- 区块浏览器：[http://eip1559-testnet.ops.pegasys.tech:3000](https://t.co/tTodOn00Zs?amp=1)
- 水龙头：[http://aleut-faucet.surge.sh](https://t.co/cp8TePY5gb?amp=1)
- RPC URL: [http://3.12.166.199:8545](http://3.12.166.199:8545/)

&lt;br/&gt;

**Geth v1.10.3 版本已出炉**

Go Ethereum 发布了Geth v1.10.3 版本，这是一个维护版本，但在快照同步 (snap sync) 上有重要更新。Geth 团队负责人 [Péter Szilágyi](https://twitter.com/peter_szilagyi) 发推表示这可能是他们最后一个更新版本，其中快照同步并不是默认模式，他鼓励大家去试试。他在评论里表示这意味着初始同步可以在4小时内完成（如果你的带宽和磁盘可以承受这个吞吐量的话)。

Github: https://github.com/ethereum/go-ethereum/releases/tag/v1.10.3

&lt;br/&gt;

# 合并

**首个合并测试网**

4 月 30 日，以太坊开发者在 Rayonism 项目上发布了第一个多客户端测试网——Steklo，模拟以太坊区块链在以太坊 2.0 客户端上运行，共有 7 个客户端参与。但 Steklo 上线后，一些用户无法处理打包区块，有些人无法与网络同步，它很快被开发者关闭了。核心开发者 Protolambda 在 discord 上表示在测试和提高同步性能后会推出下一个测试网。

![steklo](https://i.ibb.co/XJFH3tW/proto.png)

&lt;br/&gt;

# Eth2

**Eth2 验证者表现的数据追踪**

Lighthouse 客户端的 Paul Hauner 在reddit 上开源了他们的信标链验证者表现数据，从证明表现开始，他提供了两个链接：

- https://hackmd.io/xQfi83kHQpm05-aAFVV0DA?view
- https://docs.google.com/spreadsheets/d/1SNFf4LsDOK91SWuQZm9DYBoX9JNQNMKHw66Rv0l5EGo/edit#gid=553688981

第一条链接是一个技术文档，对表现数据进行说明并解释它们是如何生成的。第二条链接是一个excel表，展示了用大约3周的样本数据算出的结果，并与全球平均数据做了对比。

来源：https://www.reddit.com/r/ethstaker/comments/n692yp/granular_validator_performance_tracking/

&lt;br/&gt;

# Layer2

**验证扩容解决方案 Truebit 上线主网**

区块链验证扩容解决方案 Truebit 是一种交互式验证协议，使智能合约能够以更低的 gas 费在标准编程语言中安全地执行链下复杂计算，该协议已于 4 月 21 日上线主网。根据TrueBit 的白皮书，为了解决区块链上的计算可扩展性问题，TrueBit 提供的解决方案由两个部分组成：在争议解决层之上还有一个经济激励层，后者的形式是一种通用的“验证博弈”机制。

![truebit](https://i.ibb.co/dcLQSPR/truebit.png) 

&lt;center&gt;cr: Truebit&lt;/center&gt;

 

图为 Truebit 协议的代币模型，Truebit 平台中的角色有：Task givers (任务提出者)、Solvers (解决者)、Verifiers (验证者)。在接到区块链上外包的计算任务之后，givers 会把计算任务发布到 TrueBit 网络上，而 solvers 和 verifiers 通过计算和验证任务获得 Truebit 的原生代币 TRU 作为奖励。

 

随后，以太坊联合创世人 Vitalik Buterin 在 ethresear.ch 技术论坛上发布了文章 EVM optimistic rollup using Truebit。文章假设 Truebit 为一个黑匣子，为“运行代码以及返回输出”的询问提供延迟的回答，并且给出了如何基于 Truebit 构建 EVM optimistic rollup 的解决方案。详情请阅读文章：https://ethresear.ch/t/evm-optimistic-rollup-using-truebit/9318

 

来源：https://truebit.substack.com/p/truebit-early-access

 
&lt;br/&gt;
 

**DeversiFi 发布 Layer-2 生态图**

以太坊二层扩容生态系统进入超声波模式，持续呈指数级增长。

![deversifi](https://i.ibb.co/0m5SqJK/deversifi.jpg) 

cr: https://twitter.com/deversifi/status/1387379996713439237

 &lt;br/&gt;

**OKEx 将集成扩容解决方案 Arbitrum**

中心化交易所 OKEx 宣布与以太坊 L2 扩容解决方案 Arbitrum 达成合作。OKEx 的用户将能够直接在 Arbitrum 中存款和提款，而不需要与以太坊主网进行交互。Arbitrum Rollup 协议于 3 月 25 日推出了其候选测试网 V4 版本，等到其团队确定主网发布日期，OKEx 将开始集成 Arbitrum 的工作。

来源：https://www.okex.com/support/hc/en-us/articles/360060706511

  &lt;br/&gt;

**基于 StarkEx 扩容解决方案的项目交易量超 10 亿美元**

目前应用以太坊 zkRollup 扩容解决方案 StarkEx 的项目有 dydx、Deversifi 和 Immutable。StarkWare 团队于 5 月 7 日发推表示，使用其解决方案的项目的交易量加起来已超过 10 亿美元。其中，约 75% 的来自于使用 StarkEx Rollup 的 dydx 协议，约 25% 来自使用 StarkEx Validium 的 DeversiFi 和 Immutable。

 

来源：https://twitter.com/ukolodny/status/1390601561173381125

  &lt;br/&gt;

**StarkWare 在中国社区的线上工作坊**

ECN 联合 imToken、ETHPlanet、EthFans、上海前沿技术研讨会和 HiBlock 等多位优秀的以太坊生态伙伴，共同组织了「以太坊扩容」主题系列活动。5 月 9 日本次系列活动的第三场邀请到 StarkWare 团队与中文社区举行了线上工作坊。以下为此次工作坊的双语视频：

《认识STARKS、Cairo及StarkNet》

https://www.bilibili.com/video/BV1dq4y1f7sr

 

《如何使用通用计算编程语言Cairo开发AMM》

https://www.bilibili.com/video/BV14b4y1f7NF



《通往StarkNet之路》

https://www.bilibili.com/video/BV1u54y1L7mz

 &lt;br/&gt;

# 生态

## **Uniswap v3 于 5 月 6 日上线主网，当前锁仓量近六亿美元**

Uniswap v3 于四天前上线，推出了“聚合流动性”、“NFT仓位”、“费率自定义”、“范围订单”等功能，尚未上线 Optimistic Rollup 扩容方案。截至本文发布，开启迁移之后的 Uniswap v3 锁仓量接近 6 亿美元，日交易量超 4.7 亿美元。

![uni](https://i.ibb.co/sy3dVW8/u1.png) 

&lt;center&gt;cr. [https://info.uniswap.org/#/]&lt;/center&gt;

 

据官方文档，Uniswap v3 版本理论上能够将资金效率“提升 4000 倍”，在其数据页面有一组较为直观的数据反映不同版本间的资本效率，即交易量和锁仓量的比值 (Volume/TVL)。截至发文，V3 版本为 85.12%，而 V2 则为 26.39%。值得注意的是，v2 在目前阶段可能还可以提供更优的价格，交易时 Uniswap 会建议用户选择价格更优的版本。

![u2](https://i.ibb.co/s91fdvM/u2.png) 

cr. [https://info.uniswap.org/#/](#/)

 

就迁移情况来看，v3 在上线首日的交易量就超过了 v2 上线一个月交易量的两倍，v2 的锁仓量在 v3 上线前两日短暂降低后又开始回升，目前 v2 协议中的锁仓量仍占据 Uniswap 总锁仓量的 93.5% 左右，可以看出 v3 仍处于非常早期的阶段。

![u3](https://i.ibb.co/bgGsYp8/u3.png) 

&lt;center&gt;cr. https://v2.info.uniswap.org/home&lt;/center&gt;

 

引起社区热议的还有 v3 中的 LP NFT (仓位 NFT)，会根据用户的仓位属性在链上生成独一无二的 NFT (SVG 格式)，颜色根据两种资产的 token id 生成，中间的曲线则是基于流动性聚合度以及初始存款比率生成的。据 Uniswap 创始人 Hayden 介绍，v3 唯一可升级的合约是 NFT 的生成合约，因此每个季节可能会有不同的 NFT 主题。

![u4](https://i.ibb.co/hZZ691h/uniswap.gif) 

&lt;center&gt;cr. Uniswap 推文&lt;/center&gt;

 

相关资源：

Uniswap v1-v3 版本数据监测

https://migrate.uniswap.info/home

Uniswap v3 策略模拟工具

https://defi-lab.xyz/

 &lt;br/&gt;

**以太坊基金会宣布 Fellowship Program**

![fellowship](https://i.ibb.co/93M80TS/program.png) 

以太坊基金会 5 月 8 日发布博文宣布其 Next Billion 团队开启 Ethereum Foundation Fellowship Program，以寻求以太坊在新兴经济体的应用，该计划包括为一些创新的创业者提供引导、专业建议以及与以太坊生态系统领先者的连接。

首期参与者包括 Benson Njuguna ([Acre Africa](https://acreafrica.com/)) 、Chuy Cepeda ([OS.City](https://os.city/))、Kuldeep Bandhu Aryal ([BRAC](http://www.brac.net/)) 以及 Naroa Zurutuza ([Giga](https://gigaconnect.org/))，旨在将区块链或以太坊解决方案应用于公共事务和普惠金融等领域中。

详情参阅：https://blog.ethereum.org/2021/05/07/ethereum-for-the-next-billion/

&lt;br/&gt;

**以太坊扩容中国系列活动之黑客松**

除了线上下 meetup 和工作坊之外，本次系列活动还将在 5 月 28 日至 30 日于杭州举办线下黑客松，往期活动回顾请前往：https://rollup.world/
黑客松报名请扫描海报二维码

![hackthon](https://i.ibb.co/NWc969V/hackthon.jpg)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Vitalik: 你可能不知道的以太坊PoS优点]]></title><description><![CDATA[以太坊转为PoS 后对出块时间分布、区块确认、轻客户端的实现等都有裨益]]></description><link>https://www.ethereum.cn/Eth2/some_lessappreciated_benefits_of_ethereums_pos</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/some_lessappreciated_benefits_of_ethereums_pos</guid><pubDate>Thu, 06 May 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [r/ethereum](https://www.reddit.com/r/ethereum/comments/mxo151/some_lessappreciated_benefits_of_ethereums_pos/?utm_medium=android_app&amp;utm_source=share)

&lt;br/&gt;

我们经常谈PoS共识耗费的资源要比PoW少得多，也会谈PoS带来的一些关键益处，例如经济终结性，但我们也不要忘了转为PoS 后的一些次要益处。理论上讲，合并后，大部分这些益处都能立即实现。


**出块时间分布**：在Pow共识机制下，区块分布基于[泊松分布](https://en.wikipedia.org/wiki/Poisson_distribution)，所以出块时间会有很大差异，平均出块时间是13秒，但有时会超过30秒甚至60秒。你发送一笔交易后，平均需要等待13秒才能出现下一个区块。PoS机制有固定出块时间，每12秒生成一个区块，发送一笔交易的平均等待时间是6秒。唯一的例外是提议者离线，这种情况很少见。EIP-1559 在主网实现后，这将极大改善以太坊用户体验。


**最终敲定前更快的区块确认**：就PoS的最终确定性而言，区块被确认了大概两个epoch后就不可能被回滚 。但在此之前，安全性提升的速度也要比PoW快得多，因为在LMD GHOST分叉选择规则之下，数百个证明会同时产生，这样会形成比PoW 的模型（每个区块确认都需要全网共识）更快的收敛速度。 12秒之后，一个区块就能够经过数百个证明者的验证，这就让回滚变得非常困难。


**更好的轻客户端协议**：PoW以太坊是[有](https://medium.com/@rauljordan/a-primer-on-ethereum-blockchain-light-clients-f3cadde49137)轻客户端的，但效率远远低于它们可以实现的，而且启动和维护仍然需要相当多的时间和资源。吸取了PoW的经验后，PoS轻客户端协议的设计[更加精良](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/altair/sync-protocol.md)，每天最低只需要下载几kb数据就能保持同步。这让浏览器内置的轻客户端与移动端的PoS轻客户端钱包更可行，降低对中心化服务商的依赖。


**能更快地发现网络问题**：在PoW网络中，如果一半节点离线，或因为漏洞和黑客攻击，不能正常运行，网络中的其他节点需要一定时间才能发现，因为一开始没有足够的信息把正在发生的事与随机事件区分开来。相比之下，在PoS网络中，单个slot的节点参与度如果从99%下降到更低水平，是非常容易察觉的，你马上就会知道网络出问题了。


还有许多更加细小的好处。以太坊网络协议停止支持合并前的PoW链，转换到PoS链这个时间给了我们一个天然的协调机会，可以重置客户端所需下载的数据量。信标链中现有的数据结构（特别是历史区块根和状态根列表）使得EVM内部访问历史记录更加容易（这与[EIP-2935](https://eips.ethereum.org/EIPS/eip-2935)试图实现的益处相同）。SSZ结构让任何类型的历史证明都更容易实现；此外，对于整个协议，从RLP到SSZ的转换如果能够更加完整，可以大大简化默克尔证明生成过程。

合并不单单涉及PoS的过渡，还能够带来一系列的好处！

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。



</content:encoded></item><item><title><![CDATA[StarkNet 上手：如何使用Cairo进行开发]]></title><description><![CDATA[扩容以太坊系列活动#3 与StarkWare 的工作坊]]></description><link>https://www.ethereum.cn/Activity/scaling-ethereum-starkware-workshop</link><guid isPermaLink="false">https://www.ethereum.cn/Activity/scaling-ethereum-starkware-workshop</guid><pubDate>Thu, 06 May 2021 00:00:00 GMT</pubDate><content:encoded>## 活动介绍

为了使中文社区和开发者更好地了解目前 Layer 2 各种方案的发展现状和技术框架，跟优秀的研发团队直面对话，ECN 联合 imToken、ETHPlanet、EthFans、上海前沿技术研讨会和 HiBlock 等多位优秀的以太坊生态伙伴，共同组织了「以太坊扩容」主题系列活动。

继四月杭州线下 meetup 及线上 zkSync 工作坊之后，本周日 (5月9日) 晚八点，头部 Layer 2 项目团队 StarkWare 将做客中文社区，与开发者一同进行线上工作坊，演示如何使用通用计算编程语言 Cairo 进行 ZK-Rollup 应用开发。

除了线上下 meetup 和工作坊之外，本次系列活动还将在 5 月 28 日至 30 日于杭州举办线下黑客松，往期活动回顾及黑客松报名请前往：https://rollup.world/

&lt;br/&gt;

## 介绍starkware / starknet / cairo

StarkWare 团队研发了零知识证明协议 STARK，旨在基于该技术提高区块链的可扩展性和隐私性。其作用不仅是促进 STARK 技术的使用，而且还提供“零知识、简洁、透明、明显、安全”的密码学证明。其二层解决方案最早于 2020 年 6 月上线主网支持去中心化交易所 DeversiFi，其他用例还包括 dydx 以及 NFT 二层解决方案 Immutable X。

https://starkware.co/

StarkNet 是一个无需准入的去中心化 ZK-Rollup 解决方案，可以在以太坊中作为二层网络运行，其中任何 dApp 均可实现无上限的计算规模，并享有同等的以太坊网络可组合性和安全性。

https://starkware.co/product/starknet/

Cairo 是图灵完备的通用计算编程语言，StarkNet 合约和 StarkNet OS 都是基于 Cairo 语言编写的，使得开发者能够进行更加轻松快捷的代码开发、审校和维护。应用开发者可以使用 Cairo 定义任何商业逻辑，在链下生成证明，并在链上进行验证，而无需自己编写复杂的&quot;电路&quot;或 AIR。Cairo 自 2020 年 7 月就已经在以太坊主网投入使用。

https://www.cairo-lang.org/

&lt;br/&gt;

## Workshop流程

主题：Scaling Workshop with StarkWare

如何上手 StarkNet，使用 Cairo 进行开发

时间：2021年5月9日（周日）20:00-21:00

- StarkNet 及 Cairo 介绍
- Cairo 语言开发演示
- AMA 问答

**请注意：在参与工作坊之前，需要提前进行相关系统环境的配置。**

环境配置文档：https://www.cairo-lang.org/docs/quickstart.html

视频演示：https://www.youtube.com/watch?v=k-1iw7AqMSk&amp;t=87s

Hello Cairo：https://www.cairo-lang.org/docs/hello_cairo/index.html

&lt;br/&gt;
&lt;br/&gt;

问题提交：https://app.sli.do/event/xg0f0esm/live/questions

Workshop 直播间：https://live.bilibili.com/22351743</content:encoded></item><item><title><![CDATA[以太坊2.0主网事故回顾]]></title><description><![CDATA[Prysmatic Labs 团队对信标链的首次事故进行回顾]]></description><link>https://www.ethereum.cn/Eth2/eth2-mainnet-incident-retrospective</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/eth2-mainnet-incident-retrospective</guid><pubDate>Fri, 30 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Prysmatic Labs](https://medium.com/prysmatic-labs/eth2-mainnet-incident-retrospective-f0338814340c)

&lt;br/&gt;


![beaconhain](  https://i.ibb.co/hR6gf8H/beaconcha-in.png)

&lt;center&gt;https://beaconcha.in/epoch/32302&lt;/center&gt;

   # 事故概要


   从 [epoch 32302](https://beaconcha.in/epoch/32302) 开始，信标链丢失了大量区块提议。由于 Prysm 是 Eth2 客户端中用户最多的，因此问题最有可能出现在 Prysm 上。一段时间之后，我们在本地重现了该错误。这其实是我们[已知](https://github.com/prysmaticlabs/prysm/issues/8298)的一个与 eth1 数据投票和验证者存款相关的问题。尽管之前已经有人向我们报告过此问题了，但是我们无法重现这个 bug 并将其视为孤立事件。而且这个问题从未在任何测试网或者主网中广泛传播过。这是该问题首次导致区块提议失败事故。

   在这 18 个 epochs 内，几乎所有 Prysm 信标节点都无法生产新区块。[Epoch 32320](https://beaconcha.in/epoch/32320) 又开始正常运行了，当时大家普遍认为该事故已经结束了。然而大约 24 小时后，该事故再次发生，造成了类似的影响。


   关于此事故的正式事后剖析报告已发布，访问链接查看：https://docs.google.com/document/d/1nJr6_bd-UnLBxvhT8lcRYdAZr69QdVQ3zJNUr3LgW-0/edit

   该回顾详细介绍了事故的时间线；分析了根本原因以及列出了 Eth2 质押者和参与者需要注意的问题。

   &lt;br/&gt;

   # 影响


   一些初步数据表明，第一次事故中，每个受影响的验证者平均损失 122950 gwei (按文章攥写时的价格计算为 0.3 美元)。而该次事故发生的 24 小时内，又发生了第二次相同的事故，每个受影响的验证者损失约为 0.22 美元。

   一些关键事实:

   - 没有验证者被罚没
   - 对信标链的敲定没有影响
   - 参与率还是很高 (最低点也有 84.8%) （编者注，此数据与 Ben Edgington 编写的最新一期《Eth2 进展更新》有出入。)
   - 大多数验证者丢失 2 到 3 个证明，不管哪个客户端类型
   - 这次不像是一次恶意或故意的攻击

   

   在整个团队经过大约 30 个小时的努力之后，我们诊断了其根本原因，并在 UTC 时间 4 月 25 日早上 6 点为所有 Prysm 节点部署了[修复版本](https://github.com/prysmaticlabs/prysm/releases/tag/v1.3.8-hotfix%2B6c0942)。在节点尚未完全升级之前，类似的事故仍发生了最后一次。给节点运行者足够的时间升级客户端之后，此类事故没有再发生过了，并且有证据表明该问题已得到完全解决。

   &lt;br/&gt;

# 问题解答

## 此事故是否会削弱大家对 Eth2 的信心？

   不会。该事故并没有造成共识失败，并且该事件的影响范围与 Eth2 主网的规模相比非常小 (在第一次事故中，每个受影响的验证者平均损失约 0.3 美元)。自创世以来，Eth2 一直都非常强大，验证者参与率非常高，并且每个 epoch 都完成了敲定。从我们的角度来看，故障解决了之后，网络有能力恢复到完美运行的状态，反而增强了社区对以太坊的复原能力的信心。

## 此事故是否会削弱大家对 Prysmatic Labs 团队的信心？

   我们对此次事故做出的反应和解决方法与[此前](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)我们处理 Eth2 测试网中的故障时完全不同。此次事故发生后，我们团队马上排除了错误信息；量化影响；以及在等待解决方案时，给验证者们[列出了明确的应对步骤](https://www.reddit.com/r/ethereum/comments/mxqcvl/regarding_the_recent_beacon_chain_incident/)。再者，我们完全确定了解决方案之后，才去让大家升级客户端版本。值得注意的是，由于 Prysm 客户端是以太坊 2.0 网络中用户占比最大的软件，因此出现的任何 bug 都可能会引起更严重的问题。


   对于核心开发者来说，工作的关键是要“约束复杂性” (bound complexity)。诸如 Eth2 之类的分布式系统具有如此多的变量，我们每个团队都尽一切努力以减少其出 bug 的可能性。当然，在这个的软件中，出现 bug 是不可避免的，并且我们承认，Prysmatic Labs 确实出错了。但是我们希望可以展现出我们团队解决问题的动力与能力，同时为验证者平衡速度和准确性之间的问题。

&lt;br/&gt;

# 事故根本原因总结


   Eth2 和 Eth1 链松散地连接着，Eth2 仅在验证者存款验证时需要用到 Eth1。也就是说，即使验证者对垃圾数据进行了投票，Eth2 PoS 链也可以继续运行。而唯一会影响到的事就是，新的验证者存款无法添加，直到 PoS 链再次对正确的 Eth1 数据进行投票。此“投票”是在“投票周期”中完成的，目前主网上将该周期设置为 [ 64 epochs](https://github.com/ethereum/eth2.0-specs/blob/2628721f96dacf6e24f44ca64222e6f96ffce557/configs/mainnet/phase0.yaml#L92) (大约 6.8 小时)。

   投票的方式为一个简单的“绝对多数”原则，Eth2 验证者规范中有[解释](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md#eth1-data)其运作方式。不幸的是，Prysm 在实行该原则 (按照绝对多数原则投票) 时，丢失了一些验证。该事故中，由于 Prysm 出现了 bug，导致一名区块提议者创建了一个完全无效的 Eth1 存款树根，而其他 Prysm 节点首先发现了该区块提议。随后，他们对此投了有效票，因为 Prysm 客户端遵循的是简单的“绝对多数投票”原则，而没有做明确的验证。

   然后，所有 Prysm 节点”滚雪球“般地对无效信息投票，导致了区块提议者无法将具有存款的区块打包进链。这是因为，这些存款对节点的 Eth1 存款树根未进行验证，所以区块提议会失败。 而在投票期结束之后，该问题就自动解决了，但如果 bug 未修复，将再次出现这种问题。

   实际上，这次出现无效 Eth1 存款数据树根的根本原因是，存款缓存初始化中出现了 bug，但仅影响了使用 Prysm 客户端的一部分信标节点。这导致这些节点生产错误的存款树根，而其他 Prysm 节点对其进行投票，从而造成了此次事故。

&lt;br/&gt;

# 事件时间线

   注意，下面是技术细节！大家可以跳到下一部分，阅读解决方案以及该次事故带来的经验教训。

## 区块提议失败

Epoch 32302 开始出现区块提议丢失的问题。

 ![img](https://i.ibb.co/DY1MhM0/block-proposal-failing.png)

Nishant 通知了团队，并召开了全体会议。然后，我们通过本地的主网信标节点重现事故，并开始了调查。

## 调查显示，Prysm 对奇怪的、错误的 eth1 存款树根投票

   我们注意到 Prysm 的节点正对奇怪的树根投票，该默克尔根用于验证 PoS 链中的验证者存款合约的存款完整性。在公共浏览器上查看了最初的区块提议者的历史信息之后 (为了保护该验证者，就不公布其身份了)，我们推断这并不是一起攻击事件。

## 排除法


   最初的怀疑是关于 Prysm 如何在验证者提议代码路径中处理 eth1 数据投票。尤其是，我们试图排除一些问题：

   1. 打包存款进区块这里有问题吗？
   2. 存款日志信息获取和 eth1 信息混了或者不确定吗？
   3. 我们的存款默克尔树出现问题了吗？


   在接下来的 16 个小时左右，我们花费了大量的时间共同努力诊断潜在的问题。我们梳理了代码行，试图通过单元测试来重现故障过程，并尝试了各种方法。尽管我们已经有了一个潜在的解决方案，我们也因缺乏信心而对发布修复版本而紧张。

&lt;br/&gt;

# 较合理的根本原因


   此前在处理 Eth2 测试网中的 bug 时，我们得到了一些经验教训，光对根本原因有信心是不够的。在高风险的情况下，在向用户公布解决方案之前，我们需要有 100% 的信心。在事故发生后 28 小时，我们坐下来并问自己：”我们还有什么是不知道的呢？我们还可以问什么问题来让我们更接近发生故障的根本原因呢？”然后我们知道了以下几点：

   1. 我们的稀疏默克尔树 (sparse merkle tree) 实现并没有严重的 bug，因为它使用主网和 Prater 测试网的存款，与 Lighthouse 和 Protolambda 的 Eth2 zrnt 实现相匹配。
   2. 我们用于从 Eth1 节点检索 Eth1 数据的代码路径没有 bug，也没有返回不正确的数据。

  我们不知道的有：

   1. 无效的存款树根是如何产生的
   2. 为什么这个问题在一些节点中是可以重现的，而其他节点不可以
   3. 为什么 Prysm 节点在确定区块中的存款数量时，出现了”off-by-one“错误

&lt;br/&gt;

# 修复问题


为了回答这些问题，我们看了初始化我们的存款树的代码路径。结果发现，在早期添加了一个缓存层以避免质押者每次启动他们的节点时都必须下载所有验证者存款记录。此外，我们添加了一个新功能——在客户端内部可以从一个内嵌的创世状态中启动 Prysm。在填充缓存时，我们存款树的一个错误预设导致信息的讹误：

![The culprit ](https://i.ibb.co/7RgmHSQ/the-culprit.png)

&lt;center&gt;问题根源&lt;/center&gt;

事实证明，如果我们的存款树是空的，函数 len(items) 将始终返回 1。这意味着当实际上我们应该把 `lastReceivedMerkleIndex` 的值设为 -1 时，我们会把它设为 0。上面的代码会导致一些在该代码路径的 Prysm 节点跳过把第 0 笔存款嵌入到树里。我们代码库的其他部分都指向问题出在我们存款树实现的这个奇怪部分，而不是这个代码路径。

为了检验这个假设，我们尝试使用 Protolambda 提供给我们的测试夹具尽可能地复制代码路径。我们直觉我们漏了将第 0 笔存款嵌入到存款树。当然，我们能够在一个可重复的测试中找到导致整个事件发生的、有问题的存款树根！然后，我们围绕该代码路径添加条件，以避免该条件再次出现，并准备推出最终确定的修复版本。



![fixing](https://i.ibb.co/k5Kdt1y/fixing-the-problem.png)

&lt;br/&gt;

# 问题解决

## 根本原因总结

- Prysm 把 eth1 数据保存在磁盘上，以防止用户在每次重启进程时都必须对验证者存款合约日志发出请求。

- 如果一个节点重启并把 eth1 数据保存在磁盘上，我们会从这些数据初始化我们的存款缓存，但由于我们的稀疏默克尔树 (sparse merkle tree，SMT) 协助程序包的工作方式与从磁盘上的数据初始化此缓存的代码路径不相同，我们会跳过把第 0 笔存款嵌入存款树，造成无效存款树根。这个代码路径只影响那些创世以来还没有数据库的节点，后来被**修复**了。

- 在官方规范里，Prysm 节点遵循“绝对多数”的原则执行一个 eth1 数据投票算法，但是，Prysm 并没有完全实现该算法的一些有效条件。Prysm 节点随绝对多数 eth1数据投票进行投票，该投票数据引用的是一个现存的区块根，这可能导致 Prysm 节点投票给一个由有问题的存款树生成的存款树哈希值，因为这些存款是未被验证的。

- 由于网络里大部分的节点都是 Prysm 节点，随绝对多数原则投票给有问题存款根这个问题的滚雪球效应发展成一个严重问题，因为 Prysm 节点在随后一段时间里无法在主网上生成区块。

- 一旦 eth1数据投票期重置了，Prysm 节点又可以正确地提议区块了，直到在未来又遇到该漏洞。

## 解决方案


在北京时间 4 月 25 日周日 13:00，在不确定性中煎熬了多个小时后，我们发布了对该问题的修复。我们对这个解决方案有十足的把握，并非常有信心在节点升级后，该问题在 Eth2 中不会再出现。

![solution](https://i.ibb.co/PDT3Cf3/solution.png)

&lt;br/&gt;

# 吸取校训

## 在事件中，对我们的解决方案有信心和与外界的谨慎沟通是至关重要的


当我们遭遇 Eth2 的 [Medalla 测试网事故](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)时，我们上了关于良好沟通的价值的重要一课。每个公共评论和语言的精确表达都会对事件的结果产生严重影响。在测试网的事件里，我们以为一个立即的解决方案是通过公共渠道告诉大家“重启你们的节点”。这个草率的决定导致网络上大部分的节点都掉线了，然后争先恐后在一堆坏的对等节点里找好的，以实现与区块链的同步。此外，我们很快发布了一个没有 100% 信心能解决问题的软件升级热补丁。这给系统带来更多的混乱，并造成节点运行商对解决方案的疑虑。

相较之下，在这次主网**新事故**的整个过程里，我们一直注意慎重与精确的沟通。另外，在我们对问题的根源和解决方法有 100% 的信心之前我们没有发布热补丁。

## 保持耐心与冷静有助于解决问题

我们团队经过了过去几年构建 Eth2 ，学到了如何在面对逆境时保持冷静。我们相信在解决问题过程中，保持冷静、频繁交流状态报告、确保团队感受到支持和正面的反馈是非常重要的。我们能够花时间收集尽可能多的证据，并与我们的用户进行细致的合作，我们将成功解决这个问题。更重要的是，我们在开始时就花时间对事件影响进行量化，以减少质押者与因缺乏信息而产生的忧虑。这个教训对在高度紧张与睡眠不足的情况下工作非常重要。慢下来，用适当的方法解决它，并不惜一切代价避免把问题弄得更糟。

## Eth2 测试网不等于主网


对于 Prysm 客户端，我们在公共 Eth2 测试网中对 Prysm 产品前的候选版本进行了广泛的测试和监听。Prater 和 Pyrmont 测试网都是用户在加入到 Eth2 主网前用来测试他们的设置的好工具。但是，这些测试网都预设四个产品级 Eth2 客户端的占比是接近平均分的，即没有哪个客户端在验证者中有明显的多数份额。不幸的是，这可能没有考虑到当某个客户端为大多数人所使用时才会出现的漏洞。在未来，Prysmatic Labs 会在一个更接近主网环境、或一个 Prysm 网络节点 50% 的环境里进行内部测试网里进行测试。


**此外，我们建议其他客户端也在它们自己的内容测试中加入这样的环境，在它们成为大多数客户端的时候，它们也可以了解自己客户端的潜在问题。**

&lt;br/&gt;

# 质押者应该思考什么

##  为什么使用 Prysm 客户端做质押



![img](https://i.ibb.co/LZKhTq4/launchpad.png)

&lt;center&gt;https://launchpad.ethereum.org&lt;/center&gt;


人们选择运行 Prysm 时因为从一开始我们团队已经专注于使他们参与以太坊质押的体验更简单。我与我们的用户沟通过很多次，很多人选择一个客户端不是因为微观上的优化或与其他客户端相比相对小的收益差别，而是因为我们使得他们的体验更简单——良好的文档资料，一直给所有的社区成员提供重要的帮助。对于新手来说 Eth2 是可怕的，质押也充满不确定性和风险。我们团队的使命是让用户知道我们在他们身边，以及无论他们的问题多小都会得到我们的支持。特别地，我们一直关注那些可能对命令行不太熟悉、不太了解 UNIX 操作系统的普通质押者。

在未来，你可以对我们团队有以下期待：


- 提高实现规范条件的准确性，确保预设和有效条件在任何代码被写入前都被充分审核和质疑
- 我们不因要提高这个体验，还要加倍努力，使 Prysm 比今天提升很多倍，使使用我们客户端的质押者更容易参与网络，包括网页界面的改进。
- Prysm 将在研发方面加倍努力，在 eth1 &lt;&gt; eth2 的合并前提供关键的功能与改进。
- 我们相信健康的竞争能形成一个**强大的激励机制**，推动 ETH 的权益证明能有更多人参与，也因此更安全，因为所有客户端团队都不断改善他们的软件
- 我们团队致力于以**最高的**专业水准来解决和质押者可能会遇到的问题。我们相信我们做好处理我们路上会遇到的任何问题，并向我们的社区保证我们会把质押者体验作为我们的最高优先级。
- 最后，我们相信还有很多重要功能可以使 Prysm 变成参与 Eth2 的、更有吸引力的软件，我们将朝着这个目标不断迭代
- Prysm 有一些验证者收益的高级优化还没对所有质押者设为默认启动。我们相信这些功能发布后，Prysm 的质押者会看到最高水平的收益。

&lt;br/&gt;

# 回顾客户端多样性的对话

自 Eth2 创世以来，我们一直听到的一个共同主题是客户端多样性。Eth2 是一个有世界各地的人作为验证者参与的分布式系统。不同人用不同的软件参与到区块链的共识里，如果某个软件出现严重问题，如果运行网络的客户端实现由一个平衡分布的话，影响会更小。

[Leonardo Bautista-Gomez](https://www.google.com/search?q=leobago&amp;oq=leobago&amp;aqs=chrome..69i57.1481j0j1&amp;sourceid=chrome&amp;ie=UTF-8) 早在一月的时候公布了一份数据分析，结果现实 Prysm 节点占网络的65%，此次事件也显示 Prysm 验证者在今天占了大多数。

![distribution](https://i.ibb.co/fMNmv58/distribution.png)

&lt;center&gt;https://github.com/leobago/BSC-ETH2/tree/master/armiarma&lt;/center&gt;


我们建议你们客观地看待每个客户端：它的软件、它的社区、还有它的韧性，然后决定选哪个软件及其背后的团队是最适合你的需求的。如果某个 Eth2 客户端缺少了对你来说很重要的东西，者正式你不选他们的客户端的理由，我们强烈推荐你提出一个功能请求。Prysmatic Labs 会继续专注于帮助你参与到以太坊网络，并推动区块链软件的边界。

如果你想沟通和对本文由疑问的话，请加入我们的[Discord](https://discord.gg/jhK7mbYvbY)。

&lt;br/&gt;

# 参考


- 事件的沟通 https://www.reddit.com/r/ethstaker/comments/mxpz57/regarding_the_recent_beacon_chain_incident/

- 事后检讨报告 https://docs.google.com/document/d/1nJr6_bd-UnLBxvhT8lcRYdAZr69QdVQ3zJNUr3LgW-0/edit?usp=sharing

- Medalla 测试网事件 https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权

</content:encoded></item><item><title><![CDATA[Eth2 是我们未来金融的中立设施]]></title><description><![CDATA[以太坊 2.0 不偏不倚的平台设计与机制在现今的社会经济背景下具有的特别价值]]></description><link>https://www.ethereum.cn/Eth2/eth2-is-neutral-infrastructure-for-our-financial-future</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/eth2-is-neutral-infrastructure-for-our-financial-future</guid><pubDate>Thu, 29 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Cointelegraph](https://cointelegraph.com/news/eth2-is-neutral-infrastructure-for-our-financial-future)

&lt;br/&gt;

以太坊2.0不是万灵药，但其不偏不倚的平台设计和机制可能会解决一些社会问题。

### 观点

我们现在正处于社会、政治和经济前所未有的动荡时期。去中心化金融设施正为数十亿美元的价值提供动力并建立了数千家公司，随着去中心化金融设施的发展，我们需要认识到我们周围环境的不稳定性。我们现在创建的系统、协议和激励机制可以不那么容易受到审查制度、政府权力过度延伸、以及错误信息的影响。

以太坊 2.0 的设计有许多吸引人的属性，使它非常适合成为应对充满变数的未来的、可靠的中立基础设施，而不是一个有偏向的平台。个人、企业和政府应该对以太坊 2.0 有信心，在遭遇个人或国家级别的攻击时它仍然能继续运作。它是构建经济与金融设施的坚实基础。

从更广泛的社会经济背景来看，Eth2 的功能尤其具有价值：

- 通过大多数人的共识进行治理
- 面对审查时，表现稳健与性能良好
- 去中心化经济的可靠资金
- 赋予和实现自我主权

&lt;br/&gt;

## Eth2 具有可靠的中立性

以太坊的联合创始人 [Vitalik Buterin](https://cointelegraph.com/top-people-in-crypto-and-blockchain/vitalik-buterin) 写了一篇[倡导](https://nakamoto.com/credible-neutrality/)可靠中立性或”达成公平的基本努力“的有力文章，这应该成为协议设计的指引性原则：

”请注意：这里要求的不只是中立性，而是可靠的中立性。也就是说，一个机制的设计不仅不会偏袒特定的人或结果，还有至关重要的一点是能够让大部分、不同背景的人信服这个机制起码会为了达成公平做出基本努力。“

如 Vitalik 继续写道：”像区块链、政治体系和社交媒体这样的机制旨在促成大规模的、不同人群之间的合作。为了让一个机制能真正成为这种共同基础，每个参与其中的人都必须能够看到其他所有人也能看到这个机制是公平的，因为每个参与者都想确认其他人不会第二天都抛弃这个机制。“

今天，如果说有什么是大家都[倾向于](https://www.pewresearch.org/fact-tank/2020/01/09/70-of-americans-say-u-s-economic-system-unfairly-favors-the-powerful/)认同的 (至少在美国)，那就是”经济体系非常不公平地倾向于强者“。而为了避免这种命运并保持可靠的中立性，以太坊 2.0 跟随以太坊的步伐，有意避开链上治理，而是倾向于通过大多数的共识进行技术治理。

这种设计决定有两个很好的特点：

- Eth2 有[大多数人的共识](https://en.wikipedia.org/wiki/Rough_consensus) (rough consensus) (找到大体上的一致意见，而不是简单的多数决原则) 及没有链上[治理](https://vitalik.ca/general/2018/03/28/plutocracy.html) (拒绝财阀统治)。这使得以太坊2.0 的治理难以被[控制](https://vitalik.ca/general/2017/12/17/voting.html)。它的设计决定了任何实体都难以迫使以太坊 2.0 偏向或审查其他人。
- 保持社区的团结是大多数人共识的最高优先级之一。大多数人的共识通常会尽可能避开非常有争议性的变更，因为往往难以在这些问题上取得大多数人的共识。这使得大多数人共识的决策空间主要在技术性议题上，它们主要基于事实与逻辑，并寻求把争议降到最低。

(编者注：rough consensus 首次由互联网工程任务租 IETF 使用，用以形容在做决定时使用工作组里的主流意见，而无须所有参与者的同意。)

大多数人的共识不仅适用于核心开发者群体或有他们决定，而是整个社区。以太坊历史上出现过很多次在重要问题上发出自己的声音并影响以太坊的发展方向。程序化工作量证明，或 [ProgPoW](https://hudsonjameson.com/2020-03-02-progpow-the-ethereum-community-speaks/)，是最新近的例子：核心开发者间取得实现它的大多数人共识，但社区不同意，最终它并没有执行。

在一个日益两级分化的世界里，以太坊 2.0 无法偏向或损害任何人、实体或群体的利益，因为它首先没有可以这样做的机制。

&lt;br/&gt;

## 面对审查时，Eth2 表现稳健与性能良好

赛弗朋克 (Cypherpunk) 总是担心政府的审查，但最近的情况表明，审查制度还来自个人、企业和机构。以太坊 2.0 正开始支持另一个完整的金融系统，这使得在面对这种类型的攻击时，以太坊 2.0 能够保持运行这一点变得前所未有的重要。

最重要的是，以太坊 2.0 把活性放在正确性之前。以太坊 2.0 研究员与技术开发者 Carl Beekhuizen 在他的文章里[概述](https://blog.ethereum.org/2020/02/12/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)了 Eth2 是如何在出现严重中断致使大量验证者离线、网络无法敲定区块的情况下仍然继续产生区块的。这种稳健性使得即使遇到大规模网络中断，Eth2 上极其重要的事务功能都能保持运行。

稳健性也是为什么 Eth2 的设计对离线时间的宽容度如此高的原因。短暂的、不相关的离线时间 (数分钟、甚至数天) 对奖励的影响都是相对小的。在离开平台、服务中断、遇到攻击这些情况下，验证者可以安心修改设置或迁移节点。

在 Eth2 上，验证者是默认匿名的，且不存在委托。当有人试图进行审查时，他们将很难胁迫在全球分布的、数量足够多的匿名验证者在很长一段时间内执行他们的意愿。

&lt;br/&gt;

## Eth2 是去中心化经济的可靠资金

在一个可以不负责任地印钞票和资产疯狂膨胀的时代，专家们对该如何最好地保护自己财产和应该把你的储蓄投资在哪里持不同意见。美联储多次[表示](https://twitter.com/ben__rickert/status/1242007814186254336?lang=en)“美联储里有无限量的现金”，也就是说它可以随意[印](https://www.youtube.com/watch?v=ff6SDsaS7rI)任何数量的美元，这导致很多人质疑美元的长期经济获利和他们储蓄的安全性。

![reliable money](https://i.ibb.co/0Qn715k/reliable-money.webp)

Ether ([ETH](https://cointelegraph.com/ethereum-price-index)) 通过挖矿奖励来激励人们参与到以太坊里。它也是建在以太坊上的去中心化经济的基础资产，作为基础交易对、借贷抵押品等。

Eth2 是在这个基础上设计的，还在两方面扩展 ETH 的货币特征：

- Eth2 的通货膨胀率预计低于1%，是通货膨胀率最低的协议之一，当然远低于美元。
- [EIP-1559](https://cointelegraph.com/news/a-london-tour-guide-what-the-eip-1559-hard-fork-promises-for-ethereum) (很可能在过渡到 Eth2 之前在以太坊主网启动) 将使 ETH 变得更稀缺，因此随着 Eth2 的使用率提高可能会变得更有价值。

以太坊社区遵循最低可行发行量的政策，以保持链的安全性，免受像双花这样的攻击。这种方法与今天的经济学有非常明显的区别，在今天的经济里，央行对货币政策有非常大的控制权。用户、企业、和政府都对 Eth2 的运行非常有信心，因为它的基本单位发行只用于一个特定目的：安全性，且这个存在理由不会被重新利用来服务其他目的。另外，整个货币政策是广为人知的、公开的，因此每个人都有平等的机会去了解所有的协议规则，形成平等的理解。

&lt;br/&gt;

## Eth2 赋予和实现自我主权

今天，在不同政治光谱的许多人都感到很无力，因为[政治](https://www.statista.com/statistics/207579/public-approval-rating-of-the-us-congress/)和[经济](https://twitter.com/JustinAHorwitz/status/1248384733156741123)似乎跟现实生活完全脱钩。对很多人来说，加密世界的发展前景正改变这个动态的发展势头，将权力还给个人。尤其是 Eth2，在这里大放异彩。

Eth2 允许任何个人、企业或政府运行验证者节点、主动加入协议的规则并为其他参与者执行这些规则。它使单单作为一名消费者难以拥有的所有权、信心和自我主权感成为可能。它还让所有实体可以去信任地构建和验证状态，这使得我们所有人基于同一套事实工作——这在今天的世界上是非常罕见的。

Eth2 不对验证者集设上限，只需要 32 个 ETH 就可以启动一个验证者。尽管不是平等地每个人都可以参与，但这个总额不是不合理的，因为运行一个验证者等于允许一个实体永久地支持这个去中心化经济体，同时以相当于没有风险的回报率赚取 ETH。对于那些持有少于 32 个 ETH的人 (大多数的人)，他们可以把资金集中起来使用 Kraken、Rocket Pool、或其他质押服务来参与到 Eth2 里。


*这篇文章不包含投资建议或推荐。每项投资和交易行动都涉及风险，读者在做决定时应进行自己的研究。*

*这里表达的观点、想法和意见仅代表作者本人，不一定反映或代表 Cointelegraph 的观点和意见。*

*作者感谢 Vitalik Buterin 对这篇文章提供的反馈。*




</content:encoded></item><item><title><![CDATA[图解以太坊发展路线]]></title><description><![CDATA[可视化 eth1->eth2 合并、数据分片、以 rollup 为中心的未来]]></description><link>https://www.ethereum.cn/Eth2/the-road-to-ethereum</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/the-road-to-ethereum</guid><pubDate>Wed, 28 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [barnabe.substack.com](https://barnabe.substack.com/p/eth2)

&lt;br/&gt;

以下内容改编自 4 月 9 日 (周五) 的演讲


本文讲的是通往以太坊的未来之路。Eth2 开发者团队将当前的以太坊称为 “eth1”，也就是现在我们所熟知的 PoW 链。而未来的以太坊既不是 eth1，也不是 eth2，而是...以太坊：


让我们来梳理一下现在的以太坊：





![1](https://i.ibb.co/VgMxDJ0/1.png)
&lt;center&gt;图：当前以太坊 (eth1链) 的运作方式&lt;/center&gt;


用户想要做一些事情 (“进行交易”)，因此将其交易发送给矿工，矿工把它们打包成块并添加至一条不断增长的链中。矿工运行 PoW 共识机制 ^[我听说 PoW 不是一种共识算法，但我认为如果使其定义超载了，将其描述为共识机制是没有问题的。]，以决定谁来添加下一个区块， 并执行区块中的交易，以确保交易是有效的。

![2](https://i.ibb.co/S3tYGrG/2.png)
&lt;center&gt;图：PoS 机制代替 PoW 机制&lt;/center&gt;

也不全是糟糕的，但我需要一个吸引人的题目

PoW 需要大量硬件运行密集的计算，造成了过高的能量消耗。我们并不会像大多数加密货币批评者那样谈论资源浪费 (他们通常的说辞是“为什么我们要用一种消耗国家资源的支付系统”？)，我们所倡导的是，既然我们能够以相对较小的消耗去做同样的事情，那我们就应该这样做。

所以我们选择向 PoS 过渡，仅用一个小型服务器代替大量的挖矿设备，用验证者代替矿工。

![3](https://i.ibb.co/pnb2q7K/3.png)

&lt;center&gt;图：如果他们没有做好第二步的验证工作，他们将会损失资产&lt;/center&gt;



那第二步是怎样运作的？验证者到底在验证什么？

![4](https://i.ibb.co/w7wgVcV/4.jpg)

&lt;center&gt;图：将以太坊的活动分为两部分 (共识层和执行层)&lt;/center&gt;


共识层确保每个人就某个正确的数据达成一致。而执行层实际上会解释这些数据，使其有意义。“数据”即与区块链任何形式的交互，如，部署一个合约、在交易所进行交易、发送支付交易等等...

区块链的核心是在链中添加新的区块。当有新的区块添加时，该区块之前的状态会向区块后的状态迁移。这个状态汇总了从区块 0 到 N 的所有数据。

例如，如果该状态保存着记录 Alice 和 Bob 余额的账本，而新区块包含了 Bob 向 Alice 支付 10 代币的记录，那么这个新区块被添加至区块链之后，状态将会记录新的余额信息。“State after block N+1” (区块 N+1 之后的状态) 那个图中右边的虚线斑点就代表着添加了新区块之后的变化，这时可能会修改现有状态 (例如，Alice 和 Bob 的余额)，或创建新的状态 (部署一个新的合约，或将 Carol 添加到账本...)



![5](https://i.ibb.co/fNvR4Ht/5.png)

&lt;center&gt;图：第一步将共识层与执行层解耦；第二步从 PoW 向 PoS 转移&lt;/center&gt;


Rollups 和 eth2 主要为了解决上图计划中的第一点：去除共识层与执行层的相关性。那么这项工作的进展如何？

![6](https://i.ibb.co/M13Ty4z/6.png)

&lt;center&gt;图：第一步已完成&lt;/center&gt;


自 2020 年 12 月以来，我们同时拥有着两条链在进行：


- 第一条，是 PoS-共识链 (又名，信标链)

- 第二条，是我们可靠的 PoW-共识+执行链 (又名，eth1)

他们同时运行，但他们也可以相互通讯。但是，目前还没有实现这种功能...



![7](https://i.ibb.co/wdJ7KBQ/7.png)

&lt;center&gt;图：如何成为一名验证者&lt;/center&gt;


想要成为 PoS-共识的验证者，PoW-共识+执行链上的用户需要在存款合约中锁定 32 ETH，这会自动转移到 PoS-共识链中。一旦验证者被激活，他们就可以开始验证工作和获取奖励了。



![8](https://i.ibb.co/sQbS0r2/8.png)

&lt;center&gt;图：合并&lt;/center&gt;


这种无法通讯的情况希望不会持续太久。“合并”将 PoS-共识链和 PoW-共识+执行链永久地桥接起来，也就是说验证者可以为执行层生产区块。合并后，我们拥有两种链：

-  PoS-共识链
-  一条基于 PoS 的执行链 (即 “eth1” 链)


合并之后，PoS-共识链的验证者将能够赎回以及提现他们的质押存款和奖励，并将其发送回到基于 PoS 的执行链中。^[[PhiGo](https://twitter.com/ph_igo) 在[推特](https://twitter.com/ph_igo/status/1384543184655683586)写道，合并后 (PoW 退出以太坊) 不一定就可以提取质押存款。的确，目前合并计划更专注于合并部分，而“提款”问题是一项独立但相关的研究工作。]

因此我们需要从 PoW 环境中转向完全成熟的 PoS 环境。但是请注意，这一转变并没有怎么提高区块链的带宽 (一个区块打包多少执行交易)，这是分片要解决的问题。在此之前，让我们来讨论一下，当我们只有一条执行链时，有哪些方法可以提高执行的可扩展性。



![9](https://i.ibb.co/bWyyp98/9.png)
&lt;center&gt;图：将执行放在链下；将数据放在链上&lt;/center&gt;

&lt;center&gt;(颜色总结：共识=紫色，执行=绿色，数据=黄色)&lt;/center&gt;


说到 rollups，这是众多可用的扩容解决方案之一，但从协议设计的角度来看，这种解决方案可能提供了最优的折衷方案。这种方案的想法很简单：通过将数据存储在链上 (这些数据用于重建状态转移的执行) 来综合地处理状态转换，并且将状态的执行放到链下。如果有人不同意执行的结果，或者有人一开始就忘记执行，数据就在链上供所有人使用 (可以重新计算)，这是完全无需许可的！

更准确地说，执行所需的数据 (交易输入) 与其载体 (交易) 分离，并以节省空间的方式 “捆绑”起来。同时，rollups 在执行链 (eth1) 之外运行，提交并执行数据。

![10](https://i.ibb.co/nmCvRx2/10.png)

&lt;center&gt;图：已有几个 rollups 方案部署，还要更多正在研发中&lt;/center&gt;


用户需要往执行链 (&quot;eth1&quot;) 上的 rollup 合约质押一笔资产，才能够进入到 rollup 里，用户可以在里面进行交易。完成之后，用户可以将资产从 rollup 中转回到执行链中。

Rollups 的替代方案是什么？大家看一下上图，让我们来假设一下，如果我们用一串串平行的红色来代替那些垂直的黄色链会怎样？比如说，如果我们复制了几条 eth1 链，然后它们之间并排运行会怎么样？

这里的问题是如何处理并行运行的多个执行链。[如果某条链上发生了什么事情，而其他人需要知道怎么办呢？](https://ethresear.ch/t/cross-shard-defi-composability/6268?u=barnabe)这是分片面临的一个非常棘手的问题，或者说对于在多个链中执行的方案来说都需要克服的问题。

&quot;Rollups 之间并没什么不同&quot;，读者可能这么认为，本质上来说这没什么错。但是当你想要从一个 rollup 转到另一个 rollup 上进行交易时，同样棘手的问题又出现了。然而，关键在于，现在已经存在几种 rollup 设计了，并且这些解决方案的可探索空间仍非常广泛。既然如此，为什么不让 rollups 先进行试验，然后再引入一种协议级别的方法呢？

这让我们来到了...



![11](https://i.ibb.co/w4kXqS6/11.png)

&lt;center&gt;图：使用分片来存储 rollup 发布的数据&lt;/center&gt;


读者应该听说过区块空间不足的事吧？ Rollups 确实需要发布它们的数据，但是 eth1 区块空间十分稀缺！而且，就像我们所讨论过的，跨分片是非常难的。那为了解决这个问题，我们可以用分片来保存 rollup 需要发布的数据。届时很可能会有 64 个分片，即现在可用带宽的 64 倍。而且一个分片区块可能会比 eth1 链区块当前能够容纳更多的数据量。

我需要强调一下，这并不意味着我们将永远排除执行分片这个方案。[以 rollup 为中心的以太坊路线图](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)是我们中短期的发展目标，直到我们找到更好的加密基元，以保证能够实现跨多条链的执行分片。这个方案很吸引人，需要团队很多人花费很长的时间去研究。与此同时，我们可以使用 rollups。



![12](https://i.ibb.co/N2QJ8QD/12.png)

&lt;center&gt;图：每个 rollup 都有自己的执行环境&lt;/center&gt;

这方面还有很多工作要做！首先我们不要忘记，“合并”和“数据分片”都是非常复杂的工作，需要多个团队同时从事其中一项或两项工作。但在 rollup 方面，也仍有一些有趣的问题有待探索，我仅列出了一部分：


- [实现用户和 rollups 之间的大规模迁移是一个很酷的概念](https://ethresear.ch/t/mass-migration-to-prevent-user-lockin-in-rollup/7701)。如果用户有足够多的公共交通工具令其往返 Layer1  (eth1) 和 Layer2 (rollups)，那么为什么还要自己开车往返呢？这非常不经济。


- 如果用户觉得可以在另外一个 rollup 上做一些更酷的东西 (ta 所在的 rollup 是没有的)，难道 ta 一定得先提现至 L1，然后再从 L1 中存款进这个 rollup 中吗？这未免太浪费了。


- 对于当前的链上操作来说，rollups 极大地提高了网络带宽，这是毫无疑问的。但是 rollups 仍不是用户所期望的无限高速公路那样。仍有很多人想要在 rollups 上做很多事情，有时甚至是同时做的！因此 rollups 将不可避免地面临拥堵问题，但与 L1 这个尤其拥堵的市场不同 (很快就会上线 [eip1559](https://barnabe.substack.com/p/congestion-control-and-eip1559)了)，rollups 的可探索空间更加广泛。


- 说到拥堵问题，虽然这更特定于协议层面，但是我们还将看到 [EIP-1559 扮演交通警察的角色](https://github.com/ethereum/eth2.0-specs/issues/1280)，来规定每个数据分片上发布多少数据，确保验证者可以处理这个数据量。如果读者觉得 eth1 上运行 EIP-1559 很酷，那么请期待届时会在 64 条分片链上同时运行 1559。那么，rollups 应该在哪里发布它们的数据呢？是仅发布在单个分片上，使数据仅在该分片上可获取？还是说发布在多个分片上，这样就可以受益于计划推出的“错开分片区块生产” ([shard staggering](https://ethresear.ch/t/simple-approach-to-incentivizing-shard-staggering/9149)) 方案？这个方案由 Vitalik 提出，即分片轮流出块，这样发布数据时，距离新区块的生成时间为几百毫秒以内，这对于需要“快速敲定”的应用来说是理想选择。

  


*特此感谢 Danny Ryan 和 Sacha Saint-Leger 的建议。*

</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/4/26]]></title><description><![CDATA[伦敦升级内容与时间确定，信标链首次事故损失数据]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-26/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-26/</guid><pubDate>Mon, 26 Apr 2021 00:00:00 GMT</pubDate><content:encoded>![23cover](https://i.ibb.co/mrnCZKS/56e0f06f7d78f599194b2056392b723.png)

&lt;br/&gt;

# Eth2

**信标链首次事故**

关于这件事的始末与教训，可以看最新一期的《[Eth2 进展更新](https://www.ethereum.cn/Eth2/wnie2-2021-4-24)》。

本期七日谈旨在提供一些来自 Prysmatic Labs 的补充信息。

Prysmatic Labs 在推上表示这次的事件是非常罕见的情况，并已发布了最新修复版本 v.1.3.8-hotfix-6c0942。

一些原始数据显示，此次事故造成的总损失接近 15 个 ETH。由于缺乏区块空间而丢失的证明使平均每个验证者损失 122950 gwei，以今天的价格即大概 0.30 美元 。

以下是一些关键事实：

- 没有验证者被罚没
- 对信标链的敲定没有影响
- 参与率还是很高 (最低点也有 84.8%) （编者著，此数据与 Ben Edgington 编写的最新一期《Eth2 进展更新》有出入。)
- 大多数验证者丢失 2 到 3 个证明，不管哪个客户端类型
- 这次不像是一次恶意或故意的攻击

来源：https://twitter.com/prylabs/status/1386011312849833984?s=20

这次事件后，Eth2 的核心开发者 Danny Ryan 和 Justin Drake 都在推特上呼吁质押者需要重视客户端多样性问题。

&lt;br/&gt;

**Altair 升级的时间**

根据 Alex Stokes 对 4 月 21 日 Eth2 会议的笔记，信标链第一次升级 Altair 的时间很可能是今年 7 月底到 8 月，与伦敦升级相近，且必须在”合并“前进行。

来源：https://twitter.com/ralexstokes/status/1385295236885204997?s=20

&lt;br/&gt;

# Eth1

## 伦敦升级

根据 Tim Beiko 对 4 月23 日那次非常规核心开发者会议的笔记，考虑纳入到伦敦升级的 4 份 EIP 的进展如下：

EIP-2537: 关于 BLS 预编译，把它纳入伦敦升级有两个忧虑——第一是迁移到一个新的密码库需要更多的测试；第二是会引起一些 gas 价格变更。尽管这些都是很大的变更，但仍需要更多工作，而这可能会延迟伦敦升级。问题是，如果不把它纳入伦敦升级的话，应该什么时候把它加入主网。

EIP-2677: 是一个简单变更，但没有得到强烈支持，且由于它会增加测试开销，最终确定不纳入到伦敦升级。

EIP-3403: 关于某些特别情况以外，移除操作码 `SSTORE` 和 `SELFDESTRUCT`  的 gas 返还。因为 gas 返还会增加区块 gas 消耗，且1559 也会，之前反对把它加入伦敦是出于安全性考虑。3403 的主要问题在于那些“特别情况”，因为把这样的逻辑加到客户端会增加代码复杂性，且容易出现漏洞。另一方面，完全取消 gas 返还会是一个非常大的变化，这也是 EIP-3298 不被纳入的原因。因此 Vitalk 和 Martin Holst Swende 正在写一份新的 EIP，提议把 `SSTORE` 的 gas 返还从 15k 降低到 4.8k gas，取消 `SELFDESTRUCT` 的 gas 返还，并将 gas 返还的最高额外执行量从 1/2 降到 1/5。这份提案能实现减少区块弹性、抑制像 gas token 这样东西的出现、降低与 3403 相关的执行复杂性。大家都对这些想法表示赞同，但鉴于还没有一份实际的 EIP，客户端团队需要在下周对其进行审阅。我们会在下周五的会议里对其进行讨论并作出决定。

EIP-3074: 情况与 2537 相似。

关于如何在保持伦敦内容精简、把“合并”作为首要任务、以及把社区想要的功能 (例如 3074 和2537) 部署主网间取得平衡，会议进行了广泛讨论，并得到以下三点共识：

1. 保持伦敦升级精炼、并计划在七月中旬及逆行不忘部署，内容仅包括 1559、3198、3238 和关于 gas 返还的 EIP。
2. 在做伦敦升级的工作时同时推进“合并”，并希望尽早实现“合并”。
3. 当伦敦升级完成后，开始下一个小型功能分叉——上海升级。

上海的内容应该是那些本来想纳入伦敦但来不及的 EIP。如果上海的进度早于 “合并”，就先部署上海升级；如果“合并”的进度更快，就先实现“合并”，推迟上海。

客户端团队表示伦敦和“合并” 的工作在平行推进中，并在两方面都取得不错的进展。伦敦部署主网后，他们会集中在上海升级的内容。

会议为伦敦升级定了时间表，并在下次会议决定区块高度。

![london](https://i.ibb.co/qnG8Mtt/London-timeline.png)

至于冰河世纪的推迟，现在的 EIP 是计划把它推迟到 2022 的第二季度。鉴于我们打算在今年部署上海升级或实现“合并”，我们同意把难度炸弹的爆炸时间提早，作为推动力。会议上，大家同意把时间设在 12 月。

来源：https://twitter.com/TimBeiko/status/1385613482402275331?s=20

&lt;br/&gt;

**EIP-3074 社区会议**

EIP-3074 的作者将主持一次社区会议讨论这份 EIP，目的在于教育那些与这份 EIP 有直接交互的团队 （例如钱包和中继器团队），讨论多种权衡、以及收集对这份提案的反馈。

时间：北京时间 4 月27 日 00:00

会议链接：https://us02web.zoom.us/j/83343120771?pwd=bW0wckdnUFdFTzE4SHZ2U0xvSXQ3dz09

持续时间：1小时

来源：https://github.com/ethereum/pm/issues/303

&lt;br/&gt;

# Layer2

**区块链数据索引项目 The Graph 推出 Scalar，降低查询费用**

去中心化数据索引和查询协议 The Graph 中，每一次查询都由索引者单独定价，由消费者 (通常是应用程序开发者) 付费。The Graph 的托管服务查询量在 2 月份超过 140 亿次，3 月份超过 190 亿次。

因而经过两年的研发后，The Graph 基金会于 4 月 21 日宣布推出 Scalar 以解决需求量逐渐增大的问题。Scalar 是一个基于扩容解决方案 Connext Vector 协议构建的可扩展微交易解决方案，通过状态通道聚集以及压缩交易再发送至链上敲定，可以降低 The Graph 网络的 GRT 查询费用，提高查询速度。

来源：https://thegraph.com/blog/scalar


&lt;br/&gt;


**Layer2.finance v0.1 主网上线**

状态通道扩容解决方案 Celer Network 的 Layer2.finance v0.1 于 4 月 23 日上线主网，用户现在可以在 app.l2.finance 上免费 (启动的 60 天内) 使用 DeFi 协议 Aave、Compound Finance 和 Curve Finance。并且对于另外对于前500名符合条件的用户，Celer Network 将一并报销用户从以太坊主网转到 layer2.finance 的手续费。

来源：https://blog.celer.network/2021/04/22/the-layer2-finance-v0-1-mainnet-launches-democratize-defi-simple-and-zero-fees/

&lt;br/&gt;


**Tether (USDT) 在扩容解决方案 Hermez 上推出**

Tether (USDT) 已在 zk-rollup 扩容解决方案 Hermez Network 上推出，希望借此减轻以太坊 gas 费的压力 (Tether 合约一直都是以太坊中 gas 费使用最多的账户)。

![tether](https://i.ibb.co/PWNgBPR/Tether.png)

&lt;center&gt;图分别为在以太坊、Tron 和 Omni (基于比特币构建) 上的 USDT 转账总值。&lt;/center&gt;

&lt;center&gt;cr：Coinmetrics&lt;/center&gt;

来源：https://cointelegraph.com/news/tether-launches-on-hermez-rollup-as-ethereum-starts-falling-behind

&lt;br/&gt;

**Curve Finance 加入 Polygon 的 DeFi 生态**

DeFi 流动性提供协议 Curve Finance 在扩容解决方案 Polygon (原 Matic) 上发布了一个流动性池，池中的流动性同时也存在 Aave 上。因此在 polygon.curve.fi 中，用户可以进行 DAI、USDC、USDT 之间的 swap，并且赚取交易费和 MATIC 代币。

来源：https://twitter.com/0xPolygon/status/1384501290059722756

&lt;br/&gt;

路印协议即将推出跨 L1、L2、CEX 交易的解决方案 Ethport，此方案将于 2021 年 5 月路印发布 3.7 版本时推出。以下是 Ethport 的功能：

1. 路印 zkRollup 用户可以实现直接从 L2 以极低的手续费与 L1 DApps 交互；
2. 支持跨 L2 转账；
3. 中心化交易所可使用标准 Layer 1 接口直接提款到 Loopring zkRollup。

来源：https://medium.com/loopring-protocol/ethport-loopring-l1-l2-cex-8bb83c9032e3

&lt;br/&gt;

**Layer 2 Rollup辩论：zkSync、Optimism、Arbitrum和Starkware**

2021年4月23日，The Delphi Podcast 主持人和 Delphi Ventures 基金管理人 Tom Shaughnessy 邀请当前最热门的以太坊 Layer 2 Rollup 扩容项目负责人和知名投资分析师，进行了一场精彩绝伦的辩论。

辩论文字整理：https://mp.weixin.qq.com/s/VLeAV39MNSW1qmtA_UKJCA

原文音频：https://fiftyonepercent.podbean.com/e/ethereum-layer-2-rollup-debate-optimism-starkware-arbitrum-and-zksync/

&lt;br/&gt;

# DeFi

**Maker 发行首笔以现实世界资产为背书的贷款**

此前，MakerDAO 社区提议增加某种 ERC-20 代币作为 Maker 借贷协议的抵押品，该 ERC-20 代币代表着某房地产资产池子中的股权。4 月 14 日，该提议通过了。这代表着将现实世界的资产引入 DeFi 中使用的第一步，也是将价值数万亿美元的实物资产引入开放的金融生态系统的重要一步。4 月 22 日，借贷协议 Centrifuge 与 Maker 的合作正式上线，New Silver 成为第一个连接 DeFi 和现实世界资产的池子。

借贷协议 Centrifuge 创建了一个名为 Tinlake 的借贷平台。在这个平台，资产发起人可以将真实世界的资产转化为通证代币，从而在区块链世界中进行贷款融资。目前 Centrifuge 的合作对象包括 MakerDao、AAVE 等。

![centrifuge](https://i.ibb.co/TrWGsdK/Centrifuge.png)

&lt;center&gt;cr：Centrifuge&lt;/center&gt;

金融机构 New Silver 率先在 Tinlake 平台中创建了一个房产修复转卖贷款池 (fix and flip loans)，依托 MakerDAO 作为信贷设施完成第一笔贷款融资。目前，Silver 在 Maker 的信用额度为 500 万美元，铸造并贷出了以现实世界资产 (Real World Assets, RWA) 为背书的 DAI。

来源：https://medium.com/centrifuge/defi-2-0-first-real-world-loan-is-financed-on-maker-fbe24675428f

&lt;br/&gt;

**以太坊 DeFi 用户地址累计已超过 200 万个**

根据 Dune Analytics 的数据显示，以太坊 DeFi 用户地址累积超过 200 万 (这里的用户统计的是以太坊唯一地址)。此次统计包含了一些主流 DeFi 项目：Uniswap、Compound、1inch、Balancer、Kyber、SushiSwap、MakerDAO、dYdX、Aave、Curve、Yearn 等。

![defi-users](https://i.ibb.co/j6ZX3bn/defi-users.png)

来源：https://duneanalytics.com/rchen8/defi-users-over-time

&lt;br/&gt;

# 生态

**gas limit 提升至 1500 万**

4 月 20 日，Bitfly 发推表示，鉴于柏林升级提高了效率，他们相信现在把 gas limit 从12,500,00 提高到 15,000,000 是比较安全的。并这次提升 gas limit 视为一次社区的重大里程碑。

评论里有人问为什么提升 gas limit 对社区有利，Tim Beiko 回复解释道：

提升 gas limit 允许更多的交易打包到一个区块里，这可以降低交易费或让更多人在某个特定 gas 价格做交易。但是，这也会增加以太坊的状态大小和使节点更难运行。这就是为什么需要在提高用户体验与维持网络安全之间取得平衡的原因。

![gas-limit](https://i.ibb.co/chm5CS1/gas-limit.png)

来源：https://twitter.com/etherchain_org/status/1384450774428700672?s=20

&lt;br/&gt;

**为什么 gas 费这么低？**

Anthony Sassano 列出了几个最近 gas 费这么低的原因：

- gas limit (区块大小) 提高了20%
- Flashbot 允许 MEV 提取者绕过交易池
- 二层网络 (或其他链) 把交易放到链下
- 市场最近比较平静，自然导致更少的网上活动

![gasfee](https://i.ibb.co/D161KTt/low-gas-fee.png)

你们觉得呢？

&lt;br/&gt;

**Hudson Jameson 宣布正式离职**

4 月 21 日，Hudson Jameson 发推宣布离开以太坊基金会，结束他在基金会接近 5 年的工作，是时候开启人生的新篇章。关于他的去向，他表示会先休息两个月，但不会离开以太坊生态，且仍然会继续 EthCatHerder 和 Zcash Open Major Grants 的工作。

&lt;br/&gt;

**美国著名饶舌歌手 Eminem 发布 NFT 系列**

Eminem 在 NFT 平台 Nifty Gateway 上发布了 NFT 系列，分别有限量版本、拍卖版本以及开放版本，开放版本已结束销售。

![nft](https://i.ibb.co/wLbmGNJ/eminem.png)

来源：https://niftygateway.com/collections/eminemopens

&lt;br/&gt;
&lt;br&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2 进展更新 （截至2021/4/24)]]></title><description><![CDATA[信标链第一次事故分析，计划7月中旬进行主网伦敦升级]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-4-24</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-4-24</guid><pubDate>Sun, 25 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210424)

&lt;br/&gt;

# 首推

这周最不容错过的是观看 EthGlobal 的“[合并峰会](https://www.youtube.com/watch?v=Yk39hNavhyM)”！详情看[下文](https://hackmd.io/@benjaminion/wnie2_210424#EthGlobal-Merge-Summit)。

&lt;br/&gt;

# 信标链

## 🚨 快讯 🚨

信标链出现了[第一次事故](https://twitter.com/prylabs/status/1385840170017112064)。在北京时间 4 月 24 日 09:36 到 11:28 期间，大量区块丢失了。正常来说，信标链上只有大概 1% 的区块会出现丢失。在这个期间，接近70% 的 slot 是空的 (560 个 slot 里丢失了 403 个)

[![A list of missing blocks.](https://benjaminion.xyz/images/210424_missed.png)](https://i.ibb.co/wJ4SY87/beaconcha-in.png)
*在这次事故中，有大量丢失区块。(图片来自 [beaconcha.in](https://beaconcha.in/)。点击看大图)*


区块链就是用来生成区块的，所以真的是个严重问题。但是，信标链一直在不断敲定区块，而且似乎证明的生成并没有受影响。但是，只生成这么少的区块，剩下的区块提议者在他们的区块里没有足够的空间把所有的等待证明打包进去，所以参与率有时会下降到危险的程度。信标链的参与率一直都保持在 99%左右，因此看到这种程度的下降的确是相当令人震惊的。

[![Graph of participation rates showing a large drop during the incident.](https://benjaminion.xyz/images/210424_participation.png)](https://i.ibb.co/Y70ZjyD/metal-albert.png)
*在事故期间，区块空间不够，参与率造成参与率下降。
( 数据来自[Metal Albert](https://hackmd.io/@benjaminion/wnie2_200501#And-finally…)。点击看大图)*

有人很快过来责备我[乌鸦嘴](https://twitter.com/benjaminion_xyz/status/1383765895965593607)，但发现[这个漏洞是出现在最多人使用的 Prysm 客户端上](https://github.com/prysmaticlabs/prysm/issues/8298)。问题的根源与给 Eth1 存款合约的状态投票有关：如果你无法看到存款合约的正确数据，你无法提议区块。当网络给一个新的存款根投了票 （这种情况一般每 7 小时发生一次），这次事故就马上自行解决了。Prysm 团队发布了一个[快速修复](https://github.com/prysmaticlabs/prysm/pull/8809)的 PR，但在它发布和大多数用户都升级前，这种事还可能发生，尽管几率很小。

这次事件对质押者有四个方面的影响。但总的来说，影响都是相对小的。它其实可以发展到非常严重的地步。

1. 对于被抽到做提议区块且使用 Prysm 客户端的验证者，他们在这个期间丢失了区块奖励。
2. 对于所有的验证者，区块空间的减少使得所作证明被打包到链上的机会会严重减少，导致遭受不参与的惩罚。
3. 对所有的验证者，所作的证明尽管被打包到链上但是严重延迟的，他们所获得的奖励会减少。
4. 对于所有验证者的最后一个影响，由于整体的奖励水平是随参与率升高而上升的，因此在这个期间所有验证者的奖励都减少了。

这是 Prysm 团队的[最新更新](https://twitter.com/prylabs/status/1386011312849833984) (看上图，我的节点所显示的参与率下跌情况比他们报告的还要严重)。

### 教训

教训：大家都是时候把客户端多样化重视起来。

我们一直都在强调这一点。在 Prysm 的一个漏洞差点使整个 Medalla 测试网崩溃这件事之前就强调了；在 Prysm 的一个漏洞导致 Spadina 测试网创世遭遇无法敲定这件事之前就强调了。这些都不是 Prysm 的问题：这是让一个客户端控制超过 70% 的网络造成的一次集体故障。运行另外三个产品级客户端是完全没有坏处的。相反只会有好处，无论是对网络健康，还是你的[个人收入](https://twitter.com/benjaminion_xyz/status/1377904793910448132)而言。

如果你在运行主流客户端 （现在是 Prysm)，那么现在你需要行动起来了！客户端多样性不是别人的事，而是*你的*事。如果你在使用质押服务，你可以对它们进行游说。如果你在运行质押服务，可以随时联系[我们](mailto:ben.edgington@consensys.net)。

## Rayonism 项目

其他方面的消息，[Rayonism](https://rayonism.io/) 黑客松项目正在进行中，并取得重要进展。Protolambda 在 “合并峰会”给出了一个很好的概述。再提醒一下，Rayonism 项目旨在一起构建一个多客户端开发者测试网，展示 PoS 合并、分片、存款提款、甚至把 optimistic rollup 也加进去。

总的来说，Eth1 (执行层) 和 Eth2 (共识层) 的客户端都有很强的开发者参与。目前的进展很不错，下周可能会推出一个短期的多客户端开发者测试网，下周末会推出一个更长期的开发者测试网。

详细可以看 [GitHub 代码库](https://github.com/ethereum/rayonism) ，也可以根据[合并测试网教程](https://github.com/protolambda/mergenet-tutorial)尝试自己运行一个合并测试网。目前，在 Eth1 (执行层) 一边你可以运行 Catalyst/Geth 或 [Nethermind](https://twitter.com/nethermindeth/status/1385169437666447361)，在 Eth2 （共识层）一边你可以运行 Teku 或 Lighthouse。

## &quot;合并&quot;


“合并” 是我们将以太坊工作量证明 (PoW) 链完全迁移到权益证明 (PoS) 链的节点——把 PoW 链“合并”到信标链里。

现在围绕”合并“的讨论重点是时间。4 月 22 日上周五，我们开了一次非常规[核心开发者会议](https://youtu.be/C9hzAYkklQM?t=246)，就此进行讨论。讨论没有一个确切的结果，因为需要在把一些很好的 EIP 加入主网与实现”合并“间取得平衡，而且两边都有很多工作需要进行。Rayonsim 项目的成果也是部分的影响因素。

Tim Beiko [对这次会议进行了总结](https://twitter.com/TimBeiko/status/1385616588498374656)。计划大概是这样：在 7 月中旬 (目标是 14 日）实现伦敦升级，此后是一个小型的 Eth1 功能分叉 (上海升级) 与”合并“工作同时进行。如果”合并“ 有希望可以实现，那么会优先实现”合并“。否则，先进行上海升级。

有人提到”合并”最早发生在十月，但这似乎不太可能。不过，今年年底还有有机会可以实现的。

## Staking

[标准免责声明适用于以下所有内容。我没有用我的 ETH 尝试过以下任何项目；请读者务必做好研究与调查。]

[Abyss Finance](https://abyss.finance/) 带来了一些有趣的东西。首先是“[批量存款工具](https://abyss.finance/eth2depositor)”。按照 Launchpad 的标准步骤生成质押文档之后，使用该工具就可以通过一笔交易完成所有存款，而不需要在 MetaMask 上点击多次以获得授权，这无疑是巨大的进步。与单独存款相比，使用批量存款的方法确实可以省去一大笔 gas 费。

其次就是一种资助验证者托管的[新方法](https://abyss.finance/hosting)。Abyss 表示，如果用户将 DeFi 流动性代币在其方案中锁定几周，Abyss 将永久地为用户免费提供验证者托管服务。他们使用 [Allnodes](https://www.allnodes.com/) 的托管服务，这我是可以担保的，因为 a) Allnodes 运行 Teku 客户端；b) 在我追踪的 staking 服务中，他们的性能始终[名列前茅](https://consensys.net/blog/codefi/institutions-are-earning-8-5-apy-for-staking-on-ethereum-2-0/)。

说到 Allnodes，他们还[集成了硬件钱包 Ledger Nano X](https://wallet.allnodes.com/eth2/generate), 利用其新 BLS12-381 功能，用户可以直接从自己的硬件钱包中存款，并安全地管理提款密钥。

现在我们可以指定一个 Eth1 合约作为质押存款的提款地址，去信任的质押池正逐渐成为现实。这允许用户质押 &lt;32 ETH 的数额。我得知了一些质押池的新消息：

- [Stakewise](https://stakewise.io/) 已经[上线主网并开始运作](https://stakewise.medium.com/stakewise-announces-trustless-staking-and-end-of-the-bootstrapping-campaign-540b27e3d534)了。

- [Rocketpool](https://hackmd.io/@benjaminion/wnie2_210424) 也即将上线了。他们刚发了 Rockpool 介绍系列的[第三篇](https://medium.com/rocket-pool/rocket-pool-staking-protocol-part-3-3029afb57d4c)：RPL &amp; 代币经济。

- Paradigm Research 刚发布了一篇关于[质押池和质押衍生品](https://research.paradigm.xyz/staking)的报告。其结论对去中心化质押池来说非常有利。文章以 [Lido](https://lido.fi/) 及其质押代币 stETH 作为案例研究。

## 经济学

大家似乎最近才意识到，在合并之后，除了验证和生成信标链区块的奖励之外，Eth2 验证者还将赚得交易费用。在撰写本文时，我快速浏览了一下 [Etherscan](https://etherscan.io/blocks)，目前每个区块的交易费用平均约为1个 ETH，这比当前的信标区块奖励高出 250 倍。当然，EIP-1559 将减少区块奖励，但还有[矿工的可提取价值](https://youtu.be/Yk39hNavhyM?t=15936)，这有可能会显著地提高奖励。

无论如何，合并使得 Staking 经济学发生了实质上的改变。合并之后，验证者的年收益可能至少会有 [25%](https://twitter.com/drakefjustin/status/1384124998084792324) (计算：https://docs.google.com/spreadsheets/d/1FslqTnECKvi7_l4x6lbyRhNtzW9f6CVEzwDf04zprfA/edit#gid=0) 甚至会[更高](https://www.reddit.com/r/ethstaker/comments/muepnz/eth_20_validator_152_apr_after_the_merge/)。而现在只有 [7.85%](https://twitter.com/Eth2Bot/status/1385745511894896641)。

&lt;br/&gt;

# EthGlobal 合并峰会

EthGlobal 主办的 [Scaling Ethereum](https://scaling.ethglobal.co/) 黑客松正在进行中，而在 4 月 23 日有一场 “合并峰会”。

[完整视频](https://www.youtube.com/watch?v=Yk39hNavhyM)已经上传。下面给出了每段演讲的链接：


- [16:45](https://youtu.be/Yk39hNavhyM?t=907) 未来就是现在 - 从大都市 (Metropolis) 到宁静 (Serenity), *Hsiao-Wei Wang* [[幻灯片展示](https://docs.google.com/presentation/d/1tKKfWC4ZHQbrI5isZta8Iusz2n_1plvbR0w4LvNpQQU/edit#slide=id.p)]

- [17:15](https://youtu.be/Yk39hNavhyM?t=2446) 合并的状态, *Lakshman Sankar*

- [17:45](https://youtu.be/Yk39hNavhyM?t=4065) Rayonism, *Diederik Loerakker (Protolambda)*

- [18:15](https://youtu.be/Yk39hNavhyM?t=5954) 讨论：以太坊共识的发展，*Danny Ryan、 Trent Van Epps、 Aftab Hossain*

- 18:45 中场休息

- [19:00](https://youtu.be/Yk39hNavhyM?t=9013) 保证: 没有缺点的客户端多样化，*Jim McDonald*

- [19:30](https://youtu.be/Yk39hNavhyM?t=10623) 信标链创世后，对以太坊质押的一些外行看法，*Superphiz*

- [20:00](https://youtu.be/Yk39hNavhyM?t=12645) 私密共享的验证者 - Eth2 验证者韧性的下一章节, *Mara Schmiedt*

- [20:30](https://youtu.be/Yk39hNavhyM?t=14038) Prysm 如何计划与其他 Eth1 客户端实现互操作性, *Terence Tsao*

- [21:00](https://youtu.be/Yk39hNavhyM?t=15936) 合并后的 MEV (并且有 Nethermind 和 Flashbots), *Tomasz Stanczak, Alex Obadia*

- [21:30](https://youtu.be/Yk39hNavhyM?t=18078) 合并之后会发生什么? *Vitalik Buterin* [预告: Ethereum 3.0 🙂](https://assets.hackmd.io/build/emojify.js/dist/images/basic/slightly_smiling_face.png)]

这是一组高质量的演讲，值得大家花时间好好看看。

u/Liberosist 发布了[一些笔记](https://www.reddit.com/r/ethfinance/comments/mxdu7b/notes_on_ethglobals_merge_summit/)。但是我在 [EthGlobal.tv](http://ethglobal.tv/) 直播上看到不同的观看人数，是文章中提到的 3-4 倍。 

&lt;br/&gt;

# 释义性文章

Barnabé Monnot 发布了文章《[以太坊未来之路](https://barnabe.substack.com/p/eth2)》：“可视化了合并、数据分片、以 rollup 为中心的以太坊。”这是一篇很可爱的释义性文章 (手写图表！)，解释了以太坊未来中长期的发展重点。建议大家与上文所提到的演讲视频连起来一起阅读。

Nimbus 的 Jacek 在推特发了另一条 thread，又是一篇经典的解释内容。这次他讲的内容是[区块中的证明](https://twitter.com/jcksie/status/1384154639596101632)。

&lt;br/&gt;

# 媒体资源

Viktor Bunin 在他的[第一个专栏文章](https://twitter.com/ViktorBunin/status/1385935698801401857)里支持了以太坊的原则和治理：[Eth2 是我们未来金融的中立基础设施](https://cointelegraph.com/news/eth2-is-neutral-infrastructure-for-our-financial-future)。我完全同意。我今天才意识到，五年多来，我可能每天都在思考以太坊。Viktor 阐述了其中的一些原因。

Coindesk 的 Eth2 播客进展顺利。我觉得我们在处理一些犀利的话题时变得更加得心应手了。

- [4 月 15 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/proof-of-stake-or-proof-of-work)，我们谈论了 PoW vs PoS

- [4 月 22 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/coinbase-infura-commonalities)，我们谈论了中心化和去中心化。有的读者可能不同意我所说的一些观点😛)



我觉得这个播客相对来说比较温和，且信息量也挺大的。值得推荐！

Christine 还在最新的 [Valid Points](https://www.coindesk.com/rayonism-new-plan-merge-ethereum-and-eth-2-0) 系列中写了关于质押总价值和 Rayonism 的文章。

&lt;br/&gt;

# 研究

Dankrad [宣布](https://twitter.com/dankrad/status/1382082493243916298) [Legendre 函数赏金活动](https://legendreprf.org/bounties) 的奖励提高至两万美元，激励大家来对 Legendre PRF 提出质疑或者证明。当我们实现分片时，这将是一个重要的基元：它以一种多方计算友好的方式，用于[证明分片数据的托管](https://ethresear.ch/t/a-0-001-bit-proof-of-custody/7409?u=benjaminion)。

在 [ethresear.ch](https://ethresear.ch/):

- Vitalik 的一篇文章，提出了[错开分片区块生成](https://ethresear.ch/t/near-instant-transaction-confirmation-via-staggered-shard-block-production/5643?u=benjaminion)的想法，以减少用户的交易延迟。他的最新想法提出了一种[激励分片区块生产者诚实作为的方法](https://ethresear.ch/t/simple-approach-to-incentivizing-shard-staggering/9149?u=benjaminion)。

  

&lt;br/&gt;

# 常规会议

## Eth2 实现者会议

第 62 次会议在 4 月 22 日举行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/214)

- [会议视频](https://youtu.be/D9Aqr8thF9c?t=232)

- 我的[速记](https://hackmd.io/@benjaminion/rJUzAo0Id)，还有 Alex Stokes 的[推特笔记](https://twitter.com/ralexstokes/status/1385295236885204997)



除了平常的更新之外，这次会议的主要重点是，Altair 升级日期可能会稍微推迟一点。客户端团队还需要几周的时间来准备测试网，并且希望将测试网运行大概六周的时间。完成这些之后就到六月底了。但是我们不希望与计划于 七月中进行的伦敦分叉冲撞了。所以， Altair 升级的时间仍未确定。

## 合并实现者会议

第 2 次会议在 4 月 15 日举行。

- [Notes](https://notes.ethereum.org/@protolambda/merge_impl_call_2) by Protolambda Protolambda 的[笔记](https://notes.ethereum.org/@protolambda/merge_impl_call_2)
- [Video](https://youtu.be/ODcNpWiLASk?t=121). This gets pretty deep into the technical weeds. [视频](https://youtu.be/ODcNpWiLASk?t=121)。这涉及到相当深的技术问题。


本次会议进行时，一些开发者正处理 Eth1 柏林分叉后 OpenEthereum 出现的一些漏洞，因此会议中缺少了一些利益相关者。

# 其他新闻

- 以太坊基金会[正在招聘](https://twitter.com/drakefjustin/status/1382795227388317700)”独角兽“安全研究员

- Lighthouse [更新 35](https://lighthouse.sigmaprime.io/update-35.html) 已经发布

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[Vitalik: 柏林升级里， EIP-2929 提高 gas 开销有何意义？]]></title><description><![CDATA[Vitalik 简单阐述 EIP-2929 提高 gas 开销对以太坊安全性的意义]]></description><link>https://www.ethereum.cn/Technology/a_quick_explanation_of_what_the_point_of_the_eip</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/a_quick_explanation_of_what_the_point_of_the_eip</guid><pubDate>Fri, 23 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [r/ethereum](https://www.reddit.com/r/ethereum/comments/mrl5wg/a_quick_explanation_of_what_the_point_of_the_eip/)

&lt;br/&gt;

摘要: 

- 是的，某些操作码调用将需要更多的 gas 开销，但必须这样做来提高安全性。
- 但另一方面，一直以来应该更便宜的操作 (存储后加载相同的 slot) 最终会变得更便宜。
- 另一个重要裨益是，适度提高 gas limit 现在变得更安全。现在限制 gas limit 提高的主要原因跟多在于状态大小问题。


柏林硬分叉中引起 gas 开销变化的 EIP 有：[EIP 2565](https://eips.ethereum.org/EIPS/eip-2565) (降低`ModExp` 求模求幂运算的 gas 开销 )、[EIP 2929](https://eips.ethereum.org/EIPS/eip-2929) (提高`SLOAD` 与 `CALL` 的 gas 开销)、以及 EIP [2718](https://eips.ethereum.org/EIPS/eip-2718) 和 [2930](https://eips.ethereum.org/EIPS/eip-2930)，用以支持受 gas 开销增加影响的合约的兼容性，以及为未来的升级铺垫。

目前，这些 EIP 中最重要的是 EIP-2929。它的核心内容是： `SLOAD` 的 gas 开销从 800 增加到 2100，`CALL` 的 gas 开销 (包括`STATICCALL` 、 `DELEGATECALL`和其他操作码) 以及外部合约查询 (`BALANCE`、`EXTCODESIZE` 等) 从 700 增加到 2600，但这种情况仅会在地址和存储 slot 在交易里首次被访问时发生。

这样做的目的是进一步提高对 DoS 攻击的抵御能力：早期的研究显示，以太坊协议目前最大的 DoS 漏洞在存储访问，而且是有可能可以创建一些区块对大量账户作简单重复的访问，处理时间可能长达 80 秒。解决办法是一个简单的快速修复：使这些操作持续更长的时间 (存储访问需要磁盘访问) 以消耗更多的 gas，最终 DoS 问题会被削弱大概 3 倍。与此同时，客户端团队进行了一些出色的工作——实现磁盘存储缓存、减少存储加载所需的数据库查询次数、以及更长远地堵住这个漏洞。


gas 开销重新定价加上这些客户端的改善使得现有的区块链更安全，也使得提供 gas limit 比现在更加安全。在 EIP-2929 后，避免大幅 gas limit 提升的主要原因实际上不再是 DoS 攻击问题，而是状态大小的增加 (这两方面互相影响：当存储负载变大后存储加载消耗的 gas 会更多)。因此，[状态过期和无状态](https://hackmd.io/@vbuterin/state_expiry_paths)会变得非常重要，甚至可以说是“合并” 后的首要任务。

这次的重新定价产生的第二大长期裨益是[无状态验证](https://dankradfeist.de/ethereum/2021/02/14/why-stateless.html)的见证大小理论上最大能减少 3 倍。对于代码读取，我们还需要一次重新定价 (类似于：每访问 31 字节代码需要 500 gas)，但这一点可以在未来实现。

请注意：这份 EIP 只增加每笔交易第一次访问的 gas 开销。往后的访问实际上是更便宜的 (任何情况下都是 100 gas)。另外，对预编译的调用一直只消耗 100 gas，包括首次调用。这样做有带来以下正面影响：

- 在同一个 slot 里，任何`SLOAD` 后的 `SSTORE` (或者  `SSTORE` 后的 `SLOAD` ) 都会变得更便宜。这是因为第一次存储读取或写入以及支付了访问存储 slot 的 gas 费了，因此该存储 slot 已经“预热了”，第一次读取和写入都会更便宜；这样，我们需要支付的 gas 不是 800 + 5000，而是 2100 + 2900 (大约)，减少了大约 800 gas。这可能使采用 ERC20 协议标准代币的转发更便宜。
- Self-calling 变得更便宜
- 对预编译的调用变得更便宜 (这对于低 gas 开销的预编译来说特别有价值，这些预编译需要倍调用非常多次，比如 `ECADD`)

添加第一次访问规则是因为当一个账户或存储 slot 被第二次访问时，该账户或存储 slot 应该已经在内容里有缓存了，因此就不需要进行昂贵的磁盘访问了。当然，对同一个数值的两次访问也只需要一次的见证条目。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[以太坊核心开发者会议更新002]]></title><description><![CDATA[gas limit 提高讨论，柏林升级故障解释]]></description><link>https://www.ethereum.cn/Technology/allcoredev-update002</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/allcoredev-update002</guid><pubDate>Thu, 22 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [AllCoreDev Update](https://hackmd.io/@timbeiko/acd/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2Facd-update-002)

&lt;br/&gt;

# 摘要👀


- Berlin 上线，OpenEthereum 在分叉出现了问题，但快速进行了修复，gas limit 将可能小幅提升
- 伦敦升级已经有一个 EIP-1559 的开发者测试网了！同时计划多个分叉涉及非常多的工作，因此我们准备开一个额外的 AllCoreDev 会议；
- 核心开发者开始设计“合并” 的原型——关注 [Rayonism](https://rayonism.io/)☀️

&lt;br/&gt;

# 招聘更新 ⚒️

- Gnosis [正在招聘 OpenEthereum 的核心开发者](https://boards.greenhouse.io/gnosis/jobs/4497327002)，薪酬上涨了
- Nethermind [正在招聘毕业生参与客户端工作](https://twitter.com/nethermindeth/status/1371830786777833473)——在这种岗位上招新人是非常罕见的！
- ConsenSys [正在招聘 Besu 客户端的开发者](https://consensys.net/open-roles/2397547/)。

&lt;br/&gt;

# 柏林升级

在区块12244000，以太坊主网实现柏林网络升级！🎉

尽管分叉区块运行顺利，升级后不久，OpenEthereum 就出现了共识问题。开发者很快发现了问题 (etherscan 崩溃了，也很难不发现这个问题......) 并在 Zoom 上开会对问题进行诊断和找出解决办法。

问题出现了大概1个半小时后，问题根源找到了。简言之，问题是由 BLS-12381 预编译引起的。它在一些柏林测试网里被启动了，但不是主网分叉内容。OpenEthereum 没有禁用这个预编译，而是把它设置在非常遥远的区块上启动。当一笔交易错误地调用了这个预编译地址，OpenEthereum 对该调用的定价就与其他实现不一样。

如果想了解更多细节，Alex Stoke 在[推特](https://twitter.com/ralexstokes/status/1382750001026146304)上对事件进行了详细解释。我们也对 eth1.0 规范的代码库进行了[复盘](https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/retrospectives/berlin.md)。最后，OpenEthereum 团队正在写一份对这次事件的完整事后反思。OpenEthereum 的用户现在应该使用该客户端的 [v.2.3.4 版本](https://github.com/openethereum/openethereum/releases/tag/v3.2.4)。



## EIP-2930 解析 🧠


为了弥补 EIP-2929 的潜在漏洞，柏林升级还加入了 EIP-2930。这份 EIP 允许交易与一个访问列表一并提交，以在某些情况下稍微降低 gas 开销。

因访问列表而获益的使用情况并不总是那么明显。幸运的是，Nomic Labs 的 Franco Victorio 对这些情况进行了整理，写了[一篇文章解释访问列表会引起的 gas 开销变化、以及访问列表是如何生成的](https://hackmd.io/@fvictorio/gas-costs-after-berlin)。如果你的项目可能受 EIP-2929 或 2930 影响，你应该阅读这篇文章。


## Gas Limit 提高 📈

如在上一篇更新提到的，当主网实现了柏林升级，以太坊主网上由大型区块带来的大部分 DoS 风险都会得到解除。这意味着我们现在可以（慢慢地！）开始提高 gas limit。如 Péter Szilágyi 在[推特](https://twitter.com/peter_szilagyi/status/1384438441803403268)上所说，EIP-2929 加上 Geth 上的快照使我们得以稍微提高 gas limit。他提议一开始提高到 15M，看看情况如何。

但是！尽管 DoS 风险已经得到缓和，但状态膨胀问题仍然存在。提高 gas limit 意味着提高状态增长速度，以及增加节点同步数据、与网络保持同步的负担。在我们找到长期的解决方案 (例如，无状态)之前，我们仍然需要保持谨慎。特别是 (如 Péter 所说) 在我们还不确定无状态是否真的可行的时候。

&lt;br/&gt;

# 伦敦升级 

主网进行柏林升级后，我们现在专注于伦敦升级的实现与测试阶段。目前有三份 EIP 在该升级的计划中： [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559), 我想不需多做介绍；[EIP-3238](https://eips.ethereum.org/EIPS/eip-3238) 是用于把难度炸弹推迟到 2022 年第二季度；[EIP-3198](https://eips.ethereum.org/EIPS/eip-3198) 用于添加一个操作码以从区块返回  `BASE FEE`。

我们现在有了第一个集成测试网 [Aleut](https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/client-integration-testnets/aleut.md)，大多数客户端正与它同步[1]。如果你想加入这个测试网，规范里有配置文档与启动节点。文档资料现在还不完善，你可能需要使用你所喜欢的客户端的开发者分支，但这个问题在未来几周会得到完善。


在规划方面，伦敦升级非常特别，在另一个升级还在部署的时候它就已经开始规划了，这种情况还是第一次。此外，客户端团队已经开始对“合并” （详见下文）进行原型设计了。在过去的 3 到 4 次核心开发者会议里，由于内容过多，问题都没有讨论完，因此我们决定在[本周五](https://github.com/ethereum/pm/issues/301)安排一次常规以外的会议，继续讨论伦敦升级。

简言之，我们需要决定是否增加其他内容到伦敦升级里，什么时候进行升级，以及如何处理那些没能放到伦敦升级里的 EIP，包括呼声越来越高的 [EIP-3074](https://eips.ethereum.org/EIPS/eip-3074)。又是一个议程满满的会议！

&lt;br/&gt;

# Rayonism 项目☀️

如上文所述，客户端团队已经开始专注在“合并”上了。首先进行的是 [Rayonism](https://rayonism.io/) 项目，是对俄罗斯艺术运动的致敬——“用射线画出一个分片空间，并将其变成动态时间。”

在下一个月，基于“可执行信标链”提议的原型会被构建出来。完整的规范可以在  [ethereum/rayonism](https://github.com/ethereum/rayonism) 代码库里找到。

Rayonsim 项目是 Scaling Ethereum 黑客松的一部分，是对所有人开放的。如果大家也想做出贡献，可以通过加入[discord 频道](https://discord.gg/ky9aV9SMEE)来参与。如果想看它是如何运行的，这里有[一份教程](https://github.com/protolambda/mergenet-tutorial)。😄

当然，Rayonsim 项目作为黑客松的一部分意味着里面的内容变得非常快，发出来的文档可能很快过时，构建出来的原型也不适合做成产品。但，在活动结束的时候，我们应该对实现“合并” 的技术要求和如何把构建的原型产品化有一个非常成熟的思路了。

最后，如果你想看看合并后的图景，Barnabé 本周写了[一篇非常好的文章](https://barnabe.substack.com/p/eth2)！

------

感谢您的阅读！下一次的更新应该会在几周后，即伦敦升级的规范被最后敲定的时候。

------

发布于 2021.4.20

[1] 注：Aleut 不包括 EIP-3238，因为该 EIP 仅需要为难度炸弹修改主网的一些常数。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Rocket Pool v3.0 Beta — 节点运行指南]]></title><description><![CDATA[Rocket Pool 节点运行的安装和设置教程]]></description><link>https://www.ethereum.cn/Staking/rocket-pool-v2-5-beta-node-operators-guide</link><guid isPermaLink="false">https://www.ethereum.cn/Staking/rocket-pool-v2-5-beta-node-operators-guide</guid><pubDate>Wed, 21 Apr 2021 00:00:00 GMT</pubDate><content:encoded>![rocketpool](https://i.ibb.co/gRZVW9y/rocketpool.png)

&lt;br/&gt;

# 介绍

想要在 Rocket Pool v3.0 beta 测试版本中运行一个[智能节点](https://rocket-pool.readthedocs.io/en/latest/rocket-pool/nodes.html)吗？本指南将指导读者们如何做！现在参与运行节点，将成为 Rocket Pool 网络的第一批节点运行者，并且不仅从自己质押的那份金额中赚取奖金，还可以通过帮其他质押用户运行节点赚取佣金。

如果读者只是想以最简单的方式质押 ETH 而不需要运行节点，请阅读我们的《[质押者指南](https://medium.com/rocket-pool/rocket-pool-v2-5-beta-stakers-guide-b6e85145175e) 》。

本指南是关于安装和设置过程的快速概述 —— 更多详细的文档请看[智能节点文档](https://rocket-pool.readthedocs.io/en/latest/smart-node/getting-started.html)。

发布后的测试版本带有一个用于管理节点的 CLI (命令行界面) 客户端，因此假设使用该指南的读者对终端有基本的认识。在后面的阶段将会推出一个 GUI 客户端，因此如果终端的问题吓到你了，现在开始留神了！

**注意：在 Rocket Pool 网络中运行节点是需要长期承担责任的，就像运行 Eth 2.0 验证者节点一样。我们希望该测试版能够尽可能地模拟真实情况，因此如果你没有做好 24 小时在线的准备，请不要运行节点，因为这会降低 Eth 2.0 Pyrmont 测试网的参与率，也会影响 Rocket Pool beta 用户的收益率。**

**注意：考虑到其他用户会尝试在 Pyrmont 测试网中运行验证者节点，请不要在你的节点下创建超过两个 minipool。质押大笔押金意味着等待激活队伍会很长，那么排队的用户需要等很久才可以加入网络了！**

**注意：该 beta 版本完全在测试网上运行，也就是说不需要质押“真实的” ETH。参与测试时，千万不要尝试使用“真实的” ETH。**

&lt;br/&gt;

# 运行节点需要什么？

你需要一台具有 x86_64 处理器的计算机 (就算不知道这是什么也不用担心！) 来运行某种操作系统 (如 Linux 发行版或 MacOS)。你还需要一个至少 16 GB 的 RAM 和一个拥有 200 GB 可用空间的 SSD  硬盘，以及对计算机的 root (管理员) 访问权限。

**由于时间同步问题，非常不建议在 [Windows 10 WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10) 上运行节点，这会对 Eth2.0 客户端造成影响。不支持在 WSL  上运行一个节点 —— 自行承担后果。**

如果你的设备没有达到上述规范的要求，查看我们的简易指南：《[在 AWS 上运行 Rocket Pool 智能节点](https://medium.com/rocket-pool/rocket-pool-smart-nodes-on-aws-c4d45fa5c9ad)》。

&lt;br/&gt;

# 安装客户端

首先，我们将需要安装 Rocket Pool 智能节点客户端。如果你使用的是 AWS 指南，请跳过这一步。这可以[手动](https://github.com/rocket-pool/smartnode-install/releases)完成，也通过 cURL 或 wget 完成；尝试输入以下命令，看看有哪些工具可用：

```Powershell
   xxxxxxxxxx curl --versionwget --version
```

(如果你没有安装这些工具， 会显示这样的代码：`command not found: curl`)。现在，取决于你使用的操作系统，运行下列中合适的命令行以安装客户端：

## Linux (cURL):

```
curl -L https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-linux-amd64 --create-dirs -o ~/bin/rocketpool &amp;&amp; chmod +x ~/bin/rocketpool
```

## Linux (wget):

```
mkdir -p ~/bin &amp;&amp; wget https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-linux-amd64 -O ~/bin/rocketpool &amp;&amp; chmod +x ~/bin/rocketpool
```

## MacOS (cURL):

```
curl -L https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-darwin-amd64 -o /usr/local/bin/rocketpool &amp;&amp; chmod +x /usr/local/bin/rocketpool
```


## MacOS (wget):

```
wget https://github.com/rocket-pool/smartnode-install/releases/latest/download/rocketpool-cli-darwin-amd64 -O /usr/local/bin/rocketpool &amp;&amp; chmod +x /usr/local/bin/rocketpool
```


然后简单地启动一个新的 shell 会话 (或者运行 `source .profile`)。如果你使用 zshell，你可能需要调整你的 `.zshrc` 或 `.zprofile` ，然后首先将 `~/bin` 添加至你的 `PATH` 中。

完成之后，运行 `rocketpool` —— 如果一切正常，你将看到一个 ASCII Rocket Pool logo 和一系列选项。如果没有看到，尝试重启并再次登录。

&lt;br/&gt;

# 安装服务

现在，我们现在将正确安装智能节点服务：

```
rocketpool service install
```


如果你正使用 Ubuntu、Debian、CentOS 或者 Fedora，将会在你的系统上自动安装 [Docker Engine](https://docs.docker.com/engine/install/) 和 [Docker Compose](https://docs.docker.com/compose/install/)。否则，你将会收到手动安装的提示 —— 照做，然后输入代码 `rocketpool service install -d`。

下一步，重启你的终端 (以便更新用户权限之后，能够与 Docker 交互) 然后设置你的服务：

```Powershell
rocketpool service config
```


你将需要选择运行一个 Eth1.0 客户端和 Eth2.0 客户端。如果你喜欢的话，也可以使用 [Infura](https://infura.io/) 代替运行 Eth1.0 客户端；你将需要注册一个账户、创建一个项目、并在出现提示时复制粘贴其 ID。请注意，如果你使用免费的 Infura 账户，可能会超过每日请求限制。**因此，为了获得最大化的稳定性，最好使用 Geth。**

最后，启动服务：

```Powershell
rocketpool service start
```


Docker 将确保服务持续运行，即使它崩溃了或者你重启电脑了，它都会持续工作，除非你明确地停止它的工作。同步 Eth1.0 和 Eth2.0 链需要花些时间，但同时你仍然可以创建钱包以保存你的节点账户和验证者密钥。

现在，检查你的客户端和服务版本，确保一切都是正常的：

```Powershell
rocketpool service version
```


会显示这样的代码：

```Powershell
Rocket Pool client version: 1.0.0-beta.X
Rocket Pool service version: 1.0.0-beta.X
```


通过以下方式查看智能节点服务的资源消耗情况：

```Powershell
rocketpool service stats
```

或者，输入以下代码查看 Eth 客户端的运行情况 (e.g. 检查同步状态)：

```Powershell
rocketpool service logs eth1
rocketpool service logs eth2
```

(这两个命令行都将实时运行，直到你按 Ctrl-C 停止。)

**注意：你可能会发现你的验证者服务器不断重新启动，直到你拥有一个活跃的质押 minipool。这不会影响你的节点性能，可以放心地忽略它。**

## 转发对等节点发现端口

你还可以选择从你的路由器转发 Eth1.0 和 Eth2.0 客户端的对等节点发现端口。但你也可以选择不这么做，这可能会增加同步时间，因为你可能会连接到网络上的更多节点。如果你跟着 AWS 指南操作，你已经做到这一点了：

你的 Eth1.0 和 Eth2.0 客户端要转发的端口分别是：

```Powershell
30303 (TCP &amp; UDP)
9001 (TCP &amp; UDP)
```


请注意，Eth2.0 客户端使用各种不同的默认端口，但是 Rocket Pool 将其标准化为 `9001`，以便更容易地配置服务。

转发端口的方法取决于你的路由器，本指南不囊括其中的方法。请参阅你使用的路由器型号的相关文档。

&lt;br/&gt;

# 注册节点


在注册 Rocket Pool 的节点之前，你将需要创建一个钱包来保存你的节点账户和验证者密钥。如果你已经参与了之前的测试，务必先删除你的旧钱包和验证者密钥：

```Powershell
sudo rm ~/.rocketpool/data/wallet
sudo rm -r ~/.rocketpool/data/validators
```


然后，继续创建一个新的钱包：

```Powershell
rocketpool wallet init
```


你会收到提示，设置一个钱包密码。然后就会看到你的钱包备份助记词，将其记录在安全且私密的地方，因为如果你丢失了钱包，助记词可以帮助恢复钱包以及它的所有密钥 (甚至是将来创建的密钥)。完成之后，你会看到新创建的节点账户的地址。

这时候，你将需要等到你的 Eth1.0 客户端同步完才能进行下一步。让服务日志运行着，并稍后再返回，这可能会需要一两天 (除非你使用的是 Infura)。

一旦你的 Eth1.0 客户端同步完成，你将需要一些 Goerli ETH 和 RPL 来注册 Rocket Pool 节点并开始存款。找到你的节点地址：

```Powershell
rocketpool node status
```

获取 Goerli ETH 的水龙头：

- [ethstaker Discord server](https://discord.gg/GGGmqZdCBf)
- [faucet.goerli.mudit.blog](https://faucet.goerli.mudit.blog/)


获取了 Goerli ETH 之后，等待你的交易被打包，并确认你的余额已更新：

```Powershell
rocketpool node status
```


现在你可以通过 Rocket Pool 命令行直接从水龙头请求获取一些 RPL：

```Powershell
rocketpool faucet withdraw-rpl
```


请注意，这一步需要付 0.5 Goerli ETH 的费用，以防大家滥用水龙头。你将收到一定量的旧版 RPL，可以交换成新版 RPL 代币，并且将其质押以启动 minipools。


**如果你在 beta 测试版发布前就准备好了，停在这一步并过一段时间再来！**


最后，注册你的 Rocket Pool 节点：

```Powershell
rocketpool node register
```

你的时区位在默认的情况下会被自动检测，然后发送到网络。然而这是可选的，而且并不是用于 KYC，只是为了使得 Rocket Pool 网站上的节点网络图保持更新。如果你正运行一个远程服务器，发送服务器的时区位置。如果你想要隐藏位置，只需输入 `Hidden/Hidden`。

这样你就正式加入 Rocket Pool 网络了！

&lt;br/&gt;

# 质押

现在，在 Rocket Pool 中质押 RPL：

```Powershell
rocketpool node stake-rpl
```


你会收到这样的提示：是否需要将你的旧版 RPL 转换成新版 RPL再质押。点击确认，然后输入你需要质押的数量，如果你不确定，选择&quot;所有的 RPL 余额&quot;。



下一步，我们将开始质押：

```Powershell
rocketpool node deposit
```


选择一定数量的 ETH 进行质押。

如果你质押 32 ETH，你的 minipool 就会立即将其余额提交至信标链中，以便尽快开始质押。

```Powershell
rocketpool minipool refund
```


如果你质押 16 ETH，你的 minipool 需要在队列中等待收集够了 ETH，才能将其余额提交至信标链。

接下来，你会看到当前网络的节点佣金率 (基于节点的供需变化)，以及根据你的质押金给出的最低佣金率建议。这将与你的质押交易一起发送，这样做的话，即便在交易被打包前佣金率突然下跌，你也不会受到影响——如果这种情况发生了，你的质押交易将只会失败。如果你不接收建议的佣金率，你可以自定义输入，但是你的交易可能不会被打包。

完成之后，你将收到存款成功的提示，以及你新创建的 minipool 的地址。

&lt;br/&gt;

# 管理 Minipools

你可以随时输入以下代码以检查 minipools 并查看其所有重要详细信息：

```Powershell
rocketpool minipool status
```

如果你的 minipool 即使有 32 ETH，仍然出现在“预启动”的清单中，也不用惊慌。你的节点可能需要几分钟才能注意到你有一个 minipool 正在等待启动，并且为其生成并提交验证者密钥。

当你的 minipool 出现在 “Staking” 列表中时，恭喜，这表示其存款已经发送到信标链中，并即将开始验证！此时，智能节点服务将耐心等待，随时准备执行验证任务。

如果你想要查看关于验证者的更详细的信息，我们建议去浏览器 [beaconscan](https://beaconscan.com/pyrmont) 或者 [beaconcha.in](https://pyrmont.beaconcha.in/) 查看。只需将 `rocketpool minipool status` 输出中的 **Validator pubkey** 复制粘贴至任意其中一个网站的搜索栏中，即可查看其运行情况。如果暂时没有结果，不用担心，信标链可能要花几个小时才能显示结果。


现在你可以坐下来并观察你的验证者余额增加，方法是定期运行 `rocketpool minipool status` ，或者在 [beaconscan](https://beaconscan.com/pyrmont) 上查看。如果你怀疑你的验证者节点出现问题 (例如，余额下降)，查看信标和验证者日志：

```Powershell
rocketpool service logs eth2
rocketpool service logs validator
```
&lt;br/&gt;

# 更多内容!

这就是本指南的全部内容。如果你想了解智能节点还能做些什么，请查看我们的[智能节点文档](https://rocket-pool.readthedocs.io/en/latest/smart-node/introduction.html)。文档里将为你分析所有可用的命令行，并在最后提供了参考。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[可执行信标链]]></title><description><![CDATA[将eth1数据嵌入到信标区块中，并且要求信标链区块提议者生成可执行的eth1数据]]></description><link>https://www.ethereum.cn/Eth2/executable-beacon-chain</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/executable-beacon-chain</guid><pubDate>Tue, 20 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [ethresear.ch](https://ethresear.ch/t/executable-beacon-chain/8271)

&lt;br/&gt;

特别感谢最初提出该想法的 Vitalik Buterin @vbuterin，感谢 Danny Ryan @djrtwo、@zilm 等给本文提供的宝贵意见。

摘要：除可执行分片之外，可执行信标链作为替代的 eth2 执行模型，通过在信标链上添加单个执行线程的支持来实现

Vitalik 此前发布的文章《[以 rollup 为中心的路线图](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)》中提到，数据分片作为 eth2 执行中的主要扩容因素，允许在单个执行分片上进行扩容，并简化了总体设计。

Eth1 分片设计基于其通过信标链与数据分片通信。如果阶段 2 的多执行分片功能将在之后推出，那么这个方法就有意义了。有了以 rollup 为中心的路线图，将 Eth1 放在专门的分片上 (即独立于信标链、且频繁与信标链交互) 会给共识层带来不必要的复杂性，并增加在分片上发布数据和在 eth1 中访问数据之间的延迟。

我们提议将 eth1 数据 (交易、状态根等) 嵌入到信标区块中，并且要求信标链区块提议者生成可执行的 eth1 数据，以消除这种复杂性。也就是说将 eth1 执行和有效性作为共识核心的一等公民。

&lt;br/&gt;

# 提案概览

- Eth1-引擎由系统中的验证者维持。
- 当验证者打算提议一个信标区块时，他会通过 eth1-引擎创建 eth1 数据。然后 eth1 数据将被嵌入到其提议的信标区块中。
- 如果 eth1 数据无效，其所在的信标区块也同样无效。

&lt;br/&gt;

# Eth1 引擎的修改

根据前面的介绍，eth1 分片为中心的设计中，eth1-引擎和 eth2-客户端是松散耦合的，并通过 RPC 协议实现通信 (查看文章 [eth1+eth2 客户端关系](https://ethresear.ch/t/eth1-eth2-client-relationship/7) 以了解更多信息)。eth1-引擎不断维护着其交易池和状态下载器，这需要它自己的网络堆栈。它还应该存储 eth1 区块。

当前的提案取消了 eth1 区块的概念，eth1-引擎有两种可能的方式来处理这一变化：

- 通过合成的方式，从信标链区块的 eth1 数据中创建 eth1 区块

- 修改引擎：交易处理过程不a需要使用 eth1 区块，而是使用 eth1 数据

  - 信标区块根可用于保存当前状态管理所需要的链的概念


两者相比，后者为比较长期的选项。它允许 eth1 客户端更快地转换为 eth1-引擎，且 [eth1 分片概念证明 (PoC)](http://github.com/txrx-research/eth1-shard-demo) 已经证明了这一点。

我们使用术语“可执行数据” (executable data) 来表示包含 eth1 状态根、交易清单 (包括收据根“receipts root“和 bloom filter)、coinbase、时间戳、区块哈希以及 eth1 状态迁移函数所需要的所有其他数据位。可执行数据在 eth2 规范中表示如下：

```Powershell
class ExecutableData(Container):
    coinbase: bytes20  # Eth1 address that collects txs fees
    state_root: bytes32
    gas_limit: uint64
    gas_used: uint64
    transactions: [Transaction, MAX_TRANSACTIONS]
    receipts_root: bytes32
    logs_bloom: ByteList[LOGS_BLOOM_SIZE]
```

Eth1-引擎的职责清单与此前 eth1 分片的职责类似。主要有：


- **交易执行**。Eth2-客户端向 eth1-引擎发送一笔可执行数据。Eth1-引擎通过处理该数据来更新其内部状态，并且如果通过了共识检查则返回 `true` ，否则返回`false`。诸如即时存款处理之类的高级用例也可能要求结果中包含完整的交易收据。

- **交易池维护**。Eth1-引擎使用 ETH 网络协议来广播信息并跟踪网络上的交易。等待被打包的交易 (pending transactions) 保存在交易池中，然后用于创建新的可执行数据。

- **可执行数据创建**。Eth2-客户端发送之前的区块哈希、eth1 状态根、coinbase、时间戳和创建可执行数据的所有其他信息 (交易清单的一部分)。Eth1-引擎返回一个 `ExcecutableData` 实例。

- 状态管理

  Eth1-引擎维护状态存储以便能够运行 eth1 状态执行函数。

  - 它涉及在最终确定性上触发的状态树修剪机制 (pruning mechanism)，该机制要求基于信标区块链的状态树版本控制。

    注意：长期无区块敲定会造成大量垃圾数据的堆积，从而消耗额外的磁盘空间。

  - 当无状态执行和”区块创建“完成时，eth1 引擎可以选择作为纯状态迁移函数运行，并在此基础上承担一些责任，如，可以禁用状态存储，从而减少使用磁盘空间的需求。

- **JSON-RPC 支持**。为了可用性和应用性，保留以太坊 JSON-RPC 的支持十分重要。该责任将由 eth2-客户端和 eth1-引擎共同承担，因为 eth1-引擎可能失去了单独处理 JSON-RPC 终端子集的能力，如那些基于区块号和哈希的调用。这种分离将在之后解决。

&lt;br/&gt;

# 信标区块处理

可执行数据 `ExecutableData` 结构代替了信标区块体中的 `Eth1Data` 。此外，信标链和 eth1 的同步处理允许即时存款。因此，存款可以从信标区块体中移除。

以下是更新了的信标区块体：

```Powershell
class ExecutableBeaconBlockBody(Container):
    randao_reveal: BLSSignature
    executable_data: ExecutableData  # Eth1 executable data
    graffiti: Bytes32  # Arbitrary data
    # Operations
    proposer_slashings: List[ProposerSlashing, MAX_PROPOSER_SLASHINGS]
    attester_slashings: List[AttesterSlashing, MAX_ATTESTER_SLASHINGS]
    attestations: List[Attestation, MAX_ATTESTATIONS]
    voluntary_exits: List[SignedVoluntaryExit, MAX_VOLUNTARY_EXITS]
```

我们修改了  `process_block` 函数：

```Powershell
def process_block(state: BeaconState, block: BeaconBlock) -&gt; None:
    process_block_header(state, block)
    process_randao(state, block.body)
    # process_eth1_data(state, block.body) used to be here
    process_operations(state, block.body)
    process_executable_data(state, block.body)
```

在 `process_operations` 完成之后处理可执行数据是合理的，因为在很多情况下，operation processing 可能会使整个区块无效。虽然，这种方法可能不是最优的，无法让客户端优化达到最优效果。

## 访问 EVM 的信标状态

我们更改了 `BLOCKHASH` 操作码 (此前用于返回 eth1 区块哈希) 的语义，现在用来返回信标区块根。这允许验证被打包进信标状态或区块的数据 (包括从前 `256`个 slot 到最近一个 slot 的数据)。

异步状态读取有一个主要的缺点。客户端必须要等待一个区块产生，才可以使用链接到该区块的证明或使用该区块的状态根创建一个事务。简单地说，异步状态访问至少要延迟一个 slot。

## 直接状态访问

假设 eth1-引擎可以访问代表整个信标状态的默克尔树。那么 EVM 可能可以凭借 `READBEACONSTATEDATA(gindex)` 操作码，以提供直接访问信标状态任何部分的功能。这个操作码有几个良好的属性。首先，这种读取复杂性取决于 `gindex` 值并且易于计算，因此可以轻松地计算 gas 费。第二，返回数据的容量为 32 字节，完全适合 EVM 的 32 字节字。

使用此操作码，就可以创建更高级别的信标状态访问库，从而为智能合约提供便捷的 API。如：

```Powershell
v = create_validator_accessor(index) # creates an accessor
v.get_balance() # returns balance of the validator
v.is_slashed()  # returns the value of slashed flag
```

该模型消除了状态访问延迟。因此，通过对信标链操作和 eth1 执行进行适当的排序 (eth1 执行在后)，并且在 slot `N`上可以访问 slot `N-1` 分片数据的交联，可以允许 rollup 以最快的方式对数据打包进行证明。

此外，使用这个方法不需要将证明广播至网络并进一步由合约验证，从而减少了信标状态读取在数据和计算方面的复杂性。

*注意*：在一开始使 `READBEACONSTATEDATA` 操作码的语义独立于特定的承诺方案 (即默克尔树) 是有意义的，这有益于更轻松地实现升级。

直接访问的成本提高了 eth1-引擎的复杂性。读取信标状态可以通过不同的方式实现：


- **将可执行数据和状态一起传递**。该方法的主要问题是处理大容量的状态副本。如果将直接访问限制为状态数据的一个子集，而该状态数据的子集需要将一小部分状态传递给执行，那么它可能会起作用。

- 双工通信通道。有了双工通道，eth1-引擎将能够同步向信标节点询问 EVM 请求的状态。根据通道设置的方式，延迟可能会成为执行那些具有信标状态读取的交易的瓶颈。

- **嵌入式的 eth1-引擎**。如果将 eth1-引擎嵌入到信标节点中，它可以通过节点提供的托管功能从同一个内存空间读取状态。

&lt;br/&gt;

# 分析

## 网络带宽

当前提案通过可执行数据的容量来扩大信标区块。不过，由于该提案允许使用更高级的存款方案，因此很有可能删除 `Deposit` 操作。

取决于区块利用率，根据 eth1 平均区块容量 (这略微影响网络接口的需求)，预期的增长在 10% 到 20%之间。

值得注意的是，如果 `CALLDATA` 由 rollup 利用，那么在最坏的情况下，eth1 区块容量可能会增长到 `200kb` (gas limit 为 1200 万时)，使得可执行信标区块容量增长 `60%` ，容量变为 `300kb` 。

## 区块处理时间

平均处理时间:

![Untitled](https://i.ibb.co/Q9LzypP/avg-processing-time.png)

- *Toledo 上的 Lighthouse 有 1.6 万验证者，主网上的 Go-ethereum 的 gas limit 为 1200 万。*

很难推断出信标链的处理时间，尤其是，特别是在验证者子集相对较大以及需要处理交联的情况下 (如果分片上线)。也许在某个时候，epoch 处理将与 eth1 执行几乎同时进行。

减少时段边界 (epoch boundary) 处理时间的方法是，提前处理 epoch，而不是等到下一个 slot 的开始，以防最近一个 epoch 的最后一个区块准时产生。

异步状态访问模型允许另一种优化方式。在这种情况下，`process_executable_data` 可能与主要的 `process_block` ，甚至 `process_epoch` 的有效负载并行运行。

## 固化该设计

有人可能会说，当前提案将执行模型固定下来，并削弱了引进更多可执行分片的能力 (一旦我们需要它们)。

另一方面，一些可执行分片会带来诸如跨分片通信、共享账户空间等问题。还有一些其他的问题，而这些问题与执行模型的预期转变同样重要且难以解决。

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/4/19]]></title><description><![CDATA[柏林硬分叉故障详析、Chainlink 2.0 白皮书]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-19/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-19/</guid><pubDate>Mon, 19 Apr 2021 00:00:00 GMT</pubDate><content:encoded>![22](https://i.ibb.co/HdWDLxn/cover.png)

&lt;br/&gt;

# Eth1

**柏林升级故障回顾**

 在柏林升级中，客户端 OpenEthereum 引起以太坊网络一些重要服务故障，以下为以太坊研究员 Alex Stokes @ralexstokes 对此次事件详析的编译：

首先想对@OpenEthereumOrg 的快速反应和漏洞修复表示感谢。

事件起源于这一笔交易：https://etherscan.io/tx/0x7006f38fa2e6654fae1a781aefc5885fe0cb8f778b1add10636eaf7e34279247

这笔交易是一次合约调用，从 KuCoin 交易所给一系列地址支付 ETH。问题的根源在于交易调用数据的 ABI (二进制接口) 编码存在漏洞，这导致出现共识问题。大家可以看看 Etherscan 上的“输入数据”：

![input1](https://i.ibb.co/Tm6LmN5/input1.png)

![input2](https://i.ibb.co/c3D4VWj/input2.png)

![input3](https://i.ibb.co/j33KR1n/input3.png)

1. 我们在合约上调用 `sendEths` 有两个参数，一个是大小动态变化的目标地址数组，另一个是大小动态变化的数值数组 (以 wei 为单位)，以此来指定把多少 ETH 发送给谁。

2. 我们可以对调用数据进行解析，看看是哪里出问题：第一行 (Etherscan 上的第一行，标记为[0]) 显示地址列表以 64 byte 开始 ([2]那一行)。第二行表明列表的数值从 416 byte 开始（[13]那一行)。

3. 也就是说，我们可以推测这个列表的数据是成对循环的，依次向每个地址发送 ETH。到这里似乎道理挺简单的。

4. 如果我们开始迭代这个列表，我们首先进行的是调用数据的正确位组，Solidity 的 ABI 规定大小动态变化数组的长度构成数据的第一部分。

5. 这就是故障的根源，因为调用数据的值是`0x10`——十六进制。但是调用数据只给了 10 个地址/数值对。调用数据的正确 ABI 编码应该是 [2] 和 [13] 的数值为`0xA`，而不是 `0x10`！

6. 你可能已经猜到在这里出现了什么问题，我们可以回到这笔交易的执行记录看看发生了什么：https://etherscan.io/vmtrace?txhash=0x7006f38fa2e6654fae1a781aefc5885fe0cb8f778b1add10636eaf7e34279247&amp;type=parity

7. 合约成功迭代前10对数据，它应该在这里就停下来，但根据调用数据，有多于10个地址，也就是说前10对数据后它继续迭代。但根据调用数据的结构，第11个地址是列表长度编码`0x10`。也就是说合约尝试给地址 `0x10` 发送 0 个 ETH。

![bug](https://i.ibb.co/tQZMG17/wrong.png)

8. 另外：如果合约尝试读取不存在的调用数据，它似乎会返回 0 个 ETH——你可以想象该合约在这里出错，但它却继续再给 6 个从调用数据“读取”的地址发送 0 个 ETH。

此时，你可能会注意到，`0x10` 是一个有点“特殊的地址”，因为它正好在 EVM 预编译的范围内 （像大多数在 EVM 汇编之外有优化实现的特殊合约一样）。我们不必预期预编译 `0x10` 能够返回 ETH，尽管它发送的 ETH 可能会石沉大海，但这不一定会造成比漏洞合约更严重的问题。那为什么它会导致整个客户端出问题呢？

原因在于 `0x10` 实际上是 EIP-2537 对 BLS 成对加密例程的预编译，但这个 EIP 还未在主网部署。因此尽管你可以与该地址交互，在主网上也没有合约代码进一步执行。

我们还需要另一件事来解释这个问题，你可能猜到与柏林因分叉有关：柏林部署了 EIP-2929，这份 EIP 会改变 EVM 里 gas 的计算。

在 EIP-2929 下，在你第一次执行一些存储操作码时需要支付更多，但当你往后在同一笔交易里访问相同的实体时，则支付更少的 gas。这个重新定价机制现在应该能更准确地反映改变客户端存储的成本，并承认在任何客户端执行过程中，这些数据通常被缓存在更便宜的硬件层中。

要解释预编译的特殊性，EIP-2929 详细说明 EVM 会对被访问过合约的调用进行分辨，以反映预编译一般不需要动用昂贵的存储资源。

现在我们终于可以回到 OpenEthereum 在 \#12244294 区块的漏洞——客户端把所有执行了的预编译加入到 EIP-2929 的访问列表里。因为 EIP-2537 已经在大多数客户端里实现了 (曾经说要纳入柏林硬分叉！) ，所以 OpenEthereum 对任何像上面这样访问  `0x10` 的交易给了 gas 费折扣。

看来，客户端对 EIP-2929 的实现各不相同，并只给活跃的预编译 gas 费折扣，而 EIP-2537 的预编译实际上还未启动！因此 OpenEthereum 得出的 gas 数与其他客户端不一样。

来源：https://twitter.com/ralexstokes/status/1382750001026146304?s=20

事件发生后，核心开发者在 4.17 的 AllCoreDev 作出事后检讨，会上讨论内容包括 hive test suite 可以使用更多接近主网的配置文档、需要更好的 debug 工具、对把不良区块导入客户端并进行分析的支持对这种事情很有帮助等。还有一个原因是 OpenEthereum 现在由一个比较新的团队在运维，需要处理非常复杂的代码库和遗留问题。

来源：https://twitter.com/TimBeiko/status/1383054611506864133?s=20

另外，Ethereum Cat Herder 创始人 Pooja Ranjan 在Github 发表了整个柏林升级的回顾，包括准备、启动、纠错的过程。

文章详情：https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/retrospectives/berlin.md


&lt;br/&gt;

**伦敦升级进度**

4.17 的AllCoreDev 对 Aleut (只涵盖 EIP-1559 和 3198）以后的测试网还需要添加哪些内容进行讨论，这部分内容又涉及是否伦敦升级后就进行“合并”，讨论的重点包括：

1. 如果伦敦后就集中在“合并”上，那么很大机会伦敦一年后才会有一个“功能分叉 (feature fork)&quot;；
2. 1559 本身的内容就很多，在社区呼声很高，且由于难度炸弹的原因必须在这个夏天实现；
3. 各个客户端团队无法做到同步推进工作，因此在添加内容到升级时需要注意这一点，基于此，大家同意伦敦至少需要包括1559、3198、以及难度炸弹推迟；
4. 关于其他 EIP (EIP-3403、EIP-3074、EIP-2537、EIP-2677)，我们应该看它们会给客户端带来多少工作，以及它们能提供多少价值。感觉 EIP-3403 和 EIP-3074 是大家最想要的。

由于伦敦升级近在眼前，还有很多事情需要做决定，会议决定 4 月 23 日安排一次额外会议，议程如下：

![agenda](https://i.ibb.co/5rJNCvD/agenda.png)

&lt;br/&gt;

# Eth2

北京时间 2021 年 4 月19 日 17:20:23 迎来了信标链第 1,000,000 个 slot!

&lt;br/&gt;

# Layer2

**Matter Labs 团队介绍新解决方案 zkPorter**

以太坊二层解决方案团队 Matter Labs 表示，在 zkSync 2.0 中， L2 状态将会分成两个部分：数据可用性在链上的 zkRollup 和数据可用性在链下的 zkPorter，用户可以自行选择将自己的资金存储于链上还是链下。关于 zkPorter 的详细介绍，请阅读《zkPorter: L2 扩容的突破》。

随后，Vitalik 在 reddit 中提出对于本篇文章的质疑，认为 “zkPorter 有着比 Optimistic rollups 更强的安全保障” 这一说法并不恰当，zkSync 方回复了 Vitalik 的质疑。详细请看文章。

来源：https://medium.com/matter-labs/zkporter-a-breakthrough-in-l2-scaling-ed5e48842fbf

&lt;br/&gt;

# 生态

**Chainlink 2.0 白皮书发布**

4 月 15 日，chainlink 发布 2.0 版本白皮书：去中心化预言机网络发展的下一步。除了 Chainlink 目前所提供的外部数据之外，该版新白皮书概述了 Chainlink 将如何发展去中心化预言机网络，如何继续创建一个去中心化元层，通过提供高度的可扩展性、机密性以及安全的链下计算方式，来提高智能合约。

Chainlink 2.0 白皮书介绍了一种用于构建混合智能合约的新架构，其中去中心化预言机网络提供了区块链无法提供的关键功能。它作为一个安全的链下计算层，部分依赖于区块链以实现安全性，但在运作时同时利用链下系统的可连接性、功能丰富性和可扩展性。这个新的抽象层将使得 Chainlink 为大量安全的、功能丰富的智能合约应用程序提供支持，并且为更广泛的用户和应用案例提供支持。

![Chainlink Decentralized Oracle Networks](https://i.ibb.co/FW7GTYF/chainlink.png)

图：去中心化预言机网络允许智能合约应用程序访问任何链下数据源或计算



白皮书：https://research.chain.link/whitepaper-v2.pdf?_ga=2.76399382.2026745185.1618821757-725326390.1609159043

来源：https://blog.chain.link/chainlink-2-0-lays-foundation-for-adoption-of-hybrid-smart-contracts/

&lt;br/&gt;

**斯诺登肖像 NFT 以 2224 ETH 价格成功拍卖**

基于前美国中央情报局职员、“棱镜计划”披露者爱德华 · 斯诺登的肖像的 NFT 作品 ”Stay Free“，以 2224 ETH 的价格在 NFT 制作和交易平台 Foundation 成功拍卖，拍卖者为新闻自由基金会 ”Freedom of the Press Foundation“，竞得者为去中心化组织 PleasrDAO。

该 NFT 使用开源软件制作，背景画面为当年对美国国家安全局的大规模监控计划的标志性法庭裁决书，中间的肖像为斯诺登，摄影师为 Platon。其拍卖收益将全部捐献给新闻自由基金会，旨在资助和支持言论自由和新闻自由，主席为斯诺登。

![nft](https://i.ibb.co/H4kSp08/snowden.png)

cr: foundation.app，”Stay Free“

来源：https://foundation.app/Snowden/stay-free-edward-snowden-2021-24437

&lt;br/&gt;

**以太坊生态活动预告**

- 4 月 23 日 至 5 月 30 日

  imToken 将联合 ETHPlanet、EthFans、ECN、上海前沿技术研讨会和 HiBlock 等以太坊社区和项目，举办六场以扩容为主题的活动，形式有：Meetup + Workshop + AMA + Hackathon。

  本次系列活动网站：https://rollup.world

  第一场活动 (4月23日) 即将开始：Rollup - 以太坊 L2 扩容新范式杭州线下 Meetup。

  报名方式：点进文章《线下 Meetup 活动｜Rollup - 以太坊 L2 扩容新范式》，点击文末「阅读原文」扫码报名 Meetup 活动。



- 4 月 22 日，以太坊企业会议2021展望

  以太坊各个领域的企业将聚首 ”Ethereum in the Enterprise 2021“ 共同探讨以太坊主网、Layer2、Eth2.0、隐私、安全等主题。

  会议链接：https://www.conference2021.entethalliance.org/

</content:encoded></item><item><title><![CDATA[zkPorter:  L2 扩容的突破]]></title><description><![CDATA[zkSync 2.0 将发布数据可用性在链下的zkPorter]]></description><link>https://www.ethereum.cn/Technology/zkporter-a-breakthrough-in-l2-scaling</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/zkporter-a-breakthrough-in-l2-scaling</guid><pubDate>Fri, 16 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Matter Labs](https://medium.com/matter-labs/zkporter-a-breakthrough-in-l2-scaling-ed5e48842fbf)

&lt;br/&gt;

向 Layer2 的大规模迁移即将发生。随着协议从以太坊基础层向 Optimistic rollups 再到[兼容 EVM 的 zkRollups](https://medium.com/matter-labs/zksync-2-0-roadmap-update-zkevm-testnet-in-may-mainnet-in-august-379c66995021) 转移，许多人都希望我们最终可以使得链上 gas 费可控。但每个致力于以太坊扩容工作的人都知道这个行业的肮脏秘密：即使有了 rollups，我们最后可能也会回到我们最开始的地方。这是因为吞吐量的任何实际增长都会迅速地[被诱导需求](https://en.wikipedia.org/wiki/Induced_demand)所吞噬。

Rollups 只能为吞吐量带来线性增长 —— 所有数据仍然必须广播到所有全节点中。然而为了实现真正的扩容，我们需要实现吞吐量呈指数性增长。

这就是为什么我们认为 zkPorter 是一项重大的突破。它拥有 20,000+ TPS，且比 Optimistic rollups 更加安全。更重要的是，它将在 6 个月之后与 zkSync 2.0 一起上线主网。

![/scalability](https://i.ibb.co/jgDyjHg/scalability.png)

&lt;br/&gt;

# 为什么 rollups 不足以满足扩容需求？

2020 年 10 月，Vitalik 发布了文章《[以 rollup 为中心的以太坊路线图](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)》，文中他表示，如果所有 L1 的交易活动都迁移至 rollups 中，那么以太坊网络的每秒交易量预估可以达到约 3000 笔。这一猜测很快就要成为现实了：optimistic 和 [zkRollups 现在都支持对 EVM 的兼容](https://medium.com/matter-labs/zksync-2-0-roadmap-update-zkevm-testnet-in-may-mainnet-in-august-379c66995021)，也就是说应用可以快速且简单地从 L1 迁移至 L2。

以太坊正以爆炸式、呈指数级增长中。在一年内，DeFi 用户[从 15 万增长到 180 万名](https://duneanalytics.com/rchen8/defi-users-over-time) —— 但是 gas 费的增长速度要快 16 倍！(Uniswap 上的交易费从 []$0.20/笔涨到 $36/笔](https://docs.google.com/spreadsheets/d/1WdNQ5aOX6a6ulFte642OSS9KTxZjSQX7xAJoGwId6a4/edit?usp=sharing))。


![gas](https://i.ibb.co/DkZMGcP/gas-fee.png)

为什么？**因为可扩容性的任何提高，都会带来金融活动/交易的增长以及新的用例。**我们来看一下过去一年同时发生的事情

- DEX 月交易总量：[17.2 亿美元 → 670 亿美元](https://www.theblockcrypto.com/data/decentralized-finance/dex-non-custodial)

- DeFi 总锁仓量：[7 亿美元](https://www.yield.app/post/a-look-back-at-2020-the-year-of-defi) → [800 亿美元](https://defillama.com/home) (增长了 11000% ！)

- 在一个月内，OpenSea 的销售量：[500 万美元 → 1 亿美元](https://www.forbes.com/sites/youngjoseph/2021/03/29/nft-market-rages-on-nfts-market-cap-grow-1785-in-2021-as-demand-explodes/?sh=519b5d057fdc) 


与以太坊主网相比，optimistic rollups 将只会扩容约 25 倍，而 zkRollups 扩容约 100 倍。我们将在不知不觉中，又回到了起点：大多数普通用户还是难以承受 gas 费和使用以太坊的成本。

加密行业很快就会成为主流。在这个拥有 38 亿台智能手机的世界中 (相比之下，Metamask 的[月活跃用户有 300 万](https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn?hl=en))，我们需要将以太坊网络的可扩展性提高 1000 倍才能应对接下来的需求。这中间的差距促使我们构建 zkPorter。

&lt;br/&gt;

# zkPorter：推进加密货币大规模应用的引擎

![scaling](https://i.ibb.co/HDmz6Wm/l2-scaling.gif)



在 [zkSync 2.0](https://medium.com/matter-labs/zksync-2-0-roadmap-update-zkevm-testnet-in-may-mainnet-in-august-379c66995021) 中， L2 状态将会分成两个部分：数据可用性在链上的 zkRollup 和数据可用性在链下的 zkPorter。

这两部分都是可组合且可互操作的：zkRollup 上的合约和账户将能够与 zkPorter 上的账户无缝交互，反之亦然。没错！这样的话，从用户的角度来看，唯一可察觉的区别就是 zkPorter 账户的费用减少了 100 倍。

![zkporter](https://i.ibb.co/28CJBBz/zkporter.png)


想象一下：Uniswap 将智能合约部署在 zkRollup 端，并且 zkPorter 账户上的零售用户可以以 &lt;$0.03 的交易费 swap 代币。是怎么做到这么便宜的呢？这是因为绝大多数的 rollup 费用来自在以太坊主网上发布数据的成本。而 zkPorter 账户可以在 Uniswap 部署的合约上做数千次 swap，但是只需要向以太坊主网上发布单次数据更新。


zkPorter 账户的数据可用性将由 zkSync 代币持有者 (即“守护者”，Guardians) 提供安全保障。他们将通过对区块签名以确认 zkPorter 账户的数据可用性来跟踪 zkPorter 上的状态。守护者质押 zkSync 代币参与 PoS，因此任何数据可用性上的故障都将导致他们被罚没。如此一来，这为数据可用性提供了加密经济上的保障。


值得注意的是，zkSync 上的 PoS 比侧链等其他系统上的 PoS 安全得多。这是因为 zkSync 的守护者本质上是没有权力的：守护者无法窃取资金。他们只能停止生产区块。而且在这种情况下，用户将仍然能够提取他们的资金。

每个用户都可以自行选择自己资金的安全阈值。如果用户想要将所有数据可用性放在链上，就可以选择完全留在 rollup 上。但是如果某些用户比较在意费用，那么他们可以选择使用 zkPorter (我们猜测交易者和新用户最有可能使用 zkPorter)。这种可以自行选择链上/链下存储数据的架构叫做 [Volition](https://medium.com/starkware/volition-and-the-emerging-data-availability-spectrum-87e8bfa09bb)。


这将吸引那些在 L1s 上甚至在传统 rollups 解决方案上不太经济适用的应用使用 zkPorter。而现在，这些应用可以在以太坊上构建，为以太坊用户服务了。

&lt;br/&gt;

# zkPorter vs optimistic rollups

得益于零知识证明这一密码学，这一切才有可能实现。Optimistic rollups 按照 zkPorter 的方式实现如此大规模的扩容。如果 Optimistic rollup 将数据可用性放在链下，那么一名作恶的运营者就能够盗取 rollup 中的所有资金，而不会受到任何人的挑战。

同时，zkPorter 有着比 Optimistic rollups 更强的安全保障。为了理解其中的原因，接下来我们简要地概述一下 zkPorter 潜在攻击的成本和收益。

**1) 攻击成本**

截至今天，在 Optimistic rollup 上进行 51% 算力攻击的成本[不到 7000 万美元](https://medium.com/starkware/the-optimistic-rollup-dilemma-c8fc470ca10c) (以太坊向 PoS 迁移之后，这将不是大问题)。另一方面，如果想要使 zkPorter 上的数据不可用，攻击者将需要积累相当于所有 zkSync 质押代币的 2/3 的量 (几乎可以肯定将超过 7000 万美元)。再者，由于攻击者在购买代币时将会出现重大的滑点 (且质押代币无法被购买)，因此发起这样的攻击要比现货价格的成本要高得多。



**2) 攻击收益**

如果 optimistic rollup 被成功攻击了，那么黑客就能盗取 rollup 中的所有资金。这极大地增加了攻击动机。而如果黑客攻击了 zkPorter，ta 无法直接盗取资金：就算攻击成功，黑客只能停止生产区块，而不能盗取用户的资金。这种将攻击变现的难度，极大地降低了此类攻击的动机。

&lt;br/&gt;

#  在 zkPorter 上构建

zkPorter 即将到来。Matter Labs 团队正致力于研发工作，在 6 个月内推出产品级别的版本。很快，我们就能开始吃我们做的蛋糕了。

[zkPorter 将在 zkSync 2.0 版本中可用](https://medium.com/matter-labs/zksync-2-0-roadmap-update-zkevm-testnet-in-may-mainnet-in-august-379c66995021) —— 这是我们下一代智能合约平台，将支持 Solidity。我们的目标是在 5 月份推出公共测试网，并在夏季晚些时候上线主网。

同时，用户也可以使用 zkSync 1.x 用于支付用途 (2020 年 6 月份上线主网)。几周后，1.x 将支持交易以及 NFT 交易。

想要提前联系我们团队或者想要获得我们团队的支持？联系我们： hello@zksync.io

&lt;br/&gt;

# 帮助我们将以太坊带向数十亿用户


zkSync 是一个怀有使命的项目。如果你认同我们的[价值观、愿景以及以目标为导向的文化](https://www.notion.so/Matter-Labs-Team-Handbook-43342b471fe14f05b2baf250cb7c7a02)，加入我们！


目前我们正招聘的热门岗位 ([完整清单](https://www.notion.so/Career-at-Matter-Labs-4a69ed0f7acb45c89f662cf12dbc2464)查看网页版)：

- [高级软件工程师 (Rust、Solidity)]](https://www.notion.so/matterlabs/Senior-Software-Engineer-Rust-162f87f441214eb39619f83bdd9b3073)
- [公关主管 (负责讲故事的)](https://www.notion.so/matterlabs/Head-of-Communications-Chief-Storyteller-312fc8268be0479b8e83fe5631558533)

特此感谢 Haseeb Qureshi 的校对和建议！

&lt;br/&gt;

**以下为下半部分**
&lt;br/&gt;

Vitalik：

&gt;zkPorter 有着比 Optimistic rollups 更强的安全保障

我认为这个说法不恰当。假设两种方案的代码都没有 bug (在我看来，optimistic rollups 在短期内出现 bug 的风险更小，但这是另一个问题)，我更愿意将我的资产放在 optimistic rollup 上，而不是放在一个链下存储数据可用性的系统上。


看一下这篇文章的论点：


&quot;截至今天，在 Optimistic rollup 上进行 51% 算力攻击的成本不到 7000 万美元&quot;


这里举出的数据是由 Starkware 列出来的，其观点基本上是这样的：一名攻击者能够租用足够多的算力发起 51% 攻击，花费的成本为 $30/时。如果他们持续一周的审查攻击，成本大约在 $5000 万左右。


该论点有两处错误：


➤ 哈希值租用市场的流动性并不高，如果有人试图租用这么多算力，将会出现两种情况：要么没有那么多可租用的哈希值，要么在尝试租用时大大地提高了价格，同时警告了所有的用户。特别是，该网页 (https://www.crypto51.app/) 中，预测了使用 Nicehash 发起攻击的成本，但这个网页本身就展示了，Nicehash 只能够借出相当于以太坊网络 3% 的哈希值。


➤ 再者，尽管 51% 攻击发生了，社区也不会坐以待毙。相反，社区会协调一个紧急分叉来使攻击者下台，这完全能够在一周内实现 (解决上海 DoS 攻击的硬分叉只用了 6 天的时间，而解决 51% 攻击就更容易了，因为这是一个软分叉)。关于社区驱动的 51% 攻击恢复，我在 PoS 的背景下已经详细讨论过了；而在 PoW 的背景下将更困难，因为攻击者可以持续返回攻击，但想要恢复也是非常可行的。

简而言之，optimistic rollups 的安全性不错。


同时，该文章提倡的链下数据可用性委员会与基础链相比，安全性低得多。此外，他们之间没有紧密的耦合：如果一名攻击者将链下数据可用性层的代币全买了，那么以太坊社区根本无法保证可以帮助实行一个恢复分叉 (事实上，最近的先例：当一个应用层结构受到攻击时，甚至反对以太坊社区对链进行干预)。


另一方面，数据可用性层存储在分片中将受到整个以太坊网络的保护，两者将紧密耦合。在我看来，在此期间如果一些应用使用链下数据可用性是没问题的，但只有在基于分片的数据可用性可用之前，我们才可以明确链下数据为一个暂时的措施。但我认为这也没有必要；仅仅使用当前以太坊链来做数据可用性储存就可以了，容量已经可以达到 4000 TPS 了，我无法想象未来几年对交易的需求会超过这个水平。”诱导需求“确实存在，但不太可能在这个时候存在两个数量级的潜在诱导需求。

&lt;br/&gt;

@gluk64：



这篇文章很难做到既易于阅读又能够 100% 反映技术上的细微差别。我会尽量将它展开说：



我先强调一下，该文章的目的不是为了指出 optimistic rollups 不安全。相反，我们表达的观点是：



1. 在实践中，这两种方法都具有相当的安全性，但 zkPorter 要便宜几个数量级。



2. 同时，zkPorter 与 zkRollup 有直接的联系，也就是说可以提供更好的安全保障，并且比 ORU 便宜。再者，我们明确地建议将所有资金大的账户存储在 zkRollup 中。



3. 因此，使用 zkPorter，用户可以在两者之间选择 a) 更便宜和更安全 b) 便宜更多并且仍然相当安全。在这前提下用户怎么还会选择 optimistic rollups 呢？



即使你不同意 zkPorter 比 ORUs 更安全，好吧，这些论点依然成立！一旦 zkRollup + zkPorter 上线，就不再需要 optimistic rollups 了。即使 zkPorter 的安全性就像简单的侧链那么糟糕 (事实上并不是的，详见下面”动机“部分)，这个论点依然成立。



目前，认为 zkPorter 可能更安全的观点是基于以下几个互相支撑的独立要素提出的：



1. 蛮力攻击 (brute-force) 的成本是可以量化和比较的。



2. 针对性攻击在 optimistic rollups 上更为现实。



3. 攻击 zkPorter 的动机要低很多。



让我来详细说一下这三点。

&lt;br/&gt;

蛮力攻击

哈希值租用市场的流动性并不高


没错，但是这仍然是可行的。比如，一个攻击者可能会租用大量的 GPUs 或者 FPGAs。成本可能要比我们文章里估算的要高得多。但是这类攻击的关键是：他们不需要运行一周。看似合理的投入就足够了。


尽管 51% 攻击发生了，社区也不会坐以待毙。


如果是在 PoS 系统中，我很赞成这种观点，但是在 PoW 系统中，这样至少会极具争议性。很多人会认为这是特定激励系统的设计缺陷，因此要像对待 Parity 多签 bug 一样对待它。削弱区块链的不可变性将很容易引发社区危机。

&lt;br/&gt;

针对性攻击

在实践中，具有高价值和高吞吐量的 ORU 将仅仅由一些团体运营。尽管通过 hacking + 社会工程学等手段对他们所有人进行攻击是比较难的，但是有有着数十亿美元的激励，也不是不可能发生的。我们正生存在艰难的时期——现在全部民族国家都在努力地保护他们的核武器工厂免受黑客攻击！

&lt;br/&gt;

攻击动机

这一点很明显：与 ORUs 不同，zkPorter 攻击者只能冻结资产，而不能窃取资产。因此攻击者并不能够直接利用资产。此外，勒索数百万零售用户将非常困难，因为受害者很难达成任何共识。

&lt;br/&gt;

最后的想法：zkPorter 和 ETH2 分片

我确信数据可用性的最终目标是将 ZKP 和 分片结合 (e.g. 由纠删码支持)，而这只能在 L1 中实现。所以，没错，长期来看 ETH 2.0 和 3.0 将占主导。



而在那之前，超安全的 zkRollup 和超便宜的 zkPorter 之间实现无缝互操作的方案将是中长期的选择。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。



</content:encoded></item><item><title><![CDATA[柏林硬分叉后的 gas 成本]]></title><description><![CDATA[柏林硬分叉后 EIP-2929 与 EIP-2930 将如何影响 gas 成本？]]></description><link>https://www.ethereum.cn/Eth1.x/gas-costs-after-berlin</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1.x/gas-costs-after-berlin</guid><pubDate>Thu, 15 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [fvictorio](https://hackmd.io/@fvictorio/gas-costs-after-berlin)

柏林硬分叉已于 4 月 14 日[在主网上线](https://blog.ethereum.org/2021/03/08/ethereum-berlin-upgrade-announcement/)，引入了四份 EIP 。其中的两份 ([EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) 和 [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930))对交易的 gas 成本有影响。本文将解释部分 gas 成本在柏林前是如何计算的，加入了 EIP-2929 后会如何变化，以及如何使用 EIP-2930 引入的访问列表。

&lt;br/&gt;

# 要点速览

这篇文章很长，这是它的概要：

- 柏林硬分叉改变一些操作码的 gas 成本。如果在一个 dapp 或一个智能合约里 gas 费的值是硬编码的，它们可能会中止运行。如果这种情况发生了，且智能合约是不可更新的，消费者将需要用 EIP-2930 的访问列表才能使用那部分的操作码。
- 访问列表可以用作减少少量的 gas 成本，但实际上它们在一些情况下是会增加总 gas 消耗量的。
- `geth` 增加了一个叫 `eth_createAccessList` 的新 RPC方法，用以简化访问列表的创建。

&lt;br/&gt;

# 柏林硬分叉前的 gas 成本

EVM 执行的每个操作码都有一笔相关的 gas 成本。它们大多数的成本是固定的：`PUSH1` 总是消耗 3 个单位的 gas，`MUL` 消耗 5 个，等等。其他一些是会变化的：比如 `SHA3` 的操作码成本依赖于它的输入大小。

我们主要讨论操作码 `SLOAD` 和 `SSTORE`，因为它们是最受柏林硬分叉影响的。我们以后会讨论针对地址的操作码，比如所有的 `EXT*` 和 `CALL*` ，因为它们的 gas 成本也改变了。

## 柏林前 SLOAD 的 gas 成本

在没有 EIP-2929 之前，`SLOAD` 的 gas 消耗很简单：它总是消耗 800 gas。所以（目前）没有什么可说的。

## 柏林前 SSTORE 的 gas 成本

在 gas 消耗方面，`SSTORE` 可能是最复杂的操作码了，因为它的成本取决于像存储 slot 的当前值、新值、以及它是否之前被修改过。我们仅对一些情况进行分析以获得一个基本理解；如果你想了解更多，请阅读文末的 EIP 链接。

- 如果存储 slot 的值从0 变成 1 (或任何非 0 的值)，gas 消耗量是 20000。
- 如果存储 slot 的值从1 变成2  (或任何其他非 0 的值)，gas 消耗量是 5000。
- 如果存储 slot 的值从 1 (或任何非 0 的值) 变成 0，gas 消耗量也是 5000，但在交易的最后你会获得 1 笔 gas 费返还。本文不会讨论 gas 费返还，因为它们在柏林硬分叉中不受影响。
- 如果存储 slot 的值在之前相同的交易中被修改了，往后所有 `SSTORE` 的 gas 消耗量都是 800。

这部分的细节并不有趣，重要的是 `SSTORE` 很贵，而它的消耗取决于几个因素。

&lt;br/&gt;

# EIP-2929 后的 gas 消耗

EIP-2929 对上述所有操作码的 gas 消耗都有影响。但在深入这些变化前，我们需要先谈谈这份 EIP 引入的一个重要概念：**访问过的地址 (accessed addresses)与访问过的存储密钥 (accessed storage keys)。**

如果一个地址或一个存储密钥在之前的交易中被“使用”过，那么它们就会被视为“访问过的”。例如，当你 `CALL`（调用）一个其他合约，该合约的地址就会被标为“ accessed (访问过的)”。同样地，当你 `SLOAD`（加载）或 `SSTORE`（存储）一些 slot 的时候，交易的其他部分也会被视为访问过的。哪个操作码执行它并不重要：如果一个 `SLOAD` 读取了一个 slot，接下来的 `SLOAD` 和  `SSTORE` 都会被视为访问过的。

这里值得注意的是，存储密钥是“内置于“一些地址的。就如这份 EIP 所解释：

&gt; 在执行交易时，维持一组 `accessed_addresses: Set[Address]` 和 `accessed_storage_keys: Set[Tuple[Address, Bytes32]]`

也就是说，当我们说一个存储 slot 被访问了，我们实际上说的一对 `(address, storageKey)` 被访问了。

接下来谈谈新的 gas 消耗。

## 柏林后的 SLOAD

在柏林硬分叉之前，`SLOAD `固定消耗 800 gas。现在，它取决于该存储 slot 是否被访问过。如果它没有被访问过，gas 消耗是 2100；如果被访问过了，则是 100。因此，如果该 slot 是在访问过的存储密钥列表里的，`SLOAD` 的 gas 消耗会少于 2000。

## 柏林后的 SSTORE

让我们在 EIP-2929 语境下重温前面的 `SSTORE` 例子：

- 如果存储 slot 的值从0 变成 1 (或任何非 0 的值)，gas 消耗量是：
  - 如果存储密钥没有被访问过，22100
  - 如果被访问过了，20000
- 如果存储 slot 的值从1 变成2  (或任何其他非 0 的值)，gas 消耗量是：
  - 如果存储密钥没有被访问过，5000
  - 如果被访问过了，2900
- 如果存储 slot 的值从 1 (或任何非 0 的值) 变成 0，gas 消耗与上一种情况一样，再加上返还。
- 如果存储 slot 的值在之前相同的交易中被修改了，往后所有 `SSTORE` 的 gas 消耗量都是100。

如你所见，如果 `SSTORE` 正在修改的 slot 是之前被访问过的，第一个 `SSTORE` 消耗少于 2100 gas。

&lt;br/&gt;

# 总结

下表对上述的值进行了比较：

| 操作码                                                       |  柏林前  |  柏林后 |       |
| ------------------------------------------------------------ | --------------------- | ------------------- | ----- |
| Not accessed （未访问过的）                                  | Accessed （访问过的） |                     |       |
| SLOAD                                                        | 800                   | 2100                | 100   |
| SSTORE 从 0 到 1                                             | 20000                 | 22100               | 20000 |
| SSTORE 从 1 到 2                                             | 5000                  | 5000                | 2900  |
| SLOAD + SSTORE*                                              | 5800                  | 5000                | 3000  |
| SSTORE* + SLOAD                                              | 5800                  | 5100                | 3000  |
| 一个被写入的 slot 的 SSTORE       | 800                   | 100                 |       |
| * 从一个非 0 值到另一个非 0 值，比如第三行 |                       |                     |       |


请注意，在最后一行没有必要谈论 slot 是否已经被访问过，因为如果它之前就被写入，那它就被访问过了。

&lt;br/&gt;

# EIP-2930: 可选访问列表交易

我们一开始提及的其他 EIP 就是 EIP-2930。这份 EIP 增加了一种新的交易类型，它可以在交易里加入一个访问列表。这意味着你可以在交易执行开始前，事先声明哪些地址和 slot 应被视为访问过的。例如，一个未被访问过的 slot 的一个 `SLOAD` 需要消耗 2100 gas，但如果该 slot 被加入到交易访问列表里，同一个操作码只需消耗 100 gas。

但如果已经被访问过的地址或存储密钥会消耗更少 gas，这是否意味着我们可以把所有东西都添加到交易访问列表来降低 gas 消耗了？棒！不用给 gas 费了！ 然而，不尽然是这样，因为你每次添加地址和存储密钥的时候还是需要支付 gas 费的。

我们来看一个例子。假如我们正在向合约 A 发送一笔交易，访问列表可能如下：

```Powershell
accessList: [{
  address: &quot;&lt;address of A&gt;&quot;,
  storageKeys: [
    &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;
  ]
}]
```

如果我们发送一笔附有这个访问列表的交易，使用 slot `0x0` 的第一个操作码是 `SLOAD`，它消耗的是 100 而不是 2100 gas。这减少了 2000 gas。但每次把存储密钥添加到交易的访问列表中都需要消耗 1900 gas。因此我们只省了100 gas。(如果访问该 slot 的第一个操作码是 `SSTORE`而不是 `SLOAD`，我们可以省 2100 gas，也就是说如果我们考虑的是存储密钥的消耗的话，我们总共节省 200 gas。 )

这是否代表只要我们使用交易访问列表就能节省 gas？不是的，因为我们还需要支付添加地址到访问列表 (即我们的例子中的 `&quot;&lt;address of A&gt;&quot;` ) 的 gas。

&lt;br/&gt;

# 访问过的地址

到目前为止，我们只讨论了操作码 `SLOAD` 和 `SSTORE`，但柏林升级后不是只有这些操作码有变化。例如，操作码 `CALL` 之前的固定消耗量是 700。但 EIP-2929 后，如果地址不在访问列表里，它的消耗量变成了 2600，如果在，则是 100。还有，像访问过的存储密钥，无论之前访问的是什么操作码 (例如，如果 `EXTCODESIZE` 是第一次被调用，那么该操作码将消耗 2600 gas，而往后任何**使用同一个地址**的 `EXTCODESIZE`、 `CALL` 还是`STATICCALL`都只消耗 100 gas)。

这是如何影响有访问列表的交易的呢？例如，假如我们给合约 A 发送一笔交易，而该合约调用另一个合约 B，那么我们可以加入这样一个列表：

```Powershell
accessList: [{ address: &quot;&lt;address of B&gt;&quot;, storageKeys: [] }]
```



我们将需要支付 2400 gas 以把这个访问列表加入到交易里，但之后使用 `B` 地址的第一个操作码只消耗 100 gas，而不是2600。因此，我们通过这样做节省了 100 gas。如果 `B` 以某种方式使用它的存储，且我们知道使用的是哪个密钥，那么我们也可以把它们加入到访问列表里，这样可以为每个密钥节省 100~200 gas (取决于你的第一个操作码是 `SLOAD` 还是 `SSTORE` )。

但是为什么我们要谈论另一个合约？我们正在调用的合约呢？为什么不对这个合约进行这些操作？

```Powershell
accessList: [
  {address: &quot;&lt;address of A&gt;&quot;, storageKeys: []},
  {address: &quot;&lt;address of B&gt;&quot;, storageKeys: []},
]
```



我们可以这样做，但这样不划算，因为 EIP-2929 明确规定正在被调用的合约 (即`tx.to`) 地址会默认加入到 `accessed_addresses` 列表里。因此我们无须支付多余的 2400 gas。

让我们再对之前的例子进行分析：

```Powershell
accessList: [{
  address: &quot;&lt;address of A&gt;&quot;,
  storageKeys: [
    &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;
  ]
}]
```

除非我们要加入多几个存储密钥，否则这其实很浪费。如果我们预设 `SLOAD` 总是首先使用存储密钥，那么我们起码需要24 个存储密钥能保本。

你可以想象一下，做分析与手动创建一个访问列表并不那么有趣。幸运的是，其实有更好的方法。

&lt;br/&gt;

#  eth_createAccessList RPC 方法

Geth (从 1.10.2 版本开始 ) 加入了一个新的 `eth_createAccessList` RPC 方法，你可以用它来生成访问列表。它的使用与 `eth_estimateGas` 相似，但它返回的不是 gas 估值，而是像下面这样的结果：

```Powershell
{
  &quot;accessList&quot;: [
    {
      &quot;address&quot;: &quot;0xb0ee076d7779a6ce152283f009f4c32b5f88756c&quot;,
      &quot;storageKeys&quot;: [
        &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,
        &quot;0x0000000000000000000000000000000000000000000000000000000000000001&quot;
      ]
    }
  ],
  &quot;gasUsed&quot;: &quot;0x8496&quot;
}
```


也就是它给你该交易会用到的地址与存储密钥的列表，加上访问列表被加入情况下所消耗的 gas。（像 `eth_estimateGas`，这是一个估值，当交易实际上被挖的时候，这个列表可能会改变。）但，这并不代表 gas 消耗量会低于在没有访问列表情况下发送同一笔交易所消耗的！

我想我们会随着时间推移发现使用它的正确方法，但我猜的伪代码如下：

```Powershell
let gasEstimation = estimateGas(tx)
let { accessList, gasUsed } = createAccessList(tx)
if (gasUsed &gt; gasEstimation) {
  delete accessList[tx.to]
}
tx.accessList = accessList;
sendTransaction(tx)
```
&lt;br/&gt;

# 给合约松绑

值得一提的是，访问列表的主要目的不在于使用 gas。如 EIP 所解释：

&gt; 减轻由 EIP-2929 引入的合约断裂风险，因为交易可以提前指定交易计划访问的账户和存储 slot 并提前支付；最终在实际执行中，操作码 SLOAD 和 EXT*只消耗 100 gas：这个低 gas 消耗不仅可以防止由该 EIP 引起的断裂，还可以“松开”任何因 EIP-1884 而受限的合约。

这意味着如果一个合约对执行某事务的成本做了假设，gas 成本的增加就可能使它停止运作。例如，一个合约调用另一个合约，像这样 `someOtherContract.someFunction{gas: 34500}()`，因为它假设 `someFunction` 会准确消耗 34500 gas，这样它会出问题。但如果你添加了一个合理的访问列表，那么合约会再次运作。

&lt;br/&gt;

# 自己做检验

如果你像自己去测试，复制这个代码库，里面由多个可以用 [Hardhat](https://hackmd.io/@fvictorio/gas-costs-after-berlin) 和 geth 执行的实例。在 README 查看说明。

&lt;br/&gt;

# 参考文献

- [EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) 和 [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930) 是与本文相关的两个柏林硬分叉 EIP。
- EIP-2930 依赖于柏林硬分叉的另一部分： [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718)，它又叫类型交易。
- EIP-2929 参考了很多 [EIP-2200](https://eips.ethereum.org/EIPS/eip-2200)，因此如果你想深入了解 gas 成本，你可以从那里开始。
- 如果想看比较 gas 使用变更的更复杂实例，请看[这里](https://gist.github.com/holiman/aa7d2d28a9747548a0a14321a1572b22)。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2 进展更新 （截至 2021/4/10)]]></title><description><![CDATA[Rayonism 项目已推出重要规范、Vitalik 发表了多篇重要文章]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-4-10</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-4-10</guid><pubDate>Tue, 13 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210410)

&lt;br/&gt;

# 首推

本周有广泛共识的决定：[Eth 2.0 合并](https://ethmerge.com/)

&lt;br/&gt;

# 信标链


最近出现了一次[罚没](https://beaconcha.in/block/906882#attester-slashings)！在整整两个月没有任何罚没事件后，在 4 月 16 日 出现了一次单独的罚没事件。遗憾的是我对这次罚没没有更多的信息。

最近出了一份 Blst 加密库的[安全警告](https://github.com/supranational/blst/security/advisories/GHSA-x279-68rr-jp4p)，这个加密库我相信四个主网客户端都在使用。尽管这个漏洞看上去很难被利用，但所有客户端都已经更新到修复版本。还有[其他一些漏洞](https://twitter.com/GuidoVranken/status/1377749057632927746)也被修复了。如果你最近还没更新你的节点，我推荐你去更新。（Teku 公布的版本都没有使用这个有漏洞版本的 Blst，但保持更新总是好的。）

有一份关于修复潜在[最终确定性延迟攻击](https://github.com/ethereum/eth2.0-specs/pull/2292)的[新提案](https://github.com/ethereum/eth2.0-specs/pull/2292)。在最近的[开发者会议](https://hackmd.io/@benjaminion/wnie2_210410#Implementers)里，我们对此作出了一点[讨论](https://hackmd.io/@benjaminion/wnie2_210410#Implementers)：实现它不需要专门协调一个分叉，我们可以把它和 Altair 升级分开实现。

## Altair

Altair 是在 2021 年年中进行的信标链升级。

尽管发布了 [alpha.3](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.3) 版本的规范，与上期内容相比没有什么重大更新。它只是一些修补与说明。我提出的[一个字符](https://github.com/ethereum/eth2.0-specs/pull/2282/files)的修改也合并到 PR 里了 ![:tada:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/tada.png)![:joy:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/joy.png)

Eth2 团队继续专注在实现上，目标是在六月或7月进行部署。

## 合并

“合并”是旨在尽快把以太坊搬到权益证明链上的计划。开发者们有可能可以在[今年](https://twitter.com/drakefjustin/status/1379052831982956547)实现合并。这是很理想的情况；更现实的估计是2022年第一季度。

Prysm 也[实现了](https://hackmd.io/@prysmaticlabs/prysm-catalyst-interop)与 Eth1 合并客户端 Catalyst 互操作的演示。（Teku 在[去年八月](https://twitter.com/mkalinin2/status/1299038199591862274)实现了，Lighthouse  在[上个月](https://twitter.com/sigp_io/status/1374979655782989824)实现了。）

Mikhail Kalinin 写了[一份详细的规范](https://hackmd.io/@n0ble/ethereum_consensus_upgrade_mainnet_perspective)，关于现在的 Eth1 工作量证明客户端需要做哪些工作来为过渡到权益证明做准备。其实做的变更不多，我很希望在合并真的要启动的时候会有多个可用的执行层客户端。

已经有讨论合并的常规会议了。这些会议虽然没有直播，但[议程](https://github.com/ethereum/pm/issues/290)和[记录](https://www.youtube.com/watch?v=b3hfgLa_GHw)都是公开的。

一如既往地，整件事最难的部分是命名。Mikhail [总结](https://hackmd.io/@n0ble/the-merge-terminology)了在 Telegram 和 Discord 群组上的激烈讨论。最后，我们决定把合并后信标链上的东西称为“共识层”，把合并后 EVM/Eth1 上的东西称为“执行层”。更多的细节请看 [Mikhail 的文档](https://hackmd.io/@n0ble/the-merge-terminology)。

## Rayonism 项目

[Rayonism](https://rayonism.io/) 旨在协调更多的人一起构造和演示一个实现合并与分片的开发者测试网，甚至更进一步在该测试网上加上 Optimism rollup。

这个项目的工作是在为期一个月的 EthGlobal [Scaling Ethereum 黑客松](https://scaling.ethglobal.co/) 期间展开的，基本上与 Eth1 和 Eth2 相关的团队 (如果不是全部的话) 都会参加。

在 4 月7 日举行了一个[启动会议](https://notes.ethereum.org/@protolambda/SyRnDjsHd)，一份详细的元规范 ([meta specification](https://notes.ethereum.org/@protolambda/rayonism)) 已经总结出来了。想追踪进度和参与的话，读者可以加入[Rayonism Discord 频道](https://discord.gg/B7YUqnKN9J)。

Protolambda 将在未来几周的以下时间在 Discord 的语言频道`#rayonism-calls`为参与者提供可选的非正式”办公时间“。

| 太平洋时间 (-7) | 世界时间        | 欧洲中部时间 (+2) | 东澳大利亚标准时间 (+10) | 北京时间 （+8） |
| :-------------- | :-------------- | :---------------- | :----------------------- | --------------- |
| 10:00 周一      | 17:00 周一 4.12 | 19:00 周一        | 03:00 周二               | 01:00 周二      |
| 18:00 周三      | 01:00 周四 4.15 | 03:00 周四        | 11:00 周四               | 9:00 周四       |
| 02:00 周五      | 09:00 周五 4.16 | 11:00 周五        | 19:00 周五               | 17:00 周五      |

## 测试网

Nimbus 团队在[推特](https://twitter.com/ethnimbus/status/1376497707263660034)对 [Prater 网络](https://prater.beaconcha.in/)做了很好的介绍。我们鼓励所有在 Pyrmont 网络做测试的质押者在未来几周都迁移到 Prater 网络，因为我们打算用 Pyrmont 做一点实验，可能导致有点不稳定。这里是 Prater 网络的 [Launchpad](https://prater.launchpad.ethereum.org/en/)。

## 工具

存款合约的 CLI (命令行界面) [升级](https://github.com/ethereum/eth2.0-deposit-cli/releases/tag/v1.2.0)了，现在支持存款者指定一个 Eth1 地址作提款，而不是一个 BLS12-381 提款密钥。这大大简化了可用性，并使适度去信任的质押池变得可能。

[Valid8r](https://github.com/pondron/valid8r) 发布了[v1.0.0 版本](https://github.com/pondron/valid8r/releases/tag/v1.0.0)，它是一种”保护系统“，用于检查你的信标链质押设置的配置。

这可能是有用资源：[Beaconcha.in](http://beaconcha.in/) 出了[用 Eth1 地址识别质押池](https://beaconcha.in/pools)的数据。

&lt;br/&gt;

# 释义性文章

[InsideTheSim](https://twitter.com/InsideTheSim) 在社区号召大家到网站 [The Eth 2.0 Merge](https://ethmerge.com/) 给 FAQ 部分回答问题。现在已经有相当多高质量内容了。大家也去添砖加瓦吧！

在过去几周 Vitalik 发表了很多内容。首先，受启发于 Justin Drake 作客[Bankless](https://www.youtube.com/watch?v=bWqhn1hXvVc) 的那期内容，Vitalik  发表了”[A brain dump on PoS vs PoW arguments](https://www.reddit.com/r/ethereum/comments/mf31ia/a_brain_dump_on_pos_vs_pow_arguments/) (通俗版 PoS vs Pow 的论据）“。（我强烈推荐 Justin Drake 的那期——完整的两个小时！关于为什么权益证明从根本上比工作量证明提供更好的安全性，他给出了充分且不太技术性的见解。）

Vitalik 最近还在 Reddit 上发表一些关于多个 Eth2 构思和概念的简要释义文章。这篇是关于[错开分片区块以实现更快的出块时间（Shard block staggering for faster block times）](https://www.reddit.com/r/ethereum/comments/mbksxt/shard_block_staggering_for_faster_block_times/)，这个构思他几年前在[Ethresear.ch](https://ethresear.ch/t/near-instant-transaction-confirmation-via-staggered-shard-block-production/5643?u=benjaminion) 上第一次提出。还有一篇讨论[单个秘密领袖选举协议 (Single secret leader election protocols)](https://www.reddit.com/r/ethereum/comments/m9j5cy/single_secret_leader_election_protocols/)。这两篇文章的内容都不在协议中，但以后可能会把它们放入路线图。

Vitalik 还发表了非常有价值的文章 &quot;Why sharding is great (为什么分片棒棒的)&quot;：对技术属性进行深入浅出地解释。

Protolambda 又制作了一批[史诗般的图表](https://github.com/protolambda/ethereum-scaling-diagram)。大家可以点击每个部分展开来看。(原始和最好的内容在[这里](https://raw.githubusercontent.com/protolambda/beacon-schematic/master/beacon_chain.svg)，虽然有些元素已经有点过时，比如交联)。

Pintail 发表了关于[质押奖励](https://github.com/pintail-xyz/validator_rewards/blob/main/validator_rewards.ipynb)的深入分析文章。如果你想知道为什么有的验证者已经进行了非常多次的区块提议，而有些 (比如我的) 却只有非常少，这篇文章给了你答案。 Lakshman Sankar [增加了一些评论](https://twitter.com/lakshmansankar/status/1380147158792380428)，Pintail 也把这部分内容链接到一个简单的、计算奖励的[电子表格](https://docs.google.com/spreadsheets/d/1RjOKfdaZzez6t5l6FbwHVIEITK1zBbTJDPhOsiosqmw/edit#gid=0)里。

&lt;br/&gt;

# 媒体

Beacon Book 发表了第一篇更新”[Beacon Book: Update 001](https://stateful.mirror.xyz/tNwN3gii-e1lBBK3RpgtG23kSry_J2GjeibxM8y3_9E)“。我有幸将对此进行校对，我非常期待。总共有 46 个人参与传播以太坊 2.0 的事业。这提醒着我：我们正在做非常[重要](https://twitter.com/benjaminion_xyz/status/1378321095544217604)的事。

Bison Trail 的 Elias Simos 继续 Eth2 人物主题的访问，现在已经发表了第四篇人物报导：这次是来自 Nimbus 的 [Jacek Sieka](https://bisontrails.co/eth2/jacek-sieka/)。我很喜欢这个系列，哪怕只因为次访问不同的受访者都能带出不同的观点。有趣的是，Jacek 曾经从事高频交易；而 Teku 团队的 Adrian Sutton 也曾经是一名高频交易老手。

Viktor Bunin 也发表了很棒的 Eth2 更新文章——[第13期](https://bisontrails.co/eth2/013/)，他也是来自Bison Trails。

Danny Ryan 发布了[Finalized no. 25](https://blog.ethereum.org/2021/04/02/finalized-no-25/)，内容包括 Rayonism、Blst 警告、提醒公开的信[标链安全性+测试的提案征求](https://notes.ethereum.org/@lsankar/security-rfp)。

Tim Beiko 最近离开了Teku，不再是我的同事了![:cry:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/cry.png)，但加入了以太坊基金会![:tada:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/tada.png)，面对圈外人对[以太坊未来](https://twitter.com/TimBeiko/status/1377354216558108673)的质疑，他作出了非常出色的回应。非常值得一读！

Coindesk 最新一期 [Mapping out Eth2](https://www.coindesk.com/podcasts/mapping-out-eth-2-0) 播客：

- [Eth 2.0 在 2014 年意味着什么，今天又意味着什么](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/eth2-0-staking-long-term-market-value)
- [普及：导航以太坊的北极星](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/staking-eth-2-0-young-developers) - 我们跟 Coogan Brennan 谈论了他发表的、关于设置个人质押者的系列文章。

&lt;br/&gt;

# 研究

椭圆曲线的专家可能很高兴看到 Vitalik 的文章”[Request for cryptographic primitive: vector commitment for elliptic curve points with algebraic properties](https://ethresear.ch/t/request-for-cryptographic-primitive-vector-commitment-for-elliptic-curve-points-with-algebraic-properties/9080)“ 

同样是 Vitalik 的文章，关于在任何时间点设置验证者[数量上限](https://ethresear.ch/t/simplified-active-validator-cap-and-rotation-proposal/9022?u=benjaminion)的简化提案，比如 50 万。这样做为了维持高水平的安全性，同时使节点不会因为需要处理更数量庞大的验证者活动而负担过重。

&lt;br/&gt;

# 常规会议

## 实现者会议

第61次会议在 4 月 8 日举行。直播出现了技术问题，但会议后还是把录制的[上传](https://www.youtube.com/watch?v=XLB5HEWdZUE)了。只是你看不到脸![:sunglasses:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/sunglasses.png)

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/212)
- [会议视频](https://www.youtube.com/watch?v=XLB5HEWdZUE)
- [我的速记](https://hackmd.io/@benjaminion/SkiD8Y3rd), 还有 Alex Stokes 的[实时推文](https://twitter.com/ralexstokes/status/1380209522447282176).

## 合并会议

第一次合并会议在 4 月 1 日进行。会议的主要目标在于与 Eth1 客户端维护者一起审阅提议的合并规范，并收集反馈。我印象是会议结束后大家都对现在的进程感到相当信心。

- [会议议程](https://github.com/ethereum/pm/issues/290)
- [会议视频](https://www.youtube.com/watch?v=b3hfgLa_GHw)

&lt;br/&gt;

# 活动预告

- 2021 年 4 月 21 日 北京时间 8:00 am: [信标链安全性和测试提案征求](https://notes.ethereum.org/@lsankar/security-rfp)回复截至时间。
- 4 月 16 日—5 月 13 日：[Scaling Ethereum](https://scaling.ethglobal.co/) 黑客松，包括 [Rayonism](https://rayonism.io/)。

&lt;br/&gt;

# 其他消息

我发表了与其他客户端相比 Teku 性能优势的内容。的确，Teku 的优势是微小的，但我仍然为这个团队感到骄傲！对比在Rocketpool Beta 3 里各个客户端的性能时， [/u/torfbolt ](https://www.reddit.com/user/torfbolt/)也得出相似的结果。

&lt;br/&gt;

# 最后

**Teku 招人了!**

如果你是一名 Java 开发者，且有兴趣成为一名核心开发者，那么不妨看看这份[职务说明](https://consensys.net/open-roles/3040114/)。

如果你有疑问或想聊一下这个职位，欢迎邮件或推特私信：

我的邮箱：`ben.edgington@consensys.net`

推特：https://twitter.com/benjaminion_xyz

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/4/12]]></title><description><![CDATA[柏林硬分叉，gas费低的原因？]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-12/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-12/</guid><pubDate>Mon, 12 Apr 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/YpNxxk0/cover.png)

&lt;br/&gt;

**最近的低 gas 费与攻击抢跑机器人有关？**

![why](https://i.ibb.co/JQDdBnb/why-gas-low.png)



这两天的低 gas 费是因为币安智能链吸引了新用户？Flashbot 和 PGA 机器人的作用？以太坊上的利益广泛减少？还是三者都有？

尽管不确定答案，但这期七日谈想深入两个攻击抢跑机器人的案例。

4.9 出现这样一笔特别高交易费的交易，交易发送者给鱼池矿工转了68.13个 ETH 的交易费，而支付的 gas 费则是零。

![event](https://i.ibb.co/ryDBsZ6/4-10-bot.png)

Rober Miller @bertcmiller 在推特上对这件事进行了解释。以下为他的推特的编译：

这笔交易非常有趣！一个机器人一直在尾追 (backrunning) 一些新上交易所的代币，有效地在其他人之前通过支付额外费用给矿工买到这些代币。而 4.9 有个新上交易所的代币进行了回击，给该机器人设陷阱获得 20 万美元，同时因机器人购买他们的代币而获利。事情是这样的：

在过去几周，这个机器人一直在监测以太坊交易池里在 Uniswap 上新创建的交易对。如果它发现了，它会在交易对上线后马上买入，这样它就可以比任何人都早买入这个新代币。

![liquilidity](https://i.ibb.co/rFHCNvy/initial-liquidity.jpg)

这种机器人一直给矿工支付高额费用。你可以在这里看到，Flashbot 中矿工费最高的一些汇总交易都是来自这个机器人（标黄）。这些机器人一共支付了 340 个 ETH 给矿工。

注：这是 Flashbot 的仪表盘，是公开的数据。

![flashbot](https://i.ibb.co/CKhZtcb/flashbot.png)

这个机器人通过做这样的事可以赚非常多的钱。他们一开始以10 万~20 万美元买入，把价格快速推高，然后逐渐以高出它们买入时几倍的价格慢慢抛售。

一个社区成员监测了这个过程并发现它们在这样一次操作中可以赚得 200 万美元。

![profit](https://i.ibb.co/BfLH031/great-profit.jpg)

但这个森林并没有那么黑暗。这些都是引人注目的交易，且 DeFi 社区的人是非常聪明的。

有人给这个机器人设了陷阱：他们部署了一个新的代币，如果交易池启动后 3 个区块内有大量买入的话，这些代币会被冻结。

有趣的是，这个合约名就叫 “LiquidityTrap.sol&quot;，且在大家都可以在 Etherscan 上看到：

https://t.co/vkNa7xzCWH?amp=1

![Liquiditytrap](https://i.ibb.co/0qrGYF0/Liquiditytrap.png)

就在 Uniswap 的交易池开发后，那个机器人掉进陷阱了！ 上线交易所后，它们买入了价值 100 ETH 的 ”Kattana&quot; 代币，因此掉入了流动性陷阱。它们还支付了 68 个 ETH 给矿工！

![Image](https://i.ibb.co/YPXLRZT/kattana.jpg)

看上去这次是成功了！尽管在后面几个区块里机器人开始抛售其他代币，但 Kattana 的数量没有变。

![trap1](https://i.ibb.co/7Gb6r6K/trap1.jpg)



![trap2](https://i.ibb.co/PWr7svT/trap2.jpg)



买入的 6.7 万个代币且现在的价格是 24 美元，总价值是它买入时的 6 倍。

![6](https://i.ibb.co/W2W4S78/6x.jpg)

在我看来，这个机器人现在可以做的只有把所有的 Kattana 发回给合约的所有者或永远持有被冻结的 Kattana。

对 Kattana 来说，它获得了所有的好处——代币价格马上飙升，且无法在二级市场抛售。

![benefit-Kattana](https://i.ibb.co/0MmW0XN/benefit-Kattana.png)



不确定这是否只是一个陷阱，但 Kattana 是一个认真的项目。

对机器人是否有阻吓作用不得而知，但可能它们赚到的远多于这次损失给 Katanna 的。

看以机器人之道还治机器人之身 (例如，Salmonella) 还是相当精彩的。

（编者注：同样的事情在 4.11 再次发生，@bertcmiller 也对这次事件进行了记录。）

昨晚 (4.11) ，有人用极其聪明的机制从三明治攻击机器人手上夺下 100 个 ETH。随后，有第二个人加入，通过攻击其他三明治机器人获得了 300 个 ETH。详情如下：

要理解事情是如何发生的，你需要对 Flashbot 稍有了解。你可以把 Flashbot 想成是用户通过“汇总”在一起的交易与矿工直接沟通他们想要的交易排序。

不同于用户用 gas 价格来支付交易费， Flashbot 用户通过智能合约调用 (block.coinbase.transfer) 来支付费用，它会把 ETH 转给矿工。

下图是一个套利机器人这样做的屏幕截图，留意看 0 gas 费和 0.075 个 ETH 转给星火矿池。

![case2](https://i.ibb.co/3cC5yYw/case2.jpg)



矿工会从用户收到很多这样的汇总交易，并把支付得最多的汇总交易打包到区块。用户喜欢这样做因为他们只需要支付被打包了的交易，且可以决定他们想要支付的价格。

三明治机器人监测交易池里用户在 Dex 上的买入情况然后夹击：在受害者买入前把价格推高，在受害者买入后抛售赚钱。这三笔交易 (买入，受害者交易，卖出) 形成一组汇总交易。

注意：三明治的卖出交易是包含付给矿工的智能合约款项的。

![sellpayment](https://i.ibb.co/P6Gct9Q/sell-payment.jpg)

![sellpayment2](https://i.ibb.co/JRxMwzs/sell-payment2.jpg)

打包费用是在卖出交易里支付给矿工的，这一点很重要！也就是说，只有当机器人把抢跑交易里买来的代币成功卖出后才会支付给矿工。如果卖出失败了，矿工是没有打包费的，也就是他们的汇总交易没有被打包成功。

为了进行得更稳妥，机器人会先在本地基础设施上模拟测试它们的交易。只有当模拟进行得顺利时，它们才会发出交易。

（Flashbot 还会提供工具使这个操作更简单。）

[@NathanWorsley_](https://twitter.com/NathanWorsley_) 在发表了他关于 Salmonella 的文章后鼓励一大批人尝试用 ERC20 的代币给三明治机器人下圈套。

简言之，Salmonella 是一种代币，如果你不是合约所有者的话尽量不要交易，而三明治机器人会超额支付并用100 个 ETH 换来 REKT。

三明治机器人仅在卖出交易成功时才会支付交易费，这个设计可以防御这一点。如果你支付的 ETH 无法让你获利，那么你就不会支付！

且三明治机器人会有模拟测试，在这样的情况发生前看看它们获得的是不是 REKT。

但有两个很聪明的人发现这些防御的漏洞。

第一道防御的突破点在模拟测试。这通过 ERC20 合约的转账功能实现，它可以核查该区块是否由一个 Flashbot 矿工挖的，如果是，它会转出很少。下图是我的伪代码。

本地的模拟测试不会有问题，但在实操中三明治机器人获得的是rekt。

![rekt](https://i.ibb.co/QMppC4Q/rekt.png)



 第二道防御是仅在卖出交易里才有打包费用。

再说一次：三明治机器人给矿工支付费用是以它们获利为条件的。

把这个 ERC 20 代币支付给矿工 （再次提醒：也是我的伪代码）可以打破这道防御。

因此，即使三明治机器人卖出交易失败了，矿工仍然得到打包费用。

![de](https://i.ibb.co/HzC5FC9/defend2.png)

![de2](https://i.ibb.co/prKBnDM/defend2-2.jpg)



在现实发生的情况是这样的：

三明治机器人成功落入圈套，买入价值 100 个 ETH 的“毒”代币。“毒”代币所有者的诱饵触发自定义的转账功能，这需要给矿工支付 0.1 个 ETH。

三明治机器人的卖出交易因为“毒”代币的设置而不成功。

![p1](https://i.ibb.co/nbN2PL5/poison1.jpg)

![p2](https://i.ibb.co/fYB9bR5/poison2.jpg)

![p3](https://i.ibb.co/xqBJnGT/poison3.jpg)

因为三明治机器人是以汇总的方式将三比交易打包：成功买入、诱饵、失败卖出。

“毒” ERC 20 的支付是自定义转账形式，就是这一点激励矿工去打包。

我想第一个人这样做获得了 100 ETH。你可以在这里看到在 Uniswap 上的交易：https://t.co/UokTURqBkF?amp=1

它们的其中一个受害者是最成功的 Flashbot 机器人操作者组织之一，他们马上作出反应。

https://etherscan.io/token/0xe253a1f7d5818022661bfbd2cbe043b642b4eff9?a=0x01f8d5a4862d51d2cf0cf52ac900a4d60adaeee6

在短期内，这个受害者变成顶级掠食者。他们发起一次相似但稍有不同的 ERC20 (&quot;YoloChain&quot;)，并最终成功诱惑了更多的三明治机器人。

在这次行动中他们获得了 300 个 ETH ！

https://t.co/dWNCZe67lZ?amp=1

第一个“毒”代币的所有者发现他们的受害者竟然是区块上最后一个掠夺者，它们在 Flashbot discord 上的加密签名上附上表示尊敬的留言。

我很欣赏。

[https://etherscan.io/verifySig/2503](https://t.co/WpfSnjDLeG?amp=1)

![respect](https://i.ibb.co/YWS5Hpk/respect.png)

根据我的计算，在这次事件中，这两个给机器人下圈套的人总共获得约 400 个 ETH 的，可能还有更多的&quot;毒“代币是我没发现的。

”大屠杀“事件到这里就结束了。

三明治机器人操作者已经发生相应升级了他们的机器人了。有些已经彻底耗尽了。

&lt;br/&gt;

# Eth2

Mikhail Kalinin 发布了 &quot;Rayonism 的合并规范 v.0.1.0&quot;，这份文档详述信标链和合并前阶段客户端需要做的修改，以及如何把它们变成合并后阶段的共识节点和执行引擎。

详情：https://notes.ethereum.org/@n0ble/rayonism-the-merge-spec

&lt;br/&gt;

Protolambda 发布了”Rayonism-Meta-Spec&quot;，以实现合并与分片的测试网。这份meta-spec 内容主要包括：

- 重点放在合并功能的实现
- 就新功能和黑客松特定修改的快速迭代
- 内容基本确定下来后把它合并上升为规范
- 为实现者提供注释和协作重点

文章还包含黑客松的详细行程内容安排。

详情：https://notes.ethereum.org/@protolambda/rayonism

&lt;br/&gt;

Protolambda 还发布了&quot;多客户端合并后阶段以太坊开发者测试网设置&quot;。

详情：https://notes.ethereum.org/@protolambda/merge-devnet-setup-guide

&lt;br/&gt;

质押在 Lido 上的 ETH 已达 20 万个 ETH。

来源：https://twitter.com/LidoFinance/status/1381221388414038016?s=20

&lt;br/&gt;

# Eth1

**伦敦升级测试网 Aleut 上线**

4.9 第一个伦敦升级测试网 Aleut 上线，同步数据的指南可能这周推出。

来源：https://twitter.com/TimBeiko/status/1380530805169123339?s=20

&lt;br/&gt;

**节点运行者请在柏林硬分叉前升级所运行客户端的最新版本**

柏林升级即将在 4 月 14 日，区块高度 12,244,000 启动，为了与柏林升级兼容，请节点运行者尽快升级所使用的客户端至最新版本。

Besu [v21.1.4](https://github.com/hyperledger/besu/releases/tag/21.1.4)

EthereumJS VM [v5.3.1](https://github.com/ethereumjs/ethereumjs-monorepo/releases/tag/%40ethereumjs%2Fvm%405.3.1)

Geth [v1.10.2](https://github.com/ethereum/go-ethereum/releases/tag/v1.10.2)

Nethermind [v1.10.56](https://github.com/NethermindEth/nethermind/releases/tag/1.10.56)

OpenEthereum [v3.2](https://github.com/openethereum/openethereum/releases/tag/v3.2.0)

Turbogeth [04.02 alpha](https://github.com/ledgerwatch/turbo-geth/releases/tag/v2021.04.02)

&lt;br/&gt;

# Layer2

**追踪 Layer2 解决方案锁仓情况的 L2Beat**

由 [@krzkaczor](https://twitter.com/krzKaczor) 、[@DamianPaszkowsk](https://twitter.com/DamianPaszkowsk) 、 [@piotr.klis](https://twitter.com/piotrklis_) 、[@bkiepuszewski](https://twitter.com/bkiepuszewski) 共同创建的网站 L2Beat：https://www.l2beat.com/ 追踪了部分以太坊解决方案及其项目的锁仓量，以及它们的市场占比，包括 Loopring、Optimism、dydx、zkSync、Aztec、Fuel。而该网站是通过追踪 Layer1 上不同代币桥的代币/ETH 资产来统计各个方案及项目的总锁仓量。

![l2beat](https://i.ibb.co/26qjS06/1.png)

&lt;br/&gt;

**Celer 的 layer2. finance 推出 Ropsten 测试网，参与测试赢得奖励**

状态通道解决方案 Celer Network 推出 layer2. finance 测试网嘉年华活动，通过竞赛活动来吸引用户测试 layer2. finance 系统，并将提供价值 3.2 万美元的奖金。

嘉年华活动时间：UTC 时间 4 月 7 日 - 4 月 19 日

测试网地址：ropsten.layer2.finance

中文版测试指南：[Layer2. Finance 测试网嘉年华](https://mp.weixin.qq.com/s/fGX1vZ9ylp3QAzBK0GIjVw)



**StarkEx 为 Immutable X 与 dydx 提供扩容解决方案** 

基于 StarkEx 解决方案的 Immutable X 于 4 月 9 日上线主网，为 NFT 铸造以及交易提供扩容解决方案。Immutable X 是第一个构建在 L2 上的 NFT 铸造以及交易平台，并且是 StarkEx 的第三个应用案例。



![2](https://i.ibb.co/1n1RTqm/2.png)

来源：https://www.immutable.com/blog/immutable-x-alpha-trading-launch

另外，StarkEx 的另一个应用案例 dydx 也于 4 月 6 日在主网上线了其永续合约的 Layer2 版本。早在今年 2 月份时， dydx 已经在主网发布了一个接近 Alpha 版本的 Layer2 永续合约供用户、流动性提供者以及战略伙伴使用。过去几周，dydx 中有 110,000 名用户注册进入等候名单，交易数量超 25,000 笔，交易数额约 9 千万美元。而现在，该协议正式面向公众开放。

![3](https://i.ibb.co/LgvhS16/3.png)

来源：https://dydx.exchange/blog/public

&lt;br/&gt;

# 生态

**福布斯杂志以 33 万美元的价格成功拍卖其 NFT 封面**

商业杂志福布斯在 NFT 交易平台 Nifty Gateway 拍卖其 NFT 封面 “Merchants of the Metaverse”，封面中的人物分别为 Cameron 和 Tyler Winklevoss。为期 24 小时的拍卖最后以 333,333 美元的价格被 @mondoir 竞得。

![4](https://i.ibb.co/4YM4G6M/4.png)

来源：https://www.theblockcrypto.com/linked/101144/forbes-nft-winklevoss-auction-ends



**EthStaker 将举办柏林升级的观看派对**

柏林升级即将在 4 月 14 日启动，届时，EthStaker 将在升级前两个小时举办一场观看派对。链接：https://ethstaker.cc/berlin-upgrade-party/

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。


</content:encoded></item><item><title><![CDATA[Vitalik：Gitcoin Grants第九轮回顾]]></title><description><![CDATA[迄今为止捐赠总额最高的Gitcoin轮次；二次方募资面临新的挑战]]></description><link>https://www.ethereum.cn/Ecosystem/round9</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/round9</guid><pubDate>Fri, 09 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/04/02/round9.html)

&lt;br/&gt;

*感谢 Gitcoin 团队提供的反馈和图表。*

*特别说明：在这类回顾文章中，对人员或组织所采取的行动做出的任何批评，尤其是“共谋”、“贿赂”和“结党”等词汇，仅是出于分析和机制设计的精神，不应被视为  (尤其是道德上的) 对人们和组织本身的批评。你们都是善良的人，我爱你们。*

Gitcoin Grants 第九轮刚刚结束，并且与往前一样获得了成功。 本轮匹配金额高达 50 万美元，超过 12,000 名捐助者向 812 个不同项目捐赠了 138 万美元，这是迄今为止资金数额最大的一轮。不仅仅是之前的项目，新项目也获得了大量捐赠，这证明了该机制能够避免固话，也能适应不断变化的环境。在最近的两轮中，专为东亚地区开设的新类别也取得了成功，从而将多个东亚以太坊项目推向了前沿。

![results1](https://i.ibb.co/hmXJMVW/results1.jpg)

![results2](https://i.ibb.co/0j7x5RH/results2.jpg)

![results3](https://i.ibb.co/1TD1d34/results3.jpg)

![results4](https://i.ibb.co/X2p38gk/results4.jpg)


但是随着规模的扩大，第九轮也带来了前所未有的独特挑战。其中最重要的是合谋和欺诈：在第九轮中，超过 15％ 的捐款被发现可能具有欺诈性。当然，这是不可避免的，而且从一开始就在预期内。对于一些参与者这么快就开始认真尝试利用该机制获取私利，我确实感到惊讶。Gitcoin 团队已做出有力回应，并[发布了博文](https://medium.com/block-science/deterring-adversarial-behavior-at-scale-in-gitcoin-grants-a8a5cd7899ff)详细说明了用于检测和应对对抗行为的策略以及[治理方式](https://gitcoin.co/blog/gitcoin-grants-round-9-governance-brief/)。**但是我个人认为，从长远来看要成功地限制对抗行为，将需要进行更严肃的改革，并做出一些牺牲。**

&lt;br/&gt;

## 新增许多新的大额资助方

Gitcoin 在本轮融资中继续成功吸引了许多匹配资金的提供者。[BadgerDAO](https://badgerdao.medium.com/)，一个定位为“致力于构建 产品和基础设施将比特币引入 DeFi 的 DAO”项目，向匹配池捐赠了 30 万美元，这是迄今为止最大的单笔捐赠。

![fundersleague](https://i.ibb.co/Vjq8rNJ/fundersleague.png)

其他新的资助者包括 [Uniswap](https://app.uniswap.org/)、 [Stakefish](https://stake.fish/)、 [Maskbook](https://mask.io/)、[FireEyes](https://medium.com/fire-eyes-dao)、 [Polygon](https://polygon.technology/)、[SushiSwap](https://sushi.com/) 和 [TheGraph](https://thegraph.com/)。随着 Gitcoin Grants 成为以太坊公共物品募资的成功归宿，Gitcoin Grants 继续吸引认受性，成为项目反哺生态系统的首选。这是成功的标志，希望它能够持续进一步发展。下一个目标应该是不仅要向匹配池一次性捐款，而且要长期进行捐款 (甚至是新发行的代币将其持有的一定比例捐赠给匹配池)！

&lt;br/&gt;

## 流失率保持健康

Gitcoin Grants 需要保持关注的问题是如何平衡稳定性和固化性：如果每个项目的匹配资金在每一轮之间变化太大，那么团队很难依靠 Gitcoin Grants 筹资，但如果匹配资金变化太小 ，新项目很难有一席之地。

对此我们可以进行比较。首先，让我们来对比一下这一轮和上一轮前十的项目。

![combined1](https://i.ibb.co/YhxWMVq/combined1.png)

![combined2](https://i.ibb.co/dM3s9tm/combined2.png)

![combined3](https://i.ibb.co/7g0Syd3/combined3.png)


在所有情况下，前十名中大约有一半项目来自前一轮，而另一半则是新进入的项目 (另一方面，前十名中有一半跌出了)。图表有些不准确，Gitcoin Grants 开发基金和 POAP 似乎已经跌出，但实际上只是更改了类别，因此 40％ 的流失率可能更准确。

![churn](https://i.ibb.co/M6TRybH/churn.jpg)

如果将第八轮的结果与[第七轮](https://vitalik.ca/general/2020/10/18/round7.html)进行比较，流失率约为 50%，近似第七轮与[第六轮](https://vitalik.ca/general/2020/07/22/round6.html)的比值。因此，看起来流失率较为稳定。在我看来，大约 40％ 至 50％ 的流失率处于健康水平，在保持长期项目的稳定性和避免新项目被排斥之间取得了平衡，但这当然只是我的主观判断。

&lt;br/&gt;

## 对抗性行为

本轮的新挑战在于大规模的对抗性行为企图。在这一轮中有两个主要问题。首先，发现了大量的贡献者群体可能只是少量个人或是紧密联系的组织，开设了许多账户来试图作弊。这是由 Gitcoin 团队使用其特有的分析算法发现的。

对于这一轮，Gitcoin 团队在征询社区意见后，决定承担欺诈行为的代价。无论是否接受欺诈性交易，每个项目都将获得其最高匹配资金，差额总计约 33,000 美元，由 Gitcoin 的国库支付。 但是在以后的轮次中，团队决定在安全性上更加严格。

Gitcoin [团队文章](https://medium.com/block-science/deterring-adversarial-behavior-at-scale-in-gitcoin-grants-a8a5cd7899ff)中的图表描述了他们检测和处理对抗性行为的过程。

![gitcoindiagram1](https://i.ibb.co/ZftZ1t1/gitcoindiagram1.png)

在短期内，到目前为止仅忽略欺诈行为并接受其代价就可以了。但是从长远来看，必须对欺诈行为进行处理，这就引起了具有挑战性的政治考量。Gitcoin 团队用于检测对抗性行为的算法是专有且闭源的，该算法必须是闭源的，否则攻击者能够适应并绕过检测。因此，二次方募资的产出不仅取决于针对输入的明确数学公式。相反，如果要移除欺诈性交易，有可能会面临一个小团体根据其主观判断对结果进行操纵的风险。

**值得强调的是，这不是 Gitcoin 的错。相反，正在发生的事情是 Gitcoin 平台发展得足够大，最终陷入了一个每个社交媒体网站在过去二十年中都会面临的问题，无论其团队的初衷有多好**。尽管 Reddit 的团队初衷美好且拥抱开源，但与其他所有社交媒体网站一样，它还是使用了[许多](https://www.reddit.com/r/redditsecurity/comments/b0a8he/detecting_and_mitigating_content_manipulation_on/)秘密[措施](https://www.reddit.com/r/ModSupport/comments/77y18b/buying_upvotes_is_there_anything_the_admins_can_do/)来检测和抑制投票操纵。

这是因为制定算法可以防止不良操作，但是除非攻击者知道这些算法，要继续作恶确实是很困难的。 **实际上，整套[机制设计](https://en.wikipedia.org/wiki/Mechanism_design)科学付出了一个半世纪的努力来尝试解决这个问题。**有时候确实能发挥作用。 但通常总是遇到同样的挑战：[共谋](https://vitalik.ca/general/2019/04/03/collusion.html) (collusion)。事实证明，如果所有参与者都独立行动，建立能够提供所需结果的机制并不难，但是一旦您承认一个人可以控制多个账户的可能性，问题很快就会变得更加困难 (甚至[难以解决](https://vitalik.ca/general/2020/09/11/coordination.html#understanding-the-game-theory))。

但是，我们无法完美解决这个问题并不意味着我们无法尝试，并且从这些尝试中受益。好的机制和不透明的中心化干预是替代选择：机制越适宜，就越能凭借机制本身达到良好的效果，越能避免结党情形的出现 (这种结果实际上非常友好，而且符合热爱去中心化的 Gitcoin 团队的期望！) 在短期内，Gitcoin 团队还会积极采取第三种方式：[邀请第三方分析和社区监督](https://medium.com/block-science/deterring-adversarial-behavior-at-scale-in-gitcoin-grants-a8a5cd7899ff)来进行欺诈监测和应对。

图片由 Gitcoin 团队出色的博文提供。

![gitcoindiagram2](https://i.ibb.co/WkgC3pT/gitcoindiagram2.png)

邀请社区监督是维护该机制[认受性](https://vitalik.ca/general/2021/03/23/legitimacy.html) (legitimacy) 极好的措施，并为 Gitcoin grant 平台铺设了去中心化的道路。但这不是 100％ 的解决方案，正如国家政府内部的技术官僚组织，尽管受到正式的民主监督和控制，实际上仍然很容易保留大量权力。**长期的解决方案是加强 Gitcoin 的被动安全性，从而降低这种主动安全性的必要性。**

被动安全性 (passive security) 的一种重要形式是强制 (而不再是可选地) 进行某种唯一身份验证。Gitcoin 已经添加了电话号码验证、BrightID 和其他几种选项，以“提升帐户的信任等级”并获得更高的匹配金额。但是 Gitcoin 可能会被迫采取需要进行某种验证才能获得匹配的措施。这将降低便利性，但是 Gitcoin 团队如果启用更多样的去中心化验证选项可以减轻影响，并在不严重依赖中心化审查的情况下实现长期安全性，从而获取更长续的认受性，这样做是值得的。

&lt;br/&gt;

## 回溯性空投

本轮的第二个重要现象与 Maskbook 有关。二月，Maskbook [宣布发布代币](https://masknetwork.medium.com/introducing-the-mask-public-twitter-offering-e227597f1021)，并在代币分发中对过往在 Gitcoin 上为 Maskbook 捐赠过的用户进行追溯性空投。

以下表格是 Maskbook 对空投资格的公告：

![maskbookdiagram](https://i.ibb.co/pdJGTPh/maskbookdiagram.png)

有争议的是，尽管 Maskbook 如今已经变得富足，并且树立了给该项目捐款可能会获得奖励的先例，但 Maskbook 仍继续参与了这一轮。后者尤其成问题，因为可以理解为某种贿选。**幸运的是，局势很快得到了缓解。事实是 Maskbook 团队在发行代币后忘记关闭 Gitcoin 上的捐款，并且同意将其关闭。他们现在甚至是资助方的一员，有助于为之后的轮次提供匹配资金！**

另一个项目尝试了一种“大家都懂”的隐晦贿选策略：在聊天室中暗示其项目参与了 Gitcoin，并且将发布代币。没有明确承诺奖励贡捐赠者，但是在某些情况下，看到这些消息的人可能会这样理解。

在这两种情况下，我们能够看到共谋是一种光谱形式，而不是二元的。即使是完全没有恶意并且认受性高的项目及其捐赠者都会轻易被卷入其中的很大一部分。

![motivations](https://i.ibb.co/6bPH6VM/motivations.png)

请注意，这是一个有些不寻常的“道德等级”。 通常，较容易接受的动机具有利他性，而较不可接受的动机具有利己性。在这个案例中，最左和最右的动机都是利己的，利他性动机离左边很近，但不是靠左的唯一动机。**更微妙的其中的关键区别：用户是因为乐于看到项目获得资金 (机制内) 而做出贡献，还是因为乐于看到自己为项目提供资金的某些 (机制外) 结果而做出贡献？**

后一种动机是有问题的，因为这颠覆了二次方募资的运作方式。二次方募资的假设是人们做出贡献是因为他们乐于看到项目获得资金的结果，认识到人们由于公地悲剧而做出的贡献远远少于他们理想中应有的数额，并利用数理进行补偿。但是如果存在额外的激励措施，并且这些激励措施是特定与个人相关联的，且并不会被公地悲剧折损，那么二次方匹配会将这些激励因素放大到严重失真。

在这两种情况下 (Maskbook 和另一个项目)，我们。另一个项目的案例很明显：有指控是他们暗示可能进行正式补偿，尽管没有明确承诺。就 Maskbook 而言，Maskbook 似乎没有做错任何事：空投具有回溯性，因此之前对 Maskbook 做出的任何贡献都没有受到该动机的“污染”。 **但其中的问题是更长期也更微妙的：如果长期有项目向 Gitcoin 捐献者进行回溯空投，那么用户的捐赠倾向可能不再主要偏向于他们认为是公共物品的项目，而偏向他们觉得之后有可能会发币的项目。**这颠覆了使用 Gitcoin 二次方募资为代币发行提供商业化替代策略的理想。

&lt;br/&gt;

## 解决方案：以密码学方式杜绝贿选 (及回溯性空投)

最简单的方法是将 Gitcoin 上最接近合谋行为的项目除名。但是在这种情况下，此方案无法起作用：问题不在于项目在捐款进行中空投，而是捐款后进行空投。尽管此类项目仍在募集捐款，并因此很容易被除名，但没有迹象表明他们计划进行空投。我们可以从上面的示例中看到，在许多灰色地带中进行监督是一项艰巨的挑战，并且通常不符合机制设计的精神。 但是，如果除名和监督不是可行的解决方案，那会是什么呢？

该解决方案是一种称为 [MACI](https://github.com/appliedZKP/maci) 的技术形式。

![maci](https://i.ibb.co/gPjq4Kv/maci.png)

MACI 是一个工具包，使得用户能够运行抗合谋的应用程序，同时保证几个关键属性：


- **正确性**：无效消息不会被处理，该机制的实际输出是处理所有有效消息并正确计算之后的结果

- **抗审查性**：如果某人参与，该机制将无法通过有选择地忽略其信息来作弊并假装没有参与

- **隐私性**：没有人知道个人是如何参与的

- **抗合谋性**：参与者无法向他人证明他们是如何参与的，即时他们希望证明

抗合谋是关键属性：它使贿选 (或回溯性空投) 成为不可能，因为用户将无法证明他们确实为某人的 grant 做出了贡献或是为某人投票以及执行了其他任何行动。这是对[秘密投票](https://en.wikipedia.org/wiki/Secret_ballot)概念的实现，该概念使目前的贿选情形不具备可行性，但使用的是密码学技术。

对其工作机制进行技术描述没有那么复杂。用户通过使用私钥对消息签名，将签名的消息使用中心服务器发布的公钥进行加密，并将加密的签名消息发布到区块链。服务器从区块链下载消息，对其进行解密、处理并将其结果和 [ZK-SNARK](https://vitalik.ca/general/2021/01/26/snarks.html) 一起输出，以确保正确地进行了计算。

![maci2](https://i.ibb.co/rcgQh5C/maci2.png)

用户无法证明其参与方式，因为他们能够发送“密钥更改”消息来误导试图审核他们的人：他们可以先发送密钥更改消息将其密钥从 A 更改为 B，然后发送用 A 签名的“伪造消息”。服务器将拒绝该消息，但是没有其他人会知道密钥更改消息已经发送过。尽管仅出于私密性和抗强制性考虑，需要对服务器有一个信任要求，但服务器无法通过错误计算或审查消息来发布错误的结果。从长远来看，可以使用[多方计算](https://blog.ethereum.org/2014/12/26/secret-sharing-daos-crypto-2-0/) (MPC) 来对服务器进行一定程度的去中心化，从而增强隐私性和抗强制性保障。

已经有正在使用 MACI 的二次方募资系统：[clr.fund](https://clr.fund/)。它行之有效，尽管目前证明的生成仍然相当昂贵，正在进行的相关工作有望尽快降低这些成本。

&lt;br/&gt;

## 实际问题

**请注意，采用 MACI 确实会带来必要的牺牲**。特别是将不再有能查看有谁做出了贡献，从而削弱了 Gitcoin 的“社交”属性。但是可以通过从选举中采取新的视角来重新设计或更改社交属性：尽管选举进行了秘密投票，但通常会发出“我已投票”的标签。这不是“安全的” (因为不投票的人可以轻易获取)，但是仍然发挥着社交作用。个人可以走得更远，同时仍保留秘密投票权：**我们可以进行二次方募资设置，其中 MACI 输出每个参与者贡献了多少的价值，而不是他们贡献给谁的价值**。这将使特定项目无法对参与者的贡献进行支付，但是仍然会给用户留下空间来表达他们做出贡献的自豪感。项目可以空投给所有 Gitcoin 贡献者，而不会按项目进行区分，并在宣布空投时附带他们的 Gitcoin 链接。用户仍然可以为其他人做出贡献并领取空投，这种做法在公平竞争的范围之内。

然而，这仍然是一个长期的问题。MACI 可能还没有准备好在第十轮中集成。在接下来的几轮中，重点加强唯一身份验证仍然是最优先的考虑。尽管希望可以同时减少中心化并使社区参与进来，但仍需要一定程度地依赖中心化调节。Gitcoin 团队一直在朝这个方向前进，并且取得了一定成果。如果 Gitcoin 团队率先成功地迎接并克服了这些挑战，那么我们最终将获得一个安全且可扩展的二次方募资系统，并且准备好被更广泛的主流应用采纳！

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[NFT制作与OpenSea部署教程]]></title><description><![CDATA[自定义式 NFT 的手把手教程]]></description><link>https://www.ethereum.cn/Ecosystem/how-to-make-an-nft-and-render-on-opensea-marketplace/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/how-to-make-an-nft-and-render-on-opensea-marketplace/</guid><pubDate>Thu, 08 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [freecodecamp.org](https://www.freecodecamp.org/news/how-to-make-an-nft-and-render-on-opensea-marketplace/)

![how](https://i.ibb.co/RYjXYMg/Advanced-NFT-Deployment-1.png)


在这篇文章里，笔者将展示如何在没有软件公共技术背景下制作 NFT。然后，我们将学习如何用 [Brownie](https://eth-brownie.readthedocs.io/en/stable/)、 [Python](https://www.python.org/)、和 [Chainlink](https://docs.chain.link/docs) 制作无限制可自定义的 NFT。以及我们也会看到如何在 [OpenSea](https://opensea.io/) 的 NFT 市场上部署和销售我们的创作。

如果你在找使用 Truffle、JavaScript 和有趣的中世纪人物的教程，可以看看如何《[构造、部署、和出售你的NFT](https://blog.chain.link/build-deploy-and-sell-your-own-dynamic-nft/)》 。

&lt;br/&gt;

# 什么是 NFT？

[NFTs](https://eips.ethereum.org/EIPS/eip-721) (Non-Fungible Tokens，不可置换代币) 可以用一个词来总结：唯一性。这些是部署在区块链上的智能合约，代表着某种东西的唯一性。 

## ERC20 vs ERC721

NFT 是一种区块链代币标准，与 [ERC20](https://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/) 相似，像 AAVE、SNX、和LINK (准确来说是 ERC677)。ERC20 是“可置换”代币，这意味着那些代币是可被替换的 (replaceable) 和可互相兑换 (interchangeable)。

例如，无论你使用的是哪种美元钞票，你的美元钞票都将价值 1 美元。美元钞票上的序列号可能不一样，但钞票间是可以互相兑换的，而且它们仍然价值1美元。

另一方面，NFT 是“不可置换的”，它们遵守的是它们自己的代币标准 [ERC721](https://eips.ethereum.org/EIPS/eip-721)。例如，蒙罗丽莎是“不可置换的”。即使有人可以制作一个副本，永远也只会有一幅蒙罗丽莎。如果蒙罗丽莎是在区块链上创造的，那么它就是个 NFT。

![monalisa](https://i.ibb.co/QPCY1yv/2.png)

原始图像来自 [Wikipedia](https://en.wikipedia.org/wiki/Mona_Lisa)

&lt;br/&gt;

# NFT 是做什么的？

NFT 给创作者、艺术家、游戏设计师和其他职业者提供价值，保存在链上的部署还能永久保存。

你总能知道是谁创作了 NFT、谁拥有了 NFT、NFT 的来源，等等，它们给这些创作者带来的价值比传统艺术更大。在传统艺术里，分辨赝品会有点难，但链上历史是很容追踪到的。

由于智能合约和 NFT 是100%可编程的，NFT 还可以添加内置的版税和其他功能。给艺术家补助一直是一个问题，因为情况经常是艺术家的作品广泛传播而人们不知道作品是谁的。

越来越多的艺术家和工程师正在跃跃欲试，参与到这个有巨大价值的领域，因为这最终是让艺术家获得作品报酬的好途径。不止于此，NFT 是展示你的创造力以及在数字世界成为收藏者的有趣方式。

## NFT 的价值

NFT 已经走了很长一段路了，并且我们不断看到有拍卖价格破纪录的 NFT，比如“Everyday:The First 5,000 Days” 以 6930 万美元售出。

![everyday](https://i.ibb.co/cxrtNVt/everyday.png) 

图像来自 [Twitter](https://twitter.com/ChristiesInc/status/1361670588608176128)


因此，这里蕴含着很多价值，它也是在数字世界创作艺术和学习创建智能合约的有趣、动态、和很有魅力的方式。那么，现在我将教你如何制作 NFT 。

&lt;br/&gt;

# 如何制作 NFT ?

## 文章不会涉及的内容

现在，制作 NFT 最简单的方法是到像 [Opensea](https://opensea.io/)、 [Rarible](https://rarible.com/) 或 [Mintible](https://mintable.app/) 这些平台，跟着它们的逐步指引在它们平台部署。

你可以完全采用这个方法，但你可能会被绑定在平台上，受限于平台提供的功能。你不能实现无限制的自定义制作，或真正使用 NFT 的优势。但如果你是一个初级软件工程师，或没有非常丰富的技术知识，这是适合你的方法。

如果你想成为一名很强的软件工程师，学习一些 solidity 的知识，且有能力可以用无限的创造力创造一些东西，请继续往下看吧！

如果你刚接触 solidity，不用担心，我们会从基础讲起。

&lt;br/&gt;

# 如何用无限制的定制制作一个 NFT

我将用这个  [NFT Brownie Mix](https://github.com/PatrickAlphaC/nft-mix) 让你快速入门。这是一个工作代码库，有非常多样板代码。

## 准备要求

我们需要安装下列内容才能开始：

- [Python](https://www.python.org/downloads/)
- [Nodejs](https://nodejs.org/en/download/) 和 npm and npm
- [Metamask](https://metamask.io/)

如果你不熟悉 Metamask，你可以[按着这个教程](https://docs.chain.link/docs/install-metamask)设置。

## Rinkeby测试网上的ETH和LINK

我们还需要在 Rinkeby 以太坊测试网上工作，因此我们能免费把我们的合约部署到一个真正的区块链网络上。

测试网是用来测试我们的智能合约在现实世界运行得如何的好方法。我们需要有 Rinkeby 网络的 ETH和 LINK 测试币，我们可以在 [Chainlink 文档](https://docs.chain.link/docs/link-token-contracts#rinkeby)中最新的水龙头链接里免费获得。

我们还需要添加 Rinkeby 的LINK测试币到我们的 metamask 里，我们可以跟着这个[获取 LINK 文档](https://docs.chain.link/docs/acquire-link)的步骤。

如果你还是很疑惑，你可以跟着[这个视频](https://www.youtube.com/watch?v=4ZgFijd02Jo)去做，只是要注意是用的 Rinkeby 而不是 Ropsten。

当在像 Ethereum 这样的智能合约平台上工作时，我们需要支付少量的 ETH，在需要从链下获取数据时，我们需要支付少量的 LINK。这就是为什么我们需要测试网的 LINK 和 ETH 测试币。

正式开始吧！这是我们[准备部署到 OpenSea 的 NFT](https://testnets.opensea.io/assets/0x8acb7ca932892eb83e4411b59309d44dddbc4cdf/0)。

![opensea](https://i.ibb.co/RS2k2V0/4.png)

## 快速开始

```Powershell
bash
git clone https://github.com/PatrickAlphaC/nft-mix
cd nft-mix
```



现在我们需要安装 `ganache-cli` 和 `eth-brownie`。

``` Powershell
pip install eth-brownie
npm install -g ganache-cli
```



现在我们可以[设置环境变量](https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html)。如果你对环境变量不熟悉，你可以只把它们添加到你的 `.env`文档，然后运行：

``` Powershell
source .env
```


你刚刚克隆的代码库里应该有一个 `.env` (环境）样本，它是加了环境变量注释的。取消注释就可以使用它们了！

你将需要一个 `WEB3_INFURA_PROJECT_ID` (Web3 Infura 项目 ID) 和一个 `PRIVATE_KEY` (私钥）。注册一个免费  [Infura](https://infura.io/) 账号就会有这个 `WEB3_INFURA_PROJECT_ID`。它会使我们可以发送交易到区块链上。

你还需要一个密钥，你可以在你的 Metamask 里获得。点一下那三个小点，然后点击`Account Details` （账户详情）和  `Export Private Key` (导出私钥)。如果你准备把真钱放进去的话，不要把私钥告诉别人。

``` Powershell
export PRIVATE_KEY=YOUR_KEY_HERE
export WEB3_INFURA_PROJECT_ID=YOUR_PROJECT_ID_HERE
```

&lt;center&gt;.env&lt;/center&gt;


现在我们可以用以下两个命令部署我们的 NFT 合约和创建我们第一件收藏品了。

``` Powershell
brownie run scripts/simple_collectible/deploy_simple.py --network rinkeby
brownie run scripts/simple_collectible/create_collectible.py --network rinkeby
```

第一行命令用来把我们的 NFT 合约部署到 Rinkeby 区块链，第二行命令用来创建我们第一件收藏品。

你刚已经部署了我们第一份智能合约了！

它不做什么事，但不用担心。我将在这份教程的高级部分展示你可以如何把它部署到 OpenSea 上。但首先，让我们看看 ERC721 代币标准吧。

# ERC721 代币标准


让我们在 `SimpleCollectible.sol` 文档里看看刚部署的合约吧。

```javascript
// SPDX-License-Identifier: MIT
pragma solidity 0.6.6;

import &quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&quot;;

contract SimpleCollectible is ERC721 {
    uint256 public tokenCounter;
    constructor () public ERC721 (&quot;Dogie&quot;, &quot;DOG&quot;){
        tokenCounter = 0;
    }

    function createCollectible(string memory tokenURI) public returns (uint256) {
        uint256 newItemId = tokenCounter;
        _safeMint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
        tokenCounter = tokenCounter + 1;
        return newItemId;
    }

}
```


我们采用的是 [OpenZepplin](https://github.com/OpenZeppelin/openzeppelin-contracts) 的 ERC721 代币标准。我们导入的这个包 (package) 允许我们使用一个典型 ERC721 代币的全部功能。这定义了我们的代币将具有的所有功能，例如 `transfer` 意味着把我们的代币转移给新用户，`safeMint`表示创建新的代币，等等。


在 OpenZepplin 的ERC721 代币合约里，你可以找到赋予我们合约的所有功能。我们的合约是通过这个命令行承继这些功能的：

``` Powershell
contract SimpleCollectible is ERC721 {
```


solidity 的承继就是这样工作的。当我们部署合约时，`constructor`会被自动调用，它还需要一些参数。

``` Powershell
constructor () public ERC721 (&quot;Dogie&quot;, &quot;DOG&quot;){
        tokenCounter = 0;
    }
```


我们的构造函数也使用了 `ERC721` 的构造函数，我们只需要给它取一个名字和一个符号。在我们的例子中，是&quot;Dogie&quot;和&quot;DOG&quot;。这意味着每个我们创造的 NFT 都是 Dogie/DOG 类。


这就像每张 Pokemon 卡片都是一个 pokermon，或每个在集换式卡片上的棒球手都是一名棒球手。每个棒球手是独一无二的，但他们全部是棒球手。我们只是在用 `DOG`类。


在顶部我们有 `tokenCounter`，用来计数我们创建了多少这个类型的 NFT。每个新代币都会获得一个基于当前  `tokenCounter` 的`tokenId`。

实际上，我们可以用 `createCollectible` 函数创建一个 NFT。这就是在我们的 `create_collectible.py` 脚本里调取的函数。

``` Powershell
function createCollectible(string memory tokenURI) public returns (uint256) {
        uint256 newItemId = tokenCounter;
        _safeMint(msg.sender, newItemId);
        _setTokenURI(newItemId, tokenURI);
        tokenCounter = tokenCounter + 1;
        return newItemId;
    }
```


`_safeMint`函数创建新的 NFT，并把它分给任何调用了 `createdCollectible`的账户，即 `msg.sender`，且会有一个从 `tokenCounter`派生的  `newItemId`。这就是我们追踪谁拥有什么的方法——查看所有者的  `tokenId`。

你会发现我们还调用 `_setTokenURI`。

&lt;br/&gt;

# 什么是 NFT 元数据和 TokenURI


当智能合约被创建了，NFT 就被创建了，人们很快会发现把大量数据部署到区块链真的超级超级贵。试想一下，[储存1 KB 的数据可能就需要100万美元](https://ethereum.stackexchange.com/a/896/57451)。

对于 NFT 来说，这显然是一个问题，因为拥有创意艺术意味着你必须把这个信息储存在某处。他们还想要一种轻量方法储存 NFT 的属性信息——这就是需要 tokenURI 和元数据的地方。

## TokenURI

一个 NFT 上的 `tokenURI` 是能展示这个代币的唯一标识符。一个 URI 可以是HTTPS上的 API 调用、一个 IPFS 的哈希、或[任何其他](https://danielmiessler.com/study/difference-between-uri-url/)代表唯一的东西。

它们遵循一套显示元数据的标准，如下：

```json
{
    &quot;name&quot;: &quot;name&quot;,
    &quot;description&quot;: &quot;description&quot;,
    &quot;image&quot;: &quot;https://ipfs.io/ipfs/QmTgqnhFBMkfT9s8PHKcdXBn1f5bG3Q5hmBaR4U6hoTvb1?filename=Chainlink_Elf.png&quot;,
    &quot;attributes&quot;: [
        {
            &quot;trait_type&quot;: &quot;trait&quot;,
            &quot;value&quot;: 100
        }
    ]
}
```


这些数据展现了一个 NFT 是什么样的以及它的属性。 `image`部分指向另一个展示该 NFT 的 URI。这使得 NFT 可以更容易在像 Opensea、Rarible和 Mintable 这些 NFT 平台上部署，因为它们都需要这种元数据。

## 链下元数据 vs 链上元数据

现在你可能会想“等等，如果元数据不在链上，这是否意味着我的 NFT 可能会在某个时候消失了”？ 你的想法是对的。

如果你认为链下元数据意味着你无法用那元数据让你的智能合约互相交互，你的想法也是对的。

这也是为什么我们专注在链上元数据上，这样我们才可以对我们的 NFT 进行编程，使它们互相交互。

尽管如此，我们仍然需要 `image`部分的链下元数据，因为我们还没有在链上储存大图像的好方法。但不要担心，通过使用 [IPFS](https://ipfs.io/)，我们还是可以免费在一个去中心化网络实现这一点。

这里是 IPFS 的一个 imageURI 示例，这个图像是按照《龙与地下城》教程创建的 [Chainlink Elf](https://opensea.io/assets/0x8d78277bc2c63f07efc2c0c8a8512de4ad459a05/1)。

![chainlink elf](https://i.ibb.co/6R4QFmy/5.png)

&lt;center&gt;The Chainlink Elf&lt;/center&gt;


我们没有给简单的 NFT 设一个 tokenURI 是因为我们只想展示一个基本示例。

现在进入高级 NFT 部分，我们可以看到用链上元数据实现的一些很棒的功能，把 NFT 部署到 Opensea 上，把我们的 Dogie 放上去！

如果你想看我们刚讲过部分的重温视频，可以点击[这里](https://www.youtube.com/watch?v=ZH_7nEIJDUY)。

&lt;br/&gt;

# 动态和高级的 NFT

动态 NFT 是那种随时间变化的，或具有我们可以用来互相交互的链上功能的 NFT。这些 NFT 给了我们无限制的自定义空间去制作整个游戏、构建世界、以及某种交互艺术。现在让我们进入高级部分吧。

## 高级部分快速开始

确认你的 metamask 里有足够的 ETH 和 LINK 测试币，然后运行下面的命令行：

``` Powershell
brownie run scripts/advanced_collectible/deploy_advanced.py --network rinkeby
brownie run scripts/advanced_collectible/create_collectible.py --network rinkeby
```


我们这里的收藏品是从 [Chainlink VRF](https://docs.chain.link/docs/chainlink-vrf) (Virtual Routing and Forwarding，虚拟路由和转发) 返回的一个随机犬种。Chainlink VRF 能提供可验证随机数，也就我们 NFT 真正稀缺性来源。然后，我们就要创建它的元数据了。

``` Powershell
brownie run scripts/advanced_collectible/create_metadata.py --network rinkeby
```

然后，我们可以选择性地上载这个数据到 IPFS，这样我们就会获得一个 tokenURI。我在后面会展示给你看要怎么做。现在，我只需要用下面这个样本 tokenURI。

``` Powershell
https://ipfs.io/ipfs/Qmd9MCGtdVz2miNumBHDbvj8bigSgTwnr4SbyH6DNnpWdt?filename=1-PUG.json
```

如果你下载 [IPFS Companion ](https://chrome.google.com/webstore/detail/ipfs-companion/nibjojkomfdiaoajekhjakgkdhaomnch?hl=en) 扩展程序到你的浏览器，你可以使用该 URL 来查看这个 URI 返回的是什么。它应该是下面展示的这样：

```json
{
    &quot;name&quot;: &quot;PUG&quot;,
    &quot;description&quot;: &quot;An adorable PUG pup!&quot;,
    &quot;image&quot;: &quot;https://ipfs.io/ipfs/QmSsYRx3LpDAb1GZQm7zZ1AuHZjfbPkD6J7s9r41xu1mf8?filename=pug.png&quot;,
    &quot;attributes&quot;: [
        {
            &quot;trait_type&quot;: &quot;cuteness&quot;,
            &quot;value&quot;: 100
        }
    ]
}
```

然后运行我们的 `set_tokenuri.py` 脚本：

``` Powershell
brownie run scripts/advanced_collectible/set_tokenuri.py --network rinkeby
```

我们得到的输出如下：

``` Powershell
Running &apos;scripts/advanced_collectible/set_tokenuri.py::main&apos;...
Working on rinkeby
Transaction sent: 0x8a83a446c306d6255952880c0ca35fa420248a84ba7484c3798d8bbad421f88e
  Gas price: 1.0 gwei   Gas limit: 44601   Nonce: 354
  AdvancedCollectible.setTokenURI confirmed - Block: 8331653   Gas used: 40547 (90.91%)

Awesome! You can view your NFT at https://testnets.opensea.io/assets/0x679c5f9adC630663a6e63Fa27153B215fe021b34/0
Please give up to 20 minutes, and hit the &quot;refresh metadata&quot; button
```


我们可以点击里面的链接看看它在 Opensea 上怎么样的。你可能需要点 `refresh metadata` ，等上几分钟。

![refresh](https://i.ibb.co/ZxwhWYt/6.png)

&lt;center&gt;Refresh Metadata&lt;/center&gt;

&lt;br/&gt;

# 随机犬种

现在说一下我们刚做了什么。这是我们的 `AdvancedCollectible.sol`：

``` Powershell
pragma solidity 0.6.6;

import &quot;@openzeppelin/contracts/token/ERC721/ERC721.sol&quot;;
import &quot;@chainlink/contracts/src/v0.6/VRFConsumerBase.sol&quot;;

contract AdvancedCollectible is ERC721, VRFConsumerBase {
    uint256 public tokenCounter;
    enum Breed{PUG, SHIBA_INU, BRENARD}
    // add other things
    mapping(bytes32 =&gt; address) public requestIdToSender;
    mapping(bytes32 =&gt; string) public requestIdToTokenURI;
    mapping(uint256 =&gt; Breed) public tokenIdToBreed;
    mapping(bytes32 =&gt; uint256) public requestIdToTokenId;
    event requestedCollectible(bytes32 indexed requestId); 


    bytes32 internal keyHash;
    uint256 internal fee;
    uint256 public randomResult;
    constructor(address _VRFCoordinator, address _LinkToken, bytes32 _keyhash)
    public 
    VRFConsumerBase(_VRFCoordinator, _LinkToken)
    ERC721(&quot;Dogie&quot;, &quot;DOG&quot;)
    {
        tokenCounter = 0;
        keyHash = _keyhash;
        fee = 0.1 * 10 ** 18;
    }

    function createCollectible(string memory tokenURI, uint256 userProvidedSeed) 
        public returns (bytes32){
            bytes32 requestId = requestRandomness(keyHash, fee, userProvidedSeed);
            requestIdToSender[requestId] = msg.sender;
            requestIdToTokenURI[requestId] = tokenURI;
            emit requestedCollectible(requestId);
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomNumber) internal override {
        address dogOwner = requestIdToSender[requestId];
        string memory tokenURI = requestIdToTokenURI[requestId];
        uint256 newItemId = tokenCounter;
        _safeMint(dogOwner, newItemId);
        _setTokenURI(newItemId, tokenURI);
        Breed breed = Breed(randomNumber % 3); 
        tokenIdToBreed[newItemId] = breed;
        requestIdToTokenId[requestId] = newItemId;
        tokenCounter = tokenCounter + 1;
    }

    function setTokenURI(uint256 tokenId, string memory _tokenURI) public {
        require(
            _isApprovedOrOwner(_msgSender(), tokenId),
            &quot;ERC721: transfer caller is not owner nor approved&quot;
        );
        _setTokenURI(tokenId, _tokenURI);
    }
}
```


我们使用 Chainlink VRF 从 `PUG, SHIBA_INU, BRENARD`列表里创建一个随机犬种。此时当我们调用 `createCollectible` 时，我们实际上在链下向 Chainlink VRF 节点发出了一个请求，然后返回一个随机数，以三个犬种里的一种来创建这个 NFT。


在你的 NFT 里使用一个真正的随机数是创造真正稀缺性的好方法，使用 Chainlink 预言机的随机数意味着你的数字具有可验证的随机性，无法被矿工修改。

你可以在 [Chainlink VRF 文档](https://docs.chain.link/docs/chainlink-vrf)里了解更多。

Chainlink 节点通过调用 `fulfillRandomness`函数来响应，并基于随机数创建收藏品。然后，我们还是必须调用 `_setTokenURI` 来给 NFT 提供所需的外观。

我们此时不设置我们 NFT 的属性，但属性对提升我们 NFT 的竞争力和交互性非常有用。你可以在[龙与地下城的例子](https://github.com/PatrickAlphaC/dungeons-and-dragons-nft)中看到设置了属性的 NFT 是怎样的。

## 来自 IPFS 的元数据

我们正在使用 IPFS 来存储两个文档：

1. NFT 的图像 (八哥的形象)
2. tokenURI文档 (还包含了图像链接的 JSON 文档)


我们使用 IPFS 因为它是免费的去中心化平台。通过下载 [IPFS 桌面版](https://docs.ipfs.io/install/ipfs-desktop/)，点击`import` 按钮，我们可以把 tokenURI 和图像添加到 IPFS。

![ipfs](https://i.ibb.co/N6pwPNq/7.png)

&lt;center&gt;添加文档到 IPFS&lt;/center&gt;


然后，点击文档傍边的三个点，点 `share link`，然后复制提供的链接， 我们就可以分享 URI 了。然后，我们可以把这个链接添加到我们的 `set_tokenuri.py` 文档，把代 tokenURI 改为我们想要使用的。

## 坚持去中心化

但是，如果 tokenURI 只在我们自己的节点上，这意味着如果我们的节点离线了，其他人就看不到它了。因此，我们希望别人可以 `pin` （挂）我们的 NFT。我们可以使用像 [Pinata](https://pinata.cloud/) 这样的服务商，即使我们的 IPFS 节点处于离线状态，他们也可以帮助我们保持数据在线上。

我想，以后会有越来越多的元数据储存在 IPFS 和去中心化储存平台。中心化服务器会式微，也就是说在上面的艺术品会永远消失。因此，请务必检查你的NFT使用的 tokenURI 的位置！

我预计以后会有越来越多人使用像  [Filecoin](https://docs.filecoin.io/) 这样的去中心化储存平台，因为使用 pinning 服务并不非常去中心化。

&lt;br/&gt;

# 继续前进

如果你想看一个高级 NFT 讲解视频，你可以看[这个](https://www.youtube.com/watch?v=tCR7b9p9GiM)。

现在你已经有了制作好看、有趣、可自定义、具有交互性的 NFT，并把它部署到交易平台的技能了。

NFT 是能给艺术家的辛勤创作提供精确回报的一种有趣、强大的方式。祝你好运，享受这个过程吧！</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/4/6]]></title><description><![CDATA[合并首个实现者会议；1559首个测试网Aleut]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-6/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-4-6/</guid><pubDate>Tue, 06 Apr 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/jMpY0G6/cover.png)

&lt;br/&gt;

# Eth2

**合并的首个实现者会议**

4.1 进行了第一次合并的实现者会议，会议对文档&quot;Ethereum consensus upgrade [application-layer perspective]&quot;进行仔细讨论。

文档：https://hackmd.io/@n0ble/ethereum_consensus_upgrade_mainnet_perspective

视频：https://www.youtube.com/watch?v=b3hfgLa_GHw

&lt;br/&gt;

**Prysm 的 Eth1 与 Eth2 合并演示**

3.31 客户端 Prysm 继 Lighthouse 后实现信标链与 PoW 链互操作的成功演示。

教程：https://hackmd.io/@prysmaticlabs/prysm-catalyst-interop

&lt;br/&gt;

**走在以太坊最前沿的 Rayonism**

Rayonism 是 ETH Global Scaling 黑客松的一个扩容项目，关于对 Eth1-Eth2 合并和分片的研究与工程，以及围绕此次黑客松构建测试网。它还有一个延展目的是构建有分片的Optimism。

时间：4 月 16 日—5 月 14 日

注意：Rayonism 不在获得黑客松奖品的范围里

详情与入口：https://rayonism.io/

&lt;br/&gt;

# Eth1

**EIP-1559 首个测试网为 Aleut**

EIP-1559 的 Geth 实现现由ConsenSys Quilt 团队的 @lightclients 负责，他已在 Github 开了一个“EIP-1559 implementation#22617&quot; 的草稿 PR，下图为目前确定的内容。

![Aleut](https://i.ibb.co/wSkQ0xB/eip-1559-implementaion.png)

在 4.2 的 AllCoreDev 中有人提出了关于交易收据内容的疑问，此问题解决后将部署第一次客户端集成测试网，以开始测试伦敦升级的相关 EIP。关于此次测试网的名字，@lightclients 提议命名为 Aleut，一个地质断层线的名字。此次客户端集成测试网规范已出，仅作基础设施测试，目前包括的内容为：EIP-1559 和 EIP-3198 (关于添加操作码 `BASEFEE`)。进度如下：

![1559](https://i.ibb.co/hHCp54R/Aleut.png)

会议最后决定 Aluet 为开发者测试网。

来源：https://twitter.com/TimBeiko/status/1377980135484260352?s=20

&lt;br/&gt;

**Vitalik 对 1559 提出的改良方向**

Vitalik 在ethresear.ch 上发表了&quot;Make EIP 1559 more like an AMM curve (使 EIP-1559 更接近 AMM 曲线)&quot;。

详情：https://ethresear.ch/t/make-eip-1559-more-like-an-amm-curve/9082

&lt;br/&gt;

**EIP-3074 争议**

4.2 的 AllCoreDev 讨论了是否应该把 EIP-3074 纳入伦敦升级，有几个核心开发者表达了反对意见，原因一方面是这份 EIP 从根本上改变了以太坊的签名机制，需要更多时间对其进行全面了解，还有开发者表示会引入严重安全问题，联想到 4.1 愚人节有人开玩笑发了一个使用 ”SUDO 操作码“解决一切 UX 问题的 PR；另一方面是客户端开发团队目前的工作已相当繁重，EIP-3074 带来的变更也不是简单修改。Vitalik 则表示随着人们开始使用多签或社交恢复式钱包，多项操作交易会变得越来越普遍，因此我们将向 3074式的信任保证方向发展。会议最后决定在经过安全审计后再对 EIP 进行继续讨论。

关于 EIP-3074 的进一步讨论，可在此跟进：https://ethereum-magicians.org/t/eip-3074-auth-and-authcall-opcodes/4880

&lt;br/&gt;

# Layer2

**StarkWare 提出 L2 AMM 设计 Caspian**

因 DeFi 使用不同的 Layer2 解决方案，这带来的资本效率低下是大家都比较担心的问题，因为可能会造成流动性在 L1 和 L2 不同解决方案之间产生分裂。StarkWare 提出一个新的 L2 AMM 设计 Caspian：将资产留在 L1 上，避免分裂流动性，提高资本效率。

StarkEx 3.0 (预估在 2021 年 6 月上线) 将会支持 Caspian。而实现 Caspian 将需要引进两种新的基元：L1 限价单以及批量闪电贷 (Batch-Long Flash Loans)。

来源：https://medium.com/starkware/caspian-an-l2-powered-amm-f20e93b5421

&lt;br/&gt;

**Opensea 即将引入 Immutable X**

NFT 市场 Opensea 宣布将集成以太坊首个 NFT 的 Layer2 扩容解决方案 Immutable X。

![immutable](https://i.ibb.co/0DhnVB1/immutable.jpg)

来源：https://twitter.com/opensea/status/1377352145666641923

&lt;br/&gt;

**Polygon 为 Decentraland 和 Aave 提供扩容解决方案**

区块链游戏平台 Decentraland 将集成侧链扩容解决方案 Polygon。目前，Decentraland dApps 套件提供一个账户入口，用户可以通过这个入口在以太坊主网和 Polygon 的 Matic 网络中转移 MANA。等到在所有 Decentraland dApps 中集成 Polygon 之后，用户将能够完全在 Polygon 上申领、购买、出售以及交易可穿戴式 NFT。

来源：https://decentraland.org/blog/announcements/polygon-mana/

&lt;br/&gt;

去中心化借贷协议 Aave 也将集成 Polygon，集成的版本发布之后，将会有这些资产上线 Polygon 的 Aave 市场：MATIC、USDC、USDT、DAI、WETH、AAVE、WBTC。

来源：https://medium.com/aave/exploring-new-frontiers-with-aave-59563ddd2405

&lt;br/&gt;

# DeFi

**算法稳定币项目 Fei Protocol 完成创世启动**

DeFi 算法稳定币项目 Fei Protocol 于 3 月 31 日正式开始为期 3 天的创世启动，结束时共筹集到 63.9 万枚 ETH，铸造了 13 亿枚 FEI 代币。共有 1.7 万个唯一地址参与本次创世启动。Fei Protocol 将对这些地址空投相应数量的 FEI 和 TRIBE 代币。

来源：https://twitter.com/feiprotocol/status/1378425528051466247

&lt;br/&gt;

**算法稳定币项目 Reflexer 宣布代币分配计划**

Reflexer Labs 宣布首次 FLX 分配计划于 4 月 15 日进行。另外，从 4 月 7 日开始，Reflexer Labs 将对 Cream Finance 上的 RAI 代币借款者进行奖励活动。Reflexer Labs 表示，将在分发之前对 Reflexer 上线以来铸造、提供 RAI 流动性的地址以及 3 月 31 日以来在 Cream 上借出 RAI 的地址进行快照，用户可在 4 月 15 日访问 app.reflexer.finance 领取奖励。

来源：https://twitter.com/reflexerfinance/status/1378523473421737992

&lt;br/&gt;

# 生态

**imToken 完成 B 轮融资**

加密钱包 imToken 完成 B 轮融资，由启明创投领投，融资 3000 万美元。本轮参与者还有 A 轮融资的 投资者 IDG Capital 以及其他新的投资者如 Breyer Capital。融资将会用来推进开发下一个迭代版本 imToken 3.0。

来源：https://medium.com/imtoken/imtoken-announces-us-30-million-series-b-investment-e7091f13258d

&lt;br/&gt;

**Coinbase 预计将于 4 月 14 日上市**

中心化交易所 Coinbase 宣布其 S-1 (向美国证券交易委员会 SEC 提交的文件) 注册声明已生效。Coinbase 表示，预估其 A 类普通股票将于 2021 年 4 月 14 日 在纳斯达克全球精选市场 (Nasdaq Global Select Market) 开始交易，股票代码为 “COIN&quot;。

来源：https://blog.coinbase.com/coinbase-announces-effectiveness-of-registration-statement-and-anticipated-listing-date-of-its-1509b281f760

&lt;br/&gt;

**NFT 或在奢侈品品牌掀起热潮**

Gucci 最近对 *Vogue Business* 确认他们发行 NFT 只是时间问题，而且有多个奢侈品时尚品牌已表示即将发行它们的 NFT。与时尚品牌合作的区块链平台 Lukso 的创始人表示，奢侈品品牌在电子商务潮流上是落后的，现在非常愿意于像区块链这样的新型技术做实验性的尝试。

来源：https://www.voguebusiness.com/technology/luxury-fashion-brands-poised-to-join-the-nft-party

&lt;br/&gt;

**200 ETH 成交 OAG**

广受欢迎的 meme &quot;Overly Attached Girl&quot; 近日在 Foundation 上拍卖，最终以 200 个 ETH 成交。

![OAG](https://i.ibb.co/VCS4xSq/OAG.png)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[走进 EIP-3074]]></title><description><![CDATA[EIP-3074解决如何在去信任的前提下提供更顺滑的用户体验]]></description><link>https://www.ethereum.cn/Technology/eip-3074</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/eip-3074</guid><pubDate>Fri, 02 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [@lightclients](https://twitter.com/lightclients)

&lt;br/&gt;


以太坊钱包可能很快进行一次重大升级。部署了提案的变更后，外部账户 (EOA) 将马上可以发送批量交易、逾期交易、无序交易等。

我的同事 [@_SamWilsn _](https://twitter.com/_SamWilsn_)和 [@adietrichs](https://twitter.com/adietrichs) 和我一直致力于改善与以太坊交互的用户体验。经过了多次迭代，我们提出了 &quot;EIP-3074: AUTH and AUTHCALL opcodes&quot;。

这些操作码是这样使用的：外部账户对一条链下信息签名，给一个中继器提供消息，这个中继器把签名和调用数据传给一个链上合约 (被称为 invoker，调用器)，合约用操作码 `AUTH` 验证签名，随后用操作码`AUTHCALL`发送外部账户的调用。

操作码 `AUTHCALL` 的功能基本与 `CALL` 相同，除了它把`CALLER`(即`msg.sender`信息发送者) 设为外部账户的地址，需要通过`AUTH`来恢复。这使得用户可以无须 ETH 也能与以太坊交互。也就是说，他们的交易可以由一个中继器来“资助”。

这个方案听上去可能很熟悉。实际上，它与 meta-txs (元交易) 的工作机制几乎相同。一个重要区别是 meta-txs 无法随意设置`msg.sender`。因此，合约必须明确支持 meta-txs。EIP-3074 旨在去除 meta-txs，减少合约复杂性。

为了更深入它的工作机制，一起来了解我们正在构建什么吧。我们想要一个机制允许没有 ETH 的外部账户可以无须信任地发送交易。“无须信任”是关键。用户不应该给中继器任何可以被利用的特权。

EIP-3074 允许通过谨慎选择加入到外部账户签名的参数来构建去信任系统。用户需要对 keccak (0x03 ++ invoker_address ++ commit_hash) 哈希函数签名。

![msg](https://i.ibb.co/QrQF2wp/msg-format.jpg)

“type byte (类型字节)&quot; 是 EIP-2718 里值为 0x03 的恒定字节。这是用来防止与其他签名规则冲突的，比如 EIP-2930 的访问列表交易、EIP-1559 的费用市场交易、EIP-191的 0x19 签名消息等。

调用器地址把用户的调用与一个特定合约进行捆绑。签名只对该合约有效，即调用者。这使得用户可以选择一个他们信任的调用器——就像选择一个智能合约钱包托管资产一样。

我们预想调用器的数量不会多，因为如果他们实现出错的话 (注意调用器的使用是选择性的)，用户的利益会受损。开发一个安全的调用器花费会很高。它需要接受多方的审计，并在静态证明上是可靠的。

这与现状其实没有太大区别。智能合约钱包在被用来托管大额资产前应该通过了全面的审计与证明。很多大型 DeFi 项目也是这样做的。

要签名的最后一个参数是 commit_hash （委托哈希）。这就是给调用器设计师很大灵活性，以及允许非常多不同签名规则得以开发的地方。

委托参数限定调用者只能执行某些操作，并为处理一次调用建立了一定的有效性要求。用户可以信任调用器会遵循这个程序，因为代码可以在链上得到验证。这是区块链很好的一个特性。

现在来看一个简单的案例。假设一个用户想通过调用器发送一个调用。为了避免调用被传送，他们提供一个随机数。他们还提供其他不可篡改的数值。用户对这些数值进行哈希以获得委托，并在用于`AUTH`的签名信息里使用该委托。

![commit](https://i.ibb.co/MRxvWmL/commit.jpg)


调用器会用收到的值重新生成委托哈希值。这样，如果资助方修改了一个值，调用器会计算出一个不同于外部账户签名的委托哈希值，导致 `AUTH` 恢复一个垃圾地址。会出现下图的情况：

![error](https://i.ibb.co/s55x9sd/error.jpg)


希望现在你相信调用器能像一个智能合约钱包那样运作，任何外部账户都可以使用。现在看一下如何用委托哈希构建更多有趣的方案。

总的来说，最重要的是”一个操作一个签名“。这是看待事情的一个简单方法。一个签名由一笔交易的哈希创造，为什么不对多笔交易进行哈希呢？其实 EIP-3074 是可以实现的。


当一个账户已经用 `AUTH` 验证了，调用器就可以进行该账户想要的、尽可能多次的 `AUTHCALL`。因为我们信任该调用器会没有偏差地执行它的代码，这很好。我们还可以设计出委托哈希是多个调用的哈希值的方案。

![nonce](https://i.ibb.co/qmvnCY2/nonce.jpg)

在上文的方案里，调用者会用到全部的数值 (随机数1、随机数2等)，并把它们合起来进行哈希，生成一个委托哈希值。它用委托哈希值和用户签名来调用`AUTH`。`AUTH` 会验证用户是否都对那些参数签名了。

然后，调用器会对所有调用逐个验证其随机数和其他参数，然后把鉴别过的调用数据发送到鉴别过的地址。

在这个基础上可以构建更多的方案。假如你添加了一个新参数”expiration （逾期）&quot;。这个参数会被哈希成委托哈希值，且在验证过程中，调用者会验证是否 `expiration &lt; block.number`。这样外部账户就可以有逾期交易了！


EIP-3074 提供的是功能强大的基元，能为更多顺滑用户体验打开可能性而无须引入额外的信任假设。如果你想阅读这份 EIP 的完整版，你可以点击这里：

https://eips.ethereum.org/EIPS/eip-3074


用 go-ethereum 编写的原型实现可以在这里看到：https://t.co/XWhlX9C4Y5?amp=1

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[Eth2进展更新（截至2021/3/28）]]></title><description><![CDATA[回顾以太坊2.0路线图变更；合并工作进展]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-3-28</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-3-28</guid><pubDate>Thu, 01 Apr 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210328)

&lt;br/&gt;

#  首推

以太坊基金会发布[针对信标链安全性和测试的提案请求 (RFP)](https://notes.ethereum.org/@lsankar/security-rfp)。

&lt;br/&gt;

# 社论


Danny Ryan 希望[不再使用](https://www.notion.so/What-s-New-in-Eth2-28-March-2021-67bb45d19b094a25a02c4b55a9998561) eth1 和 eth2 这两个词。作为 “What&apos;s New in Eth2” 的作者和维护者，我还是有被打击到。

但是总的来说，我同意这些术语已经逐渐失去了作用，并且有可能极具误导性。这并非只是命名这件事本事，而是捕捉方向上的根本变化，并进行清晰的沟通。路线图的变化使社区感到困惑，而清楚命名则有助于促进理解。

我们来简单回顾一下以太坊路线图的命名历史。

据我所知，Vitalik 在 [2014 年 4 月](https://news.ycombinator.com/item?id=7554923)的 Hacker News 中首次使用了 “Ethereum 2” 这个名字。他将 Ethereum 2 定位为未来通过 “基本密码学升级” 对以太坊进行功能上的变革。


然后关于 “Ethereum 2” 的叙述就没再出现，而变成了我们所熟悉的 Frontier→Homestead→Metropolis→Serenity 路线，该路线在 [2015 年 3 月](https://blog.ethereum.org/2015/03/03/ethereum-launch-process/)首次提出。Serenity 本身不是 Ethereum 2，而是指代通往 Proof of Stake 的网络升级。有趣的是，分片和扩容在该路线图中没有明确的阐述，尽管[当时](https://blog.ethereum.org/2015/04/05/blockchain-scalability-chain-fibers-redux/)已经讨论过了。

几年以来大致都遵循了这个计划，Homestead 于 2016 年 3 月实现，Metropolis 在 2017 年 10 月和 2019 年 2 月进行了两次升级 ([参考链接](https://medium.com/mycrypto/the-history-of-ethereum-hard-forks-6a6dae76d56f))。

Serenity 将通过升级现有以太坊链以实现 PoS (权益证明)。该升级在 [EIP-1011](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1011.md) 中提出，甚至在 [2017 年 12 月 31 日](https://twitter.com/karl_dot_tech/status/947503029166546946)启动了[一个测试网](https://hackmd.io/@aTTDQ4GiRVyyce6trnsfpg/Hk6UiFU7z?type=view)。

然而，大家发现通往 Serenity 的道路走不通，不仅仅是因为需要质押数量庞大的 ETH (1500 ETH)。

因此在 2018 年中，我们放弃了该路线，并重新开始规划 Ethereum 2.0。我们回归到 Vitalik 于 2014 年提出的原始想法：Ethereum 2 是针对协议的重大密码学更改。将其称为 Eth2.0 是合理的，因为按照计划需要对现有平台进行全面改动。Ethereum 1 最终将作为遗留系统被并入。该以太坊 2.0 路线图包含了几个连续阶段：阶段 0 权益证明；阶段 1 数据分片；阶段 2 可执行分片；最后将 Eth1 迁移至 Eth2。

现在我们已经交付了阶段 0，但计划中的其余部分也已经发生变化。根据 [ethereum.org](https://ethereum.org/en/eth2/) 网站上最新的 Eth2 页面，“ Eth2 [现在] 指的是一系列相互关联的升级，这些升级将使以太坊更具扩容行性、安全性和可持续性”。这看起来更像之前的 Serenity 计划。我们正在原地升级以太坊链，而不是推倒重来。

因此我们能看出，这几年来对路线图的叙述在有效**替代** Ethereum 1 (在不同时间被称作 Eth2) 与在 Eth1 上原地**升级**之间摇摆不定。现在我们或多或少地回到了“升级”这个方向。

有鉴于此，现在看来将 Etheruem 2.0 这个名称应用于整个项目是令人感到困惑的：在某种程度上这意味着与当前的以太坊链不同的区块链，对其他人来说，甚至意味着[不同的代币](https://www.reddit.com/r/ethereum/comments/md75k2/will_be_eth_20_a_new_coin_or_will_be_the_same_eth/)。它暗示了未来的不兼容性和种种问题。

因此，[最近的命名趋势](https://blog.ethereum.org/2021/03/11/finalized-no-23/)是将 Eth2 的内容限制把以太坊的共识层升级为权益证明，并将当今的以太坊 (即 Eth1) 都统称为应用层。

&lt;br/&gt;

# 信标链

注意啦！质押者们！要升级你的 Eth1 节点了！！以太坊网络即将进行[柏林升级](https://blog.ethereum.org/2021/03/08/ethereum-berlin-upgrade-announcement/)。请确保在4月14日前升级你的主网 Eth1 节点。

信标链继续保持良好的运行状态，没有什么新闻。距离上一次[罚没事件](https://beaconcha.in/validators/slashings)已经过去了[七周](https://twitter.com/eth2REKT/status/1375855226175987712)，所以现在每个人似乎都掌握了避免被罚没的技巧。

正在进行当中主要有两件事，一是将于六月进行的 Altair 升级，以及使以太坊全部迁移至 PoS 的合并计划。

上周发生的大事件当属 Prater 测试网的发布。Danny 的 [Finalized no. 24](https://blog.ethereum.org/2021/03/24/finalized-no-24/) 对此进行了一些阐述。

## Altair 升级

Altair 是计划于年中进行的信标链升级。目前已经发布了两个 alpha 版本的规范：[Stargazer](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.1) 以及 [Half of &apos;em just look like dots](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.2).

以下是一些总结性文档：

- [信标链变更](https://hackmd.io/@benjaminion/wnie2_210328)
- [Altair 分叉](https://hackmd.io/@benjaminion/wnie2_210328) - 分叉如何激活，及其转换过程
- [轻客户端同步协议](https://hackmd.io/@benjaminion/wnie2_210328) - 如何搭建信标链轻客户端

针对验证者证明的奖励有一些有趣的更新，我将在下次进行总结。据我所知，这主要是关于更改打包延迟的内容。目前，验证者有时最好延迟进行证明，以确保为正确的区块投票。Altair 则修复了这一无用的激励措施。


关于 Altair 升级，可以看看 Viktor Bunin (Bison Trails) 的[最新文章](https://bisontrails.co/eth2/012/)。


## 合并工作

Eth2 中目前最热的主题就是合并了，当前的以太坊链会由 PoW 工作量证明转向 PoS 权益证明。如上讨论，我们在多年来对此有不同的计划。最近呼声比较大的提案是[快速合并](https://notes.ethereum.org/@vbuterin/B1mUf6DXO) (quick merge)，直接使 运行当中的 PoS 链替换基于 PoW 的共识层。

上周，[快速合并 (quick merge) 提案已经纳入规范](https://github.com/ethereum/eth2.0-specs/pull/2281)。这使其成为了以太坊 2.0 规范不可或缺的一部分。这是一个简单的提案，从技术的角度来看交付难度最小。这是一条使以太坊尽快转向 PoS 的途径，同时将一些工作推迟到将来的升级中 (例如验证者提款)。

现在最大的问题在于：什么时候实施合并？一个选项是在七月的以太坊伦敦升级完成 EIP -1559 之后[集中精力](https://github.com/ethereum/pm/issues/278)交付合并。Aftab 在[推文](https://twitter.com/iamdcinvestor/status/1375448967668961287)中对这条路径表示了强烈支持。


我对快速转移到 PoS [有些保留](https://hackmd.io/@benjaminion/wnie2_210313#Editorial)。简言之，这可能会使其他计划[延迟数年](https://twitter.com/lightclients/status/1375525139777908736)。但是如果这是尽快移除 PoW 的方式，我想这是我们必须承担的代价。Nimbus 的 Jacek Sieka 希望看到对 Eth1 进行循序渐进的[升级](https://twitter.com/jcksie/status/1375467986685997068) ，而我们继续在 Eth2 中进行大量疯狂的创新。


根据 Tim Beiko 的核心开发者会议更新，在下面即将讨论的 EthGlobal 黑客松中展示了合并测试网之后，可能就会决定合并的时间。有声音表示以太坊可能会在 2021 年底转移到 PoS，但更有可能在 2022 年第一季度。

Sigma Prime 公布了一个[合并交易](https://twitter.com/sigp_io/status/1374979655782989824)：PoS 网络中的一笔以太坊交易 (由 [Teku 领导](https://twitter.com/mkalinin2/status/1299038199591862274)，其他团队配合实现)。Aditya Asgaonkar 也直接基于可执行规范使用 Python 实现了一个[合并 PoC](https://github.com/adiasg/eth2-quick-merge-poc/blob/master/Eth2-Merge-PoC.ipynb)。


有计划在即将到来的 EthGlobal [scaling Ethereum hackathon](https://scaling.ethglobal.co/) (扩容以太坊黑客松) 中召集尽可能多的 Eth2 和 Eth1 客户端来搭建一个合并测试网，延申目标是加入分片，甚至是基于分片数据实现 rollup 演示。

## 测试网

[Prater 测试网](https://prater.beaconcha.in/)在 3 月 23 日发布。这是迄今为止最雄心勃勃的计划，创世有 210,000 个验证者，几乎是当前信标链主网的两倍。验证者通过六种方式进行分配：四个客户端团队各运行四万个验证者；由以太坊基金会使用四个客户端运行四万个验证者；第三方分配一万个验证者。

增加验证者数量也增加了状态的大小，加大了处理状态的工作量，也增加了网络中广播的消息数量。 区块也因此变得更加饱满，这使得我们能探索新的局限，客户端也能借此进行优化以更好地打包证明。

测试网的发布过程很常规，过去发布测试网是非常紧张的。我没有参加这次测试网的发布。有一个小意外是 Nimbus 的 [doppelganger 检测功能](https://our.status.im/nimbus-update-v1-0-7-release/)使其验证者无法参加前两个 epochs (在主网中这不是问题，因为我们不会再进行创世了)。 几个团队必须尽早升级其托管，Teku 最初有些滞后，对此我们进行了升级。Prater 的超大规模已经暴露了一些潜在的风险，但都很好处理，并且使 CPU 再次宕机，这就是测试网的作用。

读者也可以加入 Prater 测试网！此处是 [Prater Launchpad](https://prater.launchpad.ethereum.org/en/)，最近的客户端更新都进行了支持。

与此同时，[Pyrmont 测试网](https://pyrmont.beaconcha.in/)在继续运行。我们鼓励大家开始使用 Prater 进行测试，并在接下来的几周内停止使用 Pyrmont。我们计划使用 Pyrmont 测试协议升级过程 (即“硬分叉”)，然后在不具备最终确定性 (finalisation) 的情况下长时间运行，以进一步对客户端进行压力测试。因此 Pyrmont 预计会有几周不稳定的时间。

## 工具

Alex Stokes 的[分叉检测器](https://eth2-fork-mon.stokes.io/)的功能在不断增加，最近添加了[弱主观性数据](https://twitter.com/ralexstokes/status/1372656834306142209)。

&lt;br/&gt;

# 释义性资源

本周有关安装和运行 Eth2 验证者客户端有很多不错的资源：

- EthStaker 的 Unvetica 基于 Somer Esat 的[教程](https://github.com/SomerEsat/ethereum-staking-guide)制作了设置验证者客户端的[视频教程](https://www.youtube.com/playlist?list=PLOB9GGXGcc32Qv0wfPcPAtG5W7FS3VzLn)

- EthStaker 的“一键式”图示安装程序项目 [Stakehouse](https://github.com/ethstaker-core/stakehouse) 看起来进展顺利。他们正在寻找有关 [todo list](https://github.com/ethstaker-core/stakehouse#getting-involved) 的帮助。最新消息：这是Stakehouse的[视频演示](https://www.youtube.com/watch?v=cxP9gwapXJ0)！

- [Stereum.net](http://stereum.net/) 发布了每个客户端的 [docker compose](https://github.com/stereum-dev/ethereum2-docker-compose)、[secure docker images](https://github.com/stereum-dev/ethereum2-docker-build) 和 [automation](https://github.com/stereum-dev/ethereum2-ansible)。还有一个单行的 Eth2 installer (当以 root 用户身份从 web 向 shell 传输内容时需要保持谨慎态度)。

- 在树莓派上安装 [Rocket Pool](https://github.com/jclapis/rp-pi-guide/blob/main/Docker.md) 的教程


以太坊基金会的一些推文系列。我更喜欢这种小巧简短的方式：

- Lakshman Sankar：[状态大小管理](https://twitter.com/lakshmansankar/status/1372645109414563840)
- Lakshman：[轻客户端支持](https://twitter.com/lakshmansankar/status/1374830379941601281)
- Alex Stokes：[弱主观性](https://twitter.com/ralexstokes/status/1372656834306142209)。Meredith Baxter 的[视频演示](https://www.youtube.com/watch?v=Oz3flfj50Ig)也很不错。

&lt;br/&gt;

# 媒体

Elias Simos 继续她的 Eth2 开发者精彩系列，这次邀请的是 Lighthouse 的[Paul Hauner](https://bisontrails.co/eth2/paul-hauner/)。前两次邀请的是 Prysm 的 [Raul Jordan](https://bisontrails.co/eth2/raul-jordan/) 和 Teku 的[我](https://bisontrails.co/eth2/ben-edgington/) 。

[Ethstaker 最新一期更新](https://www.youtube.com/watch?v=Kut-N8YhZEg)——虽然只有 5 分钟，但包含很多信息。这个视频已经比较前一段时间的了，但可以关注这个[播放列表](https://www.youtube.com/watch?v=Kut-N8YhZEg&amp;list=PLOB9GGXGcc33Yh4U_9arhf44OOieaXujU)看最新的更新。

Coindesk 继续推出很好的 Eth2 内容：

- 最新的[Valid Points](https://www.coindesk.com/tag/valid-points)新闻信：[3月17日](https://www.coindesk.com/ethereum-proof-of-stake-sooner-than-you-think)，以太坊的权益证明机制可能比你想象的来得快；[3月24日](https://www.coindesk.com/ethereum-governance-process-alters-the-merge)，以太坊的治理过程如何改变“合并”。
- 最新一期的[Mapping Out Eth2](https://www.coindesk.com/podcasts/mapping-out-eth-2-0)播客：[3月18日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/the-one-click-client-installer-being-built-for-eth-2-0-stakers)这期是与 EthStaker 的 Superphiz一起做的——这是我至今最喜欢的一期！[3月25日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/ethereums-transition-could-be-months-not-years-away)这期只有 Christine、Will和我。

[Wired UK](https://www.wired.co.uk/article/blockchain-cryptocurrency-energy-use) 报导了权益证明。

&lt;br/&gt;

# 研究

Dankrad 发表了[High confidence single block confirmations in Casper FFG （在Casper FFG里，单个区块的确认具有高可信度](https://ethresear.ch/t/high-confidence-single-block-confirmations-in-casper-ffg/8909?u=benjaminion)。文章里有许多关于信标链分叉选择的洞见。但实际的结果是，当信标链受到攻击时，这是很容易被发现的。当没有受到攻击时 (大多数是这种情况，因为一次有效攻击需要非常大量的资源)，出于现实原因，我们可以实现非常快速的最终确定，无须等待完整的、经济层面上的最终确定性。

Vitalik 再次提出设置[活跃验证者的数量上限](https://ethresear.ch/t/simplified-active-validator-cap-and-rotation-proposal/9022?u=benjaminion)。这个提案的目的不是要限制验证者总数，而是要将任何时候活跃验证者的数量限制在 50 万左右，这对网络安全来说足够了。任何时候有越多的活跃验证者，就有越多的广播信息需要处理，客户端就需要做更多的工作来追踪状态。这会增加成为一名验证者所需的资源，进而限制去中心化程度。

 [CBC Casper 仍在计划中](https://www.reddit.com/r/ethereum/comments/m8pvfb/longterm_cbc_casper_plans/)！如果它能实现的话，我估计在几年内是看不到的。

&lt;br/&gt;

# 实现者会议

第 60 次会议在 3 月 25 日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/210)
- [会议视频](https://youtu.be/Q0EbnFViJFk?t=118)
- [我的速记](https://hackmd.io/@benjaminion/ry2SbM5VO), and Alex Stokes 的[实时推文](https://twitter.com/ralexstokes/status/1375095774749491206).

讨论了接下来的测试网、研究进度、以及策划 EthGlobal 举办的 Scaling Ethereum 黑客松。

&lt;br/&gt;

# 活动预告

- April 20th, 2021 at 5pm PST: deadline for responses to the [Beacon chain security and testing RFP](https://notes.ethereum.org/@lsankar/security-rfp)
- [信标链安全性和测试的提案请求](https://notes.ethereum.org/@lsankar/security-rfp)的截止时间是 2021年 4 月 20 日北京时间 2:00 am。

&lt;br/&gt;

# 其他消息

- [Prysmatic Labs](https://medium.com/prysmatic-labs/eth2-march-development-update-prysmatic-labs-f6c72b9e0dda) 的开发更新
- [Lodestar](https://twitter.com/ChainSafeth/status/1372930800455360513) 团队在推特发布的更新
- Least Authority 出了[一份Blox Staking 的审计报告](https://leastauthority.com/blog/audit-of-blox-staking-wallet/)。Blox 的模型相当有意思，是完全非托管的：质押者能保有他们私钥的控制权。
- 以太坊尽职调查委员会最近在[搜集质押服务商的信息](https://ethddc.org/)。如果你在找质押服务商的话，这里能提供有用的背景信息。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Vitalik: 认受性是最重要的稀缺资源]]></title><description><![CDATA[Vitalik论述区块链与认受性的关系及应如何利用认受性]]></description><link>https://www.ethereum.cn/Thinking/legitimacy</link><guid isPermaLink="false">https://www.ethereum.cn/Thinking/legitimacy</guid><pubDate>Wed, 31 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/03/23/legitimacy.html)

特别鸣谢 Karl Floersch、Aya Miyaguchi 以及 Mr Silly 的建议和意见。

&lt;br/&gt;

比特币与以太坊区块链生态在网络安全 (工作量证明的目的) 的花费远远多于我们所有其他工作的总和。从诞生那天开始，比特币区块链支付给矿工的区块奖励大概平均 3800 万美元每天，再加上大约每天500万美元的交易费。在这笔开销上，以太坊排第二，平均每天1950万美元的区块奖励加每天1800万美元的交易费。同时，以太坊基金会每年的预算，包括研究、协议开发的支出、赞助、以及各种其他花销，也不过每年3000万美元。虽然也有来自非基金会的赞助，但多于基金会赞助的最多就几次。比特币生态在研发方面的开支应该会更低。比特币生态的研发资金大部分来自公司 (至今总共 2.5 亿美元，[根据这个网站](https://www.crunchbase.com/hub/bitcoin-companies-seed-funding))，[这份报告](https://blog.bitmex.com/who-funds-bitcoin-development/) 也指出有大概 57 名雇主。假如不算高薪的开发者，比特币生态的研发开支是每年大概 2000万美元。

![pow spending](https://i.ibb.co/8949wzV/pow-spending.png)



显然，这种开支模式是*严重的资源错配*。如果把网络最后 20% 的哈希算力同等的资源投入到研究与核心协议开发上，对生态产出的价值会大得多。 那么，为什么不直接删减 20%的 PoW 预算，然后把这些资金用到其他地方呢？


对这个难题的标准回答需要用到像“[公共选择理论](http://www.daviddfriedman.com/Academic/Price_Theory/PThy_Chapter_19/PThy_Chap_19.html)”与“ [Schelling fences](https://www.lesswrong.com/posts/Kbm6QnJv9dgWsPHQP/schelling-fences-on-slippery-slopes)” 这样的概念：尽管我们可以轻易辨识出一些有价值的公共物品，并一次性把一些资金转到这些公共物品上，但为这种决策建立一个常规的制度化模式会带来政治混乱和俘虏，长期来看这样做并不值得。但不管是什么原因，我们都面对这样一个有趣的事实——**比特币与以太坊生态作为有机体能够集资数十亿美元，却在决定资金要如何使用上却有非常奇怪和难以理解的限制。**


造成这个结果的强大社会力量很值得我们去了解。在下文我们会看到，以太坊生态一开始能聚集这些资源 （而技术上完全一样的以太经典不能）是因为同一股社会力量。而帮助区块链从 51% 攻击恢复过来的关键也是社会力量。社会力量所支撑的各种极其强大的机制远远超过了区块链领域。我在下文会清楚阐述原因，并把这种强大的社会力量称之为：**认受性**。



## 社会契约可以拥有代币


为了更好地理解这种力量，一个重要的例子是 Steem 与[Hive](https://hive.io/) 间传奇般的故事。在2020年年初，[孙宇晨](https://www.theverge.com/21459906/bittorrent-tron-acquisition-justin-sun-us-china) 收购了 [Steem 公司](https://www.coindesk.com/justin-sun-bought-steemit-steem-moved-to-limit-his-power)，这与 Steem 区块链不是同一回事，但他的确持有 STEEM 代币供应量的20%左右。Steem 社区自然不信任孙宇晨。因此，他们通过一次链上投票正式确立了一份他们认为长期有效的“君子协议“，决定 Steem公司持有的币是为了 Steem 区块链的共同利益而托管的，因此不应该被用来投票。借助交易所持有的 STEEM 代币，孙宇晨发起了反击，并赢得了足够多的投票权可以单方面控制 Steem 区块链。社区在链上治理上已看不到更多选项了。因此，他们对 Steem 区块链进行了分叉，把分叉出来的链称为 Hive，并把所有的 STEEM 代币余额数据都复制到新链，除了那些参与了攻击的，包括孙宇晨的。


![hive](https://i.ibb.co/XL33R9v/hive.png)

*他们还上线了很多应用。如果他们没有进行分叉，大多数用户不是留在 Steem 上就是完全迁移到其他项目上。*

从这件事上我们学到的教训是：Steem 公司从没有真正“拥有”过这些代币。如果他们拥有了，他们就能以任何他们想要的方式[使用、享有、以及滥用](https://cours-de-droit.net/usus-fructus-abusus-les-elements-constitutifs-de-la-propriete-a130283250/)这些代币。但实际上，当公司想要以社区不赞同的方式享有和滥用这些代币时，他们是能被成功阻止的。箇中原理是与比特币与以太坊尚未发行的代币奖励相似类型的模式：代币最终不是为加密密钥所有，而是某种*社会契约*。

我们可以把同一个逻辑应用到区块链世界的很多其他结构。例如 [ENS](https://ens.domains/) 的合约根私钥多签。[合约根的多签](https://consensys.net/diligence/audits/2019/03/ens-permanent-registrar/) 由七个重要 ENS 和以太坊社区成员控制。但如果他们中四人联合起来把注册表“升级”为把所有最好的域名都发给他们自己呢？在 ENS 作为智能合约系统的语境下，他们完全有这样做的能力，且不会被挑战。但如果他们真的尝试以这种方式滥用他们的技术能力，将会发生什么就很明显了：他们会被社区排挤出去，剩下的 ENS 社区会制作一份新的 ENS 合约，恢复原来的域名所有者，每个使用 ENS 的以太坊应用都会修改用户界面，将其导向使用新的 ENS。

下面要说的则超出智能合约结构。为什么埃隆·马斯克 (Elon Musk) 可以以自己的推特作为 NFT 出售，但杰夫·贝佐斯（Jeff Bezos）却很难做到相同的事？埃隆与杰夫有同样的能力对埃隆的推特进行截屏并把图放进 NFT 的 dapp 里，那区别在哪里？任何对人类社会心理学有基本直觉理解的人 (或[艺术赝品现象](https://www.austinartistsmarket.com/famous-fakes-art-history/))，答案是显而易见的：埃隆出售埃隆的推特是真品，而杰夫做同样的事情则不然。再次说明，数百万美元价值的控制权或分配权不是掌握在个人手里或加密密钥上，而是取决于社会对认受性 (legitimacy) 的理解。


进一步来说，认受性支配着各种社会地位的博弈：[智识上的论述](https://samoburja.com/intellectual-legitimacy/)、语言、财产权、政治体系和国家边界。即便是区块链共识也以同样的逻辑运行：社区都接受的软分叉与 51% 审查攻击后社区协商一次[协议外的恢复性分叉](https://ethresear.ch/t/responding-to-51-attacks-in-casper-ffg/6363)以排除攻击者的唯一区别就在于认受性。

&lt;br/&gt;

# 什么是认受性？

*也可以看看我之前[关于区块链治理的文章](https://vitalik.ca/general/2017/12/17/voting.html)*

要更好理解认受性的机制，我们需要深入了解一些博弈论知识。生活中有很多的情况是需要**协调行为**的：如果你单独做某事，你很可能什么都做不了 (或情况更坏) : 但如果每个人都一起行动，目标可能就能实现。


![game](https://i.ibb.co/s2n7wdd/coordinationgame.png)

*这是对一场协调博弈的抽象。当你与其他所有人做相同的事，你会获利最多*




一个常见的例子是在路的左边还是右边驾驶：在路的哪边驾驶其实并不重要，只要人们在同一边驾驶。如果你与其他所有人一样同时换边，且大多数人都选择新的安排，那么结果是净收益。但如果你单独换边，无论你有多喜欢在另一边驾驶，你个人的结果将是相当不利的。

 现在，我们来说一下认受性的定义。


&gt; **认受性是一种高层次接受度的模式。在一定的社会背景里，如果大多数的人都接受某个结果，并在自己的社会角色里做出与该结果相符的行为，且每个人这样做是因为预期其他人也会这样做，那么这个结果就有了“认受性”。**


认受性是在协调博弈中自然产生的一个现象。如果你不是在一场协调的博弈中，你没有理由需要根据你所预期其他人得行动来调整自己的行动，此时认受性是不重要的。但如我们所见，协调博弈在社会普遍存在，这又使得认受性变得异常地重要。几乎在任何协调博弈持续得足够长的环境里，无可避免地会出现一些关于做决策的机制。这些机制由一个成熟文化体授权的，该文化体中的每个人都关注这些机制，且这些机制按照他们的意志执行。每个人都会这样思考：因为其他所有人都遵守这些机制，如果他们做了不一样的事，他们只会制造冲突与遭受损失，或者至少会被留在一个只有他们自己 的、孤独的、和被分叉的生态里。如果一个机制具备这些能力且能成功作出这些选择，那么该机制就有了认受性。


![general](https://i.ibb.co/XVsFW0v/byzantinegeneral.jpg)

*一名拜占庭将军正号召他的军队进发。这样做的目的不只是让士兵感到勇敢和兴奋，还要确保他们每个人都能感到勇敢和兴奋，且会向前冲，因此士兵个体在独自冲锋时不只是在自杀。*



在任何情况下，只要协调博弈存在的时间足够长，认受性就很可能会产生。区块链则处处是协调博弈。你运行的是哪个客户端软件？你要的是哪个去中心化域名注册机构，地址对应的是哪个.eth 名称？你接受的是哪个版本的 Uniswap 合约来代表 Uniswap 交易所？即使是 NFT 也是协调博弈。NFT 的两大价值在于 (i) 持有NFT 的自豪感和可以炫耀所有权的能力，以及 (ii) 在未来可以卖出的可能性。这两方面的内容，一个非常非常关键的点在于你所买的 NFT 在其他所有人看来是有*认受性*的。所有这些例子显示，与其他人有同一个答案有一个很大的好处，而且这个机制决定出的均值具有非常大的力量。



##  认受性理论

认受性的产生有很多方式。总的来说，认受性之所以产生是因为获得认受性的事物对大多数人来说具有吸引力。但当然，人们的心理直觉可以是非常复杂的。我不可能列出一个认受性理论的完整列表，但我们可以先看看这几个：


- **强力带来的认受性**：某人让所有人信服他们的力量强大到可以强加他们的意愿在所有人身上且反抗是非常困难的。这会驱使很多人屈服，因为每个人都预期所有其他人都会因为太畏惧而不去反抗。
- **连续性带来的认受性**：如果某种东西在时间 T 是有认受性的，那么在默认情况下，在时间 T+1它也是有认受性的。
- **公平性带来的认受性**：某种东西可以变成具有认受性是因为它满足了一个直观的公平理念。参考[我这篇关于可靠的中立性的文章](https://nakamoto.com/credible-neutrality/)，但需要注意这不是唯一一种公平性。
- **程序带来的认受性**：如果一个程序是有认受性的，该程序的输出结果也会获得认受性 (例如，民主政体通过的法律有时是这样获得认受性的)。
- **绩效带来的认受性**：如果一个程序带来的结果令人们满意，那么这个程序会获得认受性 (例如，成功的独裁者有时是这样获得认受性的)
- **参与带来的额认受性**：如果人们参与了选择一个结果，他们更可能认为这是有认受性的。这与公平性相似，但不完全相同：它建基于与之前的行动保持一致性的心理愿望上。


请注意，认受性是一个描述性的概念；某种东西可能是有认受性的，尽管你个人认为这非常可怕。也就是说，如果足够多的人认为某个结果是可怕的，那么在未来发生一些事件导致此项认受性消失的可能性会更高，通常表现为一开始是逐渐消减的，然后突然消失。

&lt;br/&gt;

# 认受性是一项力量强大的社会技术，我们应该善用它


加密货币生态里的公共物品资助是相当惨淡的。加密货币生态上有数千亿美元在流动，但这些资本赖以继续存在的公共物品每年却只获得几千万美元的资助。

对于这个事实，有两种回应方式。第一种是对这些局限，与社区作出的这些英勇但不特别有效的努力感到自豪。感觉这是比特币生态经常采取的路线。


[![bitcoin](https://i.ibb.co/4TB7H37/bitcoin2.png)


用团队的个人自我牺牲来资助核心开发当然很值得钦佩，但 [Eliud Kipchoge 在两小时内跑完马拉松](https://www.bbc.com/sport/athletics/50025543) 也同样值得钦佩：这是人类坚韧品质的一次骄人展现，但这不会是人类运输系统的未来 (或者在加密货币生态里，公共物品的资助)。好比我们已经有很多好得多的技术使人可以在一小时内移动 42 公里而无须惊人的毅力和多年的训练，**我们应该专注于构建更好的社会技术，以获得我们所需规模的公共物品资助，并把它变成我们经济生态的一个系统部分，而不是一次性的慈善举措。**


现在让我们回到加密货币。加密货币 (和其他的数字资产，比如域名、虚拟地、以及NFT) 拥有的强大力量在于它使得社区可以聚集大量资金而无须任何个人亲自捐赠这些资金。但是，这些资金受限于认受性：你不能简单地把它分配给一个中心化团队而不损害它所创造的价值。尽管比特币和以太坊已经依赖于认受性来应对 51% 攻击，但使用认受性来指导协议内公共物品的资助要难得多。但是在[日益](https://cointelegraph.com/news/growing-list-of-billion-dollar-crypto-unicorns-suggest-the-best-is-yet-to-come)[丰富](https://www.theverge.com/2021/3/11/22325054/beeple-christies-nft-sale-cost-everydays-69-million)的应用层，新的协议一直在产生，我们在资金的去向上有相当大的灵活性。



## Bitshares的认受性


在早期的加密货币领域，有一个早已被忘记但在我看来非常创新的想法，那就是 [Bitshares 社会共识](http://web.archive.org/web/20140209035756/https://invictus-innovations.com/social-consensus/) 模型。本质上，Bitshares 把自己描述为一个由 [PTS 和 AGS 持有者](https://bitsharestalk.org/index.php?topic=1964.0)组成的社区，他们愿意集体支持一个新项目的生态，但如果一个项目要进入生态，它需要把它代币供应量的10% 分给现有的 PTS 和 AGS 持有者。


现在，当然任何人都可以创建一个项目，无须把任何代币分给 PTS/AGS 的持有者，或甚至一个分叉项目的确会做分配，且真的分出去。但，如 Dan Larimer 所说：


&gt; 你不能逼迫任何人做任何事，但市场上是由网络效应的。如果有人提出一个非常有吸引力的实现，然后你可以让整个 PTS 社区支付生成一个新的创世区块的成本。否则，想要从零开始的个人需要围绕它的系统构建一个全新的社区。考虑到网络效应的话，我觉得会把代币分给 ProtoShare 的项目会胜出。


这也是认受性理念：任何会分配代币给 PTS/AGS 持有者的项目都将获得社区的关注与支持 (而且它也很值得社区的每个成员关注项目，因为社区的其他人也是这样做的)，而不这样做的项目则不会有这些效应。**现在，我们当然不是想要完全复制这个认受性理念——以太坊社区没有什么意欲要给少数的早期采用者增加财富——但我们可以对核心概念作出修改，使其成为更有社会价值的东西。**



## 把这个模型延展到以太坊


包括以太坊在内的区块链生态重视自由与去中心化。但遗憾的是，大多数区块链的公共物品生态仍然是权威主导和中心化的：无论是以太坊、Zcash、还是其他大型区块链，通常有一个（或最多2到3个）实体在公共物品上的支出远远超过其他所有人，使想要构建公共物品的独立团队没有什么选择。我把这个公共物品资助模型为“公共物品中央资本协调者 （Central Capital Coordinators for Public-goods，CCCPs）


**这种状况不是组织方本身的错，他们非常勇敢地尽力支持这个生态。相反，是这个生态的规则对组织不公平，因为他们对组织提出非常不公平的高标准。**任何单一的中心化组织都不可避免地会有盲区，和至少会有一些类别或团队的价值是组织无法理解的；这并不是其中任何人做错事导致的，只是因为此般尽善尽美超出这一小群人的能力范围。因此，开创一个更多元和更有弹性的公共物品资助方式、卸下任何单个组织的压力是非常有价值的。

所幸的是，我们已经有这样一个替代方案的种子了。以太坊的应用层生态不仅存在，还正日益壮大，且已经展现了它的公共精神。像 Gnosis 这样的公司一直在资助以太坊客户端开发，还有各种以太坊 DeFi 项目也给 Gitcoin Grants的匹配资金池捐出数十万美元了。


![matching](https://i.ibb.co/nBp5pz4/matching.png)



Gitcoin Grants 已经获得相当高水平的认受性了：它的公共物品资助机制——二次方募资，已经证明了其在反映社区优先事项和价值上的可靠中立性和有效性，以及填补现有资助机制的不足。有时，获得最高 Gitcoin Grants 匹配资金的项目甚至会吸引到其他或更中心化的资助实体的资助。以太坊基金会本身在支持这种实验性和多样性实践上发挥关键作用，与 MolochDAO 和其他组织一起孵化出像 Gitcoin Grants 这样的尝试，它们随后进入社区并获得更广泛的支持。


通过改良 Bitshares 的模型，我们可以把这个新生的公共物品资助生态发展壮大：不同于把最大的社区支持给与那些将代币分给在2013年购买 PTS 或 AGS 的小型寡头群体的项目，**我们支持的是那些给公共物品提供小额捐赠的项目，这些公共产品对项目及项目所依赖的生态都提供支持。**而且，很关键的一点是，我们可以不把这些好处给与那些分叉现有项目且不回馈给更广泛生态的项目。


支持公共物品有很多方法：承诺长期支持 Gitcoin Grants 的匹配资金池、支持以太坊客户端开发 (这也是一项具有合理、可靠中立性的工作，因为以太坊客户端是有明确定义的)，或甚至运营一个自己的资助项目，且其范围是超出该应用层项目本身的。对于多少才能被算作充分支持这个问题，形成共识的最简单方法是——例如，项目花销的5%用于支持更广泛的生态，另外1%用于区块链领域以外的公共物品，且靠善意来决定资金去向。



## 社区真的有这么大的影响力吗？


当然，这种社区支持提供的价值是有限度的。如果一个竞争项目 (或者一个现有项目的分叉) 能给它的用户提供好得多的东西，那么用户都会蜂拥跟随，不管有多少人喊他们应该使用另外一个更有社会价值的选项。


但在不同的情况下，这些限度是不同的：有时，社区的影响力是微小的，但在其他时候它可以相当强大。 [Tether](https://tether.to/) vs [DAI](https://makerdao.com/) 可以作为一个有趣得案例分析。Tether 有很多负面新闻，但尽管如此交易者还是一直持有 Tether 并用 Tether 来转移美元。而尽管[DAI](https://makerdao.com/)有更去中心化和更透明这些优点，就交易者而言，它无法夺走 Tether 大部分的市场份额。但 DAI 的优势在于应用： [Augur](https://augur2.eth.link/)、[xDai](https://www.xdaichain.com/)、[PoolTogether](https://app.pooltogether.com/) 都在使用 DAI，[zk.money](https://zk.money/asset/DAI) 计划使用DAI，还有[很多其他应用](https://github.com/makerdao/awesome-makerdao#dai-1)。哪些 dapp 是使用的 USDT？少得多。


因此，尽管社区驱动的力量形成的认受性效果是有限的，但还是有相当大的空间可以利用，足以鼓励项目从它们的预算里分出一部分给更广泛的生态。甚至还有一个自私理由参与到这种公利与私利的平衡中：如果你是以太坊钱包的开发者，或是播客主持人或新闻信的作者，当你看到两个竞争项目，一个对生态级的公共物品作出重大贡献，你自己也从中受益，而另一个项目没有，你会尽力帮助哪个项目获得更多的市场份额？



## 支持超出以太坊场域的公共物品的NFT


用 ETH 产生的价值支持公共物品这一理念起源于获得公共支持的认受性这一概念，其产生的价值可以远远超出以太坊生态。一个重要且近在眼前的挑战与机遇就是 NFT。NFT 非常有潜力可以用来帮助许多类型的公共物品，特别是创意类，起码可以部分解决它们[长期和系统性的资金不足问题](https://en.wikipedia.org/wiki/Tragedy_of_the_commons)。


[![jack](https://i.ibb.co/2vkzknH/jack.png)

*这真的是非常值得称道的第一步。*



但它们可能是一个未能抓住的机会：帮助埃隆·马斯克通过出售他的推特再赚一百万美元没什么社会价值，按目前的情况看，这些钱都会归他个人所有 (值得称道的是，他[最终决定不卖](https://www.cnbc.com/2021/03/17/elon-musk-turns-down-1-million-offer-to-buy-his-tweet-as-an-nft.html))。如果 NFT 最终只变成一个很大程度上使已经很富有的名人获益的赌场，这样的结果就没那么有意思了。


所幸的是，我们有能力改变这个结果。哪些 NFT 人们觉得有吸引力想要买，哪些他们不想买，是认受性的问题：如果每个人都认为某个 NFT 是有趣的而另一个很差劲，人们会强烈倾向于买第一个，因为它能带来更高的炫耀价值，持有它也有自豪感，同时因为每个人都这样认为，它可以以更高价格再次出售。如果 NFT 的认受性可以被引导到一个好的方向，有机会可以给艺术家、慈善机构和其他团体建立一个稳固的资助渠道。


这里有两个可能的想法：

1. 一些机构 (甚至是 DAO) 可以保障 NFT 收入的一部分用于慈善目的，确保多个团体可以同时受益。还可以对这种保障给与一个官方分类：NFT 是用于全球贫困救助的、科学研究的、创意艺术的、当地新闻业、开源软件开发的、给边缘社区赋权的、还是其他？
2. 我们可以与社交平台合作，把 NFT 持有情况加入到个人资料里，使买家可以展示他们相信的价值——他们不只是说，还付出他们辛苦赚来的钱。这可以与第一点相结合，使用户更偏向于有社会价值的 NFT。

肯定还有更多的想法，但这肯定是值得投入更多积极协调工作与想法的领域。

&lt;br/&gt;

# 总结

- **认受性 (高层次的接受度) 是非常强大的**。需要[协调](https://vitalik.ca/general/2020/09/11/coordination.html)的地方都会出现认受性，特别在互联网，协调无处不在。

- 认受性的产生有很多方式：**强力、连续性、公平性、程序、绩效和参与**都是重要来源。

- 加密货币很强大因为它让我们通过集体经济意愿聚集大量资本，且这些资金从一开始就不受任何人控制。更准确地说，**这些资金是直接由认受性直接控制的**。

- 在开始做公共物品时就在基础层印发代币是非常高风险的。但是，所幸以太坊有一个非常丰富的**应用层生态**，使我们有更多的灵活性。部分原因是有机会不只是影响现有的项目，还可以影响未来的新项目。

- **社区里支持公共物品的应用层项目应该得到社区的支持**，这件事很重要。DAI的例子展现了这样的支持真的有用！

- 以太坊生态重视机制设计和在社会层的创新。**以太坊生态本身的公共物品资助问题是一个着手的好地方！**

- 但这远超出以太坊本身。NFT 是认受性吸引大量资金的一个例子。NFT 产业对艺术家、慈善机构、和其他公共物品提供者来说可能是一个重大的福音，这种影响可能远超于我们这个世界的虚拟角落，**但这个结果不是一定会发生的，它依赖于积极的协调和支持。**

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊核心开发者会议更新001]]></title><description><![CDATA[本期分别总结了柏林、伦敦、上海升级的内容与计划]]></description><link>https://www.ethereum.cn/Technology/allcoredevs-update001</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/allcoredevs-update001</guid><pubDate>Tue, 30 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [AllCoreDevs Update](https://hackmd.io/@timbeiko/acd/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2FH1US36qzO)

&lt;br/&gt;

# 欢迎 👋🏻 

欢迎阅读 AllCoreDevs 系列第一期总结文章。

本系列文章旨在总结核心协议开发的进展，以便以太坊社区更好地理解与消化。“AllCoreDevs 更新” 系列可以说是“核心开发者会议视频&amp;文字记录” 以及[我的推特总结](https://twitter.com/TimBeiko/status/1372903072377184257)的姐妹篇。

希望我的总结可以将核心开发者们正在讨论的问题分享给以太坊社区更广泛的人群中，因此更多人可以了解以太坊社区正在发生什么；并对其进行反馈；甚至贡献自己的解决方案。

感谢阅读 😁

&lt;br/&gt;

# 摘要 👀


- 柏林硬分叉已在测试网中上线：是时候在测试网上开始应用和钱包的开发了！

- 伦敦硬分叉在准备阶段：EIP-1559 实现正在进行中，并且为了赶在 7 月或 8 月的最后期限前完成升级，升级的范围很窄。

- 上海硬分叉的升级重点仍在讨论中：要么就是核心开发者们将他们的精力都集中到 eth1-&gt;eth2 合并的工作中，要么就是当合并原型制作之后，部署那些呼声比较高的 EIP

&lt;br/&gt;

# 柏林升级


柏林升级内容已经在所有主要测试网部署，并且将在 4 月 14 日，区块高度 12,244,000 上线主网。此次升级将提高以太坊的安全性，并为伦敦升级中的 EIP-1559 部署做好准备。如果读者正在运行一个节点并且还没更新客户端版本，尽快去更新！至于客户端更新的版本，《[以太坊柏林升级公告](https://blog.ethereum.org/2021/03/08/ethereum-berlin-upgrade-announcement/)》内有公布。

在安全方面，访问以太坊状态的操作码的 gas 费与其计算成本相比价格过低了，而 [EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) 可以解决该问题。利用操作码 gas 费过低这一点，恶意参与者可以创建重复调用这些操作码的区块，而这些区块的处理速度比普通区块慢几个数量级。EIP-2929 通过提供 gas 成本约 3 倍来缓解这一问题。还有客户端方面，改进了数据库管理。比如 Geth 客户端的快照数据库格式也有助于更有效地处理状态访问较多的区块。

然而为了减轻 EIP-2929 对用户的负面影响，柏林升级引进了与其配套的 [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)。它允许用户在提交交易时指定一个“访问列表”，以使用低于 2929 规定的 gas 费。这其中 gas 费的计算方法有些复杂，但是，从高层次来看，如果客户端提前知道交易将涉及状态的哪一部分，他们就可以预加载，对这些访问收取更少的 gas 费。我鼓励大家参考这个 EIP 进行精确的计算。


对于想要体验生成“访问清单”功能的应用和钱包开发者，Geth 客户端很快就会上线相关的工具了🔜 可以点击这里查看开发进程：https://github.com/ethereum/go-ethereum/pull/22550 。更广泛地说，如果你是一名应用或钱包开发者，现在是时候在测试网上测试柏林升级的内容了！

关于 EIP-1559，柏林在两个方面提供帮助。首先，EIP-2929 解决了 EIP-1559 的最大风险：DoS 攻击会在比现在大两倍的区块上进行。这是[客户端开发者们反对 EIP-1559 的首个原因](https://ethereum-magicians.org/t/eip-1559-fee-market-change-for-eth-1-0-chain/2783/45?u=timbeiko)，并且每次在核心开发者会议中讨论 1559 时都会讨论到这个问题。换句话说，如果没有 2929，我们就不能稳妥地上线 1559。

第二，柏林通过 [EIP-2718](https://eips.ethereum.org/EIPS/eip-2718) 在协议级别引进了对多种交易类型的支持。EIP-2930 引进的“访问清单”创建功能需要一种新的交易类型，因此 EIP-2718 提供了一个全面的框架以支持多种交易类型。这意味着，在柏林中实现 2718 和 2930 允许客户端团队提前做架构基础工作，为支持 1559 类型的交易做好准备。

最后，大家对柏林升级还有一个忧虑，担心 EIP-2929 将提高 DeFi 交易的成本。然而 EIP-2930 的引进会抵消掉一部分 (并不会抵消全部)。防止这类型交易 gas 费提高的明显解决方案就是提高区块 gas limit。

不过，这样做总是有好有坏：提高区块容量会加速状态增长，这导致节点与网络同步更加困难。另一方面，不提高区块 gas limit 就会提高网络用户的交易成本 (支付昂贵的 gas 费)。或许这样是一个比较公正的折中方案：引入 2929 降低 DoS 的风险，然后缓慢地提高区块容量，直到 2929 所提高的 gas 费被逐渐抵消。

&lt;br/&gt;

#  伦敦升级

随着柏林硬分叉即将上线主网，核心开发者现正专注于下一个网络升级：伦敦。此次升级有点特殊，由于[难度炸弹](https://docs.ethhub.io/questions-about-ethereum/what-is-the-difficulty-bomb/)将发生在 8 月份，因此伦敦升级必须在这之前部署。也就是说，在前一个升级部署之前就要开始下一个升级 (伦敦) 的开发与更新，核心开发者们还是首次遇到这样的情况。

伦敦升级会于主网部署大家翘盼已久的 [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)。如果读者对该 EIP 比较陌生，我整理了一个[资源列表](https://hackmd.io/@timbeiko/1559-resources)，并且[将过去一年的开发过程文档化](https://hackmd.io/@timbeiko/1559-updates)。

(译者注：ECN 归档了 [1559 更新](https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU2NDcyOTc2NA==&amp;action=getalbum&amp;album_id=1551266061755482113&amp;scene=173&amp;from_msgid=2247487736&amp;from_itemidx=1&amp;count=3#wechat_redirect) 的译文)

光是这个 EIP 对以太坊带来的改变就比柏林升级所有 EIP 加起来要大。而且实现和测试时间都比以往升级的时间短，因此核心开发者正试图缩小伦敦升级的范围，以便按时完成。到目前为止，伦敦升级仅包括 EIP-1559 和 [EIP-3238](https://eips.ethereum.org/EIPS/eip-3238) (提议推迟难度炸弹至 2022 年第二季度)。等到 1559 的实现与测试结束之后，核心开发者们将处于一个更主动的位置，到那时再决定还要加哪些 EIP。

&lt;br/&gt;

#  上海升级


由于伦敦的升级范围被刻意缩小了，核心开发者们已经开始对上海升级进行高层次的规划。我们有以下两种主要的可能性：


首先，我们可以实现那些不可能在伦敦部署的 EIP，如:

- [EIP-3074](https://eips.ethereum.org/EIPS/eip-3074)：允许“资助交易”等
- [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537)：增加对 BLS-12381 曲线 (被信标链使用) 的支持
-  [EIP-2327](https://eips.ethereum.org/EIPS/eip-2327)：对 Solidity 和 Optimism 团队有益
- [EIP-2935](https://eips.ethereum.org/EIPS/eip-2935)：对轻客户端和无状态客户端有帮助


或者，社区越来越关注共识 (eth2) 与应用 (eth1) 层之间的合并，简单来说就是合并™️。Eth2 规范库里已经收录了“[简化合并规范](https://notes.ethereum.org/@vbuterin/B1mUf6DXO)”[提案的 PR](https://github.com/ethereum/eth2.0-specs/pull/2257)，并且非常接近于客户端团队应该能够制作的原型。

尽管合并规范可能比较简单，但为了能够让应用层的客户端能够将信标链作为它们的共识引擎，仍然有几个工程问题需要解决。让两边的客户端开发者关注这些问题是我们发现和解决问题的方式。

客户端团队仍需要更好地消化这些规范，并开始构建原型，然后他们才能决定我们是否已经准备好将所有的精力都转向合并工作上，或者在所有人参与之前是否需要一个小的工作小组来完成更多的工作。为了加速这一进程，来自应用和共识层的客户端将在 [Scaling Ethereum 黑客松](https://scaling.ethglobal.co/)期间开发最新规范的原型。


扩容以太坊黑客松活动的结束时间刚好与伦敦和 Altair 升级 (将在 6 月进行) 大部分工作完成的时间相吻合。这意味着原型应及时准备好，以便于我们做出关于上海升级的决定。🎉

------


以上是本期更新内容！下一期 AllCoreDevs 会议将在北京时间 4 月 2 日，星期五， 22:00 进行。下次见！

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/3/29]]></title><description><![CDATA[zkSync 2.0 路线图，Uniswap v3 细节公布。]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-29/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-29/</guid><pubDate>Mon, 29 Mar 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/0GKQXpY/cover.png)

# Eth2

**测试网 Prater 上线**

信标链第一次硬分叉 Altair 的测试网 Prater 于 3 月 23 日上线，此次测试网的容量是信标链主网的两倍——共 210,000 名验证者。

Prater Launchpad：https://prater.launchpad.ethereum.org/en/ 

四个客户端已支持，一般用户也可以参与测试。

![prater](https://i.ibb.co/Kx9jVyp/prater-data.png)

&lt;center&gt;https://prater.beaconcha.in/ 上的数据&lt;/center&gt;

关于测试网 Pyrmont 和 Prater 的安排，核心开发者 Protolambda 表示两个测试网会维持一段时间， Pyrmont 用于以主网容量测试 Altair 硬分叉，同时在 Prater 增大验证者容量以对客户端进行压力测试，让用户按照自己的情况从 Pyrmont 转移到 Prater。

来源：https://twitter.com/protolambda/status/1374411395194712079?s=20

&lt;br/&gt;

**关于轻客户端同步委员会**

信标链硬分叉 Altair 中的一个重要新功能是&quot;轻客户端同步委员会&quot;。核心开发者 Lakshman Sankar 在推特上表示，此委员会里的验证者会定期得到激励，把区块头的信息提供给轻客户端。

现在你可以用以下的验证逻辑、以一个 eth1智能合约的方式来构建一个信标链轻客户端。
链接：https://github.com/ethereum/eth2.0-specs/blob/dev/specs/altair/sync-protocol.md#validate_light_client_update

当该智能合约轻客户端构建出来了，你可以在 eth1 构建一个智能合约系统给信标链上的验证者提供激励，以把一些特定数据打包到信标链区块里。

详情可关注 Vitalik 在 Ethereum Research 论坛里发布的 &quot;A fee market contract for eth2 shards in eth&quot;。https://ethresear.ch/t/a-fee-market-contract-for-eth2-shards-in-eth1/8124

来源：https://twitter.com/lakshmansankar/status/1374830379941601281?s=20

&lt;br/&gt;

**Lighthouse 完成了第一笔 Eth1 与 Eth2 合并的交易**

Sigma Prima 于 3 月 25 日发推宣布 Lighthouse 完成了一笔仅由权益证明验证者实现的以太坊交易。向以太坊减少 99.98% 的能源消耗迈进一步。这是令人激动的消息，但这不意味着已到达产品阶段。这只是一个原型，目前还有很多问题需要回答与解决。

这个原型使用的是 Geth 一个名为 &quot;Catalyst&quot; 的分叉，由核心开发者 Guillaume Ballet 运维。Lighthouse 与 Geth 通过 RPC 来通信，其中 Lighthouse 负责权益证明，Geth 负责管理账户状态。

来源 ：https://twitter.com/sigp_io/status/1374979655782989824?s=20

![Lighthouse](https://i.ibb.co/Ws4BmJx/lighthouse.jpg)

**Pyrmont 测试网个人质押视频教程**

Ethstaker 社区根据开发者 [@SomerEsat](https://twitter.com/SomerEsat) 撰写的个人质押教程制作了视频版，四个客户端的教程都已制作完毕，提供更加直观的教程体验。

链接：https://www.youtube.com/playlist?list=PLOB9GGXGcc32Qv0wfPcPAtG5W7FS3VzLn

可结合 ECN 翻译的中文文字版教程来看： 

&lt;br/&gt;

# Eth1

**Rinkeby 测试网已完成柏林升级**

Rinkeby 测试网于 3 月 24 日实现柏林升级，Péter Szilágyi 当天发推表示还有2/3的节点没有升级，并提醒下一步就是主网升级了。

&lt;br/&gt;

**EIP-3074 要推吗**

鉴于最近几期 AllCoreDev 的讨论结果都指向伦敦升级要尽量集中在 EIP-1559 (因为本身内容已经很多)，以及伦敦升级后主要讨论合并的事宜，研究员@lightclient 最近在推特上呼吁大家支持把 EIP-3074 纳入伦敦升级，因为如果伦敦升级后集中合并的话，下一次改善钱包用户体验的机会将会是18个月以后。

（EIP-3074: AUTH and AUTHCALL opcodes 提议允许外部账户 (EOAs) 授权智能合约，在去信任的前提下实现发送批量交易、终止交易、取消交易、资助 gas 费等用户体验上的改善）

至于 EIP-3074 能否被纳入伦敦升级，Tim Beiko 表示不太可能，但也不是绝对。EIP-3074 在实现上难度不大，主要是伦敦升级的时间比较紧，难以评估。另外，他在新设的AllCoreDevs 更新系列文章里提到，或许可以把 EIP-3074 纳入到上海升级里。

&lt;br/&gt;

# Layer2

**Arbitrum Rollup 发布主网候选版本**

Offchain Labs 团队于 3 月 25 日公布 Arbitrum Rollup 的主网候选版本，这是 Arbitrum 的第四个测试网版本。此版本测试网：1) 包含 rollup 协议的简化版；2) 升级了节点软件的性能；3) 新增对 BLS 签名的支持 (旨在进一步减少我们在 L1 的 gas 消耗)；4) 升级了桥接，支持从 L1 到 L2 以及从 L2 到 L1 的合约调用。

测试网链接：https://testnet.arbitrum.io/ 

来源：https://medium.com/offchainlabs/arbitrum-updates-buckle-up-80483d71718c

&lt;br/&gt;

**zkSync 2.0 路线图更新**

zkSync 于 3 月 27 日公布了其 2.0 版本的路线图，将于 5 月推出 zkEVM 的测试网，于 8 月上线主网。zkSync 2.0 将带来基于 EVM 的编程模型和可组合性，从用户和开发者的角度来看，它实际上和 EVM 没什么不同：1) 用户可以保留自己现有的以太坊地址；2) 每个账户都有状态；3) 可以使用原子交易来互相调用合约。

&lt;br/&gt;

**Optimism 推迟主网上线时间，并将发布公共测试网**

Optimism 于 3 月 26 日公布主网上线的路线图，宣布延迟主网上线的时间 (预估上线时间为 7 月)。以便与社区更好地协调，保证 Optimism 的基础项目、基础设施提供商、区块浏览器、钱包、代币桥具有足够集成、审计和测试时间。然而在真正的主网上线之前，除了 Synthetix 之外，Optimism 会逐渐公布一些其他的合作项目。

除此之外，Optimism 还将于 4 月 20 日 在 “Scaling Ethereum” 黑客松上发布其公共测试网，欢迎大家参与：https://scaling.ethglobal.co/

来源：https://optimismpbc.medium.com/optimistically-cautious-767a898f90c8

&lt;br/&gt;

**应用 zkRollup 的扩容解决方案 Hermez 上线主网**

Hermez zkRollup 协议是一个无需许可的 Layer2 支付网络，3 月 24 日，Hermez 上线主网。用户现可以访问 Hermez 钱包界面：https://wallet.hermez.io/ ，开发者使用带有文档和 SDK 的 API，目前可实现的操作有：1) 创建账号；2) 存入资产；3) 发送交易；4) 提款。目前的版本仅支持这些代币的交易：ETH、USDT、DAI、wBTC、HEZ。

虽然 Hermez 是一个去中心化协议，但是在主网发布后的一段期间内，Hermez Network 将由 Boot Coordinantor 操作 (创建批交易、在 L2 处理交易、定期在 L1 上记录交易)。

来源：https://blog.hermez.io/hermez-network-mainnet-launch/

&lt;br/&gt;

**Layer2 互操作性解决方案 Hop 预估在 4 月上线主网**

Hop 协议允许用户快速并方便地在 Layer2 解决方案、侧链以及 Layer1 之间转移代币，为以太坊 Layer2 生态提供可组合性和互操作性。Hop Protocol 通过两种方式为 layer2 生态提供可扩展的代币桥：1) 创建特殊的中介资产 hToken (如，hETH、hDAI)，可快速且经济地从某个网络转到另一个网络；2) 使用自动做市商在 hTokens 和相应的 Layer2 资产之间转账

Hop 的合约目前正在审计中，将于 4 月上线主网。在初期，团队将专注于为 Optimism 到  Layer1 提供桥接，之后会逐渐支持其他扩容方案如 xDai、Polygon、Arbitrum。

来源：https://medium.com/hop-protocol/hop-send-tokens-across-rollups-30f14c432f7c

&lt;br/&gt;

**StarkWare 开启 B 轮融资，由 Paradigm 领投**

根据 The Block 的报道，以太坊 L2 扩容解决方案提供团队 StarkWare 在其 B 轮融资中将近达 7500 万美元。此轮融资由区块链投资公司 Paradigm 领投。报道中还透露，StarkWare 团队对 NFT 领域的扩容和安全技术十分感兴趣。

来源：https://www.theblockcrypto.com/post/99211/starkware-funding-round-ethereum-paradigm


&lt;br/&gt;


# DeFi

Uniswap 公布 V3 细节

3 月 24 日，去中心化交易所 Uniswap 公布了 V3 版本的改进与新增功能，并透露主网发布时间计划在 5 月 5 日，以及在那之后将集成 L2 解决方案 Optimism。

以下是 V3 的概述：

- 集中的流动性。流动性提供者在为某个池子提供流动性时自定义选择价格范围，将资金集中在大部分交易发生的价格区间上，从而提高资本效率。
- 范围订单 (Range Orders)。流动性提供者在自定义的价格范围内存入资产，这个价格范围可以是高于或低于目前的价格：如果市价达到 LPs 的定义价格范围，他们的某种资产就会逐渐地转移为另一种资产。
- NFT 化 LP Token。由于每个 LP 都可以自定义价格范围提供流动性，因此 LP Token 不再是 ERC 20 代币，而是非同质化代币，即 NFT。
- 多级费率。V3 为流动性提供者提供三种费率选择：0.05%、0.30%、1.00%，允许流动性提供者因承担不同程度的风险而获得适当补偿。
- 升级预言机。V2 版本使用的是时间加权平均价格 (time weighted average price，TWAP) 预言机，而升级后的预言机可以在单个链上调用中计算出过去 9 天内任意的 TWAP 价格。
- 改变协议许可。V3 将基于 BSL 1.1 (Business Source License 1.1) 发布，并使用至多两年，随后将改为 GPL2.0，Uniswap 社区治理可以投票加快 License 的转变，在那之前，不能对 Uniswawp  V3 的协议代码进行商用。

来源：https://uniswap.org/blog/uniswap-v3/

&lt;br/&gt;

# 生态

**治理新动态**

Tim Beiko 接任 AllCoreDev 主持人后这周推出两个优化治理的变动：

1）AllCoreDev 更新系列文章，详细记录会议重点内容

​     首篇更新：https://hackmd.io/@timbeiko/acd/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2FH1US36qzO

2）提议对 Ethereum Magicians 论坛的内容进行分类，以优化大家的使用，他提议有以下主要分类：

- EIP （增加分类ERC子分类）
- 原生汤 （考虑移除的内容）
- 社区会议
- 工作组
- 行动类

来源：https://ethereum-magicians.org/t/updating-ethereum-magicians-categories/5813

&lt;br/&gt;

**imToken 推出自定义网络**

imToken 推出自定义网络，集成以下新内容：

- 支持自定义网络的RPC，能快速切换到二层网络（Optimism、Arbitrum、Polygon)，以及xDai、BSC、Heco、TomoChain、ThunderCore、Fuse等
- 在一个DApp内实现支持 EIP3085，可以快速切换到二层网络
- 集成 CoinGecko API获得更多加密货币价格
- imKey更新：可以使用imKey 接收和转账 BCH 和 LTC
- 其他优化与修复

详情：https://medium.com/imtoken/connect-to-layer-2-and-many-more-custom-networks-on-the-new-imtoken-d44274446817

&lt;br/&gt;

**《时代》杂志的三期封面制成 NFT 拍卖**

《时代》杂志首次为其封面设计独一无二的NFT，此次选中三期封面，分别为 ”Is Fiat Dead?&quot;、“Is God Dead?&quot;、和”Is Truth Dead&quot;，反映了数字货币作为一种资产类别的崛起。同时，《时代》杂志的主席还表示会探索接受加密货币支付订阅的可能性。

来源：https://finance.yahoo.com/news/time-keith-grossman-outlines-nft-and-crypto-future-for-magazine-company-143938668.html

![TIME](https://i.ibb.co/Jd7RbGx/TIME.png)

&lt;br/&gt;

**Visa 宣布接受 USDC 作结算**

3 月 29 日，美国跨国金融服务公司 Visa 宣布把建在以太坊网络上的稳定币 USDC 作为其结算货币，并表示“今天的宣布标志着我们有能力解决金融科技公司以稳定币或加密货币管理其业务需求的一个重要里程碑，它实际上是我们日常工作的延伸，促进世界各地所有不同货币支付的安全进行。&quot;

来源 | https://news.bitcoin.com/payment-giant-visa-integrates-usdc-stablecoin-support-for-settlement/

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[无状态性的重要性]]></title><description><![CDATA[以太坊2.0为什么需要“无状态性”？]]></description><link>https://www.ethereum.cn/Eth1.x/why-stateless</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1.x/why-stateless</guid><pubDate>Sat, 27 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [dankradfeist.de](https://dankradfeist.de/)

&lt;br/&gt;

当前的以太坊1.0链最大的问题在于其状态大小。约为 10-100 GB (具体取决于其存储方式)，对于许多节点来说，将其保存在工作内存中是不切实际的，因此会选择慢速固定存储。然而，硬盘速度过慢难以与以太坊区块保持同步 (或是从创世区块开始同步)，因此必须使用更加昂贵的 SSD。这么说吧，当前的状态大小还不是最大的问题，而是状态的增长成本相对较低，并且会一直增长，即时我们提高状态增长的成本，也无法使状态占用者为网络实际受到的影响付费，而该影响是永恒存在的。


目前出现的解决方案主要围绕两个方向：


- 状态租金：为了使状态保持在活动内存中，持续进行付费
- 无状态性：区块保留所有的证明 (witness)，例如默克尔证明，因此在验证区块有效性的时候不再需要状态

在“无状态性”方向中，又有不同的概念值得探索：


- 部分无状态性：只需要对某些 (陈旧) 状态提供见证，减少验证区块所需的状态数量
- 弱无状态性：验证区块无需状态，但是提议区块需要完整状态


Vitalik 在这篇文章中提出了如何将这些概念梳理成一个通用的框架，并且表示了部分无状态性和状态租金非常相似，因为两者在对活跃状态进行修改时都需要进行某种形式的支付，以及一份重新激活陈旧状态的证明。


如果你是 Eth1 的用户，那么你可能觉得只保留 1 GB 或者甚至是 100 MB 的活跃状态的部分无状态性是一项巨大成就，那为什么还要这么费劲地实现完全的无状态性？我认为完整 (弱) 无状态性释放了巨大的潜能，而这是部分无状态性无法做到的，因此我们要竭尽全力实现完全无状态性。

&lt;br/&gt;

#  理解 Eth2 验证者

Eth1 在过去一直被诟病其对硬件的要求非常高，虽然这些斥责并不都是公平的 (经过挑选后的中等消费级硬件也可以运行 Eth1 节点)，但我们需要重视这些事实，尤其是希望在不损害去中心化的前提下对以太坊进行扩容。对于 Eth2 来说，我们树立了非常宏大的目标：能够在低成本的硬件上运行 Eth2 节点和验证者，甚至是树莓派或智能手机。


这条通向扩容性的路径并不轻松。其他项目 (例如 EOS 和 Solana) 则需要更高性能的硬件和网络连接。但我认为要保障去中心化，降低共识节点以及 P2P 节点的门槛是必要的。


在 Eth2 中，共识节点是验证者。Eth1 和 Eth2 的共识节点存在非常重要的区别：

- Eth1 的共识节点是矿工。要为区块链“投票”，你必须要生产区块。也就是说，共识节点和区块生产者是不可分割的。

- Eth2 或是当前的第一个阶段 (信标链) 中，提议区块和形成共识是两种不同的机制：每 12 秒由一个随机择出的验证者来提议区块，而共识是通过证明 (attestation) 形成的，每个验证者在每个 epoch (每 6.4 分钟) 对区块链进行投票。现在每几分钟都有超过十万的验证者在投票形成共识。区块生产者对共识 (几乎^[几乎没有影响，因为现在进行了细微优化以提高对某些平衡攻击 (balance attack) 的抵御能力，平衡攻击确实使提议者能对分叉选择产生短期影响。]) 没有影响，他们只能对区块内包含的内容进行选择^[确切地说，如果区块生产者开始勾结并审查大量证明，可能会产生影响，但是单个区块的生产者对共识造成的影响完全可以忽略不计。]。

解除区块提议者与共识的关联开启了一个重要的设计空间。信标链从验证者集中随机选择区块提议者，而对于分片链，则不必如此：

- 对于分片 (尤其是 Eth1 执行分片) 来说一种有趣的可能性在于，验证者能够进入生产区块的列表。这类验证者可能需要更高性能的硬件，可能也需要具有“完整”状态。

- 另一个可能性也是我们目前正在为数据分片加以实现的，任何人都可以被选中提议区块，但是区块的具体内容不由提议者决定，不同的参与者可以通过竞价使其打包的区块被提议。


在这两种情况中，弱状态验证意味着所有其他的验证者 (不生产区块或决定区块内容的验证者) 并不需要状态。这一点与 Eth1 截然不同：在 Eth1 中，对形成共识的节点 (即矿工) 的要求非常高，因此使他们保留完整状态似乎没有问题。但是在 Eth2 中，我们可能会大幅降低参与门槛，并且我们应该利用这一点来保障去中心化和安全性。

&lt;br/&gt;

#  提议者成本较高可以理解


还有一点重要的反对观点可能是，如果区块提议的成本过高，那么去中心化也会受到损害，即使我们降低了验证者和 P2P 节点的门槛。但事情并非如此，“提议者”和“验证者”之间存在重要的差异：

- 对于验证者，我们需要绝大多数是诚实的，即所质押的 ETH 中需要超过 2/3。P2P 节点的情况可能类似，但是就我所知并不需要一定比例的 P2P 节点必须是诚实的，但是为了确保总是能收到有效的链，每个人都需要连接至少一个诚实的 P2P 节点，这个比例大概是 5%，在实践中可能更高。
- 对于提议者，我们对于其是否诚实的要求低得多，与 Eth1 不同，Eth2 的提议者不审查过往的区块 (因为他们不投票)，只能决定他们所提议的区块的内容。假设你的交易不是特别紧迫，如果 95％ 的提议者尝试对其进行审查，那么第 20 个提议者仍然可以将其安全打包 (但是低延迟的抗审查制度是另一回事，在实践中更难实现)。


这也是为什么相较验证者，我并不那么担心提高提议者的硬件要求。如果我们保持正常验证者的要求较低，那么提议者需要 128GB RAM 的 PC 来存储大型状态也没有问题。我担心的是，如果一台能够满足这些要求的 PC 价格为 10 万美元，但如果我们将其控制在 5 千美元以下，一旦发现审查，如果社区没有迅速引入更多提议者来做出反应是不合理的。


最后，还有一些[其他的原因](https://www.notion.so/Why-it-s-so-important-to-go-stateless-b8819edf6e9d4f7bbc489633f5571231)导致区块提议者可能需要更好的硬件设备，并且在获取 MEV 时也更有优势。

此处我使用“提议者”来指代打包区块的角色，这与正式签名并验证的角色并不一定是一致的，在 rollups 中他们可能是“序列器” (sequencer)。简单起见，我在此处将其称作提议者，因为如果仅向系统中引入一个只负责提议区块的新角色，我认为系统不会因此受到根本上的破坏。

&lt;br/&gt;

# 实现无状态的裨益

本文至此我还没有论证过为什么无状态性如此有力，在可执行信标链提案中，将状态从 10 GB 缩减到 1 GB 或 100 MB 似乎能为验证者节省许多开销，那我们为什么还需要无状态性？

如果我们顺势走下去，可执行的 Eth1 区块可以成为一个分片。而在可执行信标链的提案中，所有的验证者都必须保持运行完整的 Eth1 执行 (否则会面临签署无效区块的风险)。而分片不应具备这一属性，分片中签署一个区块只需要一个委员会 (因此是验证者中的1/1024)，并且其他人不需要信任该委员会的绝大部分验证者是诚实的^[不诚实的委员会作恶可能会影响整个网络，并导致严重的延迟，但是引入无法无效/不可用的区块]，只要有一个诚实验证者在委员会尝试作恶时吹哨。而这只有在 Eth1 具备无状态性时才有可能：

- 我们希望所有验证者的负载大致相等，并且没有极端的峰值。 因此长时间 (例如一个小时或一天) 派遣某个验证者成为 Eth1 委员会成员，实际上是很糟糕的：这意味着就带宽要求而言，验证者的规模仍然必须能够与完整的 Eth1 链保持一致。 此外，如果长时间使用同样的委员会 (例如通过贿赂攻击)，委员会变得更具攻击性

- 我们希望能够简单地对 Eth1 区块给出欺诈证明，因为其他验证者将无法确定委员会是否正确完成了其工作。最简单的方式是区块成为其自身的欺诈证明：如果一个区块是无效的，广播区块本身就能证明发生欺诈。


因此在 Eth1 具备完整无状态性的前提下，Eth1 可以成为一个分片 (花费更少的资源来维护，例如1/100)。同时，只有这样我们才能在数据分片之外引入更多的执行分片。

&lt;br/&gt;

# 缓存不总是挺好的吗？

那么如果我们进入完全无状态却引入了 10 MB 的缓存呢？ 或是1 MB？即使只想检查一个区块，也可以轻松下载，因为你已被分配到一个委员会，或者作为欺诈证明收到了该缓存？

你可以执行此操作，但是我们可以明显看到，如果大多数验证者仅验证单个区块，则不太可能是最佳的。假设我们的目标是 1 MB 的区块，此外我们还有 1 MB 的缓存，这意味着每当验证者想要验证一个区块时，他们都必须下载 2 MB 的数据 (包括区块和缓存)。他们必须每次都下载缓存，除非他们下载所有区块以保持最新的缓存，这正是我们要避免的事情。

这意味着，以 1 MB 大小的区块和 1 MB 的缓存相同的代价，我们可以将缓存设置为 0 并允许区块大小增加到 2 MB。

很明显 2 MB 的区块至少与 1 MB 的区块 + 1 MB 的缓存一样有效。原因是，如果这是我们认为的最佳选择，那么 2 MB 的区块可能只包含 1 MB 的缓存，我们只需在每个区块上提交缓存，然后在下一个区块中重新引入完整的缓存即可。这可能不是区块中那 1 MB 的最佳用途，但是你可以这样做。额外的 1 MB 可以被更好地利用，以允许引入更多的见证 (witness)。

&lt;br/&gt;

# 二进制树还是verkle trie？

我认为总的来说，力争完整 (弱) 无状态性的声音压倒了部分无状态性或状态租金方案。这对用户的影响会更小：他们根本不必考虑状态。他们唯一要做的就是添加见证 (以便 P2P 网络能够验证有效交易)。创建见证的成本非常低，以至于可以想象到会有许多相关服务。 实际上大多数钱包已经依赖外部服务，不需要用户运行自己的节点。获取见证也只是一个微小的功能[4]。

部分无状态性或状态租金，在完全弱无状态性的道路中增加了极大的用户体验障碍。但考虑到仅使用二进制默克尔树尝试实现无状态是非常困难的，并且要允许默克尔树证明需要对 gas 进行改动 ，而这会损害用户体验^[想要自己运行节点的用户仍让能够借助外部服务来获取见证。这种操作是免信任的，因为在知道最近的状态根的前提下，见证就是它们自身的证明]。

因此在我看来，我们现在应该往 verkle tries 的方向努力。这使得我们可以具有小于 1 MB 的可管理的证明，并且只有由 [EIP-2929](https://eips.ethereum.org/EIPS/eip-2929) 提出的适度 gas 费用以及针对代码块收费。其缺点很容易得到控制，对用户几乎没有实际影响：

- 开发者需要学习新的密码学原语

- 添加更多非抗后量子密码学。第二点听起来很可怕，但是我们已经在 Eth2 中引入了 KZG 承诺以进行数据可用性采样，并且无论如何我们都在使用基于椭圆曲线的签名。需要对合并的 Eth1 和 Eth2 链进行一些后量子升级，目前没有可实践的后量子替代方案，因此我们不能停止前进。就采用而言，未来5年极为重要。摆在前面的道路就是竭尽所能，并在 5-10 年内，当 STARK 足够强大时，我们将对所有原语进行完全的后量子升级。

总的来说，verkle tries 可以解决接下来五年的状态问题。现在我们将能够实现完全 (弱) 无状态性，而对用户和智能合约开发者几乎没有影响。我们将能够提升 gas 上限 (因为验证变得更快) 和更多的执行分片，所有这些几乎都不会对安全性和去中心化产生影响。

最难啃的硬骨头是让每个人都理解 KZG 承诺和 verkle tries 的工作方式。由于 Eth2 将使用 KZG 承诺来保证数据的可用性，大多数以太坊开发者都需要进行相关工作。

&lt;br/&gt;

&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太坊 2.0 质押池 Rocket Pool FAQ (下)]]></title><description><![CDATA[Roket Pool 的两大角色：质押者与节点运行者]]></description><link>https://www.ethereum.cn/Eth2/rocket-pool/rocket-pool-101-faq-2</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/rocket-pool/rocket-pool-101-faq-2</guid><pubDate>Fri, 26 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Rocket Pool](https://medium.com/rocket-pool/rocket-pool-101-faq-ee683af10da9)

&lt;br/&gt;

# Rocket Pool — Staking

**最小质押值是多少？**

参与质押的最低值为 **0.01 ETH**。

**最大质押值是多少？**

无限

**质押周期多长？**

散户质押者一旦质押 ETH 就会收到 rETH 代币。用户可以出售、交易或者持有 rETH，直到 eth1-&gt;eth2 合并便可以凭借 rETH 换回 ETH 存款与奖励 (在这之前，用户也可以在二级市场交易 rETH)。

如果想要在 Rocket Pool 网络中运行一个节点，用户可以根据自己的意愿选择运行的时长。然而节点运行者的质押时间越长，获得的佣金就越多。

**在 Rocket Pool 质押需要花多少成本？**

Rocket Pool 网络中节点运行者获得的主要佣金是基于网络的容量变化的。因此，节点运行者的佣金和质押者的手续费可低可高，这取决于网络中有多少质押存款，网络规模的大小以及可用的智能节点有多少。

**如何保证我的资产是安全的？**

Rocket Pool 的智能合约负责存储和转移资金。出于信任的考虑，这些智能合约是开源的，所有人都可以研究与分析。

Rocket Pool 是一个由节点运行者组成的去中心化网络。用户的存款将被分配给节点运行者 (由他们来负责 PoS 网络的验证工作)。节点运行者被分到多少 ETH 就需要质押等量的 ETH——这意味着他们与质押者风险共担；其中的经济纽带会激励他们诚实地履行职责。

而对于网络的质押者来说，因个别节点没有诚实履行职责而产生的罚没以及其他惩罚所导致的损失都是社会化的。也就是说整个网络一起承担惩罚，而不是单个用户因运气不好其质押存款被分配到了一个作恶节点上，导致自身 100% 承担损失。同时，如果该作恶节点上的存款最终 &lt;32 ETH，但是&gt;16 ETH，那么证明这个节点经历了延长的故障时间。此时网络本身从该节点运行者原来的 16 ETH 获得了补偿，这进一步保护了质押者的存款。

所有 Rocket Pool 合约都是经过独立设计且[**可升级模式的**](https://medium.com/rocket-pool/upgradable-solidity-contract-design-54789205276d)。如果其中一个智能合约出现漏洞，便可以无缝替代它。

**存款如何产生奖励？利润是如何算的？**

以太坊 PoS 系统根据验证者 (节点运行者) 的存款分发奖励；这个奖励是由新发行的 ETH 货币来支付的。质押奖励取决于验证者存款的总额。对**质押奖励**的估算可参考该文章：https://docs.ethhub.io/ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#staking-rewards

**何为去中心化质押网络**

Rocket Pool 是由节点运行者组成的去中心化网络。每个节点运行者都是单独的实体，并且 拥有自身的服务器基础设施。这种异构网络对以下几方面很重要：

- *容错* — 故障仅影响少量节点

- *可扩展性* — 通过开放网络，让大量的节点可以满足质押要求

- *二次泄漏 (Quadratic Leaking)* — 这是一个用来描述信标链如何惩罚离线验证者的花哨术语。
  作为一个节点运行者，如果你同时和一大群节点运行者离线，你将受到更大的惩罚 —— 这一定程度上限制了中心化质押服务的发展。

**在合并之前我如何取回我的质押存款+奖励?**

散户质押者在 Rocket Pools 智能合约质押 ETH 即可获得 rETH 代币，并且奖励会随着时间的流逝而增加。但是用户不需要把**rETH** 代币锁在池子里，可以根据自己意愿交易、出售或持有。

而 Rocket Pool 网络节点运行者退出时将会收到 **nETH**，这代表着节点运行者在网络中的质押存款+奖励+佣金，并将以 1:1 的比率兑换出 ETH。也就是说，如果节点运行者质押 16 ETH 并在退出网络时收到了 18 nETH，那么 ta 在此期间赚得的奖励和佣金为 2 ETH。当 eth1-&gt;eth2 合并之后，nETH 代币就会直接由 ETH 代替。

等到合并之后 (那时可以在信标链上部署合约) 便可以用 rETH 和 nETH 兑换 ETH。而在这中间的过渡期，持有这两种 ERC20 代币的用户可以选择出售、交易或继续持有它们。

**Rocket Pool 的智能合约经过审计且开源吗？**

当然！在我们的智能合约于主网部署之前，它们会由第三方进行一个全面的审计。我们至今已经运行了几个公共的 beta 测试了，关于我们智能合约的更多细节请看我们的 github 库：https://github.com/rocket-pool/rocketpool

![node](https://i.ibb.co/yFG3Lmh/mini-pool.png)


Minipool 验证者合约包含 32 ETH；其中 16 ETH 来自散户质押者的存款，另外 16 ETH 是节点运行者的。

&lt;br/&gt;

# Rocket Pool — 节点运行者

**Rocket Pool 智能节点 vs solo 质押者**

作为一名节点运行者，具有以下几个优势：

- 只需要有16 ETH 就可以质押了 （而不是单独质押所需的 32 ETH)，因为 Rocket Pool 会把另外16 ETH 的份额分发给其他用户。节点运行者还可以多次在一个节点上质押 16 ETH。

- 节点运行者可在其运行的节点收益上通过收 Rocket Pool 质押用户的服务费来赚取额外收益。佣金的数额是变化的，并由你的节点收到存款时的网络容量来决定。如果网络需求量很大，并且你存入了 16  ETH，你会获得更高的佣金，因为你在最需要节点的时候出来帮忙了。

- 成为节点运行者只需质押 ETH，不需要付任何佣金

- 可以自己控制自己的节点

- 可以随时离场，届时节点运行者会收到 nETH 作为将来兑换 ETH 的凭证。



**运行 Rocket Pool 节点涉及什么?**

成为节点运行者将需要全天在线运行一个服务器，以履行 PoS 网络的验证职责。&lt;u&gt;我们会给大家提供安装包 (包含所有你需要开始运行节点的东西)，让大家可以快速且简单地设置好服务器。我们还会提供云提供商 devOp playbooks，让想要参与节点运行的用户可以在最普遍的云托管提供商如 AWS、Rackspace 中简单地完成安装。&lt;/u&gt;



**怎么用 RPL 代币？**


RPL 是主要的协议代币，如果你想要为网络提供额外的安全保证，你可以在 Rocket Pool 中质押 RPL。但它不是运行 Rocket Pool 网络智能节点的必要条件。

同时质押了 RPL 的节点运行者，由于其为网络提供了额外的安全保证，相应地，他们将从网络中获得与他们的保证金大小成比例的额外佣金。如果他们没有诚实履行责任，并且经过惩罚后存款 &lt;32 ETH，他们被罚没的 RPL 保证金与他们损失的 ETH 成正比例，因为他们未能给他们的节点提供额外的安全保证。

&lt;br/&gt;

# 集成dApps、企业等

**为什么我要为我的客户提供 PoS 服务？**

dApp 可以直接集成到 Rocket Pools 智能合约，以质押该 dApp 所持有的 ETH。质押后你们将立即收到 rETH (一笔代币化的质押存款)，并按照你们 dApp 的意愿去使用 rETH。也就是说，你们使用去中心化质押网络在去中心化 App 中质押了！

如果作为一个 SaaS (Staking as Service) 提供商想要最大化你们用户的的利润，那么就参与 Rocket Pool 网络吧！创建一些 Rocket Pool 智能节点，在网络中赚取一些质押奖励和额外的佣金吧.

你们钱包和 DEX 可以怎么参与呢？如果你们想给你们的用户一个机会质押 ETH，同时仍然使用你们的产品。只需编写一个合约，代表用户将 ETH 存入 Rocket Pool，然后立即获得 rETH 代币。这不就能提供质押服务了吗？

还有很多可能性，Rocket Pool 是一个基于质押网络的无需许可的智能合约，任何人都可以集成它！你们的用户甚至不需要知道你们是如何使用 Rocket Pool 的。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Finalized no. 24 以太坊共识层]]></title><description><![CDATA[Altair 升级的预发布已出炉, 增加了轻客户端支持等新功能]]></description><link>https://www.ethereum.cn/Eth2/finalized-no-24/</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/finalized-no-24/</guid><pubDate>Thu, 25 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Ehtereum Blog](https://blog.ethereum.org/2021/03/24/finalized-no-24/)

&lt;br/&gt;

# 要点速览


- Altair 的预发布： [Stargazer](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.1) 和 [多半是零星修补 （Half of ‘em just look like dots）](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.2)
- 安全性提案征求
- 合并进程

&lt;br/&gt;

# Altair 的预发布已出炉


在上周，信标链 Altair升级预发布的规范—— [Stargazer `v1.1.0-alpha.1`](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.1) 和 [多半是零星修补 (Half of ‘em just look like dots) `v1.1.0-alpha.2`](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.1.0-alpha.2) 已发布。它们是即将到来的信标链 Altair 升级的第一个功能完整版本，可以给工程团队更具体的内容去开展工作。

Altair 是信标链的一次升级，它加入了轻客户端支持、对激励的微小修补、每个验证者的怠工惩罚的单独核算、罚没严重程度的新参数、以及验证者奖励核算的清理，以简化状态管理。

除了这些功能， Altair 升级还包括一个给信标链和信标链客户端的“预热升级”。尽管以太坊的权益证明系统自创世以来就运行良好，但在进行高风险的合并之前，客户端团队想先通过实战升级来进一步测试，和完善它们的代码库与实时系统。

客户端团队正在集成这些预发布的修改并不断提供反馈。这个过程后，我们将推出一个完整版本，然后开启测试网阶段。

&lt;br/&gt;

# 安全性提案公开征求

上周，以太坊基金会发布了[安全性+测试的提案征求 (RfP)](https://notes.ethereum.org/@lsankar/security-rfp)。这是个公开的提案征求，旨在提高信标链的安全性、分析、以及测试。除了客户端的工程，还有很多工作要进行——在合并前检查、精进、夯实信标链系统，我们希望吸引到更多有不同专业背景的团队深入工作。

大家可以看看这份 RfP 的潜在领域重点，但如果发现难以把这些领域的内容归纳到一份精简的提案，可以随时发邮件到 rfp@ethereum.org，我们会给你一些指引。请提供一些你或你团队的技能和专业背景信息，结合一些基本方向，我们可以一起提炼出一份提案。

如果你了解到哪个团队或个人非常适合这份 RfP，请转给 ta 们看!

&lt;br/&gt;

# 合并进程

合并工作正在不断加快脚步🔥

你说的是什么合并啊？是以太坊的应用层 （当前由工作量证明系统支持）与以太坊的权益证明共识层（信标链）的合并。尽管信标链已经创世了，但现在它本身只是一个共识。而合并之后，信标链会成为支持所有 dapp、智能合约、还有你们今天使用的账户的基础。

在过去几周，我们一直不断完善合并的设计。请查看 Mikhail 最近发布的[规范PR](https://github.com/ethereum/eth2.0-specs/pull/2257)，里面有合并计划与结构的最新合成内容。我们希望这些底层设计可以尽快并入规范里，好让工程团队可以开始下一波的演示和测试网工作。

除了我们的异步研究、设计、和工程工作，我们还开启了每两周进行一次的会议，以增加多个团队间的合作。你可以在[Eth R&amp;D discord](https://discord.gg/qGpsxSA) 的#merge 频道跟进进程，欢迎积极参与！🚀

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊 2.0 质押池 Rocket Pool FAQ (上)]]></title><description><![CDATA[去中心化质押池 Rocket Pool 的工作原理]]></description><link>https://www.ethereum.cn/Eth2/rocket-pool-101-faq</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/rocket-pool-101-faq</guid><pubDate>Tue, 23 Mar 2021 00:00:00 GMT</pubDate><content:encoded>
来源 | [Rocket Pool](https://medium.com/rocket-pool/rocket-pool-101-faq-ee683af10da9)

&lt;br/&gt;

# Rocket Pool — 通识

**什么是权益证明 (PoS)？**

2020 年 12 月 1 日，ETH2 信标链创世，以太坊正式上线应用 PoS 共识协议的链。当前以太坊 ETH1 链使用的是工作量证明 (PoW)，读者们之前可能已经听说过了，因为比特币也是使用 PoW。在一个去中心化区块链中，这些共识协议帮助用户存储的状态保持一致，并且知道在链上以何种顺序处理了哪些交易。


以太坊将迁移至新的 PoS 链，它比 PoW 更快、更节能以及更加去中心化。在 PoS 中， 用户存入 ETH 并成为一名验证者节点，(全天) 在线以执行所需的验证。而作为回报，验证者会获得额外的 ETH 作为奖金。可以把这个过程看作是将财产存进银行然后获得一定的利息，不一样的是，验证者参与守护网络而获得奖励。

**Rocket Pool 是做什么的？**


Rocket Pool 作为一个去中心化质押基础设施服务提供商，允许用户、DApps 和企业通过在信标链质押他们所持有的 ETH 获取利润。Rocket Pool 智能合约是 Rocket Pool 网络的核心，将收到的质押存款分配给去中心化节点运行者 (为质押用户运行节点的人)。

&lt;br/&gt;

**为什么选择它？**

Rocket Pool 为个人、群体、企业等降低了参与以太坊 2.0 PoS 网络的门槛。


- 在信标链运行一个验证者节点至少需要 32 ETH。Rocket Pool 参与质押的最小值是 0.01 ETH。

- 在信标链质押还存在一定的技术门槛，需要用户了解如何与智能合约交互。Rocket Pool 将为用户处理所有与信标链的交互问题。

- 以太坊 2.0 分阶段推出。而在阶段 0 或阶段 1 早期推出意味着用户的质押存款将锁定至 eth1-&gt;eth2 合并之前。而一旦用户在 Rocket Pool 存入 ETH，就立即获得等值的 rETH 代币 (它作为代币化的质押存款，随着时间的推移奖励会增加，并且不需要被锁定在池中)。用户可以在任何时候对其进行交易、出售或持有，并且在合并之后可以凭借 rETH 换回质押的 ETH 和奖励。

- 信标链要求质押者在技术上非常熟练，能够全天在线地运行以太坊节点。而 Rocket Pool 拥有一个由许多独立的以太坊节点运行者组成的去中心化网络，为质押池的用户提供质押服务。

- 信标链会惩罚那些参与了质押却未能保持在线的节点。而 Rocket Pool 社会化其整个网络的惩罚与损失 (即池子内的参与者奖惩共担)，从而极大地减少了对单个质押者的影响。

- 一些用户可能具有自己运行节点的能力，但是不足够 32 ETH。如果他们加入 Rocket Pool  的以太坊节点去中心化网络，他们仅需要 16 ETH 就可以成为 solo staker。他们还能从网络中获得额外的收益，因为他们通过提供这样的服务，产生了比 solo staking 更加高的投资回报率。

&lt;br/&gt;

**它的工作原理是什么？**


&lt;br/&gt;

认真看了，接下来是最精华的部分！Rocket Pool 主要由三个元素组成：智能合约 (Smart Contracts)、智能节点网络 (Smart Node Network)、Minipool 验证者 (Minipool Validators)。

智能合约接收 ETH 质押存款，并将其分配至节点运行者中，发行+跟踪各种代币，并处理与信标链的交互。它们还可以检测网络中的智能节点是否出现了故障，然后自动禁用该节点 (不再接收任何新用户)，直到其被修复为止。


智能节点网络是由一群特殊的以太坊节点组成的去中心化网络，这些节点运行着我们的智能节点软件。它们具有定制的后台进程，因此可以与 Rocket Pool 的智能合约通信。而且同样重要的是，可以提供信标链所需的网络共识。

任何用户都可以免费参与其中运行智能节点，只要拥有 16 ETH。为 Rocket Pool 提供智能节点，除了通过质押自己的 ETH 所获得的奖励之外，用户还可以从网络中获得额外的奖励。

Minipools 验证者是另一种智能合约，但由于它是 Rocket Pool 的十分关键的部分，因此值得给它专门命名。这些智能合约由节点运行者创建。当节点运行者在他们的节点中存入 16 ETH 时，他们的 minipool 合约也从质押池的用户中收集 16 ETH。当这个合约收集够了 32 ETH，这笔资金就会被发送到信标链开启质押，同时就会在该节点创建一个新的验证者，该验证者节点将执行信标链的共识，让质押存款获得收益。

&lt;br/&gt;

![rocket](https://i.ibb.co/W3br3JG/rocket-pool.png)

正如图示所展现的工作流程：1) 智能合约收到用户的存款时，会将其随意分到 ETH 组块中，每个组块包含 16 ETH；2) 想要成为节点运行者的用户存入 16 ETH，等待智能合约将剩下的 16 ETH 分配到其节点中；3) minipool 智能合约收到 ETH 组块里面的存款，然后发送至 ETH1 存款合约中，并开始质押。

&lt;br/&gt;

**Rocket Pool 有哪些代币？**

Rocket Pool 协议代币 

RPL 是主要的协议代币，如果节点运行者想要为网络提供额外的安全保证，那么就可以在 Rocket Pool 节点中质押 RPL。RPL 不是运行智能节点和参与 Rocket Pool 网络质押的必要条件。


 Rocket Pool 质押代币 


用户一旦在 Rocket Pool 网络质押，就会立即收到 rETH 代币作为代币化的质押存款。用户在 Rocket Pool 网络获得的奖励会随着时间的增长而增加。


当智能合约能够在 ETH2 中启用时，Rocket Pool 就会部署一个智能合约，允许用户通过销毁 rETH 换回 ETH。

&lt;br/&gt;

**背后的团队？**


Rocket Pool 最初是在 2016 年末由 [David Rugendyke](https://medium.com/rocket-pool/rocket-pool-your-new-casper-friendly-ethereum-pos-pool-in-alpha-75709bd19936) 创建，他是一位拥有超过 18 年商业经验和计算科学背景的高级开发人员。


在 2017 年 5 月，Rocket Pool 发布了 alpha 版本。一个充满活力的社区开始形成，团队开始扩大。


在过去的 1-2 年里，Rocket Pool 运行了两个大型测试，有超过 5 万 的 ETH 测试币质押，数百名用户参与。


随着以太坊 2.0 网络的到来，Rocket Pool 正调整其平台，开始将其定义为去中心化质押网络。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太七日谈2021/3/22]]></title><description><![CDATA[合并不会在10月进行，zk.money上线]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-22/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-22/</guid><pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate><content:encoded>![cover18](https://i.ibb.co/ZdY3Lv8/cover18.png)

# ETH 2

**AllCoreDev 关于合并的讨论**

关于伦敦硬分叉后优先“合并”的提案，尽管看上去简单，其实需要 Eth1 客户端做非常大量的工作。会议提议伦敦后 Eth1 团队专注在合并工作上。如果决定了在伦敦后专注于合并工作，上海硬分叉必须要推迟了，因此合并**不会**在10月实现。

来源：https://twitter.com/TimBeiko/status/1372903072377184257?s=20

&lt;br/&gt;

**信标链安全性+测试的 RFP**

以太坊基金会为信标链的安全、即将发生的合并与信标链相关的测试参与宣布了提案征求 (Request for Proposal)。具体内容包括 eth2规范、四个客户端以及核心代码库里的代码。重点可能包括：实时网络分析、网络加载测试与模拟测试、客户端加载测试等。

提案提交截止日期为北京时间 2021 年 4 月 2 日 2：00 am，发送地址为 [rfp@ethereum.org](mailto:rfp@ethereum.org)。

详情：https://notes.ethereum.org/@lsankar/security-rfp

&lt;br/&gt;

**存在感不强的Lodestar在2021要跑出？**

ChainSafe 发表文章 A Lodestar for Eth2，介绍了Lodestar在 Eth2 做的工作，在2020的工作进展，以及在2021年的路线图。以下为文章概述：

Lodestar是一个用 Typescript 语言写的 Eth2 客户端，能丰富 Eth2 客户端的多样性。Lodestar 旨在成为易于使用的 Eth2 客户端。

Lodestar 的工作主要专注在两个部分：

1. 构建一个可组合的开发者工具与代码库生态。当所有这些工具与代码库都组合起来了，你就可以使用 Lodestar 客户端了。现在已经有20个代码库了，eth2 launchpad 和 MyEtherWallet使用的是Lodestar 的 BLS 库。
2. 使 Lodestar 作为轻客户端成为以太坊生态的一等公民。目标是把 Lodestar 构建为支持浏览器的轻客户端，插入到 Metamask 里，实现与服务器的连接完全可验证而无须中介，也就是说轻客户端具备全节点一样的安全性，但没有很高的存储要求，且在服务器高负荷活动的压力下也能与整条区块链同步。

2020年 Lodestar 去哪里了？

在2020年， Lodestar 完成了轻客户端的概念证明 (proof of concept)，且大部分的工作是围绕产品化信标全节点，因为需要全节点为轻客户端提供数据。Lodestar 没来得及参与三个测试网，但也得到开发者社区和其他客户端团队的帮助。另外，Lodestar 团队搭建了一些网站展示开发者工具，用作普及，工具包括BLS Keygen、Simple Serialize、和 Ethereum Name Record。

2021年的路线图

当前状态，轻客户端还无法保持与 Eth2 网络同步。因为同步需要下载和按顺序验证每个区块的数据，而这要求过多的数据和时间，因此把浏览器和移动端排除在外。信标链的第一次硬分叉 Altair 会增加同步委员会 (sync committe) 和一个轻客户端同步协议，这使得与区块链同步只需非常轻量的数据。Lodestar 就有了接触更多用户的独特优势。

目前轻客户端开发的两个重点：同步与证明请求/回应。

![lodestar](https://i.ibb.co/pynjv91/lodestar-roadmap.png)

&lt;center&gt; Lodestar 在2021年的路线图 &lt;/center&gt;

详情：https://medium.com/chainsafe-systems/a-lodestar-for-eth2-da9e1a1ea8f2

&lt;br/&gt;

# Eth1

柏林硬分叉测试过程中，客户端出现bug

柏林硬分叉已在测试网 Ropsten、Goerli 分别进行，接下来在测试网 Rinkeby 和以太坊主网推出。而在此次硬分叉测试里，Besu 客户端出现了 漏洞。由于 EIP-2537 已经被包含在 YOLO 网络中，但随后又从柏林硬分叉中移除，因此导致 Besu 出现了问题。请使用 Besu 客户端的用户尽快升级到 21.1.2 版本。

GitHub：https://github.com/hyperledger/besu/releases/tag/21.1.2

OpenEthereum 在 Ropsten 测试网也遇到了问题，它的 docker images 所使用的 rust 版本已经过时了并且存在一个旧的漏洞。目前以及更新了它的 rust 版本。

![berlin](https://i.ibb.co/r7mQY7X/eth1.jpg)

柏林硬分叉在各个测试网以及主网的上线时间和区块高度

来源：https://twitter.com/TimBeiko/status/1372953371573846021

&lt;br/&gt;


**以太坊开发者 Lakshman Sankar 解读状态大小管理**

以太坊”状态“由处理新交易所需的所有数据组成。这些数据包括：所有智能合约的应用状态和所有账户的余额。而每个节点都需要存储这些数据以验证区块链。

随着 NFT 和 DeFi 热潮爆发，数据大小正在以越来越快的速度增长，参考 etherscan 的数据：https://etherscan.io/chartsync/chaindefault 

如果继续这样下去，大多数用户将无法参与验证网络，这将违背去中心化的原则。

目前有一个双管齐下的办法来处理状态问题：

1. 状态逾时
2. 弱无状态性

1.首先，状态逾时是将数据库缓存方法社会化的经典方法。也就是说，如果某个状态块在某段时间没有被访问过，节点不需要再储存该状态。如果用户需要访问旧状态块，ta 必须提供”见证“或证据来证明该状态是有效的。

大家稍微想一下，这是否类似用户需要支付状态存储租金：因为用户需要自己存储他们提供有效性证明的数据，才能生成恢复数据状态的”见证“。如此一来，用户自己存储数据，而不是节点提供者。

2.然后是弱无状态性，即通过”轻客户端“解决问题。在弱无状态性的以太坊，只有区块提议者 (矿工、验证者) 需要存储所有状态。而对于其他验证状态的节点则不需要存储状态，他们只需要提供”见证“。

例如，要与一个非提议节点确定你自己的账户余额有笔资产，你必须向其提供你的账户状态的见证。

Vitalik Buterin 写了一篇文章介绍如何推进状态逾时和弱无状态性：https://hackmd.io/@vbuterin/state_expiry_paths

来源：https://twitter.com/lakshmansankar/status/1372645112644132864

&lt;br/&gt;

# EIP-1559

**AllCoreDev 对 EIP-1559的讨论**

3月19日的 AllCoreDev 会议对在伦敦硬分叉执行 EIP-1559 所需配合的其他 EIP 进行了讨论。（整理自 Tim 的推特）

![1559](https://i.ibb.co/qBsxwV4/1559-related-eips.jpg)

i. 关于 gas 退还的备选 eip:

  a. EIP-3298: 取消 gas 退还

  b. EIP-3300: 逐步取消 gas 退还

  c. EIP-3322：高效的 gas 储存

  d. EIP-3403：部分移除 gas 退还

ii. EIP-3198：`BASE FEE` 操作码

iii. EIP-3368：把区块奖励增加到3个 ETH，在两年内按计划逐步下调到 1 个 ETH

经过讨论，EIP-3298 被否决，核心开发者更偏向 EIP-3403，在某些情况允许他们不增加有效 gas 执行。

作为竞争提案，EIP-3322 获得更多支持。这份提议要对 gas 市场进行整体改革，这会产生很多交错反应，但大家都同意如果要纳入伦敦升级的话，这个提案涉及的内容太多了。值得注意的是执行 EIP-3403 不影响以后执行 3322。

关于 EIP-3403，有人提出存在安全风险，会议同意这些问题留待下一次会议讨论。

下一个是 EIP-3198，这份提议是关于随 1559 增加操作码 `BASE FEE`。尽管大家都同意它是有用的，但不同意一起加进伦敦升级，还是尽量保持伦敦升级简单且安全，3198 可以纳入下一次分叉。

EIP-3368 是由@BitsBeTrippin提出的，他首先指出他也不喜欢矿工最近呼吁针对以太坊进行“武力展示”，并对此造成的影响致歉。他解释道他认为只有当 ETH 的价格大幅下跌且网络哈希率随之下降时这份 EIP 才有需要用到。

因此，最后决定 EIP-3368 不会被纳入伦敦硬分叉，提议区块容量要有硬上限的 EIP-3382 也因相似的原因被否决了。同时有人提到矿工在管理 gas limit上一直做得很好，守护了网络健康。

&lt;br/&gt;

**Bitfly 宣布 Ethermine 的 MEV beta**

Bitfly 于3月18 日发推表示，为了补偿 EIP-1559 上线后减少的挖矿奖励，他们发布 MEV beta 计划。以下为计划内容的翻译：

80% 的MEV 收入会与挖矿收益一起分发出去。5% 会通过 Gitcoin 募款用以支持社区，剩下的部分会用于继续开发 MEV 策略。但总的来说，期待区块奖励会有 1-10%的增长。

关于 EIP-1559，我们反对 EIP-1559 是出于安全考虑。这些忧虑可以通过采纳 EIP-3368 得到缓解。无论结果如何 (EIP-1559 与 EIP-3368)，我们都不会支持或参与任何矿工发起损害网络的活动。 

通过 MEV 与 Layer2 的支出 (即将推出)，我们会尽力为矿工提供最好的挖矿环境。

我们是在同一条船上的！我们一起守护它的安全吧！

来源：https://twitter.com/etherchain_org/status/1372269004115566594?s=20

&lt;br/&gt;

**EIP-1559 后钱包设计讨论**

@RyanBerckmans 在推特上分享了 他设计的 EIP-1559 后钱包可能如何自动计算“费用上限 (fee cap)”   和 &quot;小费 (tip)&quot; 的概念图 （如下），像现在的钱包一样有快、平均、慢三个选项。

![design1](https://i.ibb.co/TPLKn9M/wallet-design1.png)

研究员[@barnabemonnot](https://twitter.com/barnabemonnot)对此设计的反馈如下：

这取决于发送者的偏好，但把费用上限设置得太接近基本费用的话就会失去了 1559 所具有的竞价浮动优势。我感觉大多数用户会选择预测性更强的交易费而不是小额价格间的不确定性。

此外，大多数时候你不需要出过高价格，只要可打包需求低于 25M 的 gas limit，1 gwei 的矿工费用就足够了。钱包可以通过监测交易等待队伍判断打包需求是否属于这种情况，然后建议更高的小费。

ENS开发者@nicksdjohnson 表示同意，但怀疑在峰期中监测和设更高小费是否真的有效，因为这时数据变得非常快。

根据[@barnabemonnot](https://twitter.com/barnabemonnot)的反馈，@RyanBerckmans 发了第二个版本：

![design2](https://i.ibb.co/w7HPtRm/wallet-design2.png)

@barnabemonnot 对第二版本的反馈是：

当需求不是过高时不需显示快/平均/快三种情况，大多数时候只需显示当前基本费用+1 gwei 的矿工费，然后让用户按“发送”或“不发送”。

(编者注：UX 提升是 EIP-1559 的一大亮点，这个讨论给出了比较具体的用户界面设计构思，加深对 EIP-1559 的理解或思考)

来源：https://twitter.com/RyanBerckmans/status/1373116045188345857?s=20

&lt;br/&gt;

# Layer 2

**二层隐私支付项目 zk.money 上线主网**

3 月 16 日，以太坊 L2 扩容解决方案 Aztec 2.0 版本上线主网，推出基于密码学技术 PLONK 的 L2 隐私支付项目 [zk.money](https://zk.money/) 

zk.money 旨在为用户提供隐私和扩容解决方案：

- 隐私：用户可以可以对其资产进行加密 (shield)、转账、解密。目前仅支持 zkETH 转账，接下来几周将添加其他三种 ERC-20 代币的转账，然而 2021 年年中，支持所有加密代币的转账。
- 扩容：每个 Rollup 汇总 112 笔交易 —— 这意味着用户通过平摊单个 rollup 证明的 gas 费 (再加上调用数据的额外费用)，来降低自身需要支付的 gas 费。
- 隐私 DeFi：Aztec3.0 将发布隐私智能合约语言 &quot;Noir&quot; (一种为隐私 DeFi 服务的语言)，将在 PLONK rollup 内实现可编程的隐私，并计划在 2022 年初允许工程师们在 Layer2 上执行他们的隐私合约。

来源：https://medium.com/aztec-protocol/launching-aztec-2-0-rollup-ac7db8012f4b

&lt;br/&gt;

**Layer2 解决方案整合与进展**

@RyanBerckmans 整合了以太坊各个 Layer2 扩容解决方案，并且持续更新它们的进展：

https://linktr.ee/EthereumL2s

&lt;br/&gt;

# DeFi

**Dune Analytics V2 版本上线**

以太坊数据分析平台 Dune Analytics 于 3 月 18 日 发布 V2 版本。新增的功能包括：

- 自动且可靠的数据查询和 dashboard 刷新
- 简单、顺滑的用户使用体验
- 整体应用速度提高

用户无需做任何事以换到更新版本，Dune 将无缝更新到 V2。

来源：https://duneanalytics.com/blog/dune-v2

&lt;br/&gt;

**MakerDAO 发起执行投票，提高最大借贷限额**

3 月 20 日，MakerDAO 在社区发起执行投票：

- 提高 ETH-A 的最大借贷限额，从 25 亿 DAI 提高至 150 亿 DAI；
- 提高 WBTC-A 的最大借贷限额，从 3.5 亿 DAI 提高至 7.5 亿 DAI；
- 所有 vault 的借贷下限参数将从 2000 DAI 提高至 5000 DAI (个别 valut 除外)。

详情：https://twitter.com/MakerDAO/status/1372979697517174785

&lt;br/&gt;

**USDC 市值超过 100 亿美元**

锚定美元的稳定币 USDC 发布了两年多的时间，市值不断增长。在去年的三月，其市值还低于 10 亿美元，目前已经超过 100 亿美元。

![USDC](https://i.ibb.co/8YFg345/usdc.png)

&lt;br/&gt;

# 生态

**MetaMask 更新**

MetaMask 钱包插件更新 v9.2.0 版本

其中主要升级包括：

1. 支持多种 Ledger 和 Trezor 的硬件钱包账户
2. 增加警告功能：
   - 向自己的合约地址发送代币
   - 自定义输入过高的 gas (price)

来源：https://twitter.com/bantg/status/1371586046627082242?s=20 

&lt;br/&gt;

**全世界最贵的“头发”**

在 Aave 的 NFT 平台 Aavegotchi 上，Aave 创始人 Stani Kulechov 的“头发”卖出了 70000 GHST，价值超过 10.7 万美元。

![stani](https://i.ibb.co/FnzvJK4/stani.jpg)

![stani2](https://i.ibb.co/P55hVtj/stani2.png)

来源：
https://twitter.com/StaniKulechov/status/1373304319420870658


&lt;br/&gt;

**Meitu 公司宣布购入比特币和以太坊**

3月7日晚间，美图公司在港交所发布公告称，集团于3月5日在公开市场交易中，购买了 1.5 万枚 ETH，以及 379 枚 BTC，这两种加密货币的总对价分别约为 2210 万美元和 1790 万美元，合计为 4000 万美元 (约合人民币 2.6 亿)。

来源：https://corp-static.meitu.com/corp-new/ENG.pdf


&lt;br/&gt;

**EthStaker 将举办第二次验证者工作坊**

ETH Staker 社区将于北京时间3月27日晚12点直播举办 ETH 2.0 验证者工作坊。将从裸机配置开始介绍如何运行一个以太坊2.0的验证者。对运行个人验证者感兴趣的小伙伴不妨关注一下。

YouTube 链接：https://www.youtube.com/watch?v=66-j84WTcoA

来源：Ethstaker validator workshop:https://ethstaker.cc/ethereum-2-0-validator-workshop-2/

&lt;br/&gt;

**Gitcoin R9 将于3月26日结束**

Gitcoin CLR 第九轮将于3月26日结束，其中单独设置了东亚地区板块，还没有对自己心仪的项目表示支持的朋友们现在还可以去体验一把丝滑的 zkSync 支付。

ECN on Gitcoin：https://gitcoin.co/grants/380/ethereumcn

&lt;br/&gt;

# 本期最佳meme

![meme](https://i.ibb.co/TP6YSS8/meme.png)

来源：https://twitter.com/thecryptwalker/status/1373749691548979204

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Layer2 入门指南]]></title><description><![CDATA[如何辨识 Layer2 解决方案]]></description><link>https://www.ethereum.cn/Technology/layer-2-for-beginners</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/layer-2-for-beginners</guid><pubDate>Sun, 21 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Gourmet Crypto](https://gourmetcrypto.substack.com/p/layer-2-for-beginners)

&lt;br/&gt;

随着牛市的到来，铺天盖地的虚假消息让观众眼花缭乱。本文旨在向初学者解释何为 Layer2，因此难免会牺牲一定的完整性和严密性，让读者在基础的水平上更好地理解文章。


通常，Layer1 链具有更高的安全性和流动性，而 Layer2 是一条想要从 L1 中获取安全性和流动性的新链。


我举一个简单的例子来向那些初学者解释这意味着什么，尤其是那些刚加入加密世界的小伙伴们

现在你在以太坊区块链上持有 100 Dai，这是你的 Metamask 钱包告诉你的。但是 Metamask 是如何知道的？它通过一个以太坊节点服务提供商 [Infura](https://infura.io/) 来与以太坊 p2p 网络通信。但持有 100 Dai 究竟是什么意思？Dai 合约是由一个代码和数据组成的软件，存在于以太坊区块链上，它拥有你在 Metamask 上看到的地址，旁边是数字 100。


回到我们刚刚说的新链，它可能是也可能不是 L2 链，我们姑且称之为 Macau。你想要将 100 Dai 从以太坊转到 Macau，因为你想在那里买东西，或者以更便宜的 gas 费进行交易。


那你要怎样将资产转到 Macau 呢？显然你给 Vitalik 的主节点总部发了封邮件并叫他转过去。开玩笑的...实际上，你发给了以太坊区块链的另一个合约，通常被称为“存款”合约 (把它想象成赌场的存款窗口)



&gt; 第一步：你发送 100 Dai 至 Macau 部署在以太坊上的存款合约。


Macau 链上的验证者/矿工可以看到你的存款，因为他们一直都在监测以太坊区块链，尤其是存款合约，然后他对你说：”欢迎伙计！很高兴你加入我们，给你 100 个合成 Dai，可以在我们的链上使用，我刚在最新的 Macau 区块上挖的“。

&gt; 第二步：你在 Macau 收到的 100 票值的借据，作为你在以太坊存款合约上锁了 100 Dai 的凭借。我们将这些票据称为合成 Dai，或者简称为 sDai。


你在 Macau 链实际上意味着你在一些网站上，其中有一些与 Macau p2p 网络通信的 Javascript。就像你在以太坊网络上时，去 Aave 网站借钱或者去 Uniswap 网站进行交易： 这些前端的 Javascript 为你打包借贷或 swap 交易，喂价给 Metamask，然后点击确认对你的交易签名，并将之广播至网络。大家对该流程应该不陌生。



在 Macau 链也是一样的。事实上如果 Macau 是以太坊的一条分叉链 (如币安的智能链 🤢或者 Avalanche 的 C-Chain🤮)，它与以太坊上的流程是完全一样的。因为用户可以在两条链上使用 Metamask，不需要专门的钱包来签名批量交易 (因为 BSC 上的地址格式和加密签名方案和以太坊上的是一样的)


&gt; 第三步：在 Macau 上使用 100 sDai 来进行交易、挖矿、投资等



假设你玩扑克，你赚了 100 sDai。多出的 100 sDai 是从其他 Macau 链上的玩家中获取的。

&lt;br/&gt;

**下面我们来到了关键的一步👏：**

&lt;br/&gt;

你想要将你的资产提出至以太坊中，因为你更加看重高安全性和足够的流动性。如果你可以在任何时间任何地点，并且只能从 Macau 的存款合约 (部署在以太坊区块链上) 中提出 200 Dai，那么就可以把 Macau 称为 L2 了 🥳🎉🍾


如果 Macau 的验证者理论上可以阻止你提出 200 Dai，或者直接被盗取 (提给其他人了)，那么这就不是 L2，而是侧链了🤮。


如果你可以理论上提出的资金超过你应有的额度如 300 Dai，那么 Macau 也不是 L2.


&gt; 当谈到扩容方案，总是可以归结到一个问题”谁控制了出口？“


**那么如何才能让以太坊上的存款合约变得足够智能，以防止 Macau 的用户/矿工/验证者/操作者作弊呢？**


可以想象这不是件容易的事，这需要合约足够智能 (记录了 Macau 上谁在什么时间借了谁一笔钱)：如果用户一小时前真的在 Macau 的扑克游戏赢了 100 sDai，ta 就被赋予了在以太坊上提现真正的 100 Dai 的权利，然而 ta 也可能在那之后在接下来的游戏中输掉这笔钱。因此存款合约必须能够记录真实的真相，以及 Macau 最近的状态。


早期的解决方案如状态通道和 plasma 试图做到这一点：将欺诈信号和纠纷解决的逻辑编码到 L1 的存款/取款合约中。然而，它们都给用户带来的很大的负担，例如：

- 用户必须一直“在线”监测以太坊上的 L1 合约，以挑战/防止/惩罚那些威胁到其财产的恶意提款意图。

- 用户必须储存提出争议所需的数据。在状态通道中，这种数据通常是对手方证明状态改变所作的签名 (如，“Alice: 我证明支付了 10 Dai 给 Bob”，或者“Charlie: 我证明在配置为 X 的棋盘上将象棋移动到  位置 H5”

- 特定于 plasma 来说：用户容易受到这两个方面的影响 (a) 所需要储存的数据极大地增加，因为用户感兴趣的数据是 plasma 链全局状态的一部分，而不仅是状态通道对手方的数据。 (b) 由 plasma 运营者 (区块提议者) 发起的数据扣留攻击，即某运营者试图恶意提款，同时又扣留用户提出争议所需要的数据。这进一步加大 L1 上的提款安全逻辑的复杂性。

&lt;br/&gt;

**直到 rollup 出现，这些棘手的问题才真正得到解决：通过要求用户退出时所需的所有数据都可以在 L1 上可用。每当 L2 的状态更新时，rollup 运营者都会在 L1 上更新这些数据。因此，L2 执行和 L1 数据更新同步进行着。**

关于 rollup 的更多文章：

入门：https://gourmetcrypto.substack.com/p/optimistic-rollups-from-the-bottom

进阶：https://medium.com/matter-labs/optimistic-vs-zk-rollup-deep-dive-ea141e71e075

高阶 (zk-rollup)：https://ethresear.ch/t/on-chain-scaling-to-potentially-500-tx-sec-through-mass-tx-validation/3477

高阶 (optimistic rollup)：https://ethresear.ch/t/minimal-viable-merged-consensus/5617


在 rollups 中，通过数学 (ZKRU) 或加密经济保障 (ORU) 以确保所有参与者诚实参与。那么当 rollup 运营者消失或者滥发信息、审查用户或 (optimistic rollup) 实施欺诈时，用户就总是可以使用 L1 的数据来安全地取出他们的资金。这些数据都储存在 L1 上的 rollup 合约中，用户唯一需要信任的就是 L1 网络会诚实地执行这些合约 (这和其他 L1 合约的信任假设相同，如 MakerDao MCD 和 Aave 等)。



**注1：**

其他 L1 链如 NEAR、Polkadot 或 CosmosHub 实际上可能是相对于以太坊的 rollups，他们只需要遵循 rollup 的设计模式来构建一条桥，然后将需要的数据广播至以太坊，就像任何其他 rollup 一样。

**注2：**


而使用 ZK Rollup 方案时，由于它采用的是有效证明以证明 rollup 状态更新的正确性 (每一次更新都会在 L1 上验证这些证明)，根本不可能发生欺诈。然而，数据仍然必须发布在链上，如此以来，当 rollup 运营者消失时，用户可以使用 L1 上的数据直接向存款合约提交提款申请。



**注3：**

比特币可以有 Layer2 吗？

不行。比特币[缺乏编程基元](https://twitter.com/aliatiia_/status/1303856158579408896?s=20)和创建复杂的 L1 合约所需要的状态管道，从而可以管理争议和/或者验证有效证明[3]。当然你可能听说过使用一些比特币侧链“无需放弃你对代币的所有权”等说法，这很可能是[虚假营销](https://open.spotify.com/episode/0hWpcZOU8HgslAdaHufKow) (~02:35) that you can use so and so Bitcoin sidechain “without giving up control of your coins”, but that’s simply false advertising[4](https://gourmetcrypto.substack.com/p/layer-2-for-beginners#footnote-4)。


“那闪电网络呢？” 闪电网络只是理论上的 L2。实际上，大多数普通用户将很可能委托第三方来持续监测网络系统 (见上文对状态通道的讨论)，也就是说在实践上它并不是 L2。


&gt; Rollups 是唯一可以保证用户在睡觉时资金仍然安全的 layer-2 扩容解决方案，因为提款需求是在 L1 以太坊链的监测下进行的。



[![img](https://i.ibb.co/dPbcYwT/l.png)

表格中“优点”这一块，不同的颜色反映了问题的严重性 (如我们可以通过设计多大程度上解决这些问题)。比如，rollups 中数据存储需求的缺点很好解决 (Eth2 的推出以及诸如 LazyLedger 此类的数据可用性提供商)，并且在不牺牲去中心化的前提下 (因为数据是“冷的”)，也就是说，全节点不会执行它所存储的数据，并且磁盘空间成本又很低。

感谢阅读！👋

</content:encoded></item><item><title><![CDATA[白话解读 Optimism 的运行机制]]></title><description><![CDATA[Layer 2 解决方案 Optimism 将如何提高以太坊的吞吐量]]></description><link>https://www.ethereum.cn/Technology/how-optimism-works</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/how-optimism-works</guid><pubDate>Thu, 18 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [@0xRafi](https://twitter.com/0xRafi/status/1366864714664402947)

&lt;br/&gt;

此文整合自 @0xRafi 发的推特 thread。


1/ 由于 [@optimismPBC](https://twitter.com/optimismPBC) 团队发布了消息表示其主网上线时间将提前，我认为大家很有必要了解以太坊 Layer2 解决方案 Optimism 是什么、它是如何运作的、以及它会给以太坊带来什么。


2/ 大家之所以这么期待，是因为诸如 Optimism 此类的 L2 解决方案有助于：提高以太坊的吞吐量 (每秒交易处理量)；缩短交易打包等待时间 (确认一笔交易所需要的时间)；以及大大地降低 gas 费。而且是在不牺牲以太坊主网安全性的前提下进行扩容。

3/ 这就是真正的 Layer2 解决方案与 “单纯的侧链” 解决方案 ( 如 [@0xPolygon](https://twitter.com/0xPolygon) 或 [@xdaichain](https://twitter.com/xdaichain)) 的最大区别。侧链解方案有自己的共识机制和安全性，并且不能从以太坊 Layer1 的安全性中获益，而 Layer2 解决方案可以保持以太坊一层网络的安全性。

4/ 举个例子，如果我们使用 [@optimismPBC](https://twitter.com/optimismPBC)：当用户在以太坊主网 (或 Layer1) 上提交了一笔交易，交易数据会存储在 L1 上，但是智能合约计算的处理将在子链 (即 Layer2) 上进行，最后计算结果发回 Layer1 中。


5/ 由于计算过程是一笔交易中耗时最久、成本最高的部分，因此在 Layer2 处理计算大大地减少了 Layer1 的计算需求，从而提高网络的吞吐量并降低交易费。L1 仅接收交易数据，将其发送至 L2 中，然后再接收 L2 的计算结果

6/ Optimism 是一个比较“通用”的解决方案。任何 L1 上的 Solidity 智能合约 (也就是任意的 L1 app) 都可以在 Optimism 的 Layer2 上运行，且不需要构建额外的功能。

7/ 下图展示了 Optimistic Rollup 的工作方式，两个大方框分别是 Optimistic Rollup 合约 和 Optimistic 虚拟机 (OVM)。Rollup 为 L1 智能合约，负责接收交易数据，然后发送数据至 L2 中以及接收计算结果。但是有趣的部分发生在 L2 中。

[![execution](https://i.ibb.co/T2n5wGg/execution.png)



8/ 在 L2 上，交易会提交给一个 &quot;Sequencer&quot; 序列器 (可以说是 L2 上的矿工)。然后它会立即回应，生成一个已签名的收据以保证交易的执行和排序。然而，如果序列器作恶，没有正确地执行交易或者抢跑交易的话怎么办呢？

9/ 遇到这种情况时，用户可以向 L1 上的裁判合约提交那份已签名的收据，如果证实序列器没有正确履行其义务，那么 ta 就会被罚没 (即丢失其质押的资金)。所以 L2 可以说是一个小型的 PoS 系统。

10/ 但当遇到争议时，L1 上的裁判合约应能够像 L2 上一样进行计算，并获得完全相同的计算结果。这就需要运用到 OVM 了。

11/ OVM 可以说是 L1 上的 L2 适配器，确保 L1 以太坊虚拟机 (EVM) 就像在 L2 中处理 L2 的计算一样。这样做的目的是使得 L2 上的任何计算都可以在 L1 上得到验证 (如果需要的话)。这非常重要。

12/ &quot;Optimistic&quot; 乐观的由来是，我们假设所有在 L2 上进行的计算是正确的，直到有人提出争议。如果存在争议，L1 上的裁判会在以太坊网络上重新运行该计算并检查结果。

13/ 为了激励用户充当“瞭望塔”并验证计算结果，Optimism 是如此设置的：任何人如果发现不诚实行为且对之提出异议，都可以从作恶序列器 (Sequencer) 的罚金中获得部分奖励。即使用户自己没有验证自己所有的交易，其他用户也会帮忙验证。

14/ 最棒的一部分是，一旦足够多的以太坊 app 在 Optimism 的二层网络上运行，大多数用户将花大多数时间留在 L2 上，而不需要回到 L1 上 (除非出现争议需要解决，或者用户有提款需求)。

15/ 看到这里，也许读者会觉得这将使得以太坊 L1 无效。然而事实上，这将进一步扩展以太坊的生态系统，以太坊将可以支持新的、吞吐量更大的应用，而按照当前网络的容量这是无法实现的事情。

16/ Optimism 另一个很棒的点是，它具有“账户抽象”功能。也就是说，每个账户都是可以被改动的“合约”账户，因此可以实现各种交易条件，如多签或者其他 gas 支付方式。

17/ 那目前 Optimism 的应用情况如何？首先，Synthetix 现正在私人主网上运行 Optimism。一旦实现完成，[@synthetix_io](https://twitter.com/synthetix_io) 计划将其质押以及挖矿功能完全转移到 L2 上，然而将交易功能同时在 L1 和 L2 上保留

18/ [@Uniswap](https://twitter.com/Uniswap) 在 10 月 19 日使用 Optimistic Rollups 运行了一个游戏化的概念证明 (Unipig)，并且一旦 Optimism 上线主网，Uniswap 将会是他们的第一批用户。[@chainlink](https://twitter.com/chainlink) 也宣布了其将和 Optimism 合作，[@coinbase](https://twitter.com/coinbase) 钱包增加了对 Optimism 测试网的本地支持......

19/ [@compoundfinance](https://twitter.com/compoundfinance) 估计也会支持 Optimism (还没确定下来)，[@RariCapital](https://twitter.com/RariCapital) 也会在他们平台集成 Optimism。将来还会有很多项目加入，这将对以太坊网络速度和交易费带来意义重大的影响。

20/ 这对我们意味着什么：Synthetix 的测试显示，使用 Optimism 后，gas 费最多可以降低 143 倍，交易确认时间低至 200 毫秒；而 Unipig 测试显示，gas 费最多可以降低 100 倍，交易确认时间低至 169 毫秒。

21/ Optimistic Rollups 同样非常适合以太坊 2.0 的生态系统。因为以太坊 2.0 将首先推出数据扩容方案，其后再推出计算扩容方案。在初期，Rollup 将首先保证计算方面的可扩展性，并与以太坊 2.0 并存。

22/ Optimism 团队提出的最后一个很棒的想法是，使用 MEVA (即矿工可提取价值拍卖) 来选择序列器。Karl 在 [ethresear.ch](http://ethresear.ch) 发了篇文章《MEV 拍卖：通过拍卖交易顺序权来解决MEV问题》来解释这一内容：https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788

最后还有一些其他链接：

Optimistic Rollup 介绍：https://medium.com/plasma-group/ethereum-smart-contracts-in-l2-optimistic-rollup-2c1cef2ec537

@kelvinfichter 对 Optimism 的视频介绍：https://www.youtube.com/watch?v=eYeOW4ePgZE

Blockcrunch 播客，嘉宾 [@kevinjho](https://twitter.com/kevinjho_) ：https://blockcrunch.libsyn.com/is-plasma-dead-the-rise-of-optimistic-rollups-on-ethereum-kevin-ho-optimism-ep-97

Synthetix 宣布向 Optimism 迁移：https://t.co/5ImnwsRFPI?amp=1

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2进展更新（截至2021/3/13)]]></title><description><![CDATA[可执行信标链规范 (The Merge) 的草稿已发布]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-3-13</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-3-13</guid><pubDate>Wed, 17 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210313)

&lt;br/&gt;

Gitcoin grants [匹配第九轮](https://gitcoin.co/grants/)正进行中！即使是一份非常小额的捐赠也意义非凡，因为这意味着对项目的支持。获取许多小额的捐赠款比获得几笔大额的捐赠款要更有意义。

为了方便起见，我整理了一份[合集](https://gitcoin.co/grants/explorer/collections?collection_id=1746)以收集我在本轮中支持的项目。主要偏向小的 Eth2 生态项目，但也有其他我认为有价值的项目。欢迎大家前往 Gitcoin 支持[我的项目](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification)“以太坊 2.0 规范注释”😉


此外，除了本轮 Gitcoin 之外，以太坊基金会还推出了一个 Eth2 赏金活动&quot;Build Something That Improves Eth2&quot;，提供价值 [1 万 DAI](https://gitcoin.co/funding/details/?url=https://github.com/gitcoinco/skunkworks/issues/200) 的赏金。

&lt;br/&gt;

# 社论

有趣的是，溪流有时会汇成一条河，甚至洪流。本周社区主要讨论的事情就是在技术成熟的前提下尽快把以太坊转向PoS 。


在早期版本的 Eth2 路线图中，eth-&gt;eth2 合并会推出得比较晚，将作为阶段 2 的一部分或者在阶段 2 之后推出。随着时间的推移，社区中涌现了新的想法，Eth2 的研发情况不断演变，向 PoS 的过渡也逐渐向前发展。


目前有四条溪流汇聚成一股无法阻挡的洪水。

第一个是矿工反对 EIP-1559。人们或多或少会预料到矿工会反对那些将减少矿工挖矿奖励的措施，然而他们的一些反对方式[被认为](https://twitter.com/econoar/status/1370717171945414665)太过具有攻击性了。解决方案？加快向 PoS 过渡的进程，一劳永逸地解决该问题。


第二个是最近出现的：一些艺术界人士强烈反对 NFT 热潮所造成的巨大能量消耗。这些反对并[不完全](https://twitter.com/protolambda/status/1370544743726391298)是针对性的。但是，老实说，PoW 确实挺让人尴尬的。

第三，本周 [Eth2 规范库中](https://github.com/ethereum/eth2.0-specs/pull/2229)更新了一份提案，关于如何可靠地实行 eth1-&gt;eth2 合并。合并的实现离我们越来越近了！


紧接着，Vitalik 发布文章《通过修改分叉选择实现快速合并》，阐述了实现合并的最精简版本。通过这个方法可以实现快速合并，但是手段是快速且“肮脏”的 (因为使用 [RLP](https://eth.wiki/fundamentals/rlp), shudder) 污染了信标链)，但是后续的更新会解决这个问题。

以上，以太坊基金会研发团队[正忙于传达](https://www.reddit.com/r/ethereum/comments/lyj8on/why_the_merge_should_be_prioritized_over_data/gpt6gsp/?context=3)一些他们想要尽快[完成](https://twitter.com/drakefjustin/status/1370697825416327170)合并工作的信号。

我不喜欢 PoW。五年前我就被 PoS 这个概念所吸引了，并且在过去的三年中，我全身心地投入到推进 PoS 的工作中。对于合理且可行地加快向 PoS 过渡，我是完全赞同的。

然而，如果我的声音能够在这股热潮中被听到，我感觉需要提醒大家审慎。到目前为止，以太坊 2.0 工作的推进一直都没有受到治理问题的阻碍。因此我们能够快速地迭代和创新，从而取得了惊人的进步。那么最终的方向就是，将 Eth1 链上的所有资产 (加上 DeFi 的市值，已经有价值 2000 亿美元的 ETH) 合并到信标链中。

Eth2 开发者几乎没有参与过 Eth1 治理，这已经是众所周知的了。我担心以太坊治理问题会给以太坊带来巨大的冲击。


我们想一下，EIP-1559 被正式纳入硬分叉 (这是上周的事) 究竟花了多长时间，更别说被实现了。1559 的想法在 [2018 年中](https://ethresear.ch/t/first-and-second-price-auctions-and-improved-transaction-fee-markets/2410)首次被提出。Eth2 信标链从开始构思、设计、构建以及部署的整个过程，与推进 EIP-1559 至被纳入硬分叉是同时进行的。并且 1559 还不算技术上的重大改变。令人难以置信的一个事实是：2018 年整年以太坊协议层甚至没有进行任何一次升级。就个人而言，这不是我所乐意看到的。


如果我们真的赞同这些提案 —— 赞同数据分片、赞同[路线图](https://twitter.com/vitalikbuterin/status/1333922620857745408)的大部分内容、赞同技术债务是永远都可能存在的 —— 那么，我们就加快合并的速度吧。我不反对快速合并，但是，我们要擦亮双眼，充分意识到该举措的缺点。或者，我们可以先完成 Eth2 基础设施的搭建工作 (如分片)，如此一来，我们就可以无阻碍地、并有序地进行合并工作，只是代价是多等几个月。

&lt;br/&gt;

# 信标链


**公共服务公告**：质押者们！要升级你们的 Eth1 节点了！以太坊网络已经准备好执行[柏林升级](https://blog.ethereum.org/2021/03/08/ethereum-berlin-upgrade-announcement/)了。使用 Pyrmont 测试网的读者，请在 3 月 17 日升级你们的 Eth1 Goerli 节点。已经在主网信标链上质押的读者，请确保在 4 月 14 日前升级你们的 Eth1 节点。

最近的重大消息[可执行信标链](https://github.com/ethereum/eth2.0-specs/pull/2229)规范的草稿已经发布了，即 The Merge （合并）。我的同事 Mikhail Kalinin 在这件事上的领导工作非常出色：希望围绕合并的讨论和活动在未来几周能加快步伐。

合并本身不是Eth1的重复，也不是以太坊的一个扩容方案。但是，Dankrad Feist 提议了一种通过结合合并与扩大区块容量实现[有效扩容](https://ethresear.ch/t/commit-to-pre-state-instead-of-post-state-on-the-executable-beacon-chain/8802?u=benjaminion)(5-10倍) 的方法。

另一个重大消息是，我们的新验证者队列终于清空了！从信标链启动起，这条队列就一直是满的，这意味着新的质押者需要等待一段时间才能激活他们的质押者节点，有时候可能需要等上3周。每天激活的验证者数是900名，大概花了100天的时间把积攒的队列清空。直至发文，一共有 [110,057 名活跃验证者](https://beaconcha.in/)，现在队列人数为 0。

## 测试网

除了现存的 Pyrmont 测试网外，客户端开发者将搭建一个新的测试网。这个新测试网叫  [Prater](https://github.com/eth2-clients/eth2-testnets/pull/40)，并将在 3 月23 日 UTC 14：00 （北京时间 22：00）周二上线。它的容量会是主网的两倍，这样我们可以测试客户端性能的极限：创世时会有21万名验证者，它们主要由客户端团队和以太坊基金会来运行。暂时来说， [Pyrmont](https://pyrmont.beaconcha.in/) 还是测试质押设置的最佳地方。

## 工具


[Mousse 仿真器](https://ethereum-mousse.medium.com/mousse-an-ethereum-2-0-emulator-for-local-testing-of-eth2-applications-19af727519ce)的目标是在 Eth2 中承担 Ganache在 Eth1 中做的事。它可以模拟、与 Eth2 的数据分片交互，这对开发 rollup 非常有效。

推特上的 [Eth2 Rekt bot](https://twitter.com/eth2REKT/status/1366719553380765697) 机器人是用来追踪罚没事件的。没有罚没事件状态已持续了[36天](https://twitter.com/eth2REKT/status/1370781784028315650)。

我需要仔细看看这个，但 [valid8r](https://github.com/pondron/valid8r) 是”一个用于保护以太坊20验证者设置的、开源的命令行界面，有 Pondron LLC 来维护。“ 它可以用来检查时钟同步、网络端口、Eth1 客户端连接等。它可以成为质押者的诊断工具。

## Altair

Altair 是信标链协议第一次升级的名字，[由社区投票选出](https://github.com/ethereum/eth2.0-specs/issues/2218)。这次升级大概发生在年中（一切顺利的话应该是六月）。

这周的开发者会议花了很多时间[讨论 Altair](https://hackmd.io/@benjaminion/HkIXJsDmd#Altair)。实际上，我们拿走了一些东西。本来[计划](https://github.com/ethereum/eth2.0-specs/pull/2192)仅每64个 epoch 修改验证者记录，现在看来不是必须的，还是把东西维持简单更好。但把每个验证者的怠工惩罚改为单独计算这一点[保留](https://github.com/ethereum/eth2.0-specs/pull/2222)了。

同时，也有各种尝试寻找抵御 [balancing attack](https://ethresear.ch/t/a-balancing-attack-on-gasper-the-current-candidate-for-eth2s-beacon-chain/8079?u=benjaminion) (这就是我说的[想象一个球形奶牛攻击](https://hackmd.io/@benjaminion/wnie2_201018#Balancing-attack))的方法。[最新](https://github.com/ethereum/eth2.0-specs/pull/2197) 的版本已经在 Altair升级上被移除了，因为它可能会引入[比问题本身更严重的问题](https://github.com/ethereum/eth2.0-specs/pull/2197#issuecomment-783109619)。Eth2 团队将继续寻找有效的抵御方法，但这不是首要任务。

&lt;br/&gt;

# 释义性文章


Danny 的“ eth2更新速览”系列现在改名为 [Finalized no. 23](https://blog.ethereum.org/2021/03/11/finalized-no-23/)。我们会另外找一个时间谈 Eth2改版；对于这第一期的争论已经有很多了。顺便说一句，我被 Finalized 的&quot;z&quot;冒犯了。😁

Jacek Sieka 发了一系列特别有价值的推特：关于区块 601183 的信标链状态分析。为什么是这个区块呢？请看他的[推特](https://twitter.com/jcksie/status/1367443478976823299)！

我看到经常有人问这个问题：我的验证者做证明了，为什么我还是被罚款了。这是怎么发生的？[Beaconcha.in](http://beaconcha.in/) 知识库的[奖惩部分](https://kb.beaconcha.in/rewards-and-penalties)对这个问题有简要解释。

Rocket Pool 即将上线了。3 月14 日 EthStaker 举办的[Rocket Pool 问答游戏](https://www.youtube.com/watch?v=-YdBslzHGec)是快速了解这个协议的一个有趣途径。LogicBeach 也制作了 [Rocket Pool 视频解释](https://www.youtube.com/watch?v=uytfJlMfdyc)系列。

Eth2 里的分片计划很大一部分是关于数据可用性，我们正在研究的方法核心是实现数据恢复。我花了挺长时间来理解这些技术的，我以一个toy example写了一篇释义文章。欢迎阅读！

&lt;br/&gt;

#  媒体和其他资源


来自 Bison Trails 的 Elias Simon 已经开始了一个精彩的系列，与以太坊 2.0 客户端团队的开发者深入探讨。首先邀请的是 Prysmatic Labs 的  [Raul Jordan](https://bisontrails.co/eth2/raul-jordan/)，然后我代表 Teku 团队参加了他的[另一期](https://bisontrails.co/eth2/ben-edgington/)。和 Elias 探讨 Eth2 是一件十分愉快的事，他的工作非常出色，他将所有内容整合到了一篇文章中。期待接下来的版本！


EthStaker 的“[二月回顾](https://ethstaker.cc/ethstaker-community-february-in-review/)” — 总结了许多工作进展，也列出了更多的计划。


Raul Jordan 和 Paul Hauner 参加了一场由 [WeEth Staker 主办的 AMA 活动](https://twitter.com/EthereumCN/status/1369645203934515203)。这里是问答链接：https://forum.weeth.org/t/topic/81

来自 Coindesk 的 [Valid Points](https://www.coindesk.com/newsletter/valid-points) 系列的最新一期。上周，Coinbase。[本周](https://www.coindesk.com/ether-supply-hedge-against-inflation)主要是 EIP-1559 在 Eth2 的位置的讨论。

还有就是，我现在正式成为 Coindesk 的 [Mapping Out Eth 2.0](https://www.coindesk.com/podcasts/mapping-out-eth-2-0) 的主持人😊

[3 月 4 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/rabbit-hole-eth-2-ben-edgington)这一期简单地介绍了一下我自己

在 [3 月 11 日](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/ethereum-staking-code)这一期，我们谈了提款密钥更新和其他事情。希望这运行顺利 —— 这对于我来说是全新的挑战，如有不妥，请多包涵。Christine、Will 以及整个团队都非常专业。说得正式一点就是，我对 Coindesk 所取得的成就感到十分震惊。


不知道应该在哪里讨论 Ali Atiia 的这句话合适，但应该可以在这里提一下：“Vitalik Buterin 提出的’以 Rollup 为中心的路线图‘这一方案是很危险的”。Ali 的这条 [thread](https://twitter.com/aliatiia_/status/1369369197923475469) 挺有趣，值得一看。尽管我认同 Ali 列出的后果是有可能发生的，但我认为可能性很小。然而，如果我们最终因治理问题而导致系统完全瘫痪，那么最坏的结果还是有可能发生的。

&lt;br/&gt;

# 实现者会议

第 59 次会议在 3 月 11 日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/208)
- [会议视频](https://youtu.be/s017DQlsCCw?t=320) 
- 我的[速记](https://hackmd.io/@benjaminion/HkIXJsDmd)，Mamy 的[笔记](https://github.com/ethereum/eth2.0-pm/issues/208#issuecomment-796783191)，以及 Alex Stoke 的[实时推文](https://twitter.com/ralexstokes/status/1370027668960284677)。


进行了许多关于 Altair 升级和 Prater 测试网的讨论，大部分已经在上文中进行了讨论。

&lt;br/&gt;

# 活动预告

- UTC 时间 3 月 20 日 星期六 14:00：EthStaker [社区会议 #17](https://www.youtube.com/watch?v=tL8l7GGCpw0)：eth1- &gt;eth2 合并客户端：Catalyst
- UTC 时间 3 月 27 日 星期六 16:00：EthStaker [验证者研讨会](https://www.youtube.com/watch?v=66-j84WTcoA)，如何设置一个验证者节点。
- 4 月 9 日 到 5 月 14 日，由 ETHGlobal 主办的为期四周的&quot;[扩容以太坊](https://scaling.ethglobal.co/)&quot;黑客松。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/3/15]]></title><description><![CDATA[Gitcoin grant 9开始了，合并优先于数据分片]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-15/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-15/</guid><pubDate>Mon, 15 Mar 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/80k4NBY/cover2.png)

Gitcoin Grants 第 9 轮已开始，本轮捐赠时间为 2021 年 3 月 10 日 - 3 月 25 日。本轮分为五个板块 (基础设施、社区、DApp、NFT、东亚)，五个匹配池加起来价值 50 万美元。

此外，根据 @Ξwoki, Gitcoin Grants ShillBOT，截至 3 月 12 日为止，GR9 的捐赠中，使用 zkSync 进行支付的捐赠次数占 GR9 总捐赠次数的 52%。

ECN ：https://gitcoin.co/grants/380/ethereumcn

&lt;br/&gt;

# Eth2

**eth2 quick update 更名为 Finalized**

以太坊基金会博客里由 Danny Ryan 负责更新的 eth2 quick update 系列从第23期起改名为 Finalized 系列。在此篇更新里，Danny 对一些常用关键词进行了界定，并解释了“Finalized”的由来。

以下为编译：

&gt; Eth2 代表的是以太坊**共识层**上的一系列重要升级，以确保协议是安全、可持续、和可扩展的；而“ eth2 客户端” 是权益共识 (PoS) 共识的实现。
&gt;
&gt; 而在这个语境下，“ eth1&quot; 是指以太坊丰富的应用层，（升级到 PoS 后）”eth1 客户端“指的就是应用层上的软件。以太坊上的应用层现在是建在PoW共识算法上，但很快会搬到信标链上——PoS 共识机制现在已进入产品阶段，且由大约350万个 ETH 来确保安全性。
&gt;
&gt; 基于此，这系列博客已更名为 &quot;Finalized: the Ethereum consensus-layer (最终确定的：以太坊共识层)&quot;，并以此向PoS 共识层中最关键的功能 finality （最终确定性）致敬。

更新最后提醒质押者要把节点更新到与柏林升级兼容的版本，以及升级信标节点。

详情：https://blog.ethereum.org/2021/03/11/finalized-no-23/

&lt;br/&gt;

**合并的PR**

核心开发者Mikhail Kalinin 在Github 开了关于 Eth1 和 Eth2 合并工作进程 (WIP)的 PR &quot;The Merge #2229&quot;，上面有核心开发者与客户端开发者间的工作讨论。

其中列出的工作事项有：

- 使规范变得可执行
- 用有存根应用的数据运行现有的测试
- 增加含有应用数据的测试
- 当测试网 Altair 准备好了，再根据 Altair 调整

详情：https://github.com/ethereum/eth2.0-specs/pull/2229

&lt;br/&gt;

**合并呼声高涨**

reddit上 r/ethereum 社区的版主u/Always_Question 发文 《Why the Merge Should Be Prioritized Over Data Sharding (为什么合并应该优先于数据分片)，得到了社区的热烈反响。以下为文章的摘要：

背景：以太坊 2.0 路线图的不同阶段无须按顺序进行

倡议合并优先于数据分片的理由有四点：

- Optimistic rollup 和 ZK rollup 给我们争取了时间。当主要的 Dapp 迁移到二层时，以太坊的每秒吞吐量从10上升到1000，一层上的交易费压力会被大大缓解，而这些在未来几个月就能实现。这样能为数据分片争取1-2年的研发时间。
- 最近部分矿工表示会联合起来阻止 EIP-1559 的实施，而优先实现合并可能能够抵御矿工的攻击，因为合并会把 PoW 的矿工从网络分离出来。
- 合并会马上解锁 PoS 质押者的押金。
- 在技术上，合并没有数据分片那么复杂。合并的过程不应该操之过急，但也不应该延迟。先实现相对简单的合并能立刻给社区带来裨益，还能让社区更快把注意力放在技术上更为复杂的分片上。

详情：https://www.reddit.com/r/ethereum/comments/lyj8on/why_the_merge_should_be_prioritized_over_data/gpt6gsp/?context=3

此外，核心开发者 Justin Drake 发推表达了相同的看法，Vitalik 也发表了文章 《Quick merge via fork choice change （通过修改分叉选择实现快速合并）》，文中引荐的机制是 eth1的客户端需要与值得信任的信标节点进行通信，且必须修改它的分叉选择规则。

文章详情：https://notes.ethereum.org/m9IX3OkkTveXCCOSzGkUiw

![justin](https://i.ibb.co/7W5GZw3/justin-drake.png)

而 What&apos;s New in Eth2 的撰写者 Ben Edgington 在最新一期里也提醒社区需要谨慎，像1559 从2018年走到今天也是经过了很长的过程，现在急于一时的合并可能会遗留技术债。

&lt;br/&gt;

# Eth1

**Ropsten 柏林升级**

根据[@peter_szilagyi](https://twitter.com/peter_szilagyi)的推特，3月10日 测试网 Ropsten 进行柏林分叉后所有客户端都没有出现问题。如果你想对 Ropsten 进行充分测试并体验它的新功能，还可以参加赏金计划：[https://bounty.ethereum.org](https://t.co/iVjn0iL6qJ?amp=1)

&lt;br/&gt;

**EIP 治理新内容**

Ethereum Cat Herders 社区撰写了柏林升级 EIP 总览文章《 The Berlin Upgrade Ovrview》，文中除了介绍柏林升级所包含的EIP外，还介绍了 EIP 管理和治理的新内容。

首先，以太坊社区的志愿者，包括 EIP 编辑、作者、客户端开发者、Ethereum Cat Herders 还有其他社区成员共同成立了 EIPIP (EIP 改善程序小组)。Ethereum Cat Herders 还会做一个调查以了解以太坊客户端多样性的状态。同时，客户端开发者会继续研究不同的提案，以改善性能、安全性、以及为未来的升级做准备。你可以在下一次的”伦敦“升级里看到更多新功能。

文章详情：https://medium.com/ethereum-cat-herders/the-berlin-upgrade-overview-2f7ad710eb80

反馈入口：https://docs.google.com/forms/d/e/1FAIpQLScn943C4ljlSCFIF5y__vKKDSJoxg6uYdSzhEWqt6HAnpBEiQ/viewform

&lt;br/&gt;

**EIP-1559 再起风波**

 3 月 9 日，反对 EIP-1559 的矿工代表@BitsBeTrippin 表示将于 4 月 1 日联合其他矿工把算力转移到反对 EIP-1559 的矿池 Ethermine，进行51小时的 &quot;武力展示&quot; （并强调并非攻击），以回应以太坊核心开发者表达的观点：以尽可能少的费用保护以太坊网络的安全。

![51%](https://i.ibb.co/NnqF2mk/2.png)

3 月 13 日，在 Tim Beiko 的协助下，@BitsBeTrippin 提交了 EIP-3368，希望与 EIP-1559 一起推出，且@BitsBeTrippin将参加下周的AllCoreDev。

此份 EIP 的大意：

把区块奖励从现在的两个 ETH 改为 3 个，此后每 4,724,000 个区块逐渐减少，直到最后达到 1 个ETH，这个过程大概持续 2 年。

提出这份 EIP 的原因是在 EIP-1559 下挖矿收益急降可能会导致矿工急于把他们的算力卖给出愿意出高价的人。这样攻击者可以以相当小的成本对以太坊发起攻击。把区块奖励设成从足以抵消收益减少的部分逐渐减低到低于收益减少部分，可以避免引入长期通胀，同时分散个人矿工过渡时的算力。既增加了以太坊 PoW 链的安全，也给了矿工时间重新安排他们的硬件。

此 EIP 推出后，在推特和 Ethereum Magicians 论坛都激起很大反响，包括加快合并的呼声。

Ethereum Magicians 论坛：https://ethereum-magicians.org/t/eip-3368-block-reward-increase-w-decay-for-next-two-years/5550

&lt;br/&gt;

# Layer2

**加密钱包 Argent 准备与 zkSync 合作推出 L2 版本钱包**

Argent 与 zkSync 达成合作，在其推出升级版的 L1 钱包之后，计划在今年夏天推出基于 zk rollups 技术的二层钱包。据 Argent 介绍，其 Layer2 钱包将：1) 直接部署在 L2 上；2) 可以交易通用的代币；3) 质押 ETH 和稳定币赚取利益；4) 直接在 L2 上使用法币购买加密货币；5) 从任意的交易所或 L1 钱包转账至 L2 钱包；6) 自托管以及抗审查。

来源：https://twitter.com/bantg/status/1370397621928464384

&lt;br/&gt;

**MakerDAO 即将推出 Optimism 的快速提款方案**

MakerDAO 开发者在论坛宣布 Maker 即将推出 Optimism 的快速提款方案：代币化用户在 Optimism 的提款凭证，然后通过在 Maker Vault 中抵押该凭证而贷出 Dai，从而实现快速提款 (不需要等待 7 天的挑战期)。该方案会融入 AMM 模式，逐渐添加其他可提款代币。Maker DAO 表示将于 2021 年第三或第四季度上线该方案。

来源：https://forum.makerdao.com/t/announcing-the-optimism-dai-bridge-with-fast-withdrawals/6938




&lt;br/&gt;




# 生态

**Beeple 的作品以将近 7000 万美元的价格成功拍卖**

上周加密圈中最让人津津乐道的明星莫过于加密艺术家 Beeple，他的作品 ”First 5000 Days“ 由佳士得拍卖行以 6900 万美元的高价拍卖给 NFT 基金 Metapurse 的创始人 Metakovan，成为至今价格最高 NFT 作品。Beeple 从 2007 年 5 月开始至今每天创作一幅画，将所积累的 5000 幅画制作成 NFT 作品”Everdays: The First 5000 days“。

该消息一出，在传统媒体界也掀起了轩然大波，华尔街日报和纽约时报同时报道该事件。

![NYT](https://i.ibb.co/7ys9Ct0/51.png)

&lt;center&gt;cr：The New York Times&lt;/center&gt;



![华尔街](https://i.ibb.co/g4mSfps/beeple.png)

&lt;center&gt;cr：The Wall Street Journal&lt;/center&gt;

&lt;br/&gt;

**ETHGlobal 活动预告**

NFT HACK

时间：3月19日 - 3月21日

NFT 黑客松将创作者和工程师聚集在一起，以帮助将艺术家的作品制作成 NFT。参与 NFTHack 的人会获得一些专家、导师、创作者、赞助商以及其他社区成员的支持。全体社区成员可免费参与，活动将提供价值 10k+ 美元的奖品。用户可选择参与黑客松，或仅参加峰会。

申请方式：https://nft.ethglobal.co/

&lt;br/&gt;

Scaling Ethereum (扩容以太坊) 

时间：4月9日 - 5月14日

Scaling Ethereum 活动将举行为期四周的黑客松，还有几次为期一天的峰会。本场活动的主题主要为：合约的优化、协议的修改、layer2、ETH2.0、零知识等等。

申请方式：https://scaling.ethglobal.co/

&lt;br/&gt;

# 本期最佳meme

![meme](https://i.ibb.co/9ZVNBng/meme.png)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。


</content:encoded></item><item><title><![CDATA[WeEth Staker论坛AMA整理]]></title><description><![CDATA[Prysm 和 Lighthouse 开发者回答中国社区关于Eth2 和客户端的相关问题]]></description><link>https://www.ethereum.cn/Eth2/weeth-ama</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/weeth-ama</guid><pubDate>Fri, 12 Mar 2021 00:00:00 GMT</pubDate><content:encoded>整理翻译自 [WeEth.org](https://forum.weeth.org/t/topic/81)

&lt;br/&gt;

# Q:


此去年 12 月信标链创世以来，2.0 网络验证者节点从 16,384 增加到现在的 10+ 万。这让 eth2.0 成为最去中心化的 PoS 链 (PoS 链还有 Cardano、Polkadot 等)。我个人认为，以太坊将实现更加去中心化和更加扩容的目标。

以下是我的问题：

1. eth1&amp;eth2 研发的重点有哪些？有比较棘手的挑战需要解决吗？

2. 轻客户端、分片以及合并这三项工作目前的进展如何？

3. 你们觉得 PoS 链怎么样才算运行足够稳定及安全，并且能够进行完全的 eth1 迁移？



感谢你们回答社区的问题

### Raul:


有两个优先处理的重点工作：分片和 eth1-&gt;eth2 合并。至于数据分片，除了 p2p 网络的一些实现细节外，所有事情都已经解决了。至于 eth1-&gt;eth2 合并，现在有一份提案和规范正在进行中：https://github.com/ethereum/eth2.0-specs/pull/2229

我认为，从实现的角度来看，分片 p2p 网络比 eth1-&gt;eth2 合并更加复杂，目前很多研究都集中在这这方面上。


Eth1 合并需要以下前提：(1)验证者节点足够去中心化；(2)至少运行一年；(3)验证者参与率较稳定；(4)稳定的运行软件。

### Paul:

&gt; eth1&amp;eth2 研发的重点有哪些？有比较棘手的挑战需要解决吗？


我认为优先事项依次为：

1. 确保信标链 (阶段0) 稳定、安全地运行，并给予验证者们最大化的奖励。
2.  eth1-&gt;eth2 合并
3. 在 eth2 引入分片


(1) 的挑战挺明确的，就是简单的“方法—改善—新方法”的循环过程，直到我们达到一个十分稳定的运行状态。

(2) 的挑战也挺明确的，然而还是有一些与当前的 eth1 实现上的协作挑战 (他们非常友好，所以这应该不是问题)，并且计算一下社区对合并的投入，确保ch尽可能少的破环

至于 (3) 的挑战，仍有一些非常新的加密学/数学方面的问题需要实现，并且证明其是可稳定进行的。

还有其他值得关注的挑战，如我们要解决一个更加复杂的网络拓扑学问题。然而，我相信我们可以很好地克服这些挑战，eth2 开发者们都是非常棒的。

&gt; 轻客户端、分片以及合并这三项工作目前的进展如何？

- 轻客户端：我没有密切关注这个，但是知道规范正在撰写中。
- 分片：仍处于研究阶段，一些与加密学和网络相关的概念证明实现正在进行。
- 合并：2020 年年中就已经有了一些关于合并的概念证明。Vitalik 刚发布了文章《[通过分叉选择改变来实现快速合并](https://notes.ethereum.org/@vbuterin/B1mUf6DXO)》“Quick merge via fork choice change”，解释了实现合并的一个更快的方法。Lighthouse 还没开始这方面的开发，但是预估下个月就要开始了。个人来说，我已经迫不及待了！

&gt; 你们觉得 PoS 链怎么样才算运行足够稳定及安全，并且能够进行完全的 eth1 迁移？


我认为信标链目前运行十分稳定和安全。我不能准确地说从中可以得出什么结论，但如果信标链接下来几个月都能持续稳定运行，并且首次升级 Altiar 硬分叉能够顺利进行，那么我认为是时候可以合并了！

&lt;br/&gt;

# Q:

之前在 What’s New in Eth2 系列的某篇[更新](https://hackmd.io/@benjaminion/wnie2_210115) 中看到说，今年的目标是在第一季度撰写关于“数据分片、合并、轻客户端”这三项工作的规范，然后再决定实现与交付的先后顺序。请问一下，规范撰写工作现在完成度怎么样？Prysm 客户端和 Lighthouse 客户端有开始为合并做测试准备吗？

&lt;br/&gt;

### Raul:


现在有一份进行中的 eth1/eth2 合并规范 [[WIP](https://github.com/ethereum/eth2.0-specs/pull/2229) The Merge by mkalinin · Pull Request #2229 · ethereum/eth2.0-specs · GitHub。从实现的角度来看，（合并的）难度比分片小。分片亟待解决的最难部分在于 p2p networking，因为一个节点在分片型以太坊网络中需要具备处理许多重要问题的能力。Prysmatic Labs 已经围绕着分片展开了许多工作，我的一位同事 Terence Tsao 是目前分片规范的主要贡献者之一。我们还计划尽快开始合并相关的初步工作

&lt;br/&gt;

# Q:

信标链首次升级快要进行了，什么时候有公共测试网？


### Raul:


计划在未来几个月会完成这项工作，可能的话，将在初夏推出测试网。协作一个硬分叉是很难的，很快我们就会迎来 Eth2 的第一个硬分叉，因此所有团队都额外谨慎地对待这次硬分叉。

### Paul:


客户端会在这个月发布一个测试网，开始测试有更多质押者的情况。技术上来说或，这是个公共测试网，但我们不会一开始就鼓励用户去参与，因为我们想在无须担心用户机器崩溃问题的情况下进行一些强度较大的测试。

我们大概会在未来几个月内为即将发生的 Altair 硬分叉启动一个测试网。就我所知，目前还没有具体的计划。

&lt;br/&gt;

# Q:

以太坊1.0 和以太坊2.0 合并的技术难度有多大？现在进展到什么地步了？你觉得目前最大的困难在于什么？



### Raul:



我想关于 eth1 与 eth2 将如何合并现在已经有一个很明确的方向了，但在这方面，eth2 客户端目前还没开始非常深入的工作。今天Mikhail Kalinin 今天发了一份 eth1/eth2 合并规范 [[WIP\] The Merge by mkalinin · Pull Request #2229 · ethereum/eth2.0-specs · GitHub](https://github.com/ethereum/eth2.0-specs/pull/2229)。现在主要的困难在于我们现在专注于 eth2 的硬分叉、提高当前权益证明信标链主网的性能与安全性、以及使我们的软件对质押者更友好。在未来两个月，我们将开始把工作重心转移到 Prysm 的合并工作上。

&lt;br/&gt;

# Q:

如果ETH1和ETH2将走向合并，ETH1客户端们将何去何从…我们会有10个客户端吗？还是说ETH1客户端团队们就不干了？



### Raul:


好问题。合并后，你将需要运行一个 eth1 节点 (用作交易与 EVM )，和一个 eth2 节点 (用作信标链和权益证明共识)。它们可以打包在一起，在一个计算机上运行。至于要运行哪个客户端，那是由社区来决定，例如：go-ethereum + prysm、go-ethereum + lighthouse等。我不确定哪个会是最受欢迎的 eth1 客户端 + eth2 客户端组合，但 go-ethereum 是很强的 eth1 客户端。

&lt;br/&gt;

# Q:

Hi~虽然pow和pos是不同的机制，但对于客户端来说，eth1的客户端已经相对成熟了，请问你们在开发的时候有需要借鉴eth1 客户端的情况吗？是哪些方面？


### Paul:


Lighthouse 一开始的确是研究了 OpenEthereum 和 Substrate ，但我们最后并没有直接从它们身上拿很多东西。OE 在很久之前就被开发出来了，他们对 Rust 的使用比较过时。 Substrate 的使用则更简练和现代，但它们专注于灵活度，这是我们不需要的 (我们只想在一条特定区块链上运行，而不是多条区块链)。

我们与 Substrate 和其他项目共享一个网络代码库 (`rust-libp2p`)，因此我们的确在那里共享代码。

&lt;br/&gt;

# Q:

信标链验证者人数已经很久没有增长了，你觉得下一个可能促进数量增长的热点是什么？


### Raul:


我想 Coinbase 的质押服务和 Rocket Pool 上线后会有更多验证者去排队。

&lt;br/&gt;

# Q:

前几天说验证者队列为零，此事你们怎么看？



### Raul:


接下来很快就会有大型的 Staking 服务上线了：Coinbase 和 Rocket Pool。我觉得验证者队列不会空很久，今年会很多人对加入 eth 网络感兴趣的。

### Paul:


我个人来说觉得这样挺好的，因为更多的验证者意味着网络负载更大，我们就需要花更多心思来优化。这只是一个自私的想法！

我觉得目前的验证者节点数量已经非常可观了，能够满足我们对去中心化的需求。没有新的验证者排队也许是因为当下所有想要参加质押的用户已经进场了，这完全没有问题！我比较担心的是，出现重大的网络安全事件，或者强劲的竞争对手而失去一大部分的以太坊2.0验证者，但是这发生的机率很小。

&lt;br/&gt;

# Q:

我看客户端经常在更新小版本（尤其是Prysm，我关注你很久了，三天两头更新。。。） 更新主要提升了什么性能？相比最初的1.0版本，你们的性能更好了吗？提高了多少？

我不更新的话是不是就不会出错？除非发生硬分叉升级？因为我看新版本有时被发现有各种各样的bug，所以我总倾向于不去更新



### Raul:


从 v.1.0.0 升级到 1.x.0 是很重要的。它们包含了一些重要的安全和性能上的提升。1.0x 这样的小布丁，比如 1.32 到 1.3.3，就没那么重要。Prysm 的 v1.0.0 后的版本有很多升级，鉴于安全与性能问题，我们强烈推荐你们尽快升级。如果你担心新版本的漏洞，它们在下一版本肯定会被修复的，因此你可以在一个新版本出来后的一两周更新。

&lt;br/&gt;

# Q:

Prysm，你们是不是一旦重启进程就会自动更新最新版本？我明明不想升级，却总是被动升级。。。

### Raul:


如果你是使用 [prysm.sh](http://prysm.sh) 的话，是的。如果你倾向于手动升级的话，我们建议你下载并运行我们的二进制文档，你需要的版本在这里：[Releases · prysmaticlabs/prysm · GitHub](https://github.com/prysmaticlabs/prysm/releases)，例如，你应该下载beacon-chain-v1.3.3-linux-amd64 和 validator-v1.3.3-linux-amd64，运行那些二进制文档而不是  [prysm.sh](http://prysm.sh)。如果你不升级的话，你就会一直维持这个版本。

&lt;br/&gt;

# Q：

在中国我接触到的大部分人群都是用云服务器运行节点，少部分使用个人电脑；海外树莓派运行节点的情况怎么样，使用的人多吗？运行性能如何？


### Raul:


有些用树莓派的目前还ok，但这不代表你使用 Prysm 的话会有最佳体验。我们建议的最低配置是：

- 操作系统：4-bit Linux、Mac OS X 10.14+、Windows 64-bit
- 处理器：Intel Core i5–760 或 AMD FX-8100 或更好的
- 内存：8GB RAM
- 存储: 20GB可用的固态硬盘
- 网络: 宽带连接

&lt;br/&gt;

# Q：

中国质押者对客户端的一些建议 (收集自微信)

1. 改善Windows用户体验 (LH没有提供Windows)
2. Prysm资源管理不佳优待改进，有时会跑满偶尔时钟会漂移。
3. 希望客户端可以自带成为系统服务的能力，这样能减少人的干预，使得更多个人电脑及外圈用户加入验证人。
4. 现在大部分客户端对Windows和安卓支持不佳，支持多操作系统有利于去中心化。


### Raul:

这些反馈很棒，也是我们打算完善的内容。我们很看重 Windows系统，但还有很大的空间可以简化用户体验。

### Paul:

非常好的反馈，感谢[@Esther](https://forum.weeth.org/u/esther)。

&gt; 改善Windows用户体验


Lighthouse 目前只有通过 WSL 才支持 Windows 系统。我们当然会计划开发本地支持 Windows 系统，但它涉及的工作量特别大，我们目前还没有一名开发者可以负责这项工作。如果谁看到这里、有 Rust 开发经验的、且愿意帮忙接入 Windows 系统的，非常乐意收到你的信息。

&gt; 希望客户端可以自带成为系统服务的能力，这样能减少人的干预，使得更多个人电脑及外圈用户加入验证人。


我是用 `systemd`来管理我们的 Lighthouse 用例。我应该把这些脚本都写入我们的文档里。

&lt;br/&gt;

# Q:

你们有开发移动端的打算吗？

### Paul:



Nimbus 一直从事这方面的开发。我记得他们去年有在安卓上运行一个信标节点。我不确定它现在是不是产品级。

&lt;br/&gt;

# Q:



Hi，我是新手！我想质押 32 ETH 并成为 2.0 网络的一名验证者。我已经通过本地 eth1 节点在 goerli 测试网做了测试，并计划在主网上质押。Eth1 goerli 测试网同步速度很快，因为其网络数据负载很低。但是主网的巨大数据负载 (超过 800G) 是否会降低 eth1 和 eth2 节点之间的同步速度，导致验证失效？顺便说一下，我来自中国，我不确定是否可以保持一个稳定的网络连接。

### Raul:



同步 eth1 节点很困难，但是一旦完成了同步，运行 eth2 节点应该不会有很多问题。Eth1节点仅用于处理存款合约中的验证者存款。现在，Prysm 仍在使用 eth1 节点从创世存款的清单中“生成” eth2 创世状态。而在将来是不需要这样做的，因为我们将打包 eth2 创世状态到你实际运行的软件中。

如果你的 eth1 连接断开了，你仍可以创建证明。然而，你所生产的任何包含 eth1 存款的区块都会失效。

### Paul:


主网 eth1 的数据确实比 Goerli 测试网的大很多，但是从 eth1/eth2 通信的角度来看，它们几乎相同。


对于问题 (1)，我建议你先尝试仅运行一个主网 eth1 节点 (如 geth) 和一个主网 eth2 信标节点 (如 lighthouse)，然后观察其运行情况。如果运行良好并且有足够的 CPU 和 RAM，那么再添加几个验证者就不会有任何问题。如果要运行 16 个以上验证者节点，则请尝试使用 flag  `--subscribe-all-subnets` 和  `--import-all-attestations` 运行你的 Lighthouse 节点。这将模拟单个信标节点可以消耗的最大负载，如果你的硬件可以承载的话，这证明它非常不错。访问此条链接以查看关于这些 flags 的更多信息：https://lighthouse-book.sigmaprime.io/redundancy.html#resource-usage-of-redundant-beacon-nodes


&lt;br/&gt;


# Q:

另一个关于prysm的问题：在使用Prysm推荐的Grafana来展示节点数据的时候，不知道是不是公共数据的api还没出还是我看漏了，有些关于slot和Epoch状态的信息找不到。

想问一下，你们的api是不是只是支持个人节点数据展示？或者你们有没出中文版api文档的打算呢？



### Raul:


Prysm 客户端的话，关于信标节点的所有可用参数：http://localhost:8080/metrics ；https://localhost:8081/metrics 每一个都会有注释解释。如果想要获取当前 slot 的状态，我们的参数为：


至于显示网络的其他相关数据，Prysm 客户端展示的仅限于你所运行的节点的信息。比如，我们不能区块浏览器一样展示“全网”的参数，因为单个节点并不保存网络的全部数据。

至于你说的中文 API 文档，我们还没有这样计划，但是我很想把这个做起来！我们可能会在接下来的几个月推出一个赏金计划，让社区成员来帮助我们编写中文文档。

### Paul:


Lighthouse 通过 Prometheus 将当前的 slot 状态展示为 `slotclock_present_slot` 。你可以用这个除以 32 得出当前的 epoch 信息。



&lt;br/&gt;

# Q:

Nimbus 的最新版本添加了集成 rocket pool 的功能，Lighthouse 和 Prysm 怎么看 rocket pool 和 DappNodeDao 这种去中心化的质押池？以后也会集成吗？



### Paul:


Lighthouse 几年来和 Rocket Pool 一直保持紧密的联系 (我们都是澳大利亚的团队)。我认为他们现在已经支持 Lighthouse。

我不太熟悉 DappNodeDao，但是我知道 DappNode。我们现在在进行用户界面的工作，应该能看到 Lighthouse 受 DappNode 的支持。

我认为 Lighthouse 无需太过关注哪一个质押池，如果我们的客户端架构足够灵活，那么任何人都可以在其质押池中应用。这是我们的目标。

&lt;br/&gt;

# Q:

Hello，请问怎么看待近来以太坊矿工对EIP 1559越来越强烈的反对声音？如果矿工真的进行“算力迁移”，会不会对以太坊网络造成威胁？开发者是否做好支持EIP 1559的准备了？


### Raul:


Eth1 会在不久的将来与 eth2 合并，这一旦实现，矿工就无法对以太坊造成威胁了。我很遗憾他们发起了“算力迁移”对抗，因为这会在社区中制造更大的压力和负面情绪，这也会对他们产生影响。

&lt;br/&gt;

# Q:

怎么看待[beaconcha.in](http://beaconcha.in)浏览器上的effectiveness参数？它是根据验证人节点最新区块的接收速度计算，还是根据历史数据来计算？如何能够提高effectiveness？

为什么我看有时候节点的delay非常高，但收益还是非常稳定并没有降低（始终是0.00003ETH）？如果其实effectiveness并不影响收益的话，到底还应不应该关注它？


### Paul:


我不是很了解 [beaconcha.in](http://beaconcha.in) 上的 effectiveness 参数是怎么得出的。它们很有用，我建议你问他们。

但是，我们自己有很多奖励分析，我可以告诉你我计算哪些参数。所有这些参数都会影响验证者收益：

1. **打包延迟(Inclusion delay)** ：一份证明需要多少个 slot 才能打包到区块？
2. **区块链头投票 (Head vote)**：证明的 `data.beacon_block_root` (信标区块根数据) 是否指向正确的区块？
3. **目标检查点投票 (Target vote)**：证明的 `data.target.root` (目标检查点根数据) 是否指向正确的区块
4. **来源检查点投票 (Source vote)**: 证明的 `data.source.root` (来源检查点根数据) 是否指向正确的区块。


如果来源检查点投票  (4) 是错的，证明将无法被打包到区块，且会被认为是“漏打包的”。而其他三个值 （1、2、3）都直接影响奖励，对于追求收益的验证者来说它们是最重要的。

最近我在 Lighthouse 做了大量工作来确保我们的验证者能获得最多的奖励。你们可以看看这篇文章：[Lighthouse Update #34](https://lighthouse.sigmaprime.io/update-34.html)

尽管我说我不知道  [beaconcha.in](http://beaconcha.in) 是怎么计算出这些奖励的，我觉得他们会分析部分 (如果不是全部的话）我提到的这些参数 。随着时间推移，把它们浓缩成一个百分比是有点难度的，这期间可能会丢失一些信息。

如果你使用的是Lighthouse，你可以在你的  [Validator Monitor](https://github.com/sigp/lighthouse-metrics/blob/master/dashboards/ValidatorMonitor.json) (验证者监测器) 仪表盘上看以上指标。我们未来几个月内推出的 UI 更新会包含这些数据。

&lt;br/&gt;

# Q:

你觉得多客户端的优越性在哪里？

有人说四个客户端可以保障网络的稳定性，但是如果一个客户端挂掉，四分之一网络甚至更高（因为有的客户端更主流，使用率更高）瘫痪依然对以太坊网络是不小的冲击；而如果只有一个客户端，挂掉的话我们可以重启或者回滚。


### Raul:


多客户端之所以重要是因为如果其中一个客户端出现严重漏洞，且这个客户端控制了链上大多数节点的话，可能会由于共识代码上的漏洞而出现错误的链分叉。重启软件不会有帮助。

### Paul:



多客户端有很多好处：

1. 仅一个漏洞是不太可能让网络瘫痪的。
2. 如果一个团队作恶、被攻击、或退出了，在他们的问题解决前我们可以依靠其他的实现。
3. 每个团队可以带来不同的东西，而这些东西我们是共享的。例如，一些客户端专注于吸引用户，而有些专注于优化。
4. 用不同语言编写的多种实现意味着我们创建的工具或代码库可以被更多人使用。例如，当我们有Java 语言的实现时，以 Java 为主的程序员或组织能更容易地参与进来。

&gt; 如果只有一个 eth2 客户端的话，挂掉的话我们可以重启或者回滚。

如果我们想的话，多客户端也可以做到这点。但是，当有多个客户端时，我们还可以恢复网络而无须回滚。

&lt;br/&gt;

# **Q:**

Hi~虽然pow和pos是不同的机制，但对于客户端来说，eth1的客户端已经相对成熟了，请问你们在开发的时候有需要借鉴eth1 客户端的情况吗？是哪些方面？



### Raul:


Eth1 客户端确实更为成熟。所幸的是，Prysm 是用 Go 语言写的，我们可以从 go-ethereum 客户端中获得一些关键的经验，比如说如何处理以太坊中的硬分叉。但是除此之外，由于我们的系统在本质上是不同的，所以我们并没有直接使用其中的很多代码。另外，我们发现构建 eth2 时有机会为将来编写比 eth1 中既有的一些代码更易于维护且可读性更高的代码。Prysm 最初是分叉于 go-ethereum，但是我们发生了非常大的变化，以至于几乎我们的所有代码都没办法共享，因此我们创建了自己的项目。 目前我们使用的 go-ethereum 的东西仅仅是一些用于处理十六进制、eth1日志和智能合约 ABI 接口的助手程序库和代码。

### Paul:


Lighthouse 一开始的确是研究了 OpenEthereum 和 Substrate ，但我们最后并没有直接从它们身上拿很多东西。OE 在很久之前就被开发出来了，他们对 Rust 的使用比较过时。 Substrate 的使用则更简练和现代，但它们专注于灵活度，这是我们不需要的 (我们只想在一条特定区块链上运行，而不是多条区块链)。

我们与 Substrate 和其他项目共享一个网络代码库 (`rust-libp2p`)，因此我们的确在那里共享代码。

&lt;br/&gt;

# Q:

为什么大部分的PoS Staker都支持1559？他们和PoW矿工有什么不同


### Raul:


Eth2 质押者非常关心以太坊网络的长期健康、可持续性、以及它的经济政策。更低的发行量对质押者来说是一件好事，因为它让 ETH 更稀缺，也有利于网络的整体健康。我认为质押者与矿工的最大区别在于很多矿工群体已经发展成大公司，在世界各地形成规模经济，他们的关注点落在了挖矿所需的硬件与如何将成本降到最低。质押者只有资本成本，且可以身处世界任何地方，没有对便宜电力的需求。我相信，在权力分散这一点上， 现在的 eth2 比 PoW 更去中心化。

&lt;br/&gt;

# **Q:**

EIP1559和不断增长的质押规模会使ETH进入低通胀甚至通缩状态（现在质押的ETH总量不到流通量的3%），这些对以太坊pos（比如说持币者的质押倾向）可能产生什么潜在的影响？你们对staking规模有自己的预期吗？

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[Vitalik：如何实现跨Rollup DEX]]></title><description><![CDATA[当仅有目标地址完全支持智能合约时，如何实现跨rollup]]></description><link>https://www.ethereum.cn/Technology/cross-rollup-dex-with-smart-contracts-only-on-the-destination-side</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/cross-rollup-dex-with-smart-contracts-only-on-the-destination-side</guid><pubDate>Wed, 10 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [ethresear.ch](https://ethresear.ch/t/cross-rollup-dex-with-smart-contracts-only-on-the-destination-side/8778)

&lt;br/&gt;

假设我们有两种 rollup 解决方案 A 和 B，Alice 想要用 rollup A 上一定数量的代币来换取 rollup B 上同样的代币。已经有人提出[方案](https://ethresear.ch/t/hop-send-tokens-across-rollups/8581)解决这个问题了，如果 rollup A 和 B 都是完全支持智能合约时，那么就可以去中心化地实现这个假设。然而这篇文章提出的是，当仅有 rollup B 完全地支持智能合约时 (且 rollup A 只能处理简单交易) 如何实现跨 rollup 转账。

我们假定 rollup A 上的交易有某种“备注字段”；如果没有的话，可以使用该交易值的低位数字作为备注发送。

&lt;br/&gt;

## 提案

假设我们有一个交换中介 Ivan (在实现时有许多中介可供选择)。Ivan 在 rollup A 中拥有一个 (完全由他控制的账户) `IVAN_A`。同时，Ivan 还在 rollup B 的智能合约 `IVAN_B` 中存了一些资金。

智能合约 `IVAN_B` 具有以下规则：

- 如果任意用户发送了一笔交易 (发送某代币交易值 `TRADE_VALUE` 至账户 `IVAN_A`) ，(交易中还附上了一个目的地址 B `DESTINATION` 作为备注)，则在最小偿还延迟 `MIN_REDEMPTION_DELAY` 区块之后，该用户就可以返还一笔交易至账户 `IVAN_B` 中 (其中包括之前的转账证明)，然后这笔交易就会排队等候提款至地址 `DESTINATION` 中。
- 等待一定的延迟 (例如一天) 后，按照转账打包进 rollup A 的批次和索引顺序处理提款。
- 当 Ivan 发现其账户 `IVAN_A` 收到款项时，他就可以亲自发送 `TRADE_VALUE * (1 - fee)` 代币至 `DESTINATION` 中。他可以用 `IVAN_B` 的方法发送交易来完成上述操作，这个方法保存了一个记录，防止合约中的自动发送条款触发该交易。

预期的行为很简单：

1.  Alice 发送一笔交易至账户 `IVAN_A` 中 (包含 N 代币 和一个备注 `ALICE_B`)

2.  Ivan 通过 `IVAN_B` 发送 `TRADE_VALUE * (1 - fee)` 代币至 `ALICE_B` 中

第二笔交易紧接着第一笔交易发生。如果 Ivan 可以证明第一笔交易和第二笔交易之间的时间戳差异非常小，那么合约甚至有规则允许提高费用 `fee` 。

最糟糕的情况是，Ivan 没有如他所期望那样向 `ALICE_B` 发送代币。遇到这种情况，Alice 可以等待 rollup A 上的交易确认之后，在 rollup B 上找到其他获取代币的替代路径来支付费用，然后就可以自己认领其资金。

&lt;br/&gt;

## 资本成本

该方案的主要限制是，`IVAN_B` 需要持有大量的资金，以确保所有交易发送者都能得到支付。尤其是，假设出现以下情况：

- We place a trade size limit of `TRADE_LIMIT` coins (so transactions going to `IVAN_A` with `value &gt; TRADE_LIMIT` are not valid trades)
- 我们将交易上限设置为 `TRADE_LIMIT` (所以当发送至 `IVAN_A` 的交易超出限额 `value &gt; TRADE_LIMIT` 时，交易无效)
- 每个 rollup 批次最多可以包含 `TXS_PER_BATCH` 笔交易

Alice 可以自行检查 rollup A 下一批需要处理的交易之前，还有多少未处理的交易，用她在合约 `IVAN_B` 中的资金减去这些交易的总值，并检查剩余的金额是否足够。由于提款是按顺序处理的 (这是上述的排列机制的目的)，Alice 不需要担心合约先处理其他提款申请，再处理她的提款交易申请。

在每批次中最大交易额为 `TRADE_LIMIT * TXS_PER_BATCH` ，因此 `IVAN_B` 合约中至少需要这么多的 ETH，还需要额外的资金包含为处理的交易。举个例子，假设交易上限为 0.1 ETH `TRADE_LIMIT = 0.1 ETH` (交易上限可以设得比较低，因为一笔大额交易可以分成几笔小交易完成)，并且每批次可以处理1000笔交易 `TXS_PER_BATCH = 1000`。那么，合约 `IVAN_B` 需要持有 100 ETH。

注意，这个设计中还包括隐含的费用，因为交易额超过 0.1 ETH 的任意用户都需要浪费区块空间。这与资本要求相权衡，也就是说，如果用户消耗了一半的区块空间，那么其资本要求将翻倍，反之亦然。如果想要获得合适的平衡，那么隐含的费用要比市场上明确的费用少几倍。

如果我们想要减少或者消除这种消耗，可以这样设计 rollup A：让序列器发送一个已签名的信息，该信息证明了 Alice 在该批次的所有交易。然后 Alice 就会知道在她之前没有交易 (尽管恶意的序列器可以欺骗 Alice，但是作恶代价会很高)。

&lt;br/&gt;

## 备注

上述设计基于一个假设：Rollup A 上的交易有一个备注字段，Alice 可以通过该备注指定 `ALICE_B` 作为她接收代币的目的地址。如果 rollup 没有这种特性，那么我们可以使用以下解决方案。Alice 可以在 rollup B 上的一个以顺序登记的合约上注册账号 `ALICE_B` ，并获得一个按顺序分配的 ID (因此 Alice 的 ID 等于在她之前注册的用户数量)。

设置用户数的最大值 `MAX_USER_COUNT` ；如果有必要，这个值可以随时间向上调整。则 Alice 可以确保  `TRADE_VALUE % MAX_USER_COUNT`  等于 (Alice 的 ID)，使用 `TRADE_VALUE` 的低位数字 (这个数字是这笔交易的一个小数值) 来表示她想交易的代币数量。

&lt;br/&gt;

## 从 Rollup B 到 Rollup A 的交易

如果 Alice 把 Rollup B 上的代币转移到 Rollup A，她可以使用相同的机制，只是角色颠倒了：

- Alice 将代币发送给 `IVAN_B`
- 经过一段时间的延迟后，她将获得取回代币的权利
- 如果 Ivan 可以向 `IVAN_B` 证明，他在 Rollup A 上给 Alice 发送了代币，Alice 就失去了这个权利

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊柏林升级公告]]></title><description><![CDATA[柏林升级第一个测试网将于3月10日升级，主网升级计划在 4 月 14 日进行]]></description><link>https://www.ethereum.cn/Eth1.x/ethereum-berlin-upgrade-announcement/</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1.x/ethereum-berlin-upgrade-announcement/</guid><pubDate>Tue, 09 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2021/03/08/ethereum-berlin-upgrade-announcement/)

&lt;br/&gt;

# 要点速览

- 柏林升级准备可以部署了！
- 我们的推进非常快：**第一个升级的测试网是 Ropsten，计划于3月10日升级**。主网升级计划在 4 月 14 日进行。
- 如果你在运行以太坊节点，你应该尽快升级到用于测试网的、兼容柏林的版本，且在 4 月 7  日前升级用于主网的版本。
- 查看下面兼容柏林的客户端版本以及纳入此次升级的 EIP 的细节。

&lt;br/&gt;

# 柏林升级时间

经过多个月得计划，柏林升级终于要来了！继伊斯坦布尔 ([Istanbul](https://blog.ethereum.org/2019/11/20/ethereum-istanbul-upgrade-announcement/)) 与 缪尔冰川 ([Muir Glacier](https://blog.ethereum.org/2019/12/23/ethereum-muir-glacier-upgrade-announcement/)) 升级后，柏林升级计划于以太坊主网区块高度 12 244 000 部署。我们期望它在2021年4月14日周三左右上线，但由于区块时间是可变的，确切日期可能有变。

在部署到主网以前，此升级会先在 Ropsten、Goerli 和 Rinkeby 测试网上运行。整个上线安排如下：

|  网络 |  区块高度 |  预期上线时间 |
| :----------- | :-------------------- | :------------------------- |
| Ropsten      | 9 812 189             | **10 Mar 2021**            |
| Goerli       | 4 460 644             | 17 Mar 2021                |
| Rinkeby      | 8 290 928             | 24 Mar 2021                |
| Mainnet      | 12 244 000            | 14 Apr 2021                |


**以太坊的节点运行者需要在他们想要参与的网络的分叉区块前升级他们的节点。考虑到区块时间的可变性，建议在预期日期前几天就升级。在下文查看各客户端对应的升级版本。**

&lt;br/&gt;

# 客户端版本


为了与柏林升级兼容，节点运行者需要升级他们运行的客户端版本。下表列出了以太坊网络里支持柏林升级的各个客户端的版本，包括测试网和主网。

|  客户端                |   版本 |  下载链接                                       |
| :--------------------------- | :------------------ | :----------------------------------------------------------- |
| go-ethereum (geth)           | 1.10.1              | [下载](https://github.com/ethereum/go-ethereum/releases/tag/v1.10.1) |
| OpenEthereum (f.k.a. Parity) | 3.2.0               | [下载](https://github.com/openethereum/openethereum/releases/tag/v3.2.0) |
| Nethermind                   | 1.10.31             | [下载](https://github.com/NethermindEth/nethermind/releases/tag/1.10.31) |
| Besu                         | 21.1.1              | [下载](https://github.com/hyperledger/besu/releases/tag/21.1.1) |


注意，TurboGeth 与 EthereumJS 不会发布用于第一个测试网的版本，但它们在主网发布前会发布版本。当他们的版本发布后，我们会更新这篇文章。Trinity 持反对意见，并将不会支持柏林升级。

&lt;br/&gt;

# 柏林升级包括的 EIP


柏林升级会把下列 EIP 引入以太坊网络：

- EIP-2565:  ModExp Gas 成本
  -  降低`ModExp (0x00..05)` 预编译的成本
- EIP-2929: 增加状态访问操作码的 gas 消耗
  - 增加  `SLOAD`、`*CALL`、`BALANCE`、`EXT*` 和`SELFEDESTRUCT` 这些操作码在交易里第一次使用的 gas 消耗
- EIP-2718: 包含类型的交易封套
  - 引入一种新的交易类型，它是一个封套，为多种交易类型提供支持。
- EIP-2930: 可选的访问列表
  - 增加一种包含一个访问列表的交易类型，列表包含该交易准备访问的地址和储存密钥。这会减少由 EIP-2929 引起的 gas 消耗提升。


如果想了解更多这些 EIP，请看 Ethereum Cat Herder的[柏林升级概述文章](https://medium.com/ethereum-cat-herders/the-berlin-upgrade-overview-2f7ad710eb80)。

&lt;br/&gt;

# FAQ

### 为什么是&quot;柏林&quot;


在伊斯坦布尔升级后，我们定下来的网络升级名字都用完了。[有人建议我们用举办 Devcon 的城市命名](https://ethereum-magicians.org/t/more-frequent-smaller-hardforks-vs-less-frequent-larger-ones/2929/33)，于是我们就用了。柏林是举办  [Devcon 0](https://devcon.org/devcon-0/details/) 的城市，下一次升级的名字是举办 Devcon 1 的城市——伦敦。

### 作为以太坊的用户或 ETH 持有者，我有什么可以做的吗？

如果你使用交易所 (比如 Coinbase、Kraken 或 Binance)、网页钱包服务 (比如 Metamask、MyCrypto、或 MyEtherWallet) ，移动端的钱包服务 (比如 Coinbase Wallet、Status.im、或Trust Wallet)、或硬件钱包 (比如Ledger, Trezor, or KeepKey)，你不需做任何事情，除非你的交易所或钱包服务商通知你采取额外步骤。

### 作为节点运行者或矿工，我需要做什么？

下载上文所列的以太坊客户端的最新版本。

### 如果我是一个矿工或节点运行者且不参与升级，会怎么样？


如果你正在使用以太坊客户端但不升级到（上文所列的）最新版本，升级后你的客户端同步的是分叉前的区块链数据。你会停滞在一条遵循旧规则的、不兼容的链上，且将无法发送 ETH 或在升级后的以太坊网络上操作。

### 在以太坊上网络升级意味着什么？

网络升级意味着以太坊底层协议的一次变更，创建新规则来完善系统。区块链系统的去中心化本质使得网络升级变得更难。区块链网络升级的顺利进行需要与社区以及各个以太坊客户端开发者进行协作和沟通，

### 网络升级过程会发生什么？

当社区就哪些变更需要被纳入到升级上达成共识时，这些对协议的变更会被写入各个以太坊客户端，例如 geth、Open Ethereum、Besu 和 Nethermind。协议变更会在一个特定的区块高度上启动。任何没有升级到新规则的节点将在旧链上被遗弃，而旧链继续保有之前的规则。

&lt;br/&gt;

# 致谢


特别感谢以太坊社区和所有客户端以及各种平台的开发者，感谢他们为柏林硬分叉做出的贡献。😁🇩🇪

接下来，就是伦敦硬分叉了🇬🇧！

&lt;br/&gt;

# 免责声明

这是一个新兴且不断发展的高科技领域。如果读者们选择实施本文中的建议并继续参与，请确保您已充分了解您的选择会带来什么影响。读者们应该了解所涉及的风险，包括但不限于出现意外 bug 等风险，请读者独自承担风险。这篇文章及其建议不是任何形式的销售，也不提供任何形式的保证，包括但不限于与以太坊网络或此处提及的以太坊客户端有关的任何东西。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/3/8]]></title><description><![CDATA[EIP-2315之争，客户端Geth V1.10.0]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-8/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-8/</guid><pubDate>Mon, 08 Mar 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/qg7PSHD/cover.png)

# Eth1&amp;Eth2

**Eth2 质押队列的等候验证者首次为零**

根据 Eth2 浏览器 beaconcha.in 显示，截至本文发布，Eth2 存款合约已收到 3,436,258 ETH；年化率为 8.4%；网络参与率为 98.88%；活跃验证者为 106,741 名。

值得注意的是，目前验证者队列为 0，现在进行质押可以立即激活验证者参与网络工作并获取收益。据 beaconscan 的数据显示，目前总收益超过 1 ETH 的验证者总计 17300 余个。

&lt;br/&gt;

**以太坊客户端 Geth v1.10.0 发布**

以太坊开发者 Péter Szilágyi 宣布以太坊客户端 Geth v1.10.0 (Pangaea Expanse) 的发布，github  链接：[https://github.com/ethereum/go-ethereum/releases/tag/v1.10.0](https://github.com/ethereum/go-ethereum/releases/tag/v1.10.0)

Péter 表示该版本还未包含柏林硬分叉，因为 Solidity 团队对此前包含在柏林硬分叉的 EIP-2315 比较担忧。由于 v1.10.0 是一个重要的更新版本，我们不希望它的发布太临近硬分叉。我们很快就会推出 v1.10.1，届时会给出 EIP 的最终列表以及加上区块高度。

来源：[https://blog.ethereum.org/2021/03/03/geth-v1-10-0/](https://blog.ethereum.org/2021/03/03/geth-v1-10-0/)

&lt;br/&gt;

**弱无状态性或状态逾时即将推出**

Vitalik Buterin 在 r/ethereum 中发布文章表示弱无状态性 (Weak statelessness) 以及/或状态逾时 (state expiry) 即将推出。对于基础层来说，下一个最大的挑战就是解决状态大小逐渐扩大的问题。这会导致以太坊节点同步越来越困难 (对于想要参与质押的验证者来说不友好)，并且随着状态扩大，尤其是当 gas limit 进一步提高时，网络中心化的风险会增加。

而短期内解决该问题的两项技术为：弱无状态性和状态逾时。

- 状态逾时：从状态中移除最近没有被访问过的状态 (假设是去年访问过的)，并且需要见证者恢复逾时的状态。这将把每个人需要存储的状态减少到 20- 50 GB。
- 弱无状态性：只需区块提议者存储状态，并允许所有其他节点无状态地验证区块。

Vitalik 表示两种解决方案的开发都稳定进行中，是时候在以太坊网络中实施了。

来源：[https://www.reddit.com/r/ethereum/comments/lw7ug3/weak_statelessness_andor_state_expiry_coming_soon/](https://www.reddit.com/r/ethereum/comments/lw7ug3/weak_statelessness_andor_state_expiry_coming_soon/)

&lt;br/&gt;

**Berlin 升级：EIP-2315 之争**

编者注：计划中 EIP-2315 (增加对 EVM 子程序的支持) 被列为柏林硬分叉的最后一项 EIP。目前来说，想要模拟此功能的合约需要同时处理常规堆栈数据和返回地址。EIP-2315 增加了一个新堆栈，只用于追踪返回的地址。在此次 ACD 前，此份EIP 处于 Draft （起草) 而不是 Review (审阅) 状态，但各客户端已经准备就绪，而柏林硬分叉在 Ropsten 测试网的时间定于3月10日。

时间线：

3.2  Solidity 开发者 [@ethchris](https://twitter.com/ethchris) 发推表示“当我们允许跳进、跳出子程序的时候，EIP-2315 就没用了。我们应该增加操作码 BEGINDATA (EIP 2327)，它还对optimism很有用……EIP-2315 无法实现它的目标，且会增加EVM的复杂性，对EVM产生深远影响，以后难以修改。”

![1](https://i.ibb.co/C9k5pv4/chris-1.png)

![2](https://i.ibb.co/0F3CxBj/Chris-2.png)

这条推特也引起开发者对现行EIP被纳入升级流程所存在的问题的讨论，例如@peter_szilagyi 提到如果 EIP 得不到积极推动就会被遗忘等。

[https://twitter.com/ethchris/status/1366436964153651204?s=20](https://twitter.com/ethchris/status/1366436964153651204?s=20)

3.3  日开发者 @lightclients 发起《从柏林升级移除 EIP-2315的提议#263》

在提议中，@lightclients 对 EIP-2315 的历史进行了梳理，以下为概述：

EIP-2315 于2019年下半年提出，是一个旨在完善EVM调用协定的向后兼容机制。2020年的4月，由evmone团队的多名成员完成了一份全面的分析报告，报告显示，“fallthrough subroutine&quot;问题可以通过对2315修改得到解决，如果直接调用 `beginsub` 而不是 `jumpsub` 的结果，它会复原。除此外还有几项反馈是未被解决的。

提议把被纳入硬分叉计划的 EIP 移除是从未发生之事，但考虑到如果此 EIP 对 Solidity 编译器用处不大，那么主网上的很多合约都不太可能会用这份 EIP。因此，我提议把这份 EIP 从柏林升级移除，直到问题被解决了再纳入下一次的硬分叉。

EIP-2315 的起草者与推动者 [Greg Colvin](mailto:greg@colvin.org) 对此提议表达了不满，表示 Vyper 团队一直期待这份 EIP 的实施，他本人也倾注了大量心血。

多位核心开发人员参与了讨论，从时间线追索、技术分析，到决策原则等。

详情：[https://github.com/ethereum/pm/issues/263](https://github.com/ethereum/pm/issues/263)

3.5  AllCoreDevs Meeting 针对 EIP-2315 的讨论：（以下整理基于 Tim Beiko 的会议笔记）

关于客户端移除 EIP-2315 内容的版本，nethermind、OpenEthereum、Besu以及Geth客户端均表示没有问题，接受会议最后的决定。至此，基于会议成员认同EIP-2315 存在未被充分测试的内容，且可能会对EVM产生长久的负面影响，会议通过把EIP-2315 从柏林升级移除的决定。

对此决议，@peter_szilagyi 表达了个人意见，他认为在这个时刻 (临近硬分叉) 考虑移除 EIP 是不合适的，因为很多人已经基于此付出了许多工作。会议上多人就此事进行了对 EIP 流程的反思讨论，其中 Vitalik 提到：“对于这些变更，我们需要更早地从社区搜集反馈。” 

即将接任 ACD 主持工作的 Tim Beiko 表示关于这方面的改进，已经有了计划，很快会公布。

&lt;br/&gt;

**EIP-1559 纳入伦敦硬分叉**

在ACD#107关于把 EIP-1559 纳入伦敦硬分叉的讨论中，@peter_szilagyi 表示希望在伦敦实现 EIP-1559 时可以与 移除 gas 退还的 EIP 一并实施，因为退还会导致区块 gas limit 乘2，与 1559 重复，这会导致 gas limit 最大时可增至 4 倍。Vitalik 对此表示同意，并认为 gas limit 的提升应该缓慢一点，因为现在 gas 费对用户来说已经很高了。

会议同意把 EIP-1559 与推迟难度炸弹纳入伦敦硬分叉。

&lt;br/&gt;

彭博社 Bloomberg 在 3 月 7 日发布的一篇文章中，详细报道了以太坊的 EIP-1559 提案。

新闻链接：[https://www.bloomberg.com/news/articles/2021-03-07/crypto-coin-outperforming-bitcoin-is-about-to-see-supply-reduced](https://www.bloomberg.com/news/articles/2021-03-07/crypto-coin-outperforming-bitcoin-is-about-to-see-supply-reduced)

&lt;br/&gt;

# Layer2

**ESP 推出 Rollup 社区赞助计划**

以太坊基金会生态系统支持计划 ESP 推出 Rollup 社区赞助计划，所有对构建以太坊 rollup 社区感兴趣的社区成员都可以提交提案 (截至 UTC 时间 2021 年 4 月 16 号)。

ESP 发布的公告中表示：由于 gas 费暴涨，而短期内对 EVM 进行扩容的最具有前景的解决方案是 Optimistic Rollups，因此本轮 Rollup 社区赞助计划中的期望清单重点为 EVM-Optimistic rollups (当然，我们接受任何类型 rollup 的赞助申请)。

任何人都可以提交申请 (以个人或团队的形式)。无论你的想法或项目处于哪个开发阶段，都可以提交申请：概念阶段、概念证明阶段、工作推进阶段或已经有具体的项目成型。

期望清单：[https://esp.ethereum.foundation/en/rollup-grants/#wishlist](https://esp.ethereum.foundation/en/rollup-grants/#wishlist)

申请链接：[https://esp.ethereum.foundation/en/rollup-grants/#submit-proposal](https://esp.ethereum.foundation/en/rollup-grants/#submit-proposal)

&lt;br/&gt;

**MetaMask 推出自定义网络 API 以连接用户至 Layer2 网络**

去中心化钱包 MetaMask 发布最新版本 v9.1.0，该更新已面向所有火狐和 Chrome 用户推出。此版本最重要的更新是发布了新的自定义网络 API：旨在在 MetaMask 中实现无摩擦的跨链用户体验。这允许开发者们向他们的用户推荐不同类型的链，包括 Layer2 网络如 Polygon、Arbitrum、Optimism等；侧链如 SKALE 和 xDAI；以及任何兼容 EVM 的链。

这些网络将被添加到用户的网络清单中 (只需简单地按下确认键)，用户就可以在网络清单中切换网络。当用户进入一个网站，被要求在 MetaMask 中添加一个自定义网络时，MetaMask 会显示如下信息：

![metamask](https://i.ibb.co/cJCLg10/metamask.png)

MetaMask 会对该信息做一些基础的验证，如果发现一些不寻常的信息将会警告用户。然而 MetaMask 不负责验证自定义网络，尽管其验证通过了，该网络也可能是恶意网络，因此用户需谨慎确认。

&lt;br/&gt;

# 生态

**以太坊生态经济市值超 2500 亿美元**

根据 Coinbase 的报告 The rise of the Ethereum economy 《以太坊经济的崛起》中，统计了在以太坊网络上衍生的各种加密经济类型如 DeFi、稳定币、wrapped tokens 以及 ETH 的总市值。如下图，以太坊生态经济市值已经超过 2500 亿 美元 (没有包括 NFT)。

![market cap](https://i.ibb.co/w4h61wd/image.png)

cr：Coinbase

来源：[https://www.coinbase.com/learn/market-updates/deep-dive-ethereum-economy](https://www.coinbase.com/learn/market-updates/deep-dive-ethereum-economy)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Arbitrum Rollup的工作原理]]></title><description><![CDATA[Layer2 解决方案 Arbitrum 如何运作？如何获得无需信任的最终确定性？]]></description><link>https://www.ethereum.cn/Technology/how-arbitrum-rollup-works</link><guid isPermaLink="false">https://www.ethereum.cn/Technology/how-arbitrum-rollup-works</guid><pubDate>Thu, 04 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Offchain Labs](https://medium.com/offchainlabs/how-arbitrum-rollup-works-39788e1ed73f)

&lt;br/&gt;

此前我发过一篇[文章](https://medium.com/offchainlabs/whats-up-with-rollup-db8cd93b314e)比较 Arbitrum Rollup 和其他 rollup 解决方案。但是没有细说 Arbitrum Rollup 的工作原理，所以本文将详细介绍 Arbitrum。

Arbitrum Rollup 是一个由以太坊链上合约管理的链下协议。一个 dApp 开发者用 Solidity 写了一组合约，将这些合约编写进 Arbitrum 虚拟机 (Virtual Machine, VM) 中，然后就可以在 Arbitrum Rollup 中运行合约了。这样运行速度能够快些。

# Rollup的基础原理

让我们从基础说起。虚拟机的状态以默克尔树的形式组织，因此就可以计算出该虚拟机状态的加密哈希。在协议的任意时间点，都有一些虚拟机状态被完全确认和敲定。这些虚拟机状态的哈希是储存在链上的。

协议参与者可以提出一个“争议断言” (Disputable Assertion, DA)。该断言声称，虚拟机从某些状态哈希开始，基于一些技术前提可以执行特定数量的计算步骤，从而生成新的状态哈希。并在计算期间完成特定的支付以及生成特定的日志事件。该“争议断言”可能有效，可能无效。提出“争议断言”的一方需要基于断言的有效性质押一笔保证金。(更多关于质押及其运作原理将在下文介绍)

![1](https://i.ibb.co/PD6vZ5Y/1.png)


&lt;center&gt;图：一个争议断言在协议中产生了一个决策点&lt;/center&gt;

如上图左侧所示，一个争议断言产生了一个协议最终必须解决的逻辑决策点。如果该断言有效，系统会进入一个新状态 (右上角)，根据特定的断言产生新的状态哈希和其他诸如支付和日志的附带效果。否则就会进入另一个分支 (右下角)，该断言就会被拒绝，状态保持不变。

&lt;br/&gt;

# 旧版 Arbitrum 协议

最开始的 Arbitrum 协议每次处理一个“争议断言”。当某方提出一个断言时，挑战期便开始，在此期间任何人都可以对该断言发起挑战。如果没人发起挑战，该断言就会被确认；否则争议协议就会运行以取消争议断言 (以防提议者和挑战者串通起来炮制争议结果)。

这个设计很简单，但有两个缺点。首先，由于每次仅处理一个争议断言，导致虚拟机的处理速率有限。因此，每个挑战期期间，处理进程基本上停滞下来。第二，作恶者可以通过对某虚拟机所有的争议断言发起挑战来冻结该虚拟机。攻击者会为此付出一定的代价 (质押金)，但是如果他们不介意这些损失，至少在一些场景下他们可以造成系统的处理进程延误很长一段时间。

&lt;br/&gt;

# 改进版本

新版 Arbitrum Rollup 协议解决了上面两个问题。将多个争议断言按流水线式排布，这样设计下，虚拟机处理速度就可以和验证节点模拟虚拟机运算的速度一样快了。第二，正如下图所示，作恶者无法延缓进程，他们只能暂时延误对结果的链上确认，而对于诚实节点来说，这些结果已经是“无需信任地被敲定了”。

其工作原理是什么？我需要更进一步地介绍这个新的协议....

每个状态最多有一个争议断言跟在其后。如果某个状态后没有争议断言，那么任何人都可以在其后创建一个争议断言，作为一个新的分支点。从而产生一颗多种可能的未来之树。

![2](https://i.ibb.co/TbRq3H7/2.png)


&lt;center&gt;图：一颗多种可能的未来之树&lt;/center&gt;

&lt;br/&gt;

# 质押

Arbitrum 的另一个重要部分就是质押 (staking)。任何人都可以往那颗树中的方框里质押一定金额。通过质押，用户则押注了某个方框最终将被协议确认。换句话说，该用户认为其押注的方框是当前状态的正确分支。如果用户押错注了，其押金便会受到罚没。

质押行为不可以撤销。用户可以将押金向右移动 (在每个分支点选择向右上/右下移动)，但是不可以向左移动，因为这相当于用户撤销其此前的质押操作。

提出争议断言的一方需要押注其提出的争议断言有效。通常情况下他们都能够满足这一要求 —— 将其现存的押金往右移动并押注在要求的方框上。(极少数情况下他们无法这样操作时，他们可以将额外的资金押注在要求的方框上。但是请注意，这样做很可能会在两个相冲突的分支上质押，这会导致损失至少一个分支上的质押金。因此做出自相矛盾的操作是不明智的。)

关于质押还有一个细节：如果用户押注的方框被确认且被记录在协议上了，用户可以选择取回押金。这意味着，用户如果押对注了，便可以选择不再移动押金，留在原处直到被系统追上，然后就可以取回其押金了。

![3](https://i.ibb.co/Y7tFcPk/3.png)


&lt;center&gt;图：更加典型的状态树 — 由一系列正确的断言组成&lt;/center&gt;


在这一点上大家可能会担心那颗充满各种可能的树会变得非常庞大、枝繁叶茂。这在实践中不太可能发生，因为这需要多方对不一致的结果押注。其中仅有一方是正确的，其他人则会损失押金。那么结果最有可能是这样的：这是一颗由“有效的争议断言”所组成的链，一个接一个，所有质押者都具有同样结果的分支上。

&lt;br/&gt;

# 质押期限

我们需要系统尽可能快地对每个争议断言做出决定。所以当新的争议断言被添加上链且出现一个分支点时，就会产生一个与该争议断言相关联的期限。这个期限足够长以至于任何人都可以在期限内判断该争议断言是否有效，然后需要在期限之前选择是否押注。(期限过后，质押交易仍能在链上进行，但他们不能参与决定某争议断言是否正确。) 一旦期限满了，所有参与决定争议断言的押注都将可知。

&lt;br/&gt;

# 争议

如果 Alice 和 Bob 在不同的方框上进行押注，会有两种情况发生：要么其中一位向右移动到另一个人的押注上 (即他们两个的押注结果相符合)；要么找不到这样的路径。如果 Alice 和 Bob 之间没有一条可以连接他们的向右的路径，则他们必定相矛盾。那么在他们之间一定可以找到一个唯一的分叉点—— 这一点将他们两个分叉，各押注了相矛盾的分支方框。

![4](https://i.ibb.co/NyMtC9F/4.png)




&lt;center&gt;图：Alice 和 Bob 之间存在争议&lt;/center&gt;



当两方之间出现争议时，系统会在他们之间启动一个交互式的争议解决协议。可惜在本文中我没有足够的篇幅来描述该争议解决协议 —— 这是一个二分法交互协议 (bisection-type interactive protocol)，类似于我之前在其他 Arbitrum 文档中的描述。


该协议带来的结果是，其中一方会被证实错误的。其押金会被罚没，且押注会从方框中移除。而这些押注的部分会给争议的另一方，剩余的会被销毁。


多个争议可以同时存在，但每个质押者每次最多只能选择一个争议。因为错误的押注会被删除，每一次争议的出现都会减少系统中的分歧数量。损失押金的质押者可以选择再次押注，但是新的押注不能再影响期限已过的争议断言。如此带来的影响是，一个争议断言的质押期限过了之后，关于如何处理该争议断言的争议都会被消除。

&lt;br/&gt;

# 结果确认

当某个争议断言的质押期限到期之后，并且所有在期限内存入的押注在该断言的同一个分支上，系统就可以确认该争议断言的结果。它会被确认或拒绝，当前状态会向右移动到正确的方框上。如果该断言被正式有效，其附带效果 (如支付) 也会被记录上链。虚拟机状态就是这样向前移动的。

一般情况下，为了不损失自己的押金，参与者都将诚实押注。只有有效的争议断言会被提出，没人将在争议断言的无效分支上押注，从而形成一条单一的链。在这种情况下，每个争议断言都能在质押期限过后立即被确认。

&lt;br/&gt;

# 为何说其无需信任


Arbitrum Rollup 的一个重要性质就是无需信任 —— 单个诚实参与者就可以确保虚拟机状态正确推进。为什么？假设 Alice 总是对每个争议断言的正确分支进行押注，并且当树不再产生分支了，她就提议一个争议断言。

因为 Alice 在正确的分支上押注，所以每一次争议她都是胜利方。如果任何人与 Alice 相矛盾，他们将 (a) 在一个不相关的争议中损失他们的质押金，(b) 最终进入 Alice 所在的争议中，其押金将输给 Alice。不管哪个方式，任何反对 Alice 的一方最终都会被罚没。只有与 Alice 相符合的押注才会胜利到最后，所以 Alice 所在的分支会成为唯一一个及时收到押注的路径 —— 该路径会被确认。

![5](https://i.ibb.co/PMB48LZ/5.png)


&lt;center&gt;图：只要 Alice 是诚实的，无论其他人怎么做，绿色方框最终都会被确认&lt;/center&gt;

由于在这种方式上系统是无需信任的，如果 Alice 在一个方框上押注并且她知道该方框的路径是正确的，那么她可以确认其所在的方框上将最终被确认。对于 Alice 来说，该路径就像被敲定了一样。

即使用户没有在某条路径上押注，但是如果用户看到其他一些用户押注该路径，并且相信该路径上至少一个人是诚实的，那么其就可以确认该路径将最终被确认 —— 对该用户来说，这条路径就像被敲定了一样。

&lt;br/&gt;

# 最终确定性无需信任的好处


结果最终确定性的无需信任为什么如此重要？那篇对于其他 rollup 协议的讨论中举出了一个经典的例子。假设一个虚拟机打算向 Alice 支付一笔交易。该支付事件位于正确的路径上，但这笔交易还需等待一段时间，直到这笔交付交易所在的方框在链上被确认。

最终确定性无需信任让 Alice 能够即时收到汇款。如果 Bob 手上有闲钱，他可以立即给 Alice 钱，作为交换，Alice 把未来即将被确认的支付款项转给 Bob (额外给 Bob 一点手续费)。Bob 只有确定该支付交易一定会发生才会愿意这么做。Bob 可以通过押注诚实结果来确保这一点 —— 那么他就可以对这笔支付一定会发生抱有无需信任的信心。不仅 Bob 可以这样做，任何人都能够以这种方式把钱借给 Alice 或其他像她那样的人。这些人还可以通过提供更少的手续费以竞争。

关键是，这种市场机制的可行性取决于无需信任的最终确定性。如果“每个人”都已经知道该事件将最终被确认，那么链上确认的延迟就不会带来不便。

不仅支付这个案例，对于虚拟机所做的其他事情也是如此。如果虚拟机打算生成一个日志项来广播发生了的事件，无需信任的最终确定性意味着任何人都可以确信该日志将被链上承认。

&lt;br/&gt;

# 延迟攻击

因为系统是无需信任的，作恶者无法强行生成一个错误的结果。他们可以做的只有延缓系统处理过程。但这样会牺牲他们的押金，如果质押数额很大的话成本将会非常高。

想象一下如果有人想要发起延迟攻击，且愿意牺牲他们的押金。他们可以带来最大的破坏是什么？

首先，作恶者不能阻止诚实验证者继续在树上构建他们的诚实分支。他们也不能妨碍诚实验证者相信诚实分支的最终确认具有无需信任性。

攻击者可以做的只有在错误分支上质押，以延缓对诚实路径的链上确认。他们的每笔押注都会给诚实质押者创造多一个争议，在这个过程中诚实验证者都会分走一大半攻击者的押金。当攻击者的押金都被分走时，链上工作便继续进行。

那如果攻击者在多个错误结果上质押呢？那么，那些押金就会在一次次的争议里被分走。如果有多人在诚实结果上质押，他们可以进入有攻击者的争议里，与攻击者并行工作，然后把质押者的押金分走。而当人们留意到这一点，大家都知道在发生什么事了，就会有很多人加入到在正确结果上做质押，这样他们就能分走制造争议的攻击者的押金。如果有 K 个人在诚实结果上做质押，攻击者就要花费 K 份押金来一次争议期的延迟。如果攻击者花费更多的押金，这可能会吸引更多的诚实质押者。对攻击者来说情况只会越来越坏。

&lt;br/&gt;

# 优化

有很多优化方案可以实施，以减少运行协议必需的链上记账数据量、减少链上 gas 消耗、以及让延迟攻击所带来的刮分狂欢更容易发生。笔者在这里就不对优化详细展开了，这篇文章已经够长了。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[Eth2进展更新 (截至2021/2/27)]]></title><description><![CDATA[Eth2准备推出新的、容量更大的测试网，信标链第一次升级计划在六月部署]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-2-27</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-2-27</guid><pubDate>Tue, 02 Mar 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210227)

&lt;br/&gt;

# Top picks 文章荐读

Coogan Brennan的个人质押长征文的最后一部分[已经发布](https://consensys.net/blog/blockchain-explained/how-to-safely-migrate-your-ethereum-2-0-validator-client/)了，文章涵盖了将他的验证者从AWS迁移到Digital Ocean，这样能节省了一些资金。这整个系列都很棒。Coogan是一个很优秀的写作者，我可以证明他文章的每个细节他都做充分的功课。

&lt;br/&gt;

# 信标链

这周达成了十进制上的里程碑，信标链主网上的[活跃验证者已超过10万名](https://beaconcha.in/)。开发者更乐于看到二进制上的里程碑，因此当我们验证者数达到131,072时，搞个party吧。

更重要的是，主网的容量现在正接近测试网 [Pyrmont](https://pyrmont.beaconcha.in/) 的容量 （现在是118,000 名验证者）。对于想在与实际网络容量相仿的网络里测试其设置的质押者，Pyrmont是很有用的，但开发团队会想在大得多的网络里测试他们的客户端，以做到提前发现问题。如这周开发者会议里讨论到的，**我们正在考虑尽快搭建一个新的、容量更大的测试网。**只是讨论容量要多大。

另一个里程碑：创世以来，收益最高的验证者现在已经赚了[整整一个ETH](https://twitter.com/terencechain/status/1361103326331297805)——在不到三个月有这样的收益算是不错。而首个获得[一个 ETH](https://beaconcha.in/validator/a2d24f4c55b648036b785419397d24f08b6346490d75585b4f00bd524c218ee4eebbf243515eca5ea18b1caad8a0cfa0#incomeChart) 的幸运儿是验证者11111。这个验证者协助提出了[2个罚没报告](https://beaconcha.in/validator/a2d24f4c55b648036b785419397d24f08b6346490d75585b4f00bd524c218ee4eebbf243515eca5ea18b1caad8a0cfa0#slashings)，和提议了多达[17个区块](https://beaconcha.in/validator/a2d24f4c55b648036b785419397d24f08b6346490d75585b4f00bd524c218ee4eebbf243515eca5ea18b1caad8a0cfa0#blocks)。而我运行的表现最佳的验证者至今只提议了10个区块，总收益是0.9533 ETH。

## 提款凭证

在完全没有引起热议的情况下，其实上周有一份[规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.0.1)发布了，是四个月来第一份规范。

唯一重要的变更是添加[一个提款凭证的新格式](https://github.com/ethereum/eth2.0-specs/pull/2149)。

这是有缘由的。在原来的设计里，Eth2有一个完全不同于Eth1的地址空间，由BLS密钥提供安全保障，而不是 Eth1 现在的 ECDSA 密钥。这就是为什么提款机制现在是通过BLS 密钥对来进行的原因，而提款凭证是对该密钥对的保证。不幸的是，这对无须信任的质押池不友好，尤其阻碍了 Rocket Pool 的上线。

慢慢地，Eth2 的执行层看上去越来越像今天的 Eth1了。因此，现在允许直接使用我们熟悉的旧密钥和钱包来从 Eth1 地址 (账户或合约) 提款是合理的。庆幸的是，规范撰写者有先见之明，为提款凭证设置了一个版本控制方案。因此，现在我们有原来的`0x00` 版本，和一个与新的 Eth1兼容的  `0x01`版本。当然，会有一些方式可以使用原来的 `0x00` 版本提款到 Eth1 地址，且无须质押者操作。我们还没决定那些方式，但我们有时间。

请注意，如果有需要的话，还有一份提议是关于允许验证者[修改他们现有的提款凭证](https://github.com/ethereum/eth2.0-specs/issues/2213)以适应新方案 (暂未写入规范)。

## 工具

这周，在我们的共有基础设施方面有一些重要进展——“日期 - slot 转换器”之争：Lighthouse 的[Paul Hauner](https://twitter.com/paulhauner/status/1361792999307448321) 最先在推特发布，然后是 Nimbus的 [Jacek](https://twitter.com/jcksie/status/1361994652816191490)，最后是 Teku 的 [Adrian Sutton](https://twitter.com/ajsutton/status/1363380122447998976)。这真的是很大的进展，我认为我们真正需要的是 “slot-日期转换器”。如果读者中哪位天才想挑战的话，不妨试试。

另一个有用工具是 [beaconcha.in](http://beaconcha.in/) 浏览器现在提供多种格式的[验证者收益数据下载](https://twitter.com/etherchain_org/status/1361443485824544772)。我找了好一会儿才找到：在某验证者页面顶部点击 “View Daily statistics (查看每天数据)” 的图标，就在标题 “Validator NNNN” 后面。还计入了税收！

&lt;br/&gt;

# 升级1

信标链第一次升级的计划正在敲定中。我们计划六月可以部署 [1](https://hackmd.io/@benjaminion/wnie2_210227#fn1)。

下面是一些相关文档：

- 相当详细的[内容描述](https://notes.ethereum.org/@vbuterin/HF1_proposal)，附有PR链接
- [部署计划概览](https://notes.ethereum.org/@djrtwo/hf1-plan)
- 规范[更新清单](https://notes.ethereum.org/zDtuwh07RS2SxJT59zUCnw)

变更是相对小的，起码与后面的进展相比，但仍然是非常值得实现的内容。以下是个简短总结：

- 增加一个同步委员会到信标链以为轻客户端提供条件
- 计算改革第一级：在 epoch 里一直不断更新验证者参与记录，而不是在每个 epoch 的结束才进行一次大型更新。
- 计算改革第二级：(a) 每64个 epoch 才调整验证者集，这能避免潜在的 DoS 风险，以及 (b) 使怠工惩罚 (inactivity leak) 变得更加灵活。
- 将当前“试验轮”的惩罚增加到最终规范中的数值


同时部署的分叉选择规则也有两个变更 (这些变更不一定需要非常严密地协调，且不会破坏共识)。两者都旨在克服不同的理论攻击。

- 信标链是一种奇怪的区块链，因为它是 slot/时间驱动的，而不是区块驱动。在分叉选择里处理空 slot 一直是一个痛点。第一个更改修改了分叉选择规则，以 (区块、slot）对的形式更好地处理这个问题。
- 对”balance attack&quot; 有一个修复

查看[总览文档](https://notes.ethereum.org/@vbuterin/HF1_proposal) 以了解更多相关信息。

## 命名

可能比上述内容要有趣得多也复杂得多的是为此次和以后的升级找到命名方案。这是提交到 [GitHub issue](https://github.com/ethereum/eth2.0-pm/issues/202) 上所有方案的[汇总](https://docs.google.com/spreadsheets/d/1vhZTXcTRlFvOOFTXpeD-S52-hK3F6Huq-vp-26YeWJI/edit#gid=0)。现在已不再接受提交了。

票数最高的明显是 “恒星名”。验证者 POAP持有者对 (a) [是否使用恒星名](https://poap.vote/poll/44)， 以及 (b) [首先使用哪个名字](https://poap.vote/poll/45)的[限时投票机会](https://old.reddit.com/r/ethstaker/comments/lsablu/participants_in_the_genesis_of_the_beacon_chance/) （24小时）。点击  “Show current results” (显示当前结果) 查看结果（不具约束力）。似乎 Alcor 胜出了，但我还是等官宣吧......

&lt;br/&gt;

# 信标链以外的更新

在上周的AllCoreDev会议里，以太坊 2.0 首次进入会议议程，[讨论主题是 Eth1 与 Eth2 的合并](https://www.youtube.com/watch?t=2130&amp;v=anrbnroO3dc) (链接到讨论的开始)。这是一个重大进展。很明显，我们还需要做非常大量的工作来让每个人对 Eth1 转为Eth2 感到放心，但我们已经在路上了。

这是 (Eth1 和 Eth2) 核心开发者在未来几个月要做的事： 起草[可执行信标链规范](https://hackmd.io/@n0ble/executable_beacon_chain)。这部分的内容会继续在 ACD 会议里讨论， 但还会有另外一个常规会议对规范作更详细的讨论。

另外，Vitalik提议了 《可能值得移除的EVM功能清单 （[List of EVM features potentially worth removing](https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/evm_feature_removing)) 》。这不是直接与以太坊2.0相关，但他提到一些清理工作最好在 Eth1与Eth2 的合并前进行：

&gt; &quot;合并“ 可能是我们摆脱这些困扰的最后机会，这篇文章会解释为什么。

&lt;br/&gt;

# 释义性文章

Vitalik 对我上周的[社论部分](https://hackmd.io/@benjaminion/wnie2_210213#Editorial)做了一些关于 rollup 与可执行分片的[很好的评论](https://old.reddit.com/r/ethereum/comments/ljqog6/whats_new_in_eth2_13_february_2021_edition_62/) 。没有一条路是简单的，但 rollup 的路线图能更快地达成目标。

Dankrad 写了文章 《为什么无状态如此重要 [why it&apos;s so important to go stateless](https://dankradfeist.de/ethereum/2021/02/14/why-stateless.html)》。他对在无状态在以太坊上突破边界做了非常有力的论述。我们现在已经有了实现无状态的潜在技术——以 [Verkle tree](https://notes.ethereum.org/@ZuSZK8r2TgO7eFShwj4hVg/H1XE_w30w) 的形式。在推进无状态以太坊上，最近出现了[一些表示支持的复兴研究](https://ethresear.ch/t/complete-revamp-of-the-stateless-ethereum-roadmap/8592?u=benjaminion)。

关于 Eth2 的 Secret Shared Validators 倡议反响热烈，得到了最新一轮的以太坊基金会社区[赞助](https://blog.ethereum.org/2021/02/09/esp-staking-community-grantee-announcement/)。上周进行了一次[炉边对话](https://www.youtube.com/watch?v=MJj10GG5FqU)，讨论了”SSV 会给质押服务商、在家运行的质押者、以及质押池带来哪些帮助“ ( 还访问了Dankrad!)。可以从这篇[最近的文章](https://medium.com/coinmonks/eth2-secret-shared-validators-85824df8cbc0)了解更多 SSV 的技术。3月3日的社区会议会有 Blox Staking 的参与。欢迎加入 [Discord](https://discord.gg/4BZxSY4Q2C) 了解最新情况。

&lt;br/&gt;

# 新闻、播客及文章

Coindesk 最新的 [Valid Points](https://www.coindesk.com/unique-opportunity-upgrade-ethereum-virtual-stack) Eth2 资讯。可以跟进一下他们运行验证者的经验。最近的 [Mapping Out Eth2.0](https://art19.com/shows/mapping-out-eth-20/episodes/143e9393-3313-404e-bbdd-6e3a079da851) 播客也不错，与 Raul 一起讨论了关于罚没的话题。这个播客系列值得关注。😉

[Stake It - The Daily Gwei #185](https://thedailygwei.substack.com/p/stake-it-the-daily-gwei-185) - Anthony Sassano 非常热衷于个人质押，并避免使用中心化服务

Bison Trails 的 Viktor Bunin：[eth2 update 011](https://bisontrails.co/eth2/011/)，其中包括提款凭证以及他们的 Eth2 Pioneer Program。

Superphiz：[State of the Stake](https://www.youtube.com/watch?v=RjG1IGDVgec)! 内容包括秘密共享验证者 (Secret Shared Validators) 以及 Eth1/Eth2 合并等等。

&lt;br/&gt;

# 实现者会议

第 58 次会议于2/25进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/206)
- [会议视频](https://youtu.be/yrDVhoTg5XU?t=293)
- 我的[速记](https://hackmd.io/@benjaminion/B1BZs7SMO)，以及 Alex Stokes 的[实时推文](https://twitter.com/ralexstokes/status/1364971012018872330)

&lt;br/&gt;

#  招聘信息

我并非是想重复 Evan Van Ness 的内容，因此这个板块不会是常规内容，但我最近注意到了一些不错的参与 Eth2 的机会：

- ConsenSys 的 [Quilt](https://consensys.net/open-roles/1792013/) 团队正在招人。Quilt 是一个以太坊扩容性和无状态性的研发团队，非常推荐大家尝试。
- Teku 团队很快可能也会进行招聘。如果你是一个中高级的 Java 开发者，并且有兴趣与拔尖的以太坊2.0客户端一起工作，请联系我。😉
- 其他的[客户端](https://prysmaticlabs.com/careers)[团队](https://status.im/our_team/open_positions.html?gh_jid=2386730)也在进行招聘🙂

&lt;br/&gt;

# 其他新闻

推文：[Eth2](https://twitter.com/StatefulWorks/status/1362072563602579458) 书籍进度

Prysm 团队 Raul Jordan 撰文： [追踪性能问题](https://rauljordan.com/2021/02/18/when-a-solution-is-right-in-front-of-your-eyes.html)

Lighthouse [最近的更新](https://www.notion.so/Eth2-2021-2-27-3b2982ebb7674e0badccc1fee9479056)也对区块广播时间和信标链客户端内存占用进行了探索

本期到此结束。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/3/1]]></title><description><![CDATA[1559 后矿工收益分析
Optimism将上线主网]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-1/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-3-1/</guid><pubDate>Mon, 01 Mar 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/BNSqbkj/15.png)

&lt;br/&gt;

# Eth2

**以太坊 2.0 验证者节点数量破 10 万**

根据浏览器 beaconscan.com 显示，Eth2 存款合约的质押存款已收到 3,330,370 ETH；当前活跃验证者为 101,789；等待验证者有 1,998；等候时间为 2 天多；当前预期年化为 2.77 ETH。另外一个里程碑是，自创世以来，收益最高的验证者节点已经赚得 1 个 ETH。



**第 58 期 Eth2 会议笔记**

以太坊开发者 @Alex Stokes 在推特上总结了此次会议笔记。

会议中讨论了信标链首次网络升级 HF1，升级计划为：

- 规范预发布 (即将推出)
- 发布测试矢量
- 计划推出单客户端测试网
- 测试功能和跨越分叉边界
- 推出多客户端测试网
- 运行稳定后，选择一个分叉 epoch

关于 HF1 的发布时间，Danny Ryan 表示大概在年中，六月份。

详细笔记：https://twitter.com/ralexstokes/status/1364971012018872330



**Gurg 谈轻客户端进展**

ChainSafe 的联合创始人及首席技术官 @Gurg 在推特上表示，Eth2 的轻客户端的准备工作将近完成。轻客户端将在用户体验、使用能力和开发方面带来巨大的改变。他表示，ChainSafe 团队支持的以太坊 2.0 客户端 Lodestar 会带来让人眼前一亮的升级。在浏览器方面，轻客户端会改变用户对数据的看法。他还表示，另一个以太坊 2.0 客户端值得如此多的赞扬。在移动手机上的轻客户端意味着用户在几秒内就能获得已验证的数据。

来源：https://twitter.com/gregthegreek/status/1366084586669801475

&lt;br/&gt;

# ETH 1

**如何理解移除SELFDESTRUCT**

前两周，Vitalik发表了文章《可能值得移除的 EVM 功能列表》（[List of EVM features potentially worth removing](https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/evm_feature_removing) )，其中一项为`SELFDESTRUCT`（自毁函数）。[@n2ckchong](https://twitter.com/n2ckchong) 在推特表示，在伦敦升级里，移除功能`SELFDESTRUCT` 影响会连带移除 “gas 退还 （gas refund)” ，这可能会降低对 gas 的需求，并且 gas 价格可能会降到两位数的 Gwei。以下为解释的编译：

每一笔以太坊上的交易都需要消耗 gas。通常来说，越复杂的交易会消耗越多的 gas。gas量与你指定的 gas 价格共同决定你的交易费。

![metamask](https://i.ibb.co/FzGP0yv/metamask.jpg)



&lt;center&gt;（旧版MetaMask的界面）&lt;/center&gt;

可变交易费模型的存在是为了确保矿工的收益与以太坊状态的增长成正比。以太坊的状态是关于合约和节点上地址的信息。

`SELFDESTRUCT`是 EVM 层次的操作码，它会把合约的余额发送到地址。它很特别，因为执行这个操作码来销毁合约时，EVM 实际上会把部分 gas 退还给用户，以抑制状态膨胀，这有助于管理状态大小。

尽管这听上去不太有趣，但一些聪明的开发者意识到你可以通过在 gas 费低的时候存储gas 在合约里，把便宜的状态空间转移到未来。

通过自毁元素和合约，当 gas 费高的时候，你就可以比别人更便宜地交易。

例如：![self](https://i.ibb.co/gMsy7BP/selfdestruct.png)

用户可以通过像 $GST 和 $CHI 这样的 gas 代币利用此套利机会，$CHI 是 1inch 团队发布的。

当 gas 费便宜时，这些用户可以铸造或购买 gas 代币，然后在波动时将它们烧毁来实现收益。

这就解释了为什么很多 Etherscan 上的套利交易在查看细节前会有“Self Destruct Contract 0x...&quot;的提示。

![self2](https://i.ibb.co/whvr9tV/selfdestruct2.png)

这是非常聪明的。

当有人在运行套利机器人，每天花费价值数千美元的ETH作交易费用时，有人可以通过使用 gas 代币逐渐积攒收益。

有人认为当 gas 费低的时候， gas 代币导致严重的状态膨胀，这些状态作为无意义的合约存储在以太坊节点上。随着状态膨胀越来越严重，叔块率会升高。

这可能就是 Vitalik 提出在伦敦升级里移除`SELFDESTRUCT` 的原因。

来源：https://twitter.com/n2ckchong/status/1365828206889082883?s=20

&lt;br/&gt;

# EIP-1559

**社区的绝大部分支持1559**

Tim Beiko 和 @trent_vanepps 继续关于 EIP-1559 的社区调查，了解各个项目或团队对此EIP的看法，下图为他们的调查结果：

![Image](https://pbs.twimg.com/media/EvBVgT0WYAMZgBD?format=jpg&amp;name=4096x4096)

结果显示社区的绝大多数项目都对EIP-1559表示支持，另外表中没有但很多人关心的Uniswap的态度，其创始人 Haydam Adams 在推特表示非常支持。

![uni](https://i.ibb.co/qB7HvC3/uni-1559.png)

对于 Teku 的 TBD (待决定) ，Teku 团队负责人 Ben Edgington 表示如果分叉的话， Teku 开发团队会选有 1559 的链，但由于 1559 还未在 AllCoreDev 里通过，因此是 TBD。

![Teku](https://i.ibb.co/Ns22wfV/Teku.png)

来源：https://github.com/ethereum-cat-herders/1559-outreach

&lt;br/&gt;

**量化 MEV，1559 后的具体矿工收益**

上周 2 月 26 日的 1559 社区会议受到广泛关注，在与矿工 Michael Carter 的讨论中发现矿工群体对矿工可提取价值 (Miner Extractable Value，MEV) 有欠了解，同时专注于 MEV 研究与开发的Flashbot 最近推出了MEV浏览器 (https://explore.flashbots.net/) MEV-Explore v0，实现量化MEV。会议后，研究员 Hasu 联合MEV 浏览器的联合开发者 Georgios Konstantopoulos 根据 Flashbot 的 MEV 仪表盘数据发表了分析文章《为 EIP-1559 的矿工收益划限》([Establishing Bounds for Miner Revenue in EIP-1559](https://insights.deribit.com/market-research/establishing-bounds-for-miner-revenue-in-eip-1559/))。文章大意为：

  现在的矿工收益来源有三个部分：1）区块补贴 （ 2 个ETH/区块+叔块奖励）; 2) 用户支付的拥堵费用；3) 来自 MEV 的交易费。启动 EIP-1559 后，矿工收益中的区块补贴与MEV部分将不变，系统不拥堵时打包到区块的费用会被烧毁，而拥堵时，额外的第一价格竞价机制会被启动，小费归矿工所有。结合 MEV 浏览器的数据和总的收益数据，他们分析出了 MEV 在矿工总收入中所占比例的绝对下限 (绿色)，如下图：

![mev](https://i.ibb.co/q5f8MTD/mev1.png)

但由于还有很多其他不同交易类型是 MEV 浏览器没有涵盖的，因此基于这个绝对下限，研究还分析了当 MEV 浏览器正确识别67%、50%和33%的总 MEV 时，矿工收入中三种来源的不同分布。

![67%](https://preview.redd.it/8jzkwjt89xj61.png?width=940&amp;format=png&amp;auto=webp&amp;s=ea7bbc1c387d3d924db594953c080502513f23bb)

&lt;center&gt;67%&lt;/center&gt;

![r/EtherMining - New analysis finds EIP-1559 will cut miner revenue by at most 20-35%](https://preview.redd.it/be4p4p7a9xj61.png?width=940&amp;format=png&amp;auto=webp&amp;s=e7f210192ccaca8697f99d6487b9d1ec95904738)

&lt;center&gt;50%&lt;/center&gt;

![r/EtherMining - New analysis finds EIP-1559 will cut miner revenue by at most 20-35%](https://preview.redd.it/1qp20tcb9xj61.png?width=940&amp;format=png&amp;auto=webp&amp;s=9e92907b91119ae63ceafc7593e65f48fa0fd6b7)

&lt;center&gt;33%&lt;/center&gt;

而在以上三种情况里，50%的情况最可能接近真实的上限。而整个分析告诉我们，矿工收益中，只有橙色部分会因为 EIP-1559 而减少。


&lt;br/&gt;

# Layer2

**Optimism 将在 3 月上线主网**

Optimism 在 2 月 25 日 发文表示其在去年 11 月完成由 a16z 领投的 A 轮融资后 (融资 2500 万美元)，Optimism 扩大了其团队，并将加快其研发速度——于三月份在主网上线 (而不仅仅是开放公共测试网)，届时可以在 Optimism 上部署任意合约。

一些了解 Optimism 的文章 (中文版)：

《为什么Synthetix选择Optimism扩容方案》

以太坊爱好者的翻译：

《Optimisitic Rollup 极简解释》

详情：https://twitter.com/optimismPBC/status/1364705156705579009



**Synthetix 的 Layer2 出现故障，目前质押功能暂停**

2 月 26 日，DeFi 资产合成协议 Synthetix 的二层出现故障。其社区管理员 Justin 在 Discord 发布公告：“Synthetix 的 L2 吞吐量出现了一些故障，交易目前无法确认。” Synthetix 创始人 Kain 紧接着 发布公告，“我已经联系了 Optimism 团队，他们正计划在网络部署升级版本，升级后该问题将得到解决。用户的资产以及网络状态是安全的，但是新的交易当前无法被序列器接收。Optimism 团队表示至少需要 24 小时来进行测试和部署升级。没有被登记的用户存款将在升级后尽快补录。”

2 月 28 日，Justin 表示 Layer2 dApp 功能再次恢复，质押功能已开启。故障期间没有被确认的存款交易目前正处理。

而 3 月 1日凌晨 Justin 再次发布最新进展，他表示 Optimism 团队检测到一些没有存入 Layer2 的积压存款。目前 Synthetix 的质押功能再次暂停存款交易。



**StarkNet 的部署计划**

以太坊 Layer2 解决方案提供团队 StarkWare 宣布了 StarkNet 的部署路线图：一个去中心化的、无需许可的、抗审查的、由 STARK 支持的 L2 ZK-Rollup 解决方案。其基于图灵完备 Cairo 语言。

开发者可以在 StarkNet 上构建实现其自身逻辑的应用；用户可以在 StarkNet 发送交易；在加密经济激励下，StarkNet 节点和参与者将确保网络的有效运行。

StarkNet 将分四步推出：

第 0 步 —— 基础搭建 (已完成)

第 2 步 —— 行星：单个 App Rollups

第 3 步 —— 星群：多个 App Rollups

第 4 步 —— 宇宙：去中心化 Rollups

StakWare 期望在几个月后部署第一阶段，并在 2021 年底前顺利推进第二和第三阶段。

![Image for post](https://miro.medium.com/max/1400/1*yegYSRivsPIryDYbVro-8g.png)

cr：https://medium.com/starkware/on-the-road-to-starknet-a-permissionless-stark-powered-l2-zk-rollup-83be53640880



**StakWare 与其他 DeFi 合作项目的进展：**

- 去中心化交易所 dYdX 的永续合约上线其基于 StarkEx 引擎的 Layer2版本。目前仍在内测，只有受邀者可以使用，面向公众的版本将于几周后上线。
- 基于 Validium 的实现用例 Deversifi 推出 Swap 功能



**Vitalik 解读 Rollup 技术**

2 月 28 日，Vitalik 参加了一场由币乎主办的以太坊 Layer2 Rollup 技术 AMA 活动，对 Rollup 技术进行全面解读。以下是笔记内容，感谢笔记整理者@行走

链接：https://bihu.com/article/1651815142?i=1Tg0lE&amp;c=1&amp;s=1NMQzI

&lt;br/&gt;

# DeFi

**DeFi 联盟基金成立**

由贸易和风投公司 **CMT Digital**、**Cumberland DRW 和 Jump Capital** 等联合创办的 DeFi Alliance 基金，旨在将 DeFi 创业公司和机构交易公司连接起来，以帮助这些创业公司解决流动性问题，并且为他们的创始人提供来自专业用户的产品反馈。DeFi Alliance 目前有 60 多个成员公司，并且已推进了 28 个 DeFi 项目的增长，包括0x、 dYdX、IDEX、Kyber Network、Synthetix 等。

DeFi Alliance 在文中宣布 DeFi Alliance Fund I 的成立。由联盟成员发起，由创办人以及 Mark Cuban 主导。

![defi](https://i.ibb.co/K5x8rzf/12.png)

cr：defialliance.co



该基金的推出不仅为了给 DeFi 世界带来关键战略合作伙伴，而且为创业公司提供发展以及教育资金。DeFi Alliance 表示会将资本在各种 DeFi 项目以及其他相似行业 (如NFT) 中分配，每年将投资几十家创业公司。

除此之外，在接下来几个月 DeFi Alliance 会关注其他发展方向：NFT、亚洲项目、机构教育计划。

来源：https://twitter.com/defialliance/status/1364984633155330056

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[为什么我认为EIP-1559的区块容量变化无须担心]]></title><description><![CDATA[Vitalik三点回应对EIP-1559中松弛区块容量的质疑]]></description><link>https://www.ethereum.cn/Eth1x/eip_1559_spikes</link><guid isPermaLink="false">https://www.ethereum.cn/Eth1x/eip_1559_spikes</guid><pubDate>Wed, 24 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [notes.ethereum.org/@vbuterin](https://notes.ethereum.org/@vbuterin/eip_1559_spikes)


对 EIP-1559 的一种批评是：区块大小是可变的，在 [0,25M] 的范围内浮动而不再是固定的 12.5M gas limit，这使得客户端需要处理加倍的负载。这个论点进一步演绎为，如果我们认为客户端是可以处理这么高的负载，那么他们应该可以任何时候都处理这么高的负荷，这样我们倒不如放弃 EIP-1559 而直接做更有用的事——把区块大小限制提升一倍。

这个想法背后的核心观点是，大区块的首要危害来自经由客户端的那些最大区块，而不是平均区块大小。我认为这个想法是错的 (因此 EIP-1559 对客户端产生的风险并不会比固定 gas limit 的机制更高)，以下是我的理由。

&lt;br/&gt;

## 重温：不马上把 gas limit 提高到 100M 的理由有哪些？

三个理由：

1. 正常情况下的区块处理时间会增加

    从当前大约 400 ms 增加到约 3.2s，这会带来很多负面后果：

    - 非常高的叔块率，导致中心化
    - 除了电力最强的节点外，其他所有节点都难以保持同步
    - 即使是电力最强的节点也需要更大量的资源消耗
    - 短暂断电 （比如你在手提电脑上运行一个节点，你需要把电脑从家里移动到咖啡厅）后的重新同步前会有更长时间的延迟
2.  **由于 DoS 攻击，最坏情况下区块处理时间会延长**，从现在的 20~80 秒延长到可能 160~640 秒。
3.  存储增长率会升高
    从
    现在大约 50 GB/月
   上升到大约 400 GB/月，这会导致:

    - 同步速度慢很多
    - 存储要求高很多
    - 更慢的磁盘处理速度，因为大型数据库的访问速度会慢于小型数据库


请注意：理由1和理由3下的所有内容都只适用于长期正常使用情况，而不是受高峰影响。因此，如果要考虑高峰期的影响，关注理由2就够了。

&lt;br/&gt;

## 论据1：EIP-2929 已经弥补了 EIP-1559 的不足

EIP-2929 对存储访问操作的 gas 成本进行了提升，已经把最坏情况 DoS 攻击所需的 gas 消耗增加了 3 倍。这意味着 EIP-2929 与 EIP-1559 配合起来实际上是比现在在最坏情况下处理区块所需消耗净减少了 1.5 倍。

这里很自然会问一个问题：“如果 EIP-2929 那么好，为什么不直接把 gas limit 调高到 25M 或 37.5M”？这个回答很简单：理由2不是避免 gas 消耗提高的唯一原因。即使 DoS 问题可以被完全解决，理由1和理由3下的问题在可见的未来还会存在。因此，EIP-2929 给的额外松弛部分是不可以用以对区块容量进行大幅提升。

&lt;br/&gt;

## 论据2：对于相同程度的 DoS 攻击，短时间攻击引起的峰值带来的弊端远比长时间攻击带来的要少

如果攻击者对链发起攻击，用区块容量最大值（目标容量的2倍）的垃圾数据填充区块，每个区块的 gas 价格上涨 1.125 倍。这个涨幅是呈指数上升的：持续生成 5 个满区块（大约65秒）会使得gas价格上升 1.8 倍，而在 5 分钟之后，gas 价格会上升 15 倍 （10 分钟后是 225 倍）。为了维持攻击，攻击者必须按照这些疯狂上涨的价格支付所有的交易费。因此，一次现实的攻击可持续的时间大概是 5 分钟。

如果客户端收到这 5 分钟内生成的区块（每个需要 20~60 秒的处理时间）会发生什么呢？很明显，在这段时间链的处理速度会变得非常慢。会出现非常多短程分叉。事实上，分叉意味着攻击者在攻击后仍然可以以少量哈希算力（例如大约20%）回滚链上交易。这是非常糟糕的情况。

但是，这比攻击者可以维持一个小时甚至一天的攻击要好得多。大多数的交易和其他服务现在等待确认的时间已经超过 5 分钟，只有极其脆弱的服务才会被破坏，因为对它们来说需要 5 分钟发送一笔交易太难了，而回滚或拒绝服务需要持续数小时甚至数天，就像 2016 年的上海攻击事件一样，会造成非常严重的后果。

因此，持续 5 分钟达到 2500 万 gas 的峰值比 2500 万的 gas limit 风险低得多。

&lt;br/&gt;

## 论据3：短期峰值已经出现

工作量证明挖矿固有的泊松过程 (Poisson process) 就意味着区块在发布时会存在随机性。事实上，光是随机性每周就会导致一次两倍链容量的峰值，峰值持续五分钟。

（注意：这是由大量相同容量的区块而不是相同数量的大容量区块导致的，但据我所知，没有证据或理由相信单个区块的处理所消耗的 gas 是超线性增长的）

因此，某种程度上使用峰值是一个已知数量，生态到目前为止还能忽略其影响。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/2/22]]></title><description><![CDATA[#1559社区会议
#柏林伦敦硬分叉]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-2-22/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-2-22/</guid><pubDate>Mon, 22 Feb 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/RpmYy5X/cover.png)

&lt;br/&gt;

# ETH1+ETH2

2.19 的AllCoreDev对目前Eth1与Eth2的重要议题做了深入讨论并决定出了一些关键时间点，本期七日谈以对此次会议的纪要作为这部分内容的更新

**客户端集成测试网YOLOv3现状**

下图为目前各客户端在测试网YOLOv3上的完成度

![yolo](https://i.ibb.co/wRqL5Qs/YOLOv3.png)

**柏林硬分叉的时间与区块数**

下图此次会议决定的各测试网与以太坊主网的柏林硬分叉区块数与时间

![berlin](https://i.ibb.co/JvYh43p/Berlin-block-numbers.png)

**伦敦硬分叉**

因为难度炸弹可能将在7、8月启动，因此希望伦敦硬分叉最好在此之前发生。这意味着需要在六月看到有测试网、在五月选出区块、在四月完成大多数的测试工作，也就是说要在三月选好EIP。也就是下一次AllCoreDev就需要讨论选哪些EIP了，目前有的影响大的EIP是1559。如果有任何EIP希望在London被实现的，可以在这里提交https://github.com/ethereum/pm/issues

**Eth1与Eth2合并的要求**

Danny表示负责的工作小组需要开发让更多的人参与讨论，在Eth R&amp;D 的discord上有关于合并的房间，接下来会有更多的分组对不同的问题进行讨论

![discord](https://i.ibb.co/hX2Dg8S/DISCORD.png)

开发者Mikhail Kalinin在会议里详细讲了合并中的Eth1，他表示大多数的JSON RPC组件将保持不变，但有些还是因为共识或最终确定性需要作出调整。这意味着，对dapp开发者来说，变化是很小的。EVM也还需要增加一些操作码以实现读取信标链状态、从信标链提款等。

关于Eth1上的变化，他提交到此次会议的更新如下：

客户端修改：

- eth1-eth2的通信协议
- 状态与链的同步
- 新的操作码 (`RANDOM`、`BEACONBLOCKROOT`等)
- 区块储存 （区块数、区块哈希、分叉选择）
- 共识部分 （ethash、难度、时间戳、收益）

重要变更：

- `BLOCKHASH` 操作码 (随机或验证)
- `DIFFICULTY` 操作码
- 由全节点来保证储存整个区块历史

来源：https://github.com/ethereum/pm/issues/247

关于最后一点的变更，因为有了最终确定性，储存整个区块历史不再是共识的一项严格要求，但客户端可能还是希望保留。

对此，Eth1开发者Péter Szilágyi表示这涉及现存客户端的一个重要设计问题，因为在现在的模型下，区块同步与广播是在Eth2网络上发生，按照这个设计，Eth1客户端将无法检索历史，也就会变得非常被动，因为Eth1客户端只能做Eth2客户端所允许的事。从Eth1与Eth2合并的角度来看，这样做可能会丢失区块历史。因为根据他的理解，Eth2客户端是会修剪很多内容以达到轻量，如果想Eth1与分片链合并能实现同步，Eth1客户端可能需要保留整个区块历史，也就是我们不能把区块同步交给Eth2。

Danny表示区块历史不会在p2p网络里丢失，但同意这是一个需要仔细思考的问题，而且这也是重新思考客户端要如何操作的好时机。

Dragon Rakita问eth2是负责新生成区块还是全部区块的数据同步？区块是如何分配给不同的客户端？

Danny回答：Eth1的应用交易数据包是嵌在信标区块里的，信标区块相当于是eth2共识的主要部分。Eth2构建了核心共识信标状态。在Eth2网络里，当客户端收到一个新区块，该区块会有部分Eth1的应用数据包，然后使用附属的Eth1软件来验证该部分的Eth1应用数据包，Eth2则验证其他部分。从Eth1的角度来看，Eth1客户端作为权益证明的附属客户端推动验证工作的完成。在eth1-eth2的通信协议里写了Eth2好比是大脑，是共识的推动者，对Eth1客户端提出获取数据包的请求。

随后，会议还对合并过程可能的遇到的攻击的各种情况作出设想，并提出应对方案。

Q: 有哪些东西在伦敦升级实现是与合并相关的？

BLS预编译和用难度炸弹时间来预估实现合并的时间。（Tim：难度炸弹应该是2022年的夏天，距离现在大概18个月。其他声音：不应该定一个确切时间，因为会有很多不可预测的事情发生，但并不代表可以放松工作。下次会议会讨论难度炸弹的时间）

关于合并时的Eth1的两个要求与问题：

1）关于Eth1客户端在合并后的清晰明确要求

2） 合并后以太坊的状态有哪些需要保留哪些需要移除，因为合并是把清理一些无用东西的好时机

然后是Vitalik分享他的最新文章《可能值得移除的EVM功能列表》（List of EVM features potentially worth removing)。

文章：https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/evm_feature_removing

最后是关于1559社区会议的讨论，值得注意的是此次会议不会作出任何决定。

&lt;br/&gt;

# EIP-1559

**1559社区会议**

2月9日，以太坊Cat Herders社区宣布将于北京时间2月26日22：00举行一次围绕EIP-1559的以太坊社区会议，会议将关注这份提案牵涉的主要利益相关者，包括研究者、开发者和矿工等。会议安排是在简短的总结后，与会小组将讨论矿工提出的关于该EIP的忧虑、相关的研发更新、以及回答社区提交的问题。此次会议的目的主要是解决矿工的忧虑，为柏林升级后的以太坊网络升级构建共识。

与会小组名单：

EIP倡导者Tim Beiko、EIP作者Rick Dudley、EIP编辑Micah Zoltu、负责研究与模拟测试的[Barnabé Monnot](https://twitter.com/barnabemonnot)、 [Hasu](https://twitter.com/hasufl) 和 [Georgios Konstantopoulos](https://twitter.com/gakonst)、客户端开发者[Tomasz K. Stańczak](https://twitter.com/tkstanczak) (Nethermind)、网络升级协调者[James Hancock](https://twitter.com/JHancock)、矿工代表：王纯 (F2Pool)、 [BitsBeTrippin](https://twitter.com/BitsBeTrippin) (独立), Chris K.([Flexpool.io](http://Flexpool.io))、社区代表[Aftab (DC investor)](https://twitter.com/iamDCinvestor)

主持：以太坊基金会的 [Hudson Jameson](https://twitter.com/hudsonjameson)

支持： [Pooja Ranjan](https://twitter.com/poojaranjan19)

直播地址：https://www.youtube.com/watch?v=EdXhL6VR0mU&amp;feature=youtu.be

&lt;br/&gt;

**支持1559运动**

在论坛reddit，用户u/Bob-Rossi在r/ethfinance社区发起在26日会议开始前每天更新发帖支持EIP-1559的运动。受此启发，@InsideTheSimulation创建了网站supporteip1559.org，网站呼吁支持eip1559的人转发支持的推特，1559会议的视频链接、关于1559的常见问题、如何对1559表示支持等。此次运动在社区得到广泛响应，多人转发支持EIP-1559的推特。

&lt;br/&gt;

# Layer2

**Celer Network 引入 Layer2.finance**

Layer2 解决方案 Celer Network 公布其最新解决方案：Layer2.finance，旨在为用户提供一个基于 Layer2 的 DeFi 生态总入口。 根据其发布的博客，Layer2.finance 将发布基于 Optimistic rollup (于2021年第一季度推出) 的版本1.0，并计划在迭代版本之后升级至 ZK Rollup。与其他 rollup  解决方案一样，使用 Layer2.finance 的用户首先需要通过将资金存入 Layer1 的 rollup 合约中以实现在 Layer2.finance rollup 链的存款交易；不同的是，Layer2.finance 不需要将 DeFi 本身协议迁移至 layer2 中，而是 (如下图)：

![celer](https://i.ibb.co/pzTBWbk/celer.png)

&lt;center&gt;cr：Celer Network&lt;/center&gt;

1. 用户将资金存入 rollup 基金池合约 (与其他 rollup 解决方案类似) 之后，用户可以在 Layer2.finance 的二层 rollup 链上指定自己的自己希望被放在哪个 DeFi 协议中。
2. Layer2.finance 将接受用户的批量 “资金分配指令”，并对其进行汇总，然后调用 layer2 至 layer1 的合约；
3. 在 layer1 上向不同的 DeFi 协议发起单一的调用，如对多个Curve 协议调用需求仅调用一次。

Celer 的 Layer2.finance 主要是为了解决 Layer2 上 DeFi 应用出现生态、用户、流动性割裂的问题，提供了基于 Layer2 的 DeFi 可组合方案。

原文：

https://blog.celer.network/2021/02/18/layer2-finance-get-defi-mass-adoption-today-scaling-layer-1-defi-in-place-with-zero-migration/

&lt;br/&gt;

**Matic Network 更名为 Polygon**

Layer2 侧链解决方案 Matic Network 于本月 10 日正式更名为 Polygon，将扩展其目标以及技术方向。自 2017 年发布以来，Matic Network 已经推出两项扩容解决方案的实现：Matic PoS 链和 Plasma 链。而除了当前的解决方案，Polygon 未来将提供

1. 其他主流的扩容解决方案如 zkRollups、Optimistic Rollups、Validium 等；
2. 区块链内的通信协议；
3. 数据可用性解决方案等。

值得注意的是，MATIC 代币将仍是 Polygon 网络的唯一原生代币，并作为其网络的治理代币维护系统的安全。

更名为 Polygon 之后，其陆续与不同的项目开展合作，如：

1. 区块链数据索引 The Graph Network 宣布为其提供数据索引和查询支持；
2. The Sandbox 的游戏开发商 Animoca Brands 宣布与其建立合作。Animoca Brands 旗下的游戏 F1® Delta Time 将迁移至 Polygon，并且开放了其游戏代币 REVV 与 Polygon 链的桥接 (即，只要用户在以太坊上持有 REVV，就可以通过桥接转移该代币至 Polygon 中)。

来源：https://twitter.com/0xPolygon/status/1359206750239551492

&lt;br/&gt;

# DeFi

**赛博朋克稳定币 RAI 在以太坊主网上线**

RAI 是专门为去中心化纯粹主义者准备的稳定币，于 2 月 17 日上线主网。RAI 以 ETH 为背书，没有锚定任何稳定资产，其货币政策由一个链上的、自动的控制器所管理。

这个没有锚定任何法币、不以法币为背书的、完全由计算机程序所运行的稳定币，似乎是去中心化倡导者所向往的赛博朋克天堂。

![defi](https://i.ibb.co/QcmsRgy/RAI.png)

&lt;center&gt;cr：Reflexer Labs&lt;/center&gt;

&lt;br/&gt;

# 生态

**币安交易所短暂停止 ETH 提现业务**

2月19日晚上8点51分，中心化交易所币安在推特发布消息称：”由于网络拥堵问题，币安交易所平台暂时停止 ETH 以及基于以太坊的代币的提现业务。“一小时后，币安恢复了该提现功能。

![bsc](https://i.ibb.co/j6232Rf/bsc.png)

此事件在区块链行业内引起了广泛的讨论，区块链研究员 @Hasu 对该事件进行了评论，以下内容摘自其在 twitter 发布的一条 thread：

”所有进入区块链行业的人都将比从前进入该行业的人变得更少的意识形态化，更多的实用主义。这带来的后果就是随着时间的变化，区块链所独有的价值观将受到侵蚀。那么关于人们会为去中心化支付额外的费用这一假设就完全不成立了。

然而，我这番言论并非想要支持 BSC (币安智能链，Binance Smart Contract)。我要说的是，去中心化的成本很高，偏向理论主义的人可能会很乐意为此买单。但对于实用主义者，他们则认为去中心化系统需要比中心化的系统提供更多额外的、真正的价值，否则他们不会为此买单。

我个人来说是愿意相信 &apos;足够多的人们愿意为去中心化支付额外的费用&apos; 这一假设的，然而这只是假设，我们也有可能猜测错误。“

&lt;br/&gt;

**Cloudflare 宣布支持 Unstoppable Domains**

互联网基础设施提供商 Cloudflare 宣布支持区块链域名商 Unstoppable Domains 的加密域名解析。这将允许数十亿的用户访问托管在去中心化储存网络如 IPFS 上的 web 内容。

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[HF1 提案]]></title><description><![CDATA[信标链首次硬分叉 HF1 的详细提案]]></description><link>https://www.ethereum.cn/Eth2/HF1-proposal</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/HF1-proposal</guid><pubDate>Fri, 19 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [notes.ethereum.org/@vbuterin](https://notes.ethereum.org/@vbuterin/HF1_proposal)

&lt;br/&gt;

HF1 为信标链首次硬分叉的暂时代码名称 (点进链接参与协议升级永久命名的讨论)，这次升级的主要目标为：

1. 增加轻客户端支持

2.  修复一些信标链上的漏洞，这些漏洞发现时间比较晚，来不及在创世前修复

3. 在需要进行较大的更新 (分片、合并) 之前，先在相对较小的更新中对硬分叉机制进行测试

&lt;br/&gt;

# HF1提议的共识改变

## 同步委员会

我们在信标链上添加了随机取样的 “同步委员会”。这样做的目的是让轻客户端以较低的开销 (每天至少需要约20KB来保持，需要约500个字节来确定单个区块) 来确定信标链头。这将使得轻客户端实际上可用于移动设备、信标链 之类的浏览器内的应用案例 (以及合并后的整个以太坊)，从而为更加去信任的钱包生态打好基础。

在每个时间段（约27小时）内，随机选择 1024 位验证者作为同步委员会的成员。同步委员会中的验证者将发布证明当前链头的签名。这些签名将作为 `LightClientUpdate` 对象的一部分被广播至区块链，这可以帮助轻客户端找到链头；并且签名会被打包进链，验证者会分得奖励。

主要PR：

- https://github.com/ethereum/eth2.0-specs/pull/2130

## 核算改革 (第一层)

给验证者的奖励不再通过计算得出。此前，我们的方法为存储 `PendingAttestation` 对象然后在最后对它们进行处理。而现在我们添加了一个位字段以存储每个验证者的状态，从而可以实时收集参与数据。位字段按照“混洗”的方法进行排序，以确保同一个委员会的验证者的记录同时显示。这一改变的目的是简化客户端实现，并使得更新默克尔树的成本更低。

主要PR：

- https://github.com/ethereum/eth2.0-specs/pull/2176

## 核算改革 (第二层)

我们每64个epochs更新一次验证者集并进行一次惩罚核算，而不再每个epoch都计算一次。这样做是为了极大地降低处理“空时段过渡 (empty epoch transitions)”的复杂性——比如，在一条参与率非常低的链中，两个相继的区块之间隔了一千个slot，其间仅有空块。目前为了处理这样的链，客户端们将需要每个epoch重新计算一次验证者的余额以对验证者执行怠工惩罚。而这项提案应用之后，客户端仅需要每隔64个epoch核算一次。

此外，我们对怠工惩罚 (inactivity leaks) 增加了两项变动：

  **每个验证者的怠工惩罚力度降低至1/4**。也就是说，如果链上出现怠工惩罚，当一个完全离线的验证者损失其余额的大约10%的数额时，在此期间另一个90%都在线的验证者仅损失其余额的大约0.1% (而不是~1%)。这样做是为了加大对作恶节点的惩罚力度，对那些仅仅由于网络连接不佳而掉线的验证者则降低惩罚力度。点进[链接](https://github.com/ethereum/eth2.0-specs/issues/2125)查看更多的讨论。

- **区块敲定后怠工惩罚会逐渐减少，而不会停止**。即区块被敲定后，离线节点的余额将持续减少，这样确保了参与率显著高于2/3，而不是刚刚超过阈值。点进[链接](https://github.com/ethereum/eth2.0-specs/issues/2098)查看更多的讨论 (不过请注意与此处略有不同)。

主要PRs：

- https://github.com/ethereum/eth2.0-specs/pull/2192
- https://github.com/ethereum/eth2.0-specs/pull/2194

## 惩罚常数调整

很庆幸，尽管我们还没有完全解决验证者惩罚的问题，但在某种程度上已经摆脱了困境。我们会改变以下常数：

- `INACTIVITY_PENALTY_QUOTIENT`: 从 `2**26` (= 67,108,864) 减少至 `3 * 2**24` (= 50,331,648)

- `PROPORTIONAL_SLASHING_MULTIPLIER`: 从 `1` 提高至 `2`

- `MIN_SLASHING_PENALTY_QUOTIENT`: 从 `2**7` (= 128) 减少至 `2**6` (= 64)

&lt;br/&gt;

# 提议的分叉选择变更（大概）与HF1同步部署

## 通过 (block, slot)对来做分叉选择

目前，如果在最近的slot里没有区块发布，那么出于LMD GHOST证明的目的，该slot里面的证明会被算作支持证明者所支持的最近区块。例如，在下图，空白 (BLANK) 区块的证明也会算入 A 的证明里。

![p](https://i.ibb.co/ZMYhggM/pic.jpg)

但是，这容易招致34%攻击。如果有m名验证者被分配到每个slot，那么一个恶意攻击者就可以控制每个slot的`0.34 * m`。攻击是这样进行的：攻击者**不**发布B，且不发布任何他们的证明。所有的诚实证明者对他们在slot `n`看到A、在slot `n+1`什么都没看到的声明进行投票，在slot `n+2`，诚实提议者会在区块 `A`上生成区块 `C`，而诚实的验证者们会支持C。此时，恶意提议者发布B并对slot  `n+1` 和 `n+2`做证明。这样，底部分叉有`0.68 * m`的验证者支持它，而顶部分叉只有`0.66 * m`的验证者支持，由此底部分叉胜出。

这样的攻击在此论文的 3.1部分有详细描述： https://econcs.pku.edu.cn/wine2020/wine2020/Workshop/GTiB20_paper_8.pdf

提议的修复方案是改变分叉选择的运作方式——让分叉选择在 (block, slot) 对的树上操作，而不是在区块树上。因此，在slot `n+1`的诚实投票会算作在上图对 `(BLANK, n+1)`的投票，也就是会被正确算作支持顶部分叉，那么顶部分叉的支持率会变成`1.32 * m`，由此能够打败攻击。

主要PR:

- https://github.com/ethereum/eth2.0-specs/pull/2197

## 分叉选择对称攻击修复

[分叉选择还存在“对称攻击(balance attack)”](https://arxiv.org/pdf/2009.04987.pdf)，攻击是这样形成的：有2%的验证者在一个slot结束之前发布少量证明，让大于49%的网络的人认为区块A胜出，让大于49%的网络的人认为区块B胜出。如果他们对广播计时准确，针对每组人群的信息会及时到达，且在slot的边界时间结束前不够时间重新广播信息到其他组。如果网络环境对攻击者而言是最理想的话，这样的攻击他们可以无限重复。

提议的修复方案是通过赋予下一个slot的提议者暂时但重要的分叉选择权来“打破对称” ，他们能决定所有验证者在分叉的哪一边。

重要的文档:

- https://notes.ethereum.org/@vbuterin/lmd_ghost_mitigation

&lt;br/&gt;
&lt;br/&gt;
网页版声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2进展更新（截至2021/2/13）]]></title><description><![CDATA[以太坊核心开发者 Ben Edginton 回顾 Eth2 路线图变更]]></description><link>https://www.ethereum.cn/Eth2/wnie2-2021-1-13</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2-2021-1-13</guid><pubDate>Thu, 18 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_210213)

&lt;br/&gt;

# 社论

总的来说，我认为人们没有意识到以太坊路线图在过去四个月中发生了多大的变化。

尤其是很少有人注意到按照以太坊2.0当前的计划，*其自身没有提供任何有用的扩容性。*

在之前的计划中，向以太坊2.0过渡是解决以太坊迫切扩容性问题的全部希望。按照原本的路线，Eth2 计划通过阶段1的分片数据/区块以及阶段2的分片执行和分片状态 (甚至是完全无状态化) 来提供扩容性。通过在基础层同时实现这三点，以太坊协议层才能真正意义上实现扩容性。

当前的 Eth2 计划仅对数据 (区块) 进行分片。基于此是完全无法改善当前情况的。

但是我们依靠核心协议外的 Layer 2 rollups 来提供状态和执行分片的同等效果。而这一变化发生在 Vitalik 发布他对[以 rollups 为中心的以太坊]((https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698))的构想之后。(中文版《以 rollup 为中心的以太坊路线图》)

Rollups 就像以太坊引擎的涡轮增压器。EVM 之所以动力不足是因为它缺乏作为燃料的数据。在某种程度上来说，这是为了避免状态膨胀而有意为之。Rollups 就像涡轮，对燃料-空气混合物进行压缩 (即数据)，并施加压力使其进入 EVM。Rollups 还负责协议之外的状态。

但是 rollups 完全独立于 Eth2。Rollups 目前已经基于 Eth1 进行开发并且运行，并且已经开始逐步实现其扩容性承诺。

那么 Eth2 在扩容性方面扮演了什么角色？当前的 Eth2 计划依赖于 rollups 的成功，否则将无法提供额外的扩容性。一旦可用的 rollup 生态就位，Eth2 的性能将提升几个数量级。Rollup 涡轮增压器在 Eth1 上同样适用，但仍然受限于燃料管路。Eth2 的数据分片铺设了 64 条燃料管路，每一条的容量都远大于当前的 Eth1 区块链。也就是说 Eth2 会为 Rollups 涡轮增压器提供支持。

新路线图的几点明显优势：

- Rollups 使得向 PoS 的过渡 (即eth1与eth2合并) 与分片解耦，我们可以通过“[可执行信标链]((https://ethresear.ch/t/executable-beacon-chain/8271?u=benjaminion))”的方式更快地推进合并。这种设计将切换 PoS 对 dapps、工具和用户产生的影响降到最低。

- 我们可以选择分片和合并的优先顺序，如果哪个部分出现问题，可以降低风险。总的交付时间缩短了 (需要交付的内容减少)。

- Layer1 协议被大大简化。不需要再考虑跨分片交易等等。这些现在不是我们的问题了。总的来说[是件好事](https://vitalik.ca/general/2018/08/26/layer_1.html)。


但也存在一些令我顾虑的因素：

- Rollup 相关技术尚处于起步阶段，并不能保证它最终会成功。在最坏情况下，我们可能需要将“可执行分片”重新纳入Eth2。

&lt;br/&gt;

-----------------------------------------------------------------------------------------
  **译者注：对此 Vitalik 在 Reddit 上进行了[回复](https://www.reddit.com/r/ethereum/comments/ljqog6/whats_new_in_eth2_13_february_2021_edition_62/gnh8gf3?utm_source=share&amp;utm_medium=web2x&amp;context=3)：**

  与 Rollup 技术相比，直接采用可执行分片这一扩容解决方案的研发与应用更加不成熟。特别是，如果要在多个分片上实现执行功能，我们需要：

  - **完全无状态验证** (为了保证系统的安全性，验证者需要快速地重组，因此不能依赖验证者储存任意某个分片的状态)
  - **一个经济学适宜的区块提议模式** (前提是区块提议者可以选择分片，使得攻击者更容易在单个分片中控制区块提议并审查用户，我们必须想办法解决该问题)
  - **一个跨分片交易模型**，该模型需符合经济学和适用 gas 机制
  - **一个更完备的托管证明策略** (proof of custody game) 以处理执行 (关于验证者的两难问题，其在计算上的问题要比数据严重得多。因此我们必须得防止所有验证者只投”赞成“票)

  以上所有问题都是可以解决的，但同时解决这些问题比解决 rollup 的问题要难得多。当然 rollup 也有问题，但比可执行分片这一方案少得多 (可执行分片的解决方案离实现还很远)。在我首次发布《以 rollup 为中心的以太坊路线图》这篇文章的时候，已经有三个 ZK rollups 解决方案运行数月了。


-----------------------------------------------------------------------------------------


- 以 rollup 为中心的世界：其中许多属于协议类型的事物都被剔除出协议，这在短期内会更加混乱。然而，独立于基础层的好处是能够迅速迭代，而市场的迫切需求最终会推动互操作性、工具等标准的应用。但这会是一段坎坷的道路。

- 便宜的 layer1 交易大概已经一去不复返了，而目前的 Eth2 设计并不会改善这一点。这个消息可能会令许多人感到惊讶和沮丧。

总之，我认为大家应该对上述内容心中有数。请对你中意的 rollup 开发者表示支持！

&lt;br/&gt;

# 信标链

关于信标链最近没有什么大新闻。截至译文发布，有 91,829 名活跃验证者，验证者激活队列为 5,928。当前的队列长度为 6.5 天，前不久达到了21天，说明新质押存款速度开始慢了下来。不过现在已经有超过 300 万 ETH 被质押，价值 50 亿美元。

不过一直有一个迷思：Justin Drake 注意到有六名验证者已经在主网中自愿退出 ([voluntary exits](https://beaconcha.in/dashboard?validators=5650,23210,24388,35051,62802,62807))。这有点出人意料。他们没有被罚没，但他们每个人都提交了自愿退出信息，因此他们不再作为活跃验证者。但是他们质押的 ETH 仍然处于锁定状态，直到 eth1 和 eth2 进行合并。

Afri 也发布了针对客户端的[同步性能基准测试](https://dev.to/q9/ethereum-2-0-mainnet-clients-3and)。这是很棒的工作，但不幸的是其主要参考参数是不正确的。Teku 完全不针对同步速度进行优化，因为在弱主观性的 PoS 环境中，极少数人会从创世开始同步。实际上，这么做也存在风险。对此可以看看 Meredith Baxter 的[视频](https://www.youtube.com/watch?v=Oz3flfj50Ig)，解释了长程攻击相关问题。Teku 因此采取了即时快照同步的方式，使得用户可以在一分钟内完成同步并开始运行。这是更为可取的方式。但这一点并没有被纳入基准测试中。

## 罚没

唯一比较大的事件莫过于一连串的罚没事件。Staked.us 有 75 名验证者在 2 月 3 日被罚没，对此他们发布了一个[事件声明](https://blog.staked.us/blog/eth2-post-mortem)。[有些](https://twitter.com/superphiz/status/1357025776181391363)[推文](https://twitter.com/matterhorn_eth/status/1357062960510881792)表示了对此次事件的[同情][(https://twitter.com/preston_vanloon/status/1357027569783234563)]，我并没有相似的感觉。两天后他们又有 17 名验证者被罚没，据我所知这至今尚未确认。还记得 Staked 在 12 月也有 16 名验证者被罚没，也没有公开承认。我本来打算在此处引述 Oscar Wilde，但老实说，这是需要严肃对待的事[[1\]](https://hackmd.io/@benjaminion/wnie2_210213#fn1)。

此处是 [Attestant 的文章](https://www.attestant.io/posts/upgrading-attestants-infrastructure-without-missing-a-beat/)，分析了一个架构合理的质押服务如何在零罚没风险的前提下维持尽可能高的运行时。

如果读者想了解更多关于罚没的背景，以及我们在客户端中的罚没保护措施，可以看看 Ethereum Cat Herders 的 [Peep an EIP #22: EIP-3076](https://www.youtube.com/watch?v=-z6OQNTAF7Y)。这个视频解释了客户端团队为了保证用户体验和安全性所采用的标准化罚没保护交换格式 (目前 Lighthouse 和 Teku 已经采用，Prysm 和 Nimbus 也即将支持)。最后十分钟还讨论了 [Eth1–Eth2 合并](https://twitter.com/poojaranjan19/status/1357735802403500032) 的可能路径。

## HF1 升级

目前还有一条关于信标链此后升级[命名规则](https://github.com/ethereum/eth2.0-pm/issues/202)的公开 issue。如果你有任何想法的话都可以参与！[[2\]](https://hackmd.io/@benjaminion/wnie2_210213#fn2) (计算机科学中的难事：缓存无效、命名以及差一错误)

我们在最近的开发者会议中对 [HF1 升级](https://notes.ethereum.org/@vbuterin/HF1_proposal)中所提议包含的措施进行了讨论并达成一致。大部分内容很简单，但是其中包含了首次提出的两个事项：(1) 计算方式改变 tier 2；(译者注：原提议为将每个 epoch 进行的验证者集和惩罚计算更改为每 64 epoch 进行一次，并对 inactivity leak 进行了调整)；(2) 提议在任一时间对活跃验证者的数量设置硬上限。我们同意采取第一项提议，但没有采取第二项 (目前基本上尚无定论，因为要达到提议的验证者上限至少需要一年)。[文档](https://notes.ethereum.org/@vbuterin/HF1_proposal)已经对此进行了更新。

我们还同意对分叉选择规则进行两项更改，以减轻不同的理论攻击风险。Teku 团队的 Adrian 针对其中的&quot;余额攻击防御&quot;写了一篇[文章](https://hackmd.io/@ajsutton/balancing_attack)，分析其如何在客户端中实现。


## 工具

Ethstaker 团队在 Twitch 上开启了 24/7 的[客户端直播](https://www.twitch.tv/ethstaker/)，旨在帮助新的以太坊2.0用户通过客户端日志辨别他们的客户端是否已经同步。光是看看也挺酷的。不幸的是，直播现在似乎已经下线了。但是它正常工作时会在四个信标链客户端以及 Geth 的控制板之间循环。

Infura 的 [Eth2 API](https://twitter.com/Consensys/status/1356634209016774657) 目前已经公开测试。 [Pyrmont](https://twitter.com/infura_io/status/1359614162154921985) 测试网可用。

Nimbus 团队延长了他们 [dashboard 挑战](https://our.status.im/nimbus-grafana-challenge/)的[提交时限](https://twitter.com/ethnimbus/status/1360273972944920582)。现在延长到了2月28号，最佳提交者的奖品高达 5000 美元。快来试试吧，Gafrana 非常好玩！

Jim McDonald 的 `chaind` 程序升级到 [v0.2.0 版本](https://github.com/wealdtech/chaind/releases/tag/v0.2.0)，用以将 Eth2 的数据提取到 SQL 数据库中。

Jacek 的名为 [ngui](https://github.com/status-im/nimbus-eth2/pull/2304) 的[周末项目](https://twitter.com/jcksie/status/1359043872861650948)可用于探索 Nimbus 的 RPC API。

Bitfly [宣布]((https://twitter.com/etherchain_org/status/1357337769756880901))他们出色的 [Beaconcha.in](http://beaconcha.in/) 移动端程序现已开源。

[Blst 库的审计](https://research.nccgroup.com/2021/01/20/public-report-blst-cryptographic-implementation-review/)已经完成。没有发现严重问题。有兴趣可以阅读完整报告。

最后，多项式承诺 (polynomial commitments) 最近很火。Alex Stokes正在使用 [Rust](https://github.com/ralexstokes/kzg) 语言建立一个 KZG commitment 库。同时，我也在用 [C](https://github.com/benjaminion/c-kzg) 语言做同样的事。(因为我很硬核。我非常喜欢对 segmentation violations 进行debug) 我们都在做 Blst 相关的事。

&lt;br/&gt;

# 文章及其他资源

Danny Ryan：[eth2 quick update no. 22](https://blog.ethereum.org/2021/02/11/eth2-quick-update-no-22/)

Teku 团队的 Adrian Sutton 有一些“[硬道理](https://www.symphonious.net/2021/02/13/hard-truths-for-eth-stakers/)”要告诉 ETH 质押者们。这是在 Staking 浪潮中的沉思。

Superphiz 的 [State of the Stake](https://hackmd.io/@benjaminion/wnie2_210213)，此处是[播放列表]((https://www.youtube.com/watch?v=VYvuUd2JktA&amp;list=PLOB9GGXGcc31_rKi1PlG0kGYf35e6l1wy))。收听 Phiz 总不会让人失望，[Ethstaker](https://ethstaker.cc/) 也一直发展得很好。

Bison Trails 的 Viktor Bunin 在他最近的 [eth2 进展文章]((https://bisontrails.co/eth2/010/))中回顾了上面提到的罚没事件以及其他 eth2 相关话题。

Coindesk 目前在产出一些不错的 Eth2 资源。Valid Points 系列挺不错的 ([2/3](https://www.coindesk.com/valid-points-coindesks-ethereum-2-0-validator-staked), [2/10](https://www.coindesk.com/valid-points-ethereum-2-0-validators-earn-record-1-2m-price-rallies))。

另外， Christine Kim 和 Will Foxley 开始了一档新的播客节目 [Mapping Out Eth 2.0](https://www.coindesk.com/podcasts/mapping-out-eth-2-0)。[第一期](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/eth-staking-challenges-podcast)他们邀请到了 Spencer Beggs (CoinDesk 的工程总监)，一起讨论了他们设置 [Eth2 验证者](https://beaconcha.in/validator/90969)的相关话题. [第二期](https://www.coindesk.com/podcasts/mapping-out-eth-2-0/eth-2-0-development-roadmap)的嘉宾是 Danny Ryan。

ETHDenver：[演讲视频]((https://www.youtube.com/c/ETHDenver/videos?view=0&amp;sort=dd&amp;flow=grid))。其中比较吸引我的是 Stake Fish 的 Daniel Hwang 对于&quot;[信标链去中心化及透明度](https://www.youtube.com/watch?v=k10pTecu_j0)&quot;的演讲。我之前和 Daniel 聊过这个话题，他说得很有道理。

&lt;br/&gt;

# 研究工作

以太坊基金会的[研究工作坊](https://hackmd.io/@hww/workshop_feb_2021)已于2月2日进行。以下是相关演示视频的链接：

- [介绍](https://www.youtube.com/watch?t=520&amp;v=uGeIDNEwHjs)
- Dankrad：[KZG 多项式承诺](https://youtu.be/uGeIDNEwHjs?t=746)
- Vitalik：[Eth2 分片设计](https://youtu.be/uGeIDNEwHjs?t=3959)
- Danny, Mikhail 以及 Guillaume：[Eth1–Eth2 合并](https://youtu.be/uGeIDNEwHjs?t=7450)

将演示的顺序倒过来可能更合适。我们几乎不需要了解 KZG commitments 的工作原理，甚至不需要了解哈希函数的内部结构，它们在大多数情况下是一个黑匣子。 无论如何，整个活动都很棒，值得花时间看看。

&lt;br/&gt;

# 实现者会议

第 57 次会议于2月11日进行。

- [会议日程](https://github.com/ethereum/eth2.0-pm/issues/203)
- [会议视频](https://youtu.be/z3Gj6TXgcb0?t=208)
- 我的[速记](https://hackmd.io/@benjaminion/H1p6GhG-d)以及Alex Stokes 的[实时推文](https://twitter.com/ralexstokes/status/1359935655803899905)

&lt;br/&gt;

# 其他新闻

信标链启动的 POAPs 已经[开放领取]((https://twitter.com/superphiz/status/1358150517130747906))。如果符合[领取资格](https://beaconcha.in/poap)的话请在此处[claim](https://poap.delivery/)。

以太坊基金会已经公布了最近 [Eth2 Staking Community Grants](https://ethereum.org/en/eth2/get-involved/staking-community-grants/) 的[受资助者](https://blog.ethereum.org/2021/02/09/esp-staking-community-grantee-announcement/)，25个项目总计受赠超一百万美元。

&lt;br/&gt;

# 近期活动

- UTC 时间 2月20日晚上八点：我会作为嘉宾参与 Ethstaker 的会议。
- 2月28日：Nimbus [dashboard 挑战](https://our.status.im/nimbus-grafana-challenge/)的提交截至日期

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[关于MEV的一切]]></title><description><![CDATA[何为MEV、MEV的影响、如何解决MEV问题]]></description><link>https://www.ethereum.cn/Thinking/MEV</link><guid isPermaLink="false">https://www.ethereum.cn/Thinking/MEV</guid><pubDate>Wed, 10 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [Paradigm Research](https://research.paradigm.xyz/MEV)

以太坊的核心在于， 利用其灵活的智能合约允许开发者探索无需许可应用程序的新领域。建立在以太坊上的去中心化金融协议 (DeFi) 正爆炸性增长，我们从中瞥见未来该创新可以给我们带来什么。

正如第一次互联网革命中的编程库一样，DeFi 作为“金钱乐高”允许开发者通过组合与混用简单的区块来构建出复杂的系统。这种复杂性也会带来新的风险。风险之一就是矿工可提取价值 (Miner Extractable Value, 简称MEV)。

&lt;br/&gt;

# 矿工可提取价值

矿工可提取价值 这一概念由 Phil Daian 在文章 [Flash Boys 2.0](https://arxiv.org/abs/1904.05234) 中首先提出。最近，我的搭档 Dan Robinson、Georgios Konstantopoulos 以及 samczsun 在文章 《[以太坊是一片黑暗森林](https://medium.com/@danrobinson/ethereum-is-a-dark-forest-ecc5f0505dff)》和《[逃离黑暗森林](https://samczsun.com/escaping-the-dark-forest/)》中再次科普了 MEV 这一概念。

MEV 已然成为加密经济学的一个基本概念，但究竟何为 MEV？它会给无需许可的区块链带来什么影响？

&lt;br/&gt;

# MEV 是什么？

矿工 (或验证者、序列器) 在其生产的区块中通过其能力任意打包、排除或重新排序交易可以获得一定的利润，而 MEV 便是衡量该利润的一种度量。

假设在 Uniswap 上有一笔大宗交易产生滑点之后，出现了一个价值一万美元的套利机会。这时，套利机器人注意到了这个套利机会并提交一笔交易以捕捉机会，提供给矿工的交易费为 10 美元。那么可能会出现以下情况：

1.  矿工会复制和审查套利者的交易以便自己捕捉此次套利机会；

2. 其他机器人也会注意到该次套利机会并提供更高的交易费报价，因此导致大家竞价以争取捕捉套利机会的权力。这种竞拍模式被称为“优先 Gas 拍卖” (Priority Gas Auction, PGA)。

上面提到的一万美元潜在收益便是 MEV。如果矿工没有捕捉这个套利机会，但是发生了 PGA，那么获胜交易者所获得的利润为：MEV 总值 - gas竞拍结算价。(e.g. 如果付 7000 美元给矿工，那么剩下的 3000 美元就是交易者利润)。

这个例子让我们得以窥探 MEV 涵义，但并没有描述出其全貌。MEV 并非罕见。这种金融小游戏带来的激励，会产生一系列因果连锁反应，必须密切追踪才能看到其中的关联。本文将探讨这个话题并解释为什么 MEV 可能会危害以太坊及其用户。

![alt_text](https://i.ibb.co/jH0sd7H/testgraph.png)

DeFi 的成功带来最直接的影响便是：以太坊 MEV 的已知下限正呈指数增长。按照这个速度，相信 MEV 在接下来一年会产生实际性的问题。

&lt;br/&gt;

# MEV 的状况

我们不可能判断以太坊上的 MEV 总共有多少。我们目前知道的所有 MEV 仅为下限值。

这是因为 MEV 可以在用户与区块链交互的任意时间被创建，并且智能合约允许实现无限数量的潜在交互。因此，无法通过单纯的计算得出区块链上潜在的 MEV 总值。

然而，我们可以通过相加已知被利用的 MEV (即上图所示的 “已实现的 MEV”) 来建立基线。然后，我们便可以使用启发式的方法来推断真实的下限值比我们的基线高出多少，以及未被利用的 MEV 会如何影响区块链的环境。

&lt;br/&gt;

# 当前的 MEV

目前以太坊上的状况是，大部分矿工 (还) 没有尝试过自己捕获 MEV。几乎所有当前的链上活动都是由非矿工交易者推动的。然而，一些 MEV 只能由矿工捕获，因为他们有权任意排序 (或排除) 交易。非矿工交易者可以捕获“简单”的 MEV；而较为“复杂”的 MEV 无法通过 PGA 捕获。

这意味着我们目前看到的大多数是 PGA 类型的 MEV。就像上面提到的例子一样，Uniswap 套利是最常见的 MEV 实现方式。


另一种常见的 MEV 类型便是从易受攻击的智能合约中进行盗窃。Dan 等人在文章 《黑暗森林》中描述了一个例子。他们发现了一个有漏洞的智能合约，允许任何人从中盗取资金；Dan 计划在黑客之前利用漏洞追回资金。然而，一个套利机器人自动识别并复制了 Dan 的交易，用自己的地址代替了 Dan 的地址并提供更高的交易费。套利机器人的交易在 Dan 之前被执行，从而挪走了他们的资金。

&lt;br/&gt;

# 未来的 MEV

当以太坊上的矿工开始大量地捕获 MEV 时，MEV 的下一个时代便来临了。然而，目前为止，社区共同的假设为：矿工遵循利他主义，会主动放弃 MEV 利润并继续运行默认的节点软件。比特币矿工根据经验没有选择自私挖矿策略，因此前者所作的假设是有例子可循的。

然而根据过去三个月的观察，我们认为这种“矿工利他主义”假设是行不通的。我们发现网络上有一小部分但值得注意的哈希率正在[捕获 MEV](https://oko.palkeo.com/11708078/)，[刮分非矿工交易者的部分利润，而不是允许无须许可的费用竞拍](https://twitter.com/bantg/status/1349470728320659456?s=20)，还有[把准入许可卖给私人交易池](https://www.rekt.news/return-to-the-dark-forest/)。

相反，我们相信 MEV 正逐渐突破矿工的心理防线。首先，狂热的非挖矿交易者在链上的频繁活动给矿工带来了更加客观的 MEV 捕获机会。再者，非挖矿交易者所不能捕获的 MEV 类型是完全未受挖掘的金库；而这个金库比目前为止我们所知道的 MEV 要大得多。在某种程度上，更令人惊讶的是，矿工花了这么长时间才参与进来。

大坝很可能已经决堤：矿工们会更加深入该领域，探索更加独特的 MEV 和合谋形式。以太坊及其用户可能会面临巨大的风险。


接下来的部分会详细解释将来可能会带来什么，从我们提到的 MEV 的潜在“风险”开始。

## MEV Can Harm Users  MEV 会危害用户

MEV 可以看作是矿工对用户收取的税 (无形的)。


在上面提到的 Uniswap 例子中，一笔大宗交易会导致价格滑点，产生价值一万美元的套利机会 (MEV)。套利机器人通过套利行为使得市场价与真实价格持平，这使 Uniswap 市场在不伤害原始交易者的同时变得更加高效。这个 MEV 交易例子是良性的。

然而，同样是这笔交易的另一个版本将会是这样：一个套利机器人在执行之前就识别到用户的交易，然后将用户的交易夹在自己的买卖订单中间。最终的结果便是，MEV 向用户征收了一种无形的税：他们的订单被人为抬高而导致无法执行，然后套利机器人立即出售订单以获取利润。当然，矿工可以零成本做到这一点。这种 MEV 交易就是恶性的。

&lt;br/&gt;

# MEV 会危害以太坊

MEV 本质上助长了共识的不稳定性。

假设有两名矿工 Sam 和 Dan，他们生产每一个区块都能获取 100 美元的报酬。Sam 生成了 3 个区块，而第一个就包括 Uniswap 上价值一万美元的套利机会。

现在，Dan 需做出选择：要么接着 Sam 的区块往后面挖，也可以尝试重新挖第一个区块以抢夺 Uniswap 上的套利机会。一万美元比一百美元的区块奖励要诱人，理性上 Dan会倾向后者。

由于目前最长链为区块高度 3，Dan 也要重挖第二和第三个区块 (并捕获这些区块中的任何 MEV)。在重组后，Dan 拥有最长链，他和 Sam 就可以从第三个区块继续挖了。

这被称为“时间盗贼”攻击：如果区块奖励比 MEV 小得多时，矿工足以合理地破环共识。

我们的例子只基于两方来假设。而在一个真实的多玩家游戏世界中，很有可能每一个矿工都会遵循理性而尝试重组第三个区块，从而从根本上停止进程。然而，这会摧毁矿工的哈希率投资价值。如果我们看到这种行为，那么这很有可能会以更加频繁、更加快速的重组形式出现，尽管这些重组不会完全使得网络停止发展。

&lt;br/&gt;

# MEV 是以太坊独有的吗？

MEV 并非以太坊所独有的，理论上比特币网络上也会有 MEV。审查闪电网络通道或者双花染色币所获得的激励就属于 MEV。[1] 然而，我们假设比特币本质上比以太坊这样的区块链更少出现 MEV 的可能性。

原因在于两种区块链的”复杂性“和”状态性“

1.  MEV 在给定区块链上积累的速率通常与其应用层行为的复杂性成正比。

2.  像以太坊这样任意性和灵活性较强的协议，无法逃离这种复杂性，并且趋于复杂是其本质所然。

3.  如果不改变以太坊的用户体验，就无法轻易减少 MEV 激励。

这就是为什么我们说&quot;以太坊所固有的复杂性可能是一个诅咒&quot;。

## MEV 与复杂性相伴

从纯理论的角度来看，即使是比特币也无法限制其中出现潜在的 MEV。然而，比特币本身的设计使得意外的高-MEV 案例较少出现，实际上，几乎很少见到。这种情况未来似乎不会改变，因此我们认为 MEV 不会成为比特币较大的威胁 (通胀是另一个问题 [2])。

对比之下，我们可以观察到以太坊上的 MEV 正呈指数增长，这是由于 DeFi 应用带来的巨大价值流。那些看起来如此有前途的金融基元，同时也可以被视作以太坊的寄生虫：它们正编织着一张巨大的 MEV 网络，而该网络会日益变大、变复杂。

## 以太坊无法限制复杂性

如果闪电网络在比特币上创造了 MEV (实际上威胁着比特币的共识稳定性)，我们可以以相对简单的方式，从比特币的有限规则集 (脚本) 中删除掉创建支付通道所需的操作码。

另一方面，如果我们发现一些应用模式 (如DEX、借贷、代币化的托管资产等) 对以太坊造成了类似的风险，那么我们不可能在 EVM 上排查所有可能的实现方式。个别的实现方式可能会分叉，但是如果我们不允许合约部署或者不严格限制 EVM，我们就无法阻止一般的行为。无论是哪种情况，以太坊都无法实现”无需许可智能合约“。

## 难以解决

最后，人们自然会问，以太坊上是否可以构建一种机制来抵消协议中 MEV 的影响。简而言之，不可以，至少在不影响以太坊开发者或用户体验的前提下，是无法办到的。

任何阻止矿工从 MEV 中获益的尝试都可能催生协议外的市场。比如，如果所有交易都仅允许按照一个固定的费率支付，我们可以预想到矿工可能会和交易者合谋，接受带外的 (out-of-hand) 交易优先级交易。同样，如果所有交易费都被销毁或支付给一个公共接收方，那么矿工就会单独地收取交易费。

这就是为什么无法轻易缓解 MEV 问题。当然现在存在着潜在的缓解措施，但是需要进行结构性的改变，如改变以太坊应用的架构和用户与其交互的方式。

&lt;br/&gt;

# 总结

如果比特币的激励安全机制失败了，至少在区块链奖励归零之前，难以想象任何无需许可的区块链不会遭受类似的命运。比特币的简洁性不仅美观优雅，而且还最大限度地减少其协议外的激励面。

相比之下我们更加担心以太坊。以太坊的应用层复杂性和 MEV 继续呈指数增长。而已知的 MEV 收益最低值可能比该年度的矿工维持网络安全所获得激励的 ETH 总值。

大规模、有效的 MEV 捕获会使得对以太坊用户征”税“这种模式难以维持。以太坊可能会变得拥挤不堪，应用层上的交易费更加昂贵。平台的用户体验受到损害，这一切都会阻碍以太坊的网络效应和发展势头。

当然，一个主要的未知点是，以太坊矿工是否会开始大量地捕获 MEV。矿工可以获得本属于非挖矿交易者的 MEV，并以最大的效率捕获其所有值，因此这对于成本和用户体验来说是灾难性的。

”时间盗贼“攻击也有可能出现，虽然矿工不太可能通过大规模重组来损害他们在以太坊上的长期利益。另一个简易的攻击版本，矿工可能故意打包叔块或者重组一小部分利润丰厚的区块，这种方式仍然十分有害。

无论如何，我们是时候认真考虑如果情况恶化，该采取什么方式应对了。

&lt;br/&gt;

# 缓解 MEV 问题

一个理想的解决方案将减少以太坊上的 MEV，或者在不增加通货膨胀的情况下提高矿工维护网络安全的激励:

1. 更佳的应用设计：每个应用程序都可以自己设计，以最小化其能够创造的 MEV。这一方案可能很有竞争优势，因为用户将需要支付更低的成本和享受更好的用户体验。然而，协议不能强制应用程序这样做，并且可避免的 MEV 非常有限。

2. 额外的安全性激励：除了区块奖励之外 (如 EIP-1559 提议销毁的 BASEFEEs[3]，或状态租金)，稳定的矿工收入来源是对协议安全的补充，并可以帮助缓解 MEV 问题。

如果不考虑上面的两个方案，大多数研究就会集中于如何提高破坏共识 (时间盗贼攻击) 的难度和成本，而不是从根源上解决 MEV 问题：

1. 分离打包和排序：矿工 (或验证者) 只能负责打包交易，而将优先交易排序的权利单独竞拍。理论上，这防止重组激励。然而，这使得用户总是需要承受优先交易竞拍带来的 MEV 损失，这等同于多区块时间盗贼攻击带来的影响。

2.  最终确定性 (Finality)：中本聪的工作量证明 (PoS) 只有概率上的最终确定性。而基于拜占庭容错的算法更能保证最终确定性，并且仅仅重组单个被敲定的区块就需要程度更深的合谋，该算法使得时间盗贼攻击更加困难。然而，如果 MEV 的激励足够高，那么即使合谋的难度较高也值得尝试了。再者，参与者对于其提议的区块，仍然有权任意排序交易，因此仅凭最终确定性无法解决“一般”的抢跑交易问题。

3.  权益证明 (Proof-of-Stake)：基于 PoS 的区块链中，尝试重组的验证者会遭受罚没惩罚，因此使得时间盗贼攻击成本更高，尤其是与最终确定性结合时。然而，只要 MEV 的激励足够高，即使在罚没惩罚的警示下也可能会捕获 MEV。

以上所有方法对以太坊生态都会产生重要的影响。许多涉及核心协议的改变需要数年的时间来实现。那些只能在应用层完成的操作仍需要开发者重新架构，并且将大部分生态迁移到其他环境中。

希望接下来的一年会有更加明朗的方案以解决 MEV 问题，以太坊的发展路线将更清晰。Paradigm 的一些投资组合公司正努力解决 MEV 以及相关问题，如果大家感兴趣，可以关注一下。

## Rollup

Rollups 已然成为以太坊主要的二层扩容解决方案。虽然有不同的 rollup 解决方案，但总的来说就是，允许一个聚合器在链下执行应用，然后向以太坊广播证明欺诈 (或除欺诈以外) 所需要的最低限度的信息。Rollup 在保证安全的情况下实现低延迟和高吞吐量。

除了提供扩容解决方案，rollups 还可以使得交易排序和执行分离 (参见 Optimism 的“[MEV 竞拍](https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788)”提议)。Vitalik Buterin 最近提出，以太坊可以主要成为 rollups 的数据可用性层，而 rollups 负责处理所有交易执行，[将 MEV 捕获集中到 rollup 的序列器中](https://medium.com/@VitalikButerin/i-feel-like-this-post-is-addressing-an-argument-that-isnt-the-actual-argument-that-mev-auction-b3c5e8fc1021) (“ETH 1.5”)。

这将与以太坊当前设计大相径庭，并且需要权衡取舍。例如，rollup 之间以及 rollup 与主链之间互操作性会破坏同步性，可能需要在实践中进行不同的假设 (尤其是在一个多 rollup 的环境中)。Paradigm 的投资组合公司正研发两种类型的 rollup 解决方案：



### StarkWare

[StarkWare](https://starkware.co/) 正研发 [ZK-Rollup](https://medium.com/starkware/on-the-road-to-starknet-a-permissionless-stark-powered-l2-zk-rollup-83be53640880) (ZKRU)，即主动打包有效的可验证的证明进区块，而不是乐观地假设证明有效但可以提供欺诈证明。

虽然这最初不是为了分离交易执行和排序所提出的方案，但 ZKRU 可以实现这一点。这个证明引擎还可以用于对排序施加额外的约束 (如果基于 VDF 的优先级排序和其他确定性排序机制可用)。

### Optimism

[Optimism](https://optimism.io/) 所研发的是 Optimistic Rollup (ORU)，即乐观假设证明的有效性但允许被挑战，并向以太坊广播检查欺诈证明所需的最小限度的数据。这将导致相对较长的敲定窗口期，但是这个方案允许使用与以太坊 Layer1 EVM 相同的执行环境 (这意味着现有的合约可以实现无缝迁移)。

Optimism 是 MEVA 和 ETH 1.5 的最初提出者。

## Flashbots

[Flashbots](https://github.com/flashbots/pm) 是一个研发阻止，旨在缓解以太坊上由 MEV 带来的负面外部效应和存在的风险。他们已经建立了工具以量化 MEV 并且减少生态中的信息不对称性。他们正在实现一种无需许可 MEV 提取的概念证明，称为 MEV-Geth。这是种密封投标 (sealed-bid) 的区块空间竞拍机制，用于实现交易顺序偏好通讯。

Flashbots 的目标是确保 MEV 的激励不会失去透明性和民主性。希望他们的基础架构将允许应用开发者更好地了解如何更大程度地解决 MEV 问题，并释放一些压力，否则累积后会带来更加具有危害性的外部效应 (如时间盗贼攻击)。

## Cosmos

[Cosmos](https://cosmos.network/intro) 是无需许可、可进行互操作应用的另一种替代模型。虽然没有与以太坊上的 MEV 直接相关，但是 Cosmos可以在不采用以太坊的“统一安全”范式的情况下，在其应用生态上实现类似以太坊的复杂性。

可以想象 Cosmos 区块链将基本上实现“应用相对独立性”，并在默认情况下不会与其他应用共享安全性。这一设置允许其避免在共享平台上出现的有害外部效应。如果以太坊朝着 ETH1.5的方向发展，看起来将类似于 Cosmos (事实上 [LazyLedger](https://twitter.com/lazyledger_org?lang=en) 就是 Cosmos 版的 ETH1.5)

&lt;br/&gt;

# 致谢


非常感谢我的同事Arjun Balaji、Dan Robinson、Georgios Konstantopoulos、以及Matt Huang，还有Hasu跟我一起讨论，并给我这篇文章提供反馈与信息。

&lt;br/&gt;

# 免责声明

本文仅供参考，并不构成购买与出售任何投资的投资建议或推荐或招揽，也不应被用于评估任何投资决定依据。本文不应作为会计、法律或税务建议或投资建议的依据。本文反映了作者当前的观点，并不代表Paradigm、其关联公司、或与Paradigm相关的人员。本文表达的观点可能会发生变化而随之更新。

&lt;br/&gt;

# 注解

1. 文章《[论比特币没有区块奖励所带来的不稳定性](https://dl.acm.org/doi/10.1145/2976749.2978408)》可以说是首次对 MEV 进行了清晰的定性，表明“正常的”比特币交易费是矿工收益的非常规来源，并且助长共识不稳定性 (激励对费用高的区块进行重组，而不是挖费用少的区块)。

2. 我的意思是，独立于 BTC 通胀率的，比特币 MEV 不太可能随着时间增长。对于通胀率下降的担忧，应截然不同于我们担心 MEV 是否会恶化。[↩](https://research.paradigm.xyz/MEV#fnref:2)

3. EIP-1559把交易费拆分为两个部分：基本费用和小费竞卖。基本费用决定了所有交易里都要销毁的ETH数。小费竞卖基本上只是一个PGA。尽管基本费用销毁会提高协议安全性 (因为它们不是一个非常规矿工收益流)，任何有MEV的交易仍然需要在小费拍卖中竞争。当然，交易费肯定需要竞卖部分以在协议内反映需求。如果没有这个部分，矿工和交易者可能会在协议外的市场里合谋。因此，只有销毁了基本费用才有助于协议安全。

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/2/8]]></title><description><![CDATA[GAS LIMIT热议；质押池集体罚没事件]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-2-8/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-2-8/</guid><pubDate>Mon, 08 Feb 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/YZRgzjN/COVER.png)

# ETH 1.0

**应该提高gas limit 吗？**

近期高昂的交易费使得用户在以太坊网络上“寸步难行”。1inchExchange的联合创始人Anton Bukov@k06a发推，截取Dune Analytics上“以太坊每天使用的gas与gas limit对比”的图 (见下)并表示似乎时时候将gas limit从12.5M提高到15M了，从而提高20%的交易吞吐量。此话题在社区引起热议。其中Go Ethereum的开发者@MariusVanDerWijden表示现在还不是提高gas limit的时候，以下为他推特的翻译整理：




![dune](https://i.ibb.co/zmyKmPb/dune.jpg)


 

&lt;center&gt;Cr:Dune Analytics&lt;/center&gt;

我认为现在提高以太坊的gas limit是危险的。关于这个决定，需要考虑以下几个因素：

**叔块率**：在评估提高gas limit是否安全时，叔块率是最常被讨论的指标。因为大区块在网络中同步速度比较慢，因此会增加变成叔块的可能性。但是，叔块率其实主要与区块容量相关，而不是实际执行，因为区块是在PoW共识链签出时被广播 (至少可以通过geth) 而不是在被正确执行时。因此，有大量存储操作的小型交易与有少量操作的大型交易一样，是不会提高叔块率的。

**状态大小**：我现在看到的最大限制因素是快速增长的状态。创建用户、合约或储存数据的交易都大大地增大区块容量。因为我们的节点不能足够快地修剪状态，大量不必要的状态会被储存在磁盘上。这也是为什么一个新同步的geth节点消耗大约350GB，而一个运行了一段时间的节点消耗大于500GB。提高gas limit会直接导致状态膨胀。

**同步时间**：现在一个全节点大概需要好几天才能同步完数据。原因有几个。提高gas limit会大大增加一个新节点的同步时间。新的同步协议 (例如：snap sync) 可以缩短这个时间。

**执行次数**：无论何时只要有新的区块生成，所有的执行都必须被执行，且状态都需要更新。这跟同步数据有点不一样，因为我们可以采用一些捷径，而在处理区块时是无法同步的。提高gas limit会直接增加一个区块的执行时间。如果一个区块的执行时间长于13秒 (当前的区块时间) ，整个网络都会崩溃，因为每个区块都会出现分叉。现在在以太坊上有几个问题可能会被利用来创造这种重型区块。我们希望可以通过EIP-2718来解决它们。

**档案节点**：尽管全节点足以满足大多数的用例，档案节点 (即存储过去所有过渡状态的节点) 还是有依赖它们的用例和各种服务，比如区块浏览器或审计工具。提高gas limit会给这些节点增加非常大的压力。尽管我们普遍不关注这些类型的节点，我们还是需要支持它们。

解决方案：尽管我认为现在不是提高gas limit的适当时候，但我也看到未来可能是由解决方案。

**Snapshot和Snap Sync**: 在我们下一个更新版本，Go Ethereum会有一个叫snap sync的功能，它可以大大减少同步一个节点所需的时间和网络容量。另外，这个功能也会提高读取当前状态的速度。

**Regenesis**: Regenesis是关于修剪以太坊的历史的一份提议，基本上等于用当前状态创建一个新的创世区块。这会使得我们可以删去很多验证旧区块的逻辑，并缩短同步时间，比如修剪了上海攻击的部分。

**Flat DB**: Turbo-geth给它们的状态引入了一种新的数据结构，它会减少执行区块所需的随机磁盘读写量。Go-ehtereum目前无法复制这个格式。当我们抛弃旧的eth-protocol版本时，我们就可以采用相似的格式，这样也可以提高gas limit了。

**Pruner**: Geth现在无法使用内存修剪来减少写进磁盘的非必要状态，这回导致每天大约1GB的状态膨胀。

来源：https://twitter.com/vdWijden/status/1358478246879363077

 

以太坊Geth核心开发者@peter_szilagyi也表示反对提高gas limit，因其带来的负面影响可能会给他们团队带来巨大压力 (其团队主要负责维持Geth、EVM、状态管理以及交易混洗等)。Peter表示其团队一直努力安全地提高gas limit，并推进Snap Shot和Snap Sync。他目前有一个新的状态储存方案，可能行得通，也许不行，他表示先在这方面进行研究开发，而不是直接提高gas limit。

来源：https://twitter.com/peter_szilagyi/status/1358393781381459970

 

同时有人提问EIP-1559会提高区块的gas limit吗？

EIP-1559的主要推动者Tim Beiko则解释：EIP-1559不会明显提高区块容量。依据其设计，会有大概1%的区块达到200%，因此最佳情况下是平均增加0.5%的容量，相当于把现在的区块容量提高大约100k。因此，EIP-1559并不会改变block limit，但我们容许区块达到200%满。无论前一个分叉的区块gas limit是多少都不会影响下一个分叉，但如果区块超过100%满，我们会提高基本费用 (如果低于100%满，基本费用会降低)。以及在EIP-1559上线之后，矿工提高或减低block limit的权利维持不变。

来源：https://twitter.com/TimBeiko/status/1356761456688070657?s=20

 

 

 
&lt;br/&gt;

# Eth 2.0

**2.0主网出现批量罚没事件**

2月3日，以太坊 2.0 信标链70多个节点集体遭到slash惩罚，具体罚没细节可访问beaconscan浏览器查看：https://beaconscan.com/slots-slashed

 

随后Staking服务商Staked.us对该事件做出回应：2月2日有75个运行在 Staked 的节点遭到 slash 惩罚，这主要是由于技术性问题，用户将获得全额赔偿。Staked解释称，在过去六周中对性能进行了改善，提高证明率 (attestation rate) ，且使用”canary“对其进行了测试。但是后来因为Staked.us禁用了Prysm客户端的slash保护数据库(因其此前引发了证明遗失问题)，导致一部分验证者对相同的区块进行了双重签名，因此造成了大规模罚没事件。Staked表示将补偿用户的损失。

 

2月5日，beaconscan的数据显示信标链再次出现批量罚没，共17个节点被惩罚。而根据存款合约的数据显示，此次罚没事件仍与服务商Staked.us有关。

 
&lt;br/&gt;

# Layer2

**Layer2互操作性解决方案Connext被引入Decentral Games**

2月3日，Layer2 互操作解决方案Connxet宣布其第一个合作项目“Decentral Games”上线，可以在以太坊和Matic之间快速转移DAI和MANA。Decentral Games 利用二层解决方案Matci来降低gas费，然而，DG的用户每次使用虚拟casino时仍需要通过Matic PoS 桥接将资金在以太坊和Matic之间转移。而Connext可以帮助缩短交易时间。




![connext](https://i.ibb.co/xCHDcHB/layer2.png)


 

&lt;center&gt;cr: connext&lt;/center&gt;

 

**路印与隐私社交产品Mask Network合作**

隐私社交产品Mask Network宣布与二层解决方案达成战略合作关系。Mask在其最新的博客表示，将与Layer2扩容方案、zkRollup以及其他去中心化技术深度合作。而在应用层方面，Mask Network和路印将开发二层“红包”的更多更能，以解决用户的高交易费问题。





 ![mask](https://i.ibb.co/Cz3HB9y/image.png)

&lt;center&gt;cr: mask&lt;/center&gt;

 &lt;br/&gt;

# DeFi

**Yearn v1 yDAI 机枪池被攻击**

2月5日Yearn v1 yDAI机枪池遭受攻击，Yearn 核心开发者Banteg发推表示，攻击者获得280美元，机枪池损失1100万美元。随后审计公司慢雾对其进行了调查，表示该次攻击事件为闪电贷攻击行为。

 

2月8日DeFi流动性协议Curve发推表示，因发现新的Yearn v2池存在漏洞，为保护流动性提供者的资产，该池已被关掉。目前所有资产都是安全的，存款将直接返回至LP的钱包，不需要额外的提取操作。



![curve](https://i.ibb.co/BHhGy8M/Curve.png)

 

 &lt;br/&gt;

# 生态

以太坊浏览器Etherscan发推表示，以太坊上的交易量达十亿笔。




![etherscan](https://i.ibb.co/6sBfyr0/Etherscan.png)
 

&lt;center&gt;cr：etherscan&lt;/center&gt;

 

**灰度发布以太坊价值评估报告**

Grayscale灰度发布了报告，从三个角度对以太坊进行价值评估：ETH作为货币、作为消费商品、作为计息资产。翻译版本指路：《以太坊价值评估》。

 
&lt;br/&gt;
 

# 本期最佳meme

过去的gas费让人怀念~


![meme](https://i.ibb.co/WWMTX5X/meme.png)




 

&lt;center&gt;cr: @EthereumMemes&lt;/center&gt;

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

 

 </content:encoded></item><item><title><![CDATA[以太坊2.0主网客户端性能比较]]></title><description><![CDATA[开发者Afri通过不同的指标来比较2.0客户端的性能]]></description><link>https://www.ethereum.cn/Staking/ethereum-2-0-mainnet-clients</link><guid isPermaLink="false">https://www.ethereum.cn/Staking/ethereum-2-0-mainnet-clients</guid><pubDate>Sun, 07 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [dev.to/q9](https://dev.to/q9/ethereum-2-0-mainnet-clients-3and)

基于最新的性能指标比较以太坊 2.0 主网上所有可用的客户端。

------

2020年12月以太坊 2.0 信标链发布之后，现在是时候介绍以及比较现有的协议实现了。本文作为该系列文章的第一部分，将按照字母排序比较 5 个主要客户端的信标链节点性能和资源利用率。

- **[Lighthouse](https://github.com/sigp/lighthouse)** (Rust, Sigma Prime)
- **[Lodestar](https://github.com/ChainSafe/lodestar)** (TypeScript, ChainSafe Systems)
- **[Nimbus](https://github.com/status-im/nimbus-eth2)** (Nim, Status)
- **[Prysm](https://github.com/prysmaticlabs/prysm)** (Go, Prysmatic Labs)
- **[Teku](https://github.com/ConsenSys/teku)** (Java, ConsenSys Quorum)


以太坊 2.0 主网基础设施由三个主要组件组成:

- 信标链是 PoS (权益证明) 链。当前的以太坊 1.x 链 (共识为PoW) 与以太坊 2.0 合并之后，信标链将成为保障以太坊安全的主干网。

- 验证就好比 PoS 共识中的矿工。[所有人都可以质押 32 ETH 成为验证者](https://ethereum.org/en/eth2/staking/)，有权提议新区块、对区块敲定进行投票，然后获得奖励。

- 罚没者正监视验证者是否作恶，以防攻击事件发生。任何一名验证者违反规则，都会受到惩罚并被移出网络。


需要注意的是，本文主要关注第一点，信标链是以太坊2.0网络的基础。研究人员可以在 Github 上找到所有相关的脚本、数据和绘图，以便进一步分析。

&gt;[byz-f ](https://github.com/byz-f)/ [eth2-bench-mainnet](https://github.com/byz-f/eth2-bench-mainnet)



本文将重点列出这些发现。

&lt;br/&gt;

# 同步指标

第一个也是最令人兴奋的问题：同步以太坊 2.0 信标链节点信息需要多长时间，结果见下图。

![Sync Progress](https://i.ibb.co/nPgzXWv/synchronization-progress.png&quot;)



在上表中，通过比较客户端同步相同的 slot 需要花多少时间来比较其同步进程。在评选结果之前 (虽然这不是本文的讨论范围)，关于该图表我们需要知道三件事。

1.  Prysm (紫色线) 有个特殊的地方是，它会连接以太坊 1.x 节点，从验证者信息登记处获取所有 ETH 存款，然后从 Eth1 状态下构建 Eth2 创世。虽然从安全的角度来看，这一特性蛮有用的，因为用户不必信任 Prysm 的开发者以获得正确的创世状态，但是这一过程需要些时间。因此，客户端启动与同步启动的时间有明显的偏移。([#8209](https://github.com/prysmaticlabs/prysm/issues/8209))。

2.  由于出现 JavaScript 堆内存不足的问题，在基准测试时 Lodestar (灰色线)出现了崩溃 ([#2005](https://github.com/ChainSafe/lodestar/issues/2005))。但是，它在10秒后由脚本自动重启。

3. 不可见：在初始同步时，Loderstar 还没有完全验证所有签名 ([#1217](https://github.com/ChainSafe/lodestar/issues/1217))。因此，目前尚不清楚 Loderstar 与其他客户端的比较情况。


上面的图表中，我们可以看到 Lighthouse (橙色线) 整体表现出色，Prysm、Teku (绿色线) 和Nimbus (蓝色线) 在保持速度方面表现出色。但是，让我们再来看看下面的图表：

[![Sync Progress (Adjusted)](https://i.ibb.co/zNKjkFP/adjusted.png)


在这个图表中，我们把 Prysm 客户端启动和同步启动 (即第一个信标链区块产生) 之间的时间偏移删去。那么可以看出，单纯比较同步速度的话，Prysm 的表现略优于 Lighthouse，不到两个小时就能同步完成，而 Lighthouse 需要两个半小时。Teku 和 Nimbus 大概需要五个小时。


值得注意的是，Eth2 TypeScript 实现 (Lodestar使用的语言) 并不是仅为了成为运行一个全信标链或者验证者节点的首选客户端。相反，Lodestar将为以太坊2.0去中心化应用的所有web、浏览器和基于插件的组件提供基础设施。

[![Sync Speed](https://i.ibb.co/BzK1wRw/speed.jpg)


假设我们知道了客户端的信标头区块当前所在的 slot 高度，并且可以查看在这 60 秒之前区块头的高度的话，我们就可以通过展示各客户端每秒同步的 slot 数 (用点表示)，来计算过去 60 秒的移动平均值以比较各客户端的同步速度。移动平均值超过 10 分钟的则用实线表示。

结果与前一个图表一致。尽管 Prysm 因为要花时间获取 Eth1-状态，它仍是同步速度最快的客户端，每秒同步 60 slots。Lighthouse 紧跟其后，每秒同步 46 slots。稍显落后的是 Teku (23/秒) 和 Nimbus (22/秒)。

然而什么是 slot 呢？在传统的区块链如比特币和 Eth1 链中，要么有区块要么没有。那么当比较这些链上的客户端性能时，我们会以块数/秒为单位来比较其同步速度。这跟以 slot数/秒 为单位有何不同呢？

在以太坊 2.0 中，每 12 秒总有一个指定的 slot。如果验证者被分配到一个 slot 中提议区块，该 slot 便有一个区块。然而，如果验证者错过该 slot，那么便是个空 slot (没有区块)，但尽管如此，slot 的计数将继续进行。因此，在以太坊2.0中，我们以 slots/秒 为单位计算同步速度。

[![Sync Speed (Progress)](https://i.ibb.co/tb1mfC2/over-sync-progress.jpg)


在这个图表中，我们把 (时间) 这一变量删去，横坐标为已同步的 slot 数，并把上一个图表中的同步速度映射到该图表中。所有客户端都显示一个趋势：随着 slot 的增加同步速度下降。由于该数据是在以太坊 2.0 主网上搜集的，我们知道有一条[验证者队列](https://eth2-validator-queue.web.app/)正排队等候进入 2.0 网络。在撰写本文时，等候队列上有 13_458 名验证者，按照每天新增 900 名验证者的速度来算，需要等待将近 15 天。

了解了以太坊 2.0 主网验证者数量呈线性增长之后，我们可以假设活跃验证者集的规模变大使得同步速度减缓。

&lt;br/&gt;

# 计算资源指标

在上半部分中，我们仅分析了同步指标，选出同步最快的客户端。但是哪个客户端在资源利用方面快且高效呢？

[![Disk Usage](https://i.ibb.co/FwZRxDS/disk-usage.jpg)

上面的图表中，随着同步 slot 的数量增加，比较各客户端的数据库容量。值得注意的是，关于完全同步主网节点 (420_000 slots)，Lodestar 的占用空间最小，总共只有 1.49 GiB。Lighthouse (2.98 GiB) 和 Prysm (3.16 GiB) 的结果也不错。

我们知道 Eth1 节点存储完整的区块历史数据。尽管如此，Eth1 节点还是移除了历史状态以最小化数据库所需的磁盘空间。Eth2 节点与这个概念相当。在磁盘上储存所有块的同时，他们会删除最终状态。两者的主要区别为：为了方便起见，应将历史状态存储于时段边界中 (epoch boundaries)。目前，Nimbus 每 32 个 epoch 在时段边界存储状态，然而 Lodestar 每 1024 个 epoch 将状态记录在磁盘中。在图中可以清楚地看出差异。

[![Memory Usage](https://i.ibb.co/yYP34Bh/memory.png)

该图表相同，但是绘制了同步期间每个客户端的常驻内存集的大小。从图中得出，Nimbus 客户端非常高效，在信标链主网的整个处理过程仅需要约 1 GiB RAM。紧接其后的是 Lighthouse 和 Lodestar，均略低于 3 GiB。https://i.ibb.co/q5M3LVF/cpu-usage.jpg

注意：Java 分配给 Teku 的堆外内存不在客户端开发者的控制范围之内。JVM 对可用内存的消耗量特别大。Teku 的指标结果在可用内存总量不同的情况下差异十分大。



[![CPU Usage](https://i.ibb.co/q5M3LVF/cpu-usage.jpg)

最后但同样重要的一点是，让我们看一下 CPU 的利用率。在上面图表中可以看到客户端之间的一些有趣差异。


区块链属于一种高度分层的数据结构。同步区块链数据、验证区块以及计算最新状态，大部分工作都是按序列进行的。因此，客户端面临的挑战便是尽可能地使该进程平行化。图表显示的结果与同步速度指标相当，Prysm 和 Lighthouse 领先 (数值更高意味着更加有效)，而 Teku 保持良好。

&lt;br/&gt;

# FAQ

&gt; 文章不错，但请问为什么你没有比较流量指标呢？

我有比较，只是没有对所有指标比较都进行评论。你可以在 Github 上找到没有进行注释的点对点、流量指标，想要进一步研究的话访问： [eth2-bench-mainnet/doc/00-plots-uncommented.md](https://github.com/byz-f/eth2-bench-mainnet/blob/master/doc/00-plots-uncommented.md)

&gt; 你个人来说推荐哪个客户端？

这个问题很难回答。靠感觉走的话，我选择 Lighthouse，我觉得它的总体用户体验、性能、功能以及工具可用性都很好。然而，Prysm 仍是最成熟并且是目前最快的客户端。Teku 的使用体验也很好，我认为所有客户端都是产品级别的。


&gt; 信标链数据库大小会超过 1 TiB 吗？

不，首先，与 Eth1 相比，信标链本身相对较小。驱动数据库大小的主要因素是信标状态。然而，与 Eth1 相比，Eth2 并不需要将所有状态存储在磁盘中，因为用户总是可以从本地运行的区块中重建任何状态。
除此之外，PoS 有敲定这一工序，而 PoW没有 (reorgs, 51% 攻击)。一旦区块被敲定，该区块永远不会被篡改。敲定的意思是，将来客户端不用再从创世开始同步链的数据，而是获取最后敲定的 epoch 的最新链头的数据。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[以太坊价值评估]]></title><description><![CDATA[灰度探讨了三种对以太坊价值的评估方法]]></description><link>https://www.ethereum.cn/Ecosystem/valuing-ethereum</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/valuing-ethereum</guid><pubDate>Thu, 04 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [grayscale.co](https://grayscale.co/wp-content/uploads/2021/02/VALUING_ETHEREUM.pdf)


自2015年发布以来，以太坊作为第二大区块链网络备受关注。即使以太坊已经发展成为一个强大的结算层，在以太坊内进行点对点价值转移的总额已达数十亿美元，但是投资者仍很难鉴定该投资案例。

我们或许可以退后一步，思考一下比特币的价值主张：旨在成为一个全球的、可验证的结算系统。该结算系统由世界上最强大的计算网络支持与提供安全维护，允许用户高度信任地追踪价值。

以太坊使用类似的方式实现验证，但其逻辑和信息更为广泛。换句话说，以太坊确保链上的应用按照已编码的逻辑运行，不需要第三方或者不存在被干扰的可能性。以太坊创造了一个信任的环境，在历史上，这是交易繁荣的先决条件。

这是否意味着以太坊比比特币更好？不一定——他们专注于不同的领域，做出了相应的权衡。比特币变得固化并相对不灵活，这让人们相信其结算系统将不会任意改变。以太坊具有适应性和灵活性，培育了一个创新和不断迭代的环境。以太坊和比特币有着共生关系，都从外部世界中引入流动性、思想以及价值。比特币是数字生态系统中的首选价值储存，然而以太坊已成为领先的金融基础设施，日交易量超过120亿美元。[1]

 随着以太坊上的交易获得逐渐增加，投资者开始对以太坊这一投资案例感到好奇，并且想知道如评估其原生资产的价值。今年8月，我们发布了一份比特币价值评估报告，以帮助投资者理解比特币这一投资案例，以及他们该如何监控其中重要的基础指标。[2] 同样，本文的目的是概述评估以太坊所需要考虑的因素。比特币被普遍称为数字黄金，但 ETH 的的名称尚不明确。我们探索了三种方法，以及与每种方法相关的指标：ETH 作为货币、ETH 作为可消费商品、ETH 作为计息资产。[3]

 &lt;br/&gt;

# ETH 作为货币

ETH 是支撑迅速发展的去中心化金融体系的原生资产。它作为最小化信任的借贷抵押品，是建立在以太坊之上的应用程序的主要资金来源。在撰写本文时，以太坊网络上约有700万 ETH 作为抵押品被锁定在去中心化协议中，按当前价格计算价值超过90亿美元。

在许多方面，ETH 在以太坊网络上扮演着新时代数字货币的角色。每当用户在以太坊网络上部署智能合约，为该应用提供流动性，或在去中心化交易所进行交易时，都需要支付 ETH 作为网络费用。

虽然比特币社区认为货币的供应量应不变，但以太坊旨在逐渐发行最低数量的 ETH，以充分保障网络的安全。供应量是比特币的主要焦点，然而以太坊网络上应用程序的使用驱动着 ETH 作为货币来使用。

如果投资者确实认为 ETH 是一种货币，那么便值得探索它相对于其他货币的价值。见下文，它从竞争对手手中夺取市场份额的能力，ETH 的定价是否合理?


&lt;center&gt;数据1: ETH市值与其他货币之间的占比 [4]&lt;/center&gt;

![marketcap](https://i.ibb.co/yq4GZMY/1.png)

 


在去中心化金融系统中，越来越多用户使用 ETH 作为抵押品。然而，稳定币 (主要与美元挂钩的数字货币) 和比特币在以太坊中作为抵押品的用例逐渐增加，甚至比使用 ETH 要多。WBTC是以太坊上比特币的合成版本——它使比特币能够在以太坊网络上进行转移。USDT和USDC是以太坊上供应量最多的锚定美元稳定币。
下图显示了WBTC、USDC和USDT的增长情况。尽管 ETH 作为抵押品的用例逐渐被其他一些货币超过，但以太坊作为结算网络的使用将来会不断增加。

&lt;center&gt;数据2：在以太坊上的比特币与美元[5]&lt;/center&gt;

![灰度2](https://i.ibb.co/NNt01qY/2.png)


&lt;br/&gt;

# ETH 作为可消费的商品


ETH 是以太坊网络不可或缺的一部分。网络上的每一笔交易都会产生一定的成本，该成本以 ETH 为单位定价。这些交易费用会分配给矿工。
费用随着网络需求的增加而增加——发起交易的用户必须通过增加其相关费用来“竞争”给定块中的空间。


一些分析指出，也许没有必要用 ETH 支付交易费，而是可以选择任何数字货币支付。这就是所谓的经济抽象，这一概念已被用来挑战 ETH 的价值。同时，一些人认为以太坊存在运营资本或无限速度的问题——作为交换资产的媒介，投资者可能仅会支付所需要的最小额度。也就是说，以太坊将被视为运营资本。[6] 因为投资者可能会寻求将他们的运营资本最小化，而ETH 的速度会增加，根据交换方程M=PQ/V，它的价值会减少。换句话说，持续的出售会降低 ETH 的价格。


然而，以太坊计划实施一项名为 EIP-1559 的提案，[8] 提议销毁用于支付交易的 ETH。这一点很重要，因为它将把 ETH 从一种交易媒介资产转变为一种可消费的商品。ETH 将变得更像gas，而不是货币。如果实施了该提案，将可以确保 ETH 是以太坊上的原生经济单位——提案将规定只有 ETH 可以被销毁。这将减少经济抽象的可能性——用 ETH 以外的资产支付交易费的能力。


如果 ETH 的销毁量超过发行量，该提案也可以视为一种通缩机制。如果以太坊上的交易量增加并且 ETH 的供应量由于销毁机制而减少，供需曲线将表明 ETH 单位价格的增加，因为每个单位将需要满足更大比例的经济活动。如果实施了 EIP-1559这一提案，它将建立一个消费机制，对 ETH 价格产生积极循环反馈。


作为一项商品，ETH的价格将根据市场里的供求关系而波动。幸运的是，以太坊区块链是透明公开的，我们可以分析用户活动以对ETH合理的潜在市场价格进行解读。


我们可以将以太坊网络上收取的每日交易费用总额作为衡量需求的标准，如下图所示。由于ETH是用来支付这些费用的商品，高交易费推高对ETH的需求，好比旅游热会推高对汽油的需求。值得注意的是，2021年一月的总交易费用差不多达到2018年一月高峰期交易费用的5倍。而ETH的价格也几乎接近于2018年的峰值。

 
 

 

&lt;center&gt;数据3:  每日交易费用总额[9]&lt;/center&gt;

![灰度3](https://i.ibb.co/47nw6Ln/3.png)


 交易费是在以太坊网络上用于支付交易的总额。另一个评价ETH价值的方法是把以太坊的历史价格与网络上的销售 (费用)进行比较。下方的图表用“价格与销售额”比率来说明这种关系——比率越低，说明网络产生的收入相对于ETH的历史市值来说越高，因此可能是被低估了。[10]

&lt;center&gt;数据4: ETH的价格与销售的比率[11]&lt;/center&gt;

![灰度4](https://i.ibb.co/VTg70gb/4.png)



 

 

 

 

 


 我们可以通过研究以太坊的持有模式来给方程式的供给方提供数据。在之前评估比特币报告里，我们引入了持有者 vs 投机者指数，里面定义了持有者为1-3年内没有移动资产的人，而投机者为在过去90天里有移动资产的人。这个模式的界定在以太坊上没有那么清晰，因为这个网络还非常新，但我们仍然看到持有者的资产在2020年ETH实现升值300%前达到的顶峰。除了传统投资分析工具外，投资者还可以关注供给模式。

&lt;center&gt;数据5:  持有者 VS 投机者[12]&lt;/center&gt;

![灰度5](https://i.ibb.co/yV8W6bG/5.png)

&lt;br/&gt;

# 作为计息资产

以太坊已经开启了协议开发的下一个阶段，即以太坊2.0。[13] 以太坊2.0旨在称为一条可扩容的、以权益证明为共识的区块链。这意味着持币者可以通过在网络里抵押他们持有的ETH代币称为验证者，而无须矿工通过专门的计算机消耗能源。通过质押，验证者会获得部分交易费 (这部分的交易费在EIP-1559下可能会被销毁）作为奖励，以及他们在网络里所持ETH的增值部分。


这是思考以太坊价值的另一个关键转变。以太坊2.0将把ETH从一种商品转变为一种生产性商品，即持有者可以通过质押ETH产生利息。这种资产结构不同于现实世界的任何一种：商品是用来消费的，股票是提供现金流凭证的。在以太坊2.0下，ETH既可以作为一种商品被消费，又可以作为现金流的占全进行质押，与股权相似。



它一开始的价值来自它的商品用途以及在市场里的供求动态。那些对ETH未来价格有信心的人会通过质押资产来赚取抵押品的收益。这样的质押会进一步减少ETH浮动供给。如果大部分的ETH都用于质押，这会减少可供消费的供应量，这可能会形成以太坊价格的正反馈循环。参考下图看价值是如何在以太坊2.0网络里流动的。主要注意的是，功能完备的以太坊2.0的上线时间目前还未定。



&lt;center&gt;数据 6: ETH的经济学[14]&lt;/center&gt;

![灰度6](https://i.ibb.co/kXtjDGj/6.png)



&lt;br/&gt;

# 其他相关数据


每日活跃地址是评价网络增长的一个有用指标。梅特卡夫定律指出：网络价值的增长等于用户数量的平方，该定律被用于评估Facebook。[15]现在，以太坊上有将近70万个活跃地址。

 

 

 



&lt;center&gt;数据7: 以太坊活跃地址[16]&lt;/center&gt;

![灰度7](https://i.ibb.co/5K0pSM2/7.png)


同样地，以太坊上的哈希率也达到了新高，它是用来衡量矿工用来验证交易的算力的。因为矿工需要等上一段时间才能赚回早期的投资，这也表明了矿工对以太坊能持续产生高交易费很有信心。如果矿工感觉交易费会下降，他们就会不那么愿意投放资源到挖矿上了。

 

&lt;center&gt;数据 8: 以太坊哈希率[17]&lt;/center&gt;



![灰度8](https://i.ibb.co/6nJ8cqK/8.png)





 &lt;br/&gt;



# 结论

以太坊比比特币更年轻，而且协议仍在经历重大变革。因此，目前所用来评估 ETH 的方法论都显得不透明且充满不确定性。将 ETH 作为货币、消费品或一种有息资产，投资者当拥有一笔这样的资产时，会遇到更多的可能性。


对 ETH 资产结构的改善 (EIP-1559)，即通过销毁代币将其转换为可消费的商品，可以作为 ETH 价值的催化剂。该提案还支持 ETH 作为协议的原生资产，降低了可将 ETH 从生态系统中移除这一分析的有效性。最后，如果可以成功向以太坊2.0过渡，投资者将有能力通过质押 ETH 来获益。


在以太坊上的丰富活动、ETH在经济学上的升级、以及以太坊2.0承诺的可扩展性，以太坊社区有太多值得兴奋的事了。我们可以从数据观察到，ETH的价格随网络上的活动而变化。如这份报告通篇提到的，以太坊的多个指标达到新高（包括活跃地址数、哈希率以及网络费用），这些对投资者来说都是一个积极信号。

 &lt;br/&gt;
&lt;br/&gt;



1.Source: Coin Metrics, as of January 25, 2020

2.“Valuing Bitcoin”, August 2020, https://grayscale.co/insights/valuing-bitcoin/

3.David Hoffman, “Ether: The Triple Point Asset,” Bankless (Bankless, October 4, 2019), https://bankless.substack.com/p/ether-a-new-model-for-money.

4.Source: Grayscale, Coin Metrics, Bloomberg

5.Source: Grayscale, Coin Metrics

6.“Multicoin Capital: Understanding Token Velocity, ” December 8, 2017, https://multicoin.capital/2017/12/08/understanding-token-velocity/.

7.“Equation of Exchange,” Wikipedia (Wikimedia Foundation, February 8, 2020), https://en.wikipedia.org/wiki/Equation_of_exchange.

8.Ethereum, “Ethereum/EIPs,” GitHub, November 6, 2020, https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md.

9.Source: Grayscale, Coin Metrics

10.Token Terminal, “The Price to Sales Ratio (P/S),” Token Terminal (Token Terminal, December 11, 2020), https://tokenterminal.substack.com/p/the-price-to-sales-ratio-ps.

11.Source: Grayscale, Coin Metrics

12.Source: Grayscale, Coin Metrics

13.“The Eth2 Upgrades,” https://ethereum.org/en/eth2/

14.Grayscale

15.B. Metcalfe, “Metcalfe’s Law after 40 Years of Ethernet” in Computer, vol. 46, no. 12, pp. 26-31, 2013

16.Source: Grayscale, Coin Metrics

17.Source: Grayscale, Coin Metrics</content:encoded></item><item><title><![CDATA[Eth2进展更新（截至2021/1/29）]]></title><description><![CDATA[Eth2客户端分布分析，敬请留意Eth2 workshop]]></description><link>https://www.ethereum.cn/Eth2/wnie2_210129</link><guid isPermaLink="false">https://www.ethereum.cn/Eth2/wnie2_210129</guid><pubDate>Tue, 02 Feb 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210129)

&lt;br/&gt;

# 文章荐读

基本是回顾和展望。

首荐是Danny 的《Eth2的发展现状 (2021年1月)》（[The State of Eth2, Jan 2021](https://blog.ethereum.org/2021/01/20/the-state-of-eth2-january-2021/)），里面有很多洞见。同时还有一些客户端团队的文章，从不同的角度阐述相近的内容。

- [Lighthouse团队](https://lighthouse.sigmaprime.io/update-33.html)今年的计划。
- [Prysm团队](https://medium.com/prysmatic-labs/prysmatic-labs-2021-update-494def64f0b5)正朝着未来进发 (我们也是)。

&lt;br/&gt;

# 信标链

信标链上的一切都进行得非常好。我们现在有74,000个活跃验证者、15,000名在排队、意味着信标链上已质押了285万个ETH，价值 (按现时价格) 38亿美元。从一开始 (2个月前) 就参与质押的人现在大概已经赚了0.7个ETH （2.2%），虽然年化率现在已经下降到[大约10%](https://twitter.com/Eth2Bot/status/1354957531815309323) 。尽管如此，参与质押的人还在不断[增加](https://twitter.com/terencechain/status/1352127054410498049)。Etherscan做了一个[质押者分解图](https://bi.etherscan.io/public/dashboards/KH9jbP687szqlAnHiNEfNictrwNhvdOEQl0PwB6m?org_slug=default) ，分类包括交易所、质押池、巨鲸与其他。现在看来这个分布还是合理的。

随着人们逐渐熟悉操作，[罚没](https://beaconcha.in/validators/slashings)的频率持续下降，在过去两周仅有3个质押者被罚没了。现在没有任何迹象表明罚没是系统原因造成的，都是质押者不遵循警告操作，以及在多个设备运行同一个验证者。

巴塞罗那超级计算机中心（BSC) 的Leo Bago在EF research的Discord上发布了一些有趣的发现，数据来自他们正在开发的[信标链网络爬虫](https://github.com/leobago/BSC-ETH2/tree/master/armiarma) (他们使用[Rumor的一个分叉](https://github.com/Cortze/rumor/tree/gossip-metrics)来收集数据)

![client](https://i.ibb.co/0rbqW7G/Peers-Per-Client.png)

&lt;center&gt;每个客户端类型与版本的信标链节点分布
(来自 Leo Bago. 点击图片放大.)&lt;/center&gt;

我发现这点非常有趣，涂鸦分析显示在网络里用Teku验证者客户端的比例最少，12%，也就是说Teku节点上运行的验证者数量平均是其他节点的两倍。这正反映了大型的质押运营商比个人质押者更偏向于选用Teku。这符合我们的产品目标，但Teku其实也很适用于个人质押：[它不只是为机构设计的](https://twitter.com/ConsenSysAcad/status/1354419503283712002)！

![countries](https://i.ibb.co/g4q1wKp/peerspercountries.png)


&lt;center&gt;节点所在国家的分布
(来自 Leo Bago. 点击图片放大.)&lt;/center&gt;

## 硬分叉1 (升级)


我在[上一篇更新](https://hackmd.io/@benjaminion/wnie2_210115#Upgrade-1)里写到了今年年中计划的信标链升级 （&quot;硬分叉&quot;）。这个计划具体内容在[HF1提案文档](https://notes.ethereum.org/@vbuterin/HF1_proposal)里写清楚了。客户端团队正在学习这些提议，并计划在下一次开发者会议 (2月11日) 决定哪些内容需要被纳入，哪些需要取消。

## 路线图

什么时候实现分片？什么时候实现合并？这些是我这段时间被问得最多的问题。而我目前还没有很好的答案，抱歉！

如在[上一篇更新](https://hackmd.io/@benjaminion/wnie2_210115#And-beyond)里强调的，我们计划在第一季度写出分片与合并的规范，然后决定优先级与时间线。下周，客户端团队将与以太坊基金会研发团队举办workshop，我们将深入讨论设计细节。此次workshop 是仅限受邀人员参与的，但会有录影在会后公布。你还可以观看此次workshop学习[KZG承诺](https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html) (之前被称为 Kate 承诺)。

如果你想更好地了解接下来几年的发展，阅读上面的“文章荐读”吧。

## 工具

BLS12-381 [Blst](https://github.com/supranational/blst)密码库上线有一段时间了，已经被大部分 (如果不是全部的话) 的客户端团队使用。它是上周[正式宣布](https://medium.com/supranational/introducing-blst-2b6a988d68ee)上线的。

Nimbus团队现在正在举行[dashboard挑战](https://our.status.im/nimbus-grafana-challenge/)，内容是为Nimbus客户端设计一个Grafana数据仪表盘。此次挑战是有现金奖励的，将于2月5日结束。

[Stereum](https://stereum.net/) [更新](https://stereum.net/mainnet-update-for-ethereum2-docker-compose/)了用于信标链主网的[docker编译文档](https://github.com/stereum-dev/ethereum2-docker-compose)。

一个有趣的网站：[u/ZarrenW](https://www.reddit.com/r/ethstaker/comments/l6bk11/i_built_a_site_for_prospective_stakers/) 建了一个网站，收集了大家的质押装备，以帮助新加入的人判断他们可能需要的条件。网站在[这里](https://stakerate.xyz/)；点击搜索，看看上面有哪些内容了。截至译文发布，上面只有6台设备，但如果用心策划的话，我感觉它会很有用。

&lt;br/&gt;

# 释义性资源

Coogan Brennan 的质押文章系列出了[第三篇(《如何监控你的Eth2验证者并分析你的盈亏》](https://consensys.net/blog/developers/how-to-monitor-your-eth2-validator-and-analyze-your-pl/) ，本文写了他监控自己的节点设置，并分析其盈亏。这类文章非常值得读。

还有Jacek偶尔发的thread，会发表一些对客户端进展的看法。最新发布了关于[Nimbus的状态迁移时序](https://twitter.com/jcksie/status/1353655937253441537)的看法。我从中总是能学到很多。

Attestant 对[不活跃的 ETH 进行图表绘制](https://www.attestant.io/posts/charting-inactive-ether/)，多数情况下，这些 ETH 是验证者质押 32 ETH 所积累下来的。这类 ETH 无生产力：不能被使用，不会产生盈利。Jim McDonald 在别的文章中寻找方法以[释放](https://ethresear.ch/t/simple-transfers-of-excess-balance/8263?u=benjaminion)该类 ETH 的生产力。

我一般不会在我的文章中推广一些质押服务 (广告位获取方式请[点击原文查看](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fadvertising))。但是 Rocket Pool 和 OGs 是例外。在即将启动质押池之前，他们发表了[一系列文章](https://twitter.com/Rocket_Pool/status/1352499117444874240)以解释其工作原理。他们对架构进行了透彻的思考，详情看他们发的文章 [&quot;Rocket Pool -- Staking Protocol Part1&quot;](https://medium.com/rocket-pool/rocket-pool-staking-protocol-part-1-8be4859e5fbd)。

Justin Drake 做客 Bankless 播客，与 [Moon Math](https://www.youtube.com/watch?v=ycK3AUTdl1w) 表达了对加密领域的乐观看法。音频和描述请点击[这里](http://podcast.banklesshq.com/49-moon-math-the-bull-case-for-cryptography-justin-drake)。这期播客一点都不技术，而是介绍了我们正在构建以及未来准备构建的一些创新想法。我们终于把“加密”变成“加密货币”。

我在 ConsenSys 的同事 Joanne Fuller 写了一篇关于“[形式化方法](https://consensys.net/blog/developers/embracing-the-power-of-formal-methods-in-my-coding-journey/)”的文章，虽然这严格上来说不属于 Eth2，但也值得一读。因为 Joanne 是使用这些技术来“形式验证” Eth2 规范的成员之一。

最后，有一篇文章探讨了质押奖励的税收问题 (主要从美国的角度来看，但也有点符合英国税收问题)。这篇文章是 12 月的，我又当时漏了这篇。

&lt;br/&gt;

# 媒体

显然，人是会变的。早在 2018 年，因为当时 Coindesk 不断对以太坊进行恶意报道，我出于愤怒拒接接受他们的采访。最近，我不仅在他们平台写[文章](https://www.coindesk.com/time-to-launch-ethereum-2-beacon-chain)，还上了一档[播客节目](https://www.coindesk.com/ethereum-2-0-staking-need-to-know)。我这样做很大程度上是因为 Christine Kim 过去几年来持续而准确的报道。现在，她与 Will Foxley 合作推出了以太坊 2.0 Newsletter &quot;[Valid Points](https://www.coindesk.com/eth-2-0-first-hard-fork-coming-valid-points)&quot;，非常不错。他们甚至在运行他们自己的以太坊 2.0 验证者节点。🎉

Bankless 出了一篇关于以太坊去中心化质押池的文章😉。(哈哈，David 还把 Rocket Pool 称为 OG😂)

&lt;br/&gt;

# 开发者会议

1 月 28 日进行了第 56 次实现者会议。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/200)
- [会议视频](https://youtu.be/_WK3k_k-4w8?t=342)
- 我的[会议速记](https://hackmd.io/@benjaminion/H1FdGQxlx)，以及 Alex Stokes 的[记录](https://twitter.com/ralexstokes/status/1354806080207917065)。


本次会议很快就结束了。除了按照惯例讨论客户端更新之外，我们还就测试网和即将到来的升级时间进行了一些讨论。

&lt;br/&gt;

# 活动预告

- 北京时间2月3日凌晨5点：Eth2研讨会。本次会议只有获得客户端开发团队的邀请才可以参加，但是本周末会放出视频记录，并且会在以太坊基金会的 YouTube 频道上直播。

  - **第一部分：**北京时间2月23日5：10—6:40 am

    主题：分片设计与加密基元

    演讲者：以太坊基金会的Vitalik Buterin 与 Dankard Feist


  - **第二部分：**北京时间2月3日7：00—8:00 am

    主题：Eth1+Eth2合并的图景与方法

    演讲者：以太坊基金会的Danny Ryan与Guillaume Ballet、来自ConsenSys的Mikhail Kalinin



- 北京时间2月4日0点：[以太坊2.0机构质押线上研讨会](https://twitter.com/Consensys/status/1355091856661639170)。四位嘉宾分别来自：ConsenSys Codefi Staking、Securosys、Microsoft以及Ledger。


- 2月5日：Nimbus客户端举办的[dashboard挑战](https://our.status.im/nimbus-grafana-challenge/)的截至日期。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/2/1]]></title><description><![CDATA[L2 解决方案Arbitrum Rollup测试网上线一系列DeFi demo]]></description><link>https://www.ethereum.cn/Ecosystem/eth-weekly-2021-2-1/</link><guid isPermaLink="false">https://www.ethereum.cn/Ecosystem/eth-weekly-2021-2-1/</guid><pubDate>Mon, 01 Feb 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/zmDrRPd/cover.png)

# Eth2
**Eth2核心开发团队Workshop**

Eth2核心开发团队将举行线上workshop，目的在于让社区了解未来Eth2升级的研发进程、制作普及性视频、并收集最新提案的反馈。具体安排如下：
第一部分：北京时间2月23日5：10—6:40 am
主题：分片设计与加密基元
演讲者：以太坊基金会的Vitalik Buterin 与 Dankard Feist
内容：Kate多项承诺的介绍；基于委员会的分片实现设计

第二部分：北京时间2月3日7：00—8:00 am
主题：Eth1+Eth2合并的图景与方法
演讲者：以太坊基金会的Danny Ryan与Guillaume Ballet、来自ConsenSys的Mikhail Kalinin
内容：Eth1与Eth2客户端的关系、可执行信标链的设计、合并eth1引擎 (Catalyst) 的介绍

直播入口：https://www.youtube.com/watch?v=uGeIDNEwHjs

![workshop](https://i.ibb.co/LZFd0JQ/online-workshop.png)

详情：https://hackmd.io/@hww/workshop_feb_2021 （内含参考文档链接）

&lt;br/&gt;

# Layer2
**领取测试币去使用Arbitrum Rollup的DeFi demo啦**

Layer2解决方案Arbitrum Rollup推出测试网dashboard，首次展示其测试网上的DeFi demo。准备在Arbitrum上构建的dApps有：Bancor、Bounce、Burgerswap、Hop、MCDEX以及Swapr。除此之外，Arbitrum测试网还在内部接入了一些热门DeFi项目的端口，如Aarbe (Aave V2)、arBalancer (Balancer)、Arbiswap (Uniswap V2)、FakerDAO (MakerDAO)。除却dApps之外，Arbitrum支持的钱包有 MetaMask、MathWallet、Burner、Portis 、Fortmatic以及WalletConnect，还包括Chainlink、Ankr、Blocknative、The Graph、Truffle、Hardhat、ethers.js、web3.js、Brownie等项目为Arbitrum提供基础设施。

![arbitrum](https://i.ibb.co/Gx9krt7/arbitrum1.png)

Arbitrum Rollup测试网dashboard传送门：https://portal.arbitrum.io/
如何参与测试：访问dashboard，点击网页顶部的“TOKEN FAUCET”进入水龙头领取测试币。
连接Metamask钱包，选择自定义RPC，并复制下列测试网信息，自动领取测试币之后就可以任意使用dashboard中的dApp啦。

![arbitrum2](https://i.ibb.co/d7hNhVk/arbitrum2.png)

进行交易之后，可以在区块浏览器上查看gas费细节：https://explorer.offchainlabs.com/#/

**Optimism如何实现L1和L2之间的存款和提现**

尽管Layer2解决方案Optimism于1月16日就在主网发布软启动，Synthetix也在Optimistic Ethereum上部署了质押功能，但仍然有许多用户不知道L1与L2之间的迁移是如何实现的。@bkiepuszewski发了一条thread解释：
初始设置：在L1上有Synthetic提供的桥接SyntheticBridgeToOptimism以及Optimism合约提供的OVM_L1CrossDomainManager，而在L2上有SynthetixBridgeToBase以及OVM_L2_CrossDomainManager合约。除此之外，还有Sequencer (L2 挖矿节点) 以验证所有L2交易并打包和提交至L1，以及中继器负责转送从L2至L1的信息。
第一步：如果Alice想要存SNX代币进L2，她需要在L1 SyntheticBridgeToOptimism上调用initiateDeposit() 方法以调取她的SNX，放在托管处 (escrow)，然后调用OVM_L1CrossDomainManager sendMessage() 方法。CrossDomainManager将该请求发送到CanonicalTransactionChain中 (该清单展示了所有在L1上的L2交易)。接着Sequencer将在L2上执行这些交易。这将需要调用L2 SyntheticBridgeToBase上的completeDeposit() 方法，以铸造L2的SNX给Alice。
第二步：享受L2上的低手续费交易。L2的Sequencer将L2交易包提交至L1，所有交易会在CanonicalTransactionChain陈列。
第三步：如果Alice想要从L2提现其SNX至L1中，她需要调用L2 SynthetixBridgeToBase的initiateWithdrawal() 方法，这一步允许通过OVM_L2_CrossDomainManager将该交易信息发送至L1中。这时CrossDomainManager改变了其状态，使得Sequencer将新的L2状态提交至L1中。
第四步：现在只需确保Sequencer提交的状态根是有效的，如果没有人提交欺诈证明，证明该状态是有效的，那么该笔交易就不可以回滚了。
第五步：FraudProofWindow通过之后，中继器终于可以将交易信息从L2转送至SynthetixBridgeToOptimism合约。因此OVML1CrossDomainManager可以确保该交易信息是由Sequencer提交给CanonicalTransactionChain的。最后，L1CrossDomainManager将调用SynthetixBridgeToOptimism的completeWithdrawal() 方法，托管的L1 SNX代币就会返回给Alice。

![optimism](https://i.ibb.co/CnHHqzx/optimism1.png)

&lt;center&gt;存款流程图&lt;/center&gt;

![optimism2](https://i.ibb.co/vhmkcJj/optimism2.png)

&lt;center&gt;提现流程图&lt;/center&gt;


**路印开启第二轮L2 AMM流动性挖矿**

自1月6日路印开启第一轮AMM流动性挖矿以来，其总锁仓量超过了1亿美元。上周，UTC时间1月25日0点，路印开启了第二轮流动性挖矿，以下是第二轮的代币对：

![loopring](https://i.ibb.co/MN7DRRh/loopring.png)

更多AMM代币对信息：https://exchange.loopring.io/info/pairs

&lt;br/&gt;

# DeFi
**Curve跨资产交易量达一亿美元**

去中心化交易所Curve平台上的跨资产交易量达一亿美元，总交易数403笔

![curve](https://i.ibb.co/nckqzMq/curve.png)

&lt;center&gt;cr：www.curve.fi&lt;/center&gt;


**在传统金融中寻找DeFi的影子**

DeFi一站式应用Zerion在推特中发了一张图，以便DeFi用户逐一对应其使用的DeFi项目在传统金融中的角色。下图项目大家使用过哪些？

![zeron](https://i.ibb.co/Jsr3765/zeron.png)

&lt;center&gt;cr：@zerion_io&lt;/center&gt;

**Q4 2020 DeFi报告**

ConsenSys Codefi发布2020年第四季度的DeFi报告，报告涵盖的主题包括：快速发展顶起来的稳定币、新型资产 (比特币和Filecoin) 如何在以太坊寻求流动性、中心化金融应如何拥抱去中心化金融、NFT市场、基于社区的社交币、DAO等。
报告下载指路：https://consensys.net/insights/q4-2020-defi-report/

&lt;br/&gt;

# 生态
**Reddit 宣布与以太坊基金会合作**

Reddit论坛于1月28日宣布与以太坊基金会建立首次区块链合作伙伴关系。Reddit称通过这次合作，他们将增加对区块链的资源投入，为以太坊生态加速扩容并提供资源，且把区块链技术的价值与独立性带给更多的Reddit用户。双方的合作由Scaling Bake-off计划开始，目前要开展的工作是在以太坊上打造Reddit扩容应用。此项工作在去年引进的Community Points项目其实已启动，希望可以给与社区用户更多的所有权，并通过他们的贡献 (发文与评论) 获得收益。
详情：https://www.reddit.com/r/ethereum/comments/l6c3kx/reddit_announces_partnership_with_the_ethereum/


**Devcon6延期**

考虑到新冠疫情仍然紧张，以太坊基金会博客于1月26日宣布决定延迟原定于2021年8月于波哥大举行的Devcon，以确保更多的人可以安全地参与其中。至于延期到什么时候，目前还没确定。尽管如此，值得期待的线上活动还有很多，比如将在7月巴黎举行的EthCC。
详情：https://blog.ethereum.org/2021/01/26/the-longer-road-to-devcon/


**Vitalik 向慈善机构 GiveDirectly 捐赠 427 万美元等值 USDC**

2月1日下午，Vitalik 在推特表示向慈善机构 GiveDirectly 进行捐赠，据 etherscan 显示该笔捐赠为 428 万 USDC (约 427 万美元)。 GiveDirectly 主要为全球极端贫困人口提供无附加条件的捐赠，并且接受加密货币支付，目前支持BTC、ETH 及 ERC20代币。

![don](https://i.ibb.co/1qJDf5f/donate.png)

![don2](https://i.ibb.co/M8PVmth/donate2.png)

&lt;br/&gt;

**本期最佳meme**:

![meme](https://i.ibb.co/m6J4nGv/meme.png)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[为什么需要1559? ]]></title><description><![CDATA[本文认为，EIP-1559有益于以太坊的用户体验、经济和安全性。]]></description><link>https://www.ethereum.cn/news/why-1559</link><guid isPermaLink="false">https://www.ethereum.cn/news/why-1559</guid><pubDate>Fri, 29 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [timbeiko/why-1559](https://hackmd.io/@timbeiko/why-1559)



*EIP-1559 是一个相当复杂的提案。本文尝试尽可能用简单的语言解释它的裨益。注意：1559的缺点不在本文的写作范围，这些内容将在此份EIP的&quot;安全问题 (Security Consideration)&quot;部分呈现。*
&lt;br/&gt;

# EIP-1559的裨益

[EIP-1559](https://eips.ethereum.org/EIPS/eip-1559) 提议改变以太坊的费用市场，这份提案将在UX (用户体验)、经济、与安全上给以太坊带来好处。

&lt;br/&gt;

## UX上的裨益


### 总体上提高打包交易速度

在目前的费用市场下，以太坊上的交易经常需要等很长时间才能被打包。因为区块经常是满的，每个新区块里的交易都从上一个区块继承最高的交易费打包。如果一笔交易不能马上被打包 (通常需要很高的gas费)，用户很难估算交易什么时候能被打包。

在EIP-1559之下，区块可以达到“200%满”，也就是说如果把 gas limit 设为12.5m的话，区块实际上最高可以容纳 25m 的gas。区块也会把支付了最低gas费的交易打包进去，即`BASE FEE`。当区块超过容量的100%时，`BASE FEE`会上升。当区块容量低于100%时，`BASE FEE`会下降。

这意味着在大多数时间里，区块都有额外100%的容量来容纳交易。因此，只要发送交易的费用高于`BASE FEE`，且包含了给矿工的小费，交易就会被打包到后面的几个区块里。

`BASE FEE`肯定会在交易被发送与被打包之间上涨。为了帮助解决这个问题，交易需要指定它们愿意支付的最高交易费金额，即`FEE CAP`。交易发送者最后会获得`FEE CAP`减去`BASE FEE`(会被销毁) 与 `TIP`(支付给矿工) 的差额。

另一个角度看是1559使打包交易的价格在协议里变得明晰，而不是在黑盒里。

例如，如果打包的“市价”是100 gwei，且一个用户想要确保他的交易被快速打包，现在的情况是他们需要支付多于100 gwei (由于这部分的值不是协议的一个部分，因此很难估算)，而他们出价的全部会被计为交易价格。而在1559下，如果`BASE FEE`是100 gwei， 用户给出了200 gwei的`FEE CAP`，和3 gwei的小费， 那么他们只需要支付打包到区块的`BASE FEE`和`TIP`。两者的总和与200 gwei的`FEE CAP`之间的差价会返还给交易发送者。

关于这方面的改动对 (特别是新的) 终端用户带来的影响，[这里](https://medium.com/@MicahZoltu/a-tale-of-two-pricing-schemes-dc9c8717906)有一个更详尽的例子。

对于已达“200%满”的区块，有一个需要注意的地方。在这种情况下，费用市场会转为支付最高小费的交易优先打包的拍卖机制，也就是我们现在的系统。由于`BAES FEE`上涨的速度非常快 (大约每5分钟10倍)，这些时段持续的时间应该会很短。也就是说，在1559下，现在的“正常情况”会变为“最差的情况”。

### 更准确的交易价格估算

在1559下，另一项值得注意的UX改善是交易费用估算变得更容易，无论是对1559式的交易还是遗留交易。

如上文所述，为1559式交易估算合适的价格变得很简单：设置高于`BASE FEE`的`FEE CAP`，或者是用户愿意为此笔交易支付的最高费用，设置足以覆盖矿工的计算成本与出叔块风险的`TIP`(钱包在默认情况下会设置小费的值，并随时更新，因此终端用户无须自己设置)。

有趣的是，1559式交易费的简易估算也使得遗留交易 (仍然被支持) 的费用估算更简易。通过参考`BASE FEE`和`TIP`的历史值，交易估算服务将能提供比现在更准确的估算值。[这份研究](https://github.com/barnabemonnot/abm1559/blob/master/notebooks/transition1559.ipynb)提供了有关原因的技术说明。

&lt;br/&gt;

## 经济上的裨益

###  交易费需要ETH来支付

也就是大家所说的”防止ETH的经济抽象“。EIP-1559 会要求在协议里的所有交易都用ETH支付`BASE FEE` 。尽管这听上去好像是小事，但现在的费用市场无法保证支付给矿工的交易费是用ETH结算的，或者可能交易费是由矿工支付，然后把自己的交易打包到链上。

换言之，今天有人可以在链下给矿工支付交易费 (或者在链上以其他资产结算，比如DAI、USDC等) ，然后以0 gas费把他们的交易打包到链上 ([例子](https://etherscan.io/tx/0x77c7d9e5427749fb1379cb02ec8e5117fa3277e743e5556c134de812605a6dde))。这会导致ETH无法成为以太坊网络的首要货币。

在1559下，因为 `BASE FEE`在交易执行中会被销毁，且必须以ETH来支付，交易费需要在链上支付。显然，矿工可以在其他交易里自由选择接收的代币类型，但他们还是需要获取ETH来支付其他类型交易的`BASE FEE`，这在经济上相当于用户直接用ETH支付他们的交易费。

### 越来越大的区块空间需求形成通缩压力

由于每笔交易里的`BASE FEE`都会被销毁，以及对以太坊的区块空间更大的需求会推高`BASE FEE` ，对以太坊区块空间的持续高需求将对ETH的供应量形成通缩压力。也就是说，越多人想用以太坊，`BASE FEE` 会越高，被销毁的ETH会越多，无论是总量还是在每笔交易里。

这样的设计符合“[最低必要发行量](https://docs.ethhub.io/ethereum-basics/monetary-policy/)”原则，并能在网络使用与网络价值间形成一个正反馈循环。

&lt;br/&gt;

## 安全上的裨益

### 减轻近区块头重组的风险

随着区块里交易费总额的不断上升，矿工们会更有动力执行小型的近区块头重组来捕获高额交易费的交易，打包到他们的区块里，而不是让一个有竞争力的矿工赚取交易费。[这里](https://www.cs.princeton.edu/research/techreps/TR-983-16)有一份对这种现象的分析。

在1559下，因为大部分的交易费都会被销毁，矿工执行近区块头重组的动力会大大减弱。

### 使DoS或垃圾信息攻击的成本随着时间呈指数级增长

现在，如果攻击者想对网络发起DoS或垃圾信息攻击，他们的成本是不变的，如果与矿工合作的话，可能会低于市场成本。

攻击者想对网络发起DoS或垃圾信息攻击只需支付足够矿工打包交易所需的gas费，而且这个价格不为其他正在被打包到链上的交易所影响。如果攻击者与矿工合作，他们可以支付低于市场率的价格，因为矿工可以以低价甚至0 gas费把交易打包到区块。

在1559下，因为区块容量可以变成200%满，如果攻击者想用大量的区块空间来攻击网络，这会导致`BASE FEE`上涨。这意味着攻击成本会随时间推移而变大 (例如，非攻击矿工可以继续打包其他用户的交易)，以及攻击者不能以低于`BASE FEE`的价格打包交易到链上。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[质押池的代币经济(下): 质押代币的运作方式]]></title><description><![CDATA[质押池借助什么机制来铸造以及分发质押代币？]]></description><link>https://www.ethereum.cn/Staking/the-tokenomics-of-staking-pools-02</link><guid isPermaLink="false">https://www.ethereum.cn/Staking/the-tokenomics-of-staking-pools-02</guid><pubDate>Thu, 28 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [StakeWise](https://stakewise.medium.com/the-tokenomics-of-staking-pools-what-are-staked-eth-tokens-and-how-do-they-work-2b4084515711)

[上部分](https://www.ethereum.cn/the-tokenomics-of-staking-pools)介绍了何为 staked ETH 代币 (即质押 ETH 所获得的代币)，本文将讲解它们是如何运作的。

&lt;br/&gt;

# 是什么让这些代币得以运行

当谈到 staked ETH 代币如何工作的核心原则时，不同质押池的设计选择之间的差异变得更加难以察觉，但却能带来重大影响。

## 链下预言机

要想有效地解决流动性不足的问题，所持有的 staked ETH 代币必须要准确地映射用户所质押的 ETH 的价值。这要求质押池中的 ETH 总额总是能够为其分发的代币背书。质押池通过追踪他们在信标链上的验证者的余额，并铸造相应的代币。

不幸的是，负责铸造代币的 ERC-20 合约和验证者的余额不在同一条区块链上 (ETH1 vs ETH2)。也就是说，ETH1 链上的代币合约不能直接同步信标链上验证者的余额。质押池通过使用链下预言机来克服这些限制，其工作原理与现在普遍使用的 [Chainlink](http://chain.link/) 类似。

链下预言机以这样的方式允许与信标链通信：首先，一个预言机操作符必须同时运行 ETH1 和 ETH2 节点，以实现同时与两条链通信。一旦两个节点都启动了，预言机将从信标链中收集属于某个特定质押池的验证者的信息，并传输至 ETH1 链的 ERC-20 合约中。一旦信标链的信息提交至 ERC-20 合约中，代币数量 (或者铸造新代币的汇率) 就会根据验证者余额的变化而更新。这种变化可正增长 (如，获得质押奖励)，也可以负增长 (如，产生惩罚)。



![ERC20](https://i.ibb.co/8X8vhFX/erc20.png)









## StakeWise 的信标链预言机的设置。

然而，链下预言机有一个缺点：控制预言机的实体有效地控制着代币的余额。为了缓解这一问题，质押池运营者要求多个预言机同时提交同样的信息才可以通过共识机制更新验证者的代币余额，并且将预言机分布在不同的独立实体中以实现一定程度的去中心化。

当然，这些解决方案还不够理想，建议用户留意质押池是否以足够去中心化的方式运行其预言机。

## 余额更新频率

在 ERC-20合约进行的每一次代币余额更新都要花 gas 费，有时可能花一笔不少的钱。为了减少 gas 费消耗，大多数服务提供商倾向于每天更新一次代币余额。大部分人认为这已经足够了，因为质押的日收益率相当低 (每天0.005% 至 0.063% 不等)，因此没有必要频繁更新。

然而，在发生大规模罚没事件的情况下，每天更新一次可能不足以解决问题。只要验证者触犯了罚没规则，就会受到罚没惩罚，这会导致验证者的余额在几分钟之内大规模丢失 (在最极端的情况下，甚至会损失全部余额)。如果许多质押池的验证者同时被罚没，并且还是 24 小时更新一次余额的话，会造成灾难性的后果。

这里的问题是，任何用户都可以按 epochs 来跟踪质押池中验证者的 ETH 数量 (借助信标链浏览器)。也就是说，他们在余额变化被映射至代币之前，就可以知道其余额将大幅度减少。一旦持有 staked ETH 代币的用户意识到池中的 ETH 与代币供应量不匹配，他们将提前运行 ERC-20 合约并在二级市场中抛售代币以止损。从而使得毫无察觉的流动性提供者承受无偿损失，并且要承担过多的罚没损失。

为了避免这种情况的发生，质押池可以调整代币余额更新频率，权衡 gas 费成本和余额不匹配带来的危机。实际上，质押池不太可能准备更加频繁地更新代币余额 (更别说每 epoch 更新一次了)。相反，他们倾向于通过改进安全性程序来降低罚没风险，或者在罚没事件已经发生的情况下才准备提高更新的频率。

因此，建议池子的用户以及流动性提供者监测池中验证者的余额。将来，类似 Beaconcha.in 这样的可能会提供订阅服务以实时监测罚没事件，这能更加快速地散播罚没信息，使得 staked ETH 代币的二级市场更加高效。

## 收入和损失的社会化

所有池子都按照这样的比例分配其质押收入和损失：用户的质押数额/池中的质押总额。这样做是为了避免某些用户被随机分配到的验证者具有较好或较差的表现，而比其他用户赚得更多或者更少。假设所有池子运营者都没有作恶，那么主要的区别在于，他们被随机分配的验证者提议了更多的区块，这意味着带来更多奖励。因此收益社会化听起来更加公平。

然而，质押奖励社会化仍然可能会给池子的参与者带来一些不公平，尤其是当池子的验证者在排队等候激活时 (截至本文发布，验证者等候队列约18天)。比如，验证者赚得的奖励总额被分给所有代币持有者，然而在新用户存款的同时，池子就会铸造代币并分发给他们。也就是说，不管用户的存款有没有在信标链中激活，只要他们存了 ETH，就会被分得奖励 (因为他们持有代币)。

这意味着池子的收益平均分配给所有参与者，就当所有已质押的 ETH 都在赚取收益中。而实际上并非所有已质押的 ETH 都在产出收益，因为当前的等待激活期约 18 天。因此，代币持有者的年化率将不同于池中验证者的平均年化率，用户应对此有心理准备。





![ETHdeposit](https://i.ibb.co/vHKHWjP/reward.png)



奖励分给池子的所有参与者，即使不是所有已质押的 ETH 都被激活。

某个用户的损失就是另一个用户的收益。这种情况有利有弊 —— 这取决于每个人的看法。

对于刚存款的用户来说，他们可以从这种社会化中获益，因为这允许他们跳过了等候队列，并且从他们质押的那一刻起就开始赚钱了！然而与此同时，这些用户也会更快地开始承担池子的质押损失。


另一方面，其质押存款已经被激活并开始赚取收益的那部分用户，也很乐意让新来的质押者分担一些惩罚，让自己的损失变少。然而，在池子正常盈利的情况下，收益社会化会使得新质押的用户[分割掉原本用户所应有的奖励](https://www.reddit.com/r/ethstaker/comments/kkl74f/what_rewards_have_you_received_from_kraken_so_far/gh5tucj/?utm_source=share&amp;utm_medium=web2x&amp;context=3)from this effect.)。
 
总的来说，质押池中存款增长得越快且停留时间越长，原本存在的质押用户就会被刮分越多的收益。如果池子被普遍使用，让池子分发的代币拥有更大的流动性可以弥补该缺点。

## 收取服务费


质押池的服务费通常在他们所赚得的奖励中扣除，范围从 8% 到 23%。分给用户的奖励会立即扣除服务费，因此用户持有的代币余额的增减也会把服务费算在内。当根据代币的增长率来判断不同质押池的性能时，记住这一点很重要。

比如，分析来自两个池的 staked ETH 代币 (这两个池有着相同的机制和验证者表现)：用户使用服务费较低的池子，其代币数量会增长得更快。

对于评估不同代币在二级市场中的价格及其在 DeFi 应用中的使用，此特点至关重要。净收益率的变化会导致不同的 staked ETH 代币存在价格差异，即尽管在流动性一样的情况下，服务费较低的池子铸造的代币扣除更少的价值。

## 对奖励再质押

人们普遍误以为，质押池会自动对用户获取的奖励进行再质押，因此会产生复合增长。然而这很难办到，根据当前的 ETH2 规范，自动对所得奖励再质押是不可行的，用户应警惕任何声称可以实现自动再质押的池子。只有到阶段 1.5 质押池才可以实现自动再质押和产生复合收益。离阶段 1.5 大概还有 18 个月，所以务必警惕虚假广告。

尽管缺乏本地支持，用户可以通过使用双重代币结构的质押池，从而手动实现再质押。这种质押池的用户可以将质押奖励和存款代币分开出售，以及把收益进行再质押。只要奖励代币可以在二级市场上与 ETH 等值出售，他们甚至可以获得复合回报。



![comparison](https://i.ibb.co/9HXgkSm/comparison.png)




复合收益的效果在长期来看会更加明显，但在短期来看效果也不差。图表假设网络的年化率为 10%。

尽管我们有策略使得 reward ETH 代币的折扣保持在最低，但我们不能保证这行得通。也就是说，除非该概念被证实，否则在阶段 1.5 之前获得质押复合收益对于所有质押池来说都是一个难以克服的难题。

&lt;br/&gt;

# 总结

我们希望大家对 staked ETH 代币的设计选择和代币化原则有了普遍的理解之后，能够激发以太坊社区深刻讨论不同质押池的优缺点。

本文中讨论的某些概念值得进一步分析，尤其是验证者余额变化的社会化，以及代币合约的更新频率，因为这些设置对池子的年化率会产生深刻的影响。

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[质押池的代币经济(上): 何为质押代币？]]></title><description><![CDATA[质押池的代币经济有哪几种实现方式？]]></description><link>https://www.ethereum.cn/the-tokenomics-of-staking-pools</link><guid isPermaLink="false">https://www.ethereum.cn/the-tokenomics-of-staking-pools</guid><pubDate>Wed, 27 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [StakeWise](https://stakewise.medium.com/the-tokenomics-of-staking-pools-what-are-staked-eth-tokens-and-how-do-they-work-2b4084515711)

![cover](https://i.ibb.co/PrTDFfJ/cover.jpg)

本文由 Collin Myers @StakeETH 联合撰写，并由 Cryptotesters 的 Lito Coen 以及 Superfluid 的 Francesco Renzi 编辑。

我们正处于一个充满创新与进步的时代。

我们不需要看太远，现在就有许多创新项目 —— 自 Eth2 Staking上线 以来，各种[第三方质押平台](https://cryptotesters.com/ethereum-staking-platforms)争相推出。有像 Binance 这样的中心化交易所，也有像 Rocket Pool 以及 StakeWise 这样的 DeFi 项目，并且各有不同。


尽管这些项目各有千秋，但是他们有一个共同点：他们都试图提供解决方案，以减少任何人在质押 ETH 时遇到的必要摩擦。这些摩擦有什么？

首先，质押 ETH 有一定的技术复杂性，这超过了一般用户的处理能力。再者，至少需要质押 32 ETH 才能运行一个验证者节点，在 ETH 价格不断上涨的情况下 (截至本文 ETH 价格约 1290 美元)，这对普通用户来说是难以企及的数额。最后，质押的资金将会有 18 - 24 个月的锁仓期，这项安全措施旨在以安全且可控的方式从当前的以太坊区块链过渡到以太坊 2.0。

这三种限制加起来，将许多不那么熟练的用户从高回报率的以太坊质押市场排除在外。

&lt;br/&gt;

# 质押池是如何解决这些问题的？

这就是以太坊 2.0 质押池的用处所在。他们累积多个用户的 ETH，并代表用户运行以太坊 2.0 的质押基础设施，从而使得任何人都能获得质押奖励，无论其技术水平或存款额度如何。

此外，他们通过铸造 ETH1 代币 (作为用户质押本金及其在 ETH2 链上获取的奖励的凭证) 来缓解质押所导致的流动性不足的问题。这些质押代币给持币者提供了机会：用户可以通过在二级市场如 Uniswap 上把代币换成 ETH，从而提前退出质押。他们还能够在 DeFi 中使用 staked ETH 代币 (比如在 Aave 中抵押)。

然而，代币模式在不同的池之间的实现不同，这无疑会给终端用户带来一些严重的影响。例如，Lido 的 stETH 代币与 StakeWise 的 stETH 代币并不相同，因此在二级市场上定价应该不同。同时，Rocket Pool 的 rETH 代币不同于 stETH 实现，就像 CREAM 的 crETH2、Stkr 的 aETH 等等。

简单来说，不同的池的代币机制存在许多差异，因此可能会造成混乱并给终端用户带来不良后果。然而，可以对这些差异进行分类和评估，找出某些池相对于其他池的优势。此外，这种比较分析为我们设计不同的评估方法奠定了基础，从而允许用户在不同的 Eth2 质押代币中获得价格效率。

本文旨在向社区普及不同质押池使用的代币经济类型。我们希望人们能够避免因对产品了解不足而损失惨重，并希望社区能够积极讨论，为在 Eth2 质押池行业中找到有效定价以及套利机会做出贡献。

在本文中，我们将揭开 staked ETH 代币化的神秘面纱，并举例子说明不同的质押池的代币是如何运作的。接下来的文章将重点关注对 staked ETH 代币的评估框架，以及分析代币设计的选择对不同协议的可组合性和可用性会有何影响。 

&lt;br/&gt;

# ETH 代币模型有哪些

主要分为两种模式：单一代币设计 (将质押本金以及奖励一起捕获至同一种代币中)；双重代币模式 (将质押本金以及奖励分别捕获至两种不同的代币中)。



![tokens](https://i.ibb.co/rbWwWbh/token.png)



##  单一代币设计


单一代币结构基于一种 再平衡/再定价 代币概念。这种设计最常用，因其简洁性，大多数质押池都使用它。池子基于用户的存款，为用户铸造单一的代币，从而试图捕获在同一种代币下所累积的质押奖励和惩罚数额。可以通过两种方式完成：

1. 在 Eth2 上累计的质押奖励与惩罚，会通过实时变化的代币余额表现出来 (因此被称为“再平衡”)，在阶段 1.5 中，用户可以凭借其持有的 staked ETH 代币以 1:1 的比率赎回 ETH。

2. 在 Eth2 上累计的质押奖励与惩罚，会通过代币价格表现出来 (因此被称为“再定价”)，在阶段 1.5 中，一个单位的质押代币所能赎回的 ETH 随着池中的奖励和惩罚总额变化而波动。


举例说明这两种代币机制的差异：

1.  **余额变化**：在池中存入 1 ETH，获得 1 枚 staked ETH 代币。


随着池中的奖励和惩罚总额的增减，每位参与者在池中的代币余额也会相应变化。如，1.1 ETH = 1.1 staked ETH 代币余额。因此，用户的质押奖励将被捕获，其地址上的代币余额将不断增加，由池子为用户铸造。等到阶段 1.5，所有 staked ETH 代币将以 1:1 的比率赎回 ETH。

使用该设计的有 [Lido Finance](http://lido.fi/) 和 [Binance](https://www.binance.com/en/eth2)。



![rebalancing](https://i.ibb.co/tBmhFB9/rebalancing.png)



*请注意：staked ETH 代币的余额始终等于池中 ETH 的数量；在整个质押期间，汇率保持为1。*

2. **价格变化**：在池中存入 1 ETH，并根据同期 ETH/ETH2 的代币汇率获取相应的 staked ETH 代币。


池中给定的汇率由池中 ETH 与代币总数的比例决定，并根据池中累计的奖惩总额变化。


假设存款时的汇率是 1，即池子还没有获得任何奖励，则 1 ETH = 1 枚 staked ETH 代币。

随着池中的奖励和惩罚总额的增减，用户的 staked ETH 代币余额将保持不变，但是每个 staked ETH 代币在池中所能赎回 ETH 的数量将会改变。换句话说，1 枚质押 ETH 代币 = 池中的 1.1 ETH。

因此，每枚 staked ETH 代币的价格从 1 ETH 变为 1.1 ETH，这代表着用户的质押收益。到了阶段 1.5，用户将以最终的 ETH/ETH2 比率，凭借所持有的 staked ETH 代币赎回 ETH。

使用这种模式的有 [Rocket Pool](http://rocketpool.net/)、[CREAM](https://app.cream.finance/eth2/)、 [Stkr](http://stkr.io/) 和 [StaFi](http://stafi.io/). 


![repricing](https://i.ibb.co/XkqdGXn/repricing.png)



*请注意汇率的变化 — 它记录了用户质押奖励的增长。*

尽管这两种单一代币设计使用不同的机制来反映收益的累计情况，但是它们有一个共同点：将存款以及奖励捆绑在同一个代币中。  这意味着用户任意时候在市场上购买或出售该代币，或者通过质押获得代币，都是在接收/出售存款本金和过去池中积累的任意奖励。


我们会在另一篇文章中继续讨论这样设计会带来的影响，但是用户在评估不同的质押池时应考虑其设计因素，因为这决定着用户对质押年化率的预期以及对代币在二级市场定价的预测。

## 双重代币设计

相反，在双重代币结构下，有两种再平衡的代币 (分别映射存款和奖励)。

用户在池中的存款 (有人喜欢称之为本金) 映射在 (deposit ETH token) 存款 ETH 代币中。与其他再平衡代币一样，根据用户存入的 ETH，以 1:1 的比率被铸造出来。

用户地址中的 deposit ETH 代币不会增长，而是会生成 rwETH (reward ETH) 代币，按照 1:1 的比率映射用户在池中收益的增长。这些代币的总和组成用户的全部质押余额，可以在以太坊地址之间自由转换，并且和单一代币一样可以在智能合约中使用。


举例说明：

1.  **双重代币**：在池中存入 1 ETH，然后获得 1 枚 deposit ETH 代币 (stETH)。

随着池中奖励的增长，deposit ETH 代币的余额保持不变。然而当它出现在用户的地址中，就会触发 reward ETH 代币 (rwETH) 的生成，以映射池中收益的增长。只要用户持有 deposit ETH 代币，地址中就会产生 reward ETH 代币。

到了阶段 1.5，不管是 deposit ETH 代币还是 reward ETH 代币，都能以 1:1 的比率赎回 ETH。

使用双重代币设计的质押池只有 [StakeWise](http://stakewise.io/) 。



![dual](https://i.ibb.co/nz0jmdR/dual-tokens.png)




请注意，deposit ETH 和 reward ETH 代币的总数总是等于池中 ETH 的总数；两种代币的汇率均为 1。

双重代币结构允许创建一种类似于债券动态的新型混合工具，但是区别在于，双重代币将质押余额分配到不同的应计价值以及不同的现金流预期 (本金和利息) 中。

比如，当用户获得奖励代币时，他们可以在本息分离债券市场 ([STRIPs](https://www.investopedia.com/terms/s/stripbond.asp) market) 中逐渐出售 reward ETH 代币，有些用户就可以不用亲自质押也可以获得质押红利了。</content:encoded></item><item><title><![CDATA[1559状态更新006 🔥]]></title><description><![CDATA[摘要：大型状态测试网出现了漏洞，矿工社区发出反对声音]]></description><link>https://www.ethereum.cn/eip1559-update-006/</link><guid isPermaLink="false">https://www.ethereum.cn/eip1559-update-006/</guid><pubDate>Tue, 26 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [The State of 1559](https://hackmd.io/@timbeiko/1559-updates/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2F1559-update-006)

⭐我已经编译了《1559资源汇总》列表，它包括了分析、文档、释义性文章等分类。⭐

&lt;br/&gt;

# 要点速览👀

- 大型状态测试网出现了一个漏洞，我们正在重启 🐞
- 现在正在完善规范以支持EIP-2718，关于`BASE FEE`操作码的EIP现在在起草中!💅
- Vitalik发表了文章解释为什么主网可以承载“200%满”的区块 !📈
- 关于如何管理交易池，我们现在有了一个“相当不错”的策略✅
-  对1559的交易以及`BASE FEE`操纵有了新的模拟研究&amp;分析!📃
- 有些矿工发出反对1559的声音，我们在想如何才是推动事情发展的最佳办法⛏

&lt;br/&gt;

# 客户端更新⛓

在过去的假期里，客户端方面的工作主要在构建大型状态测试网。简而言之，此测试网旨在创建与主网相仿的条件，用以测试节点在处理大型状态时是否足以负载“200%满”的区块。

我们本来打算在1.15的[实现者会议](https://www.youtube.com/watch?v=KllIW2hqw2I)里计划这个测试，但我们在最后一刻发现了漏洞！Besu用于初始化测试网的一些配置不被其他客户端支持，且在快速修补这个漏洞后，我们发现在`BASE FEE`计算上有一个溢出漏洞。

因为测试网是用Besu的实现来构建的，所以目前最简单的路径是重新生成测试网的数据，这大概需要2周，Besu、Nethermind和Geth才能从头开始同步。这样，其他的漏洞也能在数据生成过程而不是之后被发现。

但无须担忧，同时我们还有很多其他工作需要忙！

随着柏林分叉即将准备就绪，现在是时候更新EIP-1559，以符合EIP-2718。2718对处理多种交易类型提出了一个框架。第一种新的交易类型在柏林通过EIP-2930引入。因此，EIP-1559会成为被引入的第二种新交易类型。与此配合，我们起草了一份关于[增加`BASE FEE` 操作码的EIP](https://eips.ethereum.org/EIPS/eip-3198)。这对于合约直接请求区块的`BASE FEE`很有帮助，且会带来Gas Token以外更好的选择。

最后，Vitalik分享了旨在解决1559里“200%满区块”疑问的[文章](https://notes.ethereum.org/@vbuterin/eip_1559_spikes)。文章很简短，值得一读，以下是文章概要：

- 大区块的多数问题都与平均区块容量有关，而不是区块的最大容量。1559对这个问题并不带来实质性改变[0];
- 大区块难以持续生成主要是因为DoS攻击;
- 柏林之后，EIP-2929将能减轻最严重的DoS攻击;
- 实行EIP-1559后，不断上涨的`BASE FEE`会使得DoS攻击的成本上升得非常快;
- 这会给我们留下“大区块的短时暴涨”问题，由于区块生成遵循泊松过程，这个问题在今天的以太坊已经出现了。

希望这篇文章和我们接下来的大型状态测试网测试能帮我们完成“主网准备清单 ([Mainnet Readiness Checklist](https://github.com/ethereum/pm/blob/master/Fee Market Meetings/mainnet-readiness.md#client-level-open-issues)) ”中`Client-level Open Issues` 部分的最后一项🤞。

&lt;br/&gt;

# 研发更新 🤖

研发方面的三个主要更新有：我们提出了一个当不错的方法来管理EIP-1559下的交易池，关于从我们目前的状态过渡到1559的新模拟研究，以及Nethermind对`BASE FEE`操纵的一些分析。

## 交易池管理

在最近的一次实现者会议里，Ansgar分享了一个关于交易池在后1559时代要如何运作的[简明提案](https://hackmd.io/@adietrichs/1559-transaction-sorting-part2) 。提案针对挖矿与非挖矿节点的方法都基于这样一个事实——在1559下，待处理但能被打包的交易数量在大多数时候都会变得非常少[1].。

对矿工来说，把交易池分为能被打包与不能被打包交易两部分将使他们更容易开启把能被打包的交易打包到区块的工作。对于非矿工节点来说，区别只在于通过`FEE CAP`把交易进行简单分类，尽管不是最理想，但对大多数情况来说已相当不错。

幸运的是，因为交易池行为不属于共识部分，客户端既可以自由改变它们的实现，也可以在网络升级之外的时间更新它。这意味着，我们可以按Ansgar的提议推出1559，同时在有了使用数据后完善所需事项。

由于交易池的主要风险就是没找到足够好的方法，我们认为这点现在已经完成了。在《主网准备清单 ([Mainnet Readiness Checklist](https://github.com/ethereum/pm/blob/master/Fee Market Meetings/mainnet-readiness.md))》打勾✅！

## 过渡到1559

Barnabé和Fred发布了一篇[新的模拟研究notebook](https://github.com/barnabemonnot/abm1559/blob/master/notebooks/transition1559.ipynb)，文章分析了过渡到1559新方式的影响，其中遗留交易可以通过把它们的`FEE CAP`设为`GAS PRICE`，把`TIP`设为`FEE CAP - BASE FEE`仍然保留在网络里。

文章显示当两种类型的交易都能存在在网络里时，gas价格预言机可以根据1559式交易支付的价格来为遗留交易提供更好的价格估算。换句话说，如报告所述，“1559用户的行为驱使预言机更接近真实的市场价格。”

Barnabé在[推特](https://twitter.com/barnabemonnot/status/1349615592139943939)里对研究结果进行了更详尽的解释🐦

## 基本费用的操纵

Nethermind团队一直在研究EIP-1559下`BASE FEE`可能被操纵的不同情景，无论是在以太坊主网还是潜在的本地网络实现，比如[Oiler Network](https://medium.com/oiler-network/oiler-research-eip-1559-basefee-manipulations-6de2d177bd66)。

他们[最近的分析研究](https://medium.com/nethermind-eth/the-manipulation-of-the-basefee-in-the-context-of-eip-1559-4b082898271c)里的一个要点是，尽管在一些情况里，单个行动者可以操纵 `BASE FEE`，把它调高 [2]，但需要矿工卡特尔协作才能把`BASE FEE`往下调。

下图来自该分析研究，显示了能成功通过操纵把`BASE FEE`调低的可能性是基于卡特尔控制的哈希率：

![basefee](https://i.ibb.co/C98J3m4/basefee.png)


报告推荐，为了使卡特尔更难操纵`BASE FEE`，更新规则不应该是对称的。这不是第一次有研究显示`BASE FEE`的更新规则并非最理想的：Tim Roughgarden也在[他的分析](http://timroughgarden.org/papers/eip1559.pdf)里提到这点。


对这个规则的改善在“主网准备清单”里是开放的、“有则更好”的一项。如果你觉得你可以提供帮助请联系我们！

&lt;br/&gt;

# 挖矿问题⛏

最后，过去几周已经看到矿工社区对EIP-1559发出的忧虑。简言之，因为每笔交易里的`BASE FEE`都会被销毁，在EIP-1559下矿工的收入将会减少。

我和其他一起推动EIP-1559的人对此都有不同意见，但尽管的确在EIP-1559下矿工的收入会减少，但以下几点也值得关注：

- 直到最近，交易费一直只占矿工收入很小的一部分 （[来源](https://www.theblockcrypto.com/linked/79452/ethereum-miner-revenue-september-gas-fees)）；
- 收费链可能会导致矿工因争夺高额交易费用而增加近链头重组的风险。（[来源](https://www.theblockcrypto.com/linked/79452/ethereum-miner-revenue-september-gas-fees)）。
- 其他影响矿工收益的因素，比如网络哈希率 ([现在是历史最高](https://etherscan.io/chart/difficulty))和ETH价格 (也接近历史最高)；
- 我们还不知道在1559下被销毁的交易费比率是多少。有可能情况是尽管大多数的交易都是小额小费，但急需尽可能早被打包的交易 (例如：DeFi套利) 会愿意支付高额小费，导致被销毁的部分或收益减少的部分比预期少。**这里欢迎有更准确的估算！**


也就是说，当在最近的一次实现者会议讨论矿工时，我们对做到以下几点达成了共识：

1. 关于EIP-1559的影响，为矿工群体提供更好的文档资料与沟通 （只是一个开始）；

2.  记下支持/反对1559的矿池，最好附上相关的哈希率，并在 AllCoreDevs会议上分享，作为1559相关决策过程的参考。

3. 当在决定是否要在主网上线1559时，要向社区说明，这些反对意见是有被考虑过的，且如果1559上线，为什么这些反对意见没有被采纳。

我创建了一个[discord房间](https://discord.gg/87dV4zX82R)，想要参与1559与挖矿相关讨论的朋友可以前往讨论。我们希望那里的对话保持文明与有效，且如果讨论变得很难看的话我会很快介入协调。🔨

编辑：Alex Stokes也发表了一篇[很好的文章](https://ralexstokes.medium.com/miners-favor-1559-b91e003b63eb)，关于为什么1559可以使矿工激励与社区其他人的利益更一致。

&lt;br/&gt;

# Next Steps 后续工作 ✅

这次更新内容很多，感谢看到这里！以下是接下来要做的工作：

- 解决Besu与其他客户端之间的共识问题，并重启大型状态测试网；
- 当上一个任务完成了，策划一个Besu、Geth与Nethermind在测试网上的性能测试；
- 在1559规范里增加对EIP-2718的支持；
- 关于1559对矿工的影响提供更好的文档资料；
- 接触多个矿工实体，收集他们对1559的意见
- 当以上的工作都完成了，在AllCoreDevs会议上分享成果😁 

再次感谢阅读。下次见！

------

[0] 在1559下，即使我们偶尔有大区块暴涨，`BASE FEE`会快速上涨使得暴涨很快结束。这意味着长时间的平均区块容量不会被严重影响。

[1] 这是因为，平均来说，区块只会用50%的容量。这意味着如果交易的 `FEE CAP`高于 `BASE FEE`，新交易几乎都可以直接被打包到区块里。也就是说，大多数交易不是无法被打包(`FEE CAP`太低) 就是已经被打包了 (因为区块有空间容纳它们)。

[2] 价格可以非常高，大概每20个区块花费250个ETH。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/1/25]]></title><description><![CDATA[lighthouse更新，L2的DeFi Pooling]]></description><link>https://www.ethereum.cn/eth-weekly-2021-1-25/</link><guid isPermaLink="false">https://www.ethereum.cn/eth-weekly-2021-1-25/</guid><pubDate>Mon, 25 Jan 2021 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/X2H1TCr/image.png)

# ETH1

**柏林网络升级规范的草稿已出**

以太坊1.0硬分叉协调者James Hancock在github发布了柏林网络升级规范草稿，这次网络升级包括的EIP有：

EIP-2565: ModExp 预编译的价格调整

EIP-2315: EVM的简单子程序

EIP-2929: 状态访问操作码所需的gas费用将增加

EIP-2718: 包含类型的交易封套

EIP-2930: 可选的访问列表交易

在参与的客户端中的代码合并情况：



![柏林分叉](https://i.ibb.co/0cByVY4/berlin.png)





来源：https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/berlin.md

&lt;br/&gt;

# EIP-1559

继上周Ethermine的母公司Bitfly发起是否支持EIP-1559的投票后，这周Flexpool发布了网站https://stopeip1559.org/，持续更新支持（包含默认）与反对EIP-1559矿池，截至发文，列表如下：



![eip1559](https://i.ibb.co/tMSjSwn/eip1559.png)





针对这个结果，EthCatHeders社区的@poojaranjan表示拥有超过68%的哈希率的矿池表示支持或中立。EIP-1559成为社区一时的“城中热话”，引起了激烈讨论。社区一时涌现了多篇关于EIP-1559的文章，其中包括：

- EIP-1559的主要推动者Tim Beiko写了《为什么需要1559》(Why 1559?) (https://hackmd.io/@timbeiko/why-1559)，以及经过一周跟矿工讨论后推出了一个1559对矿工收入影响的计算表，虽然不是非常精确，但提供了一些参考数据：https://docs.google.com/spreadsheets/d/1nkSPk12XvwRGZ73J9ajQX3ue8PY02CAyuJuygcX7bY4/edit#gid=340398707

- Alex Stokes发表了《为什么矿工也得益于1559》(Miners favor 1559) https://ralexstokes.medium.com/miners-favor-1559-b91e003b63eb

- Micah Zoltu发表了《矿工常见问题》（Miner FAQ) https://hackmd.io/S6kW1MjvT8-SjmaoZTyaJw

- Anthony Sassano发表了《创建一种共生关系》(Creating a Symbiotic Relationship) https://thedailygwei.substack.com/p/creating-a-symbiotic-relationship

  

&lt;br/&gt;

# ETH2

**客户端Lighthouse更新**

Lighthouse的最新更新交代了他们的工作进展以及未来的计划。Lighthouse表示在Eth2的路线图里，他们成功上线了阶段0里信标链的客户端，但还有两个关键部分没完成——执行与分片。对于实现者来说，分片意味提供多个可变状态，且这些状态仅由网络的子集处理；合并意味着把Eth1接入信标链的PoS共识、结束以太坊的PoW、以及让质押在信标链上的ETH流通起来。

对于客户端来说，执行与分片目前的状态如下：

分片：Vitalik提出的DAS (数据可用性采样) 提案目前还不确定是否可行，它需要相当新的加密技术，且在子网络数量方面需要把P2P网络协议推到一个未知领域。

合并：相对来说，Eth1与Eth2的合并实现起来会简单很多。基于2020年8月公布的一个合并原型、11月Mikhail在ethreasearch.ch发表的《可执行信标链》，通过一个跨进程的API把eth1客户端与eth2客户端结合起来，可以实现：

- 使用现有的软件可以减少前置时间以及开发成本
- 避免暴露于现有Eth1协议的重新实现所导致的漏洞
- 保留现在应用与用户使用的API
- 保留大部分现在的Eth1人才与专业知识

Lighthouse未来三个月的计划：

- 信标链的维护与开发
  - 实现弱主观性同步
  - 为2021年年中可能发生的硬分叉做内务操作与奖励分发的准备
  - 提高验证者效率
  - 修补漏洞、特性请求
  - 跨客户端安全性

- 合并的研究
  - 探索Geth和Teku在概念证明里使用的API
  - 理解目前遇到的困难
  - 搜集并理解Eth1开发者与更广社区的想法与意见
  - 尽可能搭建一个Teku/Lighthouse/Geth测试网
- 分片的研究
  - 分析DAS PR，以及在网络里的可行性
  - 对现在的信标链libp2p堆栈进行研究，看可以如何对其进行优化，以符合DAS PR的要求
  - Kate承诺的Rust实现
  - 制作原型

明年计划

- 2021年第二季度：合并或分片的明确规范
- 2021年第四季度：基于第二季度的规范推出的产品前期测试网
- 2022年第一季度：把第二季度的规范推进产品阶段

来源：https://lighthouse.sigmaprime.io/update-33.html



**客户端Prysm的年度总结与展望**

Prysm也回顾了2020年工作，给出了未来的短期与长期计划，长期计划基本与Lighthouse相同，短期计划包括以下几点：

- 优化Prysm的罚没者设计
- 验证者的网站界面
- Eth2的API实现，包括客户端实现间的互操作性
- 弱主观性同步
- 提高验证者效率
- 开发者维基
- 用户参与管理
- 更新频率改为每周一次

来源：https://medium.com/prysmatic-labs/prysmatic-labs-2021-update-494def64f0b5



**去中心质押池Rocket Pool推出解释性文章**

备受关注的去中心化质押池Rocket Pool推出系列文章对其服务进行解释，这周推出的是第一部分《概述与协议用户》。文章介绍到Rocket Pool是一个社区共有的质押协议，它涉及质押代币rETH、智能合约dApp、钱包提供者、交易所、还有质押节点运行者，各种角色都可以参与其中。

详情：https://medium.com/rocket-pool/rocket-pool-staking-protocol-part-1-8be4859e5fbd

![rocketpool](https://i.ibb.co/7Cz5cKD/rocket-pool.png)





**blst库首次公开发布**

Superanational首次公开发布blst，它是一个基于IETF (国际互联网工程任务组）BLS 签名规范的快速签名库，使用BLS12-381曲线。这个签名库旨在支持多种编程语言 (Go、Rust、C++等)，操作系统 (Linux、Mac、Windows)，以及硬件平台 (x86、ARM)。blst已通过NCC Group的安全审计。

来源：https://medium.com/supranational/introducing-blst-2b6a988d68ee

&lt;br/&gt;

# Layer2

**StarkWare即将推出DeFi Pooling**

以太坊二层解决方案StarkWare在其最新发布的博客中表示，即将推出DeFi Pooling，旨在提高Layer1上现有项目的可扩展性。文章介绍，Layer1上尽管出现了诸如YFI的机枪池此类的项目，但在池中存款、提现、再平衡的手续费仍让普通持有者望尘莫及。为了解决该问题，StarkWare预估在今年5月份上线StarkEx3.0，在该版本中推出DeFi Pooing：允许用户通过他们的L2 账户在Aave、ComPound、YFI、Harvest等DeFi项目上进行交易，从而省下一大笔gas费。

以下为DeFi Pooling的具体运作：



![defipooling](https://i.ibb.co/K012KSn/starkware.png)

 



cr: StarkWare

 

 

**路印交易所上线ETH、DAI以及LRC的快速提现功能**

路印创始人Daniel 于19日发推并附视频介绍：路印交易所exchange.loopring.io现已上线ETH、DAI、LRC的快速提现功能，用户可以在30秒内将资金从Layer2提现至Layer1中。

视频：https://twitter.com/daniel_loopring/status/1351467899274240000?

 

**基于Celer Network的游戏平台用户量达百万**

状态通道解决方案Celer Network 发文回顾了2020年的进展，并列出了2021年的路线图。该文章提到，基于 Celer Network 搭建的移动电子竞技游戏平台 CelerX 在全球范围内超1百万用户，用户进行了 2,000 万次游戏，交易总额达 2,000 万美元。





![celer](https://i.ibb.co/mytNXPQ/celer.png)

 

cr: Celer Network

&lt;br/&gt;

# DeFi

**Yearn V2正式上线**

1月18日，Yearn V2正式上线。V2调整费用结构，并允许在单一机枪池内部署多种收益策略。



![yearn](https://i.ibb.co/KKjq9YF/yearn.png)

 

cr: yearn

 

 

**Yearn社区投票通过回购并重建Yearn的提案**

提案获得了99.44%的支持率。该提案提议：1. 利用YFI的质押奖励在公开市场上回购YFI，以奖励贡献者和支持其他Yearn活动。2. 淘汰YFI治理金库，并用常规机枪池取代。3. 即使YFI代币已用于其他地方，也允许参与YFI治理。

 

**Yearn团队发起铸造6666枚YFI代币的提案**

该提案提议铸造6666枚YFI代币，其中1/3的YFI用于奖励主要贡献者，其余2/3归资金库管理。社区成员分析了其他项目的代币分配情况，发现其他项目通常会为贡献者保留20-30%的代币分配量，但Yearn并没有合理的贡献者激励措施。目前该提案已获得212赞成票（约70%支持率），但没成为正式YIP进行投票。

 

![uni] (https://i.ibb.co/T28KCVT/Uniswap.png)



Unsiwap 创始人 Hayden Adams 发推说，按当时价值约5亿美元的UNI已锁定在治理社区资金库，并征求社区使用这笔资金的意见。

 

**由社区构建的多服务DeFi平台Stake DAO上线**

1月21日，Stake DAO正式启动，这个由社区构建的多服务DeFi平台集合了Yearn、Curve、Pickle、Badger等项目。也就是说用户仅通过该平台就可以在为多个DeFi项目提供流动性并获取奖励及其原生代币Stake Dao Token (SDT)。

 

GMT时间1月20日22:37:13起，Stake DAO开始为期12天的空投，空投数额为150 万个SDT代币 (占 SDT 总供应量的 1.5％)。符合以下条件之一便可领取空投：Gitcoin 第 8 轮捐助者 (39％)、JULIEN 持有者 (5%)、RektHQ的注册用户 (5％)、Lido 合约存款者(5％)、Arbitrage DAO 用户 (1％)、以及参与 Aave、Aavegotchi、Aragon、Aragonchina、Archerdao、Badger DAO、Cartel、Cover、Cream、Curve、D5、Dai、Dollar protocol 等协议治理的用户 (45%)。从 GMT 时间 2021 年 1 月 20 日 22:37:13 开始，用户可申领 SDT 空投，经过 48 小时之后，可申领金额将开始连续 10 天每天减少 10％。

 

Stake DAO于24日宣布其开启质押功能，用户可以在Stake DAO dashboard上质押SDT-ETH Uni LP代币并获取SDT奖励。

![stakedao](https://i.ibb.co/TkcwTkv/stakedao.png)

 

cr：Stake DAO

 &lt;br/&gt;

# 生态

专注于隐私的浏览器 Brave 宣布支持引入对星际文件系统 (IPFS) 的支持，将IPFS集成到其Windows、macOS以及Linux版本的浏览器中。



![brave](https://i.ibb.co/Bs022d0/brave.png)

 

cr：techcrunch.com

 

以太坊的起点

![meme](https://i.ibb.co/ScF56D3/image.png)





cr：@EthereumMemes

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[Vitalik：论社交恢复式钱包的必要性]]></title><description><![CDATA[摘要：传统钱包安全性面临挑战，社交恢复式钱包如何保障用户资产？]]></description><link>https://www.ethereum.cn/social-recovery-wallet</link><guid isPermaLink="false">https://www.ethereum.cn/social-recovery-wallet</guid><pubDate>Wed, 20 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/01/11/recovery.html)

&lt;br/&gt;

*感谢 Argent 的 Itamar Lesuisse 和 Loopring 的 Daniel Wang 提供反馈。*


加密货币和区块链应用对普通用户来说，其可用的最大挑战之一无疑是安全性：我们如何防止用户的资金丢失或被盗？丢失和被盗是不可忽视的问题，致使无辜的区块链用户损失数千美元，甚至在某些情况下丢失其大部分净资产。


多年来，有许多解决方案被提出：纸钱包、硬件钱包和[多签钱包](https://bitcoinmagazine.com/articles/bitcoin-self-defense-part-i-wallet-protection-1368758841) (我个人一度的最爱)。实际上这些方案确实显著改善了安全性，但都存在各种缺陷：防盗和防丢保护功能可能远远低于实际需要，或是操作的不便利导致极低的采用率。但是最近出现了一个更好的替代方案：一种称为“社交恢复式钱包” (social recovery wallet) 的新型智能合约钱包。与以前的选择相比，这类钱包可以提供更高的安全性和更好的可用性，但距离轻松且广泛的部署，还有一段路要走。 **这篇文章将介绍什么是社交恢复式钱包、其重要性何在，以及我们应该如何在整个生态系统中对其进行更广泛的采用。**

&lt;br/&gt;

## 钱包安全性问题非同小可


可以说从区块链行业发轫之初，钱包安全性问题就一直困扰着生态系统。在2011年，当时比特币几乎是当时唯一的加密货币，丢失和被盗事件频发。在建立以太坊之前，我作为 [Bitcoin Magazine](https://bitcoinmagazine.com/) 的联合创始人和作者撰写了一篇文章详细介绍当时加密货币中发生的攻击、损失和盗窃事件。

这是其中一个例子：


&gt; 昨晚约 PDT 时间晚上九点，我点击了一个连接进入 CoinChat[.]freetzi[.]com，并被提示运行 Java。我这么做了(我以为这是一个正常的聊天室)，随后什么也没发生。我关闭了窗口，没有多想。大约 14 分钟后我打开了我的 bitcoin-qt 钱包，然后看见了一个并未经我批准的交易，几乎将整个钱包的资产都转移到了另一个钱包……


这位用户丢失了 2.07 个 BTC，当时价值 300 美元，现在已经超过 7 万美元。还有一个例子：  

&gt; 2011 年 6 月，Bitcointalk 成员 allinvain 丢失了 25000 个 BTC (时值 50 万美元)，起因是一个未知的入侵者以某种方式直接访问了他的电脑。攻击者能直接获取 allinvain 的 wallet.dat 文件，然后迅速将钱包洗劫一空——从 allinvain 的电脑发送交易，或是在自己的电脑中上传 wallet.dat 文件并将其清空。


按照现在的价值来算，其价值近一百万美元。但盗窃并不是唯一的问题，还有私钥丢失的例子。来看看 Stefan Thomas 的故事：

&gt; 比特币开发者 Stefan Thomas 的钱包有三处备份：一个加密的 USB 设备、一个 Dropbox 帐户和一个 Virtualbox 虚拟机。他设法抹除了其中两个，但是忘记了第三个备份的密码，永远失去了 7000 BTC (当时价值 12.5 万美元)  的访问权限。Thomas 回应说：“ 从那时起，我一直致力于开发更好的客户端。”

根据比特币生态系统的一份分析，[每天可能有 1500 BTC 丢失](https://news.bitcoin.com/analyst-1500-bitcoins-lost-every-day-less-than-14-million-coins-will-ever-circulate/)，超过比特币用户[交易手续费](https://ycharts.com/indicators/bitcoin_total_transaction_fees_per_day)的十倍，随着时间推移丢失的比特币总量[占其总供应量的 20%](https://www.investopedia.com/news/20-all-btc-lost-unrecoverable-study-shows/)。这些故事和数字都指向同一个不可避免的事实：**钱包安全性问题的重要性非同小可，不应该被低估。**


我们很容易得出钱包安全性容易被低估的社会和心理原因：人们不希望在总是具有批判性的公众面前显得愚蠢或粗心，结果其资金往往容易被盗。而丢失资金就更是如此，因为普遍 (尽管在我看来非常不正确) 的看法是“要怪只能怪自己”。**但现实是，包括区块链在内的数字技术，其目标在于使人们能更轻松地参与复杂事务，而无需付出极大的脑力劳动或是活在担心失误的恐惧中。**如果一个生态系统解决丢失和被盗问题的方式仅仅是 12 个步骤的教程、不太安全的对策和不那么偶然的讽刺性的“对您的损失感到抱歉”的回应，其将很难被广泛采用。


因此，旨在降低资金丢失和被盗风险的方案开始被采用，这些方案不需要加密货币用户消耗过多精力和时间来维护个人资产安全性，并且对于整个行业来说也是非常有价值的。

&lt;br/&gt;

## 光靠硬件钱包还不够

硬件钱包经常被宣扬为加密货币资产管理的最佳技术。硬件钱包是一种专用硬件设备，可以连接到用户的计算机或手机 (例如通过 USB)，并且包含专用芯片，该芯片只能生成私钥和签署交易。用户能在计算机或手机上发起交易，并且必须在硬件钱包中确认后才能发送。私钥保留在硬件钱包中，因此，攻击计算机或手机中*无法*将资金洗劫一空。


硬件钱包是一个意义重大的进步，可以避免上述的 Java 聊天室案例，但硬件钱包也不是尽善尽美的。在我看来硬件钱包有两大问题：

- **供应链攻击**：如果你购买了一个硬件钱包，就相当于你信任其生产过程中的许多参与者，包括设计钱包的公司、生产钱包的工厂以及运输过程中的经手人，他们可以调换钱包。硬件钱包可能会引来此类攻击：资金被盗的概率与被盗设备数量相关性非常高。值得称赞的是，诸如 Ledger 之类的硬件钱包生产商已经采取了许多保护措施来防范这些风险，但并不是万事大吉了。从根本上来说，硬件设备不像开源软件，无法进行审计。

- **单点故障**：如果有人站在你的身后目睹你输入 PIN，然后偷走了你的硬件钱包，他们就能窃取你的资金。如果你丢失了你的硬件钱包，你也就丢失了你的资产，除非硬件钱包在初始设置时生成并输出备份，但正如我们看到的一样，仍然有不同的问题存在。

&lt;br/&gt;

## 光靠助记词也不够


许多钱包 (无论是硬件还是软件) 都有一个初始设置过程，在此过程中会输出一些**助记词短语**，这是钱包根私钥的编码，形式是人类可读的 12-24 个单词。助记词短语如下：

``` Powershell
 vote    dance   type    subject valley  fall    usage   silk
 essay   lunch   endorse lunar   obvious race    ribbon  key
 already arrow   enable  drama   keen    survey  lesson  cruel
```



如果你丢失了钱包但保留有助记词，则可以在设置新钱包恢复帐户时输入助记词，因为助记词包含根密钥，可以从中生成所有其他密钥。

助记词有助于防止丢失，但是对资金被盗的情况来说于事无补。更糟糕的是，如果你有标准的硬件钱包+助记符备份组合，那么无论是硬件钱包+ PIN 被盗或助记词备份被盗都会导致资金损失。此外，要保证保护好助记词并且不意外丢失本身就是一项的精神负担。

如果将短语五五分，然后将一半交由朋友保存，可以减轻盗窃的问题，但是 1) 几乎没有人真正推广这种行为；2) 存在安全问题，如果助记词很简短 (128位)，那么一个死磕的攻击者，偷走一半之后可能会暴力寻找其余 264 种可能的组合来找到另一半，并且 3) 进一步增加了精神负担。

&lt;br/&gt;

## 那我们需要的是什么？


我们需要的钱包设计要满足以下三个标准：

- **不存在单点故障**：不存在会被窃取的事物，从而使攻击者可以获取您的资金，或者即使丢失了，也可以拒绝获取资金。

- **减轻精神负担**：尽可能不要求用户学习陌生的新习惯或付出脑力，以始终遵循某些行为模式。

- **交易便捷**：进行大多数正常活动不应该比常规钱包花费更多的精力 (例如 Status 和 Metamask 等等)

&lt;br/&gt;

## 多签还不错！


早在[2013年]((https://bitcoinmagazine.com/articles/multisig-revolution-incomplete-1406578252))，解决这些问题的最佳技术是多重签名 (multisig)。你可以拥有一个配有三个密钥的钱包，需要其中任何两个密钥才能发送交易。



![d1](https://i.ibb.co/WghGfv0/diag1-1.png)




最初这项技术是在比特币生态中开发的，但是以太坊现在也有优秀的多签钱包 (例如 [Gnosis Safe](https://gnosis-safe.io/))。多签钱包在组织内部的应用十分成功，以太坊基金会使用 4-7 多签钱包来存储[资金](https://etherscan.io/address/0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae)，以太坊生态中许多其他的组织也应用了多签钱包。


对于多签钱包来说，要替“个人”持有资金主要的挑战是：谁持有资金？如何批准交易？最常见的公式是“由用户持有的两个易于获取但独立的密钥 (例如笔记本和手机)，而第三个密钥是更为安全且更难获取的备份，线下保存或是由朋友或者组织持有”。


这是相当安全的：任何单一设备丢失或被盗不会导致你无法使用资金。但是其安全性远非完美无缺，如果能窃取某人的笔记本电脑，那么窃取他们的手机通常来说也并不难。可用性也是一个挑战，因为每笔交易现在都需要使用两个设备进行两次确认。

&lt;br/&gt;

## 社交恢复更胜一筹


这是我个人比较倾向的钱包保障方式：社交恢复。其运行机制如下：

1. 有一个单独的“签名密钥”用以批准交易

2. 还有一套至少由三个成员组成的“守护者”，其中大多数人联合起来可以改变账户的签名密钥

   

签名密钥能够增加或减少守护者，这个过程存在延迟 (通常为 1-3 天)。



![d2](https://i.ibb.co/mhrksch/diag2-1.png)



在正常情况下，用户都可以像普通钱包一样简易使用社交恢复式钱包，并使用其签名密钥对消息进行签名，从而使每个已签名的交易都可以通过一次确认点击快速完成，操作如同“传统”钱包 (如 Metamask)。


而社交恢复式钱包真正发挥作用的地方，就是用户丢失签名密钥的情况。用户可以联系他们的守护者，并要求他们签署一个特殊交易，以更改其在钱包中注册的签名公钥。这其实不难，他们可以访问一个网页 (比如[security.loopring.io](https://security.loopring.io/))，登入之后收到一个恢复请求，然后进行签名。守护者的操作可能就像在 Uniswap 上进行交易一样简单。


守护者有很多可能的选择，其中最常见的三种选项是：

- 钱包所有者自己的其他设备 (或是纸质助记词)
- 朋友或是家庭成员
- 组织机构，在收到你的电话号码或电子邮件确认后签署恢复交易，或者在所设价值较高的情况下通过视频通话来验证你的身份


添加守护者也很容易，只需输入 ENS 域名或 ETH 地址即可添加监护人，尽管大多数社交恢复式钱包都要求守护者在恢复页面中签署交易以同意添加。在任何设计合理的社交恢复式钱包中，守护者无需下载并使用同一钱包，他们可以使用其现有的以太坊钱包，不受类型限制。鉴于添加守护者的便利性，如果你的社交圈由以太坊用户组成，我个人更偏向设置较多守护者 (最好是7个以上)，以提高安全性。如果你已经有了一个钱包，那么就不需要守护者不断保持注意，你可以通过现有的钱包进行任何恢复操作。如果你不认识足够的活跃以太坊用户，那么设置数量较少且懂得操作的守护者是更好的选择。


为了减少守护者遭受攻击和串谋的风险，**不必要公开守护者，实际上，他们不需要知道彼此的身份。**这可以通过两种方式来实现。首先，将守护者地址列表的哈希存储在链上，而非守护者的地址，并且钱包所有者只需要在恢复时发布完整列表即可。其次，可以要求每个守护者确定性地生成一个新的地址，仅以用于当次恢复。除非实际需要恢复，不然他们不需要使用该地址发送任何交易。为了配合技术上的防护，**建议选择来自不同社交圈的、具有差异性的守护者 (理想情况下包括一个机构守护者)**，这些方案使守护者很难同时受到攻击或是进行串谋。


如果钱包所有者去世或是永久丧失行为能力，这将是一项社会认可的标准协议，守护者可以公开其身份，以便在这种情况下他们可以找到彼此并恢复资金。

&lt;br/&gt;

## &quot; 社交恢复式钱包并未背叛“密码学价值”，而是一种体现


对于任何形式的多重签名，社交恢复等等使用建议的一种常见反应是，这些解决方案最终还是要追溯到“信任他人”这一点上，因此是对区块链和加密货币行业价值的背叛。虽然我理解人们为什么会在乍看之下产生这种想法，但我还是认为，这种批评源于对密码技术的误解。


对我而言，密码技术的目标绝不是消除**所有形式的信任**。**相反，密码技术的目的是使人们能够使用密码学和经济学来构建事物，从而增加可信任对象的选择，并进一步建立更多有限的信任形式：**可以授予某人代表你进行某些行为的权力，而无需授予全权。从这种角度来看，**多重签名和社交恢复是这一原则的完美体现：**每个参与者对能否接受或拒绝交易都有一定影响，但是没有人能单方面转移资金。与必须由个人或密钥单方面控制资金的情况相比，这种更复杂的逻辑引入了安全得多的设置。


“谨慎地运用人的输入而非彻底抛弃”这一基本理念是有效的，因为这可以很好地与人脑的优缺点相适应。人脑非常不适合记忆密码和保存纸钱包，但却是用于追踪与他人关系的 ASIC。对于非技术用户来说，其效果甚至更强。他们可能在使用钱包和密码时遇到麻烦，但是他们与技术用户一样擅长处理诸如“选择七个不会全部勾结起来欺骗我的人”之类的社交任务。如果我们能够从人类输入中提取一些信息到某种机制中，而又避免使这些输入成为攻击向量，那么我们应该弄清楚如何实现。社交恢复非常稳健，要破坏一个拥有七个守护者的钱包，七个守护者中至少有四个需要以某种方式识别彼此并勾结起来盗取资金，其中任何一个人都不能向钱包所有者通风报信，这比起攻击一个[纯粹由个人维护的钱包]((https://bitcoinmagazine.com/articles/bitcoin-self-defense-part-i-wallet-protection-1368758841))要困难许多。

&lt;br/&gt;

## 社交恢复如何防止盗窃？

上文所述的社交恢复讨论到了“丢失”钱包的风险，但是仍然存在签名密钥被“窃取”的风险：有人侵入你的计算机，在你已经登入的情况下趁虚而入，然后给你当头一棒，甚至只是通过制造用户界面故障来引诱你签署交易。

我们可以通过添加保险库来增强社交恢复能力以应对此类问题。每个社交恢复式钱包都可以附带一个自动生成的保险库。只需将资产发送到保险库地址即可将其转移至保险库，但要将其转出保险库需要一周延迟时间。在延迟期间，签名密钥 (或监护者) 可以取消交易。如果需要，还可以对保险库进行编程，以便可以立即进行一些有限的操作  (例如在白名单代币之间进行 Uniswap 交易)。

&lt;br/&gt;

## 既有的社交恢复式钱包


目前已经有两个主要的钱包实现了社交恢复功能，[Argent](https://www.argent.xyz/) 以及 [Loopring](https://loopring.io/):

![loopring](https://i.ibb.co/0qb2wzp/loopring.jpg)

&lt;br/&gt;

![argent](https://i.ibb.co/MCWdWS0/argent.jpg)

 





Argent 钱包是首个且最受欢迎的“智能合约”钱包，社交恢复是其卖点之一。Argent 钱包加入了可以对监护者进行增删的界面：



![recovery](https://i.ibb.co/02YR1qC/argentrecovery.jpg)






为了防止盗窃，钱包设有每日限额：达到该金额的交易可以即时进行，但超过该金额的交易需要守护者批准才能完成提款。


Loopring 钱包为大家所知可能因为它是由 [Loopring 协议](https://exchange.loopring.io/) (用于支付和去中心化交易所的 [ZK rollup 方案](https://vitalik.ca/general/2021/01/05/rollup.html)) 开发者及支持者构建的。但是 Loopring 钱包还具有社交恢复功能，与 Argent 中的功能非常相似。在这两种情况下，钱包服务商都免费提供一位守护者，该守护者通过手机发送的确认码来对用户进行身份验证。用户可以通过提供以太坊地址来添加同一钱包的其他用户或任何以太坊用户作为其他守护者。


两个钱包的用户体验都非常顺滑。可能存在两个挑战。首先，两个钱包中的操作顺滑度都依赖于钱包商的“中心化”中继者 (relayer)，将已签署的交易重新发布出来，其次费用较高。所幸这两个挑战都是可以解决的。

&lt;br/&gt;

## 迁移到 L2 (rollups) 可以解决其他挑战


如上所述，**存在两个主要挑战：1) 依赖中继者 (relayer) 来处理交易，以及 2) 交易费用高**。在以太坊应用中，对中继者的依赖是一个日益普遍的问题。出现此问题的原因是，以太坊中有两种帐户类型：由单个私钥控制的**外部帐户 (EOA)** 和**合约账户**。以太坊有一条规则，即每笔交易都必须始于外部账户。最初的意图是外部账户代表“用户”，合约账户代表“应用程序”，并且仅当用户与应用程序交互时，该应用程序才能运行。如果我们想要机制更加复杂 (如多签和社会恢复) 的钱包，则需要使用合约来代表用户。但一个新的挑战随之而来：如果你的资金在合约账户中，则需要拥有一个其他有 ETH 余额的账户，以支付每笔交易，一旦交易费用迅速攀升，可能需要大量的 ETH。


Argent 和 Loopring 的解决方案式亲自运行中继者。中继者侦听用户提交的链下数字签名的消息，并将这些消息打包在交易中，继而发布到链上。但是从长远来看，这不是一个好的解决方案，因其带来了中心化问题。如果中继者发生故障，而用户需要发送交易，虽然他们始终可以从自己的外部账户发送交易，但是仍然需要在中心化和使用不便之间引入新的权衡。有解决方案尝试在去中心化的情况下解决这个问题并提升操作便利度。主要的两种解决方案一是创建一个[通用型去中心化中继者网络](https://docs.opengsn.org/learn/)，二是修改以太坊协议以[支持交易从合约账户发出](https://our.status.im/account-abstraction-eip-2938/)。但是这些方案都不能解决交易费用的问题，实际上由于智能合约本来就更复杂，可能会加剧问题严重性。


**幸运的是，我们可以寻求第三种解决方案同时解决这两个问题：将生态系统移至[二层协议](https://vitalik.ca/general/2021/01/05/rollup.html)，例如 optimistic rollups 和 ZK rollups**。Optimistic 和 ZK rollups 可以设计为内置抽象，无需中继者。现有的钱包开发人员已经在研究 rollups，但是最终要整体迁移到 rollup 上是整个生态系统的挑战。


将生态系统大规模迁移到 rollups 提供了很好的机会，可以扭转以太坊生态系统早期的错误，并为多签和智能合约钱包在帮助保护用户资金方面发挥更加重要的作用。但这需要大家更广泛地认识到钱包安全性确实是一项挑战，而且我们还没有做出足够的尝试以应对挑战。多重签名和社交恢复不一定是故事的结局，可能会有更好的设计。但是转移到 rollups 并确保其将智能合约钱包视为“头等公民”，这一革新是实现这个目标的关键步骤。

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/1/18]]></title><description><![CDATA[#SNX质押上线OΞ
#Cream推出铁金库]]></description><link>https://www.ethereum.cn/eth-Weekly-2021-1-18</link><guid isPermaLink="false">https://www.ethereum.cn/eth-Weekly-2021-1-18</guid><pubDate>Mon, 18 Jan 2021 00:00:00 GMT</pubDate><content:encoded>![拾](https://i.ibb.co/SXVDXpZ/image.png)

&lt;br/&gt;

# Eth2

Danny Ryan出席Ethstaker community call，对Eth2的进展做了详细分享，以下为部分重要问题的翻译总结 (译者注：非逐字翻译)



Q: 信标链创世后接下来会进行什么？

A: 信标链首先是作为更安全、可持续、可扩容的权益证明 (PoS) 共识机制的基础，接下来信标链会有更多的功能。首先是Eth1如何接入到新的共识机制里（hot swapping)，然后是通过分片实现扩容，如何在同一个共识机制下把分片统一到同一个网络里。



Q: Eth1要如何接入这个新的共识机制？

A: Eth1与Eth2不是一个前后发生的承接关系，而更像是Eth1成为Eth2的一部分。那Eth1要如何“住进”Eth2呢？有一个小组在过去6个月里一直在研究合并这方面的工作，这个小组分成Eth1与Eth2两边。在以rollup为中心的路线图下，eth1像是“一等公民”，有它的状态、执行、交易，以及在分片数据环境里进行扩容，它们与信标链紧密相连而不是存在于一个脱节的分片里。这个小组已经搭建了一个本地测试网，由eth2客户端之一的Teku来指挥运作，并通过改良过的geth访问用户层，两者共同运行。现在的进度还没到产品阶段，但已经进行优化并撰写文档，希望让更多人了解。我不确定具体什么时候会推出公共版的测试网，但很快会推出让社区参与。



Q：合并客户端测试网现在是什么阶段？

A：可以说是概念证明 (Proof of concept)，还没有非常详细的规范，但已经接近可以开始撰写规范的阶段了。目前还需要大量的共识测试，但目前的状态看来这是一个可行的方案。而且如果发生了紧急硬分叉，我们也可以很快地将Eth1和Eth2合起来，虽然我们并不想过快推进。



Q: 合并与分片，哪个在信标链上会优先实现？

A: 如果分片上的数据没有状态和执行，它们更像是其他系统可用的一个数据层，一方面你不可以把它直接架在信标链上，因为会超负荷，因此它不会那么接近核心共识。相反它可能会由委员会监察，而不是每个节点都时刻监察着，这是分片的一个关键点。它虽然没有状态和执行，但有大量的共识内容，从设计的角度来看它对建构系统是很重要的，同时对终端用户来说也很重要。这些数据可以用于扩容，比如像rollup这样技术，而且会是现存应用与rollup更熟悉的环境。比如，你可以有一个rollup是把三个分片串起来形成一个以太坊环境，然后用它来部署一个大容量的应用。因此，分片上的数据不是“二等公民”，但在设计上与信标链没有那么紧密相连，因为必须这样做才能达到扩容目的。



至于合并与分片的优先级，合并会比我们期望的时间更长，很可能会优先于分片。在第一季度，我们的工作会是写规范、搞测试、以及在清楚认识到某项任务需要优先实现之前审视每一条路径。



Q:关于两年的锁仓期

A: 如果合并是在分片前发生，那么合并会在两年内实现；如果合并在分片后发生，那么合并会在两年后实现，这个时间除了很多技术上的考虑以外，还有社区的意见。如果社区希望合并更快地发生，我们也会优先实现合并。





Q: 多客户端测试网

A: 不像一年前那么困难，但过程也类似eth1的开发过程，大家会看到一个短期测试网，不会长期维护。然后在产品阶段，会先分叉一个测试网，然后分叉一个主网。在现在的讨论中，信标链像是今年年中硬分叉的一个热身，这个问题在接下来的时间会有更广泛的讨论，会明确区块与状态在后台会如何被管理，增加额外的小功能，例如增加一个更长期的同步委员会，使得轻客户端可以更容易接入信标链，这些讨论都很有价值，有助于在年中前形成一个分叉机制，为后面的合并与分片做准备。因此，在合并与分叉的测试网产品阶段之前，刚说到的测试网大概会在第二季度进行，希望社区能积极参与。



视频：https://www.youtube.com/watch?v=mRn-nxq8yF4&amp;t=696s&amp;pbjreload=101



&lt;br/&gt;

# Layer2

**Synthetix开启Layer2迁移，SYX质押在Optimistic Ethereum上线**

上周，DeFi衍生品流动性协议Synthetix与Layer2解决方案Optimism都启动了其2021年路线图的第一阶段，这对他们来说无疑都是里程碑式的进展。

![synthetix](https://i.ibb.co/X7ZHCWV/synthex.png)





cr：Synthetix

Synthetix于1月12日发布了今年的路线图，其中最重要的升级便是“迁移至Layer2解决方案Optimistic Ethereum”。该升级能带来的两个主要好处：实现低gas费和高吞吐量。尽管确切的迁移顺序还没定下来，但可以肯定的是，Synthetix会优先协调这两个问题：1) 迁移后会保持单一集的Synths，即不会同时出现Layer1-sUSD和Layer2-sUSD的情况；2) 降低用户将资产从Layer2提出至Layer1的风险。更为详细的路线图可参考《Synthetix：2021年路线图》。



![optimism](https://i.ibb.co/F53fvn3/optimsm.png)





cr: Optimism

UTC时间1月15日，Optimistic Ethereum上线主网。根据Optimism团队发布的文章，该次部署应被称为“预发布”(soft launch)，因其将以迭代的形式在主网上线。Optimistic Ethereum主网发布之后，Synthetix在Layer1部署了一个新的SNX存款合约，作为桥接以允许L1上的SNX持有者迁移至L2。目前Synthetix的Layer2上仅启动了Staking功能，而Synths之间的交易在接下来的阶段推出。迁移SNX至L2的详细教程参考：https://blog.synthetix.io/l2-mainnet-launch/





**Layer2跨链解决方案 Connext在主网发布Vector 0.1.0**

Connext作为一个解决Layer2互操作性的方案，通过状态通道，在各个Layer2解决方案、Eth2分片、甚至其他Layer1区块链之间实现跨链路由网络。Vector 0.1.0 发布之后，用户可以：1) 通过其快速地接入/退出任意以太坊Layer2方案、分片或其他图灵完备的链；2) 在Layer2解决方案之间发送代币，甚至在后续升级中实现调用合约的功能；3) 执行正常的状态通道用例，如有条件的小额支付。







![connext](https://i.ibb.co/n3wf9pw/connext.png)

cr：Connext

Vector上线主网之后，Connext的将重点关注与Layer2应用的合作，支持更多的链以及Layer2解决方案，以实现跨链路由网络。





**USDT将在ZKRollup解决方案Hermez Network上线**

据 The Block报道，稳定币 USDT将与以太坊二层扩容解决方案 Hermez合作。在采访中，Hermez的技术负责人 Jordi BayLina透露，Hermez计划于二月中旬发布，届时，USDT将在 Hermez Netwok 上线。




&lt;br/&gt;


# EIP-1559

Nethermind于1月17日发推表示Nethermind节点已于EIP1559合并，期待与Besu和Geth团队的进一步测试。



EIP-1559主要推动者Tim Beiko分享了关于EIP-1559的资源汇总贴，包括释义性文章与分析、文档与工具、以及模拟三大类。

详情：https://hackmd.io/@timbeiko/1559-resources



**EIP-1559推特投票**

上周，Ethermine的母公司Bitfly 发起投票“你赞成EIP-1559的推进吗？”截至发文，有9594人参与投票，不支持 EIP-1559的占61.5%，支持的占20.8%。


![bitfly](https://i.ibb.co/1KtWKLL/bitfly.png)







&lt;br/&gt;




# DeFi

**Sushiswap 公布路线图**

Sushiswap在博客上公布项目路线图。Sushiswap除了当前版本的Deriswap，还将会实施Sushi V3: MIRIN。另外，Sushiswap将在2021年转移到新的域名，不再局限于AMM，而是作为Yearn生态中的OpenOrg部分。在集成方面，协议通过Rune/Moonbeam实现跨链AMM。Polkadot/Moonbeam在Kusama上线Sushiswap测试版。在Layer2方面，因为看重可组合性，SushiSwap将Zk-rollups作为优先选择方案。



**Synthetix公布路线图**

在公开的路线图中，Synthetix协议将升级至V3，这意味着将完全重新构建Synthetix合约。在迁移至L2后，预计将提供至少10倍杠杆的合成期货。计划推出optionsDAO，着眼于二元期权市场并扩展交易功能。另外，Synthetix将扩展资产种类，包括扩展到加密资产和商品，甚至股票。改进治理模式，改善Spartan Council的选举流程，减低协议的权限，以及继续对protocolDAO去中心化。最后还提到目前Synthetix需要进一步扩张核心贡献者，但这个过程耗费耗时耗资源，因此其中一些可能会通过战略性收购来规避。



**Iron Bank铁金库的诞生**

CREAM Finance在博客中介绍协议间的借贷平台Iron Bank。Iron Bank的核心是零抵押借贷，面向用户主要为链上协议。协议间借贷将会启用信用系统，被列入白名单的协议将会获得信用限额，它可以直接从CREAM v2借出资产。这样协议就无需浪费流动性来换取所需资金。



**Curve 上线跨资产交易功能**

跨资产交易是Curve 利用 Synthetix 作为桥梁的新的交易方式。Curve 可以以极低的滑点和低费用交易类似资产，而 Synthetix 可实现 sToken-sToken 零滑点交易。由此，用户可以通过跨资产交易功能，用 ERC20 资产换取 ERC20 资产。但因为巨额 gas 费和6分钟的等待交易时长，该功能适用于大额交易。

![1](https://i.ibb.co/hygdDCw/curve1.png)
![2](https://i.ibb.co/k3N390Y/curve2.png)
![3](https://i.ibb.co/kh2QXxB/curve3.png)





cr：https://resources.curve.fi/guides/cross-asset-swaps

例如，要以DAI兑换renBTC，用户在交易页面按下“sell”键后可获得NFT作为交易凭据。同时，协议自动将DAI兑换成sUSD，之后再转换成sBTC。等待6分钟Synthetix的结算期后，用户需要按下“Complete trade”键，协议才将sBTC兑换成renBTC。


&lt;br/&gt;


# 生态

Cloudflare于1月13日宣布为分布式网络提供一个新的解析器，可以访问以太坊名称服务(ENS) 索引的IPFS上的内容。

详情：https://blog.cloudflare.com/cloudflare-distributed-web-resolver/





**两则招聘信息**

1. MetaMask正在招聘Javascript和Typescript的工程师，负责构建安全、用户友好、可扩展的软件。指路：https://boards.greenhouse.io/consensys/jobs/2572388

2. ETHGlobal 正在招聘市场营销和伙伴关系管理方面人才，指路：https://ethglobal.co/jobs/

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2进展更新（截至2021/1/15）]]></title><description><![CDATA[摘要：以太坊2.0网络将在年中进行次要规模升级。]]></description><link>https://www.ethereum.cn/wnie2-2021-1-15</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2021-1-15</guid><pubDate>Fri, 15 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_210115)

&lt;br/&gt;

# 首选阅读

Danny Ryan 上周做客了 EthStaker 的第五期 Commnity Call，强烈建议大家去观看！我没有观看直播真的太可惜了，错过了 POAP 的领取😢，但 YouTube 上的重播也很不错：https://www.youtube.com/watch?t=519&amp;v=mRn-nxq8yF4&amp;feature=youtu.be

译者注：《以太七日谈 • 2021/1/18》中有编辑本期 Community Call 的重点问答。

&lt;br/&gt;

# 信标链


一切都在平稳运行中！截至本译文发布，活跃验证者有 64,836 名，参与率持续保持在99%左右 —— 运行得十分不错。

质押的速率慢了一些，所以[队列等候时间](https://eth2-validator-queue.web.app/)从 3 周降到了 18 天，截至本文发布等待验证者有 16,088 名。Eth2 存款合约上的[质押总额](https://www.duneanalytics.com/hagaetc/eth2-0-deposits)已经已经超过 260 万 ETH 了！价值约 30 亿美元，其波动取决于 ETH 价格的波动。

Etherscan 列出了一些质押[大户地址](https://bi.etherscan.io/public/dashboards/KH9jbP687szqlAnHiNEfNictrwNhvdOEQl0PwB6m?org_slug=default)，其中 Kraken 交易所占比最大 (已知)，占15.2%。

Etherscan 浏览器对于 Eth2 质押地址的分析：https://bi.etherscan.io/public/dashboards/KH9jbP687szqlAnHiNEfNictrwNhvdOEQl0PwB6m?org_slug=default


如果你是创世验证者的其中一员，那么你现在就可以去领取POAP了！领取地址：https://poap.delivery/eth2-genesis/

如果你属于首批编号为 1024 的存款者或者区块提议者，可以再领取额外的 POAP：https://poap.delivery/beacon-chain-first-1024

据我所知，首批编号为 32768 的区块提议者 (使用了POAP作为涂鸦)，很快也能领取 POAP 了。

## 罚没

过去两周有四个验证者被[罚没](https://beaconcha.in/validators/slashings)了，每个验证者都是单独的，并且是在不同的地方。我已经了解了其中几个案例的信息，正如所预期的那样，这些罚没都是由于错误配置而导致在两个不同的验证者客户端中运行相同的密钥。


到目前为止已经有 36 名验证者被罚没了，占0.06%。罚没惩罚减轻的制度适用于当前的启动期，因此每名验证者失去约 0.6 ETH。

## 测试网

[Pyrmont](https://pyrmont.beaconcha.in/) 依然平稳运行中。但它没有主网那么稳定：参与率低 (这是测试网的典型特征)，并且当客户端团队在修补他们的节点时，偶尔会出现一段未敲定的时期。但这对测试网来说并不是坏事。


Pyrmont 将持续作为主网测试网运行，直到今年年中。

## 工具

如果读者们想要获取信标链的数据，除了我之前提到的，还可以使用以下两样工具：

- Web3.py [现在支持](https://snakecharmers.ethereum.org/web3py-meets-eth2/)Eth2 信标节点 API 了！

- [Bitquery](https://bitquery.io/) 正提供信标链 [GraphQL APIs](https://bitquery.io/blog/eth2-api)，还有数据 [dashboard](https://explorer.bitquery.io/eth2)。

对了，还有关于质押池的数据。 [beaconcha.in app](https://beaconcha.in/mobile) 现在提供了[质押池的细节分析](https://twitter.com/etherchain_org/status/1349472045793505283)。

&lt;br/&gt;

# 下一步？

##  升级1

“年中”将计划进行一次次要规模的网络升级。


(这次升级也普遍被称为”硬分叉“，但我希望[不要再用](https://github.com/ethereum/eth2.0-pm/issues/198#issuecomment-760170970)这个术语来形容一次有计划的、无争议的升级了。”分叉“这个词在区块链中被过度使用了。事实上，这次升级之后，根本就不应该出现分叉，即从当前网络分叉出多条竞争链。因此把这次升级说出分叉怪怪的。如果真的出现分叉，那么应该是由治理或者实现失败造成的，当我们回顾该次事件时，就可以称之为分叉了。心累)

这次升级的草拟内容见下：

- 重新设置罚没惩罚和怠工惩罚，恢复至原来的值。

- 为轻客户端支持引入[同步委员会](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/lightclient/beacon-chain.md)，这些都建立在现有委员会基础设施上。

- [审计规则调整](https://github.com/ethereum/eth2.0-specs/pull/2176) (Accounting reforms)。不再是在 epoch 结束时处理所有证明奖励与惩罚，而将在整个 epoch 过程中处理。这样做的其中一个目的就是减少 epoch 开始时错误证明的数量。在奖励上还有一些小改动。

- [Global quotient penalties](https://github.com/ethereum/eth2.0-specs/pull/2177) 提高了效率。对于怠工验证者的惩罚目前单独适用于每个验证者。而此次调整将定义一个全局因数，然后仅通过更改这个因数，所用验证者余额可以一起进行调整。

- 基于最近的研究结果，修改分叉选择规则。


这次升级是接下来那些重大升级的热身 (分片以及合并)。

## 更长期的发展


我会在以后的文章里写更多这方面的内容，但是，既然现在我们已经让信标链运行起来了，而且一切表现稳定，我们这些实现者是时候往前看了。


我有提过之前的那个简洁、线性的路线图 (阶段0→→ 1 →→ 2)[已不完全适用](https://www.theblockcrypto.com/post/90818/ethereum-2-eth2-whats-next-2021)。我们现在有几条开发路线同时进行。很有可能可以加快以太坊2.0剩下部分的交付。

除了上文说的升级1，下面的是三条主要的、相对独立的开发线：

1. 分片数据与数据可用性
2. Eth1与Eth2的合并 (把Eth1接入权益证明机制)。现在首选的方案是[可执行信标链](https://ethresear.ch/t/executable-beacon-chain/8271?u=benjaminion)
3.  以太坊2.0的轻客户端


这三条开发线的研究和设计工作都有不错的进展。在今年的第一季度，我们工作的目标是为它们撰写规范，然后决定实现与交付的先后顺序。关于是要优先交付分片还是合并，这是个艰难的决定，我们将广泛征求意见。

在分片工作上，最近的一项创新是可能采用Kate (读音“kah-tay”）承诺来进行[数据可用性采样](https://notes.ethereum.org/@vbuterin/r1v8VCULP)。Protolambda在圣诞假期写了一个[实验性的Go语言实现](https://github.com/protolambda/go-kate)。读者可以看一下文章里关于Kate承诺的来源信息，包括Dankrad的[释义性文章](https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html)。如果你只想有个大致了解，可以看看Protolambda在[推特上的解释](https://twitter.com/protolambda/status/1349738935287648260)。

&lt;br/&gt;

# 释义性文章

在这部分我的首推不太算是一篇释义性文章而是呼吁行动。Stakefish的Daniel Hwang写文章[论证去中心化透明度的重要性](https://medium.com/stakefish/making-the-case-for-decentralization-transparency-443375991e83)。这是Daniel写的三篇文章的第一篇，他表示大型质押运营商的透明度对以太坊2.0网络的持续健康与成功至关重要，总的来说我觉得他提出的目标非常值得支持。我强烈推荐读者认真阅读他的文章。对于只想阅读简短文字的读者，可以看Daniel在[推特上的总结](https://twitter.com/danhwang88/status/1350141392555810816)。

Jim McDonald在2021年的一开始就写了两篇文章。文章《检验以太坊2.0网络性能》（[Examining Ethereum 2 Network Performance](https://www.attestant.io/posts/examining-ethereum-2-network-performance/)）以公式 “所得收益/最大化收益”作为衡量标准，评价验证者和整个网络的表现。文章《探索净发行量》（[Exploring Net Issuance](https://www.attestant.io/posts/exploring-net-issuance/)）关注信标链运作中新产生的ETH数量。

[Adrian Sutton的文章](https://www.symphonious.net/2021/01/10/exploring-eth2-attestation-rewards-and-validator-performance/)对证明奖励与验证者表现进行了研究。尽管有多种复杂数据，如果你运行的客户端是Teku的话，你可以通过自己的验证者访问这些数据。

同时，Jacek Sieka 在推特上也谈论了在eth2找[对等节点](https://www.symphonious.net/2021/01/10/exploring-eth2-attestation-rewards-and-validator-performance/)的问题，其中有非常多好的洞见：你可能会惊讶于在网络层上有多少事情在发生。

StakeWise与Collin Myers合作写了文章《质押池的代币经济学——什么是质押的ETH代币，以及它们是如何运作的》( [The Tokenomics of Staking Pools. What Are Staked ETH Tokens and How Do They Work?](https://stakewise.medium.com/the-tokenomics-of-staking-pools-what-are-staked-eth-tokens-and-how-do-they-work-2b4084515711))。这篇文章对这个愈发复杂与碎片化领域进行了很好的梳理和分析。

如果你对质押与验证感兴趣但不知道从何开始，最近出现了一些介绍性的短视频：

- [Nugget’s News](https://www.youtube.com/channel/UCLo66QVfEod0nNM_GzKNxmQ)制作了20分钟的《权益证明简明介绍新手指南》（[Beginner’s Guide To Proof Of Stake Clearly Explained](https://www.youtube.com/watch?v=d240ipBzzlc)），以及

- [Bitcoin for Beginners](https://www.youtube.com/channel/UCi7egjf0JDHuhznWugXq4hA)制作了12分钟的视频介绍《如何通过在以太坊2.0做验证来赚取ETH》([How to earn ETH by validating for Ethereum 2.0](https://www.youtube.com/watch?v=Gj83fDNJRo4))。

&lt;br/&gt;

# 媒体

Vitalik作客Bankless谈了“为什么选择权益机制”： [podcast](http://podcast.banklesshq.com/vitalik-buterin-on-why-proof-of-stake)；[视频](https://www.youtube.com/watch?v=x2QQiCKqjNY)。(这是在信标链创世前录制的，但最近才上传)


如在文章开头提到的，Danny Ryan最近作客 [EthStaker community call](https://youtu.be/mRn-nxq8yF4?t=519)，对Eth2在未来一段时间的进展进行了很好的概述。Reddit上有[u/Coldsnap](https://www.reddit.com/user/Coldsnap/)对该会议的[文字整理](https://www.reddit.com/r/ethstaker/comments/ksoz3u/ethstaker_is_holding_a_community_call_with_danny/gj3xsom/)。

我在the Block写了一篇专栏，《Eth2的未来发展》，且在CoinTelegraph的文章《以太坊2.0的前景乐观，但前路漫漫》（[Ethereum 2.0 optimism is high, but the road is long](https://cointelegraph.com/news/speed-vs-quality-ethereum-2-0-optimism-is-high-but-the-road-is-long)）得到了引用。

&lt;br/&gt;

# 常规会议

## 实现者会议

1月14日进行了第55次实现者会议

- [实现者会议](https://github.com/ethereum/eth2.0-pm/issues/198)
- [会议视频](https://youtu.be/xNt6MmEV3JI?t=130)
- [会议速记](https://hackmd.io/@benjaminion/BJ2TO360v)

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[2021：最值得关注的以太坊改进提案]]></title><description><![CDATA[本文列出了2021年值得关注的EIPs]]></description><link>https://www.ethereum.cn/eips-of-2021</link><guid isPermaLink="false">https://www.ethereum.cn/eips-of-2021</guid><pubDate>Thu, 14 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [@lightclients](https://twitter.com/lightclients/status/1349169332585074692)

&lt;br/&gt;
&lt;br/&gt;

2021 年将会是自 2016 年以来以太坊协议最具创新性的一年。以下是这一年值得关注的 EIP 情况：

下一次的硬分叉升级—— “柏林”将推行 4 项 EIP：

* EIP-2929: 状态访问操作码所需的gas费用将增加
* EIP-2930: 可选的访问列表交易 (Optional Access List Txs)
* EIP-2718: 包含类型的交易封套 (Typed Transaction Envelope)
* EIP-2315: 简单的子程序 (Simple Subroutines)

EIP-2929：状态访问操作码所需的gas费用增加。存储访问操作码的gas费长期以来一直过低，并且一些只需花 20-80 秒就能执行的恶意交易目前已能够轻易创建。这项 EIP 把状态访问的成本增加了约3倍。

EIP-2930：可选的访问列表。大概 0.18% 的主网交易会因 EIP-2929 受阻。为了弥补这个裂缝，这份 EIP 引入了一种新型交易，它可以指定将被读取的存储 slot，然后支付一笔打了 9 折的预付费。

EIP-2718：包含类型的交易封套。这份 EIP 规定了交易的新格式，它以一个“ 鉴别器” (discriminator) 开始，让客户端解译不同的交易。EIP-2930 会首先用上这份 EIP，然后可能是 EIP-1559。新格式 = `type || payload`。

EIP-2315：简单的子程序。被列入柏林硬分叉升级的最后一项 EIP：增加子程序的支持。传统来说，想要模拟此功能的合约需要同时处理常规堆栈数据和返回地址。此份EIP增加了一个新堆栈，只用于追踪返回的地址。

柏林分叉以后，会有很多不稳定因素。如果在接下来的分叉中，冰河时期不再延长，分叉计划会在 7 月上旬开启。根据最近的 AllCoreDev 会议，这个夏天可能会出现另一个分叉。有非常多候选 EIP 是针对该次硬分叉的，其中最著名的就是 EIP-1559。

EIP-1559：Eth1 的费用市场变化。Gas 费分成了两个部分：base fee (基本费用) 和 tip (小费)。基本费用部分会被销毁，而小费会发送给矿工。基本费用会根据需求由协议动态决定的。这能避免一些费用高峰，并提高用户在付 gas 费时的体验。

(译者注：此处作者插入了 EIP-1559 主要推动者 Tim Beiko 对 EIP-1559 的最新状态更新)

详情：https://twitter.com/TimBeiko/status/1349027063903121408

在我看来，我不认为 1559 现在已准备好上线。以下是我在 dicord 上分享的一些想法总结：

1. 并不是所有的客户端都有 1559 的实现，且没有一个客户端有最终版的；

2. 我们还没解决在 AllCoreDevs 会议上提出的问题 **(即用大型状态测试大区块)**。要实现这一点最快也需要几周。

3. 1559 会影响很多其他项目：任何涉及签名交易的项目，都依赖于 JSON RPC 对区块/交易等的反应。对于这些影响我们还是需要进行广泛谈论。

4. 柏林硬分叉已经快要启动。而放下手头上所有工作来推行 1559 不是一个好选择。

EIP-2982：Eth2 的阶段0。自 EIP-1011 以来，eth1与 eth2 首次在 EIP 存储库中集合。这项 EIP 只是将 eth2 的治理/标准化重新引进 eth1 的开始。它带来的主要变化有：在 eth2 中新增发 ETH。

EIP-?：合并。比较乐观的是，2021 年 eth1 -&gt; eth2 有望合并，并且去掉 PoW 共识。然而，在接下来的几个月里，研发工作将大大增加。预估该 EIP 将在未来 18 个月进行。

EIP-3102：二进制树结构。该项 EIP 将从当前的六进制状态树转移至二进制树结构中。这将使得默克尔证明更加有效率。迁移将可能占用大量资源，因此最好在合并之前进行。

EIP-2937：SETINDESTRUCTIBLE 操作码。此操作码将导致随后的任意 SELFDESTRUCTs 充当当帧中的noop。这将有助于更好地论证合约的可靠性。这也是支持账户抽象首先要做的事情。

EIP-2938：账户抽象。允许合约成为支付交易费和启动交易执行的高级账户。这为确定任意交易有效性的条件提供了灵活的框架。最初在 EIP-86 中提出，该 EIP 提供了在主网推行的更为具体的路径。

EIP-?：EVM384。尽管这还不是正式的 EIP，但正朝该方向发展。该提案建议增加本地 384 位算术运算符 (也很可能是其他宽度)，以支持在 EVM 中有效地实现新的加密系统。

EVM384 (内容)。随着现代加密系统的快速创新， EVM384 为以太坊提供了一个框架以支持这些系统，而无需为每个加密系统都提供硬分叉和预编译。相反，任何人都可以将之当作 EVM 合约来实现。

EIP-2537：BLS12-381 预编译。有了 EVM384 之后，是否还需要该提案仍有待讨论。尽管 EVM384 为更好的长期解决方案，但是 BLS 在以太坊生态中属于高级提案 (鉴于 eth2)，并且值得本地预编译。

批量交易。有很多 EIP 旨在用 L1 基元替换 meta-交易。预计今年会在这方面上取得重大进展。此类 EIP 有：

EIP-2711：代付交易、过期交易以及批量交易 (Sponsored, expiring and batch txs)

EIP-2733：交易打包

EIP-2803：昂贵交易

EIP-3074：代付交易预编译 (Sponsored Tx Precompile)

EIP-2464：eth/65：交易广播和检索。通过将交易哈希广播到大多数对等节点中，而不是广播完整交易，该提案大大地减少了 eth1 客户端所用的宽带。Geth 计划在今年某个时间开始停止对 &lt; eth/65 的支持。

2021 年将为以太坊协议带来许多改变，远不止我所列的清单。Eth2 和无状态以太坊团队在今年会有他们自己的计划。

&lt;br/&gt;
&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[不止于信标链：Eth 2 的未来发展]]></title><description><![CDATA[2021年Eth2新路线图三个方面的发展：Eth1->Eth2、分片、轻客户端]]></description><link>https://www.ethereum.cn/eth2-whats-next-2021</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-whats-next-2021</guid><pubDate>Tue, 12 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [theblockcrypto.com](https://www.theblockcrypto.com/post/90818/ethereum-2-eth2-whats-next-2021)

![cover](https://i.ibb.co/TKXL07B/cover.jpg)

Ben Edgington是ConsenSys旗下以太坊2.0客户端Teku的首席产品负责人，他[长期从事以太坊2.0进展的记录工作](https://eth2.news/) 

&lt;br/&gt;

在1492年，克里斯多弗·哥伦布以为他到达了东印度，而事实上，他无意中登陆到一个让人惊叹的新世界。有时候，当经历了一次艰辛旅途终于到达后，不妨总结一下，重新规划，好好利用摆在眼前的新机遇。

这好比以太坊2.0 在2021年开端所处的情境。在去年的一开始，我们便致力于实现Eth2 信标链创世，直到最近我们达成了这一目标，这像是一段漫长而艰辛的旅程的结束。


但这也仅仅是一个开始。我们已经走了很远，现在可以看到更远的风景。当我们审视未来的图景时，我们开始发现新的机遇正在显现。


本文的主要部分将介绍我们2021年新路线图的三个方面：Eth1与Eth2间的”合并“、分片、以及轻客户端。这三方面的开发是各自独立且同时推进的。但首先，请允许我尽情庆祝这个小胜利。

&lt;br/&gt;

#  开端的结尾

信标链是以太坊未来的基础。它以权益证明 (Proof of Stake) 而不是工作量证明 (Proof of Work) 作为它的治理机制，支持扩容和维持以太坊在未来的安全。


这就是于去年12月1日上线的内容，我把它称为”权益证明的证明“。它充分展现了，以此种方式保障一个大规模分布的、全球的、无须证明的网络是可行且有效的。信标链现在除了自我运行外没有其他功能，我在后面会谈到，但它仍是实现以太坊2.0最具有挑战的部分。


我在写这篇文章的时候，创世已经过去4周了，一切进行良好。信标链已经显示出与其他权益证明系统相比的优越性。有超过200万个ETH (价值15亿美元) 提交到了[存款合约](https://www.duneanalytics.com/hagaetc/eth2-0-deposits)里。其中包括4.6万名现在在线的验证者，以及另外2万名在排队进入，需要等上3周的时间。以及存款率也没有慢下来的迹象，很快就会有占总供应量2%的ETH锁在存款合约里。这是一次来自4000名唯一存款者对以太坊2.0 表达信心的投票，还有数以上千的人通过质押服务进行存款。


至今为止，质押者们的信心并没有被辜负。虽然现在还处于早期，但信标链一直运行非常良好，有大约99%的参与率 (网络健康的一个关键指标) 以及没有出现过一次问题或事故。

在过去的两年半里，有数百人参与了信标链的设计与搭建。这是一个由以太坊基金会领导的、高度开放的社区项目，它由[像我们](https://consensys.net/knowledge-base/ethereum-2/teku)这样的客户端开发团队来实现，并得到众多贡献者的支持。

这是一趟不可思议的旅程，但它仅仅是第一步。

&lt;br/&gt;

# 穿线编网

 那么，接下来是什么呢？

一年前，以太坊2.0的路线图是简洁、有条理、以及线性的。阶段0 (信标链) 后面是阶段1 (分片以实现扩容） ，然后是阶段2 (抽象执行引擎)，最后Eth1与Eth2会在这个超级结构上实现合并。后来，阶段2的设计感觉会比预期花费更多的时间，同时尽早实现Eth1与Eth2合并的压力越来越大。因此，我们加入了阶段1.5，这样就能把Eth1作为一个分片迁移到Eth2直接实现合并。

与此同时，一个全新的扩容范式出现了，且完全不依赖于分片。它就是 rollup ,在去年10月，Vitalik提出了一个新的、[以rollup为中心的以太坊路线图](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)，作为实现扩容的路径。[rollup](https://ethereum.org/en/developers/docs/layer-2-scaling/#rollups)是一种二层技术，它能大大减轻区块链计算与存储的负担，且对链的使用只需足以确保安全性。rollup有不同的形式——zk-rollup 和 optimistic rollup，它们各有不同的妥协，且这项技术还很新。但非常可能rollup 能满足以太坊扩容的需求，甚至在以太坊2.0之前就能完全交付。

还有无状态以太坊 (尽管rollup可以缓解一些以太坊状态膨胀的压力)，以及一些像[Kate 承诺](https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html) (发音为&quot;kah-tay&quot;) 这些有前景的、新的加密技术，这些都意味着一些令人振奋的新方向。

因为有了这些进展，我们原来那个简洁的、三段式的路线图，根据Vitalik[最近的文章](https://twitter.com/VitalikButerin/status/1333922620857745408)，现在已经变成蜘蛛网式的。

我们可以把所有这些线编织成一张内在连贯的地毯吗？我相信如果有哪个社区能做成的话，那就是以太坊社区。

我最近重读了罗杰·洛温斯坦 (Roger Lowenstein) 所著的《赌金者》(*When Genius Failed*)，里面这样写罗伯特·科克斯·默顿 (Robert C. Merton)：”他对完美有偏执，这使得妥协是不可能的“。正是这种僵化最终导致他的对冲基金走向崩溃。以太坊经常遭到与此相反的批评：我们总是修改路线图；甚至可能显得路线图是我们随意编造的。

但是，这实际上是驱使以太坊走向成功的因素之一。不同于莫顿，我们社区是一群实用主义者，什么方法有用我们就用什么方法。我们随现实的改变而改变；当机会显现出来，我们抓住它们。我们喜欢探索新的和看似疯狂的边界，并且一路适应与改变。

&lt;br/&gt;

# 扩容的平方

令人感到高兴的是，随着信标链的上线，我们将对未来的前景以及 2021 年的发展方向有较清晰的了解。以 rollup 为中心的扩容方案，让我们能够细分任务，并行进行。

因此，2021 年我们将三管齐下： Eth 和 Eth2 的合并、分片、轻客户端。在新的路线图中，这三者为独立的任务，且并行进行。其交付顺序无关紧要。

合并是指我们将 Eth1 链的共识从工作量证明 (PoW) 向权益证明 (PoS) 转移。当前实现此目标的最佳候选方案：将Eth1 链[直接建在我们现有的信标链上](https://ethresear.ch/t/executable-beacon-chain/8271?u=benjaminion)。Eth1 将不会像最初设想一样作为执行环境，甚至不会作为分片。而 EVM 将仍作为以太坊的核心引擎。这对开发者和应用提供商来说将不会很复杂：几乎所有开发环境都和现在一样，我们只是停止挖矿了。

在旧版那个线性的路线图中，阶段 2 之后才会停止挖矿，这似乎是件非常遥远的事情。而在我们的新计划中，我们将在几周后实现一个测试网。

而今年任务的第二个分支，分片 (在旧版路线图中是阶段 1) 已经有了明确的定义了，并且我们就快可以开始在客户端中实现分片了。 但是在新的路线图中，实现分片的方法已经做出改变了。在旧版路线图中，分片既负责排序数据，又负责执行数据：这会带来很多复杂的问题如跨分片交易。而以 rollup 为中心的路线图中，分片只需要负责排序数据。Rollup 需要大量的数据，他们掌握的数据越多，运行便将越快。

可以想一下我的涡轮增压汽车，用来类比 rollup 和分片是怎么组合起来以增强以太坊虚拟机 (EVM) 的功能。虽然 EVM 足够强大且灵活，但它仍缺乏使其更加快的东西：数据。而 Rollup 极大地提高了可用功率：它像压缩燃料—空气混合物一样压缩数据，并将其压入引擎中。这就像汽车中的涡轮增压器或喷气式飞机中的压缩机。

这可以，并且已经在当前以太坊链上实现。而当我们在此基础上加上分片，就好像我们在已经有涡轮增压的引擎上再绑 64 个压缩机：一个多级涡轮。Rollup 和分片的结合，带来了巨大的扩容空间。


第三个相对较小的分支：为轻客户端建立基础设施。这使得不想运行整个系统的应用程序能够使用该系统。有了轻客户端，用户不需要运行一个 Eth2 节点就可以对 Eth2 链上发生的交易进行验证。这在分片中变得越来越重要。分片的目的在于实现：并非所有用户都需要运行每个分片。

假设信标链继续顺利运行，那么 2021 年最初几周的任务就是计划这三项工作的交付工作。

&lt;br/&gt;

# 成败在扩容！

关于 Eth2.0，我的第一份参考文献来自 Vitalik，大约在[六年半以前](https://www.reddit.com/r/ethereum/comments/282s03/ethereum_ceo_charles_hoskinson_will_be_moving_on/ci76xzc/)。他在开头就预言般地说道：“在过去的几个月中，我们已经对计划做出了很多改变。” 显然，一直都如此！结尾中他说：“我们要么把扩容和共识问题解决掉，要么就一切都失败告终。”

信标链解决共识的问题。到 2021 年年底，就知道我们能否解决扩容性问题。请相信，我们会努力将其交付，至死不渝——这是在瞬息万变的世界中不变的一点。

&lt;br/&gt;
&lt;br/&gt;
ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/1/11]]></title><description><![CDATA[社交式恢复钱包，zkrollup锁仓量
]]></description><link>https://www.ethereum.cn/eth-Weekly-2021-1-11</link><guid isPermaLink="false">https://www.ethereum.cn/eth-Weekly-2021-1-11</guid><pubDate>Mon, 11 Jan 2021 00:00:00 GMT</pubDate><content:encoded>![ninth](https://i.ibb.co/n6sswvD/20210111195846.png)
# ETH 2.0

**信标链的近况**

Quantstamp根据Etherscan的数据列出了以太坊2.0的一些关键数据：验证者数量自创世以来一直在上升，最近已超过7万；现在已有超过160万个ETH质押在信标链上，总值超过20亿美元；每日存进信标链的ETH量虽有所减少但还在稳步继续，见下图



![eth2](https://i.ibb.co/6F29Pb8/DAILY-DEPOSITS.png)

 

 &lt;br/&gt;

# Layer2

**基于StarkEx 技术的 dYdX 永续合约即将上线主网**

此前，去中心化交易所 dYdX 于2020年8月19日发文宣布与 StarkWare 合作，采用其提供的二层扩容解决方案，其永续合约将由 StarkEx 支持。1月9日dYdX 发推庆祝其交易所自发布以来交易额已累计30 亿美元，StakWare 转发表示 dYdX 永续合约将在未来的几周上线其基于 StarkEx 技术的 Layer2 版本。

![starkex](https://i.ibb.co/1Z91nN6/StarkEx.png)



 

&lt;center&gt;cr：@dYdX&lt;/center&gt;

 

**zkRollup 扩容解决方案锁仓数据**

1月7日，路印的 CFA Matthew Finestone 发推表示以太坊上的 zkRollup 解决方案的总锁仓量已达 1 亿美元，其中路印总锁仓量达 8900 万美元，zkSync 总锁仓量达 1100万美元(火箭)。如果再加上另一个基于二层解决方案 Validium 的去中心化交易所 Deversifi，那么以太坊上基于零知识证明 (ZK) 的Layer2 解决方案的总锁仓量便达1.08 亿美元。(译者注：现锁仓量已发生变化，可根据下述指引观察)

 

观察zkSync 的锁仓状况：https://etherscan.io/address/0xabea9132b05a70803a4e85094fd0e1800777fbef

![zksync](https://i.ibb.co/b2zBQp0/zkrollup.png)





 

&lt;center&gt;(注意：请不要直接往该地址发送代币)&lt;/center&gt;

目前 DeFi Pulse 上开设了路印与 Deversifi的总锁仓量观察频道，Matthew 预测 DeFi Pulse 即将开设 Layer2 分类。



![defi pulse1](https://i.ibb.co/jbxkGvR/defi-pulse1.png)



 

&lt;center&gt;cr: https://defipulse.com/loopring&lt;/center&gt;

![defi pulse2](https://i.ibb.co/3kWT0z1/defi-pulse2.png)



 

&lt;center&gt;cr: https://defipulse.com/deversifi&lt;/center&gt;

 
 &lt;br/&gt;

# DeFi

**Uniswap 日交易量创新高**



![Uniswap](https://i.ibb.co/x8LxrTK/Uniswap.png)



 

根据 glassnode 数据显示，Uniswap 日交易量 (7天移动平均线) 创新高。上周每天平均交易量为7.8亿美元，超过了2020年9月初的峰值。

 

**Yam 通过取消 Rebase 机制提案**

Yam社区以97.84%支持率通过取消 Rebase 机制的提案，这意味着 Rebase 机制下的半定期 ETH 不再投入到 Yam 资金库。社区将需要考虑资金库的资金是否足够，协议的目标是否可以仅仅依靠现有的收入来源来实现，或者是否应该创建一个新的资金机制等问题，这需要在接下来的几个月进行一系列讨论。

 

**COVER 新代币发行**

新的 COVER 代币现已发行。另外，Cover 将不会再启动新的 COVER 挖矿项目，协议未来的重点依然是 Cover V2。目前 Cover V2 的代码合约已大致完成，正在进行内部代码复查。同时团队亦正在开发基于V2的应用程序。

 

**AC 介绍杠杆机枪池**

AC在推特上透露，Cream V2 (Iron Bank), Alpha Homora V2 和 Yearn V2的机枪池将成为杠杆机枪池，可使用跨资产策略。这些应用于稳定币的跨平台策略可达到90倍的杠杆，在ETH上可达到80倍的杠杆，并允许用户出售、合成或积聚资产。随着更多的抵押资产被引入到 Iron Bank 和 Alpha Homora V2，收益将不可估量。

 &lt;br/&gt;

# 生态

Vitalik发表文章**Why we need wide adoption of social recovery wallet** (为什么我们需要能被广泛采用的社交性恢复钱包)，文章首先通过例子与数据指出钱包安全是一个不容轻视的大问题，且Vitalik认为包括区块链在内的数字技术应该是易于用户使用而无须时常担忧犯错的；然后，文章解释了硬件钱包与助记词也有其固有缺陷，并给出钱包设计应满足的三个关键条件：没有单点故障、低脑力负担、以及交易便利；多签名是比特币生态发展出来的一个经典技术，但也不是完美的；Vitalik提出社会性恢复钱包是更好的解决方案，它的设计是由一个签名密钥来批准交易，以及“守护者”(至少三个) 中的多数来合作修改账户的签名密钥，且守护者之间的合谋攻击是可以有效预防的；Argent wallet和Loopring wallet是两个已经实现社交性恢复的钱包，但目前都有问题：依赖中继器来进行交易以及高昂的交易费；Vitalik认为把生态迁移到像Optimistic rollup和ZK rollup这样的二层协议能同时解决以上问题。

原文连接：https://vitalik.ca/general/2021/01/11/recovery.html

 

![social recovery](https://i.ibb.co/TBFMSd9/social-recovery.png)



 

(社交性恢复钱包的设计)

 

**以太坊谷歌搜索量创新高**

1.7@icebergy_发推使用下图，表示以太坊在谷歌的搜索量于2021年1月创2018年1月以来的高峰。







![google ](https://i.ibb.co/dk4QQjj/google-search-volume.jpg)

 

**Ethstaker社区一月活动预告**

1. Danny Ryan将于1月12日作客Ethstaker社区的会议，从总体上讨论以太坊社区的现状及未来的走向。如想对Danny提问，可以提交到这里：https://ethstaker.cc/community-call-15-w-danny-ryan/

2. MEME佼佼者比赛，第1轮于1月17日截至，获得最多票数的前10个MEME将自动进入第2轮 (于1.29结束，最后的获胜者将在前10中决出)。详情：https://ethstaker.cc/meme-expert-contest/

 

 

 

**好文推荐**

Linda Xie发表了长文*A Beginners Guide to NFTs* (NFT入门指南)，有兴趣的读者不妨看看：https://linda.mirror.xyz/df649d61efb92c910464a4e74ae213c4cab150b9cbcc4b7fb6090fc77881a95d

 
 &lt;br/&gt;

# 本期最佳Meme

![meme](https://i.ibb.co/SQWDcN2/meme.jpg)

[@SenecaEth](https://twitter.com/SenecaEth)

&lt;br/&gt;
&lt;br/&gt;
网页版声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[分片 + 数据可用性采样]]></title><description><![CDATA[以太坊2.0如何解决数据可用性问题？]]></description><link>https://www.ethereum.cn/sharding-proposal</link><guid isPermaLink="false">https://www.ethereum.cn/sharding-proposal</guid><pubDate>Fri, 08 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vbuterin](https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/sharding_proposal)

&lt;br/&gt;


除了 Proof of Stake 之外，eth2 设计中的另外一个显著改变就是分片 (sharding)。本提案介绍了一种分片的有限形式，即“数据分片” (data sharding)，根据&quot;[以 rollup 为中心的路线图](https://twitter.com/vitalikbuterin/status/1311921668005060608?lang=en)&quot;所述：分片会存储数据，并且证明约 250 kB 数据的可用性。数据可用性验证为 rollups 之类的二层协议提供了安全和高吞吐量的数据层。



![1](https://i.ibb.co/GnD6Ft5/1.png)



为了免去节点亲自下载*全部*数据的负担，可以将这两种技术互相叠加起来对大量数据的可用性进行验证：1) 由随机抽样的委员会提出证明；2) 数据可用性抽样 (data availability sampling, DAS)。

&lt;br/&gt;

# 白话“随机抽样委员会”


假设你有大量数据 ，例如 16 MB，这是 eth2 链 (至少在初期) 每个 slot 能处理的数据量。我们将这些数据表现为 64 个 blobs，每个大小为 256 kB。假设我们还有一个 PoS 系统，验证者数量约为 6400。我们如何在 1) 不需要任何人下载所有数据，2)  不给运行少量验证者的攻击者可乘之机的前提下验证这些数据？


第一个问题，我们可以通过分工来解决：验证者 1-100 需要下载并验证第一个 blob，验证者 101-200 下载并验证第二个 blob，以此类推。每个子集合 (委员会) 里的验证者只需签名证明他们已经验证了相应的 blob，然后整个网络接收到相应委员会中大多数验证者的签名之后，即可接受该 blob。但这会导致一个问题：万一攻击者控制了连续的验证者集合怎么办 (例如 1971-2070)？如果是这样的话，即使攻击者仅控制了整个验证者集合的约 1.5%，他们也能够控制单个委员会 (在上述情况下，他们可以掌控委员会 20 中 70% 的验证者 2001-2100)，因此攻击者能够将无效/不可用的 blob 添加到链上。

随机采样 (Random sampling) 通过随机洗牌算法组成委员会来解决这个问题。我们使用某个哈希值作为随机数生成器的种子，然后我们使用该生成器来随机混洗验证者列表 1-6400。混洗列表中的前 100 个值是第一个委员会，下 100 个值即为第二个委员会，依此类推。

![2](https://i.ibb.co/Jd5M6ZB/2.png)





RNG (随机数生成器) 的种子在验证者存款之后选定，每个验证者的索引都是固定的，因此攻击者无法尝试使其所有验证者进入同一个委员会。攻击者可能会走运，但前提是他们控制所有验证者的 1/3 以上。

&lt;br/&gt;

# 白话“数据可用性抽样”


在某些方面，数据可用性采样是随机抽样委员会的镜像。仍然会进行采样，这是因为每个节点最终只会下载所有数据的一小部分，但采样发生在客户端中，并且在每个 blob 中进行，而不是在 blob 之间进行。每个节点 (包括没有参与质押的客户端节点) 对每个 blob 进行检查，他们不需要下载整个 blob，而是私密地从中选择 N 个随机索引，然后尝试在这些位置下载数据。

![3](https://i.ibb.co/kggNv1g/3.png)





这么做的目的在于验证每个 blob 中至少一半以上的数据是可用的。如果低于一半的数据可用，那么几乎可以认定任何给定客户端进行采样的索引中至少有一个不可用，那么客户端会拒绝接受该 blob。**这个机制是高效的，因为一个客户端只需要下载每个 blob 中的小部分数据以验证其可用性。这个机制同时也是高度安全的，原因在于即使是 51% 攻击者都无法欺骗客户端接受不可用的 blob。**

&lt;br/&gt;

## 纠删编码


为了避免攻击者提供了 50-99% 可用数据的情况 (这可能使得某些客户端拒绝某 blob 之后又被其他客户端接受)，我们使用了一种叫作**纠删编码 (erasure coding)** 的技术。纠删编码使得我们可以使用如下方式对 blobs 进行编码：如果某 blob 中超过一半的数据已经发布，网络中的任何人都可以对剩余数据进行重建和发布。一旦重新发布的数据广播完毕，起初拒绝该 blob 的客户端会收敛为接受 (注意，接受 blob 没有时间限制，每当客户端收到对其所有抽样索引的响应时，它就会接受可用的 blob)。


理解纠删编码最简单的数学概念类比是“两个点总是足以恢复一条线”：如果我以四个点的形式`((1, 4), (2, 7), (3, 10), (4, 13))`建立“文件”，每个点都在一条线上，那么只要有其中两个点的坐标，你就能重构这条线，并且将    剩下的两个点计算出来 (我们假设 x 坐标`1, 2, 3, 4`是系统的固定参数，而非文件创建者的选择)。使用高阶多项式，我们可以扩展此思想，创建 6 个文件中的 3 个文件，8 个文件中的 4 个文件，或者通常来说 `2n` 个文件中的`n`个文件，如果你有文件中的 `n `个点，则可以计算出 `2n` 中剩余的点。


默认情况下，一个攻击者也有可能使得没有区块是可用的，并且有选择性地针对其收到的请求发布信息，但这种行为只能欺骗很小一部分客户端，因为攻击者会需要发布一半区块以上来回应所有的请求 (我们假设客户端重新公开广播他们收到的回应)。


我们使用**多项式承诺 (polynomial commitments)**，具体来说是 [Kate 承诺](https://dankradfeist.de/ethereum/2020/06/16/kate-polynomial-commitments.html)而非默克尔根作为数据 blobs 的 printers，因为多项式承诺能够使我们轻易证明一个给定的值实际上是对特定次 `n` 多项式在所需坐标处的正确估值。不然的话，我们将不得不 (例如使用SNARKs) 证明默克尔根编码一个低次多项式，或者依赖于欺诈证明在编码不正确的情况下进行广播 (这增加了高复杂度以及更多的同步假设)。

&lt;br/&gt;

# 有了委员会机制还需要数据可用性抽样吗？

如果只借助委员会的，可能有以下几个劣势：

- 发生 51% 攻击的时候防御力度较弱。在当前 (不可扩容) 的区块链上，51% 攻击只能回滚交易或是进行审查，并不能向链上添加无效区块。基于委员会的系统会丢失这个保障。更甚者，要对 51% 攻击者进行有效的惩罚难度会很大，因为他们只有极少量的存款 (参与该特定委员会的存款) 会被证明与恶意行为有关，并在此基础上进行惩罚。

- 需要一定门槛 (委员会中证明该 blob 的人数达到什么比例才足以将其添加到链上？) 如果这个门槛很高，那么在只有非常少数验证者在线的时候分片的功能会停滞。如果这个门槛过低 (或是某种动态机制，例如按照最近在线验证者数量的比例)，那么攻击者可以尝试迫使节点下线来提高他们自己所占的在线验证者比例，从而进行攻击行为。

- 在抗量子攻击方面，DAS 比委员会机制稍容易些 (可能需要后量子聚合签名)。

&lt;br/&gt;

# 有了数据可用性抽样还需要委员会机制吗？

如果只借助 DAS 可能又会产生以下几个问题：

- DAS 是一个尚未经过测试的新技术，其核心部分 (参见此处) 其实去年才开发完成。因此在 DAS 崩坏或是开发时间意外延长，使用委员会提供保障是可取的。

- DAS 的延迟比委员会高

- DAS 的极端情况更多，委员会可以协助解决。一个例子就是在仅使用 DAS 机制的系统中，很难避免信标区块提议者最早发起 DAS 请求以验证 blob 的可用性。这会增加攻击者发布不可用 blob 并仅对提议者的请求进行合响应的风险。这不会导致网络的其他节点接受不可用的 blob，但可能会使得其他攻击更为容易，使诚实提议者构建的信标区块被拒绝并从主链上被分叉出去。委员会可以对这一点进行补救。

- 委员会机制的向前兼容性更强，使得在将来能在分片中加入执行功能。

&lt;br/&gt;

# 数据可用性的重要性？挑战又何在？

这已经在别处讨论过了，篇幅有限我就不贴到此处，但我建议阅读：

- [A note on data availability and erasure coding](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding) (对数据可用性最初的介绍)

- [Alberto Sonnino、Mustafa Al-Bassam 和 Vitalik Buterin 联合发表的论文](https://arxiv.org/abs/1809.09044)对相关概念进行了扩展

- [The Dawn of Hybrid Layer 2 Protocols ](https://vitalik.ca/general/2019/08/28/hybrid_layer_2.html)对数据可用性中的博弈论进行了论述
- 
- [Base Layers and Functionality Escape Velocity](https://vitalik.ca/general/2019/12/26/mvb.html)，基于上述概念对[数据扩容性部分](https://vitalik.ca/general/2019/12/26/mvb.html#sufficient-data-scalability-and-low-latency)进行了描述

- [The Data Availability Problem (Ethereum Silicon Valley Meetup)](https://www.youtube.com/watch?v=OJT_fR7wexw)，以视频形式对数据可用性问题进行了讨论


有一点需要明确，**BitTorrent 和 IPFS 以及类似的系统并没有解决数据可用性问题**。尽管 BitTorrent 是很好的可扩容的数据发布技术，但它不能就是否有可用的数据达成共识，这为一种“极端案例”攻击提供了可能性，在某条数据发布时，节点之间可能发生分歧，使得混合型二层协议无法发挥效用。为了就数据可用性达成共识，需要使用本文档中描述的更强大的技术。

&lt;br/&gt;

# 分片如何在 P2P 层上运作？

为了达到分片的扩容性目的，我们需要一个 P2P 系统，这样就无需每个节点都下载所有数据。所幸我们在阶段 0 已经有了一种 P2P 层分片形式。具体来说，有 64 个子集已经用于[证明聚合](https://notes.ethereum.org/@hww/aggregation)。每个验证者只需要存在于主要的**“整体子网” (global subnet)** 和他们自己的证明聚合子网，而无需从其他 63 个聚合证明子集获取任何数据。

在委员会 + DAS 型分片中，我们将其扩展为“网格”架构，有 2048 个**水平子集子网 (horizontal subnets)，即每 epoch 的每个分片-slot对中存在一个子集，以及 2048 个**垂直子网** (vertical subnets)，即每个 blob 中的每个索引存在一个子集。


在每个 slot 中，我们每个分片都会选出一个提议者。每个提议者都有权提议一个 **blob**：一个最大为 512 kB 的任意数据块 (我们可以将其理解为约 512 字节的“样本”集合)，以及纠删编码扩展和额外的证明，以便对 blob 中的每个部分进行独立验证。

## blob 的结构

![4](https://i.ibb.co/JpZW930/4.png)





一个 blob 的“主体”结构包括原始数据、扩展数据以及证明 (如果需要的话，为了提高数据效率，可以省略扩展数据，因为接收 blob 的每个节点重建它的速度都相对较快)。

Blob 的“头部”包含其相应的 Kate 承诺，以及其他一些数据 (slot、分片和长度证明) 以及提议者的签名。

## Blob 的广播过程


当一个 blob 被广播时，其头部会被广播到整体子网 (global subnet)，主体部分则会被广播到相应 slot 和分片 ID 的水平子网。

![5](https://i.ibb.co/C0jZ09F/5.png)






在实际情况中，会存在 2048 个水平子网，以使每个 epoch 中的每个分片-slot对存在对应的一个水平子网。这样做是为了确保每个验证者都可以加入一个水平子网，他们将仅接收到到其所处委员会的相应的 blob (不包括他们参与抽样的少量垂直子网)。

每个验证者都需要加入以下子网：


- **整体子网 (Global subnet)**
- **水平子网 (horizontal subnet)**，对应其所处的分片-slot对 (即委员会)
- **垂直子网 (vertical subnet)**，对应其分配到的索引 (每个验证者使用私密种子进行计算)

## 广播区块


Blob 提议者可以将样本分发到所有子网，但不必成为子网的一部分。此过程如下：

1. **发布**：提议者在正确的水平子网中发布 blob，每个样本附带一个证明

2.**直接样本分发**：水平子网中的其他参与者将区块发布到他们所在的每个垂直子网中

3. **间接样本分发**：提议者向对等节点公布几个其所在的垂直子网。因此，水平子网中的每个参与者还可以查看其对等节点所在的垂直子网，并向这些对等节点广播相应的区块


假设数据块大小为 512 字节，且数据 blob 最大为 512 kB (除去纠删编码)，在包含纠删编码时约为 1 MB，因此存在 2048 个垂直子网。如果每个节点存在于 15 个私密的垂直子网，5 个公共垂直子网并且有 50 个对等节点，假设在最坏情况下每个水平子网 (仅委员会) 中有128个成员，则单单是子网成员将直接分发到 128 * 20 = 2560 个子网(除去冗余发布后约为 1461)，如果加上对等节点，将增加到 128 * 4 * 50 = 25600 个子网。

请注意，从理论上讲，恶意区块提议者有可能在不发布完整区块的情况下将样本发布到垂直子网。为了解决这种情况，我们补充了一个过程，其中未完整发布的区块 (意味着 50％ 及以上可用，但不是 100％ 可用) 能够进行“自我修复”。该过程包括三个基本步骤：

1. **反向分发**：与上述分发过程相同，只是在这种情况下，垂直子网上的对等节点将样本从该垂直子网上传播到与该样本所属 blob 相对应的*水平*子网。

2.  **重构**：如果水平子网中有 1024 及以上个样本 (或者通常来说样本总量的一半)，任何人都可以重构整个 blob，然后向水平子网发布其重构后的 blob。

3.  **分发**：重复上述的分发步骤

&lt;br/&gt;

# 信标链如何工作？


在每个 slot 中，我们为 64 个分片中的每个分片随机选择一个提议者。提议者有权创建一个分片 blob，并通过上述过程对其进行广播，并且将该 blob 的 `ShardHeader` 广播到全局子网。`ShardHeader` 能够被打包到信标链上的同个 slot 中，也可以包含在同个/下个 epoch 中的任何后续 slot 中。


信标链会跟踪 `PendingShardHeader` 的对象列表。`PendingShardHeader` 会存储：1) `ShardHeader` 中的关键信息 (分片和 slot，该 blob 的承诺及其长度)；2) 追踪随机选择的委员会中哪些验证者在 blob 中签名的位域 (实际上就是阶段 0 已经引进的委员会)。`AttestationData` 结构扩展为包含一个 `shard_header_root`，即选定验证者进行投票的 `ShardHeader` 的根哈希。如果证明者看不到已分配给他们的分片-slot对的有效且可用的分片 blob，则他们也可以对空的根哈希进行投票。


如果 `ShardHeader` 得到了委员会中 2/3 验证者的证明，就会**立即得到确认**。如果在下一个 epoch 结束时，`ShardHeader` 得到委员会的支持比其他任何 `ShardHeader` 更多的支持，则在该 epoch 结束时进行确认。

## 分叉选择规则

分叉选择规则发生了改变，以便仅在该区块中确认所有 blob 或其祖先都通过了可用性检查的情况下，该区块才有效。这称为**紧密耦合 (tight coupling)**：如果一条链指向 (已确认) 某个无效 blob，则整条链都被视为无效。这是与“侧链”结构的主要区别：在侧链中，侧链可能会失效，而主链仍然有效。

[这里](https://vitalik.ca/general/2019/06/12/plasma_vs_sharding.html)有对紧密耦合的进一步探索，以及为什么它是有价值。

## 验证者数量较低的情况


如果验证者少于 262144 个（32 slots* 64 shards* 128 最小委员会规模），那么我们不再为所有分片选择一个提议者，而是为一个有限的子集选择一个提议者，循环遍历这些分片。比如说，如果有 32 * 128 * 50 个验证者，在 slot N 的起始分片为 0，则 slot N 将为分片 0-49 分配一个提议者，slot N + 1 将为分片 50-63 和 0-35 分配一个提议者，slot N + 2 将为分片 36-63 和 0-21 分配提议者，依此类推。这样做是为了确保即使在参与度较低的情况下，委员会的规模仍然足够。

## 分片数据的 gas 费


添加了一种类似于 EIP-1559 的机制，按字节计费分片数据，并对价格进行了调整：如果区块的平均容量超过了 50％，则提升费用，反之则降低。因此，指标是 50％ 的平均区块大小。

&lt;br/&gt;

# 安全假设

仅支持数据 blob 的分片之所以强大，是因为与其他分片方案相比，它对安全性假设的依赖性很低。尤其是它避免了诚实的大多数假设 (因为 DAS 可以检测到由大多数发布的不可用 blob) 和时间假设 (与早期的 [DAS 机制]((https://arxiv.org/abs/1809.09044))不同，其使用的是 Kate 承诺而非欺诈证明，因此不依赖于欺诈证明需要极快被广播的假设）。


恶意的 51％ 联盟可以对 blob 进行审查，但是在非分片链中也可以进行 51％ 审查。

主要的新假设是“诚实的少数 DAS 假设”：存在足够多的节点样本，攻击者必须要发布区块中一半以上的内容。如果一个 blob 中有 2048 个样本，则需要恢复 1024 个样本 (考虑到某些客户端将对相同的点进行抽样，因此 2048 * ln（2）~= 1419)，并且每个客户端都进行 20 个采样，则如果每个分片有约超过 70 个客户端在进行抽样的话就可以认定系统是安全的。

&lt;br/&gt;

# 向前兼容性

仅支持数据 blob 的分片设计与以后在分片中添加执行的许多方案具有向前兼容性。特别是我们可以对该方案进行修改以使 blob 包含前状态和后状态根，我们还可以使用欺诈证明或 ZK-SNARK 来验证 blob 中的状态转换是否正确。注意，无论选择哪种方法，确保分片执行的正确性都不依赖于任何诚实大多数假设。

&lt;br/&gt;

# PR 链接

Enjoy!

https://github.com/ethereum/eth2.0-specs/pull/2146

&lt;br/&gt;

# 其他资源

- [Protolambda’s work-in-progress implementation](https://github.com/protolambda/eth2-das)

&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[EIP-1559的状态更新#5]]></title><description><![CDATA[初步的EIP-1559拉取请求已开放。]]></description><link>https://www.ethereum.cn/https://news.ethereum.cn/1559-update-005</link><guid isPermaLink="false">https://www.ethereum.cn/https://news.ethereum.cn/1559-update-005</guid><pubDate>Wed, 06 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [The State of 1559](https://hackmd.io/@timbeiko/1559-updates/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2F1559-update-005)

&lt;br/&gt;

# 要点速览 🎄 


- 我们已经针对 geth 代码库开放了初步的 EIP 1559 拉取请求 (PR)🔥

- 我们的大型状态测试网正缓慢但稳定运行中🐢

- 对于此前所作的交易池管理的结论十分乐观🤞🏻

- Nethermind 即将发布一个新的研发 notebook 以分析矿工的合谋 👀

- 大量关于 1559 的论文和会议📑📺

&lt;br/&gt;

# 客户端更新 ⛓

首先，Vulcanize 团队针对 go-ethereum 库[开放了 EIP-1559 的 PR](https://github.com/ethereum/go-ethereum/pull/21971)。虽然这并不是最终版本的 PR (1559 的规范也未完善)🎉， 但它将为 Geth 团队提供足够的背景信息以进行初步审核。

关于 Besu，这个大型状态测试网生成器让我们忙得不可开交。虽然测试网加载 1 亿个账户相当容易，但添加 1 亿个智能合约存储项目就比较困难了。我们已经改变了方法，使用更小的区块以及合约。尽管进展缓慢，但正稳定进行。

我们准备在下周左右准备好完整的网络。完成后，我们将向其添加其他客户端。当所有人都同步之后，我们将推出一个”交易轰炸“计划，即每个客户端将对网络进行交易轰炸。如果测试网能够在轰炸下正常运行，那么这意味着尽管在网络严重堵塞的情况下，EIP-1559 也能保持稳定。

最后，OpenEthereum [仍在招全职](https://boards.greenhouse.io/gnosis/jobs/4978262002?t=addc4e802)，以推进 1559 实现。

&lt;br/&gt;

# 研发更新🤖 

在交易池管理方面，Ansgar 在[最近的实现者会议](https://github.com/ethereum/pm/issues/229) 中提到，他对他最初的结论感到很乐观。在研究了 geth 代码库之后，他发现最近矿工交易池几乎对每个区块都进行了重新排序，这是 1559 面临的”最坏的情况“之一。换句话说，尽管我们没有提出较好的优化措施，1559 也不应该使目前的网络状态变得更加严重。

对于没有挖矿的节点，他认为我们应该想出一些交易池驱逐方法，尽管可能不太完美，但能够在不同的 `BASE FEE` 下很好地发挥作用。他希望在接下来的几周适当地发布一些文章，以说明其中的细节。

Nethermind 也在那场实现者会议中分享了他们团队的研发更新。他们目前正模拟一些场景 (有些矿工可能合谋提高或降低 `BASE FEE`)，重点关注矿工可能对冲交易费风险的情况。

他们期待可以很快地发布他们的结果。在实现者会议中，他们还提到大多数攻击场景都涉及矿工控制着大部分的哈希率，当 `BASE FEE` 发生巨大改变 (约10倍) 时，这些攻击的成本就会变得非常高。我们非常期待完整的报告！

&lt;br/&gt;

# 论文和会议 📑📺 


- Barnabé Monnot 等人发布了一篇[新论文](https://econcs.pku.edu.cn/wine2020/wine2020/Workshop/GTiB20_paper_7.pdf)，从控制论的角度分析了 1559。

- Juan Benet 在 Storage Market 峰会上发布了 ”[Filecoin 的 1559 实现](https://www.youtube.com/watch?v=leJHrvz-YY8&amp;feature=youtu.be&amp;t=3738)“ 的演讲。

- 我给出了 1559 的概览并回答了大家在 Ethereum Cat Herder 上的 ”[探索 EIP 系列](https://youtu.be/ZbSKo_x9RvU)“ 提出的问题。大家可以在ETHConKorea 上回看这场讨论：https://ethcon.kr/ 。

&lt;br/&gt;

# 下一步 ✅ 

新年计划：

- 将 Besu、Nethermind 和 Geth 引进我们的大型状态测试网中，并开展一场 ”交易轰炸“ 计划；

- 在柏林硬分叉完成后，在 EIP-1559 上添加 EIP-2718 支持； 

- 升级交易池，提高其效率；

- 分析 `BASE FEE` 的更新规则并改善；

- 将 1559 加入 AllCoreDevs 的讨论中👩‍🌾

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Vitalik：Rollups 不完全指南]]></title><description><![CDATA[Vitalik 发文简析各种二层扩容方案，Optimistic rollup vs. ZK rollup？]]></description><link>https://www.ethereum.cn/an-incomplete-guide-to-rollups</link><guid isPermaLink="false">https://www.ethereum.cn/an-incomplete-guide-to-rollups</guid><pubDate>Tue, 05 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2021/01/05/rollup.html)

Rollups解决方案在以太坊社区中正风靡一时，并[有望在将来成为以太坊的关键扩容解决方案](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)。但是这项技术究竟是怎样的呢？它能给我们带来什么？我们将如何使用这项技术呢？本文将尽量回答其中一些关键问题。

# 背景：何为一层、二层扩容？


区块链扩容方式有两种。第一种，可以提高区块链本身的交易容量。这种技术的主要挑战就是：当区块容量越来越大时，区块链将越来越难验证，且中心化程度越来越高。为了避免此类风险，开发者可以提高客户端软件的效率。或者选择另一种更为可持续的方式：利用[诸如分片](https://eth.wiki/sharding/Sharding-FAQs)这类技术，使得区块链上的构建区块和验证工作可以分散至许多节点 ([Eth2]((https://ethereum.org/en/eth2))升级中就会将此技术引入以太坊)。


第二种，可以改变使用区块链的方式。即用户不是将所有交易都直接在区块链上进行，而是通过二层协议在链下执行大部分交易。好比链上有一个智能合约，该合约只有两个任务：处理存款和提款交易、以及验证所有链下交易的有效性。对链下交易进行验证的方法有多种，但他们都具有同一个特性：在链上验证证明比在链下进行原始计算的成本要低得多。

&lt;br/&gt;

# 状态通道 vs Plasma vs Rollups


二层扩容方案的三种主要类型是：[状态通道](https://statechannels.org/)、[Plasma](http://plasma.io/) 和 rollups。他们是三种不同的范式，具有不同的优劣势。我们可以把所有二层扩容解决方案大致地归为这三类 (尽管有的方案因分类模糊而存在命名争议，如 [validium]((https://medium.com/starkware/volition-and-the-emerging-data-availability-spectrum-87e8bfa09bb)))

## 状态通道的原理


更多资料请参考：https://www.jeffcoleman.ca/state-channels and [statechannels.org](https://statechannels.org/)


假设 Alice 正给 Bob 提供互联网连接，作为交换，Bob 每兆字节向她支付 0.001 美元。他们不需要每一次支付都执行交易，而是使用下面的二层解决方案。

首先，Bob 向一个智能合约中存入 1 美元 (或等值的 ETH 或稳定币)。Bob 在一张写着 “0.001美元” 的票上进行签名 (一条链下信息)，然后发给 Alice，这样就完成了对 Alice 的第一笔支付。而第二次支付时，Bob 在另一张写着 “0.002美元” 的票上进行签名，然后发给 Alice。以此类推，可以根据需要进行多次付款。当他们完成交易了，Alice 可以将数值最高的票单发布到链上，并对其进行签名。链上的智能合约将验证 Alice 和 Bob 的签名，然后向 Alice 支付 Bob 票据上的金额，并将剩余的钱退还给 Bob。如果 Alice 不愿意关闭他们之间的状态通道 (出于恶意行为或由于技术故障)，则 Bob 可以启动提款期 (withdrawal period)，如果 Alice 在这段期间内 (比如7天) 还是没有向 Bob 提供票据，那么 Bob 就可以拿回他的所有钱。

该技术功能强大：可以对其进行调整，以进行双向支付、处理智能合约关系 (如，Alice 和 Bob 在通道中签订金融合约)、以及对通道进行组合 (比如，当 Alice 和 Bob、Bob 和 Charlie 之间有一条开放通道时，Alice 和 Charlie 也可以进行去信任交易)。

但状态通道的作用是有限的：无法将资金在链外发送给没有参与进来的用户；通道不能代表那些逻辑上没有明确所有者的对象 (如 Uniswap)；并且如果要进行更为复杂的交易，需要在通道内锁定大量资金。


## Plasma 的原理


更多资料请参考：最早的 [Plasma 论文](http://plasma.io/plasma-deprecated.pdf)，以及 [Plasma Cash](https://ethresear.ch/t/plasma-cash-plasma-with-much-less-per-user-data-checking/1298)。


用户向某个 Plasma 链的智能合约中发送一笔资产以完成存款。Plasma 链给该资产分配一个唯一的 ID (如 537)。每条 Plasma 链都有一名运营者 “operator” (他可以是一个中心化的角色、一个多签名者、或诸如 PoS/DPoS 此类更为复杂的东西)。每隔一段时间 (可以是15秒至1小时)，运营者便会生成一个等待批量处理的汇总交易 (由他们在链下收集到的所有 Plasma 交易组成)。

这些运营者会生成一个默克尔树，树中每个索引 `X` 处，如有存在交易的话，会显示某笔转移交易资产 ID `X`，如果没有交易，叶子值为零。随后他们将该默克尔树的默克尔根发送到链上，同时还会将每个索引 `X` 的默克尔分支发送给其资产的当前所有者。如果用户想要进行提款，那么就要公布其最近向其发送资产的交易的默克尔分支。然后智能合约就将启动挑战期，在此期间，任何人都可以尝试使用其他默克尔分支来证明该提款无效。需要至少证明其中一项：(i) 发送方在发送资产时并不是该资产的所有者；(ii) 发送方在后来将资产发给了其他人。如果在某个时间段内 (如七天) 没有人证明该提款是欺诈性的，用户便可以取出他的资产。


Plasma 比状态通道拥有更加强大的性能：使用 Plasma，用户可以将资产发送给从未加入其系统的参与者；对资本的要求也低许多。但 Plasma 也是有缺点的：在“正常操作”期间，通道不需要任何数据就可以在链上进行传输，而 Plasma 要求每条链定期发布一个哈希。此外，在 Plasma 上转账不是即时的：用户需要等一段时间并且等到区块被发布之后。


再者，Plasma 和通道都有一个关键弱点：确保这两种方案安全的前提是，这两种系统所控制的对象都有逻辑上的“所有者”。如果该资产的所有者不关心其资产，那么可能会导致证明其资产无效的结果。这对许多应用程序来说是可以接受的，但是对于许多其他应用来说 (如 Uniswap) 来说是破坏交易原则的。甚至在一些系统中如果对象的状态不经其所有者的同意就可以被改变 (如基于账户的系统，你可以不经某人的同意就可以提升其余额)，这些系统也不适用 Plasma。这意味着，当部署任何实际 Plasma 或通道时，都需要大量的“某个特定应用程序的推理”，并且不可能创建一个模拟完全的以太坊环境 (或“EVM”) 的 Plasma 或者状态通道系统。为了解决此问题，各种 rollup 方案出现了。

## Rollups

*其他资源参见：[EthHub on optimistic rollups](https://docs.ethhub.io/ethereum-roadmap/layer-2-scaling/optimistic_rollups/)和[ZK rollups](https://docs.ethhub.io/ethereum-roadmap/layer-2-scaling/zk-rollups/)*

Plasma 和通道类是“纯粹”的二层方案，因为其将数据和计算都移至链下。然而，[围绕“数据可用性”的基本博弈论问题](https://www.youtube.com/watch?v=OJT_fR7wexw)意味着这些方案不一定对于所有应用来说都是安全的。Plasma 和通道方案的解决方式是依靠所有者完全知晓状态，但这使得此类方案无法完全通用化。Rollups，则是一种“混合型”二层方案。Rollups 将计算 (以及状态存储) 移至链下，但将每笔交易的一些数据放在链上。为了提高效率，这类方案借助了许多复杂的压缩技巧以尽可能*使用计算替代数据*。结果是系统的扩容性仍然受到底层区块链的数据带宽限制，但比较来看仍十分有利：以太坊基础层 ERC20 通证的转移成本约为 45000 gas，而 rollup 中的 ERC20 通证仅转移占用 16 字节的链上空间，成本不到 300 gas。

数据在链上这一点很关键 (请注意：将数据“放在 IPFS 上”是行不通的，因为 IPFS 不能就任何给定的数据是否可用提供*共识*；数据*必须*被记录在链上)。将数据放在链上并对此达成共识，使得任何人都可以根据需要在本地处理 rollup 中的所有操作，从而允许其对欺诈进行监测、发起提款或亲自开始批量生成交易。缺乏数据可用性意味着一名恶意的或是离线的运营者能够产生的影响甚至会更小 (例如他们无法造成一周的延迟)，从而为有权发布批量交易的人打开更大的设计空间，并使 rollup 更容易有理可循。更重要的是，缺乏数据可用性意味着不再需要映射资产到所有者，从而我们能得出以太坊社区相较之前的二层扩容方案对 rollups 更加期待的关键原因之一：**rollups 是完全通用的，我们甚至还可以在 rollup 内部运行 EVM，使得既有的以太坊应用几乎不需要编写新代码就能迁移到 rollups 上。**

&lt;br/&gt;

# Rollup 的原理到底是什么？

在链上存在一份智能合约，其中包含一个**状态根**，即 rollup 状态的默克尔根 (也就是 rollup 内部的账户余额、合约代码等等)。



![1](https://i.ibb.co/5WwcCKZ/1.png)



任何人都可以发布一批汇总交易 (**batch**)，这是一个经由高度压缩的交易集合，其中包含之前的状态根和新状态根 (处理交易*之后*的新默克尔根)。该合约会检查 batch 中的旧状态根是否匹配其当前的状态根，如果匹配的话，合约会对状态根进行更新。



![2](https://i.ibb.co/t275RSx/2.png)



为了支持存款和提款，我们增加了输入和输出在 rollup 状态“外部”的交易的功能。如果一个 batch 中包含来自外部的输入，则提交到该 batch 的交易也需要将资产转移到 rollup 合约。如果一个 batch 中包含来自外部的输出，则智能合约在处理该 batch 时会发起提款。


这就是 rollup 的工作原理了。但还有一个重要细节：**如何得知 batches 里的后状态根 (post-state root) 是正确的呢？**如果某人能够提交一个具备任意后状态根的 batch，而无需承担任何后果，他们完全可以将 rollup 中的所有代币都转移给自己。这个问题很关键，因为由此诞生了两种不同的解决方案，这两种解决方案又衍生出了两种不同的 rollups。

## Optimistic rollups 与 ZK rollups

这两种 rollups 为：

1.  **Optimistic rollups**，其解决方案为**欺诈证明 (fraud proofs)**：这类 rollup 会追踪所有历史状态根以及每个 batch 的哈希值。如果任何人发现某个 batch 的后状态根不正确，他可以向区块链发布一个证明，证明该 batch 计算错误。合约会对证明进行验证，并且对该 batch 及其之后的 batches 进行回滚。

2.  **ZK rollups**，其解决方案为**有效性证明 (validity proofs)**：每个 batch 都包含一个称作 ZK-SNARK 的密码学证明 (例如使用 [PLONK](https://vitalik.ca/general/2019/09/22/plonk.html) 协议)，以证明后状态根是正确执行 batch 的结果。无论计算量有多大，该证明都能在链上得到极速验证。

这两种 rollup 之间存在复杂的权衡：


| 特性                     | Optimistic rollups                                           | ZK rollups                                                   |
| :----------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |
| 每 batch 的固定 gas 消耗 | **约 40,000** (轻量交易，主要只是改变状态根的值)             | 约 500,000 (验证 ZK-SNARK 所需计算量较大)                    |
| 提款期                   | 约一周 (提款存在延迟，需要留出时间提交欺诈证明，如果发生欺诈需要取消提款) | **极快** (只需要等到下一个 batch)                            |
| 技术复杂度               | **低**                                                       | 高 (ZK-SNARK 是一种非常新的技术，并且数理复杂)               |
| 通用性                   | **易达成** (通用的 EVM rollups 即将登陆主网)                 | 较难达成 (使用 ZK-SNARK 证明的通用 EVM 执行相较简单计算证明难度更大) |
| 每笔链上交易的 gas 消耗  | 较高                                                         | **较低** (如果一笔交易中的数据只用作验证，不引发状态改变，那么能够省去该数据，在 optimistic rollup 中则需要发布，因为有可能在欺诈证明中需要对其进行查验) |
| 链下计算成本             | **较低** (尽管需要大量全节点重新进行计算)                    | 较高 (专门针对通用计算的 ZK-SNARK 证明可能会很昂贵，比直接运行计算可能要贵数千倍) |


总的来说，我个人的观点是，**在短期内，optimistic rollup 的显著优势在于其通用的 EVM 计算，而 ZK rollup 更可能被用于支付、交易和其他特定用例。但中长期来看，随着 ZK-SNARK 技术的成熟，ZK rollup 会在所有用例中发挥出优势。**

## 解构欺诈证明

Optimistic rollup 的安全性保障主要来自于：如果有人在 rollup 中发布了一个无效的 batch，其他任何跟进该链的用户监测到欺诈行为都可以发布欺诈证明，向合约证明该 batch 的无效性，并进行回滚。



![3](https://i.ibb.co/pP9vgp3/3.png)



在上图中，声称某 batch  无效的欺诈证明会包含绿色的数据：如果要证明特定账户被该 batch 读取和/或被修改，则需要该 batch 本身 (可以对照存储在链上的哈希值进行检查) 以及 Merkle 树的各个部分。不需要提供图中黄色的节点，因为他们能够被绿色的节点重构。该数据已经足够执行 batch 并计算后状态根了 (这与 [无状态客户端 ](https://ethresear.ch/t/the-stateless-client-concept/172)验证单个区块的方式几乎相同)。如果经计算的后状态根以及获得的 batch 中的后状态根不一致，那么该 batch 就是无效的。


可以保证如果某个 batch 不正确，但之前所有的 batches 都是正确的，那么就能够创建一个欺诈证明以表示该 batch 是不正确的。请注意对之前 batch 的声明：如果有超过一个无效的 batch 被发布到 rollup 中，那么最好尝试证明最早的无效 batch。也可以说，如果某个 batch 是正确的，那么永远都无法创建一个欺诈证明表示其无效。

## 如何进行压缩？

一笔简单的以太坊交易 (发送 ETH) 大小约为 110 字节。而在 rollup 上进行 ETH 转账，大小仅为约 12 字节：

| 参数      | 以太坊            | Rollup |
| :-------- | :---------------- | :----- |
| Nonce     | ~3                | 0      |
| Gasprice  | ~8                | 0-0.5  |
| Gas       | 3                 | 0-0.5  |
| To        | 21                | 4      |
| Value     | ~9                | ~3     |
| Signature | ~68 (2 + 33 + 33) | ~0.5   |
| From      | 0 (从签名中恢复)  | 4      |
| Total     | ~112              | ~12    |


其中一部分只是简单的高级编码：以太坊的 RLP 编码方式在每个值上会浪费 1 字节。但是其中还包括一些机智的压缩技巧：

- **Nonce**：这个参数的主要目的是预防重放攻击。如果帐户的当前随机数为 5，则该帐户的下一个交易记录必须包含随机数 5，但是交易一经处理，该帐户中的随机数将增加为 6，因此无法再次处理该交易。在 rollup 中，我们可以完全省去随机数，因为我们可以直接从前状态中恢复随机数；如果有人尝试使用先前的随机数重放交易，签名将无法验证，因为会依据包含较高随机数的数据来对签名进行检查。

- **Gasprice**：我们可以允许用户按固定 gas 价格范围进行支付，例如 2 的 16 次幂。或者我们可以在每个 batch 中收取固定的 gas 费用，甚至可以将 gas 费的支付完全移出 rollup 协议，让交易者使用通道向 batch 创建者支付相应费用。

- **Gas**：同样地，我们可以将总 gas 设定为 2 的多次幂形式。或者我们也将 gas 限制在 batch 的水平。

- **To**：可以用 *index* 来替换 20 字节的地址 （例如，如果某地址是被添加到默克尔树中的第4527个地址，我们只需使用 index 4527 来表示即可。然后向状态添加一个“子树” (subtree) 来存储index和地址本身的映射关系)。

- **Value**：我们可以用科学记数法储存值。在大多数情况下，交易只需要 1-3 个有效位。

- **Signature**：我们可以使用 [BLS 聚合签名](https://ethresear.ch/t/pragmatic-signature-aggregation-with-bls/2105)将大量签名聚合成一个约为 32-96 字节 (取决于协议) 的签名。该聚合签名可以依据消息集和 batch 的发送者集一次性进行检检查。表中的 “~0.5” 表示一个聚合签名中可以包含的签名数量是有限制的，因为需要能够在一个欺诈证明中对聚合签名进行验证。


ZK rollups 特有的一个重要压缩技巧是：如果交易的一部分信息仅用于验证，并且不用于计算状态更新，那么该部分可以移至链下。Optimistic rollup 无法做到这一点，因为该数据仍然需要存在链上，以备需要在欺诈证明中进行检查的不时之需。而在 ZK rollup 中，SNARK 已经证明了 batch 的正确性，也就是说验证所需的数据已经齐全。具备隐私保护功能的 rollups 是一个重要例子：在 optimistic rollup 中，每笔交易中用于隐私保护的 ZK-SNARK 证明需要在链上，需要占据约 500 字节。而在 ZK rollup 中，包含整个 batch 的 ZK-SNARK 已经证明了“内部” ZK-SNARK 的有效性。


这些压缩技巧是 rollups 扩容性的关键，否则 rollups 扩容性相较底层连只能提高约 10 倍 (虽然对于某些特定的计算密集型应用来说，简单的 rollups 方案已经足够)，而对数据进行压缩后，几乎对所有应用来说，扩容性都可以实现 100 倍以上的提升。

## 谁能批量打包交易并提交？


对于 optimistic rollups 和 ZK rollups 中交易的打包权有许多说法。一般来说，任何想要打包交易并且提交的用户，必须要锁定大量存款。如果用户提交了包含欺诈/无效交易的 batch (例如包含无效状态根)，那么该用户的存款的一部分会被销毁，另一部分则作为欺诈证明者的奖励。除此之外，还存在其他可能性：

- 完全“**无政府状态**”：任何人都可以在任何时候批量打包交易并提交。这是最简单的方式，当然也存在缺陷。尤其是多个参与者同时尝试提交但最终只有一个 batch 能被成功打包。这会导致大量生成证明的工作和/或发布 batches 的 gas 被白白浪费。

- **中心化处理**：存在一个行为者即**排序者 (sequencer)** 提交 batches (但提款存在例外：通常来说一个用户可以首先提交提款请求，如果排序这没有在下个 batch 中处理该提款，那么该用户能够自己提交一个 batch)。这是最“高效”的方式，但是依赖于一个中心化的角色。

- **排序者拍卖**：通过定期举行拍卖的形式来确定谁有权成为下一个周期的排序者。其优点在于它可以筹集资金，并通过例如由 rollup 控制的机制 (例如 DAO) 来进行分配。(参见 [MEV 拍卖](https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788))

- **PoS 集随机选择**：任何人都可以将 ETH (或是 rollup 协议的代币) 存入 rollup 合约，然后在存款人中随机选择每个 batch 的排序者，被选中的可能性与锁定资产成一定比例。这个方式的主要缺点在于会有大量资本被锁定，而这是不必要的。

- **DPoS 投票**：通过拍卖确定一个排序者，如果该行为人表现不佳，那么代币持有者可以通过投票将其驱逐，并发起新的拍卖。

### 将批量打包和状态根处理相独立

目前正在开发的一些 rollup 项目采用了“独立批量打包”的方式，也就是将提交二层交易的 batch 和提交状态根的过程分离。这种做法的优势在于：

1.  使得多个排序者能够同时发布 batches，以提高扛审查性，而避免了因为一些 batches 被首先打包而导致其他 batches 无效的问题。
2. 如果某个状态根是无效的，我们不需要回滚整个 batch，可以只回滚状态根，并等待他人提供该 batch 的新状态根。这保障了交易发送方的交易不会被回滚。

总之，在效率、简洁性和抗审查性等方面的权衡十分复杂，许多方案也在进行探索。目前要判断哪些概念是最佳组合还为时尚早，时间会证明一切。

&lt;br/&gt;

# rollup能在多大程度上实现扩容？


在现有的以太坊链上，gas上限是1250万，一笔交易里，每个字节的数据消耗16 gas。这意味着如果一个区块只包含一个batch (我们说相当于打包了一个 zk rollup，在证明验证上花费50万gas)，那一个batch可以包含  (1200 万 / 16) =750,000 字节的数据。如上文所示，对于一个以太坊转账的rollup，每一次用户操作只需 12 个字节，也就是说该批交易可以包含高达6.25万笔交易。现在平均出块时间为[13秒]((https://etherscan.io/chart/blocktime))，即相当于大约每秒4807笔交易 (相比之下，现在直接在以太坊上转账是每秒 1250万/21000/13~=45笔交易 )



以下表格是其他用例的例子：

| 应用                                              | 所占的字节                             |  一层的gas消耗                            |  扩容的最高水平 |
| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :---------------------------------- |
| ETH 转账                                             | **12**                                                       | 21,000                                                       | 105x                                |
| ERC20转账                                            | **16** (需要额外 4 个字节来指定代币) | ~50,000                                                      | 187x                                |
| Uniswap 上的交易                                        | **~14** ( 发送者 4 个字节+接收者 4 个字节+交易值 3 个字节+最高价格 1 个字节+其他杂项 1 字节) | ~100,000                                                     | 428x                                |
| 保护隐私的提款 (Optimistic rollup) | **296** (根索引 4 个字节+nullifier 32 个 字节+接收者 4 个字节+ZK-SNARK 证明 256 个字节) | [~380,000](https://etherscan.io/tx/0x6e311f84655af72614966705584569b52d6e314f2d61b965db91db41fd01b1e1) | 77x                                 |
|  保护隐私的提款 (ZK rollup) | **40** ( 根索引 4 个字节+nullifier 32 个字节+接收者 4 个字节) | [~380,000](https://etherscan.io/tx/0x6e311f84655af72614966705584569b52d6e314f2d61b965db91db41fd01b1e1) | 570x                                |

*扩容的最高水平是这样计算的：（一层的 gas消耗）/（rollup所占的字节 \*16）\*1200万/1250千万*


现在，值得注意的是这些数据都过于乐观了，原因有几个。最重要的是，一个区块几乎不可能只包含一批交易，因为最起码会有多个rollup。第二，存款和提款行为会一直存在。第三，在短期，使用率会比较低，所以固定消耗会占主导。但即使这些因素都考虑到了，超过100倍的扩容水平也有望成为常态。


如果我们想每秒交易量达到 1000-4000 呢 (取决于特定的用例)？这就是[eth2 数据分片](https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/sharding_proposal)发挥作用的时候了。分片协议为每 12 秒提供 16MB 的空间来容纳任何数据，且系统确保数据可用性的共识。数据空间可以被rollup使用。这大约每秒 1398kb 的空间比现在以太坊链上每秒大约 60kb 提高了23倍，且在更长期来看，数据容量有望继续增加。因此，使用 eth2 分片数据的rollup可以以每秒约 10 万笔交易的吞吐量批量处理，在未来可能更多。

&lt;br/&gt;

# rollup上还有哪些未解决的困难？


尽管 rollup 的基本概念现在已为人所了解，我们确信它们是完全可行且安全的，现在多种 rollup 已经部署到主网上，但 rollup 设计还有很多领域未被充分探索，以及在实现桥接以太坊生态上大部分的活动到 rollup 上，以利用它们的可扩容性这件事上，还存在不少困难。一些关键的困难包括：


- **用户和生态的入驻**——使用 rollup 的应用不多，用户也不熟悉 rollup，只有少数钱包开始集成 rollup。商家与慈善机构也还不支持这种支付方式。

- **跨 rollup 交易**——高效地从一个 rollup 移动资产与数据 (例如：预言机输出) 到另一个，而无须产生经由基础层的费用。

- **审计激励**——如何最大程度提高至少有一个诚实节点完整验证一个optimistic rollup的机会，使得出现问题时他们会广播欺诈证明？对于小规模 rollup (高至每秒几百笔交易），这个问题不大，因为对矿工来说只是举手之劳，但对于大规模的 rollup 来说，还需要更充分的理由以说服矿工去做验证。

- **探索plasma和 rollup 之间的设计空间**——是否有技术可以放*一些* 状态更新相关数据到链上而不是全部的数据，且这些数据会产生有用的东西？

- **最大程度提高提前确认的安全性**——很多rollup都会为了更快的用户体验 (UX) 提供“提前确认 (pre-confirmation)”，这里排序者会马上承诺某笔交易会被打包到下一批交易里，而如果此承诺没有被兑现，该排序者将损失其保证金。但这个方案的经济安全性是有限的，因为排序者可以同时对非常多的人作出非常多的承诺。这个机制可以改善吗？

- **提高缺席排序者的回应速度**——如果一个rollup的排序者突然离线了，在最短的时间内以最低的消耗从这种情况恢复过来是很重要的，方法不是快速且低消耗地大规模退出到另一个rollup，就是换一个排序者。

- **有效ZK-VM**——生成一个ZK-SNARK证明，证明通用的EVM代码 (或一些现有的智能合约可以编译的不同 VM) 已被正确执行和有一个给定结果的。

  &lt;br/&gt;

# 结论

Rollup是一个强大、新颖的二层扩容范式，并有望成为以太坊在中短期未来 (也可能是长期) 扩容的基石。以太坊社区已经表现出对 rollup 的强烈兴趣，因为不像之前在二层扩容的尝试，它们可以支持通用的EVM代码，使得现有的应用可以轻易迁移。Rollup 有一个重要的妥协：交易处理不是完全在链下进行，而是每笔交易留下一小部分数据在链上。

rollup 有很多种，在设计空间上有很多选择：可以是使用欺诈证明的optimistic rollup，也可以是使用有效性证明 (即 ZK-SNARKs) 的 ZK rollup。排序者 (可以发布打包好的交易到链上的用户)可以是中心化的行为者、自由放任者、或两者间的很多可能性。rollup还是早期的技术，其开发在不断快速地进行中，但它们是可行的，且其中有些 (比较有名的是[路印](https://loopring.io/)、[ZKSync](https://wallet.zksync.io/)、和[DeversiFi](https://www.deversifi.com/)) 已经运行数月了。期待今年 rollup 会有更多令人振奋的成果。

&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[Eth2进展更新（截至2020/12/30）]]></title><description><![CDATA[以太坊2.0存款合约逾 220 万 ETH，价值超 20 亿美元]]></description><link>https://www.ethereum.cn/wnie-2020-12-30</link><guid isPermaLink="false">https://www.ethereum.cn/wnie-2020-12-30</guid><pubDate>Mon, 04 Jan 2021 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_201230)

这期篇幅不长，建议大家有时间的话好好消化一下，干货满满哦🙂！

&lt;br/&gt;

#  阶段0：信标链

 一切都进展得很顺利。


截至本译文发布，已经有超过 220万 ETH 被[发送](https://www.duneanalytics.com/hagaetc/eth2-0-deposits)到存款合约，价值超过 20 亿美元，活跃验证者数量超过五万，等待激活的队列时长约为20天。验证者参与率一直在 99% 左右。无消息即是好消息！

## 罚没事件

我一直在[追踪罚没事件]((https://www.reddit.com/r/ethstaker/comments/kfqkqk/slashed_the_devs_want_to_hear_from_you/))，以从中总结经验。自[上次清点]((https://hackmd.io/@benjaminion/wnie2_201212#Slashings))之后，又发生了 18 起罚没事件，主要有三个原因：

1. 验证者 [1644](https://beaconcha.in/validator/1644) 因为双重投票[被罚没]((https://beaconcha.in/block/102389#attester-slashings))。看起来是一个个人节点，但还没有更多相关信息。
2. 验证者 [23241](https://beaconcha.in/validator/23241) 收到了[证明者罚没]((https://beaconcha.in/block/118136#attester-slashings))。我一直在和该节点保持沟通，简单来说该起罚没事件的起因是在系统更新时使用同样的密钥重复运行验证者。
3. 在最严重的一起罚没事件中，有 16 名验证者被罚没，几乎是当前被罚没验证者数量的一半。这 16 名被罚没的验证者很明显属于同一个实体。验证者编号在 [38058](https://beaconcha.in/validator/38058) 到 [38148](https://beaconcha.in/validator/38148) 之间，并且是在一笔 3200 ETH ([100 份质押金]((https://etherscan.io/tx/0x7fb4decbb47f5e57ffe58ed01d96e4b61b0b677b22bbc507d22c38271c6faf76))) 的存款中被创建，此处为该批量存款[合约地址]((https://etherscan.io/address/0x39dc6a99209b5e6b81dc8540c86ff10981ebda29#code))。Etherscan 将该合约标记为 “Staked.‍us: Eth2 Depositor”，附上了 staked.‍us 的网站链接，并且在合约评论中确认了该合约作者是 staked.us。但是该合约是开放的，可供任何人使用。目前没有人公开为这次罚没事件担责。 [staked.us](http://staked.us/) 的网站上表明 “have never been slashed” (从未被罚没)。


虽然目前被罚没不是什么好事，但也不是世界末日。惩罚总额只占 32 ETH 中的 0.6 ETH。更重要的是，被罚没验证者的余额目前处于锁定状态，并且在 Eth1 和 Eth2 合并之前不可用。

## 测试网


目前 Pyrmont 测试网运行良好。虽然有时候客户端团队进行升级和测试时会出现未敲定的情况，但总体来说是健康的状态。测试网没有验证者队列，如果大家想要测试自己的 staking 设置，不妨参与 Pyrmont 测试网。

## 工具

越来越多的工具开始涌现。

[Bitquery](https://bitquery.io/) 已经[发布](https://twitter.com/Bitquery_io/status/1344347446587973632)了一个信标链[浏览器](https://explorer.bitquery.io/eth2), 以及 [GraphQL API](https://explorer.bitquery.io/graphql)。这不同于通常的区块链浏览器，并且提供了新颖的数据。例如，我们可以看到随着越来越多的验证者被激活，[每个 slot 委员会](https://explorer.bitquery.io/eth2/attestations)的增长情况。我们希望达到64个委员会，目前已经有 12 个了。但是其中的[证明者罚没数据](https://explorer.bitquery.io/eth2/attester_slashings)看起来有些出入。


[Web3Labs](https://www.web3labs.com/) 也发布了其 [Web3j Eth2 Beacon Node API Client](https://blog.web3labs.com/announcing-web3j-eth2-beacon-node-api-client)，支持使用 Java 语言来查询 Eth2 API，他们使用了 Teku 来进行演示🙂。

## 来自 Protolambda 的更新

Proto 没有度假！此处是他的[长推文系列更新]((https://twitter.com/protolambda/status/1340940577202966528))，总结了他最近的工作和计划。数据可用性采样的原型工作正在[取得进展]((https://github.com/protolambda/go-kate))。

&lt;br/&gt;

# 释义性资源

[/u/accidental-green](https://www.reddit.com/r/ethstaker/comments/kel6rs/quick_question/gg4xbup/?context=3) 撰写了一篇 [Ethereum 2.0: Ubuntu for Beginners](https://agstakingco.gitbook.io/ethereum-2-0-ubuntu-for-beginners/) 教程，其中附带了许多有用的以太坊相关[资源](https://agstakingco.gitbook.io/ethereum-2-0-ubuntu-for-beginners/ethereum-2.0-resources)。AG 还写了许多其他的 [Eth2 教程](https://agstakingco.gitbook.io/ethereum-2-0-ubuntu-for-beginners/ethereum-2.0-resources#eth-2-0-other-guides)。

Beaconcha.in 也整合了有价值的以太坊2.0[学习资源](https://beaconcha.in/education)。

Vitalik 撰写了一篇文章简单解释[分片 + DAS](https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/sharding_proposal)，DAS 即“data availability sampling” (数据可用性采样)。目前我们已经启动了信标链，如果大家想要进一步了解 Eth2 接下来的路线，这篇文章值得一读。

&lt;br/&gt;

# 媒体及其他资源


以太坊基金会的 Aditya Asgaonkar 与 ETHPlanet 进行了一次 [AMA](https://medium.com/ethplanet/decentralization-is-the-most-competitive-function-of-eth2-0-ethereum-researcher-aditya-asgaonkar-5d104c6f5ea4)：去中心化是 Eth2.0 最具竞争力的特征。

Vitalik 在 [EthBA](https://ethereumba.com/) 进行演讲的[实时推特](https://twitter.com/smpalladino/status/1339702065485013002)，主题是“以太坊在2021年及之后的发展”，此处是[演讲视频](https://www.youtube.com/watch?v=FNHGOsYf2sM)。

Danny Ryan 在信标链创世前参加了 Coindesk 的[采访](https://www.coindesk.com/ethereum-core-danny-ryan-2021)，并且因此出现在其年度回顾文章中。

Stateful Works 目前正在[编写一本书]((https://stateful.mirror.xyz/a151ee1decb2028a8bb48277f6928c6f38319c32601dc1da1ee82acfcad2e525))，讲述“使以太坊信标链成为现实的贡献者以及团队”。我已经提交了我的部分，说实话挺难的。我努力使其精简了，但对于这个话题我觉得我自己就能写一本书。或许有一天我会的。

&lt;br/&gt;

# 写在最后

感谢大家的支持。最后祝大家新年快乐，2021年心想事成🎆！

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2021/1/4]]></title><description><![CDATA[# Fuel主网上线
# Vitalik 分片与数据可用性]]></description><link>https://www.ethereum.cn/eth-Weekly-2021-1-4</link><guid isPermaLink="false">https://www.ethereum.cn/eth-Weekly-2021-1-4</guid><pubDate>Mon, 04 Jan 2021 00:00:00 GMT</pubDate><content:encoded>![捌](https://i.ibb.co/tcH57Xm/image.png)

# Eth2

**Vitalik发表关于分片与数据可用性的提案**

*An explanation of the sharding + DAS proposal* (分片与数据可用性提案的解释)一文论述的是Eth2 设计中PoS外另一种中心特性：分片。此提案介绍了一种分片的有限形式，根据以rollup为中心的路线图，这种形式为“数据分片”，即分片会储存数据，并对大约250kB blob的数据可用性做证明。这种可用性验证方法可以为像rollup这种layer2协议提供安全且高吞吐量的数据层。



![分片](https://i.ibb.co/yNfKR9X/image.png)

 

要实现既能对大量数据的可用性进行验证，又无须所有节点都自行下载所有数据，需要两种相互叠加的技术：(i) 由随机采样的委员会做证明， (ii) 数据可用性采样 (DAS)。在文章中，Vitalik给随机采样委员会和数据可用性采样做出解释，阐述了两者需要叠加使用的原因、以及详述了分片在P2P层的运作机制和信标链的运作机制。

原文：https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/sharding_proposal

 

**去领取“信标链创世存款者POAP咯**

在2020年11月24日前把32个ETH提交到信标链创世合约的地址都可以获得“信标链创世存款者”的POAP，现在已经可以通过输入以太坊地址或ENS名称来领取了，指路：https://poap.delivery/eth2-genesis/

 &lt;br/&gt;

# Layer2

**Connext审计完成，即将上线主网**



![connext](https://i.ibb.co/nwGrKwH/connext.png)



 

Layer2互操作性解决方案Connext已完成其合约审计，并计划于本周在主网上线阶段0：Minimum Viable Network。然后分别在2021年的第一季度和第二季度发布阶段1和阶段2。Connext是一个Layer2互操作性解决方案，通过状态通道，在各个Layer2解决方案、Eth2分片、甚至其他Layer1区块链之间实现跨链路由网络。此前，Connext于2020年11月17日在测试网推出了Connext的迭代版本Vector，着重于解决接入/退出Layer2 解决方案的问题。
详情请看：https://medium.com/connext/audit-results-launch-plan-961411801388

 

**Optimistic rollup解决方案Fuel v1上线主网**

Fuel Labs 于1月1日宣布在主网上线Fuel v1版本，目前仅发布了适用于开发者的命令行界面 (CLI) 版本。



![FUEL](https://i.ibb.co/h77p702/fuel.png)

 

Fuel主要使用于一些支付应用，基于UTXO模型的Fuel v1 可处理约500笔交易每秒，每笔交易&lt;2000 Gas。除了简单的转账功能之外，Fuel的功能还包括：1) 跨链原子兑换以及即时提款；2) 使用优先级聚合器进行软确认；3) 以OP_RETURN的形式输出；4) 使用ETH或DAI付手续费(并逐渐引进其他加密货币支付)

访问此处：https://mainnet.fuel.sh/network 可查看Fuel的网络状况。

 

**volmex. finance 与Optimism合作**

非托管交易协议volmex.finance 宣布引入Layer2 扩容解决方案Optimism，提供DeFi用户的用户体验。



![optimism](https://i.ibb.co/gPyXQTx/optimism.png) 

 

而在1月1日，Optimism团队发文回顾了2020年一年的工作进展：9月25日推出其Optimistic Ethereum 测试网，并于两周前完成测试网的最后一个阶段；随后于12月增加欺诈证明测试；在测试网上成交了超过3万笔交易和1000笔存取款。

 

并给出了2021第一季度的路线图：1) 1月15日在主网软启动Optimism，与Synthetix在主网上进行试运行；2) 3月15日将推出公共测试网，上线各种项目集成文档和工具。

 &lt;br/&gt;

# EIP-1559

哥伦比亚大学教授Tim Roughgarden在发表了《EIP-1559的经济学分析》后出席了Silicon Valley Ethereum Meetup，进一步对EIP-1559进行讲解，其后还有Vitalik对Tim进行提问的环节。演讲概要如下：



![EIP1559](https://i.ibb.co/JdcHD7N/1559.jpg)

 

ECN翻译：

l 每个区块都有一个依据历史交易而定的基本费 (base fee) 

l 基本费收入会被销毁

l 区块容量从上限为12.5M gas扩展到区块平均容量为12.5M gas

——新的上限为25M gas

l 过去的区块容量会用于衡量需求、调整基本费

——不断寻找供应等于12.5M时的市场出清价

l 由用户指定的小费会支付给区块矿工

——在正常情况下为矿工打包区块提供最小的激励

——高额的小费可以为特殊情况提供激励

视频：https://www.youtube.com/watch?v=ndNyx-Oj9Wk&amp;feature=youtu.be

 &lt;br/&gt;

# DeFi

**资产三角**

Messari 的研究员Ryan Watkins 在推特上通过传统金融类比了以太坊、比特币的角色。

![defi](https://i.ibb.co/q7b3yZZ/defi.png) 

如上图所示，Messari表示所有资产可以被分为3类：资本资产 (股权/债券)、大宗商品 (石油)以及价值储存 (美元)，ETH可能是第一种包括以上3类的资产。如果比特币就像黄金 (人们将其作为价值储存但不会作为金钱使用)，那么ETH就像金钱 (在以太坊的链上经济中最具有流动性的资产)。

 &lt;br/&gt;

# 生态

来自HOPR的Sebastian构建了开源软件GasTrology.Eth，它能通过分析过去的区块帮助用户预估以太坊交易价格。它不依赖于中心化服务器，且分析速度比后者快10倍。

指路：http://gastrology.eth.link/

 &lt;br/&gt;

ETHGlobal将在1月15日到2月7日举行2021年第一次黑客松，主题时MARKETMAKE，构建未来的金融，奖金超过5万美元。12月31日已开始接受报名，报名与详情：https://marketmake.ethglobal.co/

 &lt;br/&gt; 

# 本期最佳Meme

![meme](https://i.ibb.co/v4KC88S/meme.png) 

 &lt;br/&gt; 
 &lt;br/&gt; 
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/12/31]]></title><description><![CDATA[以太坊2020大事记]]></description><link>https://www.ethereum.cn/eth-weekly-2020-12-31/</link><guid isPermaLink="false">https://www.ethereum.cn/eth-weekly-2020-12-31/</guid><pubDate>Thu, 31 Dec 2020 00:00:00 GMT</pubDate><content:encoded>2020年对整个区块链行业乃至全世界来说都是跌宕起伏的一年，以太坊也在今年度过了五岁的生日。这一年，以太坊生态向我们展现了它蓬勃的生命力、颠覆性的创造力以及多元的包容性。

那么2020年以太坊给我们讲述了哪些精彩的故事？我们又如何见证了以太坊的成长？在这新旧交替之时，让我们一起来回顾回顾“以太坊2020大事记”！

&lt;br/&gt;


![以太坊2020大事记](https://i.ibb.co/C2rNg5Q/image.png)

&lt;br/&gt;

# Eth2

**Eth2客户端更新**

以太坊2.0客户端Lighthouse、Teku、Nimbus、Prysm均发布了其最新版本。 

如果你是加入了单独质押的大队伍，记得要更新你的客户端，以下是四个客户端最新版本的Gtihub

Lighthouse (Baby Legs): https://github.com/sigp/lighthouse/releases/tag/v1.0.5

Teku (v20.12.1) : https://github.com/ConsenSys/teku/releases/tag/20.12.1

Nimbus (v1.0.4) : https://github.com/status-im/nimbus-eth2/releases/tag/v1.0.4

Prysm (v1.0.5) : https://github.com/prysmaticlabs/prysm/releases/tag/v1.0.5

**数据可用性取样原型**

开发者Protolambda发推更新了以太坊2.0的一些研发进展。他表示，目前研发主要集中在两个方面：

a)为阶段1做准备：构建区块和制作原型。Proto正研发一个数据可用性取样原型。一些规范已经完善，但需要经过模拟来验证。尤其是将所有分片数据转移至一些小区块中，对其进行验证，并允许任何人对其进行取样，这项工作十分复杂。同时，如果核心构建的区块获得可行的原型，我们的工作也就更近一步了。现在正在将Kate commitments/proofs/verification、基于FFT的扩展以及数据恢复从Python (由Dankrad、Vitalik等撰写的) 语言翻译为Go语言，工作已经过半。

b)假期安排：同步信标状态以及开始任意状态默克尔证明的工作 (SSZ)。

&lt;br/&gt;

# Layer2

**zkSync现已支持四款以太坊钱包**

zkSync现已支持安全发送资金到任何以太坊地址，它支持的钱包包括：Metamask、BurnerWallet、WalletConnect以及External。而某些以太坊地址无法使用直接使用zkSyncde的原因可能如下：

网页界面还不不支持该钱包

地址属于交易所

地址所属的智能合约是EIP-1271不支持的

详情请看：https://zksync.io/faq/wallets.html#what-ethereum-wallets-does-zksync-support

**Dark Forest v.05喊你去玩了！**

建在以太坊上且使用零知识加密技术的游戏Dark Forest于圣诞节 (12月25日) 上线v.05。此次版本有一些重要更新，包括增加一个实验性的PLUGIN系统、通过探索宇宙可以找到特别的Dark Forest NFT。还有在性能方面减少加载次数、交易次数、客户滞后等。以太坊社区玩过的人纷纷表示上瘾了，指路：https://zkga.me/

**路印作客Zeroknowledge Podcast**

1.路印的Matthew Finestone和Brecht Devos作客ZeroKnowledge Podcast，介绍了路印的发展历史、路印协议、交易所、钱包，以及他们如何把AMM (自动做市商) 与Layer2结合等话题。有兴趣的读者可以听听：https://www.zeroknowledge.fm/161

**PLONK与Halo的分析研究**

ConsenSys Quorum团队的研究员Thoms Piellard发表了对Aztec Netwrok用的PLONK与ZCash

的ZKP系统用的Halo进行分析的研究文章：https://hackmd.io/@zkteam/halo#Instantiating-Halo-with-PLONK

&lt;br/&gt;

# DeFi

**1inch发币**

1inch 于12月25日宣布发行其治理代币1INCH，总发行量为15亿枚。1inch表示这些代币将全部应用于所有1inch Network协议的治理。1INCH官方博客称，所有在12月24日，早上8点前与1inch交互过，并满足以下其中一个条件的，便可以获得1INCH空投：1) 在9月15日前至少进行过一笔交易；2) 总共进行过至少4笔交易；3) 总交易额至少达到$20

**使用DeFi Pulse的API获得DeFi数据**

DeFi Pulse 为用户提供不同的API端口，用户可以从不同的协议中获取数据。例如，可以调用API来获取总锁仓量的具体数据，以及各种DeFi项目的借贷率。API文档：https://docs.defipulse.com/api-docs-by-provider/defi-pulse-data

&lt;br/&gt;

# 生态

**新的EIP流程**

Ethereum Cat Herders社区发布了新的EIP流程，变化旨在将EIP自身的完善从硬分叉协调流程中分离出来。因为EIP仓库本来就是为成为技术规范仓库而设计的，而硬分叉的协调过程把政治意见也引进了EIP仓库，这次的新流程就是把二者分开。在具体流程设计上，把ACCEPTED 删除，而变成：

DRAFT -&gt; REVIEW -&gt; LAST CALL -&gt; FINAL

新的EIP报告有以下状态：DRAFT 、REVIEW 、LAST CALL 、FINAL、LIVING、STAGNANT、WITHDRAWN

详情：https://medium.com/ethereum-cat-herders/the-new-ethereum-improvement-process-928c628b306e (中文版，爱好者的翻译)

**Hudson Jameson将卸任以太坊基金会社区经理**

Hudson Jameson于12月22日发推表示将在柏林硬分叉后卸去担任了4年的以太坊核心开发者会议推动者的职务，该职位将由以太坊开发者Tim Beiko来接任。Huson表示此次卸任主要原因是他想尝试新事物，且认为基金会也需要新血液。而Tim也将卸任ConsenSysQuorum团队的HyperledgerBesu产品经理一职，目前正在寻找接任者。

**本期最佳MEME**

(ETH在这周日价格突破700美元，是自2018年5月21日来首次)

![meme](https://i.ibb.co/kxtkPw1/meme.png)


&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[EIP1559的状态更新#4]]></title><description><![CDATA[1559的正式经济学分析出炉，主网级容量的测试网搭建中]]></description><link>https://www.ethereum.cn/1559-update-004</link><guid isPermaLink="false">https://www.ethereum.cn/1559-update-004</guid><pubDate>Fri, 25 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [The State of 1559](https://hackmd.io/@timbeiko/1559-updates/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2F1559-update-004)

&lt;br/&gt;

# 概要 👀 

- 我们现在已经有了一份详细的EIP-1559的经济学分析了;
- 我们正在搭建主网级容量的测试网，以分析1559在大型网络上的性能;
- 对于解决由不断变化的`BASE FEE`引起的交易池问题，我们已取得了进展
- 我们有了新的模拟，来分析遗留交易的行为以及在一个单一网络上的1559式交易;
- OpenEthereum正在招聘一名专注在1559的全职工程师!

&lt;br/&gt;

# 经济学分析📑

在2020年12月，前沿的博弈论与计算机科学研究员[Tim Roughgarden](http://timroughgarden.org/)发表了一份50多页的EIP-1559经济学分析。他在推特和报告的第一部分写了报告的要点，但还是很值得在此完整分享一次：



![经济学分析](https://i.ibb.co/HtvXv5J/cUtP6Tm.png)




过去，对1559的批评经常提到它欠缺一份正式的经济学分析，他们认为1559依赖的只是对以太坊交易费用市场的直觉。这份报告为EIP-1559提供了一个详尽的、总体上正面的分析。它甚至好像说服了一些著名的1559怀疑论者，比如[Nick Johnson](https://twitter.com/nicksdjohnson/status/1334277446833618945) 🎉!


此份报告强调了1559的一些地方是值得进一步思考的，即那些矿工可能合谋的情况 [0]，以及对基本费用更新规则进行更好的分析。[第7次EIP-1559实现者会议](https://github.com/ethereum/pm/issues/226)对矿工合谋场景进行了讨论，但没有得出确切的结论。而在基本费用更新规则方面，[我在Twitter上对这方面的专家发起了呼吁]((https://twitter.com/TimBeiko/status/1334288252912582656))，有一些人已经联系我，希望能提供帮助 :muscle:。



Roughgarden还提到，他希望以太坊社区可以最大程度利用这份报告，而且如果任何人有疑问、评论或担忧，他们都可以联系他。[他的网站](http://timroughgarden.org/)列出了他的各种联系方式。

&lt;br/&gt;

# 大型状态测试网📈


如在之前的更新里讨论到的，对EIP-1559进行测试的下一个里程碑式在与主网相仿的条件下做测试。考虑到的第一个方法是真的在主网分叉出一个网络，降低难度然后在上面启动EIP-1559。尽管这可以给我们一份主网状态，但考虑到安全问题，这个想法还是被否决了 [1]。


相反，Besu团队一直在构建一个[大型状态测试网生成器](https://github.com/abdelhamidbakhta/tommygun-eth)。生成器把大量账户和储存slot作为输入，开启一个名为&quot;whale&quot;的智能合约，让它发送少量的ETH，并为每个输入创建一个存储slot[2]。在第7次EIP-1559实现者会议里有一个完整的演示，从[1:16:00](https://youtu.be/dopljpI59Rw?t=4560)开始。这是该工具运作时的截屏:



![生成器](https://i.ibb.co/K5WRX38/image.png)




主网现在有大约1亿个账户，因此我们最近一次运行该工具，创建了一个有1亿账户和储存slot的网络。这个过程需要大概4天的时间，所需数据库容量大约240GB。随着网络容量的增长，创建网络的时间几乎成指数型增长，一个100k容量网络所需的时间是一个10k容量网络的2倍，一个1M容量网络所需的时间是一个100k容量网络的10倍，一个10M容量网络所需的时间比一个1M容量网络长15倍，一个100M容量网络所需的时间比一个10M容量网络长40倍！


现在有了这个数据库，我们将尝试把所有客户端实现同步到这个网络，然后用我们之前构建的[交易生成工具](https://github.com/ConsenSys/eip1559-tx-sender) 对网络进行交易轰炸。这样，我们就可以深入了解客户端在必须管理主网级容量的状态时，如何在1559的规则下顺滑地处理200%满的区块。

&lt;br/&gt;

# 交易池🏊‍♂️


在之前的更新里，我们讨论了一些与交易池管理相关的重要问题，它们还有待解决。我在[一个文档里](https://hackmd.io/unbJUt-HQgStvwmpLPsXsQ)对它们进行了解释，但它的要点是由于区块间的`BASE FEE`不一样，以及交易会指定它们愿意支付的最高费用 (`FEE CAP`) 和矿工小费 (`TIP`)，一个矿工打包交易收到的费用会随`BASE FEE`的变化而变化，这意味着潜在需要节点来对每个区块的交易池进行重新整理，这是非常低效的。


Quilt团队的[Ansgar](https://twitter.com/adietrichs)一直有关注这个问题，在第7次实现者会议他分享了一篇[关于这个问题的文章](https://hackmd.io/@adietrichs/1559-transaction-sorting)。


简言之，有两个问题需要解决：矿工希望打包到区块的交易可以支付给他们最高的费用；非挖矿节点需要在它们的交易池满的时候有交易逐出的政策。


尽管该文档没有针对这个问题提出解决方案，它强调了对矿工来说交易的一个有趣特点——不断变化的收益。在1559下，你可以想象交易有两个可能的“状态”。第一个状态是”恒定的“，即交易的`FEE CAP`是大于`BASE FEE`与`TIP`之和的，而矿工回获得整份 `TIP`。第二个状态时”变化的“，即`FEE CAP`仍然高于`BASE FEE`，但低于`BASE FEE`与`TIP`之和 [4]。在这种情况下，矿工获得的是`FEE CAP` 与`BASE FEE`的差值。


当交易不处于这两种状态，你可以在它们之间创建一个相对秩序 (通过`TIP`分出”恒定“类的状态，通过它们的”有效小费“分出“变化”类的状态，例如：`FEE CAP` - `BASE FEE`)


Ansgar文章的洞见在于“变化”类状态的交易将保存相同的区块间相对秩序，因为`BASE FEE`的增加/减少将对它们产生同样的影响。这意味着问题的核心在于当`BASE FEE`变化时能找到一个决定哪些交易从“恒定”转为”变化“的有效方法，以及如何恰当处理这些交易。


希望在Quilt的下一篇文章里我们能得到这些问题的答案😁!

&lt;br/&gt;

# 模拟更新🤖


Nethermind团队发布了一篇[新的关于模拟的notebook](https://github.com/NethermindEth/research/blob/main/legacyTransactions.ipynb)，探讨了在网络里遗留交易与1559式交易间的相互影响，且遗留交易能被解释为1559式交易。这些研究都建基于 Barnabé Monnot及他的团队之前做的[模拟成果](https://github.com/barnabemonnot/abm1559#abm1559)。

这个模拟引入了三种类型的用户：天真的1559用户，他们总是把他们的`TIP`射到最低值；聪明的1559用户，他们会根据网络使用情况策略性地设置他们的`TIP`；聪明的遗留交易用户，他们会根据网络使用情况策略性地设置他们的`gas price`。

对于每种类型的用户，都要发送固定数量的交易到网络里。那份报告分析了哪种类型的交易被打包了，那些用户支付了多少钱，以及用户最后等了多长时间。



![模拟](https://i.ibb.co/YP6QY4G/image.png)






该报告的”总结“部分不长，且很值得完整阅读，但我还是给出了概要：


- 我们在模拟里看到两个清晰”阶段“：当`BASE FEE`聚集到它的均衡值的时候，以及当它是稳定的时候
- 在`BASE FEE`不稳定的阶段，聪明的1559用户会发起被打包的大部分交易
- 交易池的行为改变取决于我们在哪个”阶段“。当基本费用不稳定时，会有很多被逐出的交易以及需要重新整理交易池；但当它时稳定的时候，交易池只有非常少逐出的交易。


当在实现者会议上讨论模拟的时候，出现了两个有趣的问题。

第一，如果在网络上出现更多的遗留交易，`BASE FEE`有变得不那么稳定的风险，以及当那些阶段形成了采用1559式交易的激励时，1559式交易倾向于被优先打包。

第二，随着1559式交易的使用不断增长，且 `BASE FEE` 变得稳定，遗留交易的预估gas价格会变得更准确，因为他们可以在预估中使用 `BASE FEE` 的值。换句话说，1559用户将有助于减少网络中gas价格的波动，缩小gas价格预估器估算值的置信区间。

&lt;br/&gt;

# 其他更新👀

上面已经写了很多更新内容了，最后一点值得一提的是OpenEthereum正在招聘一个全职开发者来从事EIP-1559的工作🎉

如果你对这个职位感兴趣，可以在[这里](https://boards.greenhouse.io/gnosis/jobs/4978262002?t=addc4e802)申请！

&lt;br/&gt;

# 后续工作 ✅


这篇更新迟到了很多了！以下是我们接下来要忙的事：

- 分享最近研发工作成果到社区，包括AllCoreDevs，以收集反馈；
- 寻找专家为基本费用更新规则提供更好的分析
- 把所有的客户端是实现同步到大型状态的测试网，并用交易生成器工具来测试在网络上的性能
- 提出能对矿工和不挖矿节点的交易池进行分类的好算法


感谢阅读😁

------

[0]  尽管在1559下这种情况不太可能，但这样的研究仍是有助益的。

[1] 分叉主网以及在客户端上公开主网变量容易引来攻击与欺诈重演

[2] 在后台，它是在发送ETH到 `0x0...1`, `0x0..2`, `0x0..3`等，并为`0x0..1`, `0x0..2`, `0x0..3`等制造储存条目，直到达到想要的账户与储存slot数量。

[3] 该文档有以下免责声明：此文档主要作为接下来的实现者会议的讨论基础。之后会再出一份更详细的文章。因为Quilt团队最近才加入到EIP-1559的事业里，有可能我们有错误的假设或忽略了现有的相关工作。

[4]  如果 `FEE CAP `低于`BASE FEE`，那么交易无法被打包到区块里。

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0测试网质押(Ubuntu/Pyrmont/Nimbus)]]></title><description><![CDATA[如何参与 Pyrmont 测试网质押，Nimbus篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-nimbus</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-nimbus</guid><pubDate>Thu, 24 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-nimbus-e6592c110843)

![p1](https://i.ibb.co/DVV0TdB/1.png)


**提醒**：不要按照这个指南与Eth2主网连接。主网指南请参考《以太坊2.0主网质押教学(Ubuntu/Nimbus)》。

本文详解如何通过多客户端测试网Pyrmont在以太坊2.0主网质押。主要基于以下几个技术：


- Ubuntu v20.04 (LTS) x64 服务器
- Go Ethereum 节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- Status 的以太坊2.0 客户端，Nimbus (代码分支)
- 正式多客户端测试网公网，[Pyrmont](https://github.com/protolambda/pyrmont)
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/)
- [Prometheus](https://prometheus.io/) 参数
- [Grafana](https://grafana.com/) 仪表盘


此篇指南包括以下指令：

- 配置一个新运行的Ubuntu服务器用例
- 配置一个以太坊1.0节点并将其作为服务运行
- 生成 Pyrmont 验证者账户密钥并存入资产
- 导入 Pyrmont 验证者账户密钥到 Nimbus 客户端里
- 给以太坊2.0与 Pyrmont 测试网阶段0编译并配置 Nimbus 客户端软件，并把它们作为服务来运行
- 安装和配置 Prometheus 参数，设置一个 Grafana 仪表盘

&lt;br/&gt;

# 提醒

此指南是用于Pyrmont测试网的。切记无论如何不要向测试网发送主网的ETH。你发送了就等于丢失了。

**不要**按照这份指南连接Eth2主网。主网专用指南请参考《以太坊2.0主网质押教学(Ubuntu/Nimbus)》。

&lt;br/&gt;

# 致谢与免责声明


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢 [Nimbus Discord](https://discord.gg/PBJBuJKfXs) 提供的帮助与审校。

特别感谢 Nimbus 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

此教程仅作教育用途。我不是本文涉及的任何技术的专家。不保证此教程内容的准确性，因遵循此教程而造成的损失，本人概不负责。

欢迎提供反馈！

&lt;br/&gt;

# 支持

这个过程可能有些棘手。除了我之外，以下是两个你可以寻求帮助的好资源 :

- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

  Reddit：https://www.reddit.com/r/ethstaker/

  Discord：https://discord.gg/7z8wzehjrJ

- Nimbus 客户端团队的Discord: https://discord.gg/PBJBuJKfXs，他们是客户端软件的工程团队，是使用 Nimbus 专家。

&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、测试网、Linux 和 MetaMask 有一定的背景知识。

此教程还需要在开始前安装并运行：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机、你的网络、或云端 (AWS、Digital Ocean、Microsoft Azure等)安装和运行的Ubuntu服务器。推荐使用本地计算机，以提高网络的去中心化程度——如果云端供应商掉线了，那么托管在这个供应商的节点都会离线。
- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 树莓Pi用户注意

我没有在树莓Pi上测试过这份教程。如果你想尝试的话，只需要把下面列出的软件换成ARM版本。不保证可行。

&lt;br/&gt;

# 要求


- Ubuntu服务器用例。我用过v20.04 (LTS) amd64服务器 VM
- 浏览器插件加密钱包MetaMask，安装并配置好
- 硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、8GB内存的RAM (16GB更佳)、一个内存至少 1TB 的SSD 、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。

&lt;br/&gt;

# 概览

本教程篇幅较长，下面这个图表简要说明了质押的步骤，标黄的即是本文会覆盖到的部分：

![p2](https://i.ibb.co/gSFPstC/2.png)


整个流程可以概念化表述为：

- 设置一个Eth1 节点并同步Eth1 Göerli 测试网的数据；
- 生成验证者密钥和存款数据；
- 配置 Nimbus 客户端并同步Eth1节点数据
- 存入 32 Göerli 测试网 ETH 以激活验证者密钥

那我们现在就开始吧！

&lt;br/&gt;

# 第0步：连接至服务器


使用一个SSH端口，连接至你的Ubuntu服务器。在默认情况下，Ubuntu上的root账户通常都是禁用的，然而有些云提供商可以启动root账户。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的[风险](https://askubuntu.com/questions/16178/why-is-it-bad-to-log-in-as-root)。


&gt; 注意：如果你不是用`root`登录的便可以直接跳到第1步。

``` Powershell
# adduser &lt;yourusername&gt;
```


设置一个密码并填写其他信息。

通过把新的用户加入`sudo`群组中，来授予其管理权限。

``` Powershell
# usermod -aG sudo &lt;yourusername&gt;
```

当你用你的用户名 `&lt;yourusername&gt;` 登录时，可以通过在命令行前输入sudo，来以超级用户的权限执行操作。

可选：如果你通过 `root` 账户使用 [SSH 密钥](https://jumpcloud.com/blog/what-are-ssh-keys)来连接你的 Ubuntu 实例，你将需要使用 root 账户的 SSH 密钥数据来连接新账户。

``` Powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```



最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第1步：升级服务器

确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
$ sudo reboot
```
&lt;br/&gt;

# 第2步：保护服务器


安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置：一个防火墙和一个不同的 SSH 端口。

## 配置防火墙

Ubuntu 20.04 服务器可以使用默认的  [UFW 防火墙](https://help.ubuntu.com/community/UFW)来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Grafana、Nimbus 的入站流量。

**允许 SSH**


允许通过SSH连接到服务器。为了安全，接下来我们要修改默认端口22 (因为这是一个普遍的攻击矢量)。

&gt; 注意：如果你选择不修改默认SSH端口 (不建议)，那就要加一项操作——允许默认SSH端口 `*$ sudo ufw allow 22/tcp*` ，然后跳到允许“Go Ethereum”这一步。

在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。如果显示红色 (被使用了)，就选择另一个端口。比如： `sudo ss -tulpn | grep &apos;:6673&apos;`

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;yourSSHportnumber&gt;&apos;
```


更新防火墙，允许`&lt;yourSSHportnumber&gt;` 的入站流量。SSH要求TCP协议。比如：`sudo ufw allow 6673/tcp`

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```



下一步，修改默认SSH端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```



找到默认端口`# Port 22` 或`Port 22`，然后修改你自己的端口号 `Port &lt;yourSSHportnumber&gt;`。删掉 `#`  (如果有的话)。

参考下方的截图，你的文档应该和下图展示的类似 (除了端口号不一样)。保存然后退出。

![p3](https://i.ibb.co/94mtjw9/3.png)



**重启SSH服务**

``` Powershell
$ sudo systemctl restart ssh
```

下次你通过SSH登录时就使用你的端口号 `&lt;yourSSHportnumber&gt;` 。

可选：如果你已经使用端口 22/TCP 的UFW了，那就更新防火墙以拒绝该端口的入站流量。请务必在你使用新SSH端口登录之后在操作这一步。

``` Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**


允许来自Go Ethereum对等节点 (端口30303/TPC 和 30303/UDP) 的入站请求。如果你使用第三方 (如[Infura](https://infura.io/)) 托管的 Eth1 节点，则可以跳过这一步。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许 Nimbus**


允许与 Nimbus 的对等节点进行点对点连接，以便在信标链节点上 (端口9000/TCP 和 9000/UDP) 进行操作。.


&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由和防火墙以允许来自该端口的入站流量。

``` Powershell
$ sudo ufw allow 9000
```

**允许 Grafana**

允许访问Grafana web 服务器 (端口3000/TCP) 的入站请求。

``` Powershell
$ sudo ufw allow 3000/tcp
```

**允许 Prometheus (可选)**

如果你想直接访问Prometheus数据服务，你也可以打开端口9090/TCP。如果你仅使用Grafana查看数据，则没有必要这样做。我没有打开这个端口。.

``` Powershell
$ sudo ufw allow 9090/tcp
```


启动防火墙，检查是否已经正确配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```


显示应该是这样的

![p4](https://i.ibb.co/6wQdG6Q/4.png)

&lt;br/&gt;

# 第3步：配置定时器


Ubuntu 内置了时间同步，并默认使用 systemd‘s timesyncd 服务进行激活。验证其是否正确运行。

``` Powershell
$ timedatectl
```



激活  `NTP service` ，运行方式：

``` Powershell
$ sudo timedatectl set-ntp on
```



参考下方的截图：

![p5](https://i.ibb.co/0tFG81G/5.png)


&lt;br/&gt;

# 第4步：安装并运行 Go Ethereum 节点


安装并配置Eth1.0的节点，Nimbus 信标链将与该节点相连。如果你选择第三方服务 (如Infura) 的话，可以跳过这一步。

## 安装 Go Ethereum



建议使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
```



更新软件包并安装最新的稳定版本。

``` Powershell
$ sudo apt update
$ sudo apt install geth
```

## 将Go Ethereum作为后台服务来运行

运行该服务需要创建一个账户，此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```

为Eth1区块链创建数据目录，用来存储Eth1节点数据。选择 `-p` 选项以创建完整路径。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```

设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```

创建一个systemd服务文件来储存该服务配置。我们将使用该配置文件来命令systemd运行`geth` 进程。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```

将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Ethereum go client
After=network.target 
Wants=network.target[Service]
User=goeth 
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --goerli --ws --datadir /var/lib/goethereum[Install]
WantedBy=default.target
```



flag `--goerli` 用于定位 Göerli 测试网，而flag `--ws` 用来公开与信标链节点连接的一个web socket端口 (ws://127.0.0.1:8546) 。

参考下方的截图。保存然后退出。

![p6](https://i.ibb.co/hC454Rn/6.png)





重新加载 systemd 以显示上述的更改。

``` Powershell
$ sudo systemctl daemon-reload
```

启动服务，并检查确保其正常运行。

``` Powershell
$ sudo systemctl start geth
$ sudo systemctl status geth
```

显示应如下方截图。

![p7](https://i.ibb.co/VW1R2Tk/7.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```

Go Ethereum节点将会开始同步。你可以运行 journal 命令来追踪进程。按“CTRL+c”退出。

``` Powershell
$ sudo journalctl -f -u geth.service
```

当你花较长的时间来找到需要同步的对等节点时，你可以添加一些对等节点。访问此处以获得最新的清单，并操作下列命令行以修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```

修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等点，并以逗号分割。

``` Powershell
ExecStart=geth --goerli --http --datadir /var/lib/goethereum --bootnodes &quot;enode://46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291@94.237.54.114:30313,enode://119f66b04772e8d2e9d352b81a15aa49d565590bfc9a80fe732706919f8ccd00a471cf8433e398c55c4862aadb4aadf3a010201483b87e8358951698aa0b6f07@13.250.50.139:30303&quot;
```

保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -f -u geth.service
```

启动后显示应该类似下方截图：

![p8](https://i.ibb.co/hXyhvfg/8.png)



&gt; 在运行信标链之前，你需要等待节点同步完成。点击[此处](https://goerli.etherscan.io/blocks)访问最新的区块。


比如，上方截图显示了节点正在处理区块 `number=43756` ，再看看下方截图 (从[这里](https://goerli.etherscan.io/blocks))，显示最新的区块是  `3196411`。也就是说，我们还有一段时间才能完成同步。



![p9](https://i.ibb.co/n3csqrq/9.png)




接下来，我们将准备验证者存款数据。如果你想查看同步状态，你可以在任意时间运行命令 `sudo journalctl -fu geth.service` 以查看。

&lt;br/&gt;

# 第5步：生成验证者密钥和存款数据


为了能在Eth2.0 Pyrmont测试网上运行验证者节点，我们将需要注册一个或多个验证者账户。

&gt; 注意：如果你已经生成了你的存款数据并提交了你的质押存款，你可以跳过这一步。如果你是在别处生成的，你需要复制你的验证者密钥到这个服务器上。

注册步骤如下：

- 获取Göerli ETH
- 生成验证者密钥。一个密钥代表一个验证者账户。
- 向每个验证者账户各存入32个Göerli ETH
- 等候你的验证者账户被激活

那我们现在就开始吧！

## 获取Goerli ETH

1. 使用已经安装了浏览器插件MetaMask的计算机。
2. 点击MetaMask然后登录
3. 点击顶部的下拉菜单，选择**Göerli 测试网络**
4. 点击账户名，复制你的Göerli 测试网钱包地址
5. 使用你的地址从[authenticated faucet](https://faucet.goerli.mudit.blog/)获取Göerli ETH，或者通过在 [ethstaker Discord](https://discord.gg/7z8wzehjrJ)上的`#request-goerli-eth`频道使用机器人命令：`!goerliEth &lt;yourwalletaddress&gt;`。

&gt; 注意：一个验证者需要一笔32个ETH的存款。你的MetaMask钱包需要有充足的 Göerli ETH存进每个验证者客户端里。例如，如果你想要运行10个验证者，拿你就需要320个Göerli ETH以及一些额外的钱 (比如1个Göerli ETH) 来支付gas费。

## 生成验证者密钥

接下来我们要生成存款数据和验证者密钥。Nimbus 验证者客户端支持多个验证者密钥。在Pyrmont测试网上基本上一个验证者密钥代表一个“验证者账户”。存款数据中包含你的质押信息 (如验证者密钥清单等)

&gt; 注意：如果在主网上进行质押，最好是用一台完全没有连接过网络的机器，以防泄漏助记词。

前往[这里](https://github.com/ethereum/eth2.0-deposit-cli/releases/)获取存款命令行接口应用的“最新发布”。

![p13](https://i.ibb.co/9wt6NsR/13.png)


在“asset&quot;一栏复制这个链接到Linux版本。我们将使用该链接来下载它，如下所示。修改指令里的URL名为最新版本的下载链接。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -LO https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.1.0/eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```


打开tar存档并去到其创建的目录。

``` Powershell
$ sudo tar xvf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
$ cd eth2deposit-cli-ed5a6d3-linux-amd64
```


 运行应用来生成存款数据和验证者密钥。

将`&lt;numberofvalidators&gt;`修改为你想要创建的验证者密钥数。例如：`--num_validators 5`

``` Powershell
$ sudo ./deposit new-mnemonic --num_validators &lt;numberofvalidators&gt; --mnemonic_language=english --chain pyrmont
```


它会要求你创建一个钱包密码。我们将使用它来将验证者密钥加载到 Nimbus 客户端的验证者钱包。把它备份到安全的地方。

![p14](https://i.ibb.co/42Mc0cQ/14.png)


它会生成一个种子短语 (助记符)。把它备份到其他地方。这很重要，你将需要它来生成提款密钥或者添加验证者。

![p15](https://i.ibb.co/vXFQxtP/15.png)



一旦你已经确认了你的助记符，你的验证者密钥就会被创建。

![p16](https://i.ibb.co/9Y4Pt1g/16.png)




新创建的验证者密钥和存款数据文档会在一个特定地方被创建。比如：`eth2deposit-cli-ed5a6d3-linux-amd64/validator_keys` 。标记一下，我们待会会用到。

文件夹的内容见下：

![p17](https://i.ibb.co/zZ6Qbr3/17.png)



`deposit_data-[timestamp].json`文档包含了验证者的公钥和存款的相关信息。这个文档会在下一步用来完成存款进程。由于我们是在一个服务器上，而没有一个网络浏览器，因此要使用[secure FTP (SFTP)](https://www.maketecheasier.com/use-sftp-transfer-files-linux-servers/)  把文档迁移到一部运行MetaMask的计算机上。记得先完成这一步再继续。

`keystore-m...json`文档包含加密的签名密钥。每个验证者账户都有一个 keystore-m。这些会被用来创建 Nimbus 客户端验证者钱包。

通过删除下载的tar存档文件进行清理。

``` Powershell
$ cd ~
$ rm -rf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```


现在你已经有了存款数据和密钥存储文件，接下来就可以设置 Nimbus 了。我们要先把资产存入密钥中 (存入Göerli ETH以激活验证者)再设置 Nimbus，这样我们就可以首先验证设置了。如果验证者存款被激活了，但系统没准备好的话，我们会受到怠工惩罚。

&lt;br/&gt;

# 第6步：安装 Nimbus 依赖

构建 Nimbus 客户端需要一些开发依赖工具 (C compiler、Maker、Bash、Git)。

``` Powershell
$ sudo apt-get install build-essential git
```
&lt;br/&gt;

# 第7步：克隆和构建Nimbus


现在我们准备好构建 Nimbus 了。Nimbus 生成一个 `nimbus_beacon_node` 二进制文件。我们通过输入不同的子命令或 flags 来执行该二进制文件以获得我们需要的功能。比如：`nimbus_beacon_node deposits import`可以将验证者密钥导入到客户端钱包中。输入`nimbus_beacon_node --network=pyrmont` 可以运行与 Prymont 网络连接的一个信标节点实例。

``` Powershell
$ cd ~
$ git clone https://github.com/status-im/nimbus-eth2
$ cd nimbus-eth2
```


使用 Make 来编译Nimbus 二进制文件。我们在参数功能中包含 flag  `-d:insecure` 来进行编译。

``` Powershell
$ make NIMFLAGS=&quot;-d:insecure&quot; nimbus_beacon_node
```


显示应如下图：

![p15](https://i.ibb.co/LZvBzCv/15.png)




构建时间长短取决于你的硬件设备状况。是时候喝点饮料补充补充水分了。也可以阅读我[其他的文章](https://someresat.medium.com/)。


如果都操作成功了请继续，如果操作失败了请求助 Nimbus Discord : https://discord.gg/PBJBuJKfXs

&lt;br/&gt;

# 第8步：复制 Nimbus 二进制文件

接下来复制粘贴已编译的二进制文件 `nimbus_beacon_node` 至目录 `/usr/local/bin` 中，Nimbus 服务将在那运行。


&gt; 注意：每一次你拉取或构建一个新版本 `nimbus_beacon_node`  二进制文件，你都需要做这一步。请看此教程的最后**附录 —— Nimbus更新**。

``` Powershell
$ sudo cp /$HOME/nimbus-eth2/build/nimbus_beacon_node /usr/local/bin
```
&lt;br/&gt;

#  第9步：导入验证者密钥


通过导入在上一步创建的`keystore-m` JSON文档创建验证者钱包。

首先，创建一个目录来储存验证者数据，并给当前用户权限来访问数据。当前用户需要权限，因为他们需要执行导入。在 `&lt;yourusername&gt;` 修改登入用户名。

``` Powershell
$ sudo mkdir -p /var/lib/nimbus
$ sudo chown -R &lt;yourusername&gt;:&lt;yourusername&gt; /var/lib/nimbus
```


在文件夹设置正确的权限，这一步在钱包创建过程中执行。把权限应用到数据文件夹。

``` Powershell
$ sudo chmod 700 /var/lib/nimbus
$ ls -dl /var/lib/nimbus
```


显示内容如下：

![p16](https://i.ibb.co/YTQtjxy/16.png)






接下来，运行验证者密钥导入，使用`nimbus_beacon_node deposits import` 功能。我们需要提供生成的`keystore-m`文档所在位置的目录。例如：`$HOME/eth2deposit-cli-ed5a6d3-linux-amd64/validator_keys`。

``` Powershell
$ cd ~
$ cd nimbus-eth2
$ build/nimbus_beacon_node deposits import --data-dir=/var/lib/nimbus $HOME/eth2deposit-cli-ed5a6d3-linux-amd64/validator_keys
```



flag`--data-dir`指定钱包数据输出的位置。

你会被要求提供验证者密钥的密码。这个密码是你在第5步设置的。

输出结果如下：

![p17](https://i.ibb.co/2vK83Q9/17.png)






这一步完成了！现在验证者密钥已经导入，我们将把Nimbus客户端作为服务来设置。

&lt;br/&gt;

# 第10步：配置信标节点和验证者客户端

我们将把Nimbus客户端作为服务来运行，因此如果系统重启，这个进程将自动重新开始。

## 设置账户和目录

为信标节点与验证者节点的运行创建一个账户。这种类型的账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false nimbus
```

设置目录权限。我们在前一步创建了一个数据目录(`/var/lib/nimbus`)。 `nimbus` 账户需要修改数目目录的权限。

``` Powershell
$ sudo chown -R nimbus:nimbus /var/lib/nimbus
$ ls -dl /var/lib/nimbus
```


你的用户账户不能再访问目录了。显示应如下：

![p18](https://i.ibb.co/Lr4L3ry/18.png)









## 创建和配置服务

创建一个systemd服务文档来储存配置服务。

``` Powershell
$ sudo nano /etc/systemd/system/nimbus.service
```

将下面这段代码复制粘贴到文档里

``` Powershell
[Unit]
Description=Nimbus Beacon Node
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=nimbus
Group=nimbus
Restart=always
WorkingDirectory=/var/lib/nimbus
Environment=&quot;ClientIP=$(curl -s v4.ident.me)&quot;
ExecStart=/bin/bash -c &apos;/usr/local/bin/nimbus_beacon_node --network=pyrmont --data-dir=/var/lib/nimbus --web3-url=ws://127.0.0.1:8546 --metrics --metrics-port=8008 --rpc --rpc-port=9091 --nat=extip:${ClientIP} --validators-dir=/var/lib/nimbus/validators --secrets-dir=/var/lib/nimbus/secrets --log-level=INFO --log-file=/var/lib/nimbus/beacon_node.log&apos;[Install]
WantedBy=multi-user.target
```


如果你使用的是一个远程的或第三方Eth1节点，你需要修改`--web3-url`。如果你是在本地创建Eth1节点 (从第4步)，你不需要修改这个值。

提供的flag如下：

`--network`——客户端连接的网络。在这里就是Pyrmont。

`--data-dir`——储存信标节点和验证者数据的目录。

`--web3-url`——指向Eth1节点 (本地或远程的)的web socket (ws) 的URL。

`--metrics`——开启数据服务器。

`--metrics-port`——冗余，因为它被设为默认值，但为了方便还是把它包含在内。必须与在Prometheus 的配置文档里的Nimbus数据相匹配。

`--rpc`——开启RPC API

`--rpc-port`——需要避免与Prometheus冲突

`--nat` ——你的服务器的外部IP地址。我们使用环境变量 `Environment=&quot;ClientIP=$(curl -s v4.ident.me)&quot;`来获取客户端IP地址，因为 ExecStart不允许内联调用。用`--nat=extip:${ClientIP}`就能解决问题。

`--validators-dir` ——验证者密钥数据所在的目录。

`--secrets-dir`——验证者密钥秘密所在的目录。

`--log-level`——日志记录的详细程度。`INFO`用作表示性能。

`--log-file`——是所需，这样服务才能创建日志文档。路径必须与服务的`WorkingDirectory`匹配。

参看下方截图。你的文档应该如此。退出并保存。

![p19](https://i.ibb.co/S04qyBv/19.png)








重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


&gt; 注意：如果你是运行本地的Eth1节点（看第4步），你应该等待至它完全同步完数据再启动Teku服务。在这里查看进程：`*sudo journalctl -fu geth.service*`


 启动服务并检查，确保运行正确。

``` Powershell
$ sudo systemctl start nimbus
$ sudo systemctl status nimbus
```

显示的结果应该是这样：

![p20](https://i.ibb.co/FDmnKdr/20.png)




如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable nimbus
```


信标节点将开始同步数据。它可能要花几个小时才能完全实现同步。你可以通过运行journal命令来追踪进程。按CTRL+c退出。

``` Powershell
$ sudo journalctl -fu nimbus.service
```


日志输出类似于这样：

``` Powershell
Nov 24 22:25:56 ETH-STAKER-001 bash[65560]: INF 2020-11-24 22:25:31.197+00:00 Slot start                                 topics=&quot;beacnde&quot; tid=65560 file=nimbus_beacon_node.nim:473 lastSlot=46326 scheduledSlot=46327 beaconTime=6d10h25m24s197ms907us264ns peers=1 head=1e6df25a:242 headEpoch=7 finalized=542c17b2:128 finalizedEpoch=4
Nov 24 22:25:56 ETH-STAKER-001 bash[65560]: NOT 2020-11-24 22:25:31.203+00:00 Syncing in progress; skipping validator duties for now topics=&quot;beacval&quot; tid=65560 file=validator_duties.nim:519 slot=46327 headSlot=242
Nov 24 22:25:56 ETH-STAKER-001 bash[65560]: INF 2020-11-24 22:25:31.203+00:00 Slot end                                   topics=&quot;beacnde&quot; tid=65560 file=nimbus_beacon_node.nim:559 slot=46327 nextSlot=46328 head=1e6df25a:242 headEpoch=7 finalizedHead=542c17b2:128 finalizedEpoch=4
Nov 24 22:25:56 ETH-STAKER-001 bash[65560]: NOT 2020-11-24 22:25:34.396+00:00 Reached new finalization checkpoint        topics=&quot;chaindag&quot; tid=65560 file=chain_dag.nim:910 finalizedHead=6ad92bbe:189@192 heads=1 newHead=23e933aa:256
```


如果想知道当前epoch与`headEpoch`的距离，你可以在[pyrmont.beaconcha.in](https://pyrmont.beaconcha.in/)查看比较。

例如，上面的日志输出显示现节现在正在处理`headEpoch: 7`，然后看下面截图的地方，你会看到最新一个epoch是`23582`。基于此，我们知道离完成数据同步还需要一些时间。

![p21](https://i.ibb.co/2572Q0V/21.png)






现在你的信标链已经作为服务来运行了。恭喜！


&gt; 注意：当信标节点完全同步之后，验证者客户端会自动开始证明/提议区块。


你可以通过 [pyrmont.beaconcha.in](https://pyrmont.beaconcha.in/)查看你的验证者状态，只需搜索你的验证者公钥或用你的MetaMask钱包地址搜索。可能要过一段时间你的信息才会出现在网站上。

&lt;br/&gt;

# 第11步：进行验证者存款

现在你的设置已经完成并在运行中了，你需要给Pyrmont测试网存入32个Göerli ETH。

&gt; 注意：如果你已经提交了你的质押存款，你可以跳过这一步。

这一步是关于将所需的Göerli ETH存入Pyrmont测试网的存款合约。这需要在浏览器上通过Pyrmont的Launchpad网站启动你的MetaMask (或其他) 钱包。

&gt; 注意：如果这份教程是用于主网 (它不是)，你需要等到你的Eth1节点和信标节点完全同步完再开存入你的存款。如果你不这样做，当你的Eth1节点或信标链在同步时，你可能要遭遇怠工惩罚。

Pyrmont测试网的Launchpad:https://pyrmont.launchpad.ethereum.org/

一直随着屏幕切换点击这些警告步骤，直到你到达**密钥对生成**的部分。选择你打算运行的验证者数量。选择一个与你在步骤5中生成的验证者文件数量相匹配的值。



![24](https://i.ibb.co/CwKwHzQ/p27.png)



往下滚动，看这些内容你是否同意，然后点击“Continue” (继续)。

![25](https://i.ibb.co/LdJsJwY/p28.png)




你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在之气生成的，把它复制到有浏览器的计算机里。浏览/选择或拖拉这个文档，然后点击Continue。

![26](https://i.ibb.co/PTkh7gD/p29.png)






连接你的钱包。选择MetaMask (或者是其他支持的钱包)，登录，选择存有你的Göerli ETH的Göerli测试网络，然后点击Continue。

![p26](https://i.ibb.co/zSdPcb2/26.png)




&gt; 注意：请100%确定你在MetaMask上选的是Göerli测试网络。不要把真的ETH发送到 Pyrmont测试网。


你的MetaMask余额就会显示出来。如果你选择了Göerli测试网络且你有充足的Göerli ETH余额，网站会允许你继续下一步。

![p27](https://i.ibb.co/6X385KS/27.png)


然后会出现一个Summary (总结)，显示验证者数和所需的Göerli ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![p28](https://i.ibb.co/qkDGzwb/28.png)




点击&quot;Initiate All Transactions&quot; (启动所有交易）。

![p29](https://i.ibb.co/DwZ7BRq/29.png)



会有多个MetaMask实例弹出，每个都对Pyrmont测试网提出一个32个Göerli ETH的交易请求。请确认每一笔交易。

![p30](https://i.ibb.co/WBSj0g5/30.png)







当所有的交易都成功完成时，你的质押也完成了！

![p31](https://i.ibb.co/HH6P2yn/31.png)




恭喜！

![p32](https://i.ibb.co/hswDNF4/32.png)






在最后会有一个清单。里面有非常多有用信息。可以看一下

![p33](https://i.ibb.co/M8H67Wg/33.png)



## 查看你的验证者存款状态


新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

![p34](https://i.ibb.co/b2jbxfD/34.png)






1. 复制你的Göerli测试网钱包地址

2. 前往：https://pyrmont.beaconcha.in/

3. 搜索你的钱包地址。你的密钥会显示出来。

![p35](https://i.ibb.co/d7qX8m4/35.png)




点进某个验证者详情，每个验证者激活后你会看到在Status那一栏有预估时间。

![p36](https://i.ibb.co/09S06pd/36.png)





现在你面前有一个条正在运作的信标链、一个验证者节点以及你的测试网存款。一旦你的存款被激活，你将开始工作并赚取收益。恭喜你！

&lt;br/&gt;

# 第12步：安装Prometheus


Prometheus是一个提供监测功能和警报工具箱的开源系统。它在你的Ubuntu服务器上作为一个服务来运行，而它的职责就是去抓取数据。更多信息请看[这里](https://prometheus.io/docs/introduction/overview/)。

我们会使用Prometheus公开信标链、验证者的运行时数据和特定实例数据。

## 创建用户账户


这些服务是在账户下运行的。这些账户不能登录到服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false prometheus
$ sudo useradd --no-create-home --shell /bin/false node_exporter
```

## 创建目录

程序与数据目录。

``` Powershell
$ sudo mkdir /etc/prometheus
$ sudo mkdir /var/lib/prometheus
```


设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus
$ sudo chown -R prometheus:prometheus /var/lib/prometheus
```

## 下载Prometheus软件

 从[Prometheus下载页面](https://prometheus.io/download/)修改最新版本的版本号。Rpi用户一定要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/prometheus/releases/download/v2.22.2/prometheus-2.22.2.linux-amd64.tar.gz
```

打开tar存档。它包含两个二进制文档和一些内容文档。

``` Powershell
$ tar xvf prometheus-2.22.2.linux-amd64.tar.gz
```

复制二进制文档到下列位置。

``` Powershell
$ sudo cp prometheus-2.22.2.linux-amd64/prometheus /usr/local/bin/
$ sudo cp prometheus-2.22.2.linux-amd64/promtool /usr/local/bin/
```
设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /usr/local/bin/prometheus
$ sudo chown -R prometheus:prometheus /usr/local/bin/promtool
```

复制这些内容文档到下列位置。

``` Powershell
$ sudo cp -r prometheus-2.22.2.linux-amd64/consoles /etc/prometheus
$ sudo cp -r prometheus-2.22.2.linux-amd64/console_libraries /etc/prometheus
```


设置目录和文档 (-R) 的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/consoles
$ sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
```

 移除下载存档。

``` Powershell
$ rm -rf prometheus-2.22.2.linux-amd64.tar.gz prometheus-2.22.2.linux-amd64
```

## 编辑配置文档

Prometheus使用一个配置文档，这样它就知道去哪里获取数据。

打开YAML配置文档来编辑。

``` Powershell
$ sudo nano /etc/prometheus/prometheus.yml
```


复制下面的代码到文档，注意不要进行任何其他编辑，并退出保存文件。

``` Powershell
global:
  scrape_interval:     15s 
  evaluation_interval: 15sscrape_configs:
  - job_name: &apos;nimbus&apos;
    static_configs:      
      - targets: [&apos;localhost:8008&apos;]
  - job_name: &apos;node_exporter&apos;
    static_configs:
      - targets: [&apos;localhost:9100&apos;]
```


scrape_config对不同的分工名称给出定义。我们有三个分工名称：validator (验证者)、beacon node (信标节点) 和node_exporter。前两个的职责很明显，最后一个是用作与服务器用例本身 (内存、CPU、磁盘、网络等) 相关的数据。我们将在下面安装并配置node_exporter。

给config文档设置所有权。prometheus账户将拥有这个所有权。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/prometheus.yml
```

最后，测试服务器是否运行正确。

``` Powershell
$ sudo -u prometheus /usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries
```


输出应该如下。按Ctrl + C退出。

``` Powershell
level=info ts=2020-09-12T22:16:21.179Z caller=web.go:524 component=web msg=&quot;Start listening for connections&quot; address=0.0.0.0:9090
level=info ts=2020-09-12T22:16:21.181Z caller=main.go:700 fs_type=EXT4_SUPER_MAGIC
level=info ts=2020-09-12T22:16:21.181Z caller=main.go:701 msg=&quot;TSDB started&quot;
level=info ts=2020-09-12T22:16:21.182Z caller=main.go:805 msg=&quot;Loading configuration file&quot; filename=/etc/prometheus/prometheus.yml
level=info ts=2020-09-12T22:16:21.182Z caller=main.go:833 msg=&quot;Completed loading of configuration file&quot; filename=/etc/prometheus/prometheus.yml
level=info ts=2020-09-12T22:16:21.183Z caller=main.go:652 msg=&quot;Server is ready to receive web requests.&quot;
```

## 将Prometheus设为自动启动的服务。


创建一个systemd服务文档来保存服务配置，它会告诉systemd文档把Prometheus作为prometheus用户来运行，配置文档在目录的保存路径为/etc/prometheus/prometheus.yml，并把数据保存在目录的这里/var/lib/prometheus .

``` Powershell
$ sudo nano /etc/systemd/system/prometheus.service
```

将下面的代码复制粘贴到文档。退出并保存。

``` Powershell
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=prometheus
Group=prometheus
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries[Install]
WantedBy=multi-user.target
```



重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```



然后用下面的命令来启动服务，并查看状态以确保运行正确。

``` Powershell
$ sudo systemctl start prometheus
$ sudo systemctl status prometheus
```

 输出应该如下图：

![p36](https://i.ibb.co/WHjnYcQ/36.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。



最后，允许Prometheus随系统启动而启动。

``` Powershell
$ sudo systemctl enable prometheus
```
&lt;br/&gt;

# 第11步：安装Node Exporter

Prometheus会提供关于信标链和验证者的数据。如果我们想要我们Ubuntu用例的数据，我们需要一个叫[Node_Exporter](https://github.com/prometheus/node_exporter)的extension。如果你在下面指定其他版本，你可以在[这里](https://prometheus.io/download/)找到最新的稳定版本。Rpi用户记得要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
```

打开下载了的软件。

``` Powershell
$ tar xvf node_exporter-1.0.1.linux-amd64.tar.gz
```


复制二进制文档到目录/usr/local/bin，并设置用户与群组对我们在前面创建的node_exporter用户的所有权。

``` Powershell
$ sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin
$ sudo chown -R node_exporter:node_exporter /usr/local/bin/node_exporter
```

移除下载了的存档。

``` Powershell
$ rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64
```

## 将Node Exporter设置为自动启动的服务

创建一个systemd服务文档来储存服务config文档，它会告诉systemd把Node_Exporter 作为node_exporter用户来运行。

``` Powershell
$ sudo nano /etc/systemd/system/node_exporter.service
```


 复制下列代码到文档。退出并保存。

``` Powershell
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter[Install]
WantedBy=multi-user.target
```

重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


然后按下面的命令启动服务并检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start node_exporter
$ sudo systemctl status node_exporter
```


输出应该如下图。

![p37](https://i.ibb.co/YPzv8GV/37.png)



如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

最后，允许Node Exporter随系统启动而启动。

``` Powershell
$ sudo systemctl enable node_exporter
```

## 测试Prometheus和Node Exporter (可选)

所有东西都准备就绪了。通过在防火墙打开一个端口 (请参阅步骤2）和浏览`http://&lt;yourserverip&gt;:9090`你可以有选择性地测试它的功能。在那里你可以运行查询以查看不同的数据。例如，你可以试这个查询来看还有多少可用内存：

``` Powershell
http://&lt;yourserverip&gt;:9090/new/graph?g0.expr=node_memory_MemFree_bytes&amp;g0.tab=1&amp;g0.stacked=0&amp;g0.range_input=1h
```
&lt;br/&gt;

# 第12步：安装Grafana

Prometheus是我们的数据来源，而Grafana则给我们提供报告仪表盘数据的功能。接下来安装Grafana并配置仪表盘。

我们会用一个APT仓库来安装，因为这会使得安装和更新更简单。Grafana可以在官方的Ubuntu软件包仓库中找到，但那个版本可能不是最新的，因此我们将使用Grafana的官方仓库。

用wget下载Grafana GPG的密钥，然后将输出传送到apt-key。这会将密钥添加到你的APT安装的信任密钥列表中。

``` Powershell
$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
```

把Grafana仓库加到APT的来源里。

``` Powershell
$ sudo add-apt-repository &quot;deb https://packages.grafana.com/oss/deb stable main&quot;
```

刷新apt缓存。

``` Powershell
$ sudo apt update
```

确认Grafana是从仓库安装的。

``` Powershell
$ apt-cache policy grafana
```

输出应该如下：

``` Powershell
grafana:
  Installed: (none)
  Candidate: 7.3.3
  Version table:
     7.3.3 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.3.2 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.3.1 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 
...
```


检查顶部显示的版本是否与[这里](https://grafana.com/grafana/download)显示的最新版本一致。然后继续安装。

``` Powershell
$ sudo apt install grafana
```


启动Grafana服务器和检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start grafana-server
$ sudo systemctl status grafana-server
```



输出应该如下图：

![p38](https://i.ibb.co/hgZtzRH/38.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许Grafana随系统启动而启动。

``` Powershell
$ sudo systemctl enable grafana-server
```

##  配置Grafana登录

能做到这一步已经很棒了！现在一切都设置好并开始运行了，你可以在浏览器里前往`http://&lt;yourserverip&gt;:3000/`，会出现Grafana的登录窗口。

在`admin`输入用户名和密码。系统会让你修改密码，请务必修改。

## 配置Grafana的数据来源

让我们配置数据来源吧。把你的鼠标移至左边菜单栏的齿轮图标处，会弹出一个菜单——选择`Data Sources`。

![p33](https://i.ibb.co/4dMmF8R/33.png)



点击 `Add Data Source`，然后选择`Prometheus`。在URL输入`http://localhost:9090`，然后点击 `Save and Test`。

![p34](https://i.ibb.co/sWsHzQz/34.png)

![p35](https://i.ibb.co/mzL51L5/35.png)





## 导入Grafana仪表盘

现在开始导入仪表盘。移动你的鼠标到左边菜单栏的`+`图标，会有一个菜单弹出，选择 `Import`。


从[这里](https://raw.githubusercontent.com/sigp/lighthouse-metrics/master/dashboards/Summary.json)（从原始数据）复制粘贴JSON，点击`Load`，然后 `Import`。你应该可以看到仪表盘。

&gt; 注意：很明显这是个非常基础的仪表盘。该团队正在努力加入更多的数据 （比如：验证者数、每个验证者的证明量、每个验证者的提议量、每个验证者的余额等)。现在官方的仪表盘还在开发中，请看[这里](https://github.com/status-im/nim-beacon-chain/blob/devel/grafana/beacon_nodes_Grafana_dashboard.json)。

![p42](https://i.ibb.co/rtTnDKG/42.png)




你还可以在Telegram和Discord看到警报信息。[这里](https://docs.prylabs.network/docs/prysm-usage/monitoring/grafana-dashboard/)是有指引。

&lt;br/&gt;

# 写在最后

到这里就完成了！希望这个教程能帮到你。

- 如果你有任何反馈，你可以在[Twitter](https://www.twitter.com/SomerEsat) 或 [Reddit](https://www.reddit.com/user/SomerEsat)上联系窝

- 如果你喜欢这个教程并希望别人也能学习这个教程，请用[friends link](https://medium.com/@SomerEsat/4d2a86cc637b?source=friends_link&amp;sk=4cb64bfa20247d2b5c7a50ce0a92d33b)把教程分享出去！

- 支持一下：somer.eth

&lt;br/&gt;

# 附录——Nimbus更新

如果因为Git仓库的修改你需要更新代码，请按这些步骤来获取最新的文档并构建你的二进制文档。

``` Powershell
$ cd ~
$ cd nimbus-eth2
$ git pull
$ make update
$ make NIMFLAGS=&quot;-d:insecure&quot; nimbus_beacon_node
```

接下来，我们会停止信标链和验证者服务，并复制粘贴二进制文档到目录`/usr/local/bin`，然后再次启动服务。

``` Powershell
$ sudo systemctl stop nimbus
$ sudo cp /$HOME/nimbus-eth2/build/nimbus_beacon_node /usr/local/bin
$ sudo systemctl start nimbus
$ sudo systemctl status nimbus # &lt;-- Check for errors
$ sudo journalctl -fu nimbus.service # &lt;-- Monitor
```


完成了！服务已经更新好了。

&lt;br/&gt;

# 附录——Geth更新

如果你需要更新到最新版本的Geth，请按以下步骤：

``` Powershell
$ sudo systemctl stop geth
$ sudo systemctl stop nimbus
$ sudo apt update &amp;&amp; upgrade
$ sudo systemctl start geth
$ sudo systemctl status geth # &lt;-- Check for errors
$ sudo journalctl -f -u geth # &lt;-- Monitor
$ sudo systemctl start nimbus
$ sudo systemctl status nimbus # &lt;-- Check for errors
$ sudo journalctl -f -u nimbus.service # &lt;-- Monitor
```
&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0测试网质押(Ubuntu/Pyrmont/Teku)]]></title><description><![CDATA[如何参与Pyrmont测试网质押，Teku篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-testnet-ubuntu-pyrmont-teku</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-testnet-ubuntu-pyrmont-teku</guid><pubDate>Wed, 23 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-testnet-ubuntu-pyrmont-teku-3da74372910)

![1](https://i.ibb.co/h9fQdRv/1.png)



**提醒**：不要按照这个指南与Eth2主网连接。主网指南请参考《以太坊2.0主网质押教学(Ubuntu/Teku)》。


本文详解如何通过多客户端测试网Pyrmont在以太坊2.0主网质押。主要基于以下几个技术：


- Ubuntu v20.04 (LTS) x64 服务器
- Go Ethereum 节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- ConsenSys的以太坊2.0客户端，Teku ([代码分支](https://github.com/PegaSysEng/teku)) 
- 正式多客户端测试网公网，[Pyrmont](https://github.com/protolambda/pyrmont)
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/)
- [Prometheus](https://prometheus.io/) 参数
- [Grafana](https://grafana.com/) 仪表盘


此篇指南包括以下指令：

- 连接并安全配置一个新运行的Ubuntu服务器用例
- 配置一个以太坊1.0节点并将其作为服务运行
- 生成Pyrmont验证者账户密钥并存入资产
- 导入Pyrmont验证者账户密钥到Teku客户端里
- 给以太坊2.0与Pyrmont测试网阶段0编译并配置Teku客户端软件，并把它们作为服务来运行
- 安装和配置Prometheus参数，设置一个Grafana仪表盘

&lt;br/&gt;

# 提醒


此指南是用于Pyrmont测试网的。切记无论如何不要向测试网发送主网的ETH。你发送了就等于丢失了。

**不要**按照这份指南连接Eth2主网。主网专用指南请参考《以太坊2.0主网质押教学(Ubuntu/Teku)》。


&lt;br/&gt;

# 致谢与免责声明


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢 [ConsenSys Discord](https://discord.gg/trQ378WCp4) 中#teku 频道以及[EthStaker](https://discord.gg/7z8wzehjrJ)团队的人在discord上提供的帮助与审校。

特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

此教程仅作教育用途。我不是本文涉及的任何技术的专家。不保证此教程内容的准确性，因遵循此教程而造成的损失，本人概不负责。


&lt;br/&gt;

# 支持

- 这个过程可能有些棘手。除了我之外，以下是两个你可以寻求帮助的好资源 :


- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

  - Reddit：https://www.reddit.com/r/ethstaker/

  - Discord：https://discord.gg/7z8wzehjrJ

- Teku 客户端团队的Discord: https://discord.gg/trQ378WCp4，他们是客户端软件的工程团队，是使用Teku专家。



&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、测试网、Linux 和 MetaMask 有一定的背景知识。

此教程还需要在开始前安装并运行：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机、你的网络、或云端 (AWS、Digital Ocean、Microsoft Azure等)安装和运行的Ubuntu服务器。推荐使用本地计算机，以提高网络的去中心化程度——如果云端供应商掉线了，那么托管在这个供应商的节点都会离线。
- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。


&lt;br/&gt;

# 树莓Pi用户注意


我没有在树莓Pi上测试过这份教程。如果你想尝试的话，只需要把下面列出的软件换成ARM版本。不保证可行。


&lt;br/&gt;

# 要求


- Ubuntu服务器用例。我用过v20.04 (LTS) amd64服务器 VM
- 浏览器插件加密钱包MetaMask，安装并配置好

- 硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、8GB内存的RAM (16GB更佳)、一个内存至少 1TB 的SSD 、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。


&lt;br/&gt;

# 概览

本教程篇幅较长，下面这个图表简要说明了质押的步骤，标黄的即是本文会覆盖到的部分：

![p2](https://i.ibb.co/gSFPstC/2.png)



整个流程可以概念化表述为：

- 设置一个Eth1 节点并同步Eth1 Göerli 测试网的数据；
- 生成验证者密钥和存款数据；
- 配置Teku客户端并同步Eth1节点数据
- 存入 32 Göerli 测试网 ETH 以激活验证者密钥

那我们现在就开始吧！


&lt;br/&gt;

# 第0步：连接至服务器


使用一个SSH端口，连接至你的Ubuntu服务器。在默认情况下，Ubuntu上的root账户通常都是禁用的，然而有些云提供商可以启动root账户。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的[风险](https://askubuntu.com/questions/16178/why-is-it-bad-to-log-in-as-root)。


&gt; 注意：如果你不是用`root`登录的便可以直接跳到第1步。

```
# adduser &lt;yourusername&gt;
```


设置一个密码并填写其他信息。

通过把新的用户加入`sudo`群组中，来授予其管理权限。

```
# usermod -aG sudo &lt;yourusername&gt;
```


当你用你的用户名 `&lt;yourusername&gt;` 登录时，可以通过在命令行前输入sudo，来以超级用户的权限执行操作。

可选：如果你通过 `root` 账户使用 [SSH 密钥](https://jumpcloud.com/blog/what-are-ssh-keys)来连接你的 Ubuntu 实例，你将需要使用 root 账户的 SSH 密钥数据来连接新账户。

```
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```


最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。


&lt;br/&gt;

# 第1步：升级服务器

确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
$ sudo reboot
```


&lt;br/&gt;

# 第2步：保护服务器


安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 配置防火墙


Ubuntu 20.04 服务器可以使用默认的 [UFW 防火墙](https://help.ubuntu.com/community/UFW)来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Grafana、Teku 的入站流量。

**允许 SSH**


允许通过SSH连接到服务器。为了安全，接下来我们要修改默认端口22 (因为这是一个普遍的攻击矢量)。

&gt; 注意：如果你选择不修改默认SSH端口 (不建议)，那就要加一项操作——允许默认SSH端口 `*$ sudo ufw allow 22/tcp*` ，然后跳到允许“Go Ethereum”这一步。

在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。如果显示红色 (被使用了)，就选择另一个端口。比如： `sudo ss -tulpn | grep &apos;:6673&apos;`

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;yourSSHportnumber&gt;&apos;
```


更新防火墙，允许`&lt;yourSSHportnumber&gt;` 的入站流量。SSH要求TCP协议。比如：`sudo ufw allow 6673/tcp`

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```


下一步，修改默认SSH端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```


找到默认端口`# Port 22` 或`Port 22`，然后修改你自己的端口号 `Port &lt;yourSSHportnumber&gt;`。删掉 `#`  (如果有的话)。参考下方的截图，你的文档应该和下图展示的类似 (除了端口号不一样)。保存然后退出。

![p3](https://i.ibb.co/94mtjw9/3.png)



**重启SSH服务**

``` Powershell
$ sudo systemctl restart ssh
```

下次你通过SSH登录时就使用你的端口号 `&lt;yourSSHportnumber&gt;` 。

可选：如果你已经使用端口 22/TCP 的UFW了，那就更新防火墙以拒绝该端口的入站流量。请务必在你使用新SSH端口登录之后在操作这一步。

``` Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**

允许来自Go Ethereum对等节点 (端口30303/TPC 和 30303/UDP) 的入站请求。如果你使用第三方 (如([Infura](https://infura.io/)) 托管的 Eth1 节点，则可以跳过这一步。


&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许 Teku**



允许与 Teku 的对等节点进行点对点连接，以便在信标链节点上 (Consensys[提供](https://docs.teku.consensys.net/en/latest/HowTo/Find-and-Connect/Improve-Connectivity/#configuring-ports)的默认端口9000/TCP和9000/UDP) 进行操作。.


&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由和防火墙以允许来自端口9000 的入站流量。

``` Powershell
$ sudo ufw allow 9000
```

**允许 Grafana**



允许访问Grafana web 服务器 (端口3000/TCP) 的入站请求。

``` Powershell
$ sudo ufw allow 3000/tcp
```

**允许 Prometheus (可选)**


如果你想直接访问Prometheus数据服务，你也可以打开端口9090/TCP。如果你仅使用Grafana查看数据，则没有必要这样做。我没有打开这个端口。

``` Powershell
$ sudo ufw allow 9090/tcp
```



启动防火墙，检查是否已经正确配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```



显示应该是这样的

![p4](https://i.ibb.co/6wQdG6Q/4.png)

&lt;br/&gt;

# 第3步：安装并运行 Go Ethereum 节点


安装并配置Eth1.0的节点，信标链将与该节点相连。如果你选择第三方服务 (如[Infura](https://infura.io/)) 的话，可以跳过这一步。

## 安装 Go Ethereum



建议使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
```


更新软件包并安装最新的稳定版本。

``` Powershell
$ sudo apt update
$ sudo apt install geth
```

## 将Go Ethereum作为后台服务来运行

运行该服务需要创建一个账户，此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```

为Eth1区块链创建数据目录，用来存储Eth1节点数据。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```

设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```

创建一个systemd服务文件来储存该服务配置。我们将使用该配置文件来命令systemd运行`geth` 进程。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```

将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Ethereum go client
After=network.target 
Wants=network.target[Service]
User=goeth 
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --goerli --http --datadir /var/lib/goethereum[Install]
WantedBy=default.target
```


flag `--goerli` 用于定位 Göerli 测试网，而flag `--http` 用来公开与信标链节点连接的一个HTTP端口 (http://localhost:8545)。

参考下方的截图。保存然后退出。

![p5](https://i.ibb.co/tKMxJKv/5.png)



重新加载 systemd 以显示上述的更改

``` Powershell
$ sudo systemctl daemon-reload
```

启动服务，并检查确保其正常运行。

``` Powershell
$ sudo systemctl start geth
$ sudo systemctl status geth
```

显示应如下方截图。

![p6](https://i.ibb.co/7zXFcJ2/6.png)



如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```

Go Ethereum节点将会开始同步。你可以运行 journal 命令来追踪进程。按“CTRL+c”退出。

&gt; NOTE: Issuing Ctrl+C to quit out of journal doesn’t impact the service. Journal is simply a real-time view of the service logs.
&gt;
&gt; 注意：使用 Ctrl+C 退出 journal 不会影响该服务，Journal 只是服务日志的实时视图。

``` Powershell
$ sudo journalctl -fu geth.service
```



当你花较长的时间 (&gt;10分钟) 来找到需要同步的对等节点时，你可以添加一些对等节点。访问[此处](https://gist.github.com/rfikki/77081600ddc8432520d3bb3a9f80a493)以获得最新的清单，并操作下列命令行以修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```



修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等点，并以逗号分割。

``` Powershell
ExecStart=geth --goerli --http --datadir /var/lib/goethereum --bootnodes &quot;enode://46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291@94.237.54.114:30313,enode://119f66b04772e8d2e9d352b81a15aa49d565590bfc9a80fe732706919f8ccd00a471cf8433e398c55c4862aadb4aadf3a010201483b87e8358951698aa0b6f07@13.250.50.139:30303&quot;
```

保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -fu geth.service
```

启动后显示应该类似下方截图：

![p7](https://i.ibb.co/RSMn6zc/7.png)








在运行信标链之前，你需要等待节点同步完成。点击[此处](https://goerli.etherscan.io/blocks)访问最新的区块。

比如，上方截图显示了节点正在处理区块 `number=43756` ，再看看下方截图，显示最新的区块是  `3196411`。也就是说，我们还有一段时间才能完成同步。

![p8](https://i.ibb.co/9WbCVmb/8.png)






接下来，我们将准备验证者存款数据。如果你想查看同步状态，你可以在任意时间运行命令 `sudo journalctl -fu geth.service` 以查看。

&lt;br/&gt;

# 第4步：生成验证者密钥和存款数据


为了能在Eth2.0 Pyrmont测试网上运行验证者节点，我们将需要注册一个或多个验证者账户。

&gt; 注意：如果你已经生成了你的存款数据并提交了你的质押存款，你可以跳过这一步。如果你是在别处生成的，你需要复制你的验证者密钥到这个服务器上。

注册步骤如下：

- 获取Göerli ETH
- 生成验证者密钥。一个密钥代表一个验证者账户。
- 向每个验证者账户各存入32个Göerli ETH
- 等候你的验证者账户被激活

那我们现在就开始吧！

## 获取Goerli ETH


1. 使用已经安装了浏览器插件MetaMask的计算机。
2. 点击MetaMask然后登录
3. 点击顶部的下拉菜单，选择**Göerli 测试网络**
4. 点击账户名，复制你的Göerli 测试网钱包地址
5. 使用你的地址从[authenticated faucet](https://faucet.goerli.mudit.blog/)获取Göerli ETH，或者通过在 [ethstaker Discord](https://discord.gg/7z8wzehjrJ)上的`#request-goerli-eth`频道使用机器人命令：`!goerliEth &lt;yourwalletaddress&gt;`。

&gt; 注意：一个验证者需要一笔32个ETH的存款。你的MetaMask钱包需要有充足的 Göerli ETH存进每个验证者客户端里。例如，如果你想要运行10个验证者，拿你就需要320个Göerli ETH以及一些额外的钱 (比如1个Göerli ETH) 来支付gas费。

## 生成验证者密钥


接下来我们要生成存款数据和验证者密钥。Teku验证者客户端支持多个验证者密钥。在Pyrmont测试网上基本上一个验证者密钥代表一个“验证者账户”。存款数据中包含你的质押信息 (如验证者密钥清单等)

前往[这里](https://github.com/ethereum/eth2.0-deposit-cli/releases/)获取存款命令行接口应用的“最新发布”。



![p13](https://i.ibb.co/9wt6NsR/13.png)



在“asset&quot;一栏复制这个链接到Linux版本。我们将使用该链接来下载它，如下所示。修改指令里的URL名为最新版本的下载链接。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -LO https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.1.0/eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```



打开tar存档并去到其创建的目录。

``` Powershell
$ sudo tar xvf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
$ cd eth2deposit-cli-ed5a6d3-linux-amd64
```


 运行应用来生成存款数据和验证者密钥。

将`&lt;numberofvalidators&gt;`修改为你想要创建的验证者密钥数。例如：`--num_validators 5`

``` Powershell
$ sudo ./deposit new-mnemonic --num_validators &lt;numberofvalidators&gt; --mnemonic_language=english --chain pyrmont
```



它会要求你创建一个钱包密码。我们将使用它来将验证者密钥加载到 Teku 客户端的验证者钱包。把它备份到安全的地方。

![p14](https://i.ibb.co/42Mc0cQ/14.png)



它会生成一个种子短语 (助记符)。把它备份到其他地方。这很重要，你将需要它来生成提款密钥或者添加验证者。



![p15](https://i.ibb.co/vXFQxtP/15.png)



一旦你已经确认了你的助记符，你的验证者密钥就会被创建。

![p16](https://i.ibb.co/9Y4Pt1g/16.png)





新创建的验证者密钥和存款数据文档会在一个特定地方被创建。比如：`eth2deposit-cli-ed5a6d3-linux-amd64/validator_keys` 。标记一下，我们待会会用到。


文件夹的内容见下：

![p17](https://i.ibb.co/zZ6Qbr3/17.png)





`deposit_data-[timestamp].json`文档包含了验证者的公钥和存款的相关信息。这个文档会在下一步用来完成存款进程。由于我们是在一个服务器上，而没有一个网络浏览器，因此要使用[secure FTP (SFTP)](https://www.maketecheasier.com/use-sftp-transfer-files-linux-servers/) 把文档迁移到一部运行MetaMask的计算机上。记得先完成这一步再继续。



`keystore-m...json`文档包含加密的签名密钥。每个验证者账户都有一个 keystore-m。这些会被用来创建 Teku 客户端验证者钱包。

通过删除下载的tar存档文件进行清理。

``` Powershell
$ cd ~
$ rm -rf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```



现在你已经有了存款数据和密钥存储文件，接下来就可以设置 Teku 了。我们要先把资产存入密钥中 (存入Göerli ETH以激活验证者)再设置Teku，这样我们就可以首先验证设置了。如果验证者存款被激活了，但系统没准备好的话，我们会受到怠工惩罚。

&lt;br/&gt;

# 第5步：安装条件


Teku基于 Java 语言构建，因此它需要 Java 运行时环境 (JRE) 来运行，并需要 Java 开发工具包 (JDK) 进行编译。

.安装这两种工具。

``` Powershell
$ sudo apt install default-jre default-jdk
$ java --version
$ javac --version
```

显示应类似下图。

``` Powershell
ethstaker@ETH-STAKER-001:~$ java --version
openjdk 11.0.9.1 2020-11-04
OpenJDK Runtime Environment (build 11.0.9.1+1-Ubuntu-0ubuntu1.20.04)
OpenJDK 64-Bit Server VM (build 11.0.9.1+1-Ubuntu-0ubuntu1.20.04, mixed mode, sharing)
ethstaker@ETH-STAKER-001:~$ javac --version
javac 11.0.9.1
```
&lt;br/&gt;

# 第6步：克隆和构建Teku


现在我们准备好构建 Teku 了。Teku 生成一个 `teku` 二进制文件。该二进制文件提供信标链以及验证者客户端的功能。



访问[这里](https://github.com/ConsenSys/teku/releases)以获取 Teku 的最新版本。注意不要克隆了主分支版本，因为这可能不稳定。

![p14](https://i.ibb.co/K9PssGW/14.png)





使用标签 (在本例中为  `20.11.0-RC2`)

``` Powershell
$ cd ~
$ git clone --b 20.11.0-RC2 https://github.com/Consensys/teku.git
$ cd teku
```


使用[Gradle](https://gradle.org/) 来编译代码

``` Powershell
$ sudo ./gradlew installDist
```



构建时间大概需要3-6分钟。是时候喝点饮料补充补充水分了。也可以阅读我[其他的文章](https://someresat.medium.com/)。


如果都操作成功了请继续，如果操作失败了请求助 ConsenSys Discord 的 #teku 频道 : https://discord.gg/trQ378WCp4

&lt;br/&gt;

# 第7步：复制 Teku 二进制文件


接下来复制粘贴已编译的 Teku 文件至目录 `/usr/local/bin` 中，我们随后将创建一个systemd服务，并在那运行该文件。

``` Powershell
$ cd ~
$ sudo cp -a teku/build/install/teku/. /usr/local/bin/teku
```

&gt; 注意：每一次你拉取或构建一个新版本`*teku*` 二进制文件，你都需要做这一步。请看此教程的最后**附录——Teku更新**。

&lt;br/&gt;

# 第8步：配置信标节点和验证者客户端



我们将把Teku客户端作为服务来运行，因此如果系统重启，这个进程将自动重新开始。

## 设置账户和目录


为信标节点与验证者节点的运行创建一个账户。这种类型的账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false teku
```


为Teku客户端的数据文档创建数据目录，并为Teku的配置文档创建config目录。

``` Powershell
$ sudo mkdir -p /var/lib/teku
$ sudo mkdir -p /etc/teku
```


这样我们可以把文档集中在一个位置，复制`keystore-m...json`的文档到我们之前创建的数据目录。

``` Powershell
$ sudo cp -a /$HOME/&lt;ValidatorKeysPath&gt; /var/lib/teku
```



把你生成的验证者密钥的路径填到`&lt;ValidatorKeysPath&gt;`，例如：`eth2deposit-cli-ed5a6d3-linux-amd64/validator_keys`。值得注意的是我们只复制keystore-m文档。不要复制deposit_data文档。如果你复制了，只需要通过以下代码进行删除。

``` Powershell
$ cd /var/lib/teku/validator_keys
$ ls
$ sudo rm &lt;DepositDataFileName&gt;
```



你应该会得到以下结果 (取决于你有多少个验证者文档)

![p15](https://i.ibb.co/b32mww1/15.png)







## 创建验证者密码文档



Teku客户端要求验证者有一个密码文档，以在运行和自动重启服务时访问每个验证者账户。

每个验证者`keystore-m...json`密钥文档都需要一个对应的密码txt文档。即使所有验证者的密码是一样，这一步也是必须的。密码文档的命名需要于对应的keystore-m文档相一致。

``` Powershell
$ ls /var/lib/teku/validator_keys
```


给每个`keystore_m*.json`文档创建一个命名相同的密码文档。

``` Powershell
$ sudo nano /var/lib/teku/validator_keys/&lt;jsonfilename&gt;.txt
```


在`&lt;jsonfilename&gt;`填入json文档的名字。不要忘了在最后加上 `.txt `。在txt文档里，把密码储存的密码 (你在第4步创建验证者文档时提供的密码)填到`YourKeystorePasswordForThisValidator`。保存并推出。给每个`*.json`文档重复以上步骤。

![p16](https://i.ibb.co/gM6hJpn/16.png)




你应该会得到以下结果，这一步就完成了。

![p17](https://i.ibb.co/61qyqPB/17.png)






&gt; 注意：不应该有`*deposit_data-\*.json*`文档的出现。如果有，把它删了。它会导致错误配对，因为Teku客户端会预期它有一个对应的密码文档。



## 设置权限


设置目录权限。 `teku`账户需要修改数目目录的权限。确认正确设置了目录权限。

``` Powershell
$ sudo chown -R teku:teku /var/lib/teku
$ sudo chown -R teku:teku /etc/teku
$ ls -dl /var/lib/teku; ls -dl /etc/teku
```



应该像这样：

![p18](https://i.ibb.co/dDBVKV8/18.png)







把文档权限应用到验证者密钥以提供额外的安全层，并防止意外的删除。给(teku)用户读取/写入/执行的权限。确认正确设置了文档权限。

``` Powershell
$ sudo chmod -R 700 /var/lib/teku/validator_keys
$ sudo ls -lh /var/lib/teku/validator_keys
```



结果应该像这样

![p19](https://i.ibb.co/zSwj7VS/19.png)




现在我们设好了验证者密钥于密码，现在开始配置服务。



## 创建Teku配置文档


Teku客户端可以通过配置文档读取命令行选项。现在创建。

``` Powershell
$ sudo nano /etc/teku/teku.yaml
```


粘贴下面的代码到文档里。

``` Powershell
data-base-path: &quot;/var/lib/teku&quot;network: &quot;pyrmont&quot;eth1-endpoint: &quot;http://127.0.0.1:8545/&quot;validator-keys: &quot;/var/lib/teku/validator_keys:/var/lib/teku/validator_keys&quot;validators-graffiti: &quot;&lt;yourPOAPstring&gt;&quot;p2p-port: 9000log-destination: CONSOLEmetrics-enabled: true
metrics-port: 8008rest-api-enabled: true
rest-api-docs-enabled: true
```


flag`data-base-path`定义服务存储数据的位置。

flag`eth1-endpoint`定义了ETH1 节点的终端。如果你在本地安装，这个值为`http://127.0.0.1:8545`。如果你正在使用一个第三方节点 (例如：Infura等)，你需要把这个值改为指向外部终端的地址。

flag `validators-keys`指示密钥文档于密码文档的位置。这样，它们都处在同一个目录。

在 `&lt;yourPOAPstring&gt;`输入你想要的文字。例如：`validators-graffiti: &quot;abcdefg12345&quot;`。

在使用systemd中推荐 `log-destination: CONSOLE` 设置


参考下方的截图。你的文档应该跟它差不多。退出并保存。

![p20](https://i.ibb.co/9q3cZry/20.png)







## 创建和配置Teku服务

创建一个systemd服务文档来储存配置服务。

``` Powershell
$ sudo nano /etc/systemd/system/teku.service
```

将下面这段代码复制粘贴到文档里

``` Powershell
[Unit]
Description=Teku Client
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=teku
Group=teku
Restart=always
RestartSec=5
Environment=&quot;JAVA_OPTS=-Xmx2g&quot;
ExecStart=/usr/local/bin/teku/bin/teku --config-file=/etc/teku/teku.yaml[Install]
WantedBy=multi-user.target
```


Java (Teku使用的编程语言)执行运行时在设计上就需要占用大量RAM。flag`Environment=”JAVA_OPTS=-Xmx2g”`限制了堆积大小为2GB，因此Teku的运行可用总内存约为 3–3.5GB。


参考下方的截图。你的文档应该跟它差不多。退出并保存。

![p21](https://i.ibb.co/C7JMx02/21.png)









重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


&gt; 注意：如果你是运行本地的Eth1节点（看第3步），你应该等待至它完全同步完数据再启动Teku服务。在这里查看进程：`*sudo journalctl -fu geth.service*`

启动服务并检查，确保运行正确。

``` Powershell
$ sudo systemctl start teku
$ sudo systemctl status teku
```



显示的结果应该是这样：

![p22](https://i.ibb.co/ZfdRYMb/22.png)








如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable teku
```



信标节点将开始同步数据。它可能要花几个小时才能完全实现同步。你可以通过运行journal命令来追踪进程。按CTRL+c退出。


&gt; 注意：按Ctrl+C退出journal不会影响服务。journal指示服务日志的实时视图。

``` Powershell
$ sudo journalctl -fu teku.service
```



它会开始处理验证者密钥，然后同步数据到Eth1的链头。当`Head slot` 同步到`Current slot`，信标节点的同步就完成了。

``` Powershell
Started Teku Client.
...
INFO  - Loading 2 validator keys...
INFO  - BLS: loaded BLST library
INFO  - Loaded 2 Validators: 96a349b, b7f51b6
...
INFO  - Sync Event  *** Current slot: 30174, Head slot: 54, Connected peers: 1
INFO  - Sync Event  *** Current slot: 30175, Head slot: 92, Connected peers: 6
INFO  - Sync Event  *** Current slot: 30176, Head slot: 128, Connected peers: 8
INFO  - Sync Event  *** Current slot: 30177, Head slot: 160, Connected peers: 10
```



这一步结束了。我们现在有一条运行中的信标链和一个验证者节点。恭喜你！你棒棒的！

&lt;br/&gt;

# 第9步：进行验证者存款


现在你的设置已经完成并在运行中了，你需要给Pyrmont测试网存入32个Göerli ETH。


&gt; 注意：如果你已经提交了你的质押存款，你可以跳过这一步。


这一步是关于将所需的Göerli ETH存入Pyrmont测试网的存款合约。这需要在浏览器上通过Pyrmont的Launchpad网站启动你的MetaMask (或其他) 钱包。

&gt; 注意：如果这份教程是用于主网 (它不是)，你需要等到你的Eth1节点和信标节点完全同步完再开存入你的存款。如果你不这样做，当你的Eth1节点或信标链在同步时，你可能要遭遇怠工惩罚。


Pyrmont测试网的Launchpad:https://pyrmont.launchpad.ethereum.org/


一直随着屏幕切换点击这些警告步骤，直到你到达**密钥对生成**的部分。选择你打算运行的验证者数量。选择一个与你在步骤4中生成的验证者文件数量相匹配的值。



![24](https://i.ibb.co/CwKwHzQ/p27.png)

往下滚动，看这些内容你是否同意，然后点击“Continue” (继续)。

![25](https://i.ibb.co/LdJsJwY/p28.png)




你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在之前生成的，把它复制到有浏览器的计算机里。浏览/选择或拖拉这个文档，然后点击Continue。



![26](https://i.ibb.co/PTkh7gD/p29.png)

连接你的钱包。选择MetaMask (或者是其他支持的钱包)，登录，选择存有你的Göerli ETH的Göerli测试网络，然后点击Continue。

![p26](https://i.ibb.co/zSdPcb2/26.png)



&gt; 注意：请100%确定你在MetaMask上选的是Göerli测试网络。不要把真的ETH发送到 Pyrmont测试网。



你的MetaMask余额就会显示出来。如果你选择了Göerli测试网络且你有充足的Göerli ETH余额，网站会允许你继续下一步。

![p27](https://i.ibb.co/6X385KS/27.png)





然后会出现一个Summary (总结)，显示验证者数和所需的Göerli ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![p28](https://i.ibb.co/qkDGzwb/28.png)







点击&quot;Initiate All Transactions&quot; (启动所有交易）。

![p29](https://i.ibb.co/DwZ7BRq/29.png)







会有多个MetaMask实例弹出，每个都对Pyrmont测试网提出一个32个Göerli ETH的交易请求。请确认每一笔交易。

![p30](https://i.ibb.co/WBSj0g5/30.png)






当所有的交易都成功完成时，你的质押也完成了！

![p31](https://i.ibb.co/HH6P2yn/31.png)








恭喜！

![p32](https://i.ibb.co/hswDNF4/32.png)



在最后会有一个清单。里面有非常多有用信息。可以看一下

![p33](https://i.ibb.co/M8H67Wg/33.png)







## 查看你的验证者存款状态



新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

![p34](https://i.ibb.co/b2jbxfD/34.png)



1. 复制你的Göerli测试网钱包地址

2. 前往：https://pyrmont.beaconcha.in/

3. 搜索你的钱包地址。你的密钥会显示出来。

![p35](https://i.ibb.co/d7qX8m4/35.png)






点进某个验证者详情，每个验证者激活后你会看到在Status那一栏有预估时间。

![p36](https://i.ibb.co/09S06pd/36.png)




现在你面前有一个条正在运作的信标链、一个验证者节点以及你的测试网存款。一旦你的存款被激活，你将开始工作并赚取收益。恭喜你！

&lt;br/&gt;

# 第10步：安装Prometheus


Prometheus是一个提供监测功能和警报工具箱的开源系统。它在你的Ubuntu服务器上作为一个服务来运行，而它的职责就是去抓取数据。更多信息请看[这里](https://prometheus.io/docs/introduction/overview/)。

我们会使用Prometheus公开信标链、验证者的运行时数据和特定实例数据。

## 创建用户账户


这些服务是在账户下运行的。这些账户不能登录到服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false prometheus
$ sudo useradd --no-create-home --shell /bin/false node_exporter
```

## 创建目录

程序与数据目录。

``` Powershell
$ sudo mkdir /etc/prometheus
$ sudo mkdir /var/lib/prometheus
```

设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus
$ sudo chown -R prometheus:prometheus /var/lib/prometheus
```

## 下载Prometheus软件

 从[Prometheus下载页面](https://prometheus.io/download/)修改最新版本的版本号。Rpi用户一定要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/prometheus/releases/download/v2.22.2/prometheus-2.22.2.linux-amd64.tar.gz
```

打开tar存档。它包含两个二进制文档和一些内容文档。

``` Powershell
$ tar xvf prometheus-2.22.2.linux-amd64.tar.gz
```

复制二进制文档到下列位置。

``` Powershell
$ sudo cp prometheus-2.22.2.linux-amd64/prometheus /usr/local/bin/
$ sudo cp prometheus-2.22.2.linux-amd64/promtool /usr/local/bin/
```

设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /usr/local/bin/prometheus
$ sudo chown -R prometheus:prometheus /usr/local/bin/promtool
```

复制这些内容文档到下列位置。

``` Powershell
$ sudo cp -r prometheus-2.22.2.linux-amd64/consoles /etc/prometheus
$ sudo cp -r prometheus-2.22.2.linux-amd64/console_libraries /etc/prometheus
```
设置目录和文档 (-R) 的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/consoles
$ sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
```

移除下载存档。

``` Powershell
$ rm -rf prometheus-2.22.2.linux-amd64.tar.gz prometheus-2.22.2.linux-amd64
```

## 编辑配置文档


Prometheus使用一个配置文档，这样它就知道去哪里获取数据。

打开YAML配置文档来编辑。

``` Powershell
$ sudo nano /etc/prometheus/prometheus.yml
```



复制下面的代码到文档，注意不要进行任何其他编辑，并退出保存文件。

``` Powershell
global:
  scrape_interval: 15s
scrape_configs:
  - job_name: &quot;prometheus&quot;
    static_configs:
    - targets: [&quot;localhost:9090&quot;]
  - job_name: &quot;teku&quot;
    scrape_timeout: 10s
    metrics_path: /metrics
    scheme: http
    static_configs:
    - targets: [&quot;localhost:8008&quot;]
```


给config文档设置所有权。prometheus账户将拥有这个所有权。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/prometheus.yml
```


最后，测试服务器是否运行正确。

``` Powershell
$ sudo -u prometheus /usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries
```


输出应该如下。按Ctrl + C退出。

``` Powershell
level=info ts=2020-11-22T17:24:35.396Z caller=main.go:684 msg=&quot;Server is ready to receive web requests.&quot;
```

## 把Prometheus设置为自动启动的服务


创建一个systemd服务文档来储存服务config文档，它会告诉systemd把 Prometheus作为prometheus用户来运行，把配置文档放在目录/etc/prometheus/prometheus.yml，并保存在目录/var/lib/prometheus。

``` Powershell
$ sudo nano /etc/systemd/system/prometheus.service
```

复制下列代码到文档。退出并保存。

``` Powershell
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=prometheus
Group=prometheus
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries[Install]
WantedBy=multi-user.target
```

 重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```

然后按下面的命令启动服务并检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start prometheus
$ sudo systemctl status prometheus
```



输出应该如下图。

![p37](https://i.ibb.co/CWJbH28/37.png)




如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

最后，允许Prometheus随系统启动而启动。

``` Powershell
$ sudo systemctl enable prometheus
```

&lt;br/&gt;

# 第11步：安装Node Exporter


Prometheus会提供关于信标链和验证者的数据。如果我们想要我们Ubuntu实例的数据，我们需要一个叫[Node_Exporter](https://github.com/prometheus/node_exporter)的extension。如果你在下面指定其他版本，你可以在[这里](https://prometheus.io/download/)找到最新的稳定版本。Rpi用户记得要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
```

打开下载了的软件。

``` Powershell
$ tar xvf node_exporter-1.0.1.linux-amd64.tar.gz
```


复制二进制文档到目录/usr/local/bin，并设置用户与群组对我们在前面创建的node_exporter用户的所有权。

``` Powershell
$ sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin
$ sudo chown -R node_exporter:node_exporter /usr/local/bin/node_exporter
```

移除下载了的存档。

``` Powershell
$ rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64
```

## 将Node Exporter设置为自动启动的服务


创建一个systemd服务文档来储存服务config文档，它会告诉systemd把Node_Exporter 作为node_exporter用户来运行。

``` Powershell
$ sudo nano /etc/systemd/system/node_exporter.service
```

复制下列代码到文档。退出并保存。

``` Powershell
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter[Install]
WantedBy=multi-user.target
```

重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```

然后按下面的命令启动服务并检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start node_exporter
$ sudo systemctl status node_exporter
```


输出应该如下图。

![p38](https://i.ibb.co/LSMkXfy/38.png)






如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

最后，允许Node Exporter随系统启动而启动。

``` Powershell
$ sudo systemctl enable node_exporter
```

## 测试Prometheus和Node Exporter (可选)



所有东西都准备就绪了。通过在防火墙打开一个端口 (请参阅步骤1）和浏览`http://&lt;yourserverip&gt;:9090`你可以有选择性地测试它的功能。在那里你可以运行查询以查看不同的数据。例如，你可以试这个查询来看还有多少可用内存：

``` Powershell
http://&lt;yourserverip&gt;:9090/new/graph?g0.expr=node_memory_MemFree_bytes&amp;g0.tab=1&amp;g0.stacked=0&amp;g0.range_input=1h
```

&lt;br/&gt;

# 第12步：安装Grafana


Prometheus是我们的数据来源，而Grafana则给我们提供报告仪表盘数据的功能。接下来安装Grafana并配置仪表盘。

我们会用一个APT仓库来安装，因为这会使得安装和更新更简单。Grafana可以在官方的Ubuntu软件包仓库中找到，但那个版本可能不是最新的，因此我们将使用Grafana的官方仓库。

用wget下载Grafana GPG的密钥，然后将输出传送到apt-key。这会将密钥添加到你的APT安装的信任密钥列表中。

``` Powershell
$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
```

把Grafana仓库加到APT的来源里。

``` Powershell
$ sudo add-apt-repository &quot;deb https://packages.grafana.com/oss/deb stable main&quot;
```

刷新apt缓存。

``` Powershell
$ sudo apt update
```
确认Grafana是从仓库安装的。

``` Powershell
$ apt-cache policy grafana
```

输出应该如下：

``` Powershell
grafana:
  Installed: (none)
  Candidate: 7.3.3
  Version table:
     7.3.3 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.3.2 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.3.1 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 
...
```

检查顶部显示的版本是否与[这里](https://grafana.com/grafana/download)显示的最新版本一致。然后继续安装。

``` Powershell
$ sudo apt install grafana
```

启动Grafana服务器和检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start grafana-server
$ sudo systemctl status grafana-server
```



输出应该如下图：

![p39](https://i.ibb.co/ZW49s3L/39.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许Grafana随系统启动而启动。

``` Powershell
$ sudo systemctl enable grafana-server
```

## 配置Grafana登录



能做到这一步已经很棒了！现在一切都设置好并开始运行了，你可以在浏览器里前往`http://&lt;yourserverip&gt;:3000/`，会出现Grafana的登录窗口。

在`admin`输入用户名和密码。系统会让你修改密码，请务必修改。

## 配置Grafana的数据来源



让我们配置数据来源吧。把你的鼠标移至左边菜单栏的齿轮图标处，会弹出一个菜单——选择`Data Sources`。

![p33](https://i.ibb.co/4dMmF8R/33.png)






点击 `Add Data Source`，然后选择`Prometheus`。在URL输入`http://localhost:9090`，然后点击 `Save and Test`。

![p34](https://i.ibb.co/sWsHzQz/34.png)



![p35](https://i.ibb.co/mzL51L5/35.png)



## 导入Grafana仪表盘


移动你的鼠标到左边菜单栏的`+`图标，会有一个菜单弹出，选择 `Import`。

用代码 `13457`来导入官方Teku的单个验证者[仪表盘](https://grafana.com/grafana/dashboards/13457)或用代码`12522`导入Ben Edgington的[仪表盘](https://grafana.com/grafana/dashboards/12522)

![p43](https://i.ibb.co/J2d3Jtm/43.png)




你可能还需要选择数据来源 (Prometheus)。

![p44](https://i.ibb.co/rvXCYxp/44.png)




此时你应该可以看到仪表盘了。一开始，你可能看到的数据比较少，但随着所有东西的运行起来，数据会变得丰富。

![p45](https://i.ibb.co/ssNFm7c/45.png)



&lt;br/&gt;

# 写在最后

到这里就完成了！希望这个教程能帮到你。

- 如果你有任何反馈，你可以在[Twitter](https://www.twitter.com/SomerEsat) 或 [Reddit](https://www.reddit.com/user/SomerEsat)上联系我

- 如果你喜欢这个教程并希望别人也能学习这个教程，请用[friends link](https://medium.com/@SomerEsat/4d2a86cc637b?source=friends_link&amp;sk=4cb64bfa20247d2b5c7a50ce0a92d33b)把教程分享出去！

- 支持一下：somer.eth

&lt;br/&gt;

# 附录——Teku更新


如果Teku客户端团队在Teku代码库里更新了代码，你可以通过使用下面的命令来更新服务。

在[这里](https://github.com/ConsenSys/teku/releases)找到你想要的版本，并输入到 `&lt;release&gt;`。例如：`$ git fetch --tags &amp;&amp; git checkout 20.11.0-RC2`.

``` Powershell
$ cd ~
$ cd teku
$ sudo git fetch --tags &amp;&amp; git checkout &lt;release&gt;
$ sudo ./gradlew installDist 
$ sudo systemctl stop teku 
$ sudo rm -r /usr/local/bin/teku # &lt;-- Delete old build
$ sudo cp -a ~/teku/build/install/teku/. /usr/local/bin/teku 
$ sudo systemctl start teku 
$ sudo systemctl status teku # &lt;-- Check status
$ sudo journalctl -fu teku # &lt;-- Check status
```
&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太坊2.0测试网质押(Ubuntu/Pyrmont/Lighthouse)]]></title><description><![CDATA[如何参与Pyrmont测试网质押，Lighthouse篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-lighthouse</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-lighthouse</guid><pubDate>Tue, 22 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-lighthouse-a634d3b87393)

![lighthouse](https://i.ibb.co/41wW8Rs/1.png)


**提醒**：不要按照这个指南与Eth2主网连接。主网指南在[这里](https://github.com/SomerEsat/ethereum-staking-guide)。请参考《以太坊2.0主网质押教学(Ubuntu/Lighthouse)》。



本文详解如何通过多客户端测试网Pyrmont在以太坊2.0主网质押。主要基于以下几个技术：

-  Ubuntu v20.04 (LTS) x64 服务器
- Go Ethereum 节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- Sigma Prime 的以太坊2.0客户端，Lighthouse (代码分支)
- 正式多客户端测试网公网，[Pyrmont](https://github.com/protolambda/pyrmont)
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/)
- [Prometheus](https://prometheus.io/) 参数
- [Grafana](https://grafana.com/) 仪表盘


此篇指南包括以下指令：

- 配置一个新运行的Ubuntu服务器用例
- 配置并运行一个以太坊1.0节点作为服务
- 生成一个Lighthouse客户端并导入Pyrmont验证者账户密钥
- 给以太坊2.0与Pyrmont测试网阶段0编译并配置Lighthouse客户端软件，并把它们作为服务来运行
- 安装和配置Prometheus参数，设置一个Grafana仪表盘

&lt;br/&gt;

# 提醒


此指南是用于Pyrmont测试网的。切记无论如何不要向测试网发送主网的ETH。你发送了就等于丢失了。

**不要**按照这份指南连接Eth2主网。主网专用指南在[这里](https://github.com/SomerEsat/ethereum-staking-guide)。请参考《以太坊2.0主网质押教学(Ubuntu/Lighthouse)》。

&lt;br/&gt;

# 致谢与免责声明


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢[Lighthouse](https://discord.gg/Ba8VWz7nbf)和[EthStaker](https://discord.gg/7z8wzehjrJ)团队的人在discord上提供的帮助与审校。

特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

此教程仅作教育用途。我不是本文涉及的任何技术的专家。不保证此教程内容的准确性，因遵循此教程而造成的损失，本人概不负责。

&lt;br&gt;

# 支持


这个过程可能有些棘手。除了我之外，以下是两个你可以寻求帮助的好资源 :

- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

  - Reddit：https://www.reddit.com/r/ethstaker/

  - Discord：https://discord.gg/7z8wzehjrJ
- Lighthouse 客户端团队，[Discord](https://discord.gg/Ba8VWz7nbf)，他们是客户端软件的工程团队，是使用Lighthouse的专家。

&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、Linux、MetaMask (Portis或Fortmatic) 有一定的背景知识。

此教程还需要在开始前安装并运行：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机、你的网络、或云端 (AWS、Digital Ocean、Microsoft Azure等)安装和运行的Ubuntu服务器。推荐使用本地计算机，以提高网络的去中心化程度——如果云端供应商掉线了，那么托管在这个供应商的节点都会离线。
- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 树莓Pi用户注意


我没有在树莓Pi上测试过这份教程。如果你想尝试的话，只需要把下面列出的软件换成ARM版本。不保证可行。

&lt;br/&gt;

# 要求


- Ubuntu服务器用例。我用过v20.04 (LTS) amd64服务器 VM
- 浏览器插件加密钱包MetaMask，安装并配置好
- 推荐硬件要求：
  - 处理器：Intel Core i7–4770或AMD FX-8310或更好的
  - 内存：16GB RAM
  - 存储空间：可用空间有100GB的固态硬盘 

&lt;br/&gt;

# 概览


本教程篇幅较长，下面这个图表简要说明了质押的步骤，标黄的即是本文会覆盖到的部分：

![p2](https://i.ibb.co/gSFPstC/2.png)





整个流程可以概念化表述为：

- 设置一个Eth1 节点并同步Eth1 Göerli 测试网的数据；
- 配置信标链节点并同步Eth1 节点的数据；
- 生成验证者密钥并激活；
- 配置验证者客户端；
- 验证者在信标链上借助签名密钥对提议区块、证明区块，当验证者作恶或者怠工时会受到罚没惩罚。

那我们现在就开始吧！

&lt;br/&gt;

# 第0步：连接至服务器


使用一个SSH端口，连接至你的Ubuntu服务器。在默认情况下，Ubuntu上的root账户通常都是禁用的，然而有些云提供商可以启动root账户。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的[风险](https://askubuntu.com/questions/16178/why-is-it-bad-to-log-in-as-root)。


&gt; 注意：如果你不是用`root`登录的便可以直接跳到第1步。

``` Powershell
# adduser &lt;yourusername&gt;
```



设置一个密码并填写其他信息。

通过把新的用户加入`sudo`群组中，来授予其管理权限。

``` Powershell

# usermod -aG sudo &lt;yourusername&gt;
```


当你用你的用户名 `&lt;yourusername&gt;` 登录时，可以通过在命令行前输入sudo，来以超级用户的权限执行操作。

可选：如果你通过 `root` 账户使用 [SSH 密钥](https://jumpcloud.com/blog/what-are-ssh-keys)来连接你的 Ubuntu 实例，你将需要使用 root 账户的 SSH 密钥数据来连接新账户。

``` Powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```



最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第1步：升级服务器



确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
```
&lt;br/&gt;

# 第2步：保护服务器



安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 配置防火墙


Ubuntu 20.04 服务器可以使用默认的 [UFW 防火墙](https://help.ubuntu.com/community/UFW)来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Grafana、Lighthouse 的入站流量。

**允许 SSH**


允许通过SSH连接到服务器。为了安全，接下来我们要修改默认端口22 (因为这是一个普遍的攻击矢量)。

&gt; 注意：如果你选择不修改默认SSH端口 (不建议)，那就要加一项操作——允许默认SSH端口 `*$ sudo ufw allow 22/tcp*` ，然后跳到允许“Go Ethereum”这一步。

在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。如果显示红色 (被使用了)，就选择另一个端口。

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;yourSSHportnumber&gt;&apos;
```


更新防火墙，允许`&lt;yourSSHportnumber&gt;` 的入站流量。SSH要求TCP协议。

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```


下一步，修改默认SSH端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```



找到默认端口`# Port 22` 或`Port 22`，然后修改你自己的端口号 `Port &lt;yourSSHportnumber&gt;`。删掉 `#`  (如果有的话)。

参考下方的截图，你的文档应该和下图展示的类似 (除了端口号不一样)。保存然后退出。

![p3](https://i.ibb.co/94mtjw9/3.png)







**重启SSH服务**

``` Powershell
$ sudo systemctl restart ssh
```


下次你通过SSH登录时就使用你的端口号 `&lt;yourSSHportnumber&gt;` 。

可选：如果你已经使用端口 22/TCP 的UFW了，那就更新防火墙以拒绝该端口的入站流量。请务必在你使用新SSH端口登录之后在操作这一步。

``` Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**


允许来自Go Ethereum对等节点 (端口30303/TPC 和 30303/UDP) 的入站请求。如果你使用第三方 (如[Infura](https://infura.io/) 托管的 Eth1 节点，则可以跳过这一步。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许 Lighthouse**



允许与 Lighthouse 的对等节点进行点对点连接，以便在信标链节点上 进行操作 (端口 9000/TCP 和 9000/UDP)。




&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由或防火墙以允许来自端口 9000 的入站流量。

``` Powershell
$ sudo ufw allow 9000
```

**允许 Grafana**


允许访问Grafana web 服务器 (端口3000/TCP) 的入站请求。

``` Powershell
$ sudo ufw allow 3000/tcp
```

**允许 Prometheus (可选)**



如果你想直接访问Prometheus数据服务，你也可以打开端口9090/TCP。如果你仅使用Grafana查看数据，则没有必要这样做。我没有打开这个端口。

``` Powershell
$ sudo ufw allow 9090/tcp
```



启动防火墙，检查是否已经正确配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```

Output should look something like this.

显示应该是这样的，我使用的SSH端口号是 `1666/tcp` 。

![p4](https://i.ibb.co/3rG4xNT/4.png)





&lt;br/&gt;

# 第3步：安装并运行 Go Ethereum 节点


安装并配置Eth1.0的节点，信标链将与该节点相连。如果你选择第三方服务 (如[Infura](https://infura.io/)) 的话，可以跳过这一步。

## 安装 Go Ethereum


建议使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
```


更新软件包并安装最新的稳定版本。

``` Powershell
$ sudo apt update
$ sudo apt install geth
```

## 将Go Ethereum作为后台服务来运行


运行该服务需要创建一个账户，此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```


为Eth1区块链创建数据目录，用来存储Eth1节点数据。使用 `-p` 选项来创建完整的路径。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```


设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```


创建一个systemd服务文件来储存该服务配置。我们将使用该配置文件来命令systemd运行`geth` 进程。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```


将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Ethereum go client
After=network.target 
Wants=network.target[Service]
User=goeth 
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --goerli --http --datadir /var/lib/goethereum[Install]
WantedBy=default.target
```


flag `--goerli` 用于定位 Göerli 测试网，而flag `--http` 用来公开与信标链节点连接的一个HTTP端口 (http://localhost:8545)。

参考下方的截图。保存然后退出。

![p5](https://i.ibb.co/s5cGtPQ/5.png)







重新加载 systemd 以显示上述的更改并启动服务。

``` Powershell
$ sudo systemctl daemon-reload
```

启动服务，并检查确保其正常运行。

``` Powershell
$ sudo systemctl start geth
$ sudo systemctl status geth
```

显示应如下方截图。

![p6](https://i.ibb.co/XWW9Jcx/6.png)







如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```

Go Ethereum节点将会开始同步。你可以运行 journal 命令来追踪进程。按“CTRL+c”退出。

``` Powershell
$ sudo journalctl -fu geth.service
```



当你花较长的时间来找到需要同步的对等节点时，你可以添加一些对等节点。访问[此处](https://gist.github.com/rfikki/77081600ddc8432520d3bb3a9f80a493)以获得最新的清单，并操作下列命令行以修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```

修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等点，并以逗号分割。

``` Powershell
ExecStart=geth --goerli --http --datadir /var/lib/goethereum --bootnodes &quot;enode://46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291@94.237.54.114:30313,enode://119f66b04772e8d2e9d352b81a15aa49d565590bfc9a80fe732706919f8ccd00a471cf8433e398c55c4862aadb4aadf3a010201483b87e8358951698aa0b6f07@13.250.50.139:30303&quot;
```

保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -f -u geth.service
```

启动后显示应该类似下方截图：

![p7](https://i.ibb.co/BNJYmFT/7.png)








在运行信标链之前，你需要等待节点同步完成。点击此处访问最新的区块。

比如，上方截图显示了节点正在处理区块 `number=498880` ，再看看下方截图，显示最新的区块是 `3270051`。也就是说，我们还有一段时间才能完成同步。

![p8](https://i.ibb.co/59rzHv2/8.png)







接下来，我们将克隆并构建Lighthouse软件 (信标链节点和验证者)。考虑在此开启一个新的终端，以便继续观察Eth1节点的同步情况。

&lt;br/&gt;

# 第4步：安装依赖



创建Lighthouse需要安装Rust，按照下列提示来安装。

``` Powershell
$ curl --proto &apos;=https&apos; --tlsv1.2 -sSf https://sh.rustup.rs | sh
$ source $HOME/.cargo/env
```


因为Rust修改了路径变量，所以我们要运行 `source $HOME/.cargo/env`以防止你尝试编译时出现 `command not found` 错误，如：

``` Powershell
cargo install --path lighthouse --force --locked
make: cargo: Command not found
make: *** [Makefile:20: install] Error 127
```



还需要一些组件如 git、gcc、g++、make、cmake 等。

``` Powershell
$ sudo apt install -y git gcc g++ make cmake pkg-config libssl-dev
```
&lt;br/&gt;

# 第5步：安装和构建 Lighthouse


现在我们准备好构建 Lighthouse 了。Lighthouse生成一个 `lighthouse` 二进制文件。我们用不同的子命令来执行相同的二进制文件以获取我们需要的功能。如：

`lighthouse beacon_node` 将运行一个信标链节点实例。

`lighthouse validator_client` 将运行一个验证者客户端实例。

访问此处以获得最新的版本信息。注意不要克隆了主分支版本，因为这可能不稳定。

使用标签 (在本例中为 `v1.0.0`)

![p9](https://i.ibb.co/vs7zCYn/9.png)







``` Powershell
$ cd ~
$ git clone -b v1.0.0 https://github.com/sigp/lighthouse.git
$ cd lighthouse
```



使用 Make 来编译 Lighthouse 二进制文件。

``` Powershell
$ make
```



显示应该类似下方截图：

![p10](https://i.ibb.co/YP47hqQ/10.png)








构建时间取决于你的硬件。是时候喝点饮料补充补充水分了。也可以阅读我[其他的文章](https://someresat.medium.com/)。


如果都操作成功了请继续，如果操作失败了请求助 Lighthouse Discord : https://discord.gg/gdq27tnKSM

&lt;br/&gt;

# 第6步：进入Pyrmont


为了能在Eth2.0 Pyrmont测试网上运行验证者节点，我们将需要注册一个或多个验证者账户。

&gt; 注意：如果你已经生成了你的存款数据并提交了你的质押存款，你可以跳过这一步。如果你是在别处生成的，你需要复制你的验证者密钥到这个服务器上。

注册步骤如下：

- 获取Göerli ETH
- 生成验证者密钥。一个密钥代表一个验证者账户。
- 向每个验证者账户各存入32个Göerli ETH
- 等候你的验证者账户被激活

那我们现在就开始吧！

## 获取Goerli ETH


1. 使用已经安装了浏览器插件MetaMask的计算机。
2. 点击MetaMask然后登录
3. 点击顶部的下拉菜单，选择**Göerli 测试网络**
4. 点击账户名，复制你的Göerli 测试网钱包地址
5. 使用你的地址从[authenticated faucet](https://faucet.goerli.mudit.blog/)获取Göerli ETH，或者通过在 [ethstaker Discord](https://discord.gg/7z8wzehjrJ)上的`#request-goerli-eth`频道使用机器人命令：`!goerliEth &lt;yourwalletaddress&gt;`。

&gt; 注意：一个验证者需要一笔32个ETH的存款。你的MetaMask钱包需要有充足的 Göerli ETH存进每个验证者客户端里。例如，如果你想要运行10个验证者，拿你就需要320个Göerli ETH以及一些额外的钱 (比如1个Göerli ETH) 来支付gas费。

## 生成验证者密钥



接下来我们要生成验证者密钥。验证者客户端支持多个验证者密钥。在Pyrmont测试网上基本上一个验证者密钥代表一个“验证者账户”。

前往[这里](https://github.com/ethereum/eth2.0-deposit-cli/releases/)获取存款命令行接口应用的“最新发布”。

![p13](https://i.ibb.co/9wt6NsR/13.png)







在“asset&quot;一栏复制这个链接到Linux版本。我们将使用该链接来下载它，如下所示。修改指令里的URL名为最新版本的下载链接。

``` Powershell
$ cd ~
$ curl -LO https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.1.0/eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```

打开tar存档

``` Powershell
$ tar xvf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
$ cd eth2deposit-cli-ed5a6d3-linux-amd64
```

清除下载的tar存档文档

``` Powershell
$ rm -rf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```

 运行应用来生成验证者密钥

&gt; 注意：如果是在主网，这一步应在一台没有连接过网络的全新的机器上进行，以防泄露你的助记符。

将`&lt;numberofvalidators&gt;`修改为你想要创建的验证者密钥数。例如：`--num_validators 5`

``` Powershell
$ ./deposit new-mnemonic --num_validators &lt;numberofvalidators&gt; --mnemonic_language=english --chain pyrmont
```


它会要求你创建一个钱包密码。我们将使用它来将验证者密钥加载到你客户端的验证者钱包。把它备份到安全的地方。



![p14](https://i.ibb.co/42Mc0cQ/14.png)



它会生成一个种子短语 (助记符)。把它备份到其他地方。

![p15](https://i.ibb.co/vXFQxtP/15.png)







一旦你已经确认了你的助记符，你的验证者密钥就会被创建。

![p16](https://i.ibb.co/9Y4Pt1g/16.png)



新创建的验证者密钥和存款数据文档会在一个特定地方被创建。

![p17](https://i.ibb.co/zZ6Qbr3/17.png)







`deposit_data-[timestamp].json`文档包含了验证者的公钥和存款的相关信息。这个文档会在下一步用来完成存款进程。由于我们是在一个服务器上，而没有一个网络浏览器，因此要使用secure FTP (SFTP) 把文档迁移到一部运行MetaMask的计算机上。


`keystore-m...json`文档包含加密的签名密钥。每个验证者账户都有一个 keystore-m。这些会被用来创建客户端验证者钱包。

## 进行验证者存款


这一步涉及将所需的Göerli ETH 存入Pyrmont测试网的质押合约。这一步会在Eth2.0 Launchpad网站上完成


&gt; 提醒：不要发送真正的ETH到Pyrmont测试网，否则等于弄丢你的ETH。



Pyrmont测试网的Launchpad:https://pyrmont.launchpad.ethereum.org/



一直随着屏幕切换点击这些提醒步骤，并选择你打算运行的验证者数量。往下滚动，点击Continue (继续)。

![p18](https://i.ibb.co/SrmFqwc/18.png)






你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在上一步生成的。浏览或拖拉这个文档，然后点击Continue。



![p19](https://i.ibb.co/wKqz5zt/19.png)







连接你的钱包。选择MetaMask，登录，选择Göerli 测试网络并点击Continue


&gt; 提醒：Lauchpad应该会阻止你使用Göerli测试网以外的网络，但请100%确认你在MetaMask选择的是Göerli测试网络。不要发送真的ETH到Pymont测试网。



![p20](https://i.ibb.co/ZLGDQsh/20.png)






你MetaMask的余额会显示出来。如果你有充足的Göerli ETH余额，这个网站会允许你继续。



![p21](https://i.ibb.co/XFhCJpY/21.png)





然后会出现一个Summary (总结)，显示验证者数和所需的Göerli ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![p21](https://i.ibb.co/XFhCJpY/21.png)








点击&quot;Initiate All Transactions&quot; (启动所有交易）。会有多个MetaMask实例弹出，每个都对Pyrmont测试网提出一个32个Göerli ETH的交易请求。请确认每一笔交易。



![p23](https://i.ibb.co/sFbLGWt/23.png)





当所有的交易都成功完成时，你的质押也完成了！



![p24](https://i.ibb.co/477pzkH/24.png)





##  查看你的验证者存款状态



新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

1. 复制你的Göerli测试网钱包地址
2. 前往：https://pyrmont.beaconcha.in/
3. 搜索你的钱包地址。你的密钥会显示出来。

点击一个密钥，查看**预期激活**信息

![p25](https://i.ibb.co/wLWnK2H/25.png)





完成了！现在创建验证者钱包吧！

&lt;br/&gt;

# 第7步：创建验证者钱包


验证者钱包是通过从前一步导入keystore-m的JSON文档来创建。

创建一个目录以存储验证者钱包数据，并授予当前用户访问该目录的权限。在 `&lt;yourusername&gt;` 修改登入用户名。

``` Powershell
$ sudo mkdir -p /var/lib/lighthouse
$ sudo chown -R &lt;yourusername&gt;:&lt;yourusername&gt; /var/lib/lighthouse
```


然后，我们会使用我们之前创建的Lighthouse验证者二进制文档来创建一个密钥钱包，并使用我们在上一步生成的密钥。把你生成的验证者密钥路径填到 `&lt;PathToValidatorKeys&gt;`，例如：`-- keys-dir=$HOME/eth2.0-deposit-cli/validator_keys`

``` Powershell
$ cd lighthouse
$ lighthouse --network pyrmont account validator import --directory $HOME/&lt;PathToValidatorKeys&gt; --datadir /var/lib/lighthouse
```


flag`--datadir`指定钱包数据输出的位置。此过程会在`--datadir`路径下创建一个`validators` 路径。

接下来，你需要输入你在 [Eth2 Launch Pad](https://pyrmont.launchpad.ethereum.org/)网站上用来创建验证者密钥的密码。你会被要求给每个密钥提供密码，一个个来。确保你每个密钥都提供了密码，因为你需要把验证者客户端当作服务来运行，以及它需要把密码保存在文档里以访问密钥。

输出应该如下：

``` Powershell
Running account manager for pyrmont testnet
validator-dir path: &quot;/var/lib/lighthouse/validators&quot;
validator-dir path: &quot;/var/lib/lighthouse/validators&quot;
WARNING: DO NOT USE THE ORIGINAL KEYSTORES TO VALIDATE WITH ANOTHER CLIENT, OR YOU WILL GET SLASHED.Keystore found at &quot;/home/ethstaker/eth2deposit-cli-ed5a6d3-linux-amd64/validator_keys/keystore-m_12381_3600_1_0_0-1605678395.json&quot;:- Public key: 0xa79583298ecbd5564fce6ccefe2e69969705aff950235dc59ae303fa210b029b565c08303eb18cf02ecc26c429059d7f
 - UUID: 94079858-57db-4fb2-8272-5dbdfb31e65eIf you enter the password it will be stored as plain-text in validator_definitions.yml so that it is not required each time the validator client starts.Enter the keystore password, or press enter to omit it:Password is correct.Successfully imported keystore.
Successfully updated validator_definitions.yml.
```


当你给每个keystore-m JSON 文档都完成上述步骤，你会得到表示你成功的信息。

``` Powershell
Successfully imported 2 validators (0 skipped).WARNING: DO NOT USE THE ORIGINAL KEYSTORES TO VALIDATE WITH ANOTHER CLIENT, OR YOU WILL GET SLASHED.
```



出于安全理由，你需要更新权限以移除`&lt;youruseraccount&gt;`对`var/lib/lighthouse`的访问权限。

``` Powershell
sudo chown root:root /var/lib/lighthouse
```



完成了！现在验证者钱包已经配置好，我们将需要设置信标节点和验证者客户端。



&lt;br/&gt;

# 第8步：配置信标节点


我们将把信标节点作为服务来运行，因此如果系统重启，这个进程将自动重新开始。

## 设置账户和目录



为服务的运行创建一个账户。这种类型的账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false lighthousebeacon
```



为Lighthouse的信标链数据库创建一个数据目录。

``` Powershell
$ sudo mkdir -p /var/lib/lighthouse/beacon
```


设置目录权限。`lighthousebeacon`账户需要修改数据库目录的权限。

``` Powershell
$ sudo chown -R lighthousebeacon:lighthousebeacon /var/lib/lighthouse/beacon
```



然后，把编译好的`lighthouse` 二进制文件 (从第5步) 复制粘贴到目录`/usr/local/bin`。我们会从那里开始运行。

&gt; 注意：每一次你拉取或构建一个新版本`*lighthouse*`二进制文件，你都需要做这一步。请看此教程的最后**附录——Lighthouse更新**。

``` Powershell
$ sudo cp /$HOME/.cargo/bin/lighthouse /usr/local/bin
```

## 创建和配置服务


创建一个systemd服务文档来储存config文档的服务。

``` Powershell
$ sudo nano /etc/systemd/system/lighthousebeacon.service
```

复制粘贴下面这段代码到文档

``` Powershell
[Unit]
Description=Lighthouse Beacon Node
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=lighthousebeacon
Group=lighthousebeacon
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/lighthouse beacon_node --datadir /var/lib/lighthouse --network pyrmont --staking --eth1-endpoint http://127.0.0.1:8545 --metrics[Install]
WantedBy=multi-user.target
```


子命令`beacon_node`告诉`lighthouse` 二进制文档我们想要运行信标节点。



flag`--datadir`是存储信标节点数据库的路径。

flag`--staking`表明我们还将运行一个验证者节点，因此将启动HTTP服务器。验证者和信标节点使用它互相沟通。

flag`--eth1-endpoint`定义Eth1节点的终端。如果你在本地安装，这个值为`http://127.0.0.1:8545`。如果你正在使用一个第三方节点，你使用的是外部终端地址 (例如：Infura等)。

flag`--metrics`在默认端口5054启动数据服务器。输出会被Prometheus通过Grafana捕获。

你的文档需参考下方的截图，保存然后退出。

![p24](https://i.ibb.co/Fg0k6mR/24.png)








重新加载 systemd 以显示上述的更改。

``` Powershell
$ sudo systemctl daemon-reload
```


&gt; 注意：如果你运行一个本地的Eth1节点 (参考第3步)，你需要等到数据完全同步完成之后才能启动信标链服务。在这里查看进程：`*sudo journalctl -fu geth.service*`。


启动服务并确保其正常运行。

``` Powershell
$ sudo systemctl start lighthousebeacon
$ sudo systemctl status lighthousebeacon
```



输出应如下方截图。

![p25](https://i.ibb.co/W5LVGN9/25.png)




如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。


允许服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable lighthousebeacon
```


信标链将开始同步，节点完全同步可能需要几个小时。你可以运行 journal 命令来追踪进程。按Ctrl+C退出。

``` Powershell
$ sudo journalctl -fu lighthousebeacon.service
```



出现的代码应该是这样。

``` Powershell
Nov 19 09:57:15 ETH-STAKER-001 systemd[1]: Started Lighthouse Beacon Node.
Nov 19 09:57:15 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:15.398 WARN Ethereum 2.0 is pre-release. This software is experimental
Nov 19 09:57:15 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:15.398 INFO Lighthouse started                      version: Lighthouse/v0.3.5-1a530e5a
Nov 19 09:57:15 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:15.398 INFO Configured for testnet                  name: pyrmont
Nov 19 09:57:15 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:15.398 INFO Data directory initialised              datadir: /var/lib/lighthouse
Nov 19 09:57:15 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:15.398 WARN Running HTTP server on port 5052
Nov 19 09:57:15 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:15.456 INFO Starting from known genesis state       service: beacon
Nov 19 09:57:16 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:57:16.564 INFO Block production enabled                method: json rpc via http, endpoint: https://goerli.prylabs.net
```



输出将给出完全同步的时间指示。

``` Powershell
Nov 19 09:59:37 ETH-STAKER-001 lighthouse[158842]: Nov 19 09:59:37.001 INFO Syncing                                 est_time: 18 mins, speed: 5.31 slots/sec, distance: 5830 slots (19 hrs 26 mins), peers: 29, service: slot_notifier
```


现在你的信标链正作为服务运行。恭喜！当你的信标节点在同步的时候，我们可以进入下一步。



&lt;br/&gt;

# 配置验证者客户端

## 设置账户和目录


我们将把验证者客户端作为服务来运行，因此如果系统重启，这个进程会自动重新开始。

为验证者服务的运行创建一个账户。这类型的账户不能登录到服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false lighthousevalidator
```


我们为在创建钱包那步生成的验证者创建数据目录：`/var/lib/lighthouse/validators`。现在设置目录权限，使账户`lighthousevalidator`可以修改验证者账户的数据目录。

``` Powershell
$ sudo chown -R lighthousevalidator:lighthousevalidator /var/lib/lighthouse/validators
```

## 创建并配置服务


创建一个systemd服务文档来存储服务配置。

``` Powershell
$ sudo nano /etc/systemd/system/lighthousevalidator.service
```


完整复制粘贴下面这段代码，除了：在`&lt;POAPstring&gt;` 填上你个人喜欢的文字，例如： `--graffiti &quot;abcdefg12345&quot;`

``` Powershell
[Unit]
Description=Lighthouse Validator
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=lighthousevalidator
Group=lighthousevalidator
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/lighthouse validator_client --network pyrmont --datadir /var/lib/lighthouse --graffiti &quot;&lt;yourPOAPstring&gt;&quot;[Install]
WantedBy=multi-user.target
```



我们使用在`/usr/local/bin`里的同一个`lighthouse`二进制文档，但这次我们应用子命令`validator_client`来指示它运行验证者客户端。


flag `--network pyrmont`用来表明我们正在Pyrmont测试网上运行。

The `--datadir` flag is where we are going to save our validator database.

flag`--datadir` 表明我们准备保存我们验证者数据库的位置。


参考下方截图。推出并保存。

![p26](https://i.ibb.co/1Z0gRdj/26.png)








重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


启动服务并检查，确保正确运行。

``` Powershell
$ sudo systemctl start lighthousevalidator
$ sudo systemctl status lighthousevalidator
```


你看到的输出应该如下图所示。

![p27](https://i.ibb.co/F6S7Z0D/27.png)






如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable lighthousevalidator
```



你可以通过运行日志命令来检查进程。按Ctrl+C 退出。

``` Powershell
$ sudo journalctl -fu lighthousevalidator.service
```



验证者客户端会在验证者钱包启动验证者密钥，并确认连接到信标节点。

``` Powershell
Nov 19 10:13:54 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:54.772 INFO Completed validator discovery           new_validators: 0
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.904 INFO Enabled validator                       voting_pubkey: 0xa79583298ecbd5564fce6ccefe2e69969705aff950235dc59ae303fa210b029b565c08303eb18cf02ecc26c429059d&gt;
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.904 INFO Enabled validator                       voting_pubkey: 0x8c8b19c544d79bdaf60d7dcc86ebaeeed4d804d2ecb4c66e5b27e19a664a81457a1c02a873a110e1d332abce5800cf&gt;
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.904 INFO Initialized validators                  enabled: 2, disabled: 0
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.931 INFO Connected to beacon node                version: Lighthouse/v0.3.5-1a530e5a/x86_64-linux
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.934 INFO Genesis has already occurred            seconds_ago: 80028
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.934 INFO Loaded validator keypair store          voting_validators: 2
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.934 INFO Block production service started        service: block
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.934 INFO Attestation production service started  next_update_millis: 11065, service: attestation
Nov 19 10:13:55 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:13:55.935 INFO HTTP API server is disabled
```



当信标链真的开始处理数据，在测试网上需要几个小时到几天来激活验证者账户。

``` Powershell
Nov 19 10:25:49 ETH-STAKER-001 lighthouse[159892]: Nov 19 10:25:49.004 INFO Awaiting activation                     slot: 6728, epoch: 210, validators: 2, service: notifier
```



你可以通过[beaconcha.in](https://pyrmont.beaconcha.in/)查看你的验证者状态。只需要搜索你的验证者公钥或使用你的MetaMask （或其他）钱包地址进行搜索。你的数据可能要过一段时间才会在网站上显示。



这一步结束了。我们现在有一条运行中的信标链和一个验证者节点。恭喜你！你棒棒的！

&lt;br/&gt;

# 第10步：安装Prometheus


Prometheus是一个提供监测功能和警报工具箱的开源系统。它在你的Ubuntu服务器上作为一个服务来运行，而它的职责就是去抓取数据。更多信息请看[这里](https://prometheus.io/docs/introduction/overview/)。

我们会使用Prometheus公开信标链、验证者的运行时数据和特定用例数据。

## 创建用户账户

这些服务是在账户下运行的。这些账户不能登录到服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false prometheus
$ sudo useradd --no-create-home --shell /bin/false node_exporter
```

## 创建目录

程序与数据目录。

``` Powershell
$ sudo mkdir /etc/prometheus
$ sudo mkdir /var/lib/prometheus
```

设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus
$ sudo chown -R prometheus:prometheus /var/lib/prometheus
```

## 下载Prometheus软件


从[Prometheus下载页面](https://prometheus.io/download/)修改最新版本的版本号。Rpi用户一定要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/prometheus/releases/download/v2.22.0/prometheus-2.22.0.linux-amd64.tar.gz
```

打开tar存档。它包含两个二进制文档和一些内容文档。

``` Powershell
$ tar xvf prometheus-2.22.0.linux-amd64.tar.gz
```

复制二进制文档到下列位置。

``` Powershell
$ sudo cp prometheus-2.22.0.linux-amd64/prometheus /usr/local/bin/
$ sudo cp prometheus-2.22.0.linux-amd64/promtool /usr/local/bin/
```

设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /usr/local/bin/prometheus
$ sudo chown -R prometheus:prometheus /usr/local/bin/promtool
```

复制这些内容文档到下列位置。

``` Powershell
$ sudo cp -r prometheus-2.22.0.linux-amd64/consoles /etc/prometheus
$ sudo cp -r prometheus-2.22.0.linux-amd64/console_libraries /etc/prometheus
```

设置目录和文档 (-R) 的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/consoles
$ sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
```

移除下载存档。

``` Powershell
$ rm -rf prometheus-2.22.0.linux-amd64.tar.gz prometheus-2.22.0.linux-amd64
```

 

## 编辑配置文档

Prometheus使用一个配置文档，这样它就知道去哪里获取数据。

打开YAML配置文档来编辑。

``` Powershell
$ sudo nano /etc/prometheus/prometheus.yml
```

复制下面的代码到文档，注意不要进行任何其他编辑，并退出保存文件。

``` Powershell
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093
# Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.
rule_files:
  # - &quot;first_rules.yml&quot;
  # - &quot;second_rules.yml&quot;
# A scrape configuration containing exactly one endpoint to scrape:
# Here it&apos;s Prometheus itself.
scrape_configs:
  - job_name: &apos;validator&apos;
    static_configs:
      - targets: [&apos;localhost:8081&apos;]
  - job_name: &apos;beacon node&apos;
    static_configs:
      - targets: [&apos;localhost:8080&apos;]
  - job_name: &apos;node_exporter&apos;
    static_configs:
      - targets: [&apos;localhost:9100&apos;]
```



scrape_config对不同的分工名称给出定义。我们有三个分工名称：validator (验证者)、beacon node (信标节点) 和node_exporter。前两个的职责很明显，最后一个是用作与服务器用例本身 (内存、CPU、磁盘、网络等) 相关的数据。我们将在下面安装并配置node_exporter。

给config文档设置所有权。prometheus账户将拥有这个所有权。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/prometheus.yml
```

最后，测试服务器是否运行正确。

``` Powershell
$ sudo -u prometheus /usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries
```

输出应该如下。按Ctrl + C退出。

``` Powershell
level=info ts=2020-10-21T07:18:00.434Z caller=main.go:684 msg=&quot;Server is ready to receive web requests.&quot;
```




创建一个systemd服务文档来保存服务配置，它会告诉systemd文档把Prometheus作为prometheus用户来运行，配置文档在目录的保存路径为/etc/prometheus/prometheus.yml，并把数据保存在目录的这里/var/lib/prometheus .

``` Powershell
$ sudo nano /etc/systemd/system/prometheus.service
```

将下面的代码复制粘贴到文档。退出并保存。

``` Powershell
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=prometheus
Group=prometheus
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries[Install]
WantedBy=multi-user.target
```



重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```



然后用下面的命令来启动服务，并查看状态以确保运行正确。

``` Powershell
$ sudo systemctl start prometheus
$ sudo systemctl status prometheus
```

 输出应该如下图：

![p28](https://i.ibb.co/JFtrLYN/28.png)






如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。



最后，允许Prometheus随系统启动而启动。

``` Powershell
$ sudo systemctl enable prometheus
```



&lt;br/&gt;

# 第11步：安装Node Exporter

Prometheus会提供关于信标链和验证者的数据。如果我们想要我们Ubuntu用例的数据，我们需要一个叫[Node_Exporter](https://github.com/prometheus/node_exporter)的extension。如果你在下面指定其他版本，你可以在[这里](https://prometheus.io/download/)找到最新的稳定版本。Rpi用户记得要获取ARM二进制文档。

```  Powershell
$ cd ~

$ curl -LO https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
```

打开下载了的软件。


```  Powershell
$ tar xvf node_exporter-1.0.1.linux-amd64.tar.gz
```

复制二进制文档到目录/usr/local/bin，并设置用户与群组对我们在前面创建的node_exporter用户的所有权。

```  Powershell
$ sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin

$ sudo chown -R node_exporter:node_exporter /usr/local/bin/node_exporter
```

移除下载了的存档。

```  Powershell
$ rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64
```

## 将Node Exporter设置为自动启动的服务

创建一个systemd服务文档来储存服务config文档，它会告诉systemd把Node_Exporter 作为node_exporter用户来运行。

```  Powershell
$ sudo nano /etc/systemd/system/node_exporter.service
```

 复制下列代码到文档。退出并保存。

```  Powershell
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter[Install]
WantedBy=multi-user.target
```

重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```

然后按下面的命令启动服务并检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start node_exporter

$ sudo systemctl status node_exporter
```



输出应该如下图。

![p31](https://i.ibb.co/McQtC0X/31.png)

如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

最后，允许Node Exporter随系统启动而启动。

```  Powershell
$ sudo systemctl enable node_exporter
```

## 测试Prometheus和Node Exporter

所有东西都准备就绪了。通过在防火墙打开一个端口 (请参阅步骤2）和浏览`http://&lt;yourserverip&gt;:9090`你可以有选择性地测试它的功能。在那里你可以运行查询以查看不同的数据。例如，你可以试这个查询来看还有多少可用内存：



``` Powershell
http://&lt;yourserverip&gt;:9090/new/graph?g0.expr=node_memory_MemFree_bytes&amp;g0.tab=1&amp;g0.stacked=0&amp;g0.range_input=1h
```



或者试这个查询来看你所有验证者的余额。



``` Powershell
http://&lt;yourserverip&gt;:9090/graph?g0.range_input=1h&amp;g0.expr=validator_balance&amp;g0.tab=1
```



&lt;br/&gt;

# 第12步：安装Grafana



Prometheus是我们的数据来源，而Grafana则给我们提供报告仪表盘数据的功能。接下来安装Grafana并配置仪表盘。

我们会用一个APT仓库来安装，因为这会使得安装和更新更简单。Grafana可以在官方的Ubuntu软件包仓库中找到，但那个版本可能不是最新的，因此我们将使用Grafana的官方仓库。

用wget下载Grafana GPG的密钥，然后将输出传送到apt-key。这会将密钥添加到你的APT安装的信任密钥列表中。

``` Powershell
$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
```



把Grafana仓库加到APT的来源里。

``` Powershell
$ sudo add-apt-repository &quot;deb https://packages.grafana.com/oss/deb stable main&quot;
```



刷新apt缓存。

``` Powershell
$ sudo apt update
```



确认Grafana是从仓库安装的。

``` Powershell
$ apt-cache policy grafana
```



输出应该如下：

``` Powershell
grafana:
  Installed: (none)
  Candidate: 7.1.1
  Version table:
     7.1.1 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.1.0 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.0.6 500
        500 https://packages.grafana.com/oss/deb stable/main amd6
     ...
```


检查顶部显示的版本是否与[这里](https://grafana.com/grafana/download)显示的最新版本一致。然后继续安装。

``` Powershell
$ sudo apt install grafana
```



启动Grafana服务器和检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start grafana-server
$ sudo systemctl status grafana-server
```



输出应该如下图：

![p32](https://i.ibb.co/NK3C58Z/32.png)







如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。

允许Grafana随系统启动而启动。

``` Powershell
$ sudo systemctl enable grafana-server
```

## 配置Grafana登录


能做到这一步已经很棒了！现在一切都设置好并开始运行了，你可以在浏览器里前往`http://&lt;yourserverip&gt;:3000/`，会出现Grafana的登录窗口。



在`admin`输入用户名和密码。系统会让你修改密码，请务必修改。

##  配置Grafana的数据来源


让我们配置数据来源吧。把你的鼠标移至左边菜单栏的齿轮图标处，会弹出一个菜单——选择`Data Sources`。

![p33](https://i.ibb.co/4dMmF8R/33.png)





点击 `Add Data Source`，然后选择`Prometheus`。在URL输入`http://localhost:9090`，然后点击 `Save and Test`。


![p34](https://i.ibb.co/sWsHzQz/34.png)

![p35](https://i.ibb.co/mzL51L5/35.png)





## 导入Grafana仪表盘

移动你的鼠标到左边菜单栏的`+`图标，会有一个菜单弹出，选择 `Import`。

从[这里](https://raw.githubusercontent.com/sigp/lighthouse-metrics/master/dashboards/Summary.json)复制粘贴JSON (或者[这里](https://raw.githubusercontent.com/sigp/lighthouse-metrics/master/dashboards/Summary.json)，如果你有多于10个验证者)，点击`Load`，然后`Import`。

你应该可以看到仪表盘。一开始的时候，你可能不会有很多数据，但在测试网启动和验证者激活一段时间后，你会看到一些数据和警报。

![p34](https://i.ibb.co/rFgRWgv/34.png)





&lt;br/&gt;

# 写在最后


到这里就完成了！希望这个教程能帮到你。

- 在以后的更新里会有内容更全面的仪表盘 (额外的硬件数据和eth1节点的数据)

- 如果你有任何反馈，你可以在[Twitter](https://www.twitter.com/SomerEsat) 或 [Reddit](https://www.reddit.com/user/SomerEsat)上联系窝

- 如果你喜欢这个教程并希望别人也能学习这个教程，请用[friends link](https://medium.com/@SomerEsat/4d2a86cc637b?source=friends_link&amp;sk=4cb64bfa20247d2b5c7a50ce0a92d33b)把教程分享出去！

- 支持一下：somer.eth

&lt;br/&gt;

#  附录——Lighthouse更新


如果由于Git仓库里的改动你需要更新代码，可以按照这些步骤来获取最新的文档和创建自己的二进制文档:

 查看Rust的更新

``` Powershell
$ rustup update
```


拉取最新的Lighthouse代码然后构建。把你在[这里](https://github.com/sigp/lighthouse/releases)想要的版本填在`&lt;release&gt;`，例如：`$ git fetch --tags &amp;&amp; git checkout v1.0.0`。

接下来，我们会停止信标链和验证者服务，并复制粘贴二进制文档到目录`/usr/local/bin`，然后再次启动服务。

``` Powershell
$ cd ~
$ cd lighthouse
$ git fetch --tags &amp;&amp; git checkout &lt;release&gt;
$ make$ sudo systemctl stop lighthousevalidator
$ sudo systemctl stop lighthousebeacon
$ sudo cp /$HOME/.cargo/bin/lighthouse /usr/local/bin$ sudo systemctl start lighthousebeacon
$ sudo systemctl status lighthousebeacon # &lt;-- Check errors.
$ sudo journalctl -fu lighthousebeacon # &lt;-- Check errors.$ sudo systemctl start lighthousevalidator
$ sudo systemctl status lighthousevalidator # &lt;-- Check errors.
$ sudo journalctl -fu lighthousevalidator # &lt;-- Check errors.
```



完成了！服务已经更新好了。

&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/12/21]]></title><description><![CDATA[Optimism测试网推出最后阶段，第一个全球易于检索的区块链数据索引The Graph Network上线]]></description><link>https://www.ethereum.cn/eth-weekly-2020-12-21/</link><guid isPermaLink="false">https://www.ethereum.cn/eth-weekly-2020-12-21/</guid><pubDate>Mon, 21 Dec 2020 00:00:00 GMT</pubDate><content:encoded>![cover](https://i.ibb.co/mFm4Rv6/image.png)

# Eth2

**2.0质押数额超10亿美元**

据launchpad.ethereum.org以及beaconcha.in浏览器显示，截至本文，以太坊2.0存款合约上已收到1,711,201 ETH，活跃验证者有38,683名，信标链上有1,237,728 个有效ETH，排队验证者有13,893名，等候时间需15天多。


![staking](https://i.ibb.co/xGCMksY/staking.png)




 

 

**验证者节点23241罚没回顾**

EthStaker社区的Superphiz于19日发推表示其观察到一特殊罚没案例，被罚没验证者节点23241于11月26日开始质押，而此前，该持币者将其32 ETH保存在冷钱包中长达650多天，直到最早创世时间确定了才将资产转出并存入存款合约。Superphiz与该验证者进一步沟通之后获知，他当时正在迁移系统，并且在没有完全关掉原来系统的情况下就启动了新的系统。大约10-20秒，他就受到了罚没。此前，小编在《以太七日谈 • 2020/12/7》中提到，千万不要同时在两台不同的机器上运行你的验证者节点，避免因签名数据冲突而遭受罚没惩罚。

 

**各种质押方式风险排名**

Superphiz从维持信标链良好运行的角度触发，对各种staking方式的风险进行了排名，具体如下：


!{ranking}(https://i.ibb.co/j69xX5B/staking-ranking.png)






 

对于信标链的良好运行来说，superphiz首推在客户端个人运行客户端，而在四个客户端里他更推荐最少人使用的 (目前是nimbus)，即使它们有漏洞，社区也会给与支持，以实现客户端多样化。而对于持有32个ETH想要参与质押而不想做验证者的人，他推荐Blox Staking和staked.us这种非托管型的服务，原因在于这两个服务不持有质押者的助记符和私钥。而对于持有少于32个ETH也想参与质押的人，最好考虑非托管的质押池，但这样的服务目前还没出现。Rocket Pool可能在2021年第一季度推出这种服务，但还需要谨慎观察。因此，对于持有32个ETH的人，superphiz的建议是再等等，而不要考虑托管型或中心化交易所的服务。

具体解释请看视频：https://www.youtube.com/watch?v=fqf79He4T3w&amp;feature=youtu.be

 

 

**Gemini交易所上线以太坊2.0质押服务**

加密资产交易以及托管平台Gimini的联合创始人Tyler Winklevoss于17日发推称，其交易所即将上线以太坊2.0 质押服务。


![Gimini](https://i.ibb.co/p2yn8Sy/gemini.png)






 &lt;br/&gt;

# 开发进度

**Solidity 0.80出炉**

Solidity发布了Solidity 0.80，是Solidity编译器和语言的最新版本。最新版本的四个主要变更如下：

1. 大多数用户有影响的是，算术运算现在是自动检查的，这意味着上溢和下溢都会导致复原。这个功能可以通过使用未检查的区块在本地禁用。

2. 第二个明显变更是ABI编码器是默认激活的。

3. 内部错误 (例如零除、断言失败等) 不在使用无效的操作码，而是使用带有特殊报错信息的revert，以免在这些情况下浪费gas。

4. 显式转换会受限制，以免产生歧义。以前进行的所有转换仍然可用，但可能需要执行两次转换才能实现。

详情请看：https://blog.soliditylang.org/2020/12/16/solidity-v0.8.0-release-announcement/

 

**The Graph Network主网上线**

The Graph Network于12月17日主网上线，它是第一个全球易于检索的区块链数据索引。它旨在让开发者在构建去中心化应用时可以轻易搜索、发布与使用公共数据，而不需要依赖中心化服务器和专有的基础设施。The Graph Network通过公共和公开的API可以让更多的人接触到去中心化应用，这些API被称为subgraph。它的社区主要由Indexer、Curator、 Delegator和subgraph开发者组成。

![graph](https://i.ibb.co/LSSNm0P/the-graph-network.jpg)







 

上图展示了各个角色在机制里的分工安排。

如想进一步了解，可访问官网：https://thegraph.com/blog/the-graph-network-launches-mainnet

以及Coopahtroopa的twitter：https://twitter.com/Cooopahtroopa/status/1340722510241779713。

 
 &lt;br/&gt;

# EIP-1559


根据Tim Beiko的第5期EIP-1559更新，在客户端方面，Vulcanize团队对geth的EIP-1559实现的代码库发起拉取请求，但这还不是最终的；在研发方面，Ansgar在研究了geth的代码库后表示，即使在交易池管理上无法拿出很好的优化方案，1559的最坏情况也是可控的；Nethermind即将发布一份关于矿工在BASE FEE上合谋的分析报告。

 
 &lt;br/&gt;

# Layer2

**Optimistic Ethereum测试网最后阶段已推出**

Layer2扩容解决方案Optimism于17日推出其测试网的最后一个阶段：欺诈证明安全演练。Optimism协议依赖Optimistic Rollup的欺诈证明技术，即任何人当可以参与验证并提交欺诈证明。Optimism官方出了参与测试网的教程，具体步骤包括：安装依赖、下载验证程序、配置节点、获取测试币ETH、运行验证程序、提供欺诈证明。教程：https://medium.com/ethereum-optimism/fraud-proof-security-drill-will-you-be-my-1-of-n-654e78c5ee1c 第一个提交欺诈证明的参与者将获得3.2 ETH的奖励！

 

  &lt;br/&gt;

# DeFi

**Nexus Mutual创始人钱包被盗**

12月14日，DeFi保险协议Nexus Mutual的创始人Hugh Karp的个人钱包遭遇黑客攻击，并被盗走37万NXM。黑客是Nexus的一名用户，并且是一次针对性的攻击。当时Hugh正使用硬件钱包，黑客远程访问他的电脑并修改了Metamask钱包插件，诱导Hugh对一笔错误交易进行签名，导致其将资产转移到了黑客的地址中。次日，黑客先后在1inch、Matcha平台上套现出近35%的资金。19日，Hugh发推称，一些社区成员在Gitcoin Grant上为其捐赠以补偿其损失，但他会将这笔资金作为赏金，以寻找更加安全的智能合约交互方案。

 

**Coinbase Pro上线Aave、SNX及BNT**

Coinbase于15日宣布即日起便开启Aave、SNX、BNT在Coinbase上的存款服务，并且北京时间12月16日凌晨1点之后开启交易。

 ![coinbase](https://i.ibb.co/CMrJzV2/coinbase.png)

  &lt;br/&gt;

# 生态

opengrant.com 于12月15日上线，它是一个旨在为以太坊公共品的创造者提供长期激励的分账合同，它使得社区可以成规模地扩大对开发者的激励计划。上线当天，Open Grant负责人James Fickel开设了名为Eth2 Development (Dec 2020) 的open grand，是一笔有3,600个ETH支付流，用以激励eth2客户端团队和研究院，分配依据主要是受激励实体的影响和工作质量减去资金情况。以下为Eth2 Development (Dec 2020)的分配情况：

![opengrant](https://i.ibb.co/0tD89Jd/eth2.png)

详情：https://jamesfickel.ghost.io/towards-long-term-incentives-on-ethereum/ 

  &lt;br/&gt;
  &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太坊2.0测试网质押(Ubuntu/Pyrmont/Prysm)]]></title><description><![CDATA[如何参与Pyrmont测试网质押，Prysm篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-prysm</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-prysm</guid><pubDate>Fri, 18 Dec 2020 00:00:00 GMT</pubDate><content:encoded>
来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-pyrmont-prysm-a10b5129c7e3)

![p1](https://i.ibb.co/sPZNnd4/1.png)





**提醒**：不要按照这个指南与Eth2主网连接。主网指南在[这里](https://github.com/SomerEsat/ethereum-staking-guide)。


本文详解如何通过多客户端测试网Pyrmont在以太坊2.0主网质押。主要基于以下几个技术：


- Ubuntu v20.04 (LTS) x64 服务器
- Go Ethereum 节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- Prysmatic Labs ETH 2.0 客户端 —— Prysm ([代码分支](https://github.com/prysmaticlabs/prysm))
- 正式多客户端测试网公网，[Pyrmont](https://github.com/protolambda/pyrmont)
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/)
- [Prometheus](https://prometheus.io/) 参数
- [Grafana](https://grafana.com/) 仪表盘



此篇指南包括以下指令：

- 配置一个新运行的Ubuntu服务器用例
- 配置并运行一个以太坊1.0节点作为服务
- 生成一个Prysm客户端并导入Pyrmont验证者账户密钥
- 给以太坊2.0与阶段0编译并配置Prysmatic Labs信标链和验证者客户端软件，并把它们作为服务来运行
- 安装和配置Prometheus参数，设置一个Grafana仪表盘

&lt;br/&gt;

# 提醒



此指南时用于Pyrmont测试网的。切记无论如何不要向测试网发送主网的ETH。你发送了就等于丢失了。

**不要**按照这份指南连接Eth2主网。主网专用指南在[这里](https://github.com/SomerEsat/ethereum-staking-guide)。

&lt;br/&gt;

# 致谢与免责声明


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢[Prysmatic](https://discord.gg/VaQcHq76yJ)和[EthStaker](https://discord.gg/7z8wzehjrJ)团队的人在discord上提供的帮助与审校。

特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

此教程仅作教育用途。我不是本文涉及的任何技术的专家。不保证此教程内容的准确性，因遵循此教程而造成的损失，本人概不负责。

欢迎给我反馈！

&lt;br/&gt;

# 支持


这个过程可能有些棘手。如果你需要帮助，以下是两个你可以寻求帮助的好资源 （除了我) :


- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

  - Reddit：https://www.reddit.com/r/ethstaker/

  - Discord：https://discord.gg/7z8wzehjrJ

- Prysm 客户端团队，[Discord](https://discord.gg/GVM5TJwzkU)，他们是客户端软件的工程团队，是使用Prysm的专家。

  

&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、Linux、MetaMask (Portis或Fortmatic) 有一定的背景知识。


此教程还需要在开始前安装并运行：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机、你的网络、或云端 (AWS、Digital Ocean、Microsoft Azure等)安装和运行的Ubuntu服务器。推荐使用本地计算机，以提高网络的去中心化程度——如果云端供应商掉线了，那么托管在这个供应商的节点都会离线。
- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 树莓Pi用户注意


我没有在树莓Pi上测试过这份教程。如果你想尝试的话，只需要把下面列出的软件换成ARM版本。不保证可行。

&lt;br/&gt;

# 要求

- Ubuntu服务器用例。我用过v20.04 (LTS) amd64服务器 VM
- 浏览器插件加密钱包MetaMask，安装并配置好
- 运行Prysm软件的[推荐硬件要求](https://docs.prylabs.network/docs/install/install-with-bazel)：
  - 处理器：Intel Core i7–4770或AMD FX-8310或更好的
  - 内存：16GB RAM
  - 存储空间：可用空间有100GB的固态硬盘 (只用于Prysm客户端)

注意：硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、16GB内存的RAM、一个内存至少1TB的SSD (1TB更佳)、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。

&lt;br/&gt;

# 概览


本教程篇幅较长，下面这个图表简要说明了质押的步骤，标黄的即是本文会覆盖到的部分：



![p2](https://i.ibb.co/gSFPstC/2.png)





整个流程可以概念化表述为：

- 设置一个Eth1 节点并同步Eth1 Göerli 测试网的数据；
- 配置信标链节点并同步Eth1 节点的数据；
- 生成验证者密钥并激活；
- 配置验证者客户端；
- 验证者在信标链上借助签名密钥对提议区块、证明区块，当验证者作恶或者怠工时会受到罚没惩罚。

那我们现在就开始吧！

&lt;br/&gt;

# 第0步：连接至服务器


使用一个SSH端口，连接至你的Ubuntu服务器。在默认情况下，Ubuntu上的root账户通常都是禁用的，然而有些云提供商可以启动root账户。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的[风险](https://askubuntu.com/questions/16178/why-is-it-bad-to-log-in-as-root)。



&gt; 注意：如果你不是用`root`登录的便可以直接跳到第1步。

``` Powershell
# adduser &lt;yourusername&gt;
```


设置一个密码并填写其他信息。

通过把新的用户加入`sudo`群组中，来授予其管理权限。

``` Powershell
# usermod -aG sudo &lt;yourusername&gt;
```

When you log in as `&lt;yourusername&gt;` you can type sudo before commands to perform actions with superuser privileges.

Optional: If you used [SSH keys](https://jumpcloud.com/blog/what-are-ssh-keys) to connect to your Ubuntu instance via the `root` user you will need to associate the new user with the root user’s SSH key data.

当你用你的用户名 `&lt;yourusername&gt;` 登录时，可以通过在命令行前输入sudo，来以超级用户的权限执行操作。

``` Powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```



最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第1步：升级服务器


确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
```

&lt;br/&gt;

# 第2步：保护服务器


安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 配置防火墙


Ubuntu 20.04 服务器可以使用默认的 [UFW 防火墙](https://help.ubuntu.com/community/UFW)来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Grafana、Prysm 的入站流量。

**允许 SSH**


允许通过SSH连接到服务器。为了安全，接下来我们要修改默认端口22 (因为这是一个普遍的攻击矢量)。


&gt; 注意：如果你选择不修改默认SSH端口 (不建议)，那就要加一项操作——允许默认SSH端口 `*$ sudo ufw allow 22/tcp*` ，然后跳到允许“Go Ethereum”这一步。



在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。如果显示红色 (被使用了)，就选择另一个端口。

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;yourSSHportnumber&gt;&apos;
```



更新防火墙，允许`&lt;yourSSHportnumber&gt;` 的入站流量。SSH要求TCP协议。

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```



下一步，修改默认SSH端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```



找到默认端口`# Port 22` 或`Port 22`，然后修改你自己的端口号 `Port &lt;yourSSHportnumber&gt;`。删掉 `#`  (如果有的话)。

参考下方的截图，你的文档应该和下图展示的类似 (除了端口号不一样)。保存然后退出。

![p3](https://i.ibb.co/94mtjw9/3.png)





**重启SSH服务**

``` Powershell
$ sudo systemctl restart ssh
```



下次你通过SSH登录时就使用你的端口号 `&lt;yourSSHportnumber&gt;` 。



可选：如果你已经使用端口 22/TCP 的UFW了，那就更新防火墙以拒绝该端口的入站流量。请务必在你使用新SSH端口登录之后在操作这一步。

``` Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**


允许来自Go Ethereum对等节点 (端口30303/TPC 和 30303/UDP) 的入站请求。如果你使用第三方 (如[Infura](https://infura.io/) 托管的 Eth1 节点，则可以跳过这一步。


&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许Prysm**




**允许与 Prysm 的对等节点进行点对点连接，以便在信标链节点上 (Prysmatic Labs 的默认端口为 [13000/TCP 和 12000/UDP](https://docs.prylabs.network/docs/prysm-usage/p2p-host-ip/#incoming-p2p-connection-prerequisites) 进行操作。**

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由或防火墙以允许来自端口 13000 和12000 的入站流量。

``` Powershell
$ sudo ufw allow 13000/tcp
$ sudo ufw allow 12000/udp
```

**允许 Grafana**




允许访问Grafana web 服务器 (端口3000/TCP) 的入站请求。

``` Powershell
$ sudo ufw allow 3000/tcp
```

**允许 Prometheus (可选)**

如果你想直接访问Prometheus数据服务，你也可以打开端口9090/TCP。如果你仅使用Grafana查看数据，则没有必要这样做。我没有打开这个端口。

``` Powershell
$ sudo ufw allow 9090/tcp
```


启动防火墙，检查是否已经正确配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```



显示应该是这样的，我使用的SSH端口号是 `1666/tcp` 。

![p4](https://i.ibb.co/yQv0WCx/4.png)



&lt;br/&gt;

# 第3步：安装并运行 Go Ethereum 节点



安装并配置Eth1.0的节点，信标链将与该节点相连。如果你选择第三方服务 (如Infura) 的话，可以跳过这一步。

## 安装 Go Ethereum



建议使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
```



更新软件包并安装最新的稳定版本。

``` Powershell
$ sudo apt update
$ sudo apt install geth
```

## 将Go Ethereum作为后台服务来运行


运行该服务需要创建一个账户，此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```



为Eth1区块链创建数据目录，用来存储Eth1节点数据。使用 `-p` 选项来创建完整的路径。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```



设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```



创建一个systemd服务文件来储存该服务配置。我们将使用该配置文件来命令systemd运行`geth` 进程。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```



将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Ethereum go client
After=network.target 
Wants=network.target[Service]
User=goeth 
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --goerli --http --datadir /var/lib/goethereum[Install]
WantedBy=default.target
```



flag `--goerli` 用于定位 Göerli 测试网，而flag `--http` 用来公开与信标链节点连接的一个HTTP端口 (http://localhost:8545)。



参考下方的截图。保存然后退出。



![p5](https://i.ibb.co/s5cGtPQ/5.png)







重新加载 systemd 以显示上述的更改并启动服务。

``` Powershell
$ sudo systemctl daemon-reload
```


启动服务，并检查确保其正常运行。

``` Powershell
$ sudo systemctl start geth
$ sudo systemctl status geth
```



显示应如下方截图。



![p6](https://i.ibb.co/XWW9Jcx/6.png)




如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。



允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```


Go Ethereum节点将会开始同步。你可以运行 journal 命令来追踪进程。按“CTRL+c”退出。

``` Powershell
$ sudo journalctl -fu geth.service
```



当你花较长的时间来找到需要同步的对等节点时，你可以添加一些对等节点。访问此处以获得最新的清单，并操作下列命令行以修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```



修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等点，并以逗号分割。

``` Powershell
ExecStart=geth --goerli --http --datadir /var/lib/goethereum --bootnodes &quot;enode://46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291@94.237.54.114:30313,enode://119f66b04772e8d2e9d352b81a15aa49d565590bfc9a80fe732706919f8ccd00a471cf8433e398c55c4862aadb4aadf3a010201483b87e8358951698aa0b6f07@13.250.50.139:30303&quot;
```



保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -fu geth.service
```



启动后显示应该类似下方截图：



![p7](https://i.ibb.co/BNJYmFT/7.png)




在运行信标链之前，你需要等待节点同步完成。点击此处访问最新的区块。


比如，上方截图显示了节点正在处理区块 `number=498880` ，再看看下方截图，显示最新的区块是 `3270051`。也就是说，我们还有一段时间才能完成同步。

![p8](https://i.ibb.co/LYQWQV9/8.png)






接下来，我们将克隆并构建Prysm软件 (信标链节点和验证者)。考虑在此开启一个新的终端，以便继续观察Eth1节点的同步情况。

&lt;br/&gt;

# 第4步：安装Bazel





Bazel是一个开源的构建工具。我们将使用它来编译Prysm软件。

[Curl](https://curl.haxx.se/)是必须要有的，以便我们下载Prysm代码。

``` Powershell
$ sudo apt install curl gnupg
```


下载并添加Bazel gpg分流URI作为软件包源。

``` Powershell
$ curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor &gt; bazel.gpg
$ sudo mv bazel.gpg /etc/apt/trusted.gpg.d/
$ echo &quot;deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8&quot; | sudo tee /etc/apt/sources.list.d/bazel.list
```



根据Bazel的[文档](https://docs.bazel.build/versions/3.4.0/install-ubuntu.html)，组件名称 “jdk1.8” 为之前版本所遗留下来的，与受支持或被包含的JDK版本不再相关。


安装Bazel，首先安装最新的版本，然后安装3.2.0 (Prysm目前要求3.2.0版本)。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt install bazel
$ sudo apt update &amp;&amp; sudo apt full-upgrade
$ sudo apt update &amp;&amp; sudo apt install bazel-3.2.0
```



先把需要的文件安装了，以允许我们使用flag `--config=release` 进行编译。

``` Powershell
$ sudo apt install -y libtinfo5 # Terminal handling
$ sudo apt-get install -y libssl-dev # OpenSSL 
$ sudo apt-get install -y libgmp-dev # GMP source to build BLS
```

&lt;br/&gt;

# 第5步：安装和构建Prysm



Prysm客户端由两份二进制文件组成：信标链节点和验证者客户端。本教程将讲解二者的构建。



首先，访问https://github.com/prysmaticlabs/prysm/releases并找到最新发布的Prysm版本。通常在页面的最顶部，比如：



![p9](https://i.ibb.co/MPpyyMQ/9.png)



&gt; 注意：我们要提出最新的版本，而不是`*master*`，因为该版本可能不稳定。



我们将上述的标签`v1.0.0-beta.3` 输入到下列的命令行中，以克隆特定的版本。flag `--single-branch` 阻止获取所有的分支。

``` Powershell
$ git clone -b v1.0.0-beta.3 --single-branch https://github.com/prysmaticlabs/prysm.git
$ cd prysm
```



使用Bazel来编译信标链和验证者二进制文件。

``` Powershell
$ bazel build //beacon-chain:beacon-chain --config=release
$ bazel build //validator:validator --config=release
```


首次构建信标链需要花点时间，是时候喝点饮料补充补充水分了。也可以阅读我[其他的文章](https://someresat.medium.com/)。


If both builds succeed then continue. If not get help on the [Prysm Discord](https://discord.gg/VaQcHq76yJ).

构建验证者的速度更快，因为其容量更小，而且在构建信标链时，大多数依赖已经被下载以及/或者构建。

如果两者的构建都成功了，就继续。不过不成功，可以去 [Prysm Discord](https://discord.gg/VaQcHq76yJ)请求帮助。


&gt; 注意：如果你需要使用Prysmatic Labs的最新代码来更新二进制文件，请根据文末的指南“附录——更新Prysm”进行操作。

&lt;br/&gt;

# 第6步：配置信标链



我们将把节点作为服务那样来配置并运行，因此如果系统重启，这个过程将自动重新开始。

## 设置账户和目录


为信标节点的运行创建一个账户。这种账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false prysm-beaconchain
```



为信标节点的数据库创建数据目录，以便用来存储信标链数据。

``` Powershell
$ sudo mkdir -p /var/lib/prysm/beaconchain
```



设置权限。账户 `prysm-beaconchain` 需要权限来修改数据库目录。

``` Powershell
$ sudo chown -R prysm-beaconchain:prysm-beaconchain /var/lib/prysm/beaconchain
```

## 复制信标链二进制



接下来，复制粘贴最新的已编制的信标链二进制文件至目录 `/usr/local/bin` 中。我们将从该目录中运行这份文件。


&gt; 注意：每一次提取/构建 `*beacon-chain*`  二进制新版本时都需要做这一步。参考文末的“附录——更新Prysm”。

``` Powershell
$ cd ~
$ sudo cp prysm/bazel-bin/beacon-chain/beacon-chain_/beacon-chain /usr/local/bin
```

## 创建和配置服务

创建一个systemd服务文档来存储服务配置。

``` Powershell
$ sudo nano /etc/systemd/system/prysm-beaconchain.service
```



复制粘贴下列代码至文档中。

``` Powershell
[Unit]
Description=Prysm Beaconchain
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=prysm-beaconchain
Group=prysm-beaconchain
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/beacon-chain --pyrmont --datadir=/var/lib/prysm/beaconchain --http-web3provider=http://127.0.0.1:8545 --accept-terms-of-use[Install]
WantedBy=multi-user.target
```


 `--pyrmont` 用以标明我们正在测试网上运行。



 `--http-web3provider` 确定了Eth1节点的端口。如果你在本地安装了一个，值是`http://127.0.0.1:8545`。如果你正使用第三方服务，请使用外部端口地址 (如，Infura或者Prysmatic的Eth1节点：`https://goerli.prylabs.net` )


`--accept-terms-of-use`使我们能够将二进制文件作为服务运行。使用该 flag 表明你已接受Prysm的[使用条款](https://github.com/prysmaticlabs/prysm/blob/master/TERMS_OF_SERVICE.md)。


你的文档需参考下方的截图，保存然后退出。

![p10](https://i.ibb.co/64bGVR1/10.png)





重新加载 systemd 以显示上述的更改。

``` Powershell
$ sudo systemctl daemon-reload
```


&gt; 注意：如果你运行一个本地的Eth1节点 (参考第3步)，你需要等到数据完全同步完成之后才能启动信标链服务。在这里查看进程：`*sudo journalctl -fu geth.service*`。



启动服务并确保其正常运行。

``` Powershell
$ sudo systemctl start prysm-beaconchain
$ sudo systemctl status prysm-beaconchain
```



应如下方截图。



![p11](https://i.ibb.co/QrzZG2G/11.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。



允许服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable prysm-beaconchain
```



信标链将开始同步，节点完全同步可能需要几个小时。你可以运行 journal 命令来追踪进程。按Ctrl+C退出。

``` Powershell
$ sudo journalctl -fu prysm-beaconchain.service
```



终端输出会给出状态信息，表明它正在处理来自Eth1链的存款。



![p12](https://i.ibb.co/YbNzv96/12.png)







现在你的信标链正作为服务运行。恭喜！

&lt;br/&gt;

# 第7步：进入Pyrmont


为了能在Eth2.0 Pyrmont测试网上运行验证者节点，我们将需要注册一个或多个验证者账户。

&gt; 注意：如果你已经生成了你的存款数据并提交了你的质押存款，你可以跳过这一步。如果你是在别处生成的，你需要复制你的验证者密钥到这个服务器上。

注册步骤如下：

- 获取Göerli ETH
- 生成验证者密钥。一个密钥代表一个验证者账户。
- 向每个验证者账户各存入32个Göerli ETH
- 等候你的验证者账户被激活

那我们现在就开始吧！

## 获取Goerli ETH


1. 使用已经安装了浏览器插件MetaMask的计算机。
2. 点击MetaMask然后登录
3. 点击顶部的下拉菜单，选择**Göerli 测试网络**
4. 点击账户名，复制你的Göerli 测试网钱包地址
5. 使用你的地址从[authenticated faucet](https://faucet.goerli.mudit.blog/)获取Göerli ETH，或者通过在 [ethstaker Discord](https://discord.gg/7z8wzehjrJ)上的`#request-goerli-eth`频道使用机器人命令：`!goerliEth &lt;yourwalletaddress&gt;`。

&gt;注意：一个验证者需要一笔32个ETH的存款。你的MetaMask钱包需要有充足的 Göerli ETH存进每个验证者客户端里。例如，如果你想要运行10个验证者，拿你就需要320个Göerli ETH以及一些额外的钱 (比如1个Göerli ETH) 来支付gas费。

## 生成验证者密钥



接下来我们要生成验证者密钥。验证者客户端支持多个验证者密钥。在Pyrmont测试网上基本上一个验证者密钥代表一个“验证者账户”。


前往[这里](https://github.com/ethereum/eth2.0-deposit-cli/releases/)获取存款命令行接口应用的“最新发布”。



![p13](https://i.ibb.co/9wt6NsR/13.png)



在“asset&quot;一栏复制这个链接到Linux版本。我们将使用该链接来下载它，如下所示。修改指令里的URL名为最新版本的下载链接。

``` Powershell
$ cd ~
$ curl -LO https://github.com/ethereum/eth2.0-deposit-cli/releases/download/v1.1.0/eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```

 打开tar存档

``` Powershell
$ tar xvf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
$ cd eth2deposit-cli-ed5a6d3-linux-amd64
```

清除下载的tar存档文档

``` Powershell
$ rm -rf eth2deposit-cli-ed5a6d3-linux-amd64.tar.gz
```

运行应用来生成验证者密钥


&gt; 注意：如果是在主网，这一步应在一台没有连接过网络的全新的机器上进行，以防泄露你的助记符。



将`&lt;numberofvalidators&gt;`修改为你想要创建的验证者密钥数。例如：`--num_validators 5`

``` Powershell
$ ./deposit new-mnemonic --num_validators &lt;numberofvalidators&gt; --mnemonic_language=english --chain pyrmont
```



它会要求你创建一个钱包密码。我们将使用它来将验证者密钥加载到你客户端的验证者钱包。把它备份到安全的地方。





![p14](https://i.ibb.co/42Mc0cQ/14.png)




它会生成一个种子短语 (助记符)。把它备份到其他地方。

![p15](https://i.ibb.co/vXFQxtP/15.png)





一旦你已经确认了你的助记符，你的验证者密钥就会被创建。

![p16](https://i.ibb.co/9Y4Pt1g/16.png)





新创建的验证者密钥和存款数据文档会在一个特定地方被创建。

![p17](https://i.ibb.co/zZ6Qbr3/17.png)






`deposit_data-[timestamp].json`文档包含了验证者的公钥和存款的相关信息。这个文档会在下一步用来完成存款进程。由于我们是在一个服务器上，而没有一个网络浏览器，因此要使用 [secure FTP (SFTP)](https://www.maketecheasier.com/use-sftp-transfer-files-linux-servers/) 把文档迁移到一部运行MetaMask的计算机上。


`keystore-m...json`文档包含加密的签名密钥。每个验证者账户都有一个 keystore-m。这些会被用来创建客户端验证者钱包。

## 进行验证者存款



这一步涉及将所需的Göerli ETH 存入Pyrmont测试网的质押合约。这一步会在Eth2.0 Launchpad网站上完成


&gt; 提醒：不要发送真正的ETH到Pyrmont测试网，否则等于弄丢你的ETH。


Pyrmont测试网的Launchpad:https://pyrmont.launchpad.ethereum.org/



一直随着屏幕切换点击这些提醒步骤，并选择你打算运行的验证者数量。往下滚动，点击Continue (继续)。

![p18](https://i.ibb.co/SrmFqwc/18.png)







你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在上一步生成的。浏览或拖拉这个文档，然后点击Continue。



![p19](https://i.ibb.co/wKqz5zt/19.png)





连接你的钱包。选择MetaMask，登录，选择Göerli 测试网络并点击Continue


&gt; 提醒：Lauchpad应该会阻止你使用Göerli测试网以外的网络，但请100%确认你在MetaMask选择的是Göerli测试网络。不要发送真的ETH到Pymont测试网。



![p20](https://i.ibb.co/ZLGDQsh/20.png)






你MetaMask的余额会显示出来。如果你有充足的Göerli ETH余额，这个网站会允许你继续。



![p21](https://i.ibb.co/XFhCJpY/21.png)







然后会出现一个Summary (总结)，显示验证者数和所需的Göerli ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![p22](https://i.ibb.co/5c7BZwd/22.png)








点击&quot;Initiate All Transactions&quot; (启动所有交易）。会有多个MetaMask实例弹出，每个都对Pyrmont测试网提出一个32个Göerli ETH的交易请求。请确认每一笔交易。



![p23](https://i.ibb.co/sFbLGWt/23.png)





当所有的交易都成功完成时，你的质押也完成了！



![p24](https://i.ibb.co/477pzkH/24.png)





## 查看你的验证者存款状态



新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：


1. 复制你的Göerli测试网钱包地址
2. 前往：https://pyrmont.beaconcha.in/
3. 搜索你的钱包地址。你的密钥会显示出来。

点击一个密钥可以看到“预期激活”信息。

![p25](https://i.ibb.co/wLWnK2H/25.png)





 完成了！现在创建验证者钱包吧！

&lt;br/&gt;

# 第8步：创建验证者钱包


创建一个目录以存储验证者钱包数据，并授予当前用户访问该目录的权限。在 `&lt;yourusername&gt;` 修改登入用户名。这是创建钱包时暂时的设定。在后面我们会重新分配权限给验证者。

``` Powershell
$ sudo mkdir -p /var/lib/prysm/validator
$ sudo chown -R &lt;yourusername&gt;:&lt;yourusername&gt; /var/lib/prysm/validator
```



然后，我们会使用我们之前创建的Prysm验证者二进制文档来创建一个密钥钱包，并使用我们在上一步生成的密钥。把你生成的验证者密钥路径填到 `&lt;PathToValidatorKeys&gt;`，例如：`-- keys-dir=$HOME/eth2.0-deposit-cli/validator_keys`

``` Powershell
$ cd prysm
$  bazel run //validator:validator -- accounts import --keys-dir=&lt;PathToValidatorKeys&gt; --accept-terms-of-use --pyrmont
```


&gt; 注意：你第一次运行这个命令时可能需要稍微等一下。



它会要求你提供一个钱包目录。这时会创建一个你的新钱包。使用`/var/lib/prysm/validator`。这是这一步骤一开始时你授予`&lt;yourusername&gt;`访问权限的位置。

``` Powershell
Enter a wallet directory (default: /home/ethstaker/.eth2validators/prysm-wallet-v2):
/var/lib/prysm/validator
```


你会被要求提供一个新的钱包密码。确保你把它保存在安全的地方！我们在后面配置验证者时会用到。

``` Powershell
Password requirements: at least 8 characters including at least 1 alphabetical character, 1 number, and 1 unicode special character. Must not be a common password nor easy to guess
New wallet password:
Confirm password:
[2020-11-18 21:47:26]  INFO accounts: Successfully created new wallet wallet-path=/var/lib/prysm/validator
```


接下来，你需要输入你在 [Eth2 Launch Pad](https://pyrmont.launchpad.ethereum.org/)网站上用来创建验证者密钥的密码。如果输入正确，账户会被导入到新的钱包。

``` Powershell
Enter the password for your imported accounts:
Importing accounts, this may take a while...
Importing accounts... 100% [==========================================]  [2s:0s]
Successfully imported 2 accounts, view all of them by running accounts list
```
 确认你已经创建了验证者账户。

``` Powershell
$ bazel run //validator:validator -- accounts list --pyrmont --wallet-dir /var/lib/prysm/validator --accept-terms-of-use
```

显示如下:

``` Powershell
Showing 2 validator accounts
View the eth1 deposit transaction data for your accounts by running `validator accounts list --show-deposit-dataAccount 0 | loosely-apparent-feline
[validating public key] 0x8c8b19c544d79bdaf60d7dcc86ebaeeed5d804d2ecb4c66e5b27e19a664a81457a1c02a873a110e1d332abce5800cf7fAccount 1 | remarkably-tight-herring
[validating public key] 0xa79583298ecbd5564fce6ccefe2e69967705aff950235dc59ae303fa210b029b565c08303eb18cf02ecc26c429059d7f
```



创建一个文档来储存钱包密码，验证者就可以访问钱包而无须人工提供密码。这个文档命名为password.txt。

``` Powershell
$ touch /var/lib/prysm/validator/password.txt
$ sudo nano /var/lib/prysm/validator/password.txt
```

把你的新钱包密码添加到这个文档。保存并退出。

![p26](https://i.ibb.co/QQTvWPF/26.png)







移除群组和其他人的访问权限以保护文档。

``` Powershell
$ sudo chmod go-rw /var/lib/prysm/validator/password.txt
```


完成了！现在验证者钱包和密码文档都配置好了，我们接下来要把验证者节点作为服务来配置并运行。

&lt;br/&gt;

# 第9步：配置验证者节点

## 设置账户和目标


我们将把验证者节点作为服务来配置并运行，因此如果系统重启，这个进程将自动重新开始。

为服务的运行创建一个账户。这种类型的账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false prysm-validator
```


我们为在上一步的验证者`/var/lib/prysm/validator`创建数据目录。现在设置目录权限，这样账户`prysm-validator`就可以修改验证者账户的数据目录。

``` Powershell
$ sudo chown -R prysm-validator:prysm-validator /var/lib/prysm/validator
```



下一步，复制之前编译的验证者二进制文档到目录`/usr/local/bin`。


&gt; 注意：每一次你拉取/创建一个新版本的验证者二进制文档都需要做这一步。查看教程最后的**附录——更新Prysm**。

``` Powershell
$ cd ~
$ sudo cp prysm/bazel-bin/validator/validator_/validator /usr/local/bin
```

## 创建和配置服务

创建一个systemd服务文档来储存config文档的服务。

``` Powershell
$ sudo nano /etc/systemd/system/prysm-validator.service
```


完整复制粘贴下面这段代码，除了：在`&lt;POAPstring&gt;` 填上你个人喜欢的文字，例如： `--graffiti &quot;abcdefg12345&quot;`

``` Powershell
[Unit]
Description=Validator
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=prysm-validator
Group=prysm-validator
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/validator --pyrmont --datadir=/var/lib/prysm/validator --wallet-dir=/var/lib/prysm/validator --wallet-password-file=/var/lib/prysm/validator/password.txt --graffiti=&quot;&lt;POAPString&gt;&quot; --accept-terms-of-use[Install]
WantedBy=multi-user.target
```



`--pyrmont`这个flag需要表明我们正在测试网上运行

`--accept-terms-of-use`这个flag需要用来将二进制文档作为服务来运行。使用这个flag表示接受Prysm的[使用条款](https://github.com/prysmaticlabs/prysm/blob/master/TERMS_OF_SERVICE.md)。

参考下方的截图。保存并退出。



![p27](https://i.ibb.co/rG4N7Sj/27.png)






重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```



启动服务并检查，确保正确运行。

``` Powershell
$ sudo systemctl start prysm-validator
$ sudo systemctl status prysm-validator
```



你看到的输出应该如下图所示。

![p28](https://i.ibb.co/Mg8gGTJ/28.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable prysm-validator
```


你可以通过运行日志命令来检查进程。按Ctrl+C 退出。

``` Powershell
$ sudo journalctl -fu prysm-validator.service
```



信标链可能需要几小时到几天的时间来同步Eth1节点的数据。如果信标链已经完成了同步，它可能需要几小时或几天来激活验证者账户。验证者进程的输出会显示它的状态。

``` Powershell
Nov 18 21:54:35 ETH-STAKER-001 validator[119395]: time=&quot;2020-11-18 21:54:35&quot; level=info msg=&quot;Waiting for deposit to be observed by beacon node&quot; prefix=validator pubKey=0x8c8b19c544d7 status=&quot;UNKNOWN_STATUS&quot;
```



你可以通过[beaconcha.in](https://pyrmont.beaconcha.in/)查看你的验证者状态。只需要搜索你的验证者公钥或使用你的MetaMask （或其他）钱包地址进行搜索。你的数据可能要过一段时间才会在网站上显示。

![p29](https://i.ibb.co/zhHX5KX/29.png)






这一步结束了。我们现在有一条运行中的信标链和一个验证者节点。恭喜你！你棒棒的！

&lt;br/&gt;

# 第10步：安装Prometheus


Prometheus是一个提供监测功能和警报工具箱的开源系统。它在你的Ubuntu服务器上作为一个服务来运行，而它的职责就是去抓取数据。更多信息请看[这里](https://prometheus.io/docs/introduction/overview/)。

我们会使用Prometheus公开信标链、验证者的运行时数据和特定用例数据。

##  创建用户账户

这些服务是在账户下运行的。这些账户不能登录到服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false prometheus
$ sudo useradd --no-create-home --shell /bin/false node_exporter
```

## 创建目录

程序与数据目录。

``` Powershell
$ sudo mkdir /etc/prometheus
$ sudo mkdir /var/lib/prometheus
```

设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus
$ sudo chown -R prometheus:prometheus /var/lib/prometheus
```

## 下载Prometheus软件


从[Prometheus下载页面](https://prometheus.io/download/)修改最新版本的版本号。Rpi用户一定要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/prometheus/releases/download/v2.22.0/prometheus-2.22.0.linux-amd64.tar.gz
```



打开tar存档。它包含两个二进制文档和一些内容文档。

``` Powershell
$ tar xvf prometheus-2.22.0.linux-amd64.tar.gz
```



复制二进制文档到下列位置。

``` Powershell
$ sudo cp prometheus-2.22.0.linux-amd64/prometheus /usr/local/bin/
$ sudo cp prometheus-2.22.0.linux-amd64/promtool /usr/local/bin/
```


设置目录的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /usr/local/bin/prometheus
$ sudo chown -R prometheus:prometheus /usr/local/bin/promtool
```


复制这些内容文档到下列位置。

``` Powershell
$ sudo cp -r prometheus-2.22.0.linux-amd64/consoles /etc/prometheus
$ sudo cp -r prometheus-2.22.0.linux-amd64/console_libraries /etc/prometheus
```


设置目录和文档 (-R) 的所有权。`prometheus`账户会管理这些。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/consoles
$ sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
```

移除下载存档。

``` Powershell
$ rm -rf prometheus-2.22.0.linux-amd64.tar.gz prometheus-2.22.0.linux-amd64
```

## 编辑配置文档


Prometheus使用一个配置文档，这样它就知道去哪里获取数据。


打开YAML配置文档来编辑。

``` Powershell
$ sudo nano /etc/prometheus/prometheus.yml
```



复制下面的代码到文档，注意不要进行任何其他编辑，并退出保存文件。

``` Powershell
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).
# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093
# Load rules once and periodically evaluate them according to the global &apos;evaluation_interval&apos;.
rule_files:
  # - &quot;first_rules.yml&quot;
  # - &quot;second_rules.yml&quot;
# A scrape configuration containing exactly one endpoint to scrape:
# Here it&apos;s Prometheus itself.
scrape_configs:
  - job_name: &apos;validator&apos;
    static_configs:
      - targets: [&apos;localhost:8081&apos;]
  - job_name: &apos;beacon node&apos;
    static_configs:
      - targets: [&apos;localhost:8080&apos;]
  - job_name: &apos;node_exporter&apos;
    static_configs:
      - targets: [&apos;localhost:9100&apos;]
```


scrape_config对不同的分工名称给出定义。我们有三个分工名称：validator (验证者)、beacon node (信标节点) 和node_exporter。前两个的职责很明显，最后一个是用作与服务器用例本身 (内存、CPU、磁盘、网络等) 相关的数据。我们将在下面安装并配置node_exporter。


给config文档设置所有权。prometheus账户将拥有这个所有权。

``` Powershell
$ sudo chown -R prometheus:prometheus /etc/prometheus/prometheus.yml
```


最后，测试服务器是否运行正确。

``` Powershell
$ sudo -u prometheus /usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries
```



输出应该如下。按Ctrl + C退出。

``` Powershell
level=info ts=2020-10-21T07:18:00.434Z caller=main.go:684 msg=&quot;Server is ready to receive web requests.&quot;
```

##  将Prometheus设为自动启动的服务。


创建一个systemd服务文档来保存服务配置，它会告诉systemd文档把Prometheus作为prometheus用户来运行，配置文档在目录的保存路径为/etc/prometheus/prometheus.yml，并把数据保存在目录的这里/var/lib/prometheus .

``` Powershell
$ sudo nano /etc/systemd/system/prometheus.service
```
将下面的代码复制粘贴到文档。退出并保存。

``` Powershell
[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target[Service]
Type=simple
User=prometheus
Group=prometheus
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries[Install]
WantedBy=multi-user.target
```



重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


然后用下面的命令来启动服务，并查看状态以确保运行正确。

``` Powershell
$ sudo systemctl start prometheus
$ sudo systemctl status prometheus
```

输出应该如下图：

![p30](https://i.ibb.co/gz3DPMd/30.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。



最后，允许Prometheus随系统启动而启动。

``` Powershell
$ sudo systemctl enable prometheus
```

&lt;br/&gt;

# 第11步：安装Node Exporter


Prometheus会提供关于信标链和验证者的数据。如果我们想要我们Ubuntu用例的数据，我们需要一个叫[Node_Exporter](https://github.com/prometheus/node_exporter)的extension。如果你在下面指定其他版本，你可以在[这里](https://prometheus.io/download/)找到最新的稳定版本。Rpi用户记得要获取ARM二进制文档。

``` Powershell
$ cd ~
$ curl -LO https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
```

打开下载了的软件。

``` Powershell
$ tar xvf node_exporter-1.0.1.linux-amd64.tar.gz
```


复制二进制文档到目录/usr/local/bin，并设置用户与群组对我们在前面创建的node_exporter用户的所有权。

``` Powershell
$ sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin
$ sudo chown -R node_exporter:node_exporter /usr/local/bin/node_exporter
```

移除下载了的存档。

``` Powershell
$ rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64
```

## 将Node Exporter设置为自动启动的服务


创建一个systemd服务文档来储存服务config文档，它会告诉systemd把Node_Exporter 作为node_exporter用户来运行。

``` Powershell
$ sudo nano /etc/systemd/system/node_exporter.service
```

 复制下列代码到文档。退出并保存。

``` Powershell
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter[Install]
WantedBy=multi-user.target
```

重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


然后按下面的命令启动服务并检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start node_exporter
$ sudo systemctl status node_exporter
```



输出应该如下图。

![p31](https://i.ibb.co/McQtC0X/31.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 。

最后，允许Node Exporter随系统启动而启动。

``` Powershell
$ sudo systemctl enable node_exporter
```

## 测试Prometheus和Node Exporter



所有东西都准备就绪了。通过在防火墙打开一个端口 (请参阅步骤2）和浏览`http://&lt;yourserverip&gt;:9090`你可以有选择性地测试它的功能。在那里你可以运行查询以查看不同的数据。例如，你可以试这个查询来看还有多少可用内存：

``` Powershell
http://&lt;yourserverip&gt;:9090/new/graph?g0.expr=node_memory_MemFree_bytes&amp;g0.tab=1&amp;g0.stacked=0&amp;g0.range_input=1h
```



或者试这个查询来看你所有验证者的余额。

``` Powershell
http://&lt;yourserverip&gt;:9090/graph?g0.range_input=1h&amp;g0.expr=validator_balance&amp;g0.tab=1
```
&lt;br/&gt;

# 第12步：安装Grafana


Prometheus是我们的数据来源，而Grafana则给我们提供报告仪表盘数据的功能。接下来安装Grafana并配置仪表盘。

我们会用一个APT仓库来安装，因为这会使得安装和更新更简单。Grafana可以在官方的Ubuntu软件包仓库中找到，但那个版本可能不是最新的，因此我们将使用Grafana的官方仓库。

用wget下载Grafana GPG的密钥，然后将输出传送到apt-key。这会将密钥添加到你的APT安装的信任密钥列表中。

``` Powershell
$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
```



把Grafana仓库加到APT的来源里。

``` Powershell
$ sudo add-apt-repository &quot;deb https://packages.grafana.com/oss/deb stable main&quot;
```
刷新apt缓存。

``` Powershell
$ sudo apt update
```
确认Grafana是从仓库安装的。

``` Powershell
$ apt-cache policy grafana
```

输出应该如下：

``` Powershell
grafana:
  Installed: (none)
  Candidate: 7.2.1
  Version table:
     7.2.1 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.2.0 500
        500 https://packages.grafana.com/oss/deb stable/main amd64 Packages
     7.1.5 500
        500 https://packages.grafana.com/oss/deb stable/main amd64
     ...
```


检查顶部显示的版本是否与[这里](https://grafana.com/grafana/download)显示的最新版本一致。然后继续安装。

``` Powershell
$ sudo apt install grafana
```



启动Grafana服务器和检查状态，确保运行正确。

``` Powershell
$ sudo systemctl start grafana-server
$ sudo systemctl status grafana-server
```


输出应该如下图：

![p32](https://i.ibb.co/NK3C58Z/32.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出。



允许Grafana随系统启动而启动。

``` Powershell
$ sudo systemctl enable grafana-server
```

## 配置Grafana登录


能做到这一步已经很棒了！现在一切都设置好并开始运行了，你可以在浏览器里前往`http://&lt;yourserverip&gt;:3000/`，会出现Grafana的登录窗口。


&gt; 注意：这不是安全的连接。用于测试网可以，但用于主网的话需要安全的HTTPS连接。



在`admin`输入用户名和密码。系统会让你修改密码，请务必修改。

## 配置Grafana的数据来源


让我们配置数据来源吧。把你的鼠标移至左边菜单栏的齿轮图标处，会弹出一个菜单——选择`Data Sources`。

![p33](https://i.ibb.co/4dMmF8R/33.png)





点击 `Add Data Source`，然后选择`Prometheus`。在URL输入`http://localhost:9090`，然后点击 `Save and Test`。



![p34](https://i.ibb.co/sWsHzQz/34.png)



![p35](https://i.ibb.co/mzL51L5/35.png)



## 导入Grafana仪表盘


移动你的鼠标到左边菜单栏的`+`图标，会有一个菜单弹出，选择 `Import`。


从[这里](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/less_10_validators.json)复制粘贴JSON (或者[这里](https://raw.githubusercontent.com/GuillaumeMiralles/prysm-grafana-dashboard/master/more_10_validators.json)，如果你有多于10个验证者)，点击`Load`，然后`Import`。你应该可以看到仪表盘。一开始的时候，你可能不会有很多数据，但在测试网启动和验证者激活一段时间后，你会看到一些数据和警报。



![p36](https://i.ibb.co/XzxVZTC/36.png)




你还可以在Telegram和Discord上获得警报信息。在[这里](https://docs.prylabs.network/docs/prysm-usage/monitoring/grafana-dashboard/)查看指引。

&lt;br/&gt;

# 写在最后

到这里就完成了！希望这个教程能帮到你。

- 在以后的更新里会有内容更全面的仪表盘 (额外的硬件数据和eth1节点的数据)
- 如果你有任何反馈，你可以在[Twitter](https://www.twitter.com/SomerEsat) 或 [Reddit](https://www.reddit.com/user/SomerEsat)上联系窝
- 如果你喜欢这个教程并希望别人也能学习这个教程，请用[friends link](https://medium.com/@SomerEsat/4d2a86cc637b?source=friends_link&amp;sk=4cb64bfa20247d2b5c7a50ce0a92d33b)把教程分享出去！
- 支持一下：somer.eth

&lt;br/&gt;

# 附录——Prysm更新



如果由于Git仓库里的改动你需要更新代码，可以按照这些步骤来获取最新的文档和创建自己的二进制文档。


确保你已经安装了下列条件以支持`--config=release`的使用。

``` Powershell
$ sudo apt install -y libtinfo5 # Terminal handling
$ sudo apt-get install -y libssl-dev # OpenSSL 
$ sudo apt-get install -y libgmp-dev # GMP source to build BLS
```


前往[这里](https://github.com/prysmaticlabs/prysm/releases)以获取发布标签 (最新的通常是最好的)，比如`v1.0.0-beta.3`。注意`rm -r prysm`会删除prysm目录，以防你想保留其中的内容。

``` Powershell
$ cd ~ 
$ rm -r prysm
$ git clone -b v1.0.0-beta.3 https://github.com/prysmaticlabs/prysm.git 
$ cd prysm
$ bazel build //beacon-chain:beacon-chain --config=release
$ bazel build //validator:validator --config=release
```


接下来，我们会停止信标链和验证者服务，并复制粘贴二进制文档到目录`/usr/local/bin`，然后再次启动服务。

``` Powershell
$ cd ~
$ sudo systemctl stop prysm-validator
$ sudo systemctl stop prysm-beaconchain
$ sudo cp prysm/bazel-bin/beacon-chain/beacon-chain_/beacon-chain /usr/local/bin
$ sudo cp prysm/bazel-bin/validator/validator_/validator /usr/local/bin
$ sudo systemctl start prysm-beaconchain
$ sudo systemctl status prysm-beaconchain # &lt;-- Check for errors.
$ sudo journalctl -fu prysm-beaconchain # &lt;-- Check for errors.
$ sudo systemctl start prysm-validator
$ sudo systemctl status prysm-validator # &lt;-- Check for errors.
$ sudo journalctl -fu prysm-validator # &lt;-- Check for errors.
```


完成了！服务已经更新好了。

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2 Staking 系列#6：至善者，善之敌]]></title><description><![CDATA[何为评估 Eth2 验证者风险的正确姿势？

]]></description><link>https://www.ethereum.cn/validated-perfect-is-the-enemy-of-the-good</link><guid isPermaLink="false">https://www.ethereum.cn/validated-perfect-is-the-enemy-of-the-good</guid><pubDate>Thu, 17 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/12/10/validated-perfect-is-the-enemy-of-the-good/)

![p1](https://i.ibb.co/VqBHvVg/p1.png)

信标链对于验证者行为有多种激励机制，这些机制都由网络的当前状态来决定。因此，在决策如何保障节点的时候，考虑其他验证者可能碰到问题的情况也很重要。


活跃验证者的余额非升即跌，不会保持不变。因此尽量降低风险不失为最大化收益的一种方式。验证者余额被信标链扣除的情形主要有以下三种：

- **一般惩罚**：验证者失职的时候会被施以此种惩罚 (例如离线)
- **怠工惩罚 (Inactivity Leaks)**：当网络处于无法敲定的状态时，验证者失职会受到该惩罚，即和其他处于离线状态的验证者高度相关。
- **罚没 (Slashing)**：当验证者做出矛盾的区块提议或证明时会被罚没 (可能是攻击行为)。


注意：平均来看，单个验证者的余额可能不变，但只要参加了工作，就会获得奖励或是受到惩罚。

## 相关性

如果整个网络处于健康运行状态，那么单个验证者离线或是触发罚没的影响是很小的，也就是说惩罚力度不会很大。相反，如果网络中有大量验证者离线，那么离线验证者的余额削减速度会快得多。


同理，如果大量验证者同时触发罚没，对于信标链来说会这无异于攻击行为，因此这些验证者 100% 的质押金会被销毁。


由于这些“反相关”激励措施，验证者应该*更多*地考虑同时会对他人产生影响的问题，而不是从孤立的、个人的角度出发。

 &lt;br/&gt;

# 故障原因及可能性


让我们仔细过一些故障案例，然后看看有多少其他验证者会同时受到影响，以及你的验证者将受到多大力度的惩罚。

![p2](https://i.ibb.co/zZK0Wm9/p2.png)







这里我不同意 [@econoar](https://twitter.com/econoar/status/1335686386691665921) 的说法。这些问题的严重程度算是中等。家用 UPS 和双 WAN 地址故障与其他用户无关，因此从考虑范围中排除。

## 🌍 网络/电力故障


如果你是居家运行验证者，那么将来很可能会遇到这些问题。家用网络和电力连接无法保障正常运行时间。当网络断开连接或是电力中断时，通常是整个片区受到影响，甚至会持续数小时。


除非你的网络或是电力非常稳定，否则因为这个原因遭到惩罚是不太值当的。这几个小时之内你会受到惩罚，但是由于整个网络是正常运行状态，你的惩罚大约等同于该时间段内应得的奖励。也就是说，如果故障时间为 `k` 小时，那么你的验证者余额可能会回退到故障 `k` 小时前的数值，然后 `k` 小时之后你的验证者余额又会恢复到发生故障前的数值。

![p3](https://i.ibb.co/HVFtqgb/p3.png)








&gt; [Validator #12661](https://beaconcha.in/validator/12661) 的余额回升速度和离线时的降低速度大致相同 - [Beaconcha.in](https://beaconcha.in/validator/12661)

## 🛠 硬件故障

类似于网络问题，硬件故障会随机发生，而且在发生故障时，你的节点可能会离线几天。我们很有必要考虑验证者整个生命周期中的预期收益与备用硬件的成本。故障的期望值 (离线罚款乘以发生的几率) 是否大于备用硬件的成本？

就个人而言，如果发生故障的机会很低，且备用硬件的成本较高，这是不值当的。但是话又说回来，我不是巨鲸🐳。你需要根据自己的实际情况来评估所有故障情形。

## ☁️ 云服务故障


也许大家可能会为了避免硬件和网络故障而选择使用云服务。**如果使用云服务的话，就引入了上面所说的相关性风险。**有多少其他验证者和你使用相同的云服务商？


在创世前一周，[亚马逊的 AWS 长时间停运](https://www.theverge.com/2020/11/25/21719396/amazon-web-services-aws-outage-down-internet)，对网络了很大影响。现在如果发生类似的事件，导致大量验证者同时离线，就会触发怠工惩罚 (inactivity penalties)。


更坏的情况是，如果云服务商使用新的虚拟机运行你的节点，却意外地没有停止运行旧节点，这可能导致你被罚没 (如果这也对其他验证者造成了影响，那么惩罚力度会尤其大)。

如果你坚持要使用云服务，可以考虑切换到比较小的服务商，可能会减少损失。

## 🥩 质押服务

目前主网有[多种质押服务](https://stakingether.com/) 可以选择，并且去中心化程度都不尽相同，但是把你的 ETH 托付给服务商都多少增加了相关性风险。这些服务无疑是 eth2 生态系统中不可或缺的部分，对于持有低于 32 ETH 或是缺乏质押所需技术知识的用户来说更甚。但这些服务都是人为设计的，因此会存在缺陷。


如果质押池的规模最终会增长得和 eth1 矿池一样大，那么一个漏洞可能会导致其用户被大规模罚没或是怠工惩罚。

## 🔗故障


[上个月 Infura 宕机了六个小时](https://blog.infura.io/infura-mainnet-outage-post-mortem-2020-11-11/)，导致了以太坊生态系统的停滞。同理，这也是 Eth2 验证者可能面临的相关性风险。

另外，第三方 eth1 API 提供者必须对服务的调用进行速率限制：过去这导致了验证者无法生产有效块 (Medalla测试网)。


最好的解决方式就是运行你自己的 eth1 节点：你不会遇到速率限制，从而降低你的相关性风险，并且有助于提升整个网络的去中心化程度。


Eth2 客户端已经开始加入指定多个 eth1 节点的可能性。其好处在于，主要终端发生故障时能够轻松切换备用终端 (Lighthouse: `--eth1-endpoints`， Prysm: [PR#8062](https://github.com/prysmaticlabs/prysm/pull/8062)，Nimbus 和 Teku 之后可能会加入支持)。


我高度建议添加成本较低或是免费的备用 API ([EthereumNodes.com](https://ethereumnodes.com/) 中有免费和付费的 API 终端及其当前状态)。无论你是否运行自己的 eth1 节点，这个措施都很有必要。

## 🦏 某个 eth2 客户端故障


尽管进行了代码审核、审计和测试，但 eth2 客户端的 bug 都隐藏在某个地方。他们中的大多数都是次要的问题，并且会在产品发布前被发现，但是你所选择的客户端存在离线或者导致你被罚没的可能。如果发生这种情况，你将不会希望运行多数人 (＞1/3) 使用的客户端。


你必须在你认为最合适的客户端和其受欢迎程度之间做出权衡。可以考虑通读另一个客户端的文档，从而在你的节点发生意外时，知道如何安装和配置一个不同的客户端。


如果你质押了大量 ETH，运行不同的客户端是很有必要的，避免把鸡蛋都放在一个篮子里。 [Vouch](https://www.attestant.io/posts/introducing-vouch/) 是一个能够提供多节点质押的基础设施，目前秘密共享验证者 ([Secret Shared Validators](https://www.youtube.com/watch?v=awBX1SrXOhk)) 也迎来了飞速进展。

## 🦢 黑天鹅事件


当然了，也有许多可能性不大、不可预测但影响颇大的事件会带来风险。这无关你的质押设置和决策。例如在硬件层面的 [Spectre](https://meltdownattack.com/) 和 [Meltdown](https://meltdownattack.com/)，或是内核漏洞 ([BleedingTooth](https://www.zdnet.com/article/google-warns-of-severe-bleedingtooth-bluetooth-flaw-in-linux-kernel/)提示整个硬件堆栈中存在某些危险)。也就是说，我们无法完全预测和避免这些问题，而是在问题发生后采取相应措施。

&lt;br/&gt;

# 我需要担心什么？

归根结底，这取决于计算给定故障的期望值 *E(X)*：事件发生的可能性以及该事件的代价。由于相关性因素会对惩罚力度造成相当大的影响，因此在 eth2 网络其他成员的语境下考虑这些故障事件至关重要。将故障的预期成本与稀释故障的成本进行比较，你将得到一个合理的答案，以判断是否值得一试。

![p4](https://i.ibb.co/GvYPb2P/p4.png)





没有人知道节点可能发生故障的所有情形，也不知道每种故障发生的可能性，但是通过对每种故障类型的可能性进行独立估算并稀释最大风险，“群体智慧”将发挥作用。此外，由于每个验证者面临的风险不同，并且对这些风险的评估也不同，你没有考虑到的风险可能会被他人碰到，因此相关性将降低。*去中心化的力量！*

&lt;br/&gt;

# 📕 莫要惊慌


最后，如果你的节点真的发生了什么意外，别要惊慌！即使是遭到怠工惩罚 ( inactivity leaks)，在短时间内惩罚数额也不大。冷静下来思考一下发生了什么，为什么会发生，然后制定计划来解决问题。*在上手之前深呼吸一下！*比起慌忙做出错误决定导致被罚没，给自己多五分钟的思考时间更为可取。

重中之重：🚨  **不要使用同一个验证密钥运行两个节点！** 🚨

&lt;br/&gt;

*感谢Danny Ryan、Joseph Schweitzer 和 Sacha Yves Saint-Leger 对本文的审校*



![p5](https://i.ibb.co/g3fPGLy/p5.png)



 [使用同一密钥运行一个以上验证者导致的罚没 - [Beaconcha.in](https://beaconcha.in/validators/slashings)]

&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0主网质押教学(Ubuntu/Nimbus)]]></title><description><![CDATA[手把手教学：以太坊2.0主网质押Nimbus篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-nimbus</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-nimbus</guid><pubDate>Wed, 16 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-nimbus-e86bdee8c550)



![p1](https://i.ibb.co/Cb0Gp4n/1.png)







本文基于Status的Nimbus客户端，详细讲解如何参与以太坊2.0主网质押。主要基于以下几个技术：

- [Ubuntu](https://ubuntu.com/)  v20.04 (LTS) x64 服务器
- [Go Ethereum](https://geth.ethereum.org/)  节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- Status ETH 2.0客户端—— [Nimbus](https://nimbus.team/)([代码分支](https://github.com/status-im/nim-beacon-chain)
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/) 



**提示：参与质押至少需要32 ETH 以及额外的gas费。 在搞清楚之前切记不要向任意地址发送ETH。本教程介绍了如何安全地将你的ETH存入存款合约。请牢记不要将ETH发送给任何人。**

&lt;br/&gt;

# 致谢


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢[EthStaker](https://discord.gg/7z8wzehjrJ)管理团队和提供教程的社区成员、Eth2 客户端团队、以及质押社区的帮助和校对。

特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

&lt;br/&gt;

# 免责声明


本文仅供参考，不构成专业建议。作为本教程的作者。我本人不保证文中信息的准确性，对于那些参考了本文进行操作而产生的任何损失概不负责。文末有更加完整的免责声明，请阅读之后再进行操作。

&lt;br/&gt;

# 支持


- 如需技术支持，请联系：

- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

  ​       Reddit：https://www.reddit.com/r/ethstaker/

  ​       Discord：https://discord.gg/7z8wzehjrJNimbus

- Nimbus客户端团队，[Discord](https://discord.gg/PBJBuJKfXs)

  
&lt;br/&gt;
  

# 条件


使用本教程需要对以太坊、ETH、Staking、Linux、MetaMask (Portis或Fortmatic) 有一定的背景知识。

还需要准备：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机或云端安装和运行的Ubuntu服务器。

运行本地电脑有助于去中心化，因为如果云服务商崩溃了，那么托管在此服务商的所有节点都会随之崩溃。

- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-) (或Portis、Fortmatic)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 从测试网到主网

如果你从测试网设置转到主网设置，那么我强烈建议你在一个全新的 (新安装的) 服务器实例上开始。本教程没有对迁移场景进行测试，所以如果你使用的是此前安装过的测试网软件，那么无法保证你的操作能成功。

&lt;br/&gt;

# 要求


- 硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、8GB内存的RAM (16GB更佳)、一个内存至少500GB的SSD (1TB更佳)、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。

&gt; 注意：检查你的可用磁盘空间。尽管你有一个容量较大的SSD，Ubuntu也会出现仅剩200GB可用空间的状况。如果你遇到这种情况，请查看**附录C —— 扩展逻辑卷**。

&lt;br/&gt;

# 概览


下面这个简化图表标明了本篇教程所涉及的范围，标黄的即是本文会覆盖到的部分：

![2](https://i.ibb.co/GTy57kG/p2.png)


整个流程可以概念化表述为：

- 生成验证者密钥对和存款数据
- 准备Ubuntu服务器 (防火墙、安全设置等)
- 设置一个Eth1 节点并同步Eth1 区块链的数据
- 配置Nimbus客户端并同步Eth1 节点数据
- 存款并激活验证者密钥对

那我们现在就开始吧！

&lt;br/&gt;

# 第1步：生成质押数据


参与质押首先要决定你想要运行的验证者节点的数量，并基于此生成一些数据文件。

&gt; 注意：如果你的存款数据和验证者密钥对已经生成，可以跳过这一步。

一个验证者节点需要存32 ETH，你的MetaMask钱包里要有相应足够的ETH。比如，如果你计划运行5个验证者节点，你将需要准备160 ETH (32*5) 并且预留一些gas费。存款过程会稍后再讲解，下面教大家怎么把设备运行起来。

## 下载存款工具 (存款CLI)


点击[此处](https://github.com/ethereum/eth2.0-deposit-cli/releases/)下载最新发布的存款命令行界面app (CLI app)。

![3](https://i.ibb.co/Hgfx578/p3.png)


在“Assets”那一栏选择与你的设备 (如Windows、Mac、Linux Desktop等) 匹配的版本并下载。

## 运行存款工具 (Eth2 存款CLI)


解压文件，里面应该有一个二进制文件 (可执行文件)。存款工具生成用于质押的文件和一组助记词。这组助记词需要安全地保存。下面有两种选择：

**建议方案：**将这份二进制文件复制粘贴到USB驱动器里。连接到一台此前从未连接过网络的计算机，将文件复制到计算机里并开始运行。

**不建议方案：**在当前使用的计算机上运行。但是网络连接可能会导致你的助记词密钥泄漏。如果没有未联网的计算机，那就在开始运行之前断开网络。

准备好之后，在终端窗口 (或windows的命令提示符CMD) 中运行这份文件以继续使用下面列出的命令。确定好你要运行的验证者节点的数量之后，用该数字替换 `&lt;NumberOfValidators&gt;`。比如： `--num_validators 2`

Linux/Mac:

``` Powershell
./deposit new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

Windows:

``` Powershell
deposit.exe new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

在你选择的计算机执行上面的步骤之后，你将被要求创建一个**验证者密钥存储库 **(validator keystore) 密码，并保存在一个安全的地方。在后面的步骤中，你将需要这个keystore来上传验证者密钥到Nimbus的验证者钱包里。



![4](https://i.ibb.co/2gKWKW7/4.png)




随后会生成一组**助记词**，请保存在一个安全的地方，**这至关重要**。因为最终你需要助记词来生成提款密钥以提出质押的ETH，并且增加验证者节点时也需要使用助记词。如果你丢失了助记词，就无法将你的资产提出了。

![5](https://i.ibb.co/LRH1pw4/5.png)






一旦你点击确认已经记好助记词之后，你的验证者密钥对便会生成。

![6](https://i.ibb.co/1GjWJdx/6.png)





新创建的验证者密钥对和存款数据文件会放置在指定位置。文件夹的内容如下所示：

![p7](https://i.ibb.co/q0zwbhV/7.png)




关于这些文件：

- 文件 `deposit_data-[timestamp].json` 包含验证者公钥和质押存款信息。该文件将用于完成随后的ETH存款过程。

- 文件 `keystore-m...json` 包含经过加密的验证者签名密钥。每一个验证者节点对应一个“keystore-m”。该文件将被导入到Nimbus验证者钱包中以备质押时使用。随后需要将这些文件复制粘贴到Ubuntu服务器中。



## 最后的步骤


现在你已经有了存款数据和密钥存储库文件，接下来就可以设置Ubuntu服务器了。

**注意：此时还不能进行存款。**

首先完成并验证你的质押设置非常重要。如果你的ETH存款激活了，但是质押设置还没准备好的话，你将会受到怠工惩罚。

&lt;br/&gt;

# 第2步：连接至服务器


使用一个SSH端口，连接至你的Ubuntu服务器。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的风险。

&gt; 注意：如果你不是用`root`登录的便可以直接跳到第三步。

创建一个新账户。在 `&lt;yourusername&gt;` 中填入你的用户名，然后设置一个安全系数较高的密码，并输入其他可选信息。

``` Powershell
# adduser &lt;yourusername&gt;
```

通过把新的用户加入`sudo`群组中，来授予其管理权限。这样用户在命令行前输入`sudo`，便会以超级用户的权限来执行操作。

``` Powershell
# usermod -aG sudo &lt;yourusername&gt;
```

可选项：如果你使用SSH密钥通过`root`用户连接你的Ubuntu系统，你需要将新创建的账户和root用户的SSH密钥数据组合起来。

``` Powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```

最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第3步：升级服务器


确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
$ sudo reboot
```

# &lt;br/&gt;


# 第4步：保护服务器

安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 修改SSH默认端口

SSH默认端口是端口22，也是易受攻击的矢量，因此可以修改SSH端口来防止攻击。

在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。没有其他显示便意味着该端口号未被使用；显示红色便意味着已被使用，请尝试其他端口号。比如：`sudo ss -tulpn | grep &apos;:6673&apos;`

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;YourSSHPortNumber&gt;&apos;
```

确定端口号可用之后，通过升级SSH设置来修改默认端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```

在文件中检索或者添加 (如果没有的话) `Port 22` 命令行。删掉`#` (如果有的话) 并在下面的命令行中输入端口号。

``` Powershell
Port &lt;YourSSHPortNumber&gt;
```

参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![8](https://i.ibb.co/nLgq1wt/8.png)

重新启动 SSH 服务以显示上述所作的修改。

``` Powershell
$ sudo systemctl restart ssh
```

登出并使用你的SSH端口号`&lt;YourSSHPortNumber&gt;`重新登入。

## 配置防火墙

Ubuntu 20.04 服务器可以使用默认的 UFW 防火墙来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Nimbus 的入站流量。

**安装 UFW 防火墙**

按照下面的命令行输入以保证在默认情况下安装 UFW。

``` Powershell
$ sudo apt install ufw
```

**应用 UFW 默认值**

明确地应用默认值，拒绝入站流量，允许出站流量。

``` Powershell
$ sudo ufw default deny incoming
$ sudo ufw default allow outgoing
```

**允许 SSH**

允许你此前设置的端口号 `&lt;YourSSHPortNumber&gt;` 的入站流量。SSH 要求 TCP 协议。比如：`sudo ufw allow 6673/tcp`

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```

**Deny SSH Port 22 拒绝 SSH 端口号22**
拒绝端口 22/TCP 的入站流量。

&gt; 注意：当你完成了修改 SSH 默认端口之后再做这一步。

``` Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**

允许与 Go Ethereum 的对等节点 (端口 30303) 进行点对点 (P2P) 连接。如果你使用第三方托管的 Eth1 节点，则可以跳过这一步。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许 Nimbus 客户端**

允许与 Nimbus 的对等节点进行点对点连接，以便在信标链节点上 (Nimbus 的默认端口为 9000) 进行操作。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口9000 的入站流量。

``` Powershell
$ sudo ufw allow 9000
```

开启防火墙并检查是否已按上述步骤正确地配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```

参考下方的截图。

![9](https://i.ibb.co/rxSrX2k/9.png)

&lt;br/&gt;

#  第5步：配置定时器


Ubuntu 内置了时间同步，并默认使用 systemd‘s timesyncd 服务进行激活。验证其是否正确运行。

``` Powershell
$ timedatectl
```

激活  `NTP service` ，运行方式：

``` Powershell
$ sudo timedatectl set-ntp on
```

参考下方的截图：

![10](https://i.ibb.co/kmtMWHN/10.png)


只能使用单个定时器服务。如果你此前安装过 NTPD，你需要检查此文件是否还存在，如果存在请操作下面的命令行以删除。

``` Powershell
$ ntpq -p
$ sudo apt-get remove ntp
```

&lt;br/&gt;

# 第6步：设置一个 Eth1 节点

参与质押需要一个 Eth1 节点。你可以选择运行一个本地 Eth1 节点，也可以使用[第三方提供的节点](https://ethereumnodes.com/)。本教程会详细讲解如何运行 [Go Ethereum](https://geth.ethereum.org/)，如果你选择[第三方服务](https://ethereumnodes.com/)的话，可以跳过这一步。

&gt; 注意：检查你的可用磁盘空间。一个Eth1节点需要大概400GB的存储空间。尽管你有一个容量较大的固态硬盘，Ubuntu也可能显示仅剩200GB的可用空间。如果你遇到这种情况，请查看**附录C —— 扩展逻辑卷**。

## 安装 Go Ethereum


使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
$ sudo apt update
$ sudo apt install geth
```

将Go Ethereum作为后台服务来运行，运行该服务需要创建一个账户。此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```

为Eth1区块链创建数据目录，用来存储Eth1节点数据。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```

设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```

创建一个systemd服务配置文件来对该服务进行配置。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```

将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Go Ethereum Client
After=network.target
Wants=network.target[Service]
User=goeth
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30[Install]
WantedBy=default.target
```


需要注意的 [flags](https://geth.ethereum.org/docs/interface/command-line-options)：

 `--http` 用来公开与Nimbus信标链节点连接的一个HTTP端口 (http://localhost:8545)。


`--cache` 指的是内部缓存的大小，以GB为单位。数值的增减取决于你的可用系统内存。设置 `2048` 将大概需要使用 4-5 GB的内存。


`--maxpeers` 指的是所连接节点的最大数值。节点数量越多，意味着越多的网络数据可用空间。所以记得不要将该数值设置得太低，否则你的Eth1节点将难以保持同步。


参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![11](https://i.ibb.co/sRvF06X/11.png)




重新加载 systemd 以显示上述的更改并启动服务。检查状态以确保其正确运行。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo systemctl status geth
```

参考下方的截图：

![p12](https://i.ibb.co/xYvYxk5/12.png)




如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (此操作不会影响geth服务)。

允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```

Go Ethereum节点将会开始同步。你可以运行下列命令来追踪进程或检查错误。按“CTRL+c”退出 (此操作不会影响geth服务)。

``` Powershell
$ sudo journalctl -fu geth.service
```

参考下方的截图：

![13](https://i.ibb.co/8545pVm/13.png)



## 查看同步状态


要检查Eth1节点同步状态，请使用下列命令访问控制台。

``` Powershell
geth attach ws://127.0.0.1:8546
&gt; eth.syncing
```



如果显示结果是 `false` ，表明你的同步已完成。如果显示结果是同步数据，表明你仍在同步。作为参考，大概有7-8亿个已知状态 `knownStates`.

参考下方的截图

![14](https://i.ibb.co/jWYfHLw/14.png)




完成时按“CTRL+d”以退出。

## 检查连接的对等节点


要检查你的Eth1节点所连接的对等节点，请使用下列命令访问控制台。

``` Powershell
geth attach http://127.0.0.1:8545
&gt; net.peerCount
```

对等节点总数 `peerCount` 不会超过你所设置的最大对等节点总数 `--maxpeers` 。如果无法找到需要同步的对等节点，参阅下一部分。

完成后按“CTRL+d”以退出。

##  添加 bootnodes (可选)



有时可能要花点时间才能找到要同步的对等节点，可以添加bootnodes以改善这种情况。访问[此处](https://gist.github.com/rfikki/a2ccdc1a31ff24884106da7b9e6a7453) 获得最新的清单并根据下列操作修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```


修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等节点，并以逗号分割。

``` Powershell
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30 --bootnodes &quot;enode://d0b4a09d072b3f021e233fe55d43dc404a77eeaed32da9860cc72a5523c90d31ef9fab7f3da87967bc52c1118ca3241c0eced50290a87e0a91a271b5fac8d0a6@157.230.142.236:30303,enode://5070366042daaf15752fea340e7ffce3fd8fc576ac846034bd551c3eebac76db122a73fe8418804c5070a5e6d690fae133d9953f85d7aa00375d9a4a06741dbc@116.202.231.71:30303&quot;
```

保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -fu geth.service
```


&gt; 注意：需要按照一系列特定的步骤来更新Geth。更多信息请参见“附录A：更新Geth”。

&lt;br/&gt;

# 第7步：下载Nimbus

Nimbus客户端由两份二进制文件组成：信标链节点和验证者客户端。本步骤将讲解如何下载Nimbus二进制文件。

首先，访问[此处](https://github.com/status-im/nimbus-eth2/releases)并找到最新发布的Nimbus版本。通常在页面的最顶部，比如：

![p15](https://i.ibb.co/7VtV1Sd/15.png)





在“Assets”那一栏（如果需要的话点击展开) 将下载链接复制粘贴至文档**nimbus-eth2_Linux_amd64…tar.gz**中。请确保复制的链接是正确的。

![p16](https://i.ibb.co/dBPGmgF/16.png)




操作下列命令来下载这些文件。将下方指令部分的URL改为最新版本的下载链接。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -LO https://github.com/status-im/nimbus-eth2/releases/download/v1.0.0-rc1/nimbus-eth2_Linux_amd64_1.0.0_3594fa2a.tar.gz
```


从归档文件中提取二进制文件并复制到 `/usr/local/bin` 目录，Nimbus 客户端会在该处运行这些文件。根据需求修改文档名。

``` Powershell
$ tar xvf nimbus-eth2_Linux_amd64_1.0.0_3594fa2a.tar.gz
$ cd nimbus-eth2_Linux_amd64_1.0.0_3594fa2a
$ sudo cp build/nimbus_beacon_node /usr/local/bin
```

清理所提取的文档。

``` Powershell
$ cd ~
$ sudo rm nimbus-eth2_Linux_amd64_1.0.0_3594fa2a.tar.gz
$ sudo rm -r nimbus-eth2_Linux_amd64_1.0.0_3594fa2a
```

&gt;
&gt; 注意：需要按照一系列特定的步骤来更新Nimbus。更多信息请参见**附录B：更新Nimbus**。

&lt;br/&gt;

# 第8步：导入验证者密钥对


导入验证者密钥对以配置Nimbus，然后创建运行其所需要的服务以及服务配置。

## 复制验证者密钥存储文件


如果你的验证者存储文件 `keystore-m…json` 不是在你的Ubuntu服务器上生成的，那么你就需要将这些文件复制粘贴到你的本地目录中。你可以用 USB 把文件拷过去 (如果你的服务器是本地的)，也可以使用安全的FTP (SFTP)。

将文件放置在： `$HOME/eth2deposit-cli/validator_keys`。如果需要的话创建文件目录。

## 将密钥存储文件导入验证者客户端


创建一个目录以存储验证者钱包数据，并授予当前用户访问该目录的权限。当前用户需要访问权限来执行导入。在 `&lt;yourusername&gt;` 修改登入用户名。

``` Powershell
$ sudo mkdir -p /var/lib/nimbus
$ sudo chown -R &lt;yourusername&gt;:&lt;yourusername&gt; /var/lib/nimbus
```


给用户授权对目录的读取/写入/执行。这在创建Nimbus钱包的过程里执行。

``` Powershell
$ sudo chmod 700 /var/lib/nimbus
$ ls -dl /var/lib/nimbus
```


参考下方的截图。

![p17](https://i.ibb.co/gv7sT8F/17.png)



运行验证者密钥导入进程。你需要提供生成的`keystore-m`文档所在的目录。例如：`$HOME/eth2deposit-cli/validator_keys`。

``` Powershell
$ cd /usr/local/bin
$ sudo nimbus_beacon_node deposits import --data-dir=/var/lib/nimbus $HOME/eth2deposit-cli/validator_keys
```



你会被要求提供验证者密钥的密码。这是你在第1步创建密钥时设置的密码。

参考下方截图。

![p18](https://i.ibb.co/DtNRrx1/18.png)


到此导入完成，客户端也设置好了。

&lt;br/&gt;

# 第9步：配置Nimbus服务


在这一步，你将要把Nimbus的信标节点作为服务来配置并运行，因此如果系统重启，这个过程将自动重新开始。

## 设置账户和目录

为信标节点的运行创建一个账户。这种账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false nimbus
```

设置目录权限。`nimbus`账户如果要修改在上一步创建的数据目录(`/var/lib/nimbus`) 的话需要授权。

``` Powershell
$ sudo chown -R nimbus:nimbus /var/lib/nimbus
$ ls -dl /var/lib/nimbus
```

参考下方的截图。

![p19](https://i.ibb.co/LxNkMp4/19.png)







## 创建和配置服务

创建一个systemd服务的config文档来配置服务

``` Powershell
$ sudo nano /etc/systemd/system/nimbus.service
```

将下面这段代码复制粘贴到文档里

``` Powershell
[Unit]
Description=Nimbus Eth2 Client
Wants=network-online.target
After=network-online.target[Service]
User=nimbus
Group=nimbus
Type=simple
Restart=always
RestartSec=5
WorkingDirectory=/var/lib/nimbus
Environment=&quot;ClientIP=$(curl -s v4.ident.me)&quot;
ExecStart=/bin/bash -c &apos;/usr/local/bin/nimbus_beacon_node --network=mainnet --data-dir=/var/lib/nimbus --web3-url=ws://127.0.0.1:8546 --nat=extip:${ClientIP} --graffiti=&quot;&lt;yourgraffiti&gt;&quot; --log-level=INFO --log-file=/var/lib/nimbus/beacon_node.log&apos;[Install]
WantedBy=multi-user.target
```

值得注意的 [flags](https://status-im.github.io/nimbus-eth2/options.html):


`--web3-url` 如果你使用的是一个远程的或第三方的Eth1节点，改变这个值。如果你是在本地创建这个Eth1节点的，则不需要改变。 

`--graffiti=&quot;&lt;yourgraffiti&gt;&quot;`填上你自己的涂鸦字符串。出于安全与隐私，应避免使用能唯一辨识你的信息。比如`--graffiti &quot;Hello Eth2! From Dominator&quot;`。



参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![p20](https://i.ibb.co/XJH5zks/20.png)





 重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```


&gt; 注意：如果你是运行本地的Eth1节点（看第6步），你应该等待至它完全同步完数据再启动Nimbus服务。在这里查看进程：`*sudo journalctl -fu geth.service*`

启动服务并检查，确保运行正确。

``` Powershell
$ sudo systemctl start nimbus
$ sudo systemctl status nimbus
```

参考下方的截图

![p21](https://i.ibb.co/x6gwqsv/21.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (不会影响 Nimbus的服务)。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable nimbus
```



如果Eth2 链处于创世后的状态，Nimbus信标链会开始同步数据。它可能要花几个小时才能完全实现同步。你可以通过运行`journalctl` 命令来追踪进程或检查错误。按CTRL+c退出 (将不会影响Nimbus的服务)

``` Powershell
$ sudo journalctl -fu nimbus.service
```



日志的截位视图会显示以下状态信息。

``` Powershell
NOT 2020-11-26 02:05:54.312+00:00 Starting beacon node
INF 2020-11-26 02:05:53.413+00:00 Initializing fork choice                   
INF 2020-11-26 02:05:53.413+00:00 Fork choice initialized                    
INF 2020-11-26 02:05:53.413+00:00 Loading slashing protection 
WRN 2020-11-26 02:05:53.862+00:00 Validator not in registry (yet?)           
NOT 2020-11-26 02:05:53.862+00:00 Local validator attached                   
WRN 2020-11-26 02:05:54.311+00:00 Validator not in registry (yet?)           
NOT 2020-11-26 02:05:54.312+00:00 Local validator attached                   NOT 2020-11-26 02:05:54.312+00:00 Starting beacon node                       NOT 2020-11-26 02:05:54.312+00:00 Waiting for genesis                        INF 2020-11-26 02:05:54.312+00:00 Listening to incoming network requests
```



当Eth2主网启动，信标链和验证者将自动开始处理数据。

你可以在 [beaconcha.in](https://beaconcha.in/)查看你的验证者状态。只需要搜索你的验证者公钥或使用你的MetaMask （或其他）钱包地址进行搜索。你的数据可能要过一段时间才会在网站上显示。

&lt;br/&gt;

# 第10步：进行验证者存款


现在你的节点已经设置好并开始运行，你将需要将ETH存入你的验证者节点。



&gt; 注意：如果你已经提交了你的质押存款，你可以跳过这一步


这一步是关于将所需的ETH存入Eth2.0的存款合约。不要把ETH发送到存款合约。这需要在浏览器上通过Eth2.0的Launchpad网站启动你的MetaMask (或其他) 钱包。

&gt; 注意：如果是在创世后进行的话，你需要在你的Eth1节点和信标链都完全同步完之前存入你的存款。如果你不这样做，当你的Eth1节点或信标链在同步时，Nimbus会处于怠工状态，而你可能要遭遇怠工惩罚。

以太坊2.0 Launchpad: https://launchpad.ethereum.org/

一直随着屏幕切换点击这些警告步骤，直到你到达**密钥对生成**的部分。选择你打算运行的验证者数量。选择一个与你在步骤1中生成的验证者文件数量相匹配的值。



![27](https://i.ibb.co/CwKwHzQ/p27.png)

往下滚动，看这些内容你是否同意，然后点击“Continue” (继续)。

![28](https://i.ibb.co/LdJsJwY/p28.png)

你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在步骤1生成的。浏览/选择或拖拉这个文档，然后点击Continue。

![29](https://i.ibb.co/PTkh7gD/p29.png)

连接你的钱包。选择MetaMask (或者是其他支持的钱包)，登录，选择存有你的ETH的钱包，然后点击Continue。

你的MetaMask余额就会显示出来。如果你选择了主网且你有充足的ETH余额，网站会允许你继续下一步。

![30](https://i.ibb.co/tqrFPLV/p30.png)

然后会出现一个Summary (总结)，显示验证者数和所需的ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![31](https://i.ibb.co/jktcfzz/p31.png)

如果你准备好去存款了，点击&quot;Initiate All Transactions&quot; (启动所有交易）。

![32](https://i.ibb.co/NFbJXL5/p32.png)

 当你到了可以确认每笔交易那一步时，MetaMask (或其他钱包)的窗口会自动弹出。 

当所有的交易都成功完成时，你的质押也完成了！

![33](https://i.ibb.co/kq7Cn7v/p33.png)

恭喜你已经成功存入你的质押存款了！

## 查看你的验证者存款状态

新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

1. 复制你的MetaMask (或其他）钱包地址。

2. 前往这里: [beaconcha.in/](https://beaconcha.in/) 

3. 用你的钱包地址搜索你的密钥

![34](https://i.ibb.co/JQYHLPH/p34.png)

点进某个验证者详情，每个验证者激活后你会看到在Status那一栏有预估时间。

![35](https://i.ibb.co/nbPs42c/p35.png)

现在你面前有一个条正在运作的信标链、一个验证者节点以及你的主网存款。如果以太坊2.0主网处于运行中，一旦你的存款被激活，你将开始工作并赚取收益。

**恭喜你：你终于正式成为了一名以太坊质押者**

 是时候来一顿肥宅水狂欢了。

&lt;br/&gt;

# 第11步：监测

因为一些还没被解决的安全问题，监测这一部分将在未来补充到这份教程。



&lt;br/&gt;

# 结束语及后续建议

感谢大家给我这个机会。希望这份教程能帮到大家。

**后续步骤:**

- 检查三次所有密钥与密码备份。

- 重启你的电脑并确保服务都能自动启动。

- 了解如何升级客户端与服务器软件。

- 使用`htop`来监测本地电脑的资源

-  熟悉[beaconcha.in](https://beaconcha.in/) ，这样你就能监测你的验证者情况，其提供警报功能 （通过邮件发送，需要注册）和最多[3个POAP](https://beaconcha.in/poap)。

-  加入 [Ethstaker](https://discord.gg/7z8wzehjrJ)和[Nimbus](https://discord.gg/PBJBuJKfXs)的Discord，留意重要通知。

- 请在[Discord](https://discord.gg/7z8wzehjrJ)、 [Twitter](https://www.twitter.com/SomerEsat)、或[Reddit](https://www.reddit.com/user/SomerEsat)分享对这份教程的反馈。

- 在 [Ethstaker](https://discord.gg/7z8wzehjrJ) 的discord上帮助其他人设置。

- 用[friend link](https://someresat.medium.com/41de20513b12?source=friends_link&amp;sk=ac7477fd99b6648a5745a3e327f2701c)分享这份教程

- 支持一下：somer.eth

&lt;br/&gt;



# 延伸阅读

强烈建议大家从尽可能多的来源获取信息，还有很多其他资源可以帮助你熟悉如何在Eth2上质押。

如果作者对这些资源还没测试或验证过，而你采用了的话，是要自己承担风险的。

- 客户端团队的官方文档 [Prysm](https://docs.prylabs.network/docs/getting-started) | [Lighthouse](https://lighthouse-book.sigmaprime.io/) | [Teku](https://docs.teku.consensys.net/en/latest/) | [Nimbus](https://status-im.github.io/nimbus-eth2/intro.html)

- [/r/EthStaker Sticky](https://www.reddit.com/r/ethstaker/comments/jjdxvw/welcome_to_rethstaker_the_home_for_ethereum/)

- [以太坊2.0客户端的非官方docker环境](https://github.com/eth2-educators/eth2-docker)

- [如何在Ubuntu上设置Eth2主网验证者系统](https://github.com/metanull-operator/eth2-ubuntu)

- [指南 | 如何在ETH2主网设置验证者](https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet)

- [指南 | ETH2验证者信标链节点的安全最佳实践](https://www.coincashew.com/coins/overview-eth/guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node) 

- [ETH2质押节点的额外监察](https://moody-salem.medium.com/additional-monitoring-for-eth2-staking-nodes-aea05b2f9a86) 

- [以太坊2.0质押的Telegram服务](https://9elements.com/blog/ethereum-2-0-2/) https://9elements.com/blog/ethereum-2-0-2/)

&lt;br/&gt;

# 附录A — Geth更新


如果你需要更新到Geth的最新版本，请按下列步骤：

``` Powershell
$ sudo systemctl stop nimbus
$ sudo systemctl stop geth
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo systemctl start geth
$ sudo systemctl status geth # &lt;-- Check for errors
$ sudo journalctl -fu geth # &lt;-- Monitor
$ sudo systemctl start nimbus
$ sudo systemctl status nimbus # &lt;-- Check for errors
$ sudo journalctl -fu nimbus.service # &lt;-- Monitor
```

&lt;br/&gt;

#  附录B — 更新Nimbus



如果你需要更新到Nimbus的最新版本，请按下列步骤进行：

首先，前往这里找到Nimbus的最新版本。将下方指令部分的URL改为最新版本的下载链接。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -LO https://github.com/status-im/nimbus-eth2/releases/download/v1.0.0-rc1/nimbus-eth2_Linux_amd64_1.0.0_3594fa2a.tar.gz
```

停止Nimbus客户端服务

``` Powershell
$ sudo systemctl stop nimbus
```

从存档里提出二进制文档，并复制 `/usr/local/bin`到目录。如果需要的话，修改URL名。

``` Powershell
$ tar xvf nimbus-eth2_Linux_amd64_1.0.0_3594fa2a.tar.gz
$ cd nimbus-eth2_Linux_amd64_1.0.0_3594fa2a
$ sudo cp build/nimbus_beacon_node /usr/local/bin
```

重新启动服务并检查错误。

``` Powershell
$ sudo systemctl start nimbus
$ sudo systemctl status nimbus # &lt;-- Check for errors
$ sudo journalctl -fu nimbus.service # &lt;-- Monitor
```

清理提出的文档。

``` Powershell
$ cd ~
$ sudo rm nimbus-eth2_Linux_amd64_1.0.0_3594fa2a.tar.gz
$ sudo rm -r nimbus-eth2_Linux_amd64_1.0.0_3594fa2a
```

&lt;br/&gt;

# 附录 C — 扩展逻辑卷


很多时候Ubuntu只预配200GB的较大固态硬盘，导致用户在同步他们的Eth1节点时就耗尽存储空间了。报错信息近似于：

``` Powershell
Fatal: Failed to register the Ethereum service: write /var/lib/goethereum/geth/chaindata/383234.ldb: no space left on device
```


为了解决这个问题，假设你有一个大于200GB的固态硬盘，你可以通过下列步骤为 [LVM](https://wiki.ubuntu.com/Lvm) (逻辑卷管理) 扩大容量：

``` Powershell
$ sudo lvdisplay # &lt;-- Check your logical volume size
$ sudo lvm 
&gt; lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv
&gt; exit
$ sudo resize2fs /dev/ubuntu-vg/ubuntu-lv
$ df -h # &lt;-- Check results
```


这会重新调整你的硬盘至它的最大可用空间。

如果你在这方面需要支持，请在 [EthStaker](https://discord.gg/7z8wzehjrJ) 的Discord上寻求帮助。

&lt;br/&gt;


# 完整免责声明

这篇文章（教程) 仅供参考，不构成专业建议。作者不保证文章中任何信息的准确性、质量、完整性、实效性与有效性。本文所有信息均按“原样”提供，不作任何形式的保证，并可随时更改，恕不另行通知。作者不因任何目的对任何形式的明示、暗示和法定保证负责，包括对文章内容的准确性、时效性、完整性或合适性的保证。作者也不对任何直接、间接、偶然、后果性或任何其他因使用本文或根据本文所提供的信息而造成的损害负责。这包括任何人身伤害、业务中断、使用损失、数据丢失、利润损失或任何其他金钱损失，无论是在合同、疏忽或其他不当使用中，即使作者已了解这种可能性。

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太坊2.0主网质押教学(Ubuntu/Teku)]]></title><description><![CDATA[手把手教学：以太坊2.0主网质押Teku篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-teku</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-teku</guid><pubDate>Tue, 15 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-lighthouse-41de20513b12)

![1](https://i.ibb.co/qNq2KWk/1.png)


本文基于ConsenSys的Teku客户端，详细讲解如何参与以太坊2.0主网质押。主要基于以下几个技术：

- [Ubuntu](https://ubuntu.com/) v20.04 (LTS) x64 server [Ubuntu](https://ubuntu.com/)  v20.04 (LTS) x64 服务器
- [Go Ethereum](https://geth.ethereum.org/) Node ([code branch](https://github.com/ethereum/go-ethereum))  [Go Ethereum](https://geth.ethereum.org/)  节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- [ConsenSys](https://consensys.net/knowledge-base/ethereum-2/teku/) ETH 2.0 客户端 —— Teku ([代码分支](https://github.com/PegaSysEng/teku))
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/) 


**提示：参与质押至少需要32 ETH 以及额外的gas费。 在搞清楚之前切记不要向任意地址发送ETH。本教程介绍了如何安全地将你的ETH存入存款合约。请牢记不要将ETH发送给任何人。**

&lt;br/&gt;

# 致谢


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢[EthStaker](https://discord.gg/7z8wzehjrJ)管理团队和提供教程的社区成员、Eth2 客户端团队、以及质押社区的帮助和校对。

特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

&lt;br/&gt;

# 免责声明


本文仅供参考，不构成专业建议。作为本教程的作者。我本人不保证文中信息的准确性，对于那些参考了本文进行操作而产生的任何损失概不负责。文末有更加完整的免责声明，请阅读之后再进行操作。

&lt;br/&gt;

# 支持


如需技术支持，请联系：

- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

​       Reddit：https://www.reddit.com/r/ethstaker/

​       Discord：https://discord.gg/7z8wzehjrJ

- Teku客户端团队，Discord: https://discord.gg/trQ378WCp4

&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、Linux、MetaMask (Portis或Fortmatic) 有一定的背景知识。

还需要准备：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机或云端安装和运行的Ubuntu服务器。

运行本地电脑有助于去中心化，因为如果云服务商崩溃了，那么托管在此服务商的所有节点都会随之崩溃。

- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-) (或Portis、Fortmatic)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 从测试网到主网


如果你从测试网设置转到主网设置，那么我强烈建议你在一个全新的 (新安装的) 服务器实例上开始。本教程没有对迁移场景进行测试，所以如果你使用的是此前安装过的测试网软件，那么无法保证你的操作能成功。

&lt;br/&gt;

# 要求


硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、8GB内存的RAM (16GB更佳)、一个内存至少500GB的SSD (1TB更佳)、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。

&gt;注意：检查你的可用磁盘空间。尽管你有一个容量较大的SSD，Ubuntu也会出现仅剩200GB可用空间的状况。如果你遇到这种情况，请查看附录C —— 扩展逻辑卷。

&lt;br/&gt;

# 概览


下面这个简化图表标明了本篇教程所涉及的范围，标黄的即是本文会覆盖到的部分：

![2](https://i.ibb.co/GTy57kG/p2.png)




整个流程可以概念化表述为：

- 生成验证者密钥对和存款数据
- 准备Ubuntu服务器 (防火墙、安全设置等)
- 设置一个Eth1 节点并同步Eth1 区块链的数据
- 配置Teku客户端并同步Eth1 节点数据
- 存款并激活验证者密钥对

那我们现在就开始吧！

&lt;br/&gt;

# 第1步：生成质押数据



参与质押首先要决定你想要运行的验证者节点的数量，并基于此生成一些数据文件。

&gt; 注意：如果你的存款数据和验证者密钥对已经生成，可以跳过这一步。

一个验证者节点需要存32 ETH，你的MetaMask钱包里要有相应足够的ETH。比如，如果你计划运行5个验证者节点，你将需要准备160 ETH (32*5) 并且预留一些gas费。存款过程会稍后再讲解，下面教大家怎么把设备运行起来。

## 下载存款工具 (存款CLI)


点击[此处](https://github.com/ethereum/eth2.0-deposit-cli/releases/)下载最新发布的存款命令行界面app (CLI app)。

下载链接：https://github.com/ethereum/eth2.0-deposit-cli/releases/

![3](https://i.ibb.co/Hgfx578/p3.png)




在“Assets”那一栏选择与你的设备 (如Windows、Mac、Linux Desktop等) 匹配的版本并下载。

## 运行存款工具 (Eth2 存款CLI)



解压文件，里面应该有一个二进制文件 (可执行文件)。存款工具生成用于质押的文件和一组助记词。这组助记词需要安全地保存。下面有两种选择：

**建议方案：**将这份二进制文件复制粘贴到USB驱动器里。连接到一台此前从未连接过网络的计算机，将文件复制到计算机里并开始运行。

**不建议方案：**在当前使用的计算机上运行。但是网络连接可能会导致你的助记词密钥泄漏。如果没有未联网的计算机，那就在开始运行之前断开网络。

准备好之后，在终端窗口 (或windows的命令提示符CMD) 中运行这份文件以继续使用下面列出的命令。确定好你要运行的验证者节点的数量之后，用该数字替换 `&lt;NumberOfValidators&gt;`。比如： `--num_validators 2`

Linux/Mac:

``` Powershell
./deposit new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

Windows:

``` Powershell
deposit.exe new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

在你选择的计算机执行上面的步骤之后，你将被要求创建一个**验证者密钥存储库 **(validator keystore) 密码，并保存在一个安全的地方。在后面的步骤中，你将需要这个keystore来上传验证者密钥到Teku的验证者钱包里。

![4](https://i.ibb.co/2gKWKW7/4.png)




随后会生成一组**助记词**，请保存在一个安全的地方，**这至关重要**。因为最终你需要助记词来生成提款密钥以提出质押的ETH，并且增加验证者节点时也需要使用助记词。如果你丢失了助记词，就无法将你的资产提出了。

![5](https://i.ibb.co/LRH1pw4/5.png)




一旦你点击确认已经记好助记词之后，你的验证者密钥对便会生成。

![6](https://i.ibb.co/1GjWJdx/6.png)





新创建的验证者密钥对和存款数据文件会放置在指定位置。文件夹的内容如下所示：

![Image for post](https://miro.medium.com/max/674/1*yVWwn8gADHODggVLiv2QlA.png)





关于这些文件：

· 文件 `deposit_data-[timestamp].json` 包含验证者公钥和质押存款信息。该文件将用于完成随后的ETH存款过程。

· 文件 `keystore-m...json` 包含经过加密的验证者签名密钥。每一个验证者节点对应一个“keystore-m”。该文件将被导入到Teku验证者钱包中以备质押时使用。随后需要将这些文件复制粘贴到Ubuntu服务器中。

## 最后的步骤



现在你已经有了存款数据和密钥存储文件，接下来就可以设置Ubuntu服务器了。

**注意：此时还不能进行存款。**

首先完成并验证你的质押设置非常重要。如果你的ETH存款激活了，但是质押设置还没准备好的话，你将会受到怠工惩罚。

&lt;br/&gt;

# 第2步：连接至服务器



使用一个SSH端口，连接至你的Ubuntu服务器。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的风险。

&gt; 注意：如果你不是用`root`登录的便可以直接跳到第三步。

创建一个新账户。在 `&lt;yourusername&gt;` 中填入你的用户名，然后设置一个安全系数较高的密码，并输入其他可选信息。

``` Powershell
# adduser &lt;yourusername&gt;
```



通过把新的用户加入`sudo`群组中，来授予其管理权限。这样用户在命令行前输入`sudo`，便会以超级用户的权限来执行操作。

``` Powershell
# usermod -aG sudo &lt;yourusername&gt;
```



可选项：如果你使用SSH密钥通过`root`用户连接你的Ubuntu系统，你需要将新创建的账户和root用户的SSH密钥数据组合起来。

``` Powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```



最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第3步：升级服务器



确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
$ sudo reboot
```

&lt;br/&gt;

# 第4步：保护服务器



安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 修改SSH默认端口


SSH默认端口是端口22，也是易受攻击的矢量，因此可以修改SSH端口来防止攻击。

在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。没有其他显示便意味着该端口号未被使用；显示红色便意味着已被使用，请尝试其他端口号。比如：`sudo ss -tulpn | grep &apos;:6673&apos;`

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;YourSSHPortNumber&gt;&apos;
```



确定端口号可用之后，通过升级SSH设置来修改默认端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```



在文件中检索或者添加 (如果没有的话) `Port 22` 命令行。删掉`#` (如果有的话) 并在下面的命令行中输入端口号。

``` Powershell
Port &lt;YourSSHPortNumber&gt;
```



参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![8](https://i.ibb.co/nLgq1wt/8.png)



重新启动 SSH 服务以显示上述所作的修改。

``` Powershell
$ sudo systemctl restart ssh
```



登出并使用你的SSH端口号`&lt;YourSSHPortNumber&gt;`重新登入。

## 配置防火墙



Ubuntu 20.04 服务器可以使用默认的 UFW 防火墙来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Teku 的入站流量。

**安装 UFW 防火墙**


按照下面的命令行输入以保证在默认情况下安装 UFW。

``` Powershell
$ sudo apt install ufw
```




**应用 UFW 默认值**



明确地应用默认值，拒绝入站流量，允许出站流量。

``` Powershell
$ sudo ufw default deny incoming
$ sudo ufw default allow outgoing
```

**允许 SSH**


允许你此前设置的端口号 `&lt;YourSSHPortNumber&gt;` 的入站流量。SSH 要求 TCP 协议。比如：`sudo ufw allow 6673/tcp`

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```

**拒绝 SSH 端口号22**

拒绝端口 22/TCP 的入站流量。

&gt; 注意：当你完成了修改 SSH 默认端口之后再做这一步。

``` Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**

允许与 Go Ethereum 的对等节点 (端口 30303) 进行点对点 (P2P) 连接。如果你使用第三方托管的 Eth1 节点，则可以跳过这一步。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许 Teku 客户端**



允许与 Teku 的对等节点进行点对点连接，以便在信标链节点上 (端口9000) 进行操作。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口9000 的入站流量。

``` Powershell
$ sudo ufw allow 9000
```



开启防火墙并检查是否已按上述步骤正确地配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```



参考下方的截图。

![9](https://i.ibb.co/rxSrX2k/9.png)





&lt;br/&gt;

# 第5步：配置定时器



Ubuntu 内置了时间同步，并默认使用 systemd‘s timesyncd 服务进行激活。验证其是否正确运行。

``` Powershell
$ timedatectl
```



激活  `NTP service` ，运行方式：

``` Powershell
$ sudo timedatectl set-ntp on
```



参考下方的截图：

![10](https://i.ibb.co/kmtMWHN/10.png)




只能使用单个定时器服务。如果你此前安装过 NTPD，你需要检查此文件是否还存在，如果存在请操作下面的命令行以删除。

``` Powershell
$ ntpq -p
$ sudo apt-get remove ntp
```

&lt;br/&gt;

# 第6步：设置一个 Eth1 节点


参与质押需要一个 Eth1 节点。你可以选择运行一个本地 Eth1 节点，也可以使用第三方提供的节点。本教程会详细讲解如何运行 Go Ethereum，如果你选择第三方服务的话，可以跳过这一步。

&gt; 注意：检查你的可用磁盘空间。一个Eth1节点需要大概400GB的存储空间。尽管你有一个容量较大的固态硬盘，Ubuntu也可能显示仅剩200GB的可用空间。如果你遇到这种情况，请查看附录C —— 扩展逻辑卷。

## 安装 Go Ethereum



使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
$ sudo apt update
$ sudo apt install geth
```


将Go Ethereum作为后台服务来运行，运行该服务需要创建一个账户。此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```



为Eth1区块链创建数据目录，用来存储Eth1节点数据。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```
.

设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```



创建一个systemd服务配置文件来对该服务进行配置。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```



将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Go Ethereum Client
After=network.target
Wants=network.target[Service]
User=goeth
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30[Install]
WantedBy=default.target
```



需要注意的 [flags](https://geth.ethereum.org/docs/interface/command-line-options)：

`--http` 用来公开与Teku信标链节点连接的一个HTTP端口 (http://localhost:8545)。


 `--cache` 指的是内部缓存的大小，以GB为单位。数值的增减取决于你的可用系统内存。设置 `2048` 将大概需要使用 4-5 GB的内存。


 `--maxpeers` 指的是所连接节点的最大数值。节点数量越多，意味着越多的网络数据可用空间。所以记得不要将该数值设置得太低，否则你的Eth1节点将难以保持同步。


参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![11](https://i.ibb.co/sRvF06X/11.png)







重新加载 systemd 以显示上述的更改并启动服务。检查状态以确保其正确运行。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo systemctl status geth
```



参考下方的截图：



![12](https://i.ibb.co/ZmYX2G9/12.png)




如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (此操作不会影响geth服务)。

允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```

Go Ethereum节点将会开始同步。你可以运行下列命令来追踪进程或检查错误。按“CTRL+c”退出 (此操作不会影响geth服务)。

``` Powershell
$ sudo journalctl -fu geth.service
```

参考下方的截图：



![13](https://i.ibb.co/8545pVm/13.png)





## 查看同步状态





要检查Eth1节点同步状态，请使用下列命令访问控制台。

``` Powershell
geth attach http://127.0.0.1:8545
&gt; eth.syncing
```

如果显示结果是 `false` ，表明你的同步已完成。如果显示结果是同步数据，表明你仍在同步。作为参考，大概有7-8亿个已知状态 `knownStates`.

参考下方的截图

![14](https://i.ibb.co/jWYfHLw/14.png)




完成时按“CTRL+d”以退出。

## 检查连接的对等节点



要检查你的Eth1节点所连接的对等节点，请使用下列命令访问控制台。

``` Powershell
geth attach http://127.0.0.1:8545
&gt; net.peerCount
```

对等节点总数 `peerCount` 不会超过你所设置的最大对等节点总数 `--maxpeers` 。如果无法找到需要同步的对等节点，参阅下一部分。

完成后按“CTRL+d”以退出。

## 添加 bootnodes (可选)


有时可能要花点时间才能找到要同步的对等节点，可以添加bootnodes以改善这种情况。访问https://gist.github.com/rfikki/a2ccdc1a31ff24884106da7b9e6a7453 获得最新的清单并根据下列操作修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```


修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等节点，并以逗号分割。

``` Powershell
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30 --bootnodes &quot;enode://d0b4a09d072b3f021e233fe55d43dc404a77eeaed32da9860cc72a5523c90d31ef9fab7f3da87967bc52c1118ca3241c0eced50290a87e0a91a271b5fac8d0a6@157.230.142.236:30303,enode://5070366042daaf15752fea340e7ffce3fd8fc576ac846034bd551c3eebac76db122a73fe8418804c5070a5e6d690fae133d9953f85d7aa00375d9a4a06741dbc@116.202.231.71:30303&quot;
```



保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -fu geth.service
```



&gt; 注意：需要按照一系列特定的步骤来更新Geth。更多信息请参见“附录A：更新Geth”。

&lt;br/&gt;

# 第7步：下载Teku



Teke客户端由两份二进制文件组成：信标链节点和验证者客户端。本步骤将讲解如何下载Teku二进制文件。



首先，访问https://github.com/ConsenSys/teku/releases并找到最新发布的Teku版本。通常在页面的最顶部，比如：

![15](https://i.ibb.co/KzYYwb9/15.png)







在“Downloads”那一栏选择“binary distribution”。



![15.5](https://i.ibb.co/DzqDTgX/15-5.png)







然后将下载链接复制粘贴至文档“**teku-…tar.gz**”中。请确保复制的链接是正确的。



![16](https://i.ibb.co/gvPmWfB/16.png)





操作下列命令来下载这些文件。将下方指令部分的URL改为最新版本的下载链接。


注意语法是 `curl -Lo &lt;outputfilename&gt; &lt;url&gt;`。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -Lo teku-20.11.0.tar.gz https://bintray.com/consensys/pegasys-repo/download_file?file_path=teku-20.11.0.tar.gz
```



从归档文件中提取二进制文件并复制到 `/usr/local/bin` 目录，Teku客户端会在该处运行这些文件。根据需求修改文档名。

``` Powershell
$ tar xvf teku-20.11.0.tar.gz
$ sudo cp -a teku-20.11.0 /usr/local/bin/teku
```



安装运行Java所必需的文件。

``` Powershell
$ sudo apt install default-jre
```



清理所提取的文档。如需要重命名文件夹。

``` Powershell
$ cd ~
$ sudo rm teku-20.11.0.tar.gz
$ sudo rm -r teku-20.11.0
```


&gt; 注意：需要按照一系列特定的步骤来更新Teku。更多信息请参见“附录B：更新Teku”。

&lt;br/&gt;

# 第8步：导入验证者密钥对

导入验证者密钥对以配置Teku。

## 复制验证者密钥存储文件


如果你的验证者存储文件 `keystore-m…json` 不是在你的Ubuntu服务器上生成的，那么你就需要将这些文件复制粘贴到你的本地目录中。你可以用 USB 把文件拷过去 (如果你的服务器是本地的)，也可以使用[安全的FTP (SFTP)](https://www.maketecheasier.com/use-sftp-transfer-files-linux-servers/)。

将文件放置在： `$HOME/eth2deposit-cli/validator_keys`。如果需要的话创建文件目录。

##  将密钥存储文件导入验证者



创建一个目录以存储验证者密钥并将包含`keystore-m…json` 文档的`validator_keys`目录复制过去。

``` Powershell
$ sudo mkdir -p /var/lib/teku
$ sudo cp -a /$HOME/eth2deposit-cli/validator_keys /var/lib/teku
```

不要**复制`deposit_data…json`文档过去。如果你复制了，就把它删了。

``` Powershell
$ cd /var/lib/teku/validator_keys
$ ls
$ sudo rm &lt;depositdatafilename&gt;
```



参考下方截图。

![17](https://i.ibb.co/F08pk4R/17.png)







## 创建验证者密码文档


在运行和自动重启服务的时候，Teku需要一个密码文档以访问每个验证者账户。

每一个`keystore-m...json`文档都需要一个对应的密码文档。即使每个验证者账户的密码是相同的这一步也是需要的。密码文档的命名需要与对应的 `keystore-m...json`文档相匹配。





获取密码存储文档列表

``` Powershell
$ ls /var/lib/teku/validator_keys
```

对于每个`keystore_m*.json`文档，都要创建一个名字相同的密码文档。



在你执行下一个命令前，以`&lt;jsonfilename&gt;`命名这个json文档。不要忘了在最后加上`.txt `。例如：`sudo nano /var/lib/teku/validator_keys/keystore-m_12381_3600_0_0_0–1606351647.txt`

``` Powershell
$ sudo nano /var/lib/teku/validator_keys/&lt;jsonfilename&gt;.txt
```



在txt文档里，用`YourKeystorePasswordForThisValidator`代替密钥存储密码 (你在第1步创建验证者文档时提供的密码)



参考下方截图。按 CTRL+x然后&apos;y&apos;，按回车保存然后退出。

![18](https://i.ibb.co/m9vcQYP/18.png)






对每个`*.json`文档重复以上步骤，直到每个json 文档都有一个包含对应密钥储存密码的txt文档。



参考下方截图。

![19](https://i.ibb.co/yknBGgh/19.png)






&gt; 注意：不应该出现一个`*deposit_data-\*.json*`文档。如果有，把它删了。它会引起报错，因为Teku会认为它有一个对应的密码文档。

&lt;br/&gt;

# 第9步：配置Teku服务



在这一步，你将要把Teku的信标节点作为服务来配置并运行，因此如果系统重启，这个过程将自动重新开始。

## 设置账户和目录

为信标节点的运行创建一个账户。这种账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false teku
```

## S设置权限

设置目录权限。Teku账户如果要修改在上一步创建的数据目录(`/var/lib/teku`)的话需要授权。

``` Powershell
$ sudo chown -R teku:teku /var/lib/teku
$ ls -dl /var/lib/teku
```

参考下方的截图。

![20](https://i.ibb.co/C10bDcH/20.png)









将文档权限应用于验证者密钥，以提供额外的安全性和防止以外删除。将读取/写入/执行授权给用户 (teku)。

``` Powershell
$ sudo chmod -R 700 /var/lib/teku/validator_keys
$ sudo ls -lh /var/lib/teku/validator_keys
```



参考下方的截图。

![21](https://i.ibb.co/qFnCT24/21.png)









## 创建和配置服务



创建一个systemd服务的config文档来配置服务

``` Powershell
$ sudo nano /etc/systemd/system/teku.service
```

将下面这段代码复制粘贴到文档里

``` Powershell
[Unit]
Description=Teku Eth2 Client
Wants=network-online.target
After=network-online.target[Service]
User=teku
Group=teku
Type=simple
Restart=always
RestartSec=5
Environment=&quot;JAVA_OPTS=-Xmx2g&quot;
ExecStart=/usr/local/bin/teku/bin/teku --data-base-path=/var/lib/teku --eth1-endpoint=http://localhost:8545 --validator-keys=/var/lib/teku/validator_keys:/var/lib/teku/validator_keys --rest-api-enabled=true --rest-api-docs-enabled=true --metrics-enabled --validators-graffiti=&quot;&lt;yourgraffiti&gt;&quot;[Install]
WantedBy=multi-user.target
```

需要注意的 [flags](https://docs.teku.consensys.net/en/latest/Reference/CLI/CLI-Syntax/):



`Environment=”JAVA_OPTS=-Xmx2g”` 限制了堆积大小为2GB，因此Teku的运行可用总内存约为 3–3.5GB。

`--eth1-endpoint`如果你使用的是一个远程的或第三方的Eth1节点，改变这个值。如果你是在本地创建这个Eth1节点的，则不需要改变。 

`--validators-graffiti=&quot;&lt;yourgraffiti&gt;&quot;` 填上你自己的涂鸦字符串。出于安全与隐私，应避免使用能唯一辨识你的信息。比如`--graffiti &quot;Hello Eth2! From Dominator&quot;`。

参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![22](https://i.ibb.co/fdGZrHQ/22.png)






重新加载systemd以显示更改。

``` Powershell
$ sudo systemctl daemon-reload
```



&gt; 注意：如果你是运行本地的Eth1节点（看第6步），你应该等待至它完全同步完数据再启动Teku服务。在这里查看进程：`*sudo journalctl -fu geth.service*`

启动服务并检查，确保运行正确。

``` Powershell
$ sudo systemctl start teku
$ sudo systemctl status teku
```

参考下方的截图

![23](https://i.ibb.co/QpgYGTc/23.png)





如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (不会影响 teku的服务)。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable teku
```



如果Eth2 链处于创世后的状态，Teku信标链会开始同步数据。它可能要花几个小时才能完全实现同步。你可以通过运行`journalctl` 命令来追踪进程或检查错误。按CTRL+c退出 (将不会影响teku的服务)

``` Powershell
$ sudo journalctl -fu teku.service
```



日志的截位视图会显示以下状态信息。

``` Powershell
Nov 26 21:00:50 ETH-STAKER-001 teku[41629]: 21:00:50.573 INFO  - Eth1 tracker successfully caught up to chain head
Nov 26 21:10:49 ETH-STAKER-001 teku[41629]: 21:10:49.010 INFO  - 4 days 14 hours 49 minutes 34 seconds until genesis time is reached. Peers: 74
```



当Eth2主网启动，信标链和验证者将自动开始处理数据。



你可以在 [beaconcha.in](https://beaconcha.in/)查看你的验证者状态。只需要搜索你的验证者公钥或使用你的MetaMask （或其他）钱包地址进行搜索。你的数据可能要过一段时间才会在网站上显示。

&lt;br/&gt;

# 第10步：进行验证者存款



现在你的节点已经设置好并开始运行，你将需要将ETH存入你的验证者节点。


&gt; 注意：如果你已经提交了你的质押存款，你可以跳过这一步



这一步是关于将所需的ETH存入Eth2.0的存款合约。不要把ETH发送到存款合约。这需要在浏览器上通过Eth2.0的Launchpad网站启动你的MetaMask (或其他) 钱包。

&gt; 注意：如果是在创世后进行的话，你需要在你的Eth1节点和信标链都完全同步完之前存入你的存款。如果你不这样做，当你的Eth1节点或信标链在同步时，Teku会处于怠工状态，而你可能要遭遇怠工惩罚。

以太坊2.0 Launchpad: https://launchpad.ethereum.org/

一直随着屏幕切换点击这些警告步骤，直到你到达**密钥对生成**的部分。选择你打算运行的验证者数量。选择一个与你在步骤1中生成的验证者文件数量相匹配的值。



![27](https://i.ibb.co/CwKwHzQ/p27.png)

往下滚动，看这些内容你是否同意，然后点击“Continue” (继续)。

![28](https://i.ibb.co/LdJsJwY/p28.png)

你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在步骤1生成的。浏览/选择或拖拉这个文档，然后点击Continue。

![29](https://i.ibb.co/PTkh7gD/p29.png)

连接你的钱包。选择MetaMask (或者是其他支持的钱包)，登录，选择存有你的ETH的钱包，然后点击Continue。

你的MetaMask余额就会显示出来。如果你选择了主网且你有充足的ETH余额，网站会允许你继续下一步。

![30](https://i.ibb.co/tqrFPLV/p30.png)

然后会出现一个Summary (总结)，显示验证者数和所需的ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![31](https://i.ibb.co/jktcfzz/p31.png)

如果你准备好去存款了，点击&quot;Initiate All Transactions&quot; (启动所有交易）。

![32](https://i.ibb.co/NFbJXL5/p32.png)

 当你到了可以确认每笔交易那一步时，MetaMask (或其他钱包)的窗口会自动弹出。 

当所有的交易都成功完成时，你的质押也完成了！

![33](https://i.ibb.co/kq7Cn7v/p33.png)

恭喜你已经成功存入你的质押存款了！

## 查看你的验证者存款状态

新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

1. 复制你的MetaMask (或其他）钱包地址。

2. 前往这里: [beaconcha.in/](https://beaconcha.in/) 

3. 用你的钱包地址搜索你的密钥

![34](https://i.ibb.co/JQYHLPH/p34.png)

点进某个验证者详情，每个验证者激活后你会看到在Status那一栏有预估时间。

![35](https://i.ibb.co/nbPs42c/p35.png)

现在你面前有一个条正在运作的信标链、一个验证者节点以及你的主网存款。如果以太坊2.0主网处于运行中，一旦你的存款被激活，你将开始工作并赚取收益。

**恭喜你：你终于正式成为了一名以太坊质押者**

 是时候来一顿肥宅水狂欢了。

&lt;br/&gt;

# 第11步：监测

因为一些还没被解决的安全问题，监测这一部分将在未来补充到这份教程。

# 结束语及后续建议

感谢大家给我这个机会。希望这份教程能帮到大家。

**后续步骤:**

\- 检查三次所有密钥与密码备份。

\- 重启你的电脑并确保服务都能自动启动。

\- 了解如何升级客户端与服务器软件。

\- 使用`htop`来监测本地电脑的资源

\-  熟悉[beaconcha.in](https://beaconcha.in/) ，这样你就能监测你的验证者情况，其提供警报功能 （通过邮件发送，需要注册）和最多[3个POAP](https://beaconcha.in/poap)。

\-  加入 [Ethstaker](https://discord.gg/7z8wzehjrJ)和[Teku](https://discord.gg/trQ378WCp4)的Discord，留意重要通知。

\- 请在[Discord](https://discord.gg/7z8wzehjrJ)、 [Twitter](https://www.twitter.com/SomerEsat)、或[Reddit](https://www.reddit.com/user/SomerEsat)分享对这份教程的反馈。

\- 在 [Ethstaker](https://discord.gg/7z8wzehjrJ) 的discord上帮助其他人设置。

\- 用[friend link](https://someresat.medium.com/41de20513b12?source=friends_link&amp;sk=ac7477fd99b6648a5745a3e327f2701c)分享这份教程

\- 支持一下：somer.eth



&lt;br/&gt;

# 延伸阅读

强烈建议大家从尽可能多的来源获取信息，还有很多其他资源可以帮助你熟悉如何在Eth2上质押。

如果作者对这些资源还没测试或验证过，而你采用了的话，是要自己承担风险的。

\- 客户端团队的官方文档 [Prysm](https://docs.prylabs.network/docs/getting-started) | [Lighthouse](https://lighthouse-book.sigmaprime.io/) | [Teku](https://docs.teku.consensys.net/en/latest/) | [Nimbus](https://status-im.github.io/nimbus-eth2/intro.html)

\- [/r/EthStaker Sticky](https://www.reddit.com/r/ethstaker/comments/jjdxvw/welcome_to_rethstaker_the_home_for_ethereum/)

\- [以太坊2.0客户端的非官方docker环境](https://github.com/eth2-educators/eth2-docker)

\- [如何在Ubuntu上设置Eth2主网验证者系统](https://github.com/metanull-operator/eth2-ubuntu)

\- [指南 | 如何在ETH2主网设置验证者](https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet)

\- [指南 | ETH2验证者信标链节点的安全最佳实践](https://www.coincashew.com/coins/overview-eth/guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node) 

\- [ETH2质押节点的额外监察](https://moody-salem.medium.com/additional-monitoring-for-eth2-staking-nodes-aea05b2f9a86) 

\- [以太坊2.0质押的Telegram服务](https://9elements.com/blog/ethereum-2-0-2/) https://9elements.com/blog/ethereum-2-0-2/)

# 附录A — Geth更新

如果你需要更新到Geth的最新版本，请按下列步骤：

``` Powershell
$ sudo systemctl stop teku
$ sudo systemctl stop geth
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo systemctl start geth
$ sudo systemctl status geth # &lt;-- Check for errors
$ sudo journalctl -fu geth # &lt;-- Monitor
$ sudo systemctl start teku
$ sudo systemctl status teku # &lt;-- Check for errors
$ sudo journalctl -fu teku.service # &lt;-- Monitor
```

&lt;br/&gt;

# 附录B — 更新Teku


如果你需要更新到Teku的最新版本，请按下列步骤进行：

 首先，前往[这里](https://github.com/ConsenSys/teku/releases)找出最新的Linux发布。在Downloads那一栏，点击&quot;binary distribution&quot;。然后复制下载连接到**teku-…tar.gz**文档。确认你复制的是正确的链接。

将下方指令部分的URL改为最新版本的下载链接。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -Lo teku-20.11.0.tar.gz https://bintray.com/consensys/pegasys-repo/download_file?file_path=teku-20.11.0.tar.gz
```

 停止Teku客户端服务。

``` Powershell
$ sudo systemctl stop teku
```

从存档里提出二进制文档，并复制 `/usr/local/bin`到目录。如果需要的话，修改URL名。

``` Powershell
$ tar xvf teku-20.11.0.tar.gz
$ sudo rm -r /usr/local/bin/teku # &lt;-- Remove the old files
$ sudo cp -a teku-20.11.0 /usr/local/bin/teku
```

. 重新启动服务并检查错误。

``` Powershell
$ sudo systemctl start teku
$ sudo systemctl status teku # &lt;-- Check for errors
$ sudo journalctl -fu teku.service # &lt;-- Monitor
```

 清理提出的文档。如果需要的话，修改文档名称。

``` Powershell
$ cd ~
$ sudo rm teku-20.11.0.tar.gz
$ sudo rm -r teku-20.11.0
```

# 附录 C — 扩展逻辑卷

很多时候Ubuntu只预配200GB的较大固态硬盘，导致用户在同步他们的Eth1节点时就耗尽存储空间了。报错信息近似于：

``` Powershell
Fatal: Failed to register the Ethereum service: write /var/lib/goethereum/geth/chaindata/383234.ldb: no space left on device
```



为了解决这个问题，假设你有一个大于200GB的固态硬盘，你可以通过下列步骤为 [LVM](https://wiki.ubuntu.com/Lvm) (逻辑卷管理) 扩大容量：

``` Powershell
$ sudo lvdisplay # &lt;-- Check your logical volume size
$ sudo lvm 
&gt; lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv
&gt; exit
$ sudo resize2fs /dev/ubuntu-vg/ubuntu-lv
$ df -h # &lt;-- Check results
```


这会重新调整你的硬盘至它的最大可用空间。

如果你在这方面需要支持，请在 [EthStaker](https://discord.gg/7z8wzehjrJ) 的Discord上寻求帮助。

&lt;br/&gt;

# 完整免责声明

这篇文章（教程) 仅供参考，不构成专业建议。作者不保证文章中任何信息的准确性、质量、完整性、实效性与有效性。本文所有信息均按“原样”提供，不作任何形式的保证，并可随时更改，恕不另行通知。作者不因任何目的对任何形式的明示、暗示和法定保证负责，包括对文章内容的准确性、时效性、完整性或合适性的保证。作者也不对任何直接、间接、偶然、后果性或任何其他因使用本文或根据本文所提供的信息而造成的损害负责。这包括任何人身伤害、业务中断、使用损失、数据丢失、利润损失或任何其他金钱损失，无论是在合同、疏忽或其他不当使用中，即使作者已了解这种可能性。

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[Eth2更新进展（截至2020/12/12）]]></title><description><![CDATA[罚没事件回顾；免信任质押池新思路]]></description><link>https://www.ethereum.cn/wnie2-2020-12-12</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-12-12</guid><pubDate>Tue, 15 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What&apos;s New in Eth2](https://hackmd.io/@benjaminion/wnie2_201212)


&lt;br/&gt;
# 致谢


感谢每一位在 [Gitcoin Grant](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification) 上支持过我的人！总共有超过一百位捐献者。我太感动了，所以我一定会继续推进注释版规范的编写。我们没有为 Teku 设置 grant 页面，有时候我会被问及这个问题，如果大家想要支持 Teku，可以考虑在本轮中对其他[支持 Eth2 的项目](https://twitter.com/benjaminion_xyz/status/1335139536381341697)进行捐赠。

&lt;br/&gt;

# 阶段0：信标链


自 Eth2 创世以来已经十来天了，信标链一直在正常运行！


创世活动非常顺利，[以太坊基金会和 EthStaker 联合举办的创世派对](https://www.youtube.com/watch?v=ciE75qkZXFw) 非常有趣，在 YouTube 超过了五万观看量。Ethhub 举办的直播也提供了[播客](https://podcast.ethhub.io/ethereum-20-genesis-livestream)和 [YouTube](https://www.youtube.com/watch?v=R8xuTHTzoBw) 播放。Coin Jazeera 以其奇特的风格报道了 Eth2 的创世。


大家[建议]((https://twitter.com/trent_vanepps/status/1333245682048770050))创世区块的提议者能够在涂鸦字段 (任意32字节即可) 记录一些意义深远的信息，[现实]((https://beaconcha.in/block/1))如下：

&gt; Mr F was here


Vitalik 看起来似乎表示[赞许]((https://twitter.com/VitalikButerin/status/1333744735735795712))！根据 [Hudson](https://twitter.com/hudsonjameson/status/1333754154641215488) 的推文，“Mr. F 与 Queen 乐队有关，Vitalik 还进行了签名。”


随着大家对 Eth2 的信心增长，存款合约中的存款在持续累积。可以在[此处](https://www.duneanalytics.com/hagaetc/eth2-0-deposits)查看进度。

译者注：截至译文发布，已经有 ETH被质押，超过了 ETH 总量的 [1%](https://twitter.com/evan_van_ness/status/1335609788990967808)。活跃验证者为[33,427](https://beaconcha.in/)，队列中的验证者数量为[12,683]，目前激活队列的排队时长约两周多 。

大家可以在推特上关注 [Eth2 Rewards Bot](https://twitter.com/Eth2Bot) 来获取信标链状态。很高兴在45000笔存款中只有一笔[无效存款](https://twitter.com/etherscan/status/1336180806306263045)，且只有1 ETH。



网络参与率一直在 99% 徘徊，这是一个非常健康的指标。我的 Teku 节点也在占用少量 CPU 和少量内存的情况下正常运行，完美同步。这符合我之前的[预测]((https://twitter.com/benjaminion_xyz/status/1318222160926736384))。


Barnabé Monnot 针对前1000个 epochs (约4.4天) 进行了全面[分析](https://ethereum.github.io/rig/eth2data/notebooks/mainnet_explore.html)。总的来说，信标链正在井井有条地运行。

## 罚没


最戏剧化的是到目前为止，已经发生了五起明显的大额[罚没事件](https://beaconcha.in/validators/slashings)。值得一提的是，被罚没可能并不像听起来那么严重。当前会立即实施的罚款只有 32 ETH 中的 0.25 ETH，除此之外可能还有其他惩罚。主要的痛点是您的ETH现在已在信标链中锁定且处于不可用状态，直到建立了某种退出机制。

1.  第一个被罚没的验证者[20075](https://beaconcha.in/validator/20075)是因为提议了[矛盾区块](https://beaconcha.in/block/6669#proposer-slashings) (模棱两可)。根据[报告](https://twitter.com/phil_eth/status/1334227606359699456)，该用户使用同一个密钥运行了两个验证者。

2. 接下来的[十个被罚没的验证者](https://beaconcha.in/dashboard?validators=4086,4100,4102,4110,4259,4390,4451,13869,18249,21574)都来自 Ankr 的 [Stkr](https://www.ankr.com/stkr) 服务，罚没原因是做出矛盾证明。据 [Ankr 的报告](https://twitter.com/ankr/status/1334988119163203588)，事件缘由是他们的 (home-brew) 罚没保护基础设施出现故障，验证者重启后被允许进行环绕投票 (被禁止的验证者行为之一)。客户端都内置了环绕投票的预防措施，因此尚不明确是具体是哪里出现了问题。

3. 第三个被罚没的[验证者18177](https://beaconcha.in/validator/18177)是因为[双重提议](https://beaconcha.in/block/22374#proposer-slashings)。相同高度的矛盾区块包含不同的涂鸦 (graffiti)。最可能的原因是使用同一个密钥在不同地方运行验证者，该行为的目的可能是尝试获取“[POAP](https://beaconcha.in/poap)”。

4.第四个被罚没的[验证者25645](https://beaconcha.in/validator/25645)也是因为[双重提议](https://beaconcha.in/block/40772#proposer-slashings)。该验证者在 [EthStaker 论坛](https://www.reddit.com/r/ethstaker/comments/k8aszv/does_validator_can_not_process_twice_ive_been/)上称其使用同一个密钥设置了两个验证者。

5. 第五个被罚没的[验证者7635](https://beaconcha.in/validator/7635)是因为对同一个目标检查点给出了[两份证明](https://beaconcha.in/block/43920#attester-slashings)。


以上其中至少三起罚没事件，都源于我们反复提醒过的不当操作：在多处同时使用同一个密钥运行验证者。无论如何请[切忌这样做](https://twitter.com/benjaminion_xyz/status/1334881186003492864)！


大家有可能在尝试进行冗余配置。*这是错误的想法！*短期离线 (一两天) 对于验证者长期的奖励总额不会有太大影响，比起被罚没这更为可取。用Vitalik的话来说：“不要用力过猛 (don’t try so hard)”！Carl Beekhuizen 在以太坊基金会博客的文章 *[Perfect is the enemy of the good](https://blog.ethereum.org/2020/12/10/validated-perfect-is-the-enemy-of-the-good/)* 中对此进行了更详细的解读。另，Prysm 客户端团队的 Raul Jordan 也撰写了一篇  *[Eth2 Slashing Prevention Tips](https://medium.com/prysmatic-labs/eth2-slashing-prevention-tips-f6faa5025f50)* 来帮助大家避免被罚没，这适用于所有客户端。


关于罚没，Blox Staking 的 Alon Muroch 发文阐述了[最小罚没保护](https://alonmuroch-65570.medium.com/minimal-slashing-protection-45e679af235a)。这与 Teku 前阵子加入的本地罚没保护不谋而合：简洁至美。Alon 的文章没有包含区块提议，但这部分内容不多。

## 测试网


当前的测试网是 [Pyrmont](https://pyrmont.beaconcha.in/)，目前在平稳运行中 (90% 的验证者由客户端团队和 EF 运行)。目前进入不需要排队，我们希望 Pyrmont 至少在一月结束前都作为主要的测试网。

## 工具


我非常喜欢这个社区的一点在于：每当产生需求和机会时，总有人会出现。对于不断壮大的工具生态系统来说也是如此。 

- 感谢 [Beaconcha.in](http://beaconcha.in/) 推出了监测验证者的[移动版应用](https://twitter.com/etherchain_org/status/1336949569498853377)。我正在使用，非常不错
- 信标节点和验证者的[脚本安装](https://www.reddit.com/r/ethstaker/comments/kadtfd/is_this_the_easiest_way_to_setup_a_node_yet_i/) (目前只有 Pyrmont 测试网的 Lighthouse 版本)
- CoinCashew 在他们的客户端安装教程中加入了一个部分，介绍如何使用谷歌云的免费服务来[监测节点的运行时间](https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet#6-4-monitoring-with-uptime-check-by-google-cloud)。此处是一个[视频](https://www.youtube.com/watch?v=txgOVDTemPQ)教程
- 既然说到谷歌了，这里还有一篇来自 Nansen 关于[使用Google BigQuery 对以太坊2.0进行 ETL](https://research.nansen.ai/ethereum-2-0-etl-and-medalla-data-in-google-bigquery/) 的文章，我之前没有留意到
- 来自Stakewise的 [BLS Horcrux](https://github.com/stakewise/bls-horcrux) 使用Shamir的私密共享免信任地创建了 BLS 阈值签名
- 我的同事 Adrian Sutton [展示](https://www.symphonious.net/2020/12/04/exploring-eth2-attestation-inclusion-rates-with-chaind/)了如何使用 [`chaind`](https://github.com/wealdtech/chaind) 工具 (来自Medalla 数据竞赛[冠军](https://blog.ethereum.org/2020/11/17/medalla-data-challenge-results/) Jim McDonald) 来监测节点性能。(Adrian 在其中发现了一个与字节序相关的bug)
- Protolambda 为客户端 API 提供了[测试生成器](https://github.com/protolambda/eth2-api-testgen)
- 此处是一个新项目，为监测 Eth2 节点状态[创建接口](https://github.com/dmtsys/eth2-nodes-uptime-monitoring)，目前正在寻求贡献者。

## 质押服务

目前有一些质押服务商的列表：
  

- [Stakefish](https://stake.fish/en/ethereum/services/)

- [StakingEther](https://stakingether.com/)

- [Beaconcha.in](https://beaconcha.in/stakingServices)


[EthStaker 社区](https://www.reddit.com/r/ethstaker/comments/jsuv8c/the_ethstakers_have_initialized_the_ethereum_due/)正在组建一个以太坊尽职委员会 ([Ethereum due diligence committee](https://ethddc.org/)) 来对质押服务进行评估。大家可以在[这里](https://www.youtube.com/watch?v=Tm1xnP6hbBY&amp;list=PLOB9GGXGcc30Inhp5bU8hmi4POCDR0Pnn)查看此前的讨论。

大家使用的质押服务可能出现在[这里](https://hackmd.io/@benjaminion/advertising)哦。

&lt;br/&gt;

# 路线图


Vitalik 更新了他的 [Eth2 路线图](https://twitter.com/VitalikButerin/status/1333922620857745408)，新加入了进度条。


其中强调的主要变化，即我们之前注意到的，Eth1/Eth2的合并进程，以及我们现在会并行进行分片和请客户端的工作。合并的主要可能方案是[可执行信标链](https://ethresear.ch/t/executable-beacon-chain/8271?u=benjaminion)，目前在由 Mikhail Kalinin 进行原型开发。


Vitalik 还提出了一些[协议上的调整](https://hackmd.io/@HWeNw8hNRimMm2m2GH56Cw/HkTzLKOov)，可能会在短到中期内实施。对于客户端来说，其中一个挑战在于如何处理及时处理 epoch 转换：epochs 的前几个区块在 Pyrmont 测试网中常常成为孤块，而 epoch 之初的证明经常都不正确。这个问题尚未对信标链产生影响，但是越早解决这个问题越好，这是提案的目标之一。


对于更短期来说，一种其他形式的提款机制也正处于讨论中。当前的机制是，一旦你进行了质押，你需要保管好 BLS 私钥，用于在将来从信标链中提取存款，但是具体的提款机制还没有进行设计。这对于个人质押这来说问题不大，但是对于免信任的质押池来说则不然，因为他们需要通过一个智能合约来管理提款。既然 Eth1 和 Eth2 的合并可能会来得更早，还是需要对这种机制进行规划，至少在实现方式上要达成一定的确定性。我们在上期对一些提案进行了[论述](https://hackmd.io/@benjaminion/wnie2_201130#Research)，Dmitry Shmatko 也发表了[他的方案](https://ethresear.ch/t/make-validator-withdrawals-great/8334?u=benjaminion)。



Lakshman Sankar 写了篇文章[支持质押池](https://www.lakshmansankar.com/#/staking-pools)，并且参与了 [EthStaker 第12次社区会议](https://www.youtube.com/watch?v=kJCj-c-4tZU) 进行相关讨论。自那之后，规范出现了一条 [PR](https://github.com/ethereum/eth2.0-specs/pull/2149)，Superphiz 对此进行了一些[评论](https://www.reddit.com/r/ethstaker/comments/kbgvpk/this_is_gentlemen_udjrtwo_has_submitted_a_request/)。这份 PR 中的内容在技术上来说没有难度，甚至不需要对信标链进行分叉。对明确的承诺达成共识是一件好事。

&lt;br/&gt;

# 文章与媒体资源

关于配置和质押的资源：

- Coogan Brennan 的运行验证者系列[之二](https://consensys.net/blog/featured/my-journey-to-becoming-a-validator-on-ethereum-2-0-part-2/)
- Tyler Underwood，自称非技术人员：[Eth2 on MacOS: 非技术新手指南](https://lighthouse.sigmaprime.io/macos-guide.html)
- Argent 的 Graeme Blackwood：[一名设计师的 Eth2 验证者指南](https://www.argent.xyz/blog/eth-2-validator-setup/)。整个过程中他的决策基本上是没问题的，除了一个迷惑的决策（你发现了吗？） [[1\]](https://hackmd.io/@benjaminion/wnie2_201212#fn1)



Superphiz：

- Phiz 和 Defi Dad 一起出现在 [Yield TV](https://www.pscp.tv/w/1RDGlPjPZjjGL) 讨论如何参与 Eth2 质押 (前20分钟)
- 他依然在持续每天发布短视频，讨论质押相关的重要话题。此处是 Superphiz 的 [State of the Stake](https://www.youtube.com/watch?v=SMVN66mU7tw&amp;list=PLOB9GGXGcc31_rKi1PlG0kGYf35e6l1wy) 播放列表



关于权益证明：

- Yule Souza Andrade 的系列推文：[PoS 的优势 (简单版)](https://twitter.com/yulesa/status/1333506601291014148)
- Vitalik 参加 Bankless 的播客：[为什么选择 PoS？](https://www.youtube.com/watch?v=Hvdaw78kP6s)
- 我的 ConsenSys 同事 Meredith Baxter 为 Teku 的快照同步制作了一个[视频 demo]https://www.youtube.com/watch?v=Oz3flfj50Ig，并且阐释了 PoS 中的长程攻击。

Messari:

- Messari 和 BisonTrails 发布了长达[70页的报告](https://messari.io/road-to-eth2)：”ETH 2.0: The Next Evolution of the Cryptoeconomy“ (ETH2.0，密码经济的下一次演进)。需要注册，但值得下载。由Wilson Withiam 和 Ryan Watkins撰写。
- Wilson Withiam 的[系列推文](https://twitter.com/WilsonWithiam/status/1333781766436483073)对 Eth2 的历史进行了回顾 (完整报告的前菜)
- Ryan 和 Wilson 参与了 Bankless 的播客，对该报告进行了讨论。 [视频](https://www.youtube.com/watch?v=pmiseBiDjG0)，[播客](http://podcast.banklesshq.com/sotn25-road-to-ethereum-20-w-ryan-watkin-wilson-withiam-of-messari)。
- 他们也参加了 Unchained 的[播客](https://unchainedpodcast.com/ethereum-2-0-what-you-need-to-know/) (时长一小时，提供文本） 


明显是到了以太坊 2.0相关报告出炉的季节了。Delphi 也发布了一份报告，但仅向会员开放。


008BisonTrails 的 Viktor Bunin 一直在输出关于 Eth2 的内容，此处是 [007](https://bisontrails.co/eth2/007/) 和 [008](https://bisontrails.co/eth2/008/)。


Afri 参与了 [Outlier Ventures](https://twitter.com/OVioHQ/status/1335934818295672832) 在Crowdcast 上的 [Eth2 AMA](https://www.crowdcast.io/e/eth2-nodes-networks-staking)。


最后，Blox Staking 的 Alon Muroch 在 12 月 11 日参与了秘密共享验证者 (Secret Shared Validators) 的社区会议。此处是他的[幻灯片](https://docs.google.com/presentation/d/1t2qkIRaQ76hBXCfTqTlZYV88868YIgiBCpXKHXSTA6c/edit#slide=id.g712b570bb1_0_63)，展示了 SSV 如何助力免信任质押池，以及其中的优劣所在。

&lt;br/&gt;

# 常规会议

## 实现者会议


12 月 3 日进行了第53次实现者会议。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/193) 
- [会议视频](https://youtu.be/8mE--yxMZtk?t=42)
- 我的[会议速记](https://hackmd.io/@benjaminion/SJphODIiv)，以及 [Mamy 的笔记](https://gist.github.com/mratsim/d35a5171c52d3b998b492e9512f6cee7)

没什么大消息，我们讨论了一下测试网的发展。总结：我们会持续运行 Pyrmont 到一月结束。

## 网络


我们在 10 日进行了 networking 的常规会议，三个月来的首次。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/194)
- [我的速记](https://hackmd.io/@benjaminion/HySRGsJ2D)



其中有许多不错的讨论，要了解细节需要参与进来。

&lt;br/&gt;
&lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/12/14]]></title><description><![CDATA[加密艺术新星beeple以 77 万多美元的价格成功拍卖其作品。]]></description><link>https://www.ethereum.cn/eth-Weekly-2020-12-14</link><guid isPermaLink="false">https://www.ethereum.cn/eth-Weekly-2020-12-14</guid><pubDate>Mon, 14 Dec 2020 00:00:00 GMT</pubDate><content:encoded>![0](https://i.ibb.co/xmSPh5X/20201214214752.png)

# Eth2

### Eth2 Staking奖励更新

根据@Eth2 Rewards Bot，截至今天早上为止，验证者网络状态：质押年化率15.31%，网络参与率99.18%，活跃验证者32,155名。验证者队伍情况：排队时间为14天7小时，等候验证者有12,861名，对质押年化率的影响为-1.50%。预测年收益为4.9 ETH。

![p1](https://i.ibb.co/tLrzwXv/1.png)

 

### Beaconcha.in推出验证者app

![p2](https://i.ibb.co/5hQCwFx/2.png)



Bitfly公司宣布beaconcha.in的Eth2.0验证者浏览器上线移动版本，功能包括：验证者遇到问题时会收到警示；追踪用户的验证者状况；所使用的客户端发布更新时用户会收到提醒。

安卓端：https://t.co/rtDjQVFW2H?amp=1

IOS端：https://t.co/TTblh9jZU2?amp=1

 

### 信标链前1000个epoch分析

以太坊研究员Barnabé Monnot于12月7日发表了报告《探索eth2前1000个epoch》([Exploring the first 1000 epochs of eth2](https://ethereum.github.io/rig/eth2data/notebooks/mainnet_explore.html)) ，分析了eth2主网在epoch 0到1000 (2020-12-05 22:40:23 UTC) 的数据。报告重新梳理了一个聚合证明 (aggregate)里不同组成部分的角色与职责，总结了这些前1000个epoch各部分证明的正确率，以及集合证明里的一些常见问题，还整理了一个集合词汇表，以下是ECN的翻译

| 名称                                | 解释                                                         | 统计数据                                                     | 建议                                       |
| :---------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------- |
| 聚合证明 （Aggregate）              | 集合了单个委员会中验证者投票的证明                           | 在slot 0到32031里有309426个聚合                              | 无                                         |
| 个人证明（Individual attestation ） | 单个、唯一的验证者的投票                                     | 有22,522,856份个人证明                                       | 无                                         |
| 存款率（Savings ratio）             | 个人证明与聚合证明里的比率                                   | 存款率是72.79                                                | 继续提高!                                  |
| Redundant aggregate                 | Redundant aggregate包含已经打包到链上的验证者证明，这些验证者证明还可能在不同的聚合里有不同的证明索引。 | 有17,564个Redundant aggregate被打包了，占所有聚合的5.68%     | 不要重复打包聚合证明                       |
| Myopic redundant aggregate          | Myopic redundant aggregate包含被重复打包到链上的验证者证明，且这些证明索引经常是相同的。 | 有5,027个Myopic redundant aggregate，展所有冗余聚合证明的28.62%，和所有聚合证明的1.62% | 这两种Myopic redundant aggregate都不要打包 |

下一个表格给出了几种聚合证明分类的定义，它们指的是在同一个区块里出现了两种或更多的状况，但还是那五个属性（证明slot、委员会、信标根、来源根与目标根）。

| 名称               | 解释                                                         | 统计数据                                                     | 建议                                                         |
| :----------------- | :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |
| 严重冗余聚合证明   | 被重复打包到同一个区块的聚合证明                             | 存在严重冗余聚合证明                                         | 只保留一个严重冗余聚合证明                                   |
| 子集聚合证明       | 如果不是严重冗余聚合证明，那就是在同一个区块里完全包含在另一个聚合证明里的聚合证明 | 在slot 32,000之前有843个自己聚合证明，占所有聚合证明的0.27%  | 抛弃所有的子集聚合证明                                       |
| 严重冲突的聚合证明 | 如果不是一个子集聚合证明，那就是具有索引 I 证明的聚合证明，且同一个区块中存在另一个具有索引 J 的聚合证明，两个聚合证明的关系是 I∩J≠∅。 | 在slot32,000前面有35,543个严重冲突的聚合证明，占所有聚合证明的11.49% | 这类聚合证明不能再进行聚合。不要动它们了。                   |
| 轻度冲突聚合证明   | 如果不是一个严重冲突的聚合证明，那就是具有索引 I 的聚合证明，且在同一个区块里存在另一个同样的聚合证明，但其证明索引为 J | 在slot 32,000之前没有轻度冲突聚合证明                        | 这类聚合证明可以进一步用证明索引I∪J进行聚合。理想情况下，应该没有轻度冲突聚合证明。 |

报告原文：https://ethereum.github.io/rig/eth2data/notebooks/mainnet_explore.html



### Justin Drake谈质押中心化

Eth2开发者Justin Drake发推称，目前10.7%的验证者节点来自Kraken交易所，而Coinbase和Bitfinex验证者节点比Kraken的多5.8倍。这意味着，两个中心化交易所便掌握了1/3的验证者节点，五个交易所就掌握着1/2的验证者节点。Justin提倡大家单独运行验证者节点来推进去中心化。编者注：选择单独质押的请参考教程《以太坊2.0主网质押教学(Ubuntu/Prysm)》、《以太坊2.0主网质押教学(Ubuntu/Lighthouse)》、《以太坊2.0 Staking Solo指南（视频）》

&lt;br/&gt;

# Layer2

### Skale招募社区大使

二层扩容方案SKALE公布其“Ambassador Gamez”计划，目的是为SKALE团队招揽人才以及在社区中推广SKALE协议的教育。

!{p3](https://i.ibb.co/fDJp5Jp/3.png)



于12月17日举办完欢迎派对之后，SKALE将分三个阶段开展“Ambassador Gamez”：第一阶段2020年12月28日-30日；第二阶段2021年1月15-17日；第三阶段：2021年1月28-30日。Ambassador Gamez的获胜者将成为SKALE大使 (Ambassador Crew) 的一名成员，并且第二和第三个阶段会给予参与者SKL代币奖励。

想要参加SKALE大使活动的读者，请于本月27号前报名，更多信息：

https://skale.network/blog/ambassadorgamez

 

### Uniswap交互授权超780万次

去中心化交易所Uniswap创始人 Hayden Adams发推称，Uniswap V2Router02上的交互授权已超过780万次，假设每次授权使用的平均交易费为0.5美元，那么意味着光是授权就已经产生了480万美元的gas费。而在Uniswap上交易每天产生的gas费就有42万美元，一年便将产生1.5亿美元的gas费。Hayden表示，这说明二层解决方案应用刻不容缓。而此前，Uniswap与Offchain labs合作推出了Arbiswap的测试网：https://swap.arbitrum.io/#/swap

测试网使用方法可参考ECN的《以太七日谈 • 2020/11/16》。

 
&lt;br/&gt;
 

# DeFi

### 从CeFi 到 DeFi

![p4](https://i.ibb.co/86M5Wn5/4.png)

根据glassnode的数据显示，充值ETH到中心化交易所而产生的交易费占以太坊上的交易费总额的比例从2017年的25%左右降到当前的1%以下。而交易费多数是因从中心化交易所中提币而产生。

 

### Bancor锁仓量突破一亿美元

去中心化交易所Bancor发推宣布其总锁仓量突破1亿美元。自10月份Bancor v2.1发布以来，Bancor的总锁仓量增长了7倍，此次升级包括：单资产敞口、无常损失保险和 BNT 代币流动性挖矿。

![p5](https://i.ibb.co/gmq9jcD/5.png)

 
&lt;br/&gt;
 

# 生态

### 史上最贵的加密艺术作品拍卖成功

加密艺术家beeple在NFT平台Nifty Gateway上以777,777万美元的价格成功拍卖其作品“THE COMPLETE MF COLLECTION”，是目前为止拍卖价格最贵的加密作品。

THE COMPLETE MF COLLECTION是beeple于2007年发起的一个项目“EVERYDAYS”，计划每天创作一幅画，作品有17分31秒，包括4917幅画，下图是该加密作品中包含的其中一幅：

![p6](https://i.ibb.co/R3qLjV7/6.png)

 

### 本期最佳meme

Q：请问我可以在以太坊/DeFi上做些啥投资？

我：![p7](https://i.ibb.co/LzH1m31/7.png)

 

本期完，下周见。</content:encoded></item><item><title><![CDATA[以太坊2.0主网质押教学(Ubuntu/Lighthouse)]]></title><description><![CDATA[手把手教学：以太坊2.0主网质押Lighthouse篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-lighthouse</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-lighthouse</guid><pubDate>Fri, 11 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-lighthouse-41de20513b12)

![1](https://i.ibb.co/ynYrB8T/1.png)

本文基于Sigma Prime的Lighthouse客户端，详细讲解如何参与以太坊2.0主网质押。主要基于以下几个技术：

- [Ubuntu](https://ubuntu.com/)  v20.04 (LTS) x64 服务器
- [Go Ethereum](https://geth.ethereum.org/) 节点 ([代码分支](https://github.com/ethereum/go-ethereum)) 
- [Sigma Prime’s](https://sigmaprime.io/) ETH 2.0 客户端 —— Lighthouse（ ([代码分支](https://github.com/sigp/lighthouse))
- 浏览器插件加密钱包 [MetaMask](https://metamask.io/) 


提示：参与质押至少需要32 ETH 以及额外的gas费。 在搞清楚之前切记不要向任意地址发送ETH。本教程介绍了如何安全地将你的ETH存入存款合约。请牢记不要将ETH发送给任何人。

&lt;br/&gt;

# 致谢


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！

感谢[EthStaker](https://discord.gg/7z8wzehjrJ)管理团队和提供教程的社区成员、Eth2 客户端团队、以及质押社区的帮助和校对。

特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。

&lt;br/&gt;

# 免责声明


本文仅供参考，不构成专业建议。作为本教程的作者。我本人不保证文中信息的准确性，对于那些参考了本文进行操作而产生的任何损失概不负责。文末有更加完整的免责声明，请阅读之后再进行操作。

&lt;br/&gt;

# 支持


如需技术支持，请联系：

- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。

​       Reddit：https://www.reddit.com/r/ethstaker/

​       Discord：https://discord.gg/7z8wzehjrJ

- Lighthouse 客户端团队，Discord: https://discord.gg/gdq27tnKSM

&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、Linux、MetaMask (Portis或Fortmatic) 有一定的背景知识。

还需要准备：

- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机或云端安装和运行的Ubuntu服务器。

运行本地电脑有助于去中心化，因为如果云服务商崩溃了，那么托管在此服务商的所有节点都会随之崩溃。

- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-) (或Portis、Fortmatic)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 从测试网到主网


如果你从测试网设置转到主网设置，那么我强烈建议你在一个全新的 (新安装的) 服务器实例上开始。本教程没有对迁移场景进行测试，所以如果你使用的是此前安装过的测试网软件，那么无法保证你的操作能成功。

&lt;br/&gt;

# 要求


- 硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、8GB内存的RAM (16GB更佳)、一个内存至少500GB的SSD (1TB更佳)、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。

**注意：检查你的可用磁盘空间。尽管你有一个容量较大的SSD，Ubuntu也会出现仅剩200GB可用空间的状况。如果你遇到这种情况，请查看附录C —— 扩展逻辑卷。**

&lt;br/&gt;

# 概览

下面这个简化图表标明了本篇教程所涉及的范围，标黄的即是本文会覆盖到的部分：


![2](https://i.ibb.co/GTy57kG/p2.png)

整个流程可以概念化表述为：

- 生成验证者密钥对和存款数据
- 准备Ubuntu服务器 (防火墙、安全设置等)
- 设置一个Eth1 节点并同步Eth1 区块链的数据
- 配置Lighthouse客户端并同步Eth1 节点数据
- 存款并激活验证者密钥对

那我们现在就开始吧！

&lt;br/&gt;

# 第1步：生成质押数据


参与质押首先要决定你想要运行的验证者节点的数量，并基于此生成一些数据文件。

&gt;注意：如果你的存款数据和验证者密钥对已经生成，可以跳过这一步。

一个验证者节点需要存32 ETH，你的MetaMask钱包里要有相应足够的ETH。比如，如果你计划运行5个验证者节点，你将需要准备160 ETH (32*5) 并且预留一些gas费。存款过程会稍后再讲解，下面教大家怎么把设备运行起来。

## 下载存款工具 (存款CLI)

点击[此处](https://github.com/ethereum/eth2.0-deposit-cli/releases/)下载最新发布的存款命令行界面app (CLI app)。

下载链接：https://github.com/ethereum/eth2.0-deposit-cli/releases/


![3](https://i.ibb.co/Hgfx578/p3.png)

在“Assets”那一栏选择与你的设备 (如Windows、Mac、Linux Desktop等) 匹配的版本并下载。

## 运行存款工具 (Eth2 存款CLI)

解压文件，里面应该有一个二进制文件 (可执行文件)。存款工具生成用于质押的文件和一组助记词。这组助记词需要安全地保存。下面有两种选择：

**建议方案**：将这份二进制文件复制粘贴到USB驱动器里。连接到一台此前从未连接过网络的计算机，将文件复制到计算机里并开始运行。

**不建议方案**：在当前使用的计算机上运行。但是网络连接可能会导致你的助记词密钥泄漏。如果没有未联网的计算机，那就在开始运行之前断开网络。

准备好之后，在终端窗口 (或windows的命令提示符CMD) 中运行这份文件以继续使用下面列出的命令。确定好你要运行的验证者节点的数量之后，用该数字替换 `&lt;NumberOfValidators&gt;`。比如： `--num_validators 2`

Linux/Mac:

``` Powershell
./deposit new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

Windows:

``` Powershell
deposit.exe new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

在你选择的计算机执行上面的步骤之后，你将被要求创建一个**验证者密钥存储库 **(validator keystore) 密码，并保存在一个安全的地方。在后面的步骤中，你将需要这个keystore来上传验证者密钥到Lighthouse的验证者钱包里。

![4](https://i.ibb.co/2gKWKW7/4.png)

随后会生成一组**助记词**，请保存在一个安全的地方，**这至关重要**。因为最终你需要助记词来生成提款密钥以提出质押的ETH，并且增加验证者节点时也需要使用助记词。如果你丢失了助记词，就无法将你的资产提出了。

![5](https://i.ibb.co/LRH1pw4/5.png)

一旦你点击确认已经记好助记词之后，你的验证者密钥对便会生成。

![6](https://i.ibb.co/1GjWJdx/6.png)

新创建的验证者密钥对和存款数据文件会放置在指定位置。文件夹的内容如下所示：

![7](https://i.ibb.co/cQsh0nx/p7.png)

关于这些文件：

· 文件 `deposit_data-[timestamp].json` 包含验证者公钥和质押存款信息。该文件将用于完成随后的ETH存款过程。

· 文件 `keystore-m...json` 包含经过加密的验证者签名密钥。每一个验证者节点对应一个“keystore-m”。该文件将被导入到Lighthouse验证者钱包中以备质押时使用。随后需要将这些文件复制粘贴到Ubuntu服务器中。

## 最后的步骤


现在你已经有了存款数据和密钥存储库文件，接下来就可以设置Ubuntu服务器了。

**注意：此时还不能进行存款。**

首先完成并验证你的质押设置非常重要。如果你的ETH存款激活了，但是质押设置还没准备好的话，你将会受到怠工惩罚。

&lt;br/&gt;

# 第2步：连接至服务器


使用一个SSH端口，连接至你的Ubuntu服务器。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的风险。

&gt; 注意：如果你不是用`root`登录的便可以直接跳到第三步。

创建一个新账户。在 `&lt;yourusername&gt;` 中填入你的用户名，然后设置一个安全系数较高的密码，并输入其他可选信息。

``` Powershell
# adduser &lt;yourusername&gt;
```

通过把新的用户加入`sudo`群组中，来授予其管理权限。这样用户在命令行前输入`sudo`，便会以超级用户的权限来执行操作。

``` Powershell
# usermod -aG sudo &lt;yourusername&gt;
```

可选项：如果你使用SSH密钥通过`root`用户连接你的Ubuntu系统，你需要将新创建的账户和root用户的SSH密钥数据组合起来。

``` Powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```

最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第3步：升级服务器

确保系统更新至最新的软件和安全设置。

``` Powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
$ sudo reboot
```
&lt;br/&gt;


# 第4步：保护服务器

安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 修改SSH默认端口

SSH默认端口是端口22，也是易受攻击的矢量，因此可以修改SSH端口来防止攻击。

在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。没有其他显示便意味着该端口号未被使用；显示红色便意味着已被使用，请尝试其他端口号。比如：`sudo ss -tulpn | grep &apos;:6673&apos;`

``` Powershell
$ sudo ss -tulpn | grep &apos;:&lt;YourSSHPortNumber&gt;&apos;
```

确定端口号可用之后，通过升级SSH设置来修改默认端口。

``` Powershell
$ sudo nano /etc/ssh/sshd_config
```

在文件中检索或者添加 (如果没有的话) `Port 22` 命令行。删掉`#` (如果有的话) 并在下面的命令行中输入端口号。

``` Powershell
Port &lt;YourSSHPortNumber&gt;
```

参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![8](https://i.ibb.co/pzy7wfL/p8.png)

重新启动 SSH 服务以显示上述所作的修改。

``` Powershell
$ sudo systemctl restart ssh
```

登出并使用你的SSH端口号`&lt;YourSSHPortNumber&gt;`重新登入。

## 配置防火墙

Ubuntu 20.04 服务器可以使用默认的 UFW 防火墙来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Lighthouse 的入站流量。

**安装 UFW 防火墙**

按照下面的命令行输入以保证在默认情况下安装 UFW。

``` Powershell
$ sudo apt install ufw
```

**应用 UFW 默认值**

明确地应用默认值，拒绝入站流量，允许出站流量。

``` Powershell
$ sudo ufw default deny incoming
$ sudo ufw default allow outgoing
```

**允许 SSH**

允许你此前设置的端口号 `&lt;YourSSHPortNumber&gt;` 的入站流量。SSH 要求 TCP 协议。比如：`sudo ufw allow 6673/tcp`

``` Powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```

**拒绝 SSH 端口号22**
拒绝端口 22/TCP 的入站流量。

&gt; 注意：当你完成了修改 SSH 默认端口之后再做这一步。

```Powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**

允许与 Go Ethereum 的对等节点 (端口 30303) 进行点对点 (P2P) 连接。如果你使用第三方托管的 Eth1 节点，则可以跳过这一步。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口 30303 的入站流量。

``` Powershell
$ sudo ufw allow 30303
```

**允许 Lighthouse 客户端**

允许与 Lighthouse 的对等节点进行点对点连接，以便在信标链节点上 (Lighthouse 的默认端口为 9000) 进行操作。

&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要配置你的网络路由以允许来自端口9000 的入站流量。

``` Powershell
$ sudo ufw allow 9000
```

开启防火墙并检查是否已按上述步骤正确地配置。

``` Powershell
$ sudo ufw enable
$ sudo ufw status numbered
```

参考下方的截图。

![9](https://i.ibb.co/bPqGH2J/p9.png)

&lt;br/&gt;

# 第5步：配置定时器

Ubuntu 内置了时间同步，并默认使用 systemd‘s timesyncd 服务进行激活。验证其是否正确运行。

``` Powershell
$ timedatectl
```

激活  `NTP service` ，运行方式：

``` Powershell
$ sudo timedatectl set-ntp on
```

参考下方的截图：

![10](https://i.ibb.co/ftXCM1Q/p10.png)


只能使用单个定时器服务。如果你此前安装过 NTPD，你需要检查此文件是否还存在，如果存在请操作下面的命令行以删除。

``` Powershell
$ ntpq -p
$ sudo apt-get remove ntp
```
&lt;br/&gt;

# 第6步：设置一个 Eth1 节点
参与质押需要一个 Eth1 节点。你可以选择运行一个本地 Eth1 节点，也可以使用第三方提供的节点。本教程会详细讲解如何运行 Go Ethereum，如果你选择第三方服务的话，可以跳过这一步。

&gt; 注意：检查你的可用磁盘空间。一个Eth1节点需要大概400GB的存储空间。尽管你有一个容量较大的固态硬盘，Ubuntu也可能显示仅剩200GB的可用空间。如果你遇到这种情况，请查看附录C —— 扩展逻辑卷。

## 安装 Go Ethereum

使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

``` Powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
$ sudo apt update
$ sudo apt install geth
```

将Go Ethereum作为后台服务来运行，运行该服务需要创建一个账户。此种类型的账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```

为Eth1区块链创建数据目录，用来存储Eth1节点数据。

``` Powershell
$ sudo mkdir -p /var/lib/goethereum
```

设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

``` Powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```

创建一个systemd服务配置文件来对该服务进行配置。

``` Powershell
$ sudo nano /etc/systemd/system/geth.service
```

将下列的服务配置复制粘贴到文档中。

``` Powershell
[Unit]
Description=Go Ethereum Client
After=network.target
Wants=network.target[Service]
User=goeth
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30[Install]
WantedBy=default.target
```




需要注意的 [flags](https://geth.ethereum.org/docs/interface/command-line-options)：

 `--http` 用来公开与Lighthouse信标链节点连接的一个HTTP端口 (http://localhost:8545)。


 `--cache` 指的是内部缓存的大小，以GB为单位。数值的增减取决于你的可用系统内存。设置 `2048` 将大概需要使用 4-5 GB的内存。


`--maxpeers` 指的是所连接节点的最大数值。节点数量越多，意味着越多的网络数据可用空间。所以记得不要将该数值设置得太低，否则你的Eth1节点将难以保持同步。


参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![11](https://i.ibb.co/JBmb1PL/p11.png)

重新加载 systemd 以显示上述的更改并启动服务。检查状态以确保其正确运行。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo systemctl status geth
```

参考下方的截图：

![12](https://i.ibb.co/vxr3pNh/p12.png)

如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (此操作不会影响geth服务)。

允许geth服务在系统重启时自动启动。

``` Powershell
$ sudo systemctl enable geth
```

Go Ethereum节点将会开始同步。你可以运行下列命令来追踪进程或检查错误。按“CTRL+c”退出 (此操作不会影响geth服务)。

``` Powershell
$ sudo journalctl -fu geth.service
```

参考下方的截图：

![13](https://i.ibb.co/qDvJ767/p13.png)

## 查看同步状态

要检查Eth1节点同步状态，请使用下列命令访问控制台。

``` Powershell
geth attach http://127.0.0.1:8545
&gt; eth.syncing
```

如果显示结果是 `false` ，表明你的同步已完成。如果显示结果是同步数据，表明你仍在同步。作为参考，大概有7-8亿个已知状态 `knownStates`.

参考下方的截图:

![14](https://i.ibb.co/MZjyqnH/p14.png)

完成时按“CTRL+d”以退出。

## 检查连接的对等节点


要检查你的Eth1节点所连接的对等节点，请使用下列命令访问控制台。

``` Powershell
geth attach http://127.0.0.1:8545
&gt; net.peerCount
```

对等节点总数 `peerCount` 不会超过你所设置的最大对等节点总数 `--maxpeers` 。如果无法找到需要同步的对等节点，参阅下一部分。

完成后按“CTRL+d”以退出。

## 添加 bootnodes (可选)


有时可能要花点时间才能找到要同步的对等节点，可以添加bootnodes以改善这种情况。访问https://gist.github.com/rfikki/a2ccdc1a31ff24884106da7b9e6a7453 获得最新的清单并根据下列操作修改geth服务：

``` Powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```


修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等节点，并以逗号分割。

``` Powershell
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30 --bootnodes &quot;enode://d0b4a09d072b3f021e233fe55d43dc404a77eeaed32da9860cc72a5523c90d31ef9fab7f3da87967bc52c1118ca3241c0eced50290a87e0a91a271b5fac8d0a6@157.230.142.236:30303,enode://5070366042daaf15752fea340e7ffce3fd8fc576ac846034bd551c3eebac76db122a73fe8418804c5070a5e6d690fae133d9953f85d7aa00375d9a4a06741dbc@116.202.231.71:30303&quot;
```


保存文件之后退出。然后重启服务并观察。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -fu geth.service
```


&gt;
&gt; 注意：需要按照一系列特定的步骤来更新Geth。更多信息请参见“附录A：更新Geth”。

&lt;br/&gt;

# 第7步：下载Lighthouse


Lighthouse客户端由两份二进制文件组成：信标链节点和验证者客户端。本步骤将讲解如何下载Lighthouse二进制文件。

首先，访问https://github.com/sigp/lighthouse/releases并找到最新发布的Lighthouse版本。通常在页面的最顶部，比如：

![15](https://i.ibb.co/mtCf7jd/15.png)

在“Assets”那一栏（如果需要的话点击展开) 将下载链接复制粘贴至文档**lighthouse-v…-x86_64-unknown-linux-gnu.tar.gz**中。请确保复制的链接是正确的。

&gt; 注意：那里有两种类型的二进制文件 (可移植/不可移植)，他们的区别[这里](https://lighthouse-book.sigmaprime.io/installation-binaries.html)有解释。可移植二进制文件可以在更广泛的硬件中运行，但是需要花费20%的性能成本。

![16](https://i.ibb.co/JmjS4Ss/16.png)

操作下列命令来下载这些文件。将下方指令部分的URL改为最新版本的下载链接。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -LO https://github.com/sigp/lighthouse/releases/download/v1.0.2/lighthouse-v1.0.2-x86_64-unknown-linux-gnu.tar.gz
```


从归档文件中提取二进制文件并复制到 `/usr/local/bin` 目录，Lighthouse客户端会在该处运行这些文件。根据需求修改文档名。

``` Powershell
$ tar xvf lighthouse-v1.0.2-x86_64-unknown-linux-gnu.tar.gz
$ sudo cp lighthouse /usr/local/bin
```


输入下列命令以确认这些二进制文件是否能在你的服务器CPU上运行，如果不可以，返回并下载可移植版本，重新操作。

``` Powershell
$ cd /usr/local/bin/
$ ./lighthouse --version # &lt;-- should display version information
```

&gt;
&gt; 注意：有时会遇到这样的情况——版本信息已显示，但后续命令仍操作失败。如果你在运行`account validator import` 命令时遇到错误 `Illegal instruction (core dumped)` ，那么你需要换成可移植版本。



清理所提取的文档。

``` Powershell
$ cd ~
$ sudo rm lighthouse
$ sudo rm lighthouse-v1.0.2-x86_64-unknown-linux-gnu.tar.gz
```



&gt; 注意：需要按照一系列特定的步骤来更新Lighthouse。更多信息请参见“附录B：更新Lighthouse”。

&lt;br/&gt;

# 第8步：导入验证者密钥对


导入验证者密钥对以配置Lighthouse，然后创建运行其所需要的服务以及服务配置。

## 复制验证者密钥存储文件

如果你的验证者存储文件 `keystore-m…json` 不是在你的Ubuntu服务器上生成的，那么你就需要将这些文件复制粘贴到你的本地目录中。你可以用 USB 把文件拷过去 (如果你的服务器是本地的)，也可以使用安全的FTP (SFTP)。

将文件放置在： `$HOME/eth2deposit-cli/validator_keys`。如果需要的话创建文件目录。

## 将密钥存储文件导入验证者客户端


创建一个目录以存储验证者钱包数据，并授予当前用户访问该目录的权限。当前用户需要访问权限来执行导入。在 `&lt;yourusername&gt;` 修改登入用户名。

``` Powershell
$ sudo mkdir -p /var/lib/lighthouse
$ sudo chown -R &lt;yourusername&gt;:&lt;yourusername&gt; /var/lib/lighthouse
```

运行验证者密钥导入进程。你需要提供放置已生成的密钥存储文件的路径。比如： `$HOME/eth2deposit-cli/validator_keys`

``` Powershell
$ cd /usr/local/bin
$ lighthouse --network mainnet account validator import --directory $HOME/eth2deposit-cli/validator_keys --datadir /var/lib/lighthouse
```


你将需要输入密码以访问验证者密钥对，该密码你在第一步设置过。

访问每一个密钥都需要输入密码，逐个输入。确保密码输入正确，因为验证器将作为服务运行时需要将密码保存到文件中以访问密钥。



&gt; 注意验证者数据被保存在下列路径`/var/lib/lighthouse/validators`，该路径在密钥存储文件导入进程中创建。



参考下方截图。

![17](https://i.ibb.co/1KtLhTx/17.png)

将默认权限恢复到 `lighthouse` 目录。

``` Powershell
sudo chown -R root:root /var/lib/lighthouse
```

导入完成，钱包已设置好。

&lt;br/&gt;

# 第9步：配置信标节点服务

在这一步，你要把Lighthouse的信标节点作为服务来配置并运行，因此如果系统重启，这个过程将自动重新开始。

## 设置信标节点账户和目录

为信标节点的运行创建一个账户。这种账户不能用来登录进入服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false lighthousebeacon
```


为Lighthouse信标节点的数据库创建数据目录和设置权限。

``` Powershell
$ sudo mkdir -p /var/lib/lighthouse/beacon
$ sudo chown -R lighthousebeacon:lighthousebeacon /var/lib/lighthouse/beacon
$ sudo chmod 700 /var/lib/lighthouse/beacon
$ ls -dl /var/lib/lighthouse/beacon
```


参考下方的截图

![18](https://i.ibb.co/SfZKZLw/18.png)

## 创建和配置服务

Create a systemd service config file to configure the service.

创建一个systemd服务的config文档来配置服务

``` Powershell
$ sudo nano /etc/systemd/system/lighthousebeacon.service
```

将下面这段代码复制粘贴到文档里

``` Powershell
[Unit]
Description=Lighthouse Eth2 Client Beacon Node
Wants=network-online.target
After=network-online.target[Service]
User=lighthousebeacon
Group=lighthousebeacon
Type=simple
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/lighthouse bn --network mainnet --datadir /var/lib/lighthouse --staking --eth1-endpoints http://127.0.0.1:8545[Install]
WantedBy=multi-user.target
```

需要注意的 [flags](https://lighthouse-book.sigmaprime.io/api-bn.html).

`bn`子命令指示Lighthouse二进制文件运行信标节点。

`--eth1-endpoints` 一个或多个逗号分隔的服务器终端，用于Web3连接。如果给定多个端点，则按照给定的顺序将端点作为回退。 同时启动 `-- eth1` flag. E.g. `--eth1-endpoints http://127.0.0.1:8545,https://yourinfuranode,https://your3rdpartynode`.  


参考下方的截图。按 CTRL+x然后&apos;y&apos;，按回车保存然后退出。

![19](https://i.ibb.co/0ym0xp1/19.png)

 重新加载systemd以显示更改，并启动服务。

``` Powershell
$ sudo systemctl daemon-reload
```


&gt; 注意：如果你正在运行一个本地Eth1节点 （查看第6步），你应该等它完全同步完再启动lighthousebeacon的服务。

启动服务并查看，确保其正确运行。

``` Powershell
$ sudo systemctl start lighthousebeacon
$ sudo systemctl status lighthousebeacon
```
参考下方的截图:

![20](https://i.ibb.co/cNd4CQS/20.png)

如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (不会影响 lighthousebeacon的服务)。

 允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable lighthousebeacon
```


如果Eth2 链处于创世后的状态，Lighthouse信标链会开始同步数据。它可能要花几个小时才能完全实现同步。你可以通过运行`journalctl` 命令来追踪进程或检查错误。按CTRL+c退出 (将不会影响lighthousebeacon的服务)

``` Powershell
$ sudo journalctl -fu lighthousebeacon.service
```


日志的截位视图会显示以下状态信息。


[注意: 目前出现了一个[问题](https://github.com/sigp/lighthouse/issues/1965)导致出现错误信息]

``` Powershell
INFO Waiting for genesis                     
wait_time: 5 days 5 hrs, peers: 50, service: slot_notifier
```


当Eth2主网启动，信标链和验证者将自动开始处理数据。输出数据会给出与Eth1节点完全同步的指示。

&lt;br/&gt;

# 第10步：配置验证者服务

在这一步，你需要将你的验证者客户端作为一项后台服务来配置和运行，因此系统重启时这个进程会自动重启。

## 创建验证者节点的账户和目录

为验证者客户端的运行创建一个账户。这类账户无法登录服务器。

``` Powershell
$ sudo useradd --no-create-home --shell /bin/false lighthousevalidator
```

在第8步创建验证者钱包时已经创建了这个目录：`/var/lib/lighthouse/validators`。现在设置权限，使得只有`lighthousevalidator` 可以修改这个目录。

``` Powershell
$ sudo chown -R lighthousevalidator:lighthousevalidator /var/lib/lighthouse/validators
$ sudo chmod 700 /var/lib/lighthouse/validators
$ ls -dl /var/lib/lighthouse/validators
```

参考下方的截图

![21](https://i.ibb.co/S38L03j/21.png)

## 创建并配置服务

创建一个systemd服务文件来存储配置服务

``` Powershell
$ sudo nano /etc/systemd/system/lighthousevalidator.service
```

将下面这段代码复制粘贴到文档里

``` Powershell
[Unit]
Description=Lighthouse Eth2 Client Validator Node
Wants=network-online.target
After=network-online.target[Service]
User=lighthousevalidator
Group=lighthousevalidator
Type=simple
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/lighthouse vc --network mainnet --datadir /var/lib/lighthouse --graffiti &quot;&lt;yourgraffiti&gt;&quot;[Install]
WantedBy=multi-user.target
```

需要注意的 [flags](https://lighthouse-book.sigmaprime.io/validator-management.html).

`vc` 子命令指示Lighthouse二进制文件运行信标节点。

`--graffiti &quot;&lt;yourgraffiti&gt;&quot;`  填上你的涂鸦字串符。出于安全和隐私，应避免使用能唯一辨识你的信息。比如`--graffiti &quot;Hello Eth2! From Dominator&quot;`。

参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

![22](https://i.ibb.co/cw7Kwfq/22.png)

重新加载systemd以显示更改,开启服务并检查，确保运行正确。

``` Powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start lighthousevalidator
$ sudo systemctl status lighthousevalidator
```

参考下方的截图:

![23](https://i.ibb.co/ynfrCsd/23.png)

如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (不会影响 lighthousevalidator的服务)。

允许服务随系统重启而自动重启。

``` Powershell
$ sudo systemctl enable lighthousevalidator
```

你可以通过运行`journalctl`命令来追踪进程或检查错误。按CTRL+c退出(将不会影响lighthousevalidator的服务)

``` Powershell
$ sudo journalctl -fu lighthousevalidator.service
```

日志的截位视图会显示以下状态信息。

``` Powershell
INFO Lighthouse started version: Lighthouse/v1.0.2-c6baa0e
INFO Configured for testnet name: mainnet
WARN The mainnet specification is being used. This not recommended (yet).
INFO Starting validator client validator_dir: &quot;/var/lib/lighthouse/validators&quot;, beacon_node: http://localhost:5052/
INFO Completed validator discovery new_validators: 0
INFO Enabled validator voting_pubkey: 0xaa...
INFO Enabled validator voting_pubkey: 0x90...
INFO Initialized validators enabled: 2, disabled: 0
INFO Connected to beacon node version: Lighthouse/v1.0.2-c6baa0e/x86_64-linux
INFO Starting node prior to genesis seconds_to_wait: 444946
INFO Waiting for genesis seconds_to_wait: 444946, bn_staking_enabled: true
```

创世后 (即信标链已经开始处理数据后)存入的存款可能需要等几个小时到几天的时间才能激活。

Eth2主网启动后，信标链和验证者将会自动开始处理数据。

你可以在 [beaconcha.in](https://beaconcha.in/)查看你的验证者状态。只需要搜索你的验证者公钥或使用你的MetaMask （或其他）钱包地址进行搜索。你的数据可能要过一段时间才会在网站上显示。

&lt;br/&gt;

# 第11步：进行验证者存款

现在你的节点已经设置好并开始运行，你将需要将ETH存入你的验证者节点。


&gt; 注意：如果你已经提交了你的质押存款，你可以跳过这一步

 这一步是关于将所需的ETH存入Eth2.0的存款合约。不要把ETH发送到存款合约。这需要在浏览器上通过Eth2.0的Launchpad网站启动你的MetaMask (或其他) 钱包。


&gt; 注意：如果是在创世后进行的话，你需要在你的Eth1节点和信标链都完全同步完之前存入你的存款。如果你不这样做，当你的Eth1节点或信标链在同步时，Lighthouse会处于怠工状态，而你可能要遭遇怠工惩罚。

以太坊2.0 Launchpad: https://launchpad.ethereum.org/

. 一直随着屏幕切换点击这些警告步骤，直到你到达**密钥对生成**的部分。选择你打算运行的验证者数量。选择一个与你在步骤1中生成的验证者文件数量相匹配的值。



![24](https://i.ibb.co/CwKwHzQ/p27.png)

往下滚动，看这些内容你是否同意，然后点击“Continue” (继续)。

![25](https://i.ibb.co/LdJsJwY/p28.png)

你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在步骤1生成的。浏览/选择或拖拉这个文档，然后点击Continue。

![26](https://i.ibb.co/PTkh7gD/p29.png)

连接你的钱包。选择MetaMask (或者是其他支持的钱包)，登录，选择存有你的ETH的钱包，然后点击Continue。

你的MetaMask余额就会显示出来。如果你选择了主网且你有充足的ETH余额，网站会允许你继续下一步。

![27](https://i.ibb.co/tqrFPLV/p30.png)

然后会出现一个Summary (总结)，显示验证者数和所需的ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

![28](https://i.ibb.co/jktcfzz/p31.png)

如果你准备好去存款了，点击&quot;Initiate All Transactions&quot; (启动所有交易）。

![29](https://i.ibb.co/NFbJXL5/p32.png)

 当你到了可以确认每笔交易那一步时，MetaMask (或其他钱包)的窗口会自动弹出。 

当所有的交易都成功完成时，你的质押也完成了！

![30](https://i.ibb.co/kq7Cn7v/p33.png)

恭喜你已经成功存入你的质押存款了！

## 查看你的验证者存款状态

新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

1. 复制你的MetaMask (或其他）钱包地址。

2. 前往这里: [beaconcha.in/](https://beaconcha.in/) 

3. 用你的钱包地址搜索你的密钥

![31](https://i.ibb.co/JQYHLPH/p34.png)

点进某个验证者详情，每个验证者激活后你会看到在Status那一栏有预估时间。

![32](https://i.ibb.co/nbPs42c/p35.png)

现在你面前有一个条正在运作的信标链、一个验证者节点以及你的主网存款。如果以太坊2.0主网处于运行中，一旦你的存款被激活，你将开始工作并赚取收益。

**恭喜你：你终于正式成为了一名以太坊质押者**

 是时候来一顿肥宅水狂欢了。

&lt;br/&gt;

# 第12步：监测

因为一些还没被解决的安全问题，监测这一部分将在未来补充到这份教程。

&lt;br/&gt;

# 结束语及后续建议

感谢大家给我这个机会。希望这份教程能帮到大家。

**后续步骤:**

- 检查三次所有密钥与密码备份。

- 重启你的电脑并确保服务都能自动启动。

- 了解如何升级客户端与服务器软件。

- 使用`htop`来监测本地电脑的资源

-  熟悉[beaconcha.in](https://beaconcha.in/) ，这样你就能监测你的验证者情况，其提供警报功能 （通过邮件发送，需要注册）和最多[3个POAP](https://beaconcha.in/poap)。

- J 加入 [Ethstaker](https://discord.gg/7z8wzehjrJ)和 [Lighthouse](https://discord.com/invite/gdq27tnKSM)的Discord，留意重要通知。

- 请在[Discord](https://discord.gg/7z8wzehjrJ)、 [Twitter](https://www.twitter.com/SomerEsat)、或[Reddit](https://www.reddit.com/user/SomerEsat)分享对这份教程的反馈。

- 在 [Ethstaker](https://discord.gg/7z8wzehjrJ) 的discord上帮助其他人设置。

- 用[friend link](https://someresat.medium.com/41de20513b12?source=friends_link&amp;sk=ac7477fd99b6648a5745a3e327f2701c)分享这份教程

- 支持一下：somer.eth

&lt;br/&gt;

# 延伸阅读

强烈建议大家从尽可能多的来源获取信息，还有很多其他资源可以帮助你熟悉如何在Eth2上质押。

如果作者对这些资源还没测试或验证过，而你采用了的话，是要自己承担风险的。

- 客户端团队的官方文档 [Prysm](https://docs.prylabs.network/docs/getting-started) | [Lighthouse](https://lighthouse-book.sigmaprime.io/) | [Teku](https://docs.teku.consensys.net/en/latest/) | [Nimbus](https://status-im.github.io/nimbus-eth2/intro.html)

- [/r/EthStaker Sticky](https://www.reddit.com/r/ethstaker/comments/jjdxvw/welcome_to_rethstaker_the_home_for_ethereum/)

- [以太坊2.0客户端的非官方docker环境](https://github.com/eth2-educators/eth2-docker)

- [如何在Ubuntu上设置Eth2主网验证者系统](https://github.com/metanull-operator/eth2-ubuntu)

- [指南 | 如何在ETH2主网设置验证者](https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet)

- [指南 | ETH2验证者信标链节点的安全最佳实践](https://www.coincashew.com/coins/overview-eth/guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node) 

- [ETH2质押节点的额外监察](https://moody-salem.medium.com/additional-monitoring-for-eth2-staking-nodes-aea05b2f9a86) 

- [以太坊2.0质押的Telegram服务](https://9elements.com/blog/ethereum-2-0-2/) 

&lt;br/&gt;

# 附录A — Geth更新

如果你需要更新到Geth的最新版本，请按下列步骤：

``` Powershell
$ sudo systemctl stop lighthousevalidator
$ sudo systemctl stop lighthousebeacon$ sudo systemctl stop geth
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo systemctl start geth
$ sudo systemctl status geth # &lt;-- Check for errors
$ sudo journalctl -fu geth # &lt;-- Monitor$ sudo systemctl start lighthousebeacon
$ sudo systemctl status lighthousebeacon # &lt;-- Check for errors
$ sudo journalctl -fu lighthousebeacon # &lt;-- Monitor$ sudo systemctl start lighthousevalidator
$ sudo systemctl status lighthousevalidator # &lt;-- Check for errors
$ sudo journalctl -fu lighthousevalidator # &lt;-- Monitor
```

# 

&lt;br/&gt;

# 附录B — 更新Lighthouse

如果你需要更新到Lighthouse的最新版本，请按下列步骤进行：

 首先，前往[这里](https://github.com/sigp/lighthouse/releases)找出最新的Linux发布。


&gt; 注意：会有两种类型的二进制文件——可移植的不可移植的。[这里](https://lighthouse-book.sigmaprime.io/installation-binaries.html)解释了两者的区别。确认你选的是正确的类型。

``` Powershell
$ cd ~
$ sudo apt install curl
$ curl -LO https://github.com/sigp/lighthouse/releases/download/v1.0.2/lighthouse-v1.0.2-x86_64-unknown-linux-gnu.tar.gz
```

 停止Lighthouse客户端服务。

```Powershell
$ sudo systemctl stop lighthousevalidator
$ sudo systemctl stop lighthousebeacon
```
从存档里提出二进制文档，并复制 `/usr/local/bin`到目录。如果需要的话，修改URL名。

``` Powershell
$ tar xvf lighthouse-v1.0.2-x86_64-unknown-linux-gnu.tar.gz
$ sudo cp lighthouse /usr/local/bin
```

重新启动服务并检查错误。

``` Powershell
$ sudo systemctl start lighthousebeacon
$ sudo systemctl status lighthousebeacon # &lt;-- Check for errors
$ sudo journalctl -fu lighthousebeacon # &lt;-- Monitor$ sudo systemctl start lighthousevalidator
$ sudo systemctl status lighthousevalidator # &lt;-- Check for errors
$ sudo journalctl -fu lighthousevalidator # &lt;-- Monitor
```

清理提出的文档。

``` Powershell
$ cd ~
$ sudo rm lighthouse
$ sudo rm lighthouse-v1.0.2-x86_64-unknown-linux-gnu.tar.gz
```

&lt;br/&gt;

# 附录 C — 扩展逻辑卷


很多时候Ubuntu只预配200GB的较大固态硬盘，导致用户在同步他们的Eth1节点时就耗尽存储空间了。报错信息近似于：

``` Powershell
Fatal: Failed to register the Ethereum service: write /var/lib/goethereum/geth/chaindata/383234.ldb: no space left on device
```



为了解决这个问题，假设你有一个大于200GB的固态硬盘，你可以通过下列步骤为 [LVM](https://wiki.ubuntu.com/Lvm) (逻辑卷管理) 扩大容量：

``` Powershell
$ sudo lvdisplay # &lt;-- Check your logical volume size
$ sudo lvm 
&gt; lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv
&gt; lvextend -l +100%FREE -r /dev/ubuntu-vg/ubuntu-lv
&gt; exit
$ sudo resize2fs /dev/ubuntu-vg/ubuntu-lv
$ df -h # &lt;-- Check results
```



这会重新调整你的硬盘至它的最大可用空间。

如果你在这方面需要支持，请在 [EthStaker](https://discord.gg/7z8wzehjrJ) 的Discord上寻求帮助。

&lt;br/&gt;

# 完整免责声明

这篇文章（教程) 仅供参考，不构成专业建议。作者不保证文章中任何信息的准确性、质量、完整性、实效性与有效性。本文所有信息均按“原样”提供，不作任何形式的保证，并可随时更改，恕不另行通知。作者不因任何目的对任何形式的明示、暗示和法定保证负责，包括对文章内容的准确性、时效性、完整性或合适性的保证。作者也不对任何直接、间接、偶然、后果性或任何其他因使用本文或根据本文所提供的信息而造成的损害负责。这包括任何人身伤害、业务中断、使用损失、数据丢失、利润损失或任何其他金钱损失，无论是在合同、疏忽或其他不当使用中，即使作者已了解这种可能性。

&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。
</content:encoded></item><item><title><![CDATA[以太坊2.0主网质押教学(Ubuntu/Prysm)]]></title><description><![CDATA[手把手教学：以太坊2.0主网质押Prysm篇。]]></description><link>https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-prysm</link><guid isPermaLink="false">https://www.ethereum.cn/guide-to-staking-on-ethereum-2-0-ubuntu-prysm</guid><pubDate>Thu, 10 Dec 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [someresat.medium.com](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-prysm-56f681646f74)

&lt;br/&gt;


![p1](https://i.ibb.co/d743gVK/p1.png)

&lt;br/&gt;







本文基于Prysmatic Labs的Prysm客户端，详细讲解如何参与以太坊2.0主网质押。主要基于以下几个技术：

- [Ubuntu](https://ubuntu.com/) Ubuntu v20.04 (LTS) x64 服务器
- [Go Ethereum](https://geth.ethereum.org/) 节点 ([代码分支](https://github.com/ethereum/go-ethereum))
- Prysmatic Labs ETH 2.0 客户端 —— Prysm ([代码分支](https://github.com/prysmaticlabs/prysm))
- 浏览器插件加密钱包 MetaMask[MetaMask](https://metamask.io/) 




**提示：参与质押至少需要32 ETH 以及额外的gas费。 在搞清楚之前切记不要向任意地址发送ETH。本教程介绍了如何安全地将你的ETH存入存款合约。请牢记不要将ETH发送给任何人。**

&lt;br/&gt;

# 致谢


本教程参考了网上的各种资料，感谢这些提供资料的贡献者！


感谢[EthStaker](https://discord.gg/7z8wzehjrJ)管理团队和提供教程的社区成员、Eth2 客户端团队、以及质押社区的帮助和校对。


特别感谢Eth2 客户端团队和以太坊基金会的研究员。他们经过几年的不懈努力，将我们带到这难以置信的时刻——Eth2.0成功创世。


&lt;br/&gt;

# 免责声明


本文仅供参考，不构成专业建议。作为本教程的作者。我本人不保证文中信息的准确性，对于那些参考了本文进行操作而产生的任何损失概不负责。文末有更加完整的免责声明，请阅读之后再进行操作。

&lt;br/&gt;

# 支持


如需技术支持，请联系：

- EthStaker社区是一个以太坊2.0 Staking 社区，资源丰富且十分友好。
- Reddit：https://www.reddit.com/r/ethstaker/
- Discord：https://discord.gg/7z8wzehjrJ
- Prysm 客户端团队，Discord：https://discord.gg/GVM5TJwzkU

&lt;br/&gt;

# 条件


使用本教程需要对以太坊、ETH、Staking、Linux、MetaMask (Portis或Fortmatic) 有一定的背景知识。


还需要准备：


- [Ubuntu 服务器 v20.04 (LTS) amd64](https://ubuntu.com/tutorials/install-ubuntu-server#1-overview) 或者一个较新的，在本地计算机或云端安装和运行的Ubuntu服务器。
- 已安装或已配置的浏览器插件加密钱包[MetaMask](https://metamask.zendesk.com/hc/en-us/articles/360015489531-Getting-Started-With-MetaMask-Part-1-) (或Portis、Fortmatic)。一台装有操作系统 (Mac、Windows、Linux等) 和浏览器 (Brave、Safari、FireFox等) 的计算机。

&lt;br/&gt;

# 从测试网到主网


如果你从测试网设置转到主网设置，那么我强烈建议你在一个全新的 (新安装的) 服务器实例上开始。本教程没有对迁移场景进行测试，所以如果你使用的是此前安装过的测试网软件，那么无法保证你的操作能成功。

&lt;br/&gt;

# 要求


· 硬件要求是一个比较大的话题。总的来说：一个相对较新的CPU、8GB内存的RAM (16GB更佳)、一个内存至少500GB的SSD (1TB更佳)、稳定的网络（足够快的下载速度以及月度数据额度），这些性能都会让质押过程更加安全顺畅。


**注意：检查你的可用磁盘空间。尽管你有一个容量较大的SSD，Ubuntu也会出现仅剩200GB可用空间的状况。如果你遇到这种情况，请查看附录C —— 扩展逻辑卷。**

&lt;br/&gt;

# 概览


下面这个简化图表标明了本篇教程所涉及的范围，标黄的即是本文会覆盖到的部分：

 &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GTy57kG/p2.png&quot;/&gt;&lt;/center&gt;


整个流程可以概念化表述为：


· 生成验证者密钥对和存款数据

· 准备Ubuntu服务器 (防火墙、安全设置等)

· 设置一个Eth1 节点并同步Eth1 区块链的数据

· 配置Prysm客户端并同步Eth1 节点数据

· 存款并激活验证者密钥对

那我们现在就开始吧！

&lt;br/&gt;

# 第1步：生成质押数据



参与质押首先要决定你想要运行的验证者节点的数量，并基于此生成一些数据文件。

**注意：如果你的存款数据和验证者密钥对已经生成，可以跳过这一步。**


一个验证者节点需要存32 ETH，你的MetaMask钱包里要有相应足够的ETH。比如，如果你计划运行5个验证者节点，你将需要准备160 ETH (32*5) 并且预留一些gas费。存款过程会稍后再讲解，下面教大家怎么把设备运行起来。

## 下载存款工具 (存款CLI)




点击[此处](https://github.com/ethereum/eth2.0-deposit-cli/releases/)下载最新发布的存款命令行界面app (CLI app)。

下载链接：https://github.com/ethereum/eth2.0-deposit-cli/releases/

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Hgfx578/p3.png&quot;/&gt;&lt;/center&gt;



在“Assets”那一栏选择与你的设备 (如Windows、Mac、Linux Desktop等) 匹配的版本并下载。

## 运行存款工具 (Eth2 存款CLI)




解压文件，里面应该有一个二进制文件 (可执行文件)。存款工具生成用于质押的文件和一组助记词。这组助记词需要安全地保存。下面有两种选择：



**建议方案**：将这份二进制文件复制粘贴到USB驱动器里。连接到一台此前从未连接过网络的计算机，将文件复制到计算机里并开始运行。


**不建议方案**：在当前使用的计算机上运行。但是网络连接可能会导致你的助记词密钥泄漏。如果没有未联网的计算机，那就在开始运行之前断开网络。


准备好之后，在终端窗口 (或windows的命令提示符CMD) 中运行这份文件以继续使用下面列出的命令。确定好你要运行的验证者节点的数量之后，用该数字替换 &lt;NumberOfValidators&gt;。例如：-num_validators 2

Linux/Mac:

```powershell
./deposit new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```

Windows:

```powershell
deposit.exe new-mnemonic --num_validators &lt;NumberOfValidators&gt; --chain mainnet
```


在你选择的计算机执行上面的步骤之后，你将被要求创建一个验证者密钥存储库 (validator keystore) 密码，并保存在一个安全的地方。在后面的步骤中，你将需要这个keystore来上传验证者密钥到Prysm的验证者钱包里。

 &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/XYZjj7q/p4.png&quot;/&gt;&lt;/center&gt;





随后会生成一组**助记词**，请保存在一个安全的地方，**这至关重要**。因为最终你需要助记词来生成提款密钥以提出质押的ETH，并且增加验证者节点时也需要使用助记词。如果你丢失了助记词，就无法将你的资产提出了。

 &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/K9ncHt8/p5.png&quot;/&gt;&lt;/center&gt;





一旦你点击确认已经记好助记词之后，你的验证者密钥对便会生成。



 &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jTVR96R/p6.png&quot;/&gt;&lt;/center&gt;

 



新创建的验证者密钥对和存款数据文件会放置在指定位置。文件夹的内容如下所示：


 &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/cQsh0nx/p7.png&quot;/&gt;&lt;/center&gt;





关于这些文件：


· 文件 `deposit_data-[timestamp].json` 包含验证者公钥和质押存款信息。该文件将用于完成随后的ETH存款过程。


· 文件 `keystore-m...json` 包含经过加密的验证者签名密钥。每一个验证者节点对应一个“keystore-m”。该文件将被导入到Prysm验证者钱包中以备质押时使用。随后需要将这些文件复制粘贴到Ubuntu服务器中。

## 最后的步骤


现在你已经有了存款数据和密钥存储库文件，接下来就可以设置Ubuntu服务器了。



**注意：此时还不能进行存款。**



首先完成并验证你的质押设置非常重要。如果你的ETH存款激活了，但是质押设置还没准备好的话，你将会受到怠工惩罚。

&lt;br/&gt;

# 第2步：连接至服务器




使用一个SSH端口，连接至你的Ubuntu服务器。如果你用`root`登录，最好是重新创建一个拥有管理权限的用户账户，因为使用root用户登录存在很大的[风险](https://askubuntu.com/questions/16178/why-is-it-bad-to-log-in-as-root)。


&gt;
&gt; 注意：如果你不是用`root`登录的便可以直接跳到第三步。



创建一个新账户。在 `&lt;yourusername&gt;` 中填入你的用户名，然后设置一个安全系数较高的密码，并输入其他可选信息。

```powershell
# adduser &lt;yourusername&gt;
```



通过把新的用户加入`sudo`群组中，来授予其管理权限。这样用户在命令行前输入`sudo`，便会以超级用户的权限来执行操作。

```powershell
# usermod -aG sudo &lt;yourusername&gt;
```



可选项：如果你使用SSH密钥通过`root`用户连接你的Ubuntu系统，你需要将新创建的账户和root用户的[SSH密钥数据](https://jumpcloud.com/blog/what-are-ssh-keys)组合起来。

```powershell
# rsync --archive --chown=&lt;yourusername&gt;:&lt;yourusername&gt; ~/.ssh /home/&lt;yourusername&gt;
```



最后，退出登录你的`root`账户，然后使用你新创建的用户名`&lt;yourusername&gt;`登入Ubuntu服务器。

&lt;br/&gt;

# 第3步：升级服务器



确保系统更新至最新的软件和安全设置。

```powershell
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo apt dist-upgrade &amp;&amp; sudo apt autoremove
$ sudo reboot
```
&lt;br/&gt;

# 第4步：保护服务器



安全性十分重要。但由于本文不是针对安全性的指南，所有只列出了一些基础的设置。

## 修改SSH默认端口



SSH默认端口是端口22，也是易受攻击的矢量，因此可以修改SSH端口来防止攻击。



在1024 — 49151之间选择一个端口号，然后运行以下命令以检索尚未使用的端口号。没有其他显示便意味着该端口号未被使用；显示红色便意味着已被使用，请尝试其他端口号。比如：`sudo ss -tulpn | grep &apos;:6673&apos;`

```powershell
$ sudo ss -tulpn | grep &apos;:&lt;YourSSHPortNumber&gt;&apos;
```



确定端口号可用之后，通过升级SSH设置来修改默认端口。

```powershell
$ sudo nano /etc/ssh/sshd_config
```



在文件中检索或者添加 (如果没有的话) `Port 22` 命令行。删掉`#` (如果有的话) 并在下面的命令行中输入端口号。

```powershell
Port &lt;YourSSHPortNumber&gt;
```



参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/pzy7wfL/p8.png&quot; /&gt;&lt;/center&gt;





重新启动 SSH 服务以显示上述所作的修改。

```powershell
$ sudo systemctl restart ssh
```



登出并使用你的SSH端口号`&lt;YourSSHPortNumber&gt;`重新登入。

## 配置防火墙



Ubuntu 20.04 服务器可以使用默认的 [UFW 防火墙](https://help.ubuntu.com/community/UFW) 来限制访问该服务器的流量，不过要先设置其允许来自 SSH、Go Ethereum、Prysm 的入站流量。

**安装 UFW 防火墙**



按照下面的命令行输入以保证在默认情况下安装 UFW。

```powershell
$ sudo apt install ufw
```

**应用 UFW 默认值**



明确地应用默认值，拒绝入站流量，允许出站流量。

```powershell
$ sudo ufw default deny incoming
$ sudo ufw default allow outgoing
```

**允许 SSH**



允许你此前设置的端口号 `&lt;YourSSHPortNumber&gt;` 的入站流量。SSH 要求 TCP 协议。比如：`sudo ufw allow 6673/tcp`

```powershell
$ sudo ufw allow &lt;yourSSHportnumber&gt;/tcp
```

**拒绝 SSH 端口号22**

拒绝端口 22/TCP 的入站流量。

&gt; NOTE: Only do this after you SSH in using `*&lt;YourSSHPortNumber&gt;*`.
&gt;
&gt; 注意：当你完成了修改 SSH 默认端口之后再做这一步。

```powershell
$ sudo ufw deny 22/tcp
```

**允许 Go Ethereum**



允许与 Go Ethereum 的对等节点 (端口 30303) 进行点对点 (P2P) 连接。如果你使用[第三方托管](https://ethereumnodes.com/)的 Eth1 节点，则可以跳过这一步。


&gt;
&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要[配置](https://www.howtogeek.com/66214/how-to-forward-ports-on-your-router/)你的网络路由以允许来自端口 30303 的入站流量。

```powershell
$ sudo ufw allow 30303
```

**允许 Prysm 客户端**



允许与 Prysm 的对等节点进行点对点连接，以便在信标链节点上 (Prysmatic Labs 的默认端口为 13000/TCP 和 12000/UDP) 进行操作。


&gt;
&gt; 注意：如果你在本地托管你的Ubuntu服务器，你需要[配置](https://www.howtogeek.com/66214/how-to-forward-ports-on-your-router/)你的网络路由以允许来自端口 13000 和12000 的入站流量。

```powershell
$ sudo ufw allow 13000/tcp
$ sudo ufw allow 12000/udp
```



开启防火墙并检查是否已按上述步骤正确地配置。

```powershell
$ sudo ufw enable
$ sudo ufw status numbered
```



查看下面截图以供参考。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/bPqGH2J/p9.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;

# 第5步：配置定时器



Ubuntu 内置了时间同步，并默认使用 systemd‘s timesyncd 服务进行激活。验证其是否正确运行。

```powershell
$ timedatectl
```


激活  `NTP service` ，运行方式：

```powershell
$ sudo timedatectl set-ntp on
```


参考下方的截图：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ftXCM1Q/p10.png&quot;/&gt;&lt;/center&gt;




只能使用单个定时器服务。如果你此前安装过 NTPD，你需要检查此文件是否还存在，如果存在请操作下面的命令行以删除。

```powershell
$ ntpq -p
$ sudo apt-get remove ntp
```
&lt;br/&gt;

# 第6步：设置一个 Eth1 节点



参与质押需要一个 Eth1 节点。你可以选择运行一个本地 Eth1 节点，也可以使用[第三方提供的节点](https://ethereumnodes.com/)。本教程会详细讲解如何运行 Go Ethereum，如果你选择[第三方服务](https://ethereumnodes.com/)的话，可以跳过这一步。

&gt;
&gt; 注意：检查你的可用磁盘空间。一个Eth1节点需要大概400GB的存储空间。尽管你有一个容量较大的固态硬盘，Ubuntu也可能显示仅剩200GB的可用空间。如果你遇到这种情况，请查看附录C —— 扩展逻辑卷。

## 安装 Go Ethereum



使用PPA (Personal Package Archives，个人安装包存档) 安装Go Ethereum客户端。

```powershell
$ sudo add-apt-repository -y ppa:ethereum/ethereum
$ sudo apt update
$ sudo apt install geth
```


将Go Ethereum作为后台服务来运行，运行该服务需要创建一个账户。此种类型的账户无法登录服务器。

```powershell
$ sudo useradd --no-create-home --shell /bin/false goeth
```


为Eth1区块链创建数据目录，用来存储Eth1节点数据。

```powershell
$ sudo mkdir -p /var/lib/goethereum
```


设置目录的权限。 `goeth` 账户需要权限来修改该数据目录。

```powershell
$ sudo chown -R goeth:goeth /var/lib/goethereum
```



创建一个systemd服务配置文件来对该服务进行配置。

```powershell
$ sudo nano /etc/systemd/system/geth.service
```



将下列的服务配置复制粘贴到文档中。

```powershell
[Unit]
Description=Go Ethereum Client
After=network.target
Wants=network.target[Service]
User=goeth
Group=goeth
Type=simple
Restart=always
RestartSec=5
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30[Install]
WantedBy=default.target
```



需要注意的 [flags](https://geth.ethereum.org/docs/interface/command-line-options):



 `--http` 用来公开与Prysm信标链节点连接的一个HTTP端口 (http://localhost:8545)。



 `--cache` 指的是内部缓存的大小，以GB为单位。数值的增减取决于你的可用系统内存。设置 `2048` 将大概需要使用 4-5 GB的内存。



 `--maxpeers` 指的是所连接节点的最大数值。节点数量越多，意味着越多的网络数据可用空间。所以记得不要将该数值设置得太低，否则你的Eth1节点将难以保持同步。


参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/JBmb1PL/p11.png&quot;/&gt;&lt;/center&gt;




重新加载 systemd 以显示上述的更改并启动服务。检查状态以确保其正确运行。

```powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo systemctl status geth
```


参考下方的截图：
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/vxr3pNh/p12.png&quot;/&gt;&lt;/center&gt;







如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (此操作不会影响geth服务)。



允许geth服务在系统重启时自动启动。

```powershell
$ sudo systemctl enable geth
```



Go Ethereum节点将会开始同步。你可以运行下列命令来追踪进程或检查错误。按“CTRL+c”退出 (此操作不会影响geth服务)。

```powershell
$ sudo journalctl -fu geth.service
```



参考下方的截图：
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/qDvJ767/p13.png&quot;/&gt;&lt;/center&gt;






## 查看同步状态



要检查Eth1节点[同步状态](https://www.ipaddressguide.org/how-long-time-does-it-take-to-synchronize-an-ethereum-node/)，请使用下列命令访问控制台。

```powershell
geth attach http://127.0.0.1:8545
&gt; eth.syncing
```


如果显示结果是 `false` ，表明你的同步已完成。如果显示结果是同步数据，表明你仍在同步。作为参考，大概有7亿个已知状态 `knownStates`.



参考下方的截图

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/MZjyqnH/p14.png&quot;/&gt;&lt;/center&gt;





完成时按“CTRL+d”以退出。

## 检查连接的对等节点



要检查你的Eth1节点所连接的对等节点，请使用下列命令访问控制台。

```powershell
geth attach http://127.0.0.1:8545
&gt; net.peerCount
```



对等节点总数 `peerCount` 不会超过你所设置的最大对等节点总数 `--maxpeers` 。如果无法找到需要同步的对等节点，参阅下一部分。



完成后按“CTRL+d”以退出。

## 添加 bootnodes (可选)


有时可能要花点时间才能找到要同步的对等节点，可以添加bootnodes以改善这种情况。访问[这里]https://gist.github.com/rfikki/a2ccdc1a31ff24884106da7b9e6a7453 获得最新的清单并根据下列操作修改geth服务：

```powershell
$ sudo systemctl stop geth
$ sudo nano /etc/systemd/system/geth.service
```


修改 `ExecStart` 行，添加 `--bootnodes` flag：在下方罗列出最新的对等点，并以逗号分割。

```powershell
ExecStart=geth --http --datadir /var/lib/goethereum --cache 2048 --maxpeers 30 --bootnodes &quot;enode://d0b4a09d072b3f021e233fe55d43dc404a77eeaed32da9860cc72a5523c90d31ef9fab7f3da87967bc52c1118ca3241c0eced50290a87e0a91a271b5fac8d0a6@157.230.142.236:30303,enode://5070366042daaf15752fea340e7ffce3fd8fc576ac846034bd551c3eebac76db122a73fe8418804c5070a5e6d690fae133d9953f85d7aa00375d9a4a06741dbc@116.202.231.71:30303&quot;
```



保存文件之后退出。然后重启服务并观察。

```powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start geth
$ sudo journalctl -fu geth.service
```


&gt;
&gt; 注意：需要按照一系列特定的步骤来更新Geth。更多信息请参见“附录A：更新Geth”。

&lt;br/&gt;

# 第7步：下载Prysm


Prysm客户端由两份二进制文件组成：信标链节点和验证者客户端。本步骤将讲解如何下载Prysm和那两份二进制文件。



首先，访问[这里]https://github.com/prysmaticlabs/prysm/releases并找到最新发布的Prysm版本。通常在页面的最顶部，比如：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GdP0KHk/p15.png&quot;/&gt;&lt;/center&gt;



在“Assets”那一栏（如果需要的话点击展开) 将下载链接复制粘贴至文档**beacon-chain-v…-linux-amd64**以及文档**validator-v…-linux-amd64**中。请确保复制的链接是正确的。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jhRwqvV/p16.png&quot;/&gt;&lt;/center&gt;




操作下列命令来下载这些文件。将下方指令部分的URL改为最新版本的下载链接。

```powershell
$ cd ~
$ sudo apt install curl$ curl -LO https://github.com/prysmaticlabs/prysm/releases/download/v1.0.0/beacon-chain-v1.0.0-linux-amd64$ curl -LO https://github.com/prysmaticlabs/prysm/releases/download/v1.0.0/validator-v1.0.0-linux-amd64
```


重命名文档并使它们可执行。将他们复制到目录 `/usr/local/bin` 中，Prysm会在该处运行这些文件。根据需求修改文档名。

```powershell
$ mv beacon-chain-v1.0.0-linux-amd64 beacon-chain
$ mv validator-v1.0.0-linux-amd64 validator$ chmod +x beacon-chain
$ chmod +x validator$ sudo cp beacon-chain /usr/local/bin
$ sudo cp validator /usr/local/bin
```


清理下载的文档。

```powershell
$ cd ~
$ sudo rm beacon-chain &amp;&amp; sudo rm validator
```



注意：需要按照一系列特定的步骤来更新Prysm。更多信息请参见“附录B：更新Prysm”。

&lt;br/&gt;

# 第8步：导入验证者密钥对



导入你在第1步生成的密钥对，以配置Prysm验证者钱包。

## 复制验证者密钥存储文件



如果你的验证者存储文件 `keystore-m…json` 不是在你的Ubuntu服务器上生成的，那么你就需要将这些文件复制粘贴到你的本地目录中。你可以用 USB 把文件拷过去 (如果你的服务器是本地的)，也可以使用[安全的FTP (SFTP)](https://www.maketecheasier.com/use-sftp-transfer-files-linux-servers/)。



将文件放置在： `$HOME/eth2deposit-cli/validator_keys`。如果需要的话创建文件目录。

## 将密钥存储文件导入验证者客户端



创建一个目录以存储验证者钱包数据，并授予当前用户访问该目录的权限。当前用户需要访问权限来执行导入。在 `&lt;yourusername&gt;` 修改登入用户名。

```powershell
$ sudo mkdir -p /var/lib/prysm/validator
$ sudo chown -R &lt;yourusername&gt;:&lt;yourusername&gt; /var/lib/prysm/validator
```


运行验证者密钥导入进程。你需要提供放置已生成的密钥存储库文件的路径。比如： `$HOME/eth2deposit-cli/validator_keys`

```powershell
$ cd /usr/local/bin
$ validator accounts import --keys-dir=$HOME/eth2deposit-cli/validator_keys
```



然后会出现一些[使用条款](https://github.com/prysmaticlabs/prysm/blob/master/TERMS_OF_SERVICE.md)，你需要输入接受 `accept` 才能继续下一步。



你将需要提供一个**钱包目录**，在这里你可以创建新的钱包。输入：`/var/lib/prysm/validator`

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6Wyz7jq/p16-5.png&quot;&quot;/&gt;&lt;/center&gt;

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wz4krDB/p17.png&quot;/&gt;&lt;/center&gt;



然后创建一个钱包密码并保存在一个安全的地方。稍后你配置验证者时将需要使用这个密码。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wz4krDB/p17.png&quot;/&gt;&lt;/center&gt;


接下来你需要提供你在第1步生成的验证者密钥对。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/7SN92nQ/p18.png&quot;/&gt;&lt;/center&gt;





如果输入正确，密钥将被导入。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/rvMw28R/p19.png&quot;/&gt;&lt;/center&gt;



## 创建一个钱包密码文件


创建一个文件来保存钱包密码，这样Prysm验证者服务就可以在不知道密码的情况下访问该钱包了。文件命名为：password.txt

```powershell
$ sudo nano /var/lib/prysm/validator/password.txt
```



将你的新钱包密码导入文件中，用你的密码替换掉 `YourNewWalletPassword` 。

Check the screen shot below for reference. Press CTRL+x then ‘y’ then &lt;enter&gt; to save and exit.

参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/3rhMY57/p20.png&quot;/&gt;&lt;/center&gt;





接下来会讲如何设置验证者目录以及密码文件的访问权限。

现在已经导入成功并且设置好钱包了。

&lt;br/&gt;

# 第9步：配置Prysm信标节点





在这一步，你要把节点作为服务那样来配置并运行，因此如果系统重启，这个过程将自动重新开始。

## 设置账户和目录

为信标节点的运行创建一个账户。这种账户不能用来登录进入服务器。

```powershell
$ sudo useradd --no-create-home --shell /bin/false prysmbeacon
```

为信标节点的数据库创建数据目录和设置权限。

```powershell
$ sudo mkdir -p /var/lib/prysm/beacon
$ sudo chown -R prysmbeacon:prysmbeacon /var/lib/prysm/beacon
$ sudo chmod 700 /var/lib/prysm/beacon
$ ls -dl /var/lib/prysm/beacon
```

参考下方的截图。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wMy1Wj5/p21.png&quot;/&gt;&lt;/center&gt;

## 创建和配置服务

创建一个systemd服务的config文档来配置服务

```powershell
$ sudo nano /etc/systemd/system/prysmbeacon.service
```

将下面这段代码复制粘贴到文档里

```powershell
[Unit]
Description=Prysm Eth2 Client Beacon Node
Wants=network-online.target
After=network-online.target[Service]
User=prysmbeacon
Group=prysmbeacon
Type=simple
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/beacon-chain --datadir=/var/lib/prysm/beacon --http-web3provider=http://127.0.0.1:8545 --accept-terms-of-use[Install]
WantedBy=multi-user.target
```

需要注意的[flags](https://docs.prylabs.network/docs/prysm-usage/parameters): 

`--http-web3provider` 如果你正在使用一个远程或第三方的Eth1节点，你需要改变这个值。如果你是在本地创建Eth1节点的，这里不需要改动。

`--accept-terms-of-use` 需要自动启动服务。使用这个flag表示接受Prysm的[使用条款](https://github.com/prysmaticlabs/prysm/blob/master/TERMS_OF_SERVICE.md)。

.参考下方的截图。按 CTRL+x然后&apos;y&apos;，按回车保存然后退出。(译者注：此处作者没有提供截图）



重新加载systemd以显示更改。

```powershell
$ sudo systemctl daemon-reload
```

Start the service and check to make sure it’s running correctly. 启动服务并检查，确保正确运行。

```powershell
$ sudo systemctl start prysmbeacon
$ sudo systemctl status prysmbeacon
```

参考下方的截图

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/86XMtkF/p22.png&quot;/&gt;&lt;/center&gt;



如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (不会影响prysmbeacon的服务)。

允许服务随系统重启而自动重启。

```powershell
$ sudo systemctl enable prysmbeacon
```

如果Eth2 链处于创世后的状态，Prysm的信标链会开始同步数据。它可能要花几个小时才能完全实现同步。你可以通过运行`journalctl` 命令来追踪进程或检查错误。按CTRL+c退出 (将不会影响prysmbeacon的服务)

```powershell
$ sudo journalctl -fu prysmbeacon.service
```

日志的截位视图会显示以下状态信息。

```powershell
Nov 27 06:20:48 ETH-STAKER-001 bash[44829]: time=&quot;2020-11-27 06:20:48&quot; level=info msg=&quot;Processing deposits from Ethereum 1 chain&quot; deposits=1024 genesisValidators=1019 prefix=powchain
```

当Eth2主网启动，信标链和验证者将自动开始处理数据。

&gt; 注意：如果你的Eth1节点仍在同步，你将会出现以下报错信息。当同步完成了，它会自动消失。

```powershell
Nov 27 06:16:29 ETH-STAKER-001 bash[44747]: time=&quot;2020-11-27 06:16:29&quot; level=error msg=&quot;Could not connect to powchain endpoint&quot; error=&quot;could not dial eth1 nodes: eth1 node using incorrect chain id, 0 != 1&quot; prefix=powchain
```
&lt;br/&gt;

# 第10步：配置Prysm验证者客户端

在这一步，你需要将你的验证者客户端作为一项后台服务来配置和运行，因此系统重启时这个进程会自动重启。

## 创建账户和目录

为验证者客户端的运行创建一个账户。这类账户无法登录服务器。

```powershell
$ sudo useradd --no-create-home --shell /bin/false prysmvalidator
```

这个验证者数据目录已经在第8步创建了。现在设置权限，使得这个`prysmvalidator`账户可以修改这个数据目录。

```powershell
$ sudo chown -R prysmvalidator:prysmvalidator /var/lib/prysm/validator
$ sudo chmod 700 /var/lib/prysm/validator
$ ls -dl /var/lib/prysm/validator
```

参考下方的截图。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/9yRKsfm/p23.png&quot;/&gt;&lt;/center&gt;


验证者钱包的password.txt文档在第8步已经创建了。现在设置权限，使得只有`prysmvalidator`的账户可以读取这个文档。

```powershell
$ sudo chmod -R 700 /var/lib/prysm/validator/password.txt
$ sudo ls -lh /var/lib/prysm/validator/
```

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wz109tf/p24.png&quot;/&gt;&lt;/center&gt;

## 创建并配置服务

创建一个systemd服务文件来配置服务

```powershell
$ sudo nano /etc/systemd/system/prysmvalidator.service
```

将下面这段代码复制粘贴到文档里

```powershell
[Unit]
Description=Prysm Eth2 Validator Client
Wants=network-online.target
After=network-online.target[Service]
User=prysmvalidator
Group=prysmvalidator
Type=simple
Restart=always
RestartSec=5
ExecStart=/usr/local/bin/validator --datadir=/var/lib/prysm/validator --wallet-dir=/var/lib/prysm/validator --wallet-password-file=/var/lib/prysm/validator/password.txt --graffiti=&quot;&lt;yourgraffiti&gt;&quot; --accept-terms-of-use[Install]
WantedBy=multi-user.target
```

需要注意的[flag](https://docs.prylabs.network/docs/prysm-usage/parameters):

`--graffiti=&quot;&lt;yourgraffiti&gt;&quot;` 填上你的涂鸦字串符。出于安全和隐私，应避免使用能唯一辨识你的信息。比如`--graffiti &quot;Hello Eth2! From Dominator&quot;`。

参考下方的截图。按CTRL+x 然后选 ‘y’ ，按回车保存并退出。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/qnwySDN/p25.png&quot;/&gt;&lt;/center&gt;



重新加载systemd以显示更改。

```powershell
$ sudo systemctl daemon-reload
```

开启服务并检查，确保运行正确。

```powershell
$ sudo systemctl start prysmvalidator
$ sudo systemctl status prysmvalidator
```

参考下方的截图


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/7gJN8Nw/p26.png&quot;/&gt;&lt;/center&gt;


如果你每一步都做对了，它会用绿色字体显示”active (running)&quot;。如果没有显示，你需要倒回去重复上述步骤，修复问题。按Q退出 (不会影响prysmvalidator的服务)。

允许服务随系统重启而自动重启。

```powershell
$ sudo systemctl enable prysmvalidator
```

你可以通过运行`journalctl`命令来追踪进程或检查错误。按CTRL+c来退出(将不会影响prysmvalidator的服务)

```powershell
$ sudo journalctl -fu prysmvalidator.service
```

日志的截位视图会显示以下状态信息。

```powershell
ETH-STAKER-001 systemd[1]: Started Prysm Eth2 Validator Client.
level=warning msg=&quot;Running on ETH2 Mainnet&quot; prefix=flags
level=info msg=&quot;Opened validator wallet&quot; keymanager-kind=direct level=info msg=&quot;Checking DB&quot; databasePath=&quot;/var/lib/prysm/validator&quot; level=info msg=&quot;Starting validator node&quot; prefix=node 
...
level=info msg=&quot;Validating for public key&quot; prefix=validator publicKey=0x9072a8f02c18
level=info msg=&quot;Validating for public key&quot; prefix=validator publicKey=0xaa5ff8b63560
level=info msg=&quot;Waiting for beacon chain start log from the ETH 1.0 deposit contract&quot; prefix=validator
level=info msg=&quot;Beacon chain started&quot; genesisTime=2020-12-01 12:00:23 +0000 UTC prefix=validator
level=info msg=&quot;Waiting for deposit to be observed by beacon node&quot; prefix=validator pubKey=0x9072a8f02c18 status=&quot;UNKNOWN_STATUS&quot;
```

你可以在 [beaconcha.in](https://beaconcha.in/)查看你的验证者状态。只需要搜索你的验证者公钥或使用你的MetaMask （或其他）钱包地址进行搜索。你的数据可能要过一段时间才会在网站上显示。

&lt;br/&gt;

# 第11步：进行验证者存款

 现在你的节点已经设置好并开始运行，你将需要将ETH存入你的验证者节点。


&gt;
&gt; 注意：如果你已经提交了你的质押存款，你可以跳过这一步

这一步是关于将所需的ETH存入Eth2.0的存款合约。不要把ETH发送到存款合约。这需要在浏览器上通过Eth2.0的Launchpad网站启动你的MetaMask (或其他) 钱包。


&gt;
&gt; 注意：如果是在创世后进行的话，你需要在你的Eth1节点和信标链都完全同步完之前存入你的存款。如果你不这样做，当你的Eth1节点或信标链在同步时，Prysm会处于怠工状态，而你可能要遭遇怠工惩罚。



以太坊2.0 Launchpad: https://launchpad.ethereum.org/

一直随着屏幕切换点击这些警告步骤，直到你到达**密钥对生成**的部分。选择你打算运行的验证者数量。选择一个与你在步骤1中生成的验证者文件数量相匹配的值。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/CwKwHzQ/p27.png&quot; /&gt;&lt;/center&gt;

往下滚动，看这些内容你是否同意，然后点击“Continue” (继续)。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/LdJsJwY/p28.png&quot;/&gt;&lt;/center&gt;





你会被要求上传`deposit_data-[timestamp].json`文档。这个文档你是在步骤1生成的。浏览/选择或拖拉这个文档，然后点击Continue。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/PTkh7gD/p29.png&quot;/&gt;&lt;/center&gt;



连接你的钱包。选择MetaMask (或者是其他支持的钱包)，登录，选择存有你的ETH的钱包，然后点击Continue。

你的MetaMask余额就会显示出来。如果你选择了主网且你有充足的ETH余额，网站会允许你继续下一步。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/tqrFPLV/p30.png&quot;/&gt;&lt;/center&gt;

然后会出现一个Summary (总结)，显示验证者数和所需的ETH数量。如果你同意的话就给那些方框打勾，然后点击Continue。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jktcfzz/p31.png&quot;/&gt;&lt;/center&gt;



如果你准备好去存款了，点击&quot;Initiate All Transactions&quot; (启动所有交易）。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NFbJXL5/p32.png&quot;/&gt;&lt;/center&gt;



 当你到了可以确认每笔交易那一步时，MetaMask (或其他钱包)的窗口会自动弹出。 

当所有的交易都成功完成时，你的质押也完成了！

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/kq7Cn7v/p33.png&quot;/&gt;&lt;/center&gt;



恭喜你已经成功存入你的质押存款了！

## 查看你的验证者存款状态



新加入的验证者需要等一下 (几个小时到几天不等)才能激活。你可以以下几步来查看你的密钥状态：

1. 复制你的MetaMask (或其他）钱包地址。
2. 前往这里: [beaconcha.in/](https://beaconcha.in/) 
3. 用你的钱包地址搜索你的密钥

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/JQYHLPH/p34.png&quot;/&gt;&lt;/center&gt;



点进某个验证者详情，每个验证者激活后你会看到在Status那一栏有预估时间。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/nbPs42c/p35.png&quot;/&gt;&lt;/center&gt;



现在你面前有一个条正在运作的信标链、一个验证者节点以及你的主网存款。如果以太坊2.0主网处于运行中，一旦你的存款被激活，你将开始工作并赚取收益。

**恭喜你：你终于正式成为了一名以太坊质押者**

 是时候来一顿肥宅水狂欢了。

&lt;br/&gt;

# 第12步：监测

因为一些还没被解决的安全问题，监测这一部分将在未来补充到这份教程。

&lt;br/&gt;

# 结束语及后续建议

感谢大家给我这个机会。希望这份教程能帮到大家。

**后续步骤:**

- 检查三次所有密钥与密码备份。
- 重启你的电脑并确保服务都能自动启动。
- 了解如何升级客户端与服务器软件。
- 使用`htop`来监测本地电脑的资源
-  熟悉[beaconcha.in](https://beaconcha.in/) ，这样你就能监测你的验证者情况，其提供警报功能 （通过邮件发送，需要注册）和最多[3个POAP](https://beaconcha.in/poap)。
- J 加入 [Ethstaker](https://discord.gg/7z8wzehjrJ)和 [Prysm](https://discord.gg/VaQcHq76yJ)的Discord，留意重要通知。
- 请在[Discord](https://discord.gg/7z8wzehjrJ)、 [Twitter](https://www.twitter.com/SomerEsat)、或[Reddit](https://www.reddit.com/user/SomerEsat)分享对这份教程的反馈。
- 在 [Ethstaker](https://discord.gg/7z8wzehjrJ) 的discord上帮助其他人设置。
- 用[friend link](https://someresat.medium.com/guide-to-staking-on-ethereum-2-0-ubuntu-prysm-56f681646f74?sk=b61691b713d37802b8345855dc356b02)分享这份教程
- 支持一下：somer.eth

&lt;br/&gt;

# 延伸阅读

强烈建议大家从尽可能多的来源获取信息，还有很多其他资源可以帮助你熟悉如何在Eth2上质押。

如果作者对这些资源还没测试或验证过，而你采用了的话，是要自己承担风险的。

- C客户端团队的官方文档 [Prysm](https://docs.prylabs.network/docs/getting-started) | [Lighthouse](https://lighthouse-book.sigmaprime.io/) | [Teku](https://docs.teku.consensys.net/en/latest/) | [Nimbus](https://status-im.github.io/nimbus-eth2/intro.html)
- [/r/EthStaker Sticky](https://www.reddit.com/r/ethstaker/comments/jjdxvw/welcome_to_rethstaker_the_home_for_ethereum/)
- [以太坊2.0客户端的非官方docker环境](https://github.com/eth2-educators/eth2-docker)
- [如何在Ubuntu上设置Eth2主网验证者系统](https://github.com/metanull-operator/eth2-ubuntu)
- [指南 | 如何在ETH2主网设置验证者](https://www.coincashew.com/coins/overview-eth/guide-or-how-to-setup-a-validator-on-eth2-mainnet)
- [指南 | ETH2验证者信标链节点的安全最佳实践](https://www.coincashew.com/coins/overview-eth/guide-or-security-best-practices-for-a-eth2-validator-beaconchain-node) 
- [ETH2质押节点的额外监察](https://moody-salem.medium.com/additional-monitoring-for-eth2-staking-nodes-aea05b2f9a86) 
- [以太坊2.0质押的Telegram服务](https://9elements.com/blog/ethereum-2-0-2/) 

&lt;br/&gt;

# 附录A — Geth更新

如果你需要更新到Geth的最新版本，请按下列步骤：

```powershell
$ sudo systemctl stop prysmvalidator
$ sudo systemctl stop prysmbeacon
$ sudo systemctl stop geth
$ sudo apt update &amp;&amp; sudo apt upgrade
$ sudo systemctl start geth
$ sudo systemctl status geth # &lt;-- Check for errors
$ sudo journalctl -fu geth # &lt;-- Monitor
$ sudo systemctl start prysmbeacon
$ sudo systemctl status prysmbeacon# &lt;-- Check for errors
$ sudo journalctl -fu prysmbeacon.service # &lt;-- Monitor
$ sudo systemctl start prysmvalidator
$ sudo systemctl status prysmvalidator# &lt;-- Check for errors
$ sudo journalctl -fu prysmvalidator.service # &lt;-- Monitor
```

&lt;br/&gt;

# 附录B — 更新Prysm

如果你需要更新到Prysm的最新版本，请按下列步骤进行：

 首先，前往[这里](https://github.com/prysmaticlabs/prysm/releases)找出最新的Linux发布。在asset部分 (如果需要的话点击展开)复制下载连接到**beacon-chain-v…-linux-amd64** 和 **validator-v…-linux-amd64**文档。注意要复制正确的链接。

将下方指令部分的URL改为最新版本的下载链接。

```powershell
$ cd ~
$ sudo apt install curl$ curl -LO https://github.com/prysmaticlabs/prysm/releases/download/v1.0.0/beacon-chain-v1.0.0-linux-amd64$ curl -LO https://github.com/prysmaticlabs/prysm/releases/download/v1.0.0/validator-v1.0.0-linux-amd64
```

停止Prysm的服务。

```powershell
$ sudo systemctl stop prysmvalidator
$ sudo systemctl stop prysmbeacon
```

重命名文档使其可执行。复制它们到`/usr/local/bin` 目录。需要的话修改下方的文档名。

```powershell
$ mv beacon-chain-v1.0.0-linux-amd64 beacon-chain
$ mv validator-v1.0.0-linux-amd64 validator$ chmod +x beacon-chain
$ chmod +x validator$ sudo cp beacon-chain /usr/local/bin
$ sudo cp validator /usr/local/bin
```

重启服务并检查错误。

```powershell
$ sudo systemctl daemon-reload
$ sudo systemctl start prysmbeacon
$ sudo systemctl status prysmbeacon# &lt;-- Check for errors
$ sudo journalctl -fu prysmbeacon.service # &lt;-- Monitor
$ sudo systemctl start prysmvalidator
$ sudo systemctl status prysmvalidator# &lt;-- Check for errors
$ sudo journalctl -fu prysmvalidator.service # &lt;-- Monitor
```

清理已下载的文档。

```powershell
$ cd ~
$ sudo rm beacon-chain &amp;&amp; sudo rm validator
```
&lt;br/&gt;

# 附录 C — 扩展逻辑卷

很多时候Ubuntu只预配200GB的较大固态硬盘，导致用户在同步他们的Eth1节点时就耗尽存储空间了。报错信息近似于：

```powershell
Fatal: Failed to register the Ethereum service: write /var/lib/goethereum/geth/chaindata/383234.ldb: no space left on device
```

为了解决这个问题，假设你有一个大于200GB的固态硬盘，你可以通过下列步骤为 [LVM](https://wiki.ubuntu.com/Lvm) (逻辑卷管理) 扩大容量：

```powershell
$ sudo lvdisplay # &lt;-- Check your logical volume size
$ sudo lvm 
&gt; lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv
&gt; exit
$ sudo resize2fs /dev/ubuntu-vg/ubuntu-lv
$ df -h # &lt;-- Check results
```

这会重新调整你的硬盘至它的最大可用空间。

如果你在这方面需要支持，请在 [EthStaker](https://discord.gg/7z8wzehjrJ) 的Discord上寻求帮助。

&lt;br/&gt;

# 完整免责声明


这篇文章（教程) 仅供参考，不构成专业建议。作者不保证文章中任何信息的准确性、质量、完整性、实效性与有效性。本文所有信息均按“原样”提供，不作任何形式的保证，并可随时更改，恕不另行通知。作者不因任何目的对任何形式的明示、暗示和法定保证负责，包括对文章内容的准确性、时效性、完整性或合适性的保证。作者也不对任何直接、间接、偶然、后果性或任何其他因使用本文或根据本文所提供的信息而造成的损害负责。这包括任何人身伤害、业务中断、使用损失、数据丢失、利润损失或任何其他金钱损失，无论是在合同、疏忽或其他不当使用中，即使作者已了解这种可能性。</content:encoded></item><item><title><![CDATA[引介 | 信标链Staking常见问题]]></title><description><![CDATA[详尽说明Staking基本概念、奖惩、风险、运营选择。]]></description><link>https://www.ethereum.cn/beacon-chain-staking-faq-by-ethfans</link><guid isPermaLink="false">https://www.ethereum.cn/beacon-chain-staking-faq-by-ethfans</guid><pubDate>Tue, 08 Dec 2020 00:00:00 GMT</pubDate><content:encoded>本文转自EthFans

&lt;br/&gt;

&gt; 编者注：本文的主要目的是提醒大家参与被称为 “以太坊 2.0” 或 “Eth2.0” 的权益证明（PoS）项目的风险，也希望在这种讲解中帮助大家理解它本身。鉴于该项目在当前具备具体形态的只有其设计组件之一 “信标链”，下文都将用 “信标链” 来指称所谓的 “Eth2.0”。相信大家看完这些常见问题的解答（及其附带材料之后），会理解这种选择。

&lt;br/&gt;

# 一. 我需要掌握哪些基本概念？

## 什么叫 Eth2.0？

Eth2.0 是由以太坊基金会（Ethereum Foundation，简称 “EF”）的研究团队提出的一种区块链架构，旨在实现以权益证明为共识机制、分片化执行的区块链。该部分的研究源自 EF 自设立之初便公开的愿景（实现权益证明共识的区块链）并且一直由 EF 研究团队主导，并且，按照预期，在这样一种架构可用之后，其启动状态将继承当前的以太坊主网（Ethereum Blockchain Mainnet）在某个时刻的账户状态，因此被称为 “以太坊 2.0”。

在实现的步骤上，EF 的计划是分三个阶段推出，每个阶段都增加一个组件和一部分功能。到目前为止，第三个阶段（“Phase 2”）的设计尚未全部完成；Phase 1 的技术目标，也可能发生调整。

当前，以太坊区块链上的 ETH 持币者可以参与的，是以权益证明（PoS）机制来运行的 “信标链”（Phase 0）。在设计上，信标链是整个分片化执行系统的核心，但这个核心没有执行的功能（后文我们会看到这一点的影响）。

详情可见：https://ethereum.org/en/eth2/vision/

## 什么是验证者？

在谈论信标链时，验证者（Validator）是 PoS 共识过程的参与者（就像 PoW 共识中提交工作量证明的矿工）。信标链验证者通过对区块的投票来形成区块链，完成共识后获得出块奖励。

## 什么是权益证明共识机制？

权益证明（Proof of Stake）是这样一类共识机制：它以参与者占有系统内资源（比如 token）的多少来决定其成为出块者的概率和对区块投票时的投票权重；获得多数参与者支持的区块则成为主链的一部分；而主链区块的支持者也将获得增发的 token 作为奖励。

信标链所用的 PoS 机制为 “Casper FFG 算法” + “LMD-Ghost 分叉选择规则”。两套规则联合定义了验证者在不同时机应当做什么和不应当做什么。遵循了规则的指引就能获得奖励，而违反了规则就会被惩罚。

## 信标链多久出一次块？

信标链的基本时间单位不是 “区块”，而是 slot 和 epoch。一个 slot 是 12 秒钟；一个 epoch 是 32 个 slot，即 6.4 分钟。每当一个 epoch 终止时，验证者们就根据预先确定的规则（以及信标链当时的状态）将每一位验证者分配到下一个 epoch 的某一个 slot 当中参与投票（称为 “见证者（attestator）”）；与此同时，每个 slot 也会有专门的一个验证者负责提议区块（称为 “提议者（proposer）”）。如果某个 slot 的提议者在当时离线了，该 slot 就无法出块，形成了一个 “跳过（missed）” 的 slot。所以多久出一个块在信标链上是不确定的，理想情况下是每 12 秒就能形成一个区块。

## 那么验证者的奖励是每出一个块就发放一次吗？

并不是。验证者的奖励和惩罚是每个 epoch 结算一次。每当一个 epoch 结束，新一个 epoch 开始的时候，验证者们就根据预先确定的规则结算该 epoch 的验证者奖惩，从而确定新一个 epoch 中不同验证者的投票权重。

## 怎么成为验证者？

首先，你需要在当前的以太坊区块链上，向押金合约 [0x00000000219ab540356cbb839cbe05303d7705fa](https://etherchain.org/account/0x00000000219ab540356cbb839cbe05303d7705fa) 发送 ETH 并提供自己为验证者安排的取款公钥和验证公钥，然后等待约 7.5 个小时，就能注册成为验证者了。注册成功后，你的验证者还需在候选队列中排队一段时间，才会实际参与 PoS 共识并获得奖励，这个时间的长短视队列的长短而定（因为每个 epoch，能从候选队伍进入 “活跃验证者” 集合的验证者数量是有限的）。

**此中的操作非常复杂，请千万不要自己手动操作，务必使用 https://launchpad.ethereum.org/ （验证者快速启动器）完成存入押金的操作**。请认准这个网站并多方检查你的交易发往的合约的地址。不要存入 ETH 以外的 token。

该网站的简介可见：https://ethfans.org/posts/eth2-validator-launchpad

其次，你需要有一台保证自己能控制、电力和网络供应稳定，并且硬件具备一定水准的计算机，运行一种客户端软件，由软件来控制您的验证者私钥并实时地参与信标链的共识。具体要求可见后文 “运营建议” 章节。

## 什么是验证者密钥？

跟一个信标链验证者相关的密钥对有两对，一对我们称为 “验证密钥对”，该密钥对的私钥用于验证者在参与共识的时候签名发送见证消息（attestation）；另一对我们称为 “取款密钥对”，该密钥对的私钥用于在验证者完全退出验证者队伍后取回自己的验证者名下的资金。

两把私钥都需要自己保管，如果验证私钥泄露，则他人可用你的私钥发送见证消息，导致你的验证者被大力惩罚；如果取款私钥泄露，则他人可在你的验证者退出之后先你一步取走你属于你的全部资金。

两把公钥都需要在存入押金时提交到押金合约（再强调一遍，除非你非常了解相关的密码学及智能合约，否则**请老老实实使用 https://launchpad.ethereum.org/ 的引导流程及其提供的工具，完成操作**）。

简介可见：https://ethfans.org/posts/validated-staking-on-eth2-4-keys

## 你刚刚还提到什么客户端软件？

没错，你需要运行一些软件，由该软件托管你的验证私钥并不断地在网络中收发消息，来参与信标链的 PoS 共识。毕竟，从信标链（其他验证者）的角度来看，一个验证者就是名下有一些钱、需要不断发送见证消息的密钥对，如果你不参与共识，你的钱就血本无归了。

具体而言，你的计算机需要运行两种软件：（1）“Eth1 客户端”，例如 [Geth](https://geth.ethereum.org/)、[OpenEthereum](https://github.com/openethereum/openethereum)、[Nethermind](https://nethermind.io/)、[TurboGeth](https://github.com/ledgerwatch/turbo-geth)；（2）“Eth2 客户端”，例如 [Lighthouse](https://github.com/sigp/lighthouse)、[Prysm](https://github.com/prysmaticlabs/prysm)、[Teku](https://consensys.net/knowledge-base/ethereum-2/teku/)、[Nimbus](https://github.com/status-im/nimbus-eth2)。两类都只需选择一个即可。

不同软件的性能不同、硬件要求不同、编译难度也不同。至于其安全性，很抱歉，这里没有办法为任何一个软件的安全性背书。这里有一些部署教程：

- Ubuntu OS + Geth + Prysm: https://ethfans.org/posts/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-prysm
- Linux + Nethermind + Lighthouse: https://ethfans.org/posts/using-nethermind-to-run-a-validator-in-eth2
- 视频教程：https://www.bilibili.com/video/BV1x541157FC

&lt;br/&gt;

# 二. 奖励、惩罚、风险

## 我想参加信标链，听说早期参与者的收益率很高，是真的吗？

[快速启动器网站](https://launchpad.ethereum.org/)同时也提供了一个计算（纯粹数量意义的）年化收益率的粗略工具。一言以蔽之：信标链上资产的增发率与验证者有效余额的总和成反比；有效余额越低（一开始存入的押金较少）、增发率越高、验证者的年化收益率越高，反之亦然。

有效余额可以视为验证者的投票权重，跟验证者的现存余额（如果当下就退出能取回多少钱）是两个概念。介绍可见：https://ethfans.org/posts/understanding-validator-effective-balance

另外，在信标链上，奖励并不是均分的，Casper FFG 和 LMD-Ghost 形成了一套相当复杂的规则、根据每个 epoch 内各验证者的不同表现来为它们安排奖惩，所以，你可以说每个验证者的收益率都是不一样的，有些验证者能获得比全网均值更高的收益率。

但是，另有一些因素使得你不能把它简单地当成 “ETH 本位的年化收益率”，因为如前所述，**在设计上，信标链仅有形成共识的能力，没有执行能力，所以用户在信标链上获得的收益是无法在信标链上转账的；其次，在当前阶段，这些收益（以及本金）也无法退回到以太坊区块链上来；最后，在协议的层面支持这些收益及本金的流通，必须等到以信标链为核心的系统具备执行功能才行，而这一点尚未有明确的时间表。**（从目前来看，一年内推出执行功能是不太可能的，即使大家都以尽快实现可用性为目标，也会面临短期需要和长期需要的一些冲突。）

## 那些奖惩措施都是怎么回事？听说只要不离线就没事？

信标链（Casper FFG + LMD Ghost）的设计哲学是：扣押了验证者的押金之后，就可以通过惩罚来遏制验证者作出破坏性的行为；同时，还可以通过奖励的差别来鼓励他们相互合作。

惩罚基本上可分为三类：

（1）针对破坏共识的行为，如一个提议者在所在 Slot 提议了两个不同的区块（双重提议）；在执行 Casper FFG 投票时双重投票和环绕投票；此类行为是最严重的，会触发所谓的 “罚没（Slashing）”；

（2）对离线验证者的惩罚，称为 “怠工惩罚”。在网络具备终局性的时期，这种惩罚的力度会比较小，大体相当于如果你正常参与共识会得到的奖励（如果你参加共识会得到 3 块钱，那么你不参加会倒扣 3 块钱）。而在网络不具备终局性的时期，这一惩罚会随着缺乏终局性状态的延长而不断加码。

（3）在整个网络缺乏终局性的时期，在线的验证者也会遭到惩罚，但这个惩罚的力度是固定的，不会不断加大。所以并不是你一直在线就没事了，如果验证者大规模出错，你的正常验证者也会被惩罚，只不过被惩罚得少一些。（之所以这样设计是为了防止验证者在缺乏终局性的时期有意不传播、不打包其他验证者的见证消息来渔利。）

怎么定义 “离线” 呢？答案是，在一个 epoch 结束的时候，该 epoch 内的所有区块都不包含某个验证者的见证消息，则视其为离线。所以 “在线” 的要求并不会特别严格。

奖励则更简单一些：

（1）作为在线的区块提议者，可以获得 “区块提议奖励” 和 “检举人奖励”（如果所打包的区块内包含了对被罚没行为的检举消息的话，区块提议者可获得这部分被罚没的押金；在后续的发展中，这一设计可能会改变）

（2）作为在线的见证者，可以获得正常的 “FFG 投票奖励”。

其中，区块提议者在自己的区块内打包的见证消息越多（要求消息都是首次被打包），“区块提议奖励” 越高；而见证者在发出见证消息后，该条见证消息越快被打包，见证者获得的奖励也越高 —— 这就是在鼓励验证者们相互合作了。

关于信标链验证者的奖惩，最详细的简介见：https://ethfans.org/posts/rewards-and-penalties-on-ethereum-20-phase-0

关于 Capser FFG （终局性、双重投票、环绕投票）的简介，见：https://ethfans.org/posts/casper-ffg-explainer-by-adiasg 和 https://ethfans.org/posts/casper-ffg-in-eth2-0

## 罚没的力度到底有多大？

会被罚没的行为有：双重提议区块、FFG 双重投票、FFG 环绕投票。

遭到罚没之后，被罚没的验证者将面临三种惩罚：

（1）在遭到罚没时当下执行的一次性基本罚没；为该验证者有效余额的 1/32（在当前推出的信标链上，罚没和惩罚力度都被削弱了，当前的这一比例是 1/128，日后可能会再提高；见 https://github.com/ethereum/EIPs/pull/2982）

（2）连续不断的 “离线惩罚”；这是因为，被罚没的验证者的状态会被强制改成 “slashed（被罚没）”，在该状态下，每个 epoch 他都会被惩罚（力度固定为基本奖励的 3 倍）；待被罚没的验证者 “完全退出（exited）” 之后，这种惩罚会中止；（这个时长与等待退出的验证者的数量正相关）

（3）被罚没的验证者转成完全退出状态之后，还需要等待 8192 个 epoch 才能取回自己剩余的资金，在此期间，系统还会根据该验证者作恶被抓的的时间点前后 18 天内被罚没的押金数量施加进一步的惩罚。如果被罚没的押金数量超过 33%，这个惩罚力度可高达有效余额的 100%（即最高可达 32 BETH）(在当前的信标链上，这一特殊惩罚的力度也降低了，变为了 1/3，日后仍有可能再提高）。（此处的 “取回” 仅仅表示它不会再被罚没，在当前阶段，信标链的资金都无法取回到以太坊区块链上来。）

## 我如果疏忽了，放任自己的验证者一直离线，押金会被罚到变成 0 吗？

一般来说不会，当验证者的有效余额低于 16 BETH 时，验证者就会从 “活跃” 状态转入 “即将退出” 状态，等待排队退出。

但值得注意的是，即将退出的验证者仍需正常提交见证消息，如不，则仍会遭到怠工惩罚，在此期间仍会继续损失资金，直至完全退出。

关于验证者的状态转换，见：https://ethfans.org/posts/understanding-the-eth2-validator-lifecycle

## 我的验证者可以主动退出吗？

可以，在成为活跃验证者的 9 天后，可以发起主动退出请求，将验证者状态转为即将退出，进入等待退出的队列。

## 验证者完全退出之后，马上就能取回我剩余的资金吗？

不是，如果你没有被罚没，则完全退出后等待 256 个 epoch 即可取出资金；如果你遭到了罚没，则要等待 8192 个 epoch。但需要注意的是，在当前阶段，该资金仍无法转账。

## 完全退出之后是否还能再加入成为活跃验证者？

很遗憾，在当前的信标链上，无论是被罚没还是主动退出，抑或被动退出，相关的密钥对都不能再重新成为验证者。不过，你可以在自己的验证者还是活跃状态时，在以太坊区块链上通过押金合约为自己的验证者补充押金（但这种补充不是即时到账的）。

## 除了被惩罚的风险、开发路线的风险之外，还有什么风险？

最显然的是，还有客户端软件实现的风险，即客户端软件可能出错。如果你使用了出错的客户端，当然会直接受到影响；但即使你没有使用出错的客户端，仍然可能因为掉线的验证者太多、网络缺乏终局性而间接被波及。

## 什么时候信标链可能开放转账的功能？还面临哪些技术困难？

任一功能完成，都能使信标链开放转账功能：（1）让信标链具备单纯的转账功能（甚或仅在验证者之间开启转账功能）；（2）实现以太坊区块链与 “信标链-分片” 系统的合并。

前者可能较简单，但是与项目的长期目标不符，也违背了项目对参与者的承诺（提高了硬件需求）；至于后者，则显然需要更长的开发时间和谋求社会共识的时间。

而且，无论选择什么技术目标，为了使之足够安全，都必须花费很长时间。所以我个人并不预期一年内能开放转账功能。但这只是我的个人看法。而且变数也非常多。

&lt;br/&gt;

# 三. 运营建议

## 如果我自己运营验证者，需要什么样的硬件？

你需要一颗还不错的 CPU、16 GB 的内存，固态硬盘（为了保险，考虑 1 TB及以上的规模），还要有稳定的电力供应和网络供应。如没有发生大规模的掉线事件，则在线 50% 时间以上就可保证正收益（但你可别连续长时间不在线呀）。

## 我可以把私钥放在硬件钱包里吗？

你的取款私钥可以放在硬件钱包里，但验证私钥则必须放到客户端软件中，这样才能保证正常签发见证消息。

## 是不是可以在硬件的架构或者私钥的生成上下一些功夫来提高安全性？

是的，但是相关的方法都非常专业，请务必寻求专业人士的帮助。

举例，验证者客户端本身可以说就是一个签名器，那么你可以将签名器与其它功能隔离开来，保证签名器不对外网暴露。等等。

## 我能不能用多台机器来运行同一个验证者？这样应该不那么容易掉线？

**千万不要**！因为当你用多台机器运行同一个验证者的时候，如果这几台机器之间忽略了彼此已经发送过的见证消息，就有可能补发出与之前的消息冲突的消息，导致你的验证者被罚没！最稳妥的办法还是一个验证者仅部署在一台机器上。

（同理，不要使用多个客户端软件来运行同一个验证者！只要选好一个客户端软件即可）

## 那一台机器上可以运行多个不同的验证者吗？

可以。信标链的客户端软件分为两个组件：（1）信标链客户端，运行该组件使你的计算机成为一个 “信标链节点”，可以为 “验证者” 提供服务；（2）验证者客户端，该组件即托管你的验证密钥并参与共识的软件。部署好信标链客户端之后，你可以为自己的多个验证者运行多个验证者客户端（如果你有需要的话）。

## 有没有去中心化的第三方运营方案？

没有，所有的第三方托管方案都要求你信任第三方。举例，如果第三方托管了你的验证私钥（你保留自己的取款私钥），你还是必须信任该第三方会妥善运营验证者，不会导致你被罚没（所以你跟第三方之间必须实现分配好责任）。如果你直接把钱交给第三方，连取款私钥都不保留，则信任程度更甚（与把钱存入中心化交易所等同）。在当前，没有人能兑现 BETH。

## 那加入一些智能合约和 token 呢？

也不行，智能合约和 token 只能让你在以太坊区块链上获得与信标链资产数量一一对应的 token，但 token 的增发信息仍然信息输入机制来输入，而这个信息输入机制也是需要信任的（因为收益的变量太多，服务提供商也需要一定的中心化来保护自己的利益，这是难免的）。

&lt;br/&gt;

# 四. 其他

## 有什么工具方便我查看信标链上现在的情况吗？

区块浏览器：https://beaconscan.com/ 及 https://beaconcha.in/。

但是网站所用的术语可能跟此处提供的不同。

## 验证者是不是进出都得排队啊？

是的，信标链 PoS 协议本身的设计，验证者随意自由进出会使网络非常不稳定。所以进入和退出都需要现存的活跃验证者来协调。

（如果有其他问题，欢迎留言）</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/12/7]]></title><description><![CDATA[摘要：回顾Eth2的创世；验证者罚没事件；质押存款破百万ETH]]></description><link>https://www.ethereum.cn/eth-Weekly-2020-12-7</link><guid isPermaLink="false">https://www.ethereum.cn/eth-Weekly-2020-12-7</guid><pubDate>Mon, 07 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;center&gt;&lt;img src=&quot;https://i.niupic.com/images/2020/12/08/95Jq.png&quot;/&gt;&lt;/center&gt;

# Eth2

### Eth2 圆满创世

上周最值得铭记的时刻莫过于Eth2 创世，北京时间12月1日20：00：23信标链准时启动创世。以太坊基金会和ETH Staker对创世事件进行了直播，回看地址：https://www.youtube.com/watch?v=ciE75qkZXFw 。据beaconcha.in浏览器显示，当Eth2链首次敲定时，验证者参与率超过80%。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/f44Tyjd/1.png&quot;/&gt;&lt;/center&gt;





 

Messari研究员Wilson Withiam 在推上回顾了以太坊各个阶段的发展，一图概括：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/r2XgrSM/2.png&quot;/&gt;&lt;/center&gt;



 

而Vitalik也对其在三月份发的路线图进行了更新，路线图中的进度条标明了某项工作的进展情况，还对未来工作路线进行了一些修改，详细请看：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Z6W6JB9/3.png&quot;/&gt;&lt;/center&gt;





 

&lt;center&gt;https://twitter.com/VitalikButerin/status/1333922620857745408?s=20&lt;/center&gt;

 

### Eth2 存款合约破100万 ETH


12月4日，Eth2 存款合约地址上已超过一百万 ETH，价值600多万美元。截至本文，存款合约地址上已收到1,153,121 ETH。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/sHwyxPh/image.png&quot;/&gt;&lt;/center&gt;




 

&lt;center&gt;来源：launchpad.ethereum.org&lt;/center&gt;

截至本文Eth2 验证者网络状态：质押年化率17.01%，网络参与率99.11%，活跃验证者26,010 名。验证者队伍情况：排队时间为9天22小时，等候验证者有8,924名，对质押年化率的影响为-1.99%。预测年收益为5.44 ETH。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/0c5vpgN/2.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;来源：@Eth2 Rewards Bot&lt;/center&gt;

 

### Don&apos;t stop Mr Fahrenheit!

12月1日以太坊PoS区块链创世，创世区块上的涂鸦字符串引起了社区关注——“Mr F was here” (F先生到此一游)。Vitalik发推表示，一般人想象的是类似“人类的一大步”这样的表达，而现实的以太坊社区是 (小编帮v神手动加狗头)。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Js9fzRz/MR-F.png&quot;/&gt;&lt;/center&gt;






 

而这位创世区块的质押者在discord的用户名就是Mr Fahrenheit，并表示这是皇后乐队一首歌里 (Don’t Stop Me Now) 的歌词，晒出了v神给他的签名。

 &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/y6w2J8K/mr0.png&quot;/&gt;&lt;/center&gt;

 &lt;br/&gt;

  &lt;center&gt;&lt;img src=&quot;https://i.ibb.co/xFG4GmL/Mr.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt;
 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/x1rNb83/mr1.png&quot;/&gt;&lt;/center&gt;
 

 

  

而为了满足“一般人”的想法，社区有人做了这个meme。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1mVJR8k/giant-leaf.png&quot;/&gt;&lt;/center&gt;




 

最后，小编特别想分享v神这条推下面的一个高赞评论，ta表示与由一位知名人士发出精心准备的发言相比，一个普通不知名的人发出这个个人化的表达正体现了以太坊的去中心化特质。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6tbsXMn/comment.png&quot;/&gt;&lt;/center&gt;




 

 

 

### Eth2 有12个验证者节点遭受罚没



截至本文发布，Eth2 信标链上已有12个验证者节点被罚没，节点信息见下



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/RTfBBMd/image.png&quot;/&gt;&lt;/center&gt;





 

&lt;center&gt;来源：beaconcha.in&lt;/center&gt;

@Ben Edgington在推特中表示，这些被罚没的验证者节点都是由同一个原因所导致：两个或多个验证者共享一个密钥。而开发者Danny Ryan发推提示：不要同时在两台不同的机器上运行你的验证者节点，因为同一个密钥在两台机器上同时出现时，会导致签名数据冲突，验证者节点就会被罚没。

 &lt;br/&gt;

# EIP-1559

12月1日，哥伦比亚大学计算机科学教授Tim Roughgarden发表了一份关于EIP-1559的学术报告——《以太坊区块链的交易费机制设计：EIP-1559的经济学分析》 (**Transaction Fee Mechanism Design for the Ethereum Blockchain: An Economic Analysis of EIP-1559**)。对于这份长达58页的报告，Tim总结了十个要点：

1. 没有任何交易费机制，无论是EIP-1559还是其他，可以大幅降低交易费用。长期居高不下的交易费是扩容的问题，而不是机制设计问题。

2. EIP-1559会缩小交易费的变化幅度，并通过可变区块容量这一灵活性减少用户的交易延迟体验。

3. EIP-1559会通过“明显的最优报价”这种简单的费用预估来提高用户体验，需求迅速增长的时期除外。

4. 在EIP-1559下，支付给矿工执行协议的短期激励与第一价格拍卖一样有效

5. 在EIP-1559下，发生双花攻击、审查攻击、DoS攻击这些博弈论障碍，以及如操纵基本费用 (base fee) 这样的长期收益最大化策略的可能性与在第一价格拍卖机制下是一样的。

6. EIP-1559起码可以通过销毁交易费用逐渐降低ETH的通胀率。

7. 简单的费用预估和费用销毁表面上的正交目标实际上由于链下协议的威胁有着密不可分的联系。

8. 替代设计包括把基本费用作为给打包未来区块的矿工的奖励，而不是销毁它们；用固定的硬编码来写小费 (tip) 而不采用可变化的、用户指定的小费机制。

9. EIP-1559的基本费用更新规则有些随意，需要逐渐调整。

10. 可变容量区块会导致一个新 (但成本很高) 的攻击矢量产生：用一个序列的最大容量区块来攻击网络。

有兴趣的读者不妨阅读原文：https://t.co/28zyBCxrcg?amp=1

 

 

 &lt;br/&gt;

# Layer2



12 月 2 号，路印上线基于路印协议的二层 AMM (自动做市商)闪兑功能。路印官方指出，目前仅上线了 LRC / ETH 一个交易池，在本月中旬将上线更多交易池并开启 AMM 流动性挖矿，用以奖励流动性提供商。

 





Synthetix与Optimistic rollup合作的Layer2解决方案已在测试网中推出第三阶段，在此阶段，用户可以从L2中提款至L1的Goerli测试网中。参与测试网：https://l2.mintr.synthetix.io/ 

 

 

 &lt;br/&gt;

# DeFi

### Aave v2

12月3日，去中心化借贷协议Aave V2版本上线主网。其新增的更新有：收益和抵押资产可以实现swap、升级闪电贷、允许直接使用抵押资产还贷、代币化贷款等，详情：

https://twitter.com/AaveAave/status/1334518228236840961?s=20

 

### 各种代币化质押ETH开始面世

上周，Eth2 创世后，Coinbase和Binance都宣布了其质押服务解决方案，用户抵押ETH后置换出可在其交易所流通的代币和奖励。随着越来越多代币化已质押ETH的解决方案出现，Vitalik Buterin 在推特中表示：”将来会是N+1种数字资产的模式（即ETH+N种第三方质押服务商提供的质押衍生代币）



 



### Yearn的DeFi王国搭建

Yearn Finance近日似乎开启了其逐步吞噬DeFi生态的计划，其合作的项目以及内容从交易所、借贷协议到治理项目、保险协议不等，YFI目前的小伙伴有SushiSwap、Keep3r、CREAM、Pickle Finance、Cover Protocol、Akropolis、Power Pool。

 

 &lt;br/&gt;



# 生态

### 验证者DAO

DAppNode发文宣布将成立一个验证者DAO，以提高以太坊的去中心化程度，不久将发布白皮书。面对一小部分的交易所集中了大量信标节点且目前没有制衡措施、这些交易所声称提供免费质押而不用工作的服务显得格外吸引、以及以太坊影响力的不断扩张容易招致政府对交易所进行规管等，这些情况都会削弱以太坊的去中心化和抗审查程度。而要避免这个结果，文章作者Sacha Saint Leger认为以DAO的形式成立一个去中心化的质押池有助于抗衡逐利的交易所，它既允许持有少于32个ETH的人参与，同时保证验证者会诚实履职，而DAO的密钥会由经验证坚定开放、抗审查信念的成员来保管。

文章详情：https://medium.com/dappnode/guardians-of-ethereum-a-validator-dao-proposal-d82e76231b45

 

### Gitcoin Grant第八轮 

Gitcoin Grant第八轮持续时间为12月4日-12月17日，匹配金额达到史上最高100万美元，

其中包含六个类别：基础设施、Filecoin (Liftoff)、社区、Dapp、东亚、以及Apollo。

 

值得注意的是，Gitcoin GR8首次单独开设了东亚地区 (East Asia) 匹配池，金额为五万美元。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/mD3fxXk/Gitcoin2.png&quot;/&gt;&lt;/center&gt;



 

 

多个以太坊中国社区以及生态建设者登陆了Gitcoin GR8的东亚板块，包括ECN、ETHPlanet、ETHFans、DAOSquare等，欢迎大家前往打CALL，顺便体验一把zkSync支付

指路：https://gitcoin.co/grants/clr/ethereum/8/east-asia/?

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系eth@ecn.co进行授权。

</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/11/30]]></title><description><![CDATA[-客户端更新
-ETH2质押成功达标]]></description><link>https://www.ethereum.cn/eth-Weekly-2020-11-30</link><guid isPermaLink="false">https://www.ethereum.cn/eth-Weekly-2020-11-30</guid><pubDate>Mon, 30 Nov 2020 00:00:00 GMT</pubDate><content:encoded># Eth2

#### 主网创世前Eth2客户端陆续发布更新

上周，Eth2客户端Teku、Nimbus、Lighthouse、Prysm都陆续发布了支持2.0主网规范的更新，以下总结了各个客户端的最新版本，请验证者升级至所用客户端的最新版本。

 &lt;br/&gt;

Teku客户端目前已更新至最新版本v20.11.1，该版本是预创世修补版本。

Github: https://github.com/ConsenSys/teku/releases/tag/20.11.1 

  &lt;br/&gt;

Nimbus 客户端11月25号时发布了v1.0.0的候选版本，并提醒在12月1日前至少还有一次更新，将发布一个更加顺畅的版本。今天，Nimbus推出了其最新版本Stateofus (v1.0.0)，该版本同样支持Eth2主网最新规范。

Github：https://github.com/status-im/nimbus-eth2/releases

  &lt;br/&gt;

Lighthouse客户端发布了v1.0.2版本Juggling Rick，此版本更新了Lighthouse的核心依赖。Github：https://github.com/sigp/lighthouse/releases

 &lt;br/&gt; 

Prysm客户端继11月25号发布支持2.0主网规范的版本v1.0.0以来，陆续发布了v1.0.1和v1.0.2，其中重要更新包括添加罚没保护功能。

Github：https://github.com/prysmaticlabs/prysm/releases

  &lt;br/&gt;

#### 信标链创世即将启动，质押数量持续增长

根据开发者Danny Ryan的最新blog，Eth2将于北京时间2020年12月1日20：00：23启动创世。截至本文发布，存款合约已质押了851,520 ETH，进度已达162.41%。Danny提醒参与质押的验证者务必留意客户端的更新，并及时升级至最新版本。

  &lt;br/&gt;

届时Ethhub将联合Bankless和DeFi Dad举办创世直播，具体直播信息关注Eric Conner的推特：https://twitter.com/econoar

  &lt;br/&gt;

同时，r/ethstaker也开始了24小时的直播，如何你对客户端的最终设置日志感到好奇，记得进入直播间围观：https://www.twitch.tv/ethstaker

  &lt;br/&gt;

#### Eth2质押数据大家一起谈

Vitalik Buterin 基于发送存款的地址，制作了一些关于Eth2质押数据的图表：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/8czqpRH/p1.png&quot;/&gt;&lt;/center&gt;



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Ky9NwhX/p2.png&quot;/&gt;&lt;/center&gt;



 







 

  &lt;br/&gt;

以太坊2.0创世区块已准备好，验证者已就位，创世之后每天只能增加900位验证者，Alexander Fisher计算了每个时期的年化率：

创世以及前个月年化率约18.9%；

创世3个月后年化率约8.6%；

创世6个月后年化率约6.4%；

创世9个月后年化率约5.4%；

创世12个月后年化率&lt;4.9%。

 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/7JFXrBb/p3.png&quot;/&gt;&lt;/center&gt;
 

 







 

 

&lt;center&gt;来源：https://twitter.com/AlexanderFisher/status/1331242944314085379&lt;/center&gt;

  &lt;br/&gt;

# Layer2

#### Hermez

继11月23日发布了Hermez zk-rollup使用 Circom线路后，Hermez Network于11月27日公布了Hermez zk-rollup一个新功能——大规模迁移 (Massive Migration, MM)，旨在提高整个rollup生态Layer2间通信。此项功能的开发主要针对当越来越多的Layer2 解决方案被用于各种不同的情况时，可用性会成为一个严重问题，因为当用户需要将代币从不同Layer2解决方案间转移时，他们需要先将代币从Rollup A转到Layer1，再从Layer1转到Rollup2，用户需要花费高额的gas费，且有资金锁定等情况。而大规模迁移可以以Layer2与Layer1间转账相同的方式实现Layer2间转账，且价格较低。

机制详情：https://blog.hermez.io/hermez-massive-migrations-mechanism/

  &lt;br/&gt;

#### Loopring

1. 11月25日，路印钱包手机端（安卓版)上线，用户体验与传统金融科技应用相近，不同在于它是全球的、非托管的、建在以太坊网络上。

2. 路印于11月27日宣布将推出为期一个月 (11月27日至12月26日) 的提现挖矿活动，参与方法：从中心化平台体现LRC、ETH、USDT、WBTC、USDC和DAI到路印钱包 (安卓版) 参与挖矿。挖矿总奖励为100万LRC，30天平均分配，即3.33万LRC/天。

  &lt;br/&gt;

#### ZKSwap

据The Block报导，ZKSwap是一个建在以太坊Layer2扩容技术ZK-rollup的一个代币交换协议，其在天使轮融资达170万美元。该项目背后的公司L2 Lab在11月16日透露此次融资由币信资本领投，SNZ Capital、FBG Capital和Longling Capital参投。

 
 &lt;br/&gt;
 

# EIP-1559

EIP-1559测试网已上线，目前支持它的客户端包括：Besu、Nethermind和Geth。

测试网指南：https://wiki.hyperledger.org/display/BESU/EIP-1559+testnet+guide

它们在Github的地址：

Besu: https://github.com/hyperledger/besu

Nethermind: https://github.com/NethermindEth/nethermind/tree/eip1559

Geth: https://github.com/n0cte/go-ethereum/tree/1559_test_fixCalcBaseFee

如果不想运行节点，可以用网页版的工具箱来提交交易、询问base fee、访问区块浏览器和查看以太坊数据网页，地址：https://t.co/k6dBMa0ODt?amp=1

  &lt;br/&gt;

# DeFi

去中心化协议Curve Finance集成Chainlink预言机，获得其提供的价格流，以保护其用户不受闪电贷攻击。

来源：https://news.curve.fi/chainlink-oracles-and-curve-pools/

  &lt;br/&gt;

扩容方案Skale Network宣布将于北京时间12月1日早上8点分别在中心化交易所币安、火币以及去中心化交易所UniSwap上线其代币SKL。

来源：https://skale.network/blog/skl-exchange-listing-update/

  &lt;br/&gt;

Yearn finance创始人AndrE Cronje发布了一篇博客来介绍其新项目Deriswap (目前正处于审计阶段)。Deriswap结合了“Swap、期权和借贷”，合并成一个高资本效率的单一合约，允许流动池的代币对中的两种资产实现以上三种交互。

来源：https://andrecronje.medium.com/deriswap-capital-efficient-swaps-futures-options-and-loans-ea424b24a41c

  &lt;br/&gt;

# 生态

 Gitcoin Grants第八轮获得来自Harvest Finance、币安、Kraken Exchange、Chainlink、和Andrew Keys的捐款，总值100万美元。

  &lt;br/&gt;

根据Bitfly的数据，以太坊的节点数 (11137) 超过了比特币 (10981)。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/RT3VNmV/image.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Hhyf2b7/image.jpg&quot;/&gt;&lt;/center&gt;

 







 

 

  &lt;br/&gt; 

加密艺术家给Nelly送给Prysmatic Lab团队送了一幅名为“验证者”的加密艺术画，地址：https://opensea.io/assets/0xcae3c92a6d4b6520e00eedeada982261332d9494/512/

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/BLHxxCZ/NFT-VALIDATOR.jpg&quot; /&gt;&lt;/center&gt;





 

  &lt;br/&gt;

ETHGlobal将于12月4日美东时间13：00-14：30 (北京时间12月5日凌晨2：00—3：30)主办公开、虚拟的Ethereum Dev Onboarding#2活动，带以太坊开发者新手“上车”，此次会议包括以下环节：

- 开发者小组对谈

- Q&amp;A

- 由来自以太坊基金会的Austin Griffith主讲如何才是搭建基于智能合约的去中性化应用

有兴趣的朋友请戳报名：https://docs.google.com/forms/d/e/1FAIpQLSdwRSpr3jUrTqRmxMIUD3kSnKTY1pz-a8Gvtg5pDezeoJtxuQ/viewform

 &lt;br/&gt;
 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0创世事件]]></title><description><![CDATA[可视化以太坊2.0创世事件，列举2.0创世的两种可能情况。]]></description><link>https://www.ethereum.cn/the-genesis-event</link><guid isPermaLink="false">https://www.ethereum.cn/the-genesis-event</guid><pubDate>Fri, 27 Nov 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [kb.beaconcha.in](https://kb.beaconcha.in/the-genesis-event)

可视化以太坊2.0创世事件

&lt;br/&gt;

##  

## **关键词**

- [存款](https://github.com/gobitfly/eth2-beaconchain-explorer/pull/262)合约
- Seconds_Per_Eth1_Block(每个Eth1区块的出块时间) = 14 秒
- Eth1_Follow_Distance (ETH1同步距离) = 1024 个区块 * 14 秒
- Min_Genesis_Time(最早创世时间) = 一个unix时间戳 (=此项还未决定) 
- Min_Genesis_Active_Validator_Count(最早创世活跃验证者数）= 16,384
- Genesis_Delay (创世延迟)= 7 天
- [以太坊0信标链](https://news.ethereum.cn/wp-admin/post.php?post=2693&amp;action=elementor#beacon-chain)

（译者注：根据Ethereum 2.0最新规范，ETH1同步距离应该为2048个区块*14秒）

&lt;br/&gt;


## **创世事件**

### **条件**

以太坊2.0区块链的启动必须满足两个条件！

- 验证者数需要达到**16,384个**
- 决定ETH2创世时间的ETH1区块 (=触发区块) **不能早于**min_genesis_time。

ETH1触发区块=min_genesis_time – genesis_delay

### **情景一**

一旦存款合约在 min_genesis_time之前部署好了，满足第一个条件所需的存款量 (Min_Genesis_Active_Validator_Count 最早创世活跃验证者数)会增长得非常快。

当16,384笔存款的门槛达到了，网络就会通过计算min_genesis_time – genesis_delay来找出**触发区块**，继而满足第二个条件。

触发区块(min_genesis_time – genesis_delay)的目标是让区块链绝不会早于 min_genesis_time启动。情景二会将这点解释得更清晰。

![img](https://news.ethereum.cn/wp-content/uploads/2020/11/image1.png)

### **情景二**

满足第一个条件的所需存款数(Min_Genesis_Active_Validator_Count)在 min_genesis_time**之后**发生。

在这种情况下，第二个条件会首先得到满足，而触发区块会变成取决于min_genesis_time 的设定。在存款合约收到16,384个验证者的存款后，触发区块 (即第二个条件)就会被启动。

创世时间变成Trigger-block-timestamp + genesis_delay (触发区块时间戳+创世延迟)。

![img](https://news.ethereum.cn/wp-content/uploads/2020/11/image2-%EF%BC%88%E5%B7%B2%E7%BF%BB-1.png)

参考来源：

[*Ethereum 2.0 Spec*](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#configuration)

[*The Genesis of a Beacon Chain*](https://hackmd.io/@benjaminion/genesis)


 &lt;br/&gt;


声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/11/23]]></title><description><![CDATA[-Layer2
-ETH2质押进度过半]]></description><link>https://www.ethereum.cn/weekly-2/</link><guid isPermaLink="false">https://www.ethereum.cn/weekly-2/</guid><pubDate>Mon, 23 Nov 2020 00:00:00 GMT</pubDate><content:encoded>
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/H28Rw9q/image.png&quot;/&gt;&lt;/center&gt;

编者按：《以太七日谈》是 ECN 团队对 ΞXPRΞSS 栏目进行的一次试验性升级，我们希望将每周以太坊生态中发生的一些大事小事趣事分享到中文社区。《以太七日谈》中的内容均为编者自行整理编译，如有疏漏和建议，欢迎大家及时通过公众号后台或是社群向我们反馈。

&lt;br/&gt;

## Eth2

质押进程加速中，11月21日单日质押8万多ETH

据beaconcha.in浏览器显示，截至本文发布，存款合约中已收到293,792 ETH，完成度56.04%，还需7,203名验证者质押 230,496 ETH才能启动创世。

另外从scout.cool浏览器 https://scout.cool/scout/mainnet/dashboards/eth2-deposit 中可以看到，从11月20日开始质押速度开始加快，11月21日单日质押数达8.8万 ETH。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VvWxVWb/2.png&quot;/&gt;&lt;/center&gt;







此前beaconcha.in也发布了质押服务商列表https://beaconcha.in/stakingServices，

用户在挑选服务商时，务必做好功课，在一定程度下降低风险。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/7Xs5sWg/3.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;cr: beaconcha.in&lt;/center&gt;

北京时间11月18日晚，以太坊基金会研究团队在reddit上进行了第五次AMA，其中讨论到了Eth2路线图的新变化。Vitalik总结了以下主要的变化：

➤ 以Rollup为中心的路线图。

➤ 简化eth1和eth2的合并。

➤ 各阶段并行进行。即可以分成 1) 轻客户端支持; 2) 数据分片 (也即“阶段1”); 3) eth1和eth2的合并，三者独立推进。

**经过简化的合并过程意味着eth1和eth2的合并会比之前预设的要快。各阶段并行进行，可以进一步加速合并，甚至有可能在分片实现之前就能进行合并。**

Justin Drake给出了可能的交付顺序：

➤ PoS—”phase 0″

➤ 轻客户端—”phase 0.5″

➤ 数据分片—”phase 1″

➤ eth1和eth2合并—”phase 1.5″

➤ 内置VM—”phase 2″

关于路线图以及其他以太坊2.0相关话题更详细的讨论参见ECN的整理翻译《[以太坊基金会第五次Reddit AMA](https://news.ethereum.cn/ama-we-are-the-efs-eth-20-research-team-pt-5-18/)》。

Vitalik表示PoS机制完全开始运行后，ETH年均发行量为0-200万

AMA同时也讨论到了发行量的问题，Vitalik甚至还在推特再次专门引述其回答


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/svX5FgN/1.png&quot;/&gt;&lt;/center&gt;






他表示在接下来1-2年中或直到Eth1-&gt;Eth2合并，发行计划为每年约470万；等到PoS机制完全开始运行之后，减去已销毁的ETH (销毁量甚至超过发行量) 每年的发行量约0-200万。

&lt;br/&gt;

## 测试网

**Eth2 Pyrmont 测试网**

运行主网 v1.0.0 规范的 Pyrmont 测试网已经在北京时间11月18日晚正式启动，运行之初将作为开发者网络运行，由开发者团队运行超过 10 万名验证者，目前运行状态平稳，之后会向社区开放。 

Pyrmont 测试网计划至少会运行到主网启动，主要目的是在大量验证者基础上测试 v1.0.0 主网规范和客户端软件。需要注意的是，https://pyrmont.launchpad.ethereum.org/ 中的质押计数并未将用以启动测试网的 320 万 Goerli ETH 计入其中。

根据以太坊基金会博文，主网上线后可能会推出稳定性更强、用户体验更好、效率更高的长期测试网，缩短验证者排队时间，并将最低驱逐余额大幅提高。 

注意：请勿直接向测试网合约地址进行真实的 ETH 转账。

参考资源：

Pyrmont 存款合约地址： 0x8c5fecdC472E27Bc447696F431E425D02dd46a8c 

Launchpad: https://pyrmont.launchpad.ethereum.org/

Eth2stats: [https://pyrmont.eth2.wtf](https://pyrmont.eth2.wtf/) 

Beaconcha.in: [https://pyrmont.beaconcha.in](https://pyrmont.beaconcha.in/)

&lt;br/&gt;

## Layer2

**StablePay通过zkSync实现在Layer2存款**

支持ETH和ERC20代币的去中心化支付平台StablePay在11月17日的更新里表示，StablePay与zkSync Layer2协议结合，用户可以通过zkSync 协议将存款放在Layer2，详细操作请看：

https://medium.com/@stablepayio/update-stablepay-integrates-the-zksync-l2-protocol-2cc3a9b458be

**Offchain Labs推出Arbitrum Burner Wallet**

Offchain Labs近期动作频频，本周除了官宣其Arbitrum Rollup与Augur和Connext合作外，11月20日推出了Arbitrum Burner Wallet, 用于简单的ETH和代币转账。现在可以在推特获取测试币，在Arbitrum Rollup测试网上体验了。

指路：https://twitter.com/intent/tweet?text=%40Arbi_Swap%20hey%20%40OffchainLabs%2C%20gimme%20some%20Arbiswap%20test%20tokens%20plz!%200xYourETHAddressHere

**zkSummit6——零知识深度研讨**

Zero Knowledge Podcast将于11月23-24日举办线上zkSummit6,此次峰会主题包括零知识研究、现实应用、以及对加密基元、隐私与数学的深入探讨。详情请看：https://hopin.com/events/zksummit-6

**Layer2的QA与生态现状**

Ethereum Magicians社区主办的11月layer2主题论坛活动已经进行两期了，社区于本周末整理了这两期活动的文字版回顾:

第一期layer2入门级普及：https://hackmd.io/uUURJoqbQfKIWcpIGW4Y3A?view

第二期layer2的dapp开发：https://hackmd.io/NKIQcAHuRmqWkOno64jgkA?view

以及列举了目前可用的、基于不同layer2扩容技术的解决方案:

Loopring (ZK Rollups)

Starkware (ZK Rollups)

zkSync (ZK Rollups)

Hermez (ZK Rollups)

Aztec 2.0 (ZK Rollups/privacy)

Optimism (Optimistic Rollups w/ EVM)

Fuel Labs (Optimistic Rollups)

SKALE (Plasma L2 w/ an EVM)

Matic Network (Plasma L2 w/ an EVM)

Connext (State channels to bridge EVM L2s)

(各方案的详细信息请点击文末“阅读原文”获取）

&lt;br/&gt;

## DeFi

Uniswap流动性挖矿奖励结束，社区发起民意调查，建议延长流动性挖矿两个月并将奖励减半

Uniswap流动性挖矿奖励计划于11月17日正式结束。该奖励计划持续了2个多月，共向流动性提供者们分发了2千万枚UNI，每个月向WBTC/ETH、USDC/ETH、USDT/ETH、DAI/ETH池分别投入250万枚UNI。

流动性挖矿奖励结束之后，社区在snapshot发起民意调查，提议将奖励减半，变为每个资金池每月投入125万枚UNI。

投票结果已出：投赞成票的占99.39%，反对票的仅占0.6%。度过共识检查阶段之后，Uniswap将正式创建治理提案。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NNBtYtt/4.png&quot;/&gt;&lt;/center&gt;








来源：https://snapshot.page/#/uniswap/proposal/QmaKjvEAUL5RxoZeNQJKJZR8rHxiE6XNzzVrm1oLCr69MV

&lt;br/&gt;

## 生态

**以太坊生态系统支持计划 (ESP) 汇总受资助方的工作进展**

据以太坊基金会博客最新发布的文章显示，ESP 公布了基金会资助的项目的工作进展，包括：Layer-2 扩容解决方案 Fuel Labs、开发环境项目 Hardhat、Optimistic Rollup hub Hubble 等项目。

来源：https://blog.ethereum.org/2020/11/18/esp-grantee-roundup-november-2020/

**Medalla 数据挑战赛获奖者已公布，Attestant CTO Jim McDonald 斩获金牌**

Medalla 数据挑战赛是一场由基金会赞助的，关于Eth2.0 测试网 Medalla 的数据黑客马拉松。Jim McDonald 和 Pintail 并列第一，获得1.5万美元的奖励。其中，Jim McDonald的作品是数据提取工具chaind，从运行的eth2 客户端里提取数据并存入一个 PostgreSQL 数据库中。Github：https://github.com/wealdtech/chaind

其他获奖选手的作品详情请看：

https://blog.ethereum.org/2020/11/17/medalla-data-challenge-results/

**网易腾讯纷纷进军NFT领域，为其游戏王国布局**

在今年的网易未来大会中，网易发行了NFT门票，参与者凭票进场。门票信息


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VYVcnJm/5.png&quot;/&gt;&lt;/center&gt;






除网易之外，有坊间流传消息称腾讯也在开发其NFT游戏，这两大互联网公司用NFT搭建新的游戏虚拟世界会给东方区块链社区带来什么火花呢？

来源： https://twitter.com/DoveyWan/status/1329806106739101698</content:encoded></item><item><title><![CDATA[以太坊基金会REDDIT第五次AMA]]></title><description><![CDATA[以太坊基金会研究团队在Reddit论坛进行了第五次AMA，主题包括以太坊2.0创世和路线图等。]]></description><link>https://www.ethereum.cn/ama-we-are-the-efs-eth-20-research-team-pt-5-18</link><guid isPermaLink="false">https://www.ethereum.cn/ama-we-are-the-efs-eth-20-research-team-pt-5-18</guid><pubDate>Thu, 19 Nov 2020 00:00:00 GMT</pubDate><content:encoded>译者按：北京时间11月18日晚9点，以太坊基金会研究团队在reddit论坛进行了第五次AMA，主题包括以太坊2.0创世和路线图等。ECN对问答进行了筛选整理，并且编译成文。需要注意的是，核心研发者对于某些话题存在自己的看法和推测，为避免曲解，请以随附的原帖链接为准。

&lt;br/&gt;

## Roadmap

### 1. 阶段0上线之后，现有规范哪部分会发生较大改变？

**Vitalik Buterin**

在过去几个月中，关于路线图有许多事情在演变，我认为在此总结一下这些变化是非常有必要的 (这会影响到接下来两年的规范编写)。

1. 以Rollup为中心的路线图。**将“阶段1”(Phase 1) 简化为数据分片 (供rollups使用)，使其更易于实现。

2. 简化eth1和eth2的合并。**大致是根据这份路线图而来，但是现在 1) eth1交易能够直接在信标链上进行，而不是分片; 2) 得亏optimistic执行，合并期间的执行中断时间可能会被大大缩短。这使得合并过程被简化，目前已经开始PoC阶段。

3. 各阶段并行进行。**这是最新的计划，也许 (其重要性) 也是最被低估的。可以分成 1) 轻客户端支持; 2) 数据分片 (也即“阶段1”); 3) eth1和eth2的合并，这三个过程将独立推进，从而使得每个部分能够被独立实现，而不需要考虑其他部分的研发进度。

这些所有改变的初衷都是为了加快eth2真正可用的进程。轻客户端的支持可能会在分片之前实现，使得信标链能快速可用 (为eth1提供共识)。经过简化的合并过程意味着eth1和eth2的合并会比之前预设的要快。**各阶段并行进行，可以进一步加速合并，甚至有可能在分片实现之前就能进行合并。**

作为rollup中心策略的一部分，“阶段2”(phase 2, 也即分片执行) 目前来看没有那么重要。主要是因为阶段2的终极目标 (即实现高TPS) 能够在数据分片 (阶段1) + rollups的基础上实现，甚至效果更好。而分片+rollups会在阶段2之前实现，因此目前在这个部分集中精力是更好的选择。也就是说，**我们不会采取任何不可逆的举动，使得在将来无法添加本地分片执行功能。**如果将来有需要的话，这个路线图能够随时兼容分片执行功能。

太长不读：eth1和eth2的合并到来得越快，PoS实现得越快，大家也就能更快地见到10万TPS的以太坊。

&lt;center&gt;&lt;iframe height=&quot;715px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpqmp1/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:31:57.929690+00:00&amp;amp;uuid=11c99c4a-2a4a-11eb-b6a9-0ebe3175dfd9&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 715px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Justin Drake**

长期来看，信标链的大部分逻辑可能会发生比较大的变化：

- 轻客户端支持

- 秘密提议者选举

- 使用VDF提供无偏随机性 (unbiasable randomness)

- 为合并过程改进eth1投票

- 信标区块数据可用性采样

- 升级BLS聚合签名为后量子替代方案 (post-quantum alternative)

- Casper FFG升级为Casper CBC

- 用算术友好的哈希函数替换SHA256 (如果发现SHA256不安全，则使用更安全的函数)

- 调整状态

&lt;center&gt;&lt;iframe height=&quot;399px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpqsg7/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:16.021693+00:00&amp;amp;uuid=151c53ec-2a45-11eb-b8ed-0e06badf297b&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 399px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

### 2. 根据当前轻客户端、合并和分片的并行路线，实现的顺序可能如何？(哪个部分更快/更容易实现)

**Vitalik Buterin**

轻客户端支持很容易在2021年实现，如果我们努把力的话2021年初也不是没有可能。合并和分片我预计我们应该会在2021年末看到成熟的测试版本，尚不确定2021年能否在主网进行合并和分片。

&lt;center&gt;&lt;iframe height=&quot;205px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcprwsh/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:16.250408+00:00&amp;amp;uuid=153f39ac-2a45-11eb-8cdf-0e33f6c0ccc9&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 205px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Justin Drake**

可能的交付顺序：

- PoS—”phase 0″

- 轻客户端—”phase 0.5″

- 数据分片—”phase 1″

- eth1和eth2合并—”phase 1.5″

- 内置VM—”phase 2″

阶段0.5很有可能会在2021年实现，理想情况下阶段1也可能在2021年实现。

&lt;center&gt;&lt;iframe height=&quot;353px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcps4a9/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:16.465430+00:00&amp;amp;uuid=1560182a-2a45-11eb-bed6-0e501010c111&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 353px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

### 3. 如果在11月24日没有16,384名验证者进行质押怎么办？能否改变最低验证者数量的参数以确保eth2能够在12月1日创世？

**Danny Ryan**

关于该问题这个issue里有一些讨论：https://github.com/ethereum/eth2.0-specs/issues/2134

我个人认为对于首次上线来说，合约中有超过10万的ETH就足够了，降低这个阈值以避免合约中的ETH被锁定过长时间是合理的。对于早期参与者来说，奖励会非常高，也可能吸引后来的验证者。

但是在11月24日或者12月1日就对这个参数进行修改的话未免显得有些激进。我们还不清楚接下来几周的情况，最好还是保持观察。

在上面链接的讨论中，客户端团队似乎倾向于12月按兵不动，如果有需要的话1月初再修改参数。这似乎是可取的。

&lt;center&gt;&lt;iframe height=&quot;326px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpqgto/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:31:58.162564+00:00&amp;amp;uuid=11ed275a-2a4a-11eb-b195-0e1ac4b4fc5d&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 326px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

### 4. 阶段0最短需要运行多久？阶段0之后的阶段是根据固定的时间间隔来实现还是一旦准备好就上线？

**Danny Ryan**

阶段1 (分片) 一旦准备好就会上线，包括搭建、测试、测试网等等。

至于合并阶段 (phase 1.5)，我希望等到**信标链在产品环境中平稳运行至少9个月之后。**我们真的需要一段时间来观察产品环境中的信标链表现，才能判断其是否稳定和安全，足以成为以太坊的新归宿。

&lt;center&gt;&lt;iframe height=&quot;231px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpsag6/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:16.689061+00:00&amp;amp;uuid=158227e4-2a45-11eb-8d17-0e3e4a9e7145&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 231px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Vitalik Buterin**

“在分片之前的最短运行时间”和“在合并之前的最短运行时间”是不一样的。分片在稳定之后就可以上线。

至于合并，我只能说这却决于社区而不是我，这是一个非常艰难的决定。广大的以太坊社区，包括eth1核心开发者、区块浏览器、交易所等等都需要PoS的安全性得到足够的确认，才能完全迁移过去。

对于合并这个方面，我认为一年之内不现实。即使明年2月已经完全可以实现了，我也建议我们先稍安勿躁，观察到十一月或之后，以让大家信服PoS的安全性，这样大家才能放心地将这个承载了500亿美元地生态系统真正地迁移到信标链。

&lt;center&gt;&lt;iframe height=&quot;363px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpqvdu/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:16.908206+00:00&amp;amp;uuid=15a3a6bc-2a45-11eb-a9a3-0e6826c9a095&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 363px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

### 5. 根据第52次实现者会议TXRX团队关于可执行信标链的提议，EF会更改以太坊2.0的架构吗？

**Danny Ryan**

如果我们继续使用单一的执行链 (eth1)，那么将其本地集成到信标链中是最安全的选择，并且能够本地访问分片数据，也减少了共识的复杂度。这是一个非常优雅的设计，目前相关的原型工作正在进行中 (可能很快就能迎来信标链合并测试网！)

目前我个人很赞成这个设计，但要等到几个月之后再看实际效果。

&lt;center&gt;&lt;iframe height=&quot;368px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcprwq1/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:17.136370+00:00&amp;amp;uuid=15c677fa-2a45-11eb-82b3-0e532f362f65&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 368px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Dankrad Feist**补充：

补充一下，在我们实现无状态Eth1之前，这是唯一可能的设计。

### 6. 在不同的以太坊2.0组件中，包括轻客户端、分片、合并、eWASM、执行环境和rollups等等，哪些领域正在进行积极研发？距离实现还有多远？

**Justin Drake**

- **轻客户端**：研究和规范工作基本完成，实现起来相对容易

- **数据分片**：研究工作基本完成，正在进行规范编写。数据可用性采样方面还存在工程挑战，但是我们有更简单的解决方案，即只具备委员会的数据分片。

- **eth1和eth2的合并**：我预计这个部分的协调难度会很大，尤其是在僵化的eth1中。

- **eWASM**: 阶段2 (即内置的Eth2 VM) 在以rollup为中心的中期策略中不是当务之急。从更长远的角度来看，我认为我们会有内置的虚拟机，而正在成为区块链标准的WASM则是候选之一。

- **执行环境**：Rollup虚拟机在中期 (甚至是长期) 来看是执行环境的一个足够好的替代方案。

- **Rollups**：Rollups并不是eth2共识的一部分，而是第二层基础设施的迫切需求，因此不属于EF Eth2团队的范畴。

&lt;center&gt;&lt;iframe height=&quot;394px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpttnn/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:17.367491+00:00&amp;amp;uuid=15e9bab2-2a45-11eb-82b3-0e532f362f65&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 394px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

### 7. 在当前的发展路线中，是否还有领域是团队尚未明晰其实现方式和可行性的？

**Justin Drake**

数据分片以及eth1和eth2的合并方面，研究工作已经完成，并且风险也比较低，目前主要是工程和协调问题。

我认为我们最终需要一个内置的虚拟机 (也即所谓的phase 2) 来取代现有的EVM。如果内置虚拟机会是zkVM (SNARK友好的EVM替代方案) 的话非常不错。Eth2 zkVM的研究与工程交叉领域仍然存在重要的开放问题。

&lt;center&gt;&lt;iframe height=&quot;163px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcldr0w/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:17.591471+00:00&amp;amp;uuid=160bdaac-2a45-11eb-b5e6-0e6581f864b7&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 163px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Dankrad Feist**

从研究的角度来看，我觉得我们已经有具体计划的阶段0、1、2都没有难以克服的挑战。但是在阶段1和阶段2中我们还有执行方面的问题需要解决，分别是数据可用性 (阶段1)、无状态执行以及是否会使用类似eWASM的新虚拟机 (阶段2)。

从长期的路线来说，我们还面临量子安全性挑战。但还需要进一步研究和探索。

### 8. eWASM目前的状态是什么？eWASM或者WebAssembly在以rollup为中心的路线图中是否有意义？

**Vitlaik Buterin**

我将给出一个艰难但诚实的答案：从短期到中期，eWASM在目前的路线图中已不再加以强调。

主要原因在于：

1. 由一个虚拟机变为两个也增加了一倍共识复杂度

2. 我们计划中已经有很多事情，而相比PoS+sharding路线图中部分，切换虚拟机带来的收益颇低

3. eWASM最初设想的许多益处 (即以接近本地的速度执行，消除预编译需求) 尚未实现。尤其是，事实证明很创建运行时速度快且安全的编译器。

4. 事实证明，在现有的EVM中可以高效地实现许多事情，只是需要一定技巧 (例如[weierstrudel](https://github.com/AztecProtocol/weierstrudel))

目前， [EVM 384](https://notes.ethereum.org/@axic/evm384-preview) 能够帮助我们消除大量预编译需求。

因此，在短期内，eWASM存在的可能性就是作为rollups的内置执行引擎 (因为在rollups内你可以使用任何状态转换函数，只需要为其写一个欺诈证明)。长期来看，我认为还是有必要并且有充分理由对EVM进行升级，例如，长期来说我们需要ZK-SNARK虚拟机执行，WASM比起EVM效率更高，而专门为设计的对SNARK友好的WASM子集会更加高效。

&lt;center&gt;&lt;iframe height=&quot;589px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpr9ry/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T08:56:17.811877+00:00&amp;amp;uuid=162d7cfc-2a45-11eb-8535-0e59af87d05d&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 589px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

##  

## EIP-1559

### 我感觉EIP-1559是ETH 2.0规范的一部分，且会在阶段1实现？

### 为了在ETH 1.0实现EIP-1559已经有很多工作进行了。在ETH 1.0和ETH 2.0间是否有重叠的部分？是否可以厘清这两部分的工作？它们之间会相互影响吗？

**Danny Ryan**

EIP-1559属于ETH 2.0规范中分片数据的费用市场部分。按照计划，ETH 1.0的交易执行会采用相似的费用销毁和gas价格机制来定价分片数据。如果1559能上线主网的话，这会很棒。在ETH 1.0与ETH 2.0合并之后，1559式的交易将在eth1执行里可用，分片数据的1559式费用市场会建在eth2的数据分片里。

理论上，在ETH 1.0和ETH 2.0间是有很多重叠部分的，因此今天在eth1主网上为1559做的研发努力大多都适用于eth2数据市场里使用这项工具的设计与理解。

&lt;center&gt;&lt;iframe height=&quot;300px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpr1d5/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:21:26.801850+00:00&amp;amp;uuid=999b1808-2a48-11eb-b8ed-0e06badf297b&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 300px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Justin Drake**

是的，逻辑近似EIP-1559的费用与价格机制 (即费用销毁) 会成为阶段1的一部分。

Eth1上的EIP-1559实现可能为社区提供这些机制更清晰的图景，并为Eth2中的费用销毁降低风险。我希望在Eth1可以进行大量的协调工作 (例如推动教育以及与钱包的结合)。

ETH 1.0与ETH 2.0的费用销毁机制会稍有不同，且会并存一段时间。我们的构想是在ETH 1.0和ETH 2.0合并后，ETH 2.0的费用销毁机制会取代EIP-1559。

&lt;center&gt;&lt;iframe height=&quot;337px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcprehi/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:21:27.029590+00:00&amp;amp;uuid=99bde43c-2a48-11eb-859e-0ee0f5b49171&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 337px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

##  

## 执行环境&amp;Rollup

### 为阶段2设想的所有执行环境 (Execution Environments, EE) 能否都在roll-up上实现？从创新来看，以roll-up为中心的路线图有什么缺点？

**Vitalik Buterin** 

是的，所有的EE都会成为rollup。我会说以rollup为中心的路线图更有利于创新，因为它更“无须许可”(任何人都可以以任何规则创建一个rollup)，因此它使得各种团队都可以参与，包括那些与当前核心开发过程不相近的。

这个方法的主要缺点在于我们有失去开发者网络效应的风险，因为现在很多不同rollup的内部执行规则具有根本性的区别。也就是说，我预计如果这个路线图要执行下去，很快就会有一套占主导的标准，而其他的标准只能迎合一些小众社区的需求。

&lt;center&gt;&lt;iframe height=&quot;363px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpqbny/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:21:27.251650+00:00&amp;amp;uuid=99dfc7be-2a48-11eb-a9de-0ea39b41f8ab&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 363px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

**Dankrad Feist** 

rollup本质上指向一个问题——谁来确保正确的执行。在没有rollup的情况下，在Layer1提供安全性的和Eth2上的验证者还是相同的实体。而在rollup里，实体变成了为正确执行生成的零知识证明 (zkrollup目前还无法在通用执行中应用) 或欺诈证明 (optimistic rollups)。

执行环境的任何功能都可以通过Rollup实现。zkrollup提供链上执行一样的安全性，但是它们在生成证明的时候需要大量的资源，而证明是抗审查的。Optimistic rollup主要是在最终确定性上做了折衷：作为一名用户，除非你执行当前交易之前的所有相关交易，否则你无法得知此笔交易是否被敲定了。

&lt;center&gt;&lt;iframe height=&quot;315px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpqt52/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:21:28.049467+00:00&amp;amp;uuid=9a598446-2a48-11eb-b0c5-0ee6fa4404d1&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 315px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

##  

## 无状态

### 1. 一个关于PoS的问题：无状态ETH 1.0是否仍是一个必需先决条件？现在的推荐验证者配置是至少16gb的内存+至少1tb的固态硬盘，原因有两个：一是以防当区块长时间无法敲定时资源使用会大幅度增加，二是因为运行geth节点的人会非常倾向于给ETH1.0的区块头投票。

**Justin Drake**

这两个原因都是暂时的，我预期会在2021年得到解决：

**区块无法敲定时所需资源的激增***：客户端想办法解决无法敲定的问题是一个好方法。(现在最终确定性理论上会被用作一个支点。) 我们现在有一些计划 (cc /u/protolambda)，我们将搭建一个长期运行的测试网，其中设置为网络无法敲定区块，从而强行促使客户端进行优化。

**给Eth1投票**：在一般的Eth1区块头同步轻客户端上搭建一层数据层就足以解决这个问题了，这层数据层相当于是个gossip网络，用来广播存款证明 (即在Eth1区块头中的存款与相应的默克尔证明)。

### 2. 如果几乎每个验证者节点都运行geth或至少具备运行geth的能力， 为什么不让每个信标区块都包含一个新的eth1区块，让信标区块生成者更快地替代矿工？

**Justin Drake**

我对要求区块提议者运行一个Eth1全节点这个看法感到非常反感。这完全是与让Eth2的验证者可以在树莓派上运行节点这一设计目标相悖。

**提问者回复：**

我不认为这个目标是合理的，因为现在32个ETH是最低质押金额，这是个巨大数额，而完整实现PoS之后几乎可以肯定ETH价格会升高，现实中，持有32个ETH的人其实是打算质押在质押池里 (去中心化当然是最好)，而有能力运行多个节点的人才会自己动手。

有多少验证者会真的用节点去冒险，只是为了省200美元或基本的nuc空间？个人来说，我是不会将我的ETH用一个树莓派质押在主网的。

**Justin Drake**

32个ETH的最低质押金额与此无关，原因有两个：

1. 如果持有远少于32个ETH，可以质押在一个m-of-n池里

2. 我们要把关注点放在奖励上，而不是质押金额。实际上，我们想将收益率尽可能提高以保证验证者是有利润的。要求运行一个Eth1节点的话，他们肯定会反噬收益，甚至收益可能为负，如果你有参与m-of-n池的话 (参考第1点)。

&lt;center&gt;&lt;iframe height=&quot;458px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpt183/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:21:28.284078+00:00&amp;amp;uuid=9a7d50b0-2a48-11eb-9de0-0e6321c66f07&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 458px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

##  

## 增发

### 1. ETH的最大供应量是多少？

**Vitlaik Buterin**

我认为现在是个很好的机会，可以在这里提出一些不太受欢迎但却很重要的观点。实际上，在接下来的两年中，以太坊的生态系统将处于快速转型的状态。譬如，十六进制树结构 (hexary trie) 将被二进制树结构 (binary trie) 代替，PoW将被淘汰及被PoS取代，我们将添加一种从未用过的新技术“数据可用性采样”。除此之外，以太坊的经济模式正从三个方面进行彻底的改革：(i) PoW -&gt; PoS, (ii) 引入EIP 1559, (iii) 用户活动从L1转移至L2

以太坊生态系统有个长远而坚定的目标：成为一个稳定且可靠的系统。但是大家拥护以及支持以太坊，不能因为坚信现有的规则 (经济或技术上的) 值得我们不惜一切代价去维护而去支持以太坊，而是因为我们相信以太坊生态系统将来要往什么方向发展。在未来两年，主要任务就是稳定且珍惜我们将要构建的东西。直到那时，以太坊的参与率便证实了我们的预测：这个路线图的值得我们支持的。一旦升级完成，我们的网络最终会变得更有效率、稳定、强大，并成为全球经济重要组成部分的基础。

在接下来1-2年中或直到Eth1-&gt;Eth2合并，发行计划为每年约470万；等到PoS机制完全开始运行之后，减去已销毁的ETH (销毁量甚至超过发行量) 每年的发行量约0-200万。我认为给出其他任何不同的答案都意义不大。也就是说，我确实希望阶段0代码已经完成这一事实 (基本上只等人们存ETH进存款合约这部分了) 可以很大程度上化解转移过程中的风险，而不像以往甚至六个月前风险那么大！

&lt;center&gt;&lt;iframe height=&quot;536px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcprfwj/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:21:28.509106+00:00&amp;amp;uuid=9a9f968e-2a48-11eb-b6a9-0ebe3175dfd9&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 536px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

### 2. ETH的总发行量将会是多少？

当Eth1和Eth2合并之后，PoW链就会停止增发ETH。而PoS链的ETH增发事实上会限制在每年100万左右。我希望EIP-1559的手续费销毁设置将会更加缓解PoS增发带来的[通胀压力](https://twitter.com/drakefjustin/status/1304064879662227456)。

&lt;center&gt;&lt;iframe height=&quot;252px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpwhuj/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:31:58.389186+00:00&amp;amp;uuid=120fb676-2a4a-11eb-a269-0eea3a6efddd&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 252px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

##  

## 测试网

### 有没有计划启动另一个测试网？并且按照当前Eth2主网规范，其中设有同样数量的验证者，以便社区可以实时了解加入创世的盈利水平？

**Justin Drake**

Pyrmont测试网昨天发布了:)

更多关于Pyrmont的信息可阅读《Eth2更新速览#20》

[https://pyrmont.launchpad.ethereum.org](https://pyrmont.launchpad.ethereum.org/)

[https://pyrmont.beaconcha.in](https://pyrmont.beaconcha.in/)

[https://pyrmont.eth2.wtf](https://pyrmont.eth2.wtf/)

**提问者**

我知道，我有参与测试网。但Pyrmont测试网可以容纳10万名验证者，会有计划推出一个1.6万验证者的公共测试网吗？

**Justin Drake**

这我不太清楚，但是质押奖励可以借助类似这样的[工具](https://www.stakingrewards.com/earn/ethereum-2-0/calculate)来计算:

https://www.stakingrewards.com/earn/ethereum-2-0/calculate

&lt;center&gt;&lt;iframe height=&quot;231px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcpx3dr/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:31:59.183775+00:00&amp;amp;uuid=128901ac-2a4a-11eb-a9de-0ea39b41f8ab&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 231px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

##  

## 支线

### 我们可以借助rollups来实现透明的分片吗？(也就说开发者和终端用户甚至都感觉不到它的存在)

**Vitlaik Buterin**

当然可以！以rollup为中心的路线图其中一个好处就是：它给支持跨分片同步通信的rollup更多的实验空间。甚至不需要分片，只有一个单独的大型定序器 (mega-sequencer) 单线程处理所有东西。也就是说你可以在rollup上拥有每秒交易处理数百甚至数千笔 (与杀手级以太坊的功能相当) 的同步域 (synchronous domains)，而不会出现使得整个基础层链都以该种方式运作的集中化风险。

&lt;center&gt;&lt;iframe height=&quot;294px&quot; width=&quot;100%&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; src=&quot;https://www.redditmedia.com/r/ethereum/comments/jvkoat/ama_we_are_the_efs_eth_20_research_team_pt_5_18/gcprawm/?embed=true&amp;amp;context=0&amp;amp;depth=1&amp;amp;showedits=false&amp;amp;created=2020-11-19T09:31:59.411210+00:00&amp;amp;uuid=12abb09e-2a4a-11eb-a3bc-0e89b03a8675&amp;amp;showmore=false&quot; style=&quot;box-sizing: border-box; max-width: 800px; width: 780px; margin: 10px 0px; line-height: 1; border: none; color: rgb(122, 122, 122); font-family: Roboto, sans-serif; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-style: initial; text-decoration-color: initial; height: 294px; display: block; min-width: 220px; box-shadow: rgba(0, 0, 0, 0.05) 0px 0px 5px 0.5px;&quot;&gt;&lt;/iframe&gt;&lt;/center&gt;

&lt;br/&gt;

 

&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

 </content:encoded></item><item><title><![CDATA[ETH：互联网债券]]></title><description><![CDATA[将Eth2 Staking看做一种去中心化经济的债券，本文介绍了Web3.0上的数字工作协议。]]></description><link>https://www.ethereum.cn/eth-the-internet-bond</link><guid isPermaLink="false">https://www.ethereum.cn/eth-the-internet-bond</guid><pubDate>Wed, 18 Nov 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [bankless.substack.com](https://bankless.substack.com/p/eth-the-internet-bond)

&lt;br/&gt;

在公共区块链网络出现之前，实体或个人直接参与或者获得对互联网基层的金融敞口是不容易的。

Web3.0的到来改变了这一点。现在，通过新一代数字工作协议——互联网债券，世界各地的参与者都有可能获得对开源网络经济的敞口。

为了构建更好的模型、做出更准确的评估以及围绕其创造更好的产品，了解这种新型协议的基本特性是关键的一步。在一个成熟的状态下，这种互联网新协议层的收益相当于去中心化金融生态系统的无风险利率，并且成为评估去信任价值转移成本的基准。

随着互联网债券越来越受欢迎，创造一种通用的术语并理解他们有助于其在全球范围内应用。

点击此处阅读完整的《[互联网债券白皮书](https://drive.google.com/file/d/13-s15SvCIUBukhSZiNkpd0sTff3izQ5G/view)》

###  
&lt;br/&gt;

## **什么是互联网债券？**

如今，最受欢迎的数字工作协议涉及的内容是，将价值抵押，获得可以提供工作的权利并赚取利益。这就是总所周知的“质押”(Staking)。

(译注：在Eth2 Staking中指的是抵押32 ETH成为验证者，获得提议区块和证明区块的权利，并赚取利润。)

与传统的债券结构类似，质押有多种形式，但其核心是债券发行者 (协议) 和债券持有者 (验证者或代理商) 之间的协议。

现在我用现实世界中的例子来类比互联网债券。

在世界许多地区，在法律允许建筑专业人员进行建筑工作之前，他们必须购买承包商执照保证金。购买该保证金之后，建筑专业人员们同意按照规章制度开展工作，旨在保护政府机构和消费者们免受潜在的金融损失。

承包商执照保证金属于担保保证金的一种，其中：

1. **委托人**：通过提供资本并同意一套规则从而寻求工作许可的实体。
2. **债权人**：按照一套规则和保证而为债券设定要求的实体。
3. **发行人**：保证委托人履行义务的实体。

在加密领域以及权益证明 (PoS) 中，可以将质押债券看作一种承包商执照保证金。比如，以太坊验证者需要质押32 ETH作为抵押品，以在网络上注册其节点，相应地他们将会获得“许可证”(license) 以支持其链上共识操作。

有了这一“许可证”，验证者同意遵守网络的规则，即在链上诚实履行职责以及保证其在链上持续运行。相应地，他们会定期地获得收益作为回报。

在这种情况下，债券是以下双方之间达成的协议：

1. 委托人：**验证者**
2. 债权人和发行人：**以太坊区块链**

在这个例子中，以太坊既充当债权人又充当发行人。也就是说，它以编程的形式明确并且执行一套规则，以维护网络的完整性。履行职责的验证者会获得奖励，以此作为激励，而那些未达到操作要求或者作恶的验证者将面临遭受罚款、被没收质押金/或失去参与权利 (罚没) 的风险。

因此，从抽象的意义来讲，质押头寸可以被看作是Web3.0数字工作协议的一种，它与传统金融世界中的债券结构有类似的行为模式。

那么这两者的主要区别是什么？

**Web3.0中互联网债券的持有者同时也是资本、劳动力的贷方，以及一直都是网络的所有者。**

**因此，互联网债券是一种新型的激励性的数字工作协议，在成熟的状态下，可以将之描述为具有类似债务和股权特征的混合性永续债券。**

&lt;br/&gt;

## **Eth2 互联网债券**

由于其开源软件的本质，以及在分阶段推出Eth2过程中展现出的不断演变的赎回属性，Eth2 互联网债券就像是不断进化的资产。

我们发布的[白皮书](https://drive.google.com/file/d/13-s15SvCIUBukhSZiNkpd0sTff3izQ5G/view)使用以太坊2.0协议来演示所提议的概念框架上的应用，旨在让大家更好地理解、评估以及规划以太坊2.0参与市场。

该白皮书重点关注Eth2的早期阶段，并预测了Eth2互联网债券未来会是什么样子的，研究重点包括：

1. Value价值
2. Rewards奖励
3. Network State网络状态

### **为Eth2互联网债券行为建模**



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/RP2qDYP/1.png&quot;/&gt;&lt;/center&gt;







&lt;center&gt;图：Eth2互联网债券价值概览&lt;/center&gt;

由于最近发布了[存款合约](https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/deposit-contract.md)，验证者现在可以直接向协议存入32 ETH，或者通过托管中间商 (质押池) 存入小额的ETH。存款通过向Eth1链上的存款合约发送单向交易完成。由于阶段0将作为Eth2的初始启动阶段，因此初始质押的存款以及相应的奖励要在阶段1.5之后才能提出。

因此，我们可以从把Eth2互联网债券作为一种递延奖励协议入手。需要注意的是，递延利息债券是一种债务协议，其应计利息仅在到期时全额支付。递延利息工具通常以[较高的折扣](https://www.investopedia.com/terms/d/deepdiscountbond.asp)发行和交易，以补偿质押者在此期间的延迟收益以及缺乏流动性的问题。因此，资产的价值最终会在到期时与面值趋同。





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/KDJv5Y3/p2.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图：Eth2互联网债券的折扣率&lt;/center&gt;

在阶段1之后的阶段1.5，Eth1链将会迁移至Eth2的其中一个分片上。

在阶段1.5，验证者将首次能够提出他们的存款并领取奖励。随着Eth2网络成功迁移，债券的性质发生了变化，从递延结构变为更类似于具有债务和股权特性的永续协议。

永续金融协议 (如Eth2互联网债券)，会给那些为公共基础设施作贡献的参与者提供永久性的奖励，但不包括到期日。






&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/4dX7McS/p3-1.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;图：评估阶段1以及以后的互联网债券的价值&lt;/center&gt;

## **总结**

参与Web3.0的基础层，代表着参与了一种新的数字工作协议，协议的双方是全球的参与者以及旨在提供任何人都可用的去信任价值转移的去中心化互联网协议。

互联网债券是金融市场里一种全新的资产。它允许世界上任何人投资、参与其中，并且从一个开源的、去中心化的数字经济中获得利润。

这个模型给我们展现了学习借鉴旧事物的价值，因为我们从新旧事物的关联性中才能更好地领悟新事物。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/11/13）]]></title><description><![CDATA[验证者本周请留意客户端更新，Vitalik提议明确分开未来在分片、轻客户端支持、Eth1/Eth2合并的工作。]]></description><link>https://www.ethereum.cn/wnie2-2020-11-13/</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-11-13/</guid><pubDate>Tue, 17 Nov 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_201113)


&lt;br/&gt;

# 首选阅读

Danny Ryan在以太坊播客更新的文章：

- [《Eth2更新速览#19》](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)公布了存款合约
- [《Eth2更新速览#20》](https://news.ethereum.cn/eth2-quick-update-no-20/)新鲜出炉![:grinning:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/grinning.png)

 

# 阶段0：信标链

如果大家过去两周有关注以太坊的话，应该听说了[存款合约](https://blog.ethereum.org/2020/11/04/eth2-quick-update-no-19/)已经在11月4日正式发布。其实三周前就已经[部署](https://etherscan.io/tx/0xe75fb554e433e03763a1560646ee22dcb74e5274b34c5ad644e7c0f619a7e1d0)了，和我[预测的时间](https://twitter.com/evan_van_ness/status/1324814160266469376)差不多。

其部署方式又为以太坊的叙事添上了耐人寻味的一笔。部署资金[来自](https://etherscan.io/tx/0x1956761ad42396786160cb4cbca845409dadc5366c46a2b4e178d63dc0f17578)TornadoCash，因此实际上是无法追踪的。剩下的ETH则[被发送到](https://etherscan.io/tx/0x8aa30f7d95cd5f22dd02e59434c0e66794c6e370ed2659ea532ed6fe49f9cce5)了Wikileak的捐赠地址。我猜想此举意味着 1) 没有人掌握控制权；2) 我们拥护开放性和抗审查。这与比特币在其[创世区块](https://en.bitcoin.it/wiki/Genesis_block)中的宣言异曲同工。

在公布存款合约的同时，规范[v1.0.0版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.0.0)也跟大家见面了，其中有一些非常微小的更改。这是一个令人难以置信的里程碑：约28个月的工作终于来到了终点，包括来自[80多位](https://github.com/ethereum/eth2.0-specs/graphs/contributors)参与者大大小小的贡献，以及众多讨论和研究。



## 客户端团队更新

在本期中，由于临近创世，我特别增加了客户端团队的更新。

- [Lighthouse](https://lighthouse.sigmaprime.io/update-32.html)
- [Prysm](https://medium.com/prysmatic-labs/upcoming-prysm-v1-release-afea046d7ea1)
- [Teku](https://github.com/ConsenSys/teku/releases/tag/0.12.14)
- [Nimbus](https://our.status.im/nimbus-update-november-10/)，及其最新消息

最重要的是，所有客户端团队都希望在11月24日 (创世状态揭晓) 和12月1日 (最早创世日期) 之间发布客户端软件。该客户端版本将纳入创世状态和大量的引导节点 (以及所有最新的修复)，协议使得我们有一周的宽限期。

总之，无论读者计划运行哪个客户端，下周请准备好更新，并且注意客户端团队的告。Teku为此设置了新的[邮件推送](https://pages.consensys.net/teku-sign-up)和[推特账号](https://twitter.com/Teku_ConsenSys)，Teku用户们请前往注册。

多个测试网在发布时都因为质押者没有在创世前更新客户端而产生了一些问题，因此如果大家希望主网能够平稳上线，请务必更新客户端。



## 测试网

目前[Medalla测试网](https://medalla.beaconcha.in/)仍然在运行当中，有71,000名验证者，但参与率仅略高于70%，进入和退出队列都已经排到三周之后。开发者们普遍认为，Medalla的表现不错，但现在可以停止运行了。Medalla运行的规范并不是最新版本，而且冗长的队列将只想测试配置或是练手的验证者拒之门外。

我们在上周二快速启动了一个[Toledo测试网](https://toledo.beaconcha.in/)，可以容纳16,384名验证者，仅向客户端团队开放。其中设有[Eth2Stats监测](https://news.ethereum.cn/wnie2-2020-11-13/#/)。其目的只是在良好的环境中测试完整的主网规范。Toledo稳定下来之后一直在[完美运行](https://twitter.com/terencechain/status/1326894621905989633)，按计划其寿命只有几天了。

下一个大型公共测试网将是Pyrmont，将于UTC时间11月18日启动。初期将由客户端团队运行100,000名验证者，然后将其开放给社区参与。与Medalla不同，我们希望每个参与者运行少量验证者，目的在于缩短排队时间，也可以降低停止敲定的风险。目前还不确定Pyrmont是否会长期运行。

## 工具和分析

本部分最重要的信息当属以太坊基金会发布了[Eth2 Staking社区赏金](https://ethereum.org/en/eth2/get-involved/staking-community-grants/)，激励大家“创建工具、文档及其他资源，以优化质押和验证者体验”，截止日期是12月22日。

 ### 分析

我们[上次](https://news.ethereum.cn/wnie2-2020-11-13/#Medalla-data-challenge)谈到了Medalla数据竞赛。自那之后，EthStaker就邀请了一些作者线上[展示他们的成果](https://www.youtube.com/watch?v=Gj7YMjBd1RQ)，干货满满。

Barnabé Monnot的[可视化](https://twitter.com/barnabemonnot/status/1326786702493495300)做得非常棒！将大量信息浓缩成为一种视觉体验，我也就看了一百多遍吧。其中[随附的notebook](https://ethereum.github.io/rig/medalla-data-challenge/notebooks/explore.html)也提供了一些有价值的观察。

### 工具

Alex Stokes正在为信标链[创建](https://twitter.com/ralexstokes/status/1326695391685877761)[分叉监测器](https://eth2-fork-mon.stokes.io/)，这将会发挥很大的作用。目前我们正在Toledo开发者测试网中使用，暂未出现任何问题。

Jim McDonald已更新其信标链数据提取工具[chaind](https://github.com/wealdtech/chaind)，以配合Teku，Lighthouse和Prysm的最新版本使用。

Sigma Prime已经发布了信标链模糊测试[更新09](https://blog.sigmaprime.io/beacon-fuzz-09.html)。在最近，模糊测试器在Prysm中发现了两个严重漏洞，在Teku中发现一个不可利用的小问题。

Stakefish创建了一个[批量存款合约](https://medium.com/stakefish/introducing-the-batch-deposit-contract-41e9028a6174)，以便在进行多次质押时节省gas费用。他们在收集反馈和建议。如下所述：在将存款发送到任何非官方渠道之前，请务必保持谨慎。

Yorick Downe编纂了“非官方”Eth2客户端[docker搭建指南](https://github.com/eth2-educators/eth2-docker)，以便为Docker用户带来更好的体验。还有[youtube视频教程](https://www.youtube.com/watch?v=YxrsJO4Wra8)。

在工具方面，EthStaker的Superphiz正在为以太坊尽职调查委员会 (EDDC)[寻找参与者](https://www.reddit.com/r/ethstaker/comments/joo1wp/seeking_participants_i_am_organizing_the_ethereum/)，对我们生态系统中的工具进行评估。另请参阅他的[bench chat](https://www.youtube.com/watch?v=3LWMSHT8WmA)，如果这是您擅长的领域，请与他联系。

##  
&lt;br/&gt;

# 质押

## 存款进度

进行存款质押的地址是：https://launchpad.ethereum.org/

如果未经详尽了解，请勿使用任何其他声称接受Eth2存款的网站！

[Launchpad](https://launchpad.ethereum.org/)本身就展示了实现最低存款目标的进度，而[Dune Analytics dashboard](https://www.duneanalytics.com/hagaetc/eth2-0-deposits)则提供了更多的信息。甚至可以在[此处](https://explorer.blocknative.com/?v=1.5.1&amp;0=ethereum&amp;1=main&amp;s={:,:})查看待处理的交易，并在[The Graph](https://thegraph.com/explorer/subgraph/nieldlr/eth2deposit-subgraph)中浏览历史存款。

截至译文发布，存款进度已达23.2%。前期看似进度比较慢，但是根据[Tetranode](https://twitter.com/Tetranode/status/1326375562047344645)和Jutsin的推文与投票，大多数人还没有采取动作，我期待在24号临近时看到大幅攀升。Anthony Sassano呼吁大家加入[创世备战](https://thedailygwei.substack.com/p/the-genesis-war-effort-the-daily)，Vitalik[已经完成使命](https://www.theblockcrypto.com/linked/83753/vitalik-buterin-eth-2-deposit-address-phase-0)。

（提示：如果大家想要成为创世验证者，需要在UTC时间11月24日中午之前 (即北京时间11月24日晚八点)将存款发送到合约，也就是创世时间的前一周。如果在那之后进行存款，可能需要加入创世之后的验证者队列进行排队）

## 税务

现在来到每个人最喜欢的话题：Eth2存款的税务问题，过去几天Twitter上的相关辩论十分激烈。关键问题在于，向存款合约发送ETH的行为是否满足资本所得的目的 (根据美国税法，这是“应税事件”，我想英国也是如此)。这又可能取决于Eth1链上的ETH和Eth2链上的ETH是否是同一种资产。James Prestwich大力[主张](https://twitter.com/_prestwich/status/1324818543720890368)两者是不同的资产；Justin Leroux ([一名税务会计师](https://twitter.com/0xMidnight/status/1326716714256625666)) 则[认为](https://twitter.com/0xMidnight/status/1324837715519688707)其实是同种资产。还有其他不同的角色也加入了战斗，包括[TokenTax](https://twitter.com/TokenTax/status/1324782594580533250)，有许多系列推文都对此进行了讨论。

没有人知道全球各个税务部门[可能会做出](https://twitter.com/benjaminion_xyz/status/1310646040576614400)什么决定。与许多税收事项一样，当局可能会采取各种不同的观点，并且他们会根据自己的目的颁布法令。以此为前提，对待税务问题我们要采取谨慎的态度。大家可以自行研究，也可以获取专业建议，但请勿根据一些推特言论进行决策。

此处还要提一下本周发布的[Liquidstake](https://liquidstake.com/blog/1)，它提供了一种基于质押金借入USDC的方案。[The Block](https://www.theblockcrypto.com/linked/84277/eth2-liquidstake-borrow-eth-validators)引述了Andrew Keys：“如果要进行交易，您需要清楚了解监管和税务问题。水能载舟，亦能覆舟。”

&lt;br/&gt;

# 释义性资源

…关于其他媒体资源，我收集了一堆杂乱的信息，我打算就列在这下面了：

- 关于在主网上[参与质押的指南](https://www.reddit.com/r/ethstaker/comments/jo5ttt/guides_to_staking_ethereum_20_mainnet/)的整合，以及关于[如何在Ubuntu上运行Teku](https://agstakingco.gitbook.io/eth-2-0-staking-guide-teku-medalla-ubuntu/eth-2.0-teku-validator)的教程。
- Bankless继续推出他们的Eth2.0播客系列。之前的嘉宾有[Vitalik Buterin](http://podcast.banklesshq.com/35-designing-ethereum-vitalik-buterin)、[Danny Ryan](http://podcast.banklesshq.com/eth-20-ama-with-danny-ryan)以及[Preston Van Loon](http://podcast.banklesshq.com/phase-0-announced-eth-staking-is-here-preston-van-loon-of-prysmatic-labs-alpha-leak)。也可以在[YouTube](https://www.youtube.com/watch?v=SkUiw1y3BHU)上看。
- 看看Superphiz发的4个板凳谈话 (Bench Chats) 小视频：一口气就能看完、5分钟的小视频却干货满满（ [1](https://www.youtube.com/watch?v=LfLZJq8DLoI), [2](https://www.youtube.com/watch?v=3LWMSHT8WmA), [3](https://www.youtube.com/watch?v=oRe3wxMefAA), 和 [4](https://www.youtube.com/watch?v=8brOk-k9TJo) ）。Superphiz大概成为我现在[最喜欢的](https://twitter.com/benjaminion_xyz/status/1321754534054662145)一位以太坊贡献者了。
- Superphiz也做了一些关于Staking的长视频，可以看他和Defi Dad一起参加的那期[Yield TV](https://www.youtube.com/watch?v=B_8ihwx84rg)视频。我还没来得及看，但相信这个视频一定很棒。
- [TechRadar](https://twitter.com/sassal0x/status/1324708386336768000)上的Eth2内容。(网页里太多弹窗了，唉)
- The Defiant发出了[灵魂拷问](https://thedefiant.substack.com/p/hurray-you-can-now-stake-eth-but)：快！现在能质押了！但是我们应该质押吗？
- 由我的好朋友Conor SvEnsson，Web3 Labs的CEO做的6分钟小视频，[概述了Eth2](https://www.youtube.com/watch?v=G4hqaxfSV6s)。上个月他问了我一些关于质押服务的问题；现在他正计划运行自己Eth2节点，太好了！
- Tetranode在推特上[文字直播](https://twitter.com/Tetranode/status/1325191673756839940)如何使用Launchpad进行质押。
- Bison Trails的Viktor Bunin一直在撰写内容丰富的更新。这里是[第三期](https://bisontrails.co/eth2/003/)和[第四期](https://bisontrails.co/eth2/004/)。

&lt;br/&gt;

# 研究工作

Collin Myers和Mara Schmiedt合著了一份非常棒的论文[《互联网债券》](https://drive.google.com/file/d/13-s15SvCIUBukhSZiNkpd0sTff3izQ5G/view)：Web3.0时代的数字工作协议。他们借助债券的经济框架来分析Eth2的质押模式，并为Eth2 Staking的参与市场建模。

Vitalik建议对“二次泄露”(quadratic leak)即怠工泄露 (inactivity leak) [做一些修改](https://github.com/ethereum/eth2.0-specs/issues/2125)。这个机制将在区块停止敲定的情况下启动，以加速将不活跃验证者踢出网络并使得网络恢复。从Medalla测试网得出的主要教训是：我们对一些真正试图尽力维护网络，但由于网络条件不佳而苦苦挣扎的验证者的惩罚过于严峻了。该提议的目的是对那些间歇性保持活跃的验证者降低惩罚力度，而仍对会惩罚那些完全离线的验证者。

TXRX团队的Alex Vlasov想要使得Eth2规范更经得起考验。为此，他在他的文章[《让信标链的Python规范具有更加正式的语义》](https://ethresear.ch/t/towards-formal-semantics-of-the-beacon-chains-pyspec/8181?u=benjaminion)中提出一种破坏性最小的方法。

&lt;br/&gt;

# 常规会议

## 实现者会议

第52次会议于11月12日进行。

- 会议日程
- 会议视频
- [我](https://hackmd.io/@benjaminion/B1GPwjcKP)和[Mamy](https://gist.github.com/mratsim/6c3ced507236af7d2995fa74f1a1a380)的速记

会议中讨论了一些关于测试网的问题，但是引起我注意的主要是Vitalik的提议：明确地分开将来在分片、轻客户端的支持和Eth1/Eth2合并的工作。这意味着以上三项工作能够有效地以任意顺序展开，也就是说我们需要诸如[可执行的信标链](https://hackmd.io/T7pfs7uQRkeVWeTXUt--Mg)这样的设计，即在我们还没有推出分片[之前](https://twitter.com/VitalikButerin/status/1326446752312954882)就可以将Eth1链直接嵌入到信标链中。

现在这个提议还会根据需求变化，将来会如何实现还有待观察。同时它又是非常实用的，绝对是一个“工程方法”。只是我得说，我必须要为我们精美的、纯粹的阶段0、阶段1、阶段2路线图，以及它包含的执行引擎和优美的蓝图而哀悼。此外，我也为失去最初在以太坊、Whisper和Swarm基础上构建的Web3愿景而感到遗憾。显然，我对那些优美却无法推出的设计总是怀有执念。

&lt;br/&gt;

# 活动预告

- Hudson Jameson于北京时间11月15日凌晨5点[直播](https://twitter.com/hudsonjameson/status/1327082283849969665)他是如何设置他的Eth2 Staking节点的。点击链接回看[直播](https://www.youtube.com/watch?v=uTTc4s1CzME)：
- [EthStaker社区电话会议](https://www.reddit.com/r/ethstaker/comments/jshz2t/ethstaker_community_call_11_deposit_launchpad/)于北京时间11月17日凌晨2点举行。
- [Eth2创世AMA](https://twitter.com/drakefjustin/status/1327311210484621312)将于11月18日晚上9点举行。
- 由Staked举办的[ETH Staking网络研讨会](https://staking.staked.us/eth-staking-webinar-nov19)将于北京时间11月20日凌晨1点举行。需要注册。
- [EthStaker](https://www.reddit.com/r/ethstaker)举办的Staking研讨会——直播讲解如何设置Staking客户端。时间：北京时间11月21日晚上9点。细节有待完善——查看[EthStaker的活动日历](https://www.reddit.com/r/ethstaker/comments/jkmh7d/ethstaker_calendar_sticky_updated_at_least_weekly/)以获得更多信息。

&lt;br/&gt;

# 其他新闻

- [ethereum.org](https://ethereum.org/en/eth2/)上的Eth2页面已经试运行。我的[第一份PR](https://github.com/ethereum/ethereum-org-website/pull/1812/files)已经合并![:slightly_smiling_face:](https://assets.hackmd.io/build/emojify.js/dist/images/basic/slightly_smiling_face.png)
- Quantstamp完成了[对Teku的正式审计](https://quantstamp.com/blog/quantstamp-completes-audit-of-2nd-eth-2-0-implementation)。我们很高兴看到这样的结果：“Quantstamp表示Teku的代码库是质量最高的”。完整的审计报告可以[点击此处](https://certificate.quantstamp.com/view/teku)下载。
- Vitalik更新了一篇文章[《VITALIK：权益证明工作量证明（2020 年11月）》](https://vitalik.ca/general/2020/11/06/pos2020.html)

&lt;br/&gt;
 
&lt;br/&gt;
 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太七日谈 • 2020/11/16]]></title><description><![CDATA[-ETH2
-Infura事件发微]]></description><link>https://www.ethereum.cn/eth-weekly-2020-11-16/</link><guid isPermaLink="false">https://www.ethereum.cn/eth-weekly-2020-11-16/</guid><pubDate>Tue, 17 Nov 2020 00:00:00 GMT</pubDate><content:encoded>
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SfzYVBN/1.png&quot;/&gt;&lt;/center&gt;

编者按：《以太七日谈》是 ECN 团队对 ΞXPRΞSS 栏目进行的一次试验性升级，我们希望将每周以太坊生态中发生的一些大事小事趣事分享到中文社区。《以太七日谈》中的内容均为编者自行整理编译，如有疏漏和建议，欢迎大家及时通过公众号后台或是社群向我们反馈。

 

&lt;br/&gt;

## **Eth1**

### **㊂** **Infura服务器崩溃事件面面观**





北京时间11月11日下午，提供节点服务的Infura的部分API服务出现故障，随后停止服务，运行较老版本的geth节点用户发现自己处于一条少数分叉链上，以太坊主网出现共识错误，波及甚广。

很快以太坊客户端Geth团队负责人Péter Szilágyi@peter_szilagyi对事件进行交代与解释：**此次故障的主要原因是Geth v.19.7版本（2019年11月发布）中存在一个内存覆盖问题，该漏洞在2020年7月的Ethereum Bounty Program中被John Youngsecok Yang发现，并于7月20日的Geth v.1.9.17版本中得到静默修复。**在此过程中，为了避免被利用，漏洞细节并没有在Github Issue上公开讨论。

而在11月11日，Optimism在主网进行漏洞测试，虽然只有少数Geth客户端未升级至最新版本（但其中就包括Infura），这导致旧版客户端与其他客户端产生了不一致的共识。事件被认为是值得记入以太坊历史的一次无意为之的“硬分叉”(从技术上来说)。

事情发生后，社区多方对事件进行了整理和反思：

**Geth 团队**：[回顾事件并发布最新修复版本](http://mp.weixin.qq.com/s?__biz=MzU2NDcyOTc2NA==&amp;mid=2247486385&amp;idx=1&amp;sn=579ce6df30c426753b86d09eba6268bf&amp;chksm=fc47c97acb30406cbc275dc4fbdff1223d06f9d30a1019bd384b2b522ca8f950b267893859a1&amp;scene=21#wechat_redirect)

**以太坊研究团队Quilt**：推特账号[lightclients](https://twitter.com/lightclients/status/1326947033987493893?s=20)从技术细节上追溯了事情的始末和理解漏洞会如何被利用。

**Optimism团队**：推特账号Jing is hiring for Optimism [@jinglanW](https://twitter.com/jinglanW/status/1326651349912719360?s=20)代表Optimism团队在推特为事件致歉，并给出了事件发展的时间线。

**Synthetix的Kein** :表达了实现DeFi基础设施去中心化的重要性。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/XZfWJyL/2.png&quot;/&gt;&lt;/center&gt;







**事件的最新情况：**Geth团队已经为Geth v.1.9.24版本重新搭建了所有官方docker映像。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/p2rXmdc/3.png&quot;/&gt;&lt;/center&gt;










&lt;br/&gt;

## **Eth2**




### **㊂** **Eth2质押进展一二事**

Eth2存款合约已经上线11天，据beaconcha.in浏览器显示，截至本文发布，合约中已收到95,136 ETH，完成度18.15%，还需13,411名验证者质押429152 ETH才能启动创世。Vitalik于11日发推鼓励大家参与Eth2质押，并表示前几个月参与质押的验证者面临的惩罚程度**将减少至Medalla测试网标准的1/3到1/4。再者，如果存款合约收到524,288 ETH，验证者的年化收益率(APR)约25%。也就是说，尽管验证者加入Eth2信标链之后的三周被罚没了，ta仍能获得盈利。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6nz66X5/4.png&quot;/&gt;&lt;/center&gt;






现离最早创始时间还有15天，不管能否在最早创世时间启动创世，大家都应以平常心看待，不妨来看看ECN翻译的[《以太坊2.0创世事件》](http://mp.weixin.qq.com/s?__biz=MzU2NDcyOTc2NA==&amp;mid=2247486377&amp;idx=1&amp;sn=1bcda73fae1f1016e3b7ef138f360b13&amp;chksm=fc47c962cb3040747935c7f647b812730b711f4605912d2166da01d958a14950b1412c9d4d81&amp;scene=21#wechat_redirect)，了解2.0创世的两种可能情况。

关于Eth2客户端的更新情况，**r/ethstaker社区的@superphiz曾发推提醒，**如果想在信标链主网上质押，请留意所有客户端的信标链软件的最终版本应该在11月24日后才上线，在此之前请同步你的geth节点，准备好你的系统，等待安装信标链的客户端。

而后Eth2客户端Lighthouse在其最新博客文章中透露**Lighthouse v1.0.0预估在11月24日到12月1日之间发布。**Lighthouse现阶段的版本为v0.3.3，其第一个稳定版本v1.0.0发布之后，意味着Lighthouse进入“产品”(production)阶段。Lighthouse v1.0.0的发布需满足以下两个条件：**1.参与Eth2质押的验证者达到16,384名；2.北京时间11月24日晚8点之后。**

开发者Justin Drake发推表示Eth2 创世AMA将于北京时间**11月18日晚上9点在reddit/r/ethereum举行，**大家有什么关于Eth2创世的问题可以去提问或围观。

 

### **㊂** **Eth2 v1.0测试网Toledo已发布，Pyrmont在路上**

上周由protolambda负责的客户端开发团队发布了Eth2 测试网Toledo，**这是一个具有Eth2 v1.0主网配置的针对开发者的测试网，可容纳1.6万验证者。**Toledo主要用于测试v1.0规范并且为开发者提供实验环境。

**而本周将迎来v1.0的公共测试网Pyrmont，可容纳10万验证者。**Pyrmont将尽可能地模拟主网环境，并在运行稳定后，会向社区开放，用以测试Eth2主网软件发布和硬件设置。详情可阅读最新一期《Eth2更新速览#20》。

 





&lt;br/&gt;

## **Layer2**



### **㊂** **Arbitrum Rollup上的Uniswap V2之Optimistic Rollup解决方案初体验**

10月14日Offchain Lab在主网推出Layer2解决方案Arbitrum Rollup的测试网，这是一个功能完备的Optimistic Rollup解决方案，任何人都可以在该测试网上部署Solidity合约。11月6日，Arbitrum Rollup又推出一项重要更新Arbiswap：**在其测试网接入Uniswap V2的端口。**使用了Arbitrum Rollup之后，在Uniswap V2上进行代币转移，gas费将降低约55倍。看到这里大家是否跃跃欲试？

小编整理了使用Arbiswap的**操作步骤：**

➤ 发推并@Offchain Lab请求测试币


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/BgZgyxy/4.png&quot;/&gt;&lt;/center&gt;


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Y2jF96D/6.png&quot;/&gt;&lt;/center&gt;








➤进入Arbiswap[用户界面](https://swap.arbitrum.io/#/swap)

➤ 连接Metamask钱包，并选择Kovan测试网络，进行swap或提供流动性

➤ 完成交易后，在[Arbitrum Rollup区块浏览器](https://explorer.offchainlabs.com/#/)上查看自己的交易gas费使用情况。

 

### **㊂** **状态通道解决方案Celer Network推出“瞭望塔”侧链SGN**

11月10日，Layer 2扩容解决方案Celer状态通道网络的状态监护网络（State Guardian Network: SGN）于主网上线，主网发布将分5个阶段进行，第一个阶段已经成功启动并开始运行。SGN是Celer扩容蓝图的最后一部分，作为一条可扩展的、去中心化的“瞭望塔”侧链，其功能包括：保护用户通道状态；委托接收支付；提供app之间连接性的预言机。

 

### **㊂** **集思广益，Rollup们翻译成什么好？**

Vitalik发推传达了@eth_taipei社区对各个Rollup的翻译提议：Rollup=卷叠；Optimistic rollup=乐观卷叠；ZK rollup=零知卷叠。

![img](https://news.ethereum.cn/wp-content/uploads/2020/11/%E6%9C%9F%E4%B8%806.png)





加密圈各方人士纷纷在评论区献策，Foundation联合创始人Elpizo Choi甚至给出了粤语版本：Rollup=春卷；Optimistic rollup=天真春卷；ZK rollup=懵查查春卷。而来自中国的社区DAOSquare也献出了自己的菜单：Rollup=肉辣卷；Optimistic rollup=乐天肉辣卷；ZK rollup=淋汁肉辣卷。小编看饿了，你呢!👀



&lt;br/&gt;

## **EIP-1559**







### **㊂EIP-1559进展更新一览，中国社区涌现不同的声音**

EIP-1559由Vitalik于2019年提出，旨在提高以太坊费用市场的效率。简而言之，它希望将区块扩大到现在的两倍，但保持只使用容量的一半，EIP-1559通过追踪最低的gas费来实现这一点。关于EIP-1559的背景知识在[《EIP-1559的状态更新#1》](http://mp.weixin.qq.com/s?__biz=MzU2NDcyOTc2NA==&amp;mid=2247486191&amp;idx=1&amp;sn=9c74f2e02ea19aa47e2013104fb06669&amp;chksm=fc47c824cb3041322e1f4a9334d0ffb4103614f4010ccaecdbae6365dcac969a631787921a33&amp;scene=21#wechat_redirect)中有详细提到，此系列更新文章由开发者Tim Beiko撰写，在其最新一篇文章[《EIP-1559的状态更新#3》](http://mp.weixin.qq.com/s?__biz=MzU2NDcyOTc2NA==&amp;mid=2247486365&amp;idx=1&amp;sn=4343c2177243f8346c318c22ef004ab4&amp;chksm=fc47c956cb304040fbcf38f54bb72d9565a4ce6c4f8eb96e430ee670cc93754a43f3e6b40dc4&amp;scene=21#wechat_redirect)中，总结了1559的最新进展，包括：资金筹集完成；开始探索分叉的测试网；各种工具以及模拟的更新。

而与此同时我们也关注到了来自中国社区的不同声音，以太坊爱好者ajian[发文](https://ethfans.org/topics/33308)表示：**“EIP-1559 既无法让交易手续费变得更可预测（因为需求不可预测），也无法降低 Gas 价格，因此谈不上能制造更好的用户体验。”**

 



&lt;br/&gt;

## **DeFi**



### **㊂1inch V2上线，新增API工具Pathfinder**

去中心化交易所1inch于11月6日上线V2版本，**此版本亮点是新增了API工具Pathfinder：**使用了最新的搜索和路由算法，可在最短的时间内给出交换代币的最佳路径。1inch联合创始人Sergej Kunz 称：“此次 1inch V2 升级中，用户最大的感受就是速度变得更快了。”

11月13日1inch发推表示，其V2上线后，1inch上的交易失败率极大地降低了!👇

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/16sk8tf/5.png&quot;/&gt;&lt;/center&gt;









### **㊂** **app.uniswap.org网站短暂故障，现已恢复正常**

11月14日，Uniswap发推称由于Cloudflare IPFS网关出现问题，其网站app.uniswap.org暂时无法正常运行。但Uniswap列出了其他访问Uniswap的方式，包括：使用 Uniswap GitHub 提供的其他 IPFS 网关入口；从http://uniswap.eth.link访问；使用Dharma、Rainbow或其他内置交易的以太坊钱包访问Uniswap；还可以在Etherscan上或者通过命令行界面访问Uniswap进行交易。

Uniswap表示：“这就是DeFi的好处，不会像CeFi那样出现单点故障而导致用户完全无法访问的问题。”

 



### **㊂** **稳定币Dai流通量达10亿**

Maker发推称多抵押Dai发布不到一年，已通过Maker Vaults生成了10亿Dai。[此处](https://blog.makerdao.com/zero-to-one-billion-dai-five-years-of-growth-for-makerdao/)是MakerDAO五年以来的变化。

 





&lt;br/&gt;

## **生态**









### **㊂** **币安承诺给第8轮Gitcoin Grant匹配捐赠10万美元**

在一场币安峰会中，币安CEO赵长鹏承诺在第8轮，即下一轮的Gitcoin Grants匹配中捐赠10万美元。此轮将计划于今年12月2日—12月8日进行。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/fpgYcRn/8.png&quot;/&gt;&lt;/center&gt;








###  

### **㊂** **PayPal对其用户降低加密货币服务准入门槛，并提高每周购买限额**

据Coindesk11月13日的报道，**PayPal即将向美国所有持有PayPal账户的用户开放加密货币服务，**这意味着未来两到三周，美国持有PayPal合格账户的人就可以购买、持有、出售加密货币。而此前在11月2日的电话会议中，PayPal CEO Schulman表示，由于用户需要通过SSN (美国社会安全号码)验证才能使用加密货币服务，PayPal仅对10%的用户开放加密服务。**并且由于需求量巨大，PayPal还将每周购买限额从10万美元提高至20万美元。**

&lt;br/&gt;

&lt;br/&gt;

声明：以太七日谈栏目内容由编者自行编译而成，仅供参考，请以消息来源为准。转载须注明原文出处以及ethereum.cn。若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#20]]></title><description><![CDATA[新Eth2测试网：使用最新主网规范，分别面向开发者和社区。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-20/</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-20/</guid><pubDate>Mon, 16 Nov 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog ](https://blog.ethereum.org/2020/11/13/eth2-quick-update-no-20/)


&lt;br/&gt;

## 要点速览

- [Staking社区赏金](https://ethereum.org/en/eth2/get-involved/staking-community-grants/)
- 使用0主网规范的Eth2测试网 – [Toledo](https://toledo.beaconcha.in/)和[Pyrmont](https://en.wikipedia.org/wiki/Pyrmont,_New_South_Wales)
- 主网存款合约[0x00000000219ab540356cBB839Cbe05303d7705Fa](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)

&lt;br/&gt;

## Staking社区赏金

上周以太坊基金会宣布了[Eth2 Staking社区赏金](https://ethereum.org/en/eth2/get-involved/staking-community-grants/)，旨在激励参与者们优化质押体验。

该计划围绕Staking公开征集提案，包括工具类、文档以及教育类等等。

[此处](https://ethereum.org/en/eth2/get-involved/staking-community-grants/)是grants[详情页](https://ethereum.org/en/eth2/get-involved/staking-community-grants/#wishlist)。提案递交将于12月22日截至。

&lt;br/&gt;

## Eth2测试网– Toledo 和 Pyrmont

上周，由protolambda领导的客户端开发者们发布了[Toledo开发者网络](https://toledo.beaconcha.in/)，这是一个使用v1.0主网规范的测试网，可容纳1.6万验证者。虽然大家可以在本测试网中选择任意节点进行同步，但无法进行验证者存款，因为其中使用的存款合约是修改过且需许可的。Toledo主要用于测试v1.0规范并且为开发者提供实验环境。

本周，我们会发布Pyrmont，而这将是一个尽可能模拟主网环境的测试网，可容纳10万验证者。Pyrmont测试网运行稳定后，会向社区开放。在启动主网之前，Pyrmont可以作为测试主网软件发布和硬件设置的不二去处。

由于Pyrmont使用主网配置，因此它具备与主网相同的 (缓慢的) 激活队列机制。**请大家有序排队，并且一次只进行1-2次验证者存款。**这将使得接下来几周的排队时间保持在合理范围内，并有利于为所有用户提供高效的测试平台。

至少在eth2主网创世阶段，Pyrmont会持续运行。之后我们将考虑构建稳定性更强、用户体验更好的长期测试网。我们可能会缩短排队时间，并将最低驱逐余额大幅提高。

但是在那之前，请大家尽情享用Pyrmont!

&lt;br/&gt;

## 主网质押

以防读者错过了上周的信息，再次提醒大家eth2主网存款合约已经启用，可通过主网[Launch Pad](https://launchpad.ethereum.org/)进行质押。主网存款合约地址： [0x00000000219ab540356cBB839Cbe05303d7705Fa](https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa)。请在发送资金前再三确认地址！

请注意，虽然MIN_GENESIS_TIME (即最早创世时间) 是UTC时间12月1日中午12:00，但是在此之前存在为期七天的 GENESIS_DELAY (即创世延迟时间)。也就是说，如果你想要确保在创世区块中包含自己的存款，则需要在UTC时间11月24日中午12:00前完成质押。

想要了解详细的主网创世过程，推荐大家阅读Ben Edgington的[《Eth2创世》](https://hackmd.io/@benjaminion/genesis)，点击此处阅读[中文版](https://news.ethereum.cn/genesis/)。

祝大家有一段美好的Staking之旅!🚀

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[GETH发布最新修复版本]]></title><description><![CDATA[请节点立即升级至 Geth `v1.9.24 `版本，或使用 Go `1.15.5 ` 及以上版本]]></description><link>https://www.ethereum.cn/geth-security-release/</link><guid isPermaLink="false">https://www.ethereum.cn/geth-security-release/</guid><pubDate>Fri, 13 Nov 2020 00:00:00 GMT</pubDate><content:encoded>请节点立即升级至 Geth `v1.9.24`版本，或使用 Go `1.15.5` 及以上版本

来源 | [Ethereum Blog ](https://blog.ethereum.org/2020/11/12/geth_security_release/)

&lt;br/&gt;

# 提要

使用Go`&lt;1.15.5`或`&lt;1.14.12`构建的`geth` 版本很可能受到严重安全漏洞 (DoS) 的影响。Golang团队已将此漏洞注册为“ CVE-2020-28362”。

我们建议所有用户使用Go `1.15.5` or `1.14.12`重建客户端 (最好是`v1.9.24`版本)，以避免节点崩溃。另外，如果你运行的是官方程序，我们发布了基于Go `1.15.5`的Geth `v1.9.24`版本。(Release: https://github.com/ethereum/go-ethereum/releases/tag/v1.9.24)

Docker映像很可能由于缺少基本映像过期，可以查看此处说明使用Go`1.15.5`临时构建映像。请运行`geth version`来验证你的程序所使用的Go版本。

&lt;br/&gt;

# 背景

在十月初，go-ethereum加入了Google的[OSS-Fuzz](https://oss-fuzz.com/)计划。我们曾经临时执行过模糊测试，并测试了一些不同的平台。

10月24日，其中一个测试工具发现了一处崩溃。

经调查，发现问题的根本原因是Go标准库中的漏洞，并且该问题已经被上报。

&lt;br/&gt;

# 影响

在区块处理过程中，利用DoS漏洞可以使所有Geth节点崩溃，随之而来的后果就是以太坊网络中的大部分节点掉线。

除了Go-Ethereum之外，这个问题还有很大可能影响所有Geth的分叉 (例如TurboGeth或是ETC使用的core-geth)。为了扩大调查范围，我们会继续回溯代码，Go团队也已经对潜在受影响的使用者展开了调查。

&lt;br/&gt;

# 事件时间线

- 2020-10-24: 接收来自OSS-fuzz的崩溃报告
- 2020-10-25: 经调查发现起因是Go语言的漏洞。细节报告已经发送至[security@golang.org](mailto:security@golang.org)
- 2020-10-26: 收到确认反馈，继续进行调查
- 2020-10-26 – 2020-11-06: 讨论可能修复方案，继续回溯调查潜在受影响的使用者
- 2020-11-06: Go暂定2020-11-12发布漏洞修复
- 2020-11-09: Go预宣布安全补丁：https://groups.google.com/g/golang-announce/c/kMa3eup0qhU/m/O5RSMHO_CAAJ
- 2020-11-11: 通过Geth的官方[twitter](https://mobile.twitter.com/go_ethereum/status/1326448260949684228)、Discord以及[Reddit](https://www.reddit.com/r/ethereum/comments/js4sk2/security_go_v1155_is_coming_tomorrow_a_security/?utm_source=share&amp;utm_medium=web2x&amp;context=3)通知用户
- 2020-11-12: 发布新的Go版本，以及`geth`新版本其他问题

&lt;br/&gt;

# 挖矿漏洞

这个PR提交了另一个安全问题，引起了我们的注意，其中包含对ethash算法的修复。

该挖矿漏洞可能导致矿工在未来的epoch中错误地计算工作量证明。ETC链已经在2020-11-06发生了这个问题。预计这可能将在2021年1月上旬在区块高度`11550000` / epoch `385`处对ETH主网产生影响。

这个问题也在`v1.9.24`版本中得到了修复，此漏洞只与矿工节点相关，非矿工节点不受影响。

## Geth的浅拷贝漏洞

受影响版本: `1.9.7` – `1.9.16`

修复: `1.9.17`

类型: 共识漏洞

2020年7月15日, John Youngseok Yang (Software Platform Lab) 报告了Geth中的一个共识漏洞。

Geth预编译的`dataCopy（0x00 ... 04）`合约在调用时进行了浅拷贝，而Parity则进行了深拷贝。攻击者可以部署这样的合约：

- 在EVM内存区`R`写入`X`
- 使用`R`作为参数调用`0x00..04`
- 使用`R` 覆盖 `Y`
- 最后调用`RETURNDATACOPY`操作码
- 调用该合约时，Parity会在EVM栈中push `X`，而Geth会push `Y`

###  结果

这发生在以太坊主网区块高度 [11234873](https://etherscan.io/block/11234873) 处的交易 [0x57f7f9](https://etherscan.io/tx/0x57f7f9ec3cd92a908ac05edcb372bf6bb984fec6010a360eab76613fbf3bb23f)，导致节点掉线，约30个区块在侧链丢失。这也导致了Infura掉线，继而对使用Infura的用户和服务商造成了影响。

更多细节请参阅[Geth](https://gist.github.com/karalabe/e1891c8a99fdc16c4e60d9713c35401f)和[Infura](https://blog.infura.io/infura-mainnet-outage-post-mortem-2020-11-11/)的事件报告，以及此[系列推文](https://twitter.com/jinglanw/status/1326651349912719360?s=21)。

## `16` 和 `.17` 版本中的DoS漏洞

受影响版本: `v1.9.16`,`v1.9.17`

修复: `v1.9.18`

类型: 区块处理期间的DoS漏洞

我们发现了一个DoS漏洞，并且在`v1.9.18`中进行了修复。我们决定不在这个时间点公布细节。

&lt;br/&gt;

# 建议

短期内，我们建议所有用户立即将Geth升级到`v1.9.24`版本 (Go `1.15.5`)，此处是官方Release: https://github.com/ethereum/go-ethereum/releases/tag/v1.9.24

如果你是通过Docker使用Geth，那可能会出现一些问题。如果是`ethereum/client-go`，需要注意两件事：

1. Docker hub中的新映像可能会延迟
2. 如果Go的基础映像没那么快创建的话，则很有可能是基于Go的漏洞版本创建的

如果你打算自己创建docker映像 (通过repository root中的`docker build .`)，也可能会遇到第二个问题。

因此，请确保基础映像使用的是Go `1.15.5`。

长期来说，我们建议用户和矿工使用备选客户端。我们强烈认识到以太坊网络要保持韧性，就不能依赖单一的客户端实现。其他客户端选择还有 [Besu](https://github.com/hyperledger/besu/)、[Nethermind](https://github.com/NethermindEth/nethermind)、[OpenEthereum](https://github.com/openethereum/openethereum) 和 [TurboGeth](https://github.com/ledgerwatch/turbo-geth) 等等。

大家可以通过 [https://bounty.ethereum.org](https://bounty.ethereum.org/)、[bounty@ethereum.org](mailto:bounty@ethereum.org) 或 [security@ethereum.org](mailto:security@ethereum.org) 报告安全漏洞。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[EIP1559的状态更新#3]]></title><description><![CDATA[RIG团队在探索从主网分叉出一个EIP-1559测试网的可能性，并发表了将EIP-1559与Escalator tip相结合的分析]]></description><link>https://www.ethereum.cn/eip1559-update-003/</link><guid isPermaLink="false">https://www.ethereum.cn/eip1559-update-003/</guid><pubDate>Wed, 11 Nov 2020 00:00:00 GMT</pubDate><content:encoded>## 要点速览

- **资金筹集完成!💰** 以太坊基金会给ConsenSys和1559多签名拨款 🎉

- **分叉的测试网🍴** 我们正在探索是否可以从主网分叉出一个有大型状态的1559测试网。

- **各种工具[🛠]** Besu团队一直在努力搭建一系列工具，使得用户与1559测试网的交互更容易。

- **Escalator Tip模拟🤖** Barnabé的团队发表新的notebook，分析了使用EIP-2593式的费用作为1559小费的组成部分会带来的影响。

- **海量内容📝** 我们有关于1559UX的新文章，还有大量新的相关EIP和在另一个网络上对1559实现的分析。

 &lt;br/&gt; 

## 资金情况更新💵

以太坊基金会给ConsenSys和[1559的多签名](https://gitcoin.co/grants/946/project-title-eip-1559-community-fund)提供资金，用于支持EIP-1559的工具、项目管理、沟通、客户端实现和漏洞赏金的费用！

我们现在还在最终确认拨款的阶段，但它很快会上链了。这些资金足以确定EIP-1559规范，并进行一系列测试，我们可以通过AllCoreDev (核心开发者会议) 引导它的发展。

社区推动这件事的成果是值得一提的，他们给首轮Gitcoin grant的捐赠创下多个记录，一直公开支持1559，以及在背后协作与提供资金支持。感谢你们每一位——现在回到工作！

 &lt;br/&gt; 

## 测试网更新⛓

在过去几个月里，我们一直在一个小圈子里运行1559测试网，以确保团队间的实现是有共识的。现在看来我们的进度已经有99%了。Nethermind已经加入了Besu，在网络里成为了一名验证者 (虽然还有一个漏洞没解决)，以及Vulcanize的Geth实现现在已经与其他的Geth和Besu节点达成共识了，Nethermind很快也会跟上。

现在测试网有一个[公共的区块浏览器](http://eip1559-testnet.ops.pegasys.tech:3000/)，还有一个显示参与节点的[以太坊数据页面](http://eip1559-testnet.ops.pegasys.tech:3001/)。与此同时，Besu团队已经在Besu专用测试网上测试了它的1559工作量证明 (PoW) 实现，没有发现问题。

在这周的实现者会议里，我们就尝试在主网分叉一个多客户端PoW测试网达成了共识。这个决定很好，因为它允许我们在主网大型状态的环境里测试实现，且可以使每个有主网账户的人与网络交互。[它只是可能比看起来要复杂得多!😅](https://discord.com/channels/595666850260713488/692078615269212180/774317478440468491)。

 &lt;br/&gt; 

## 工具更新🛠

Besu团队一直在搭建工具，使得人们可以更容易与现在的1559测试网交互。读者可以在[这里](http://eip1559-tx.ops.pegasys.tech/)试一下。你们可以在主页提交遗留的与适应1559的交易到测试网。

有一件很酷的事需要提一下：在测试网上，遗留交易可以被解释为适应1559的交易，因此它需要支付高于 base fee的gas price才能变为有效交易，而base fee在执行期间会在gas费里被销毁🔥。

工具箱 (toolbox) 的另一项有用功能是base fee API，你可以通过它向测试网里一个特定的区块询问base fee。

除了交易发送者工具与base fee API，这个工具箱还与EIP本身、这些更新、网络区块浏览器、以太坊数据页面、以及要加入测试网的节点的指引和创世文件相连。如果想看工具的完整演示，读者可以看最新的实现者会议记录，[从12：00开始](https://youtu.be/LgvUnCdMXQg?t=720)。

 &lt;br/&gt; 

## 模拟更新🤖

Barnabé和他的团队发布了一篇[新的notebook](https://nbviewer.jupyter.org/github/barnabemonnot/abm1559/blob/master/notebooks/floatingEscalator.ipynb)，模拟EIP-1559与”escalator tip” (梯度小费) 的结合。”escalator tip”是受Dan Finlay提出的[EIP-2593](https://eips.ethereum.org/EIPS/eip-2593)启发，给用户在提出tip的时候增加第二个维度——时间。

换言之，它使得用户不仅可以指明他们想给矿工支付的最低与最高的小费，还有超过了多长时间他们会想提高它。

例如，有的用户急于交易，只要可以把他们的交易打包在接下来的两个区块里，他们愿意支付10 gwei的小费[0]；而有的用户不介意等候，只需要最后交易可以打包到区块，他们希望可以指明价格区间，比如1-20 gwei，但在不同的时间跨度，比如接下来的100个区块。

这篇notebook比较了这两类用户的策略：**急需交易的用户 (hurrying users)**，他们“为每多等待一个单位时间而设置他们费用的escalator梯度，且每当他们当前的净值 变为负时，他们就会停止出价”。而**固定区间用户 (fixed duration users)**，他们对同一个净值设置escalator的长度，并在该长度内设置尽可能大的斜率。”

Barnabé在这周的实现者会议里简单介绍了这篇notebook，[从5：11开始](https://youtu.be/LgvUnCdMXQg?t=311)。

 &lt;br/&gt; 

## 内容与其他更新📝

- Besu团队已经开始为更新各种JSON-RPC调用写EIP了，这些调用都会受EIP-1559影响。到目前为止，我们已经写了4份EIP，大概还有5份要写。完整的列表已经更新到[Mainnet Readiness Checklist](https://news.ethereum.cn/wp-admin/post.php?post=2683&amp;action=elementor#eips--reference-tests) (主网准备清单) 。
- Miach Zoltu已经写了一篇[关于EIP-1559的UX重要性的释义性文章](https://medium.com/@MicahZoltu/dc9c8717906)。这些有时候会因为过于抽象而难以量化，因此Micah的文章对一个特定场景一步步地进行解释，并强调1559如何使它变得更好。
- Hasu写了一篇新的[EIP-1559分析](https://insights.deribit.com/market-research/transaction-fee-economics-in-near/)，这篇是关于Near协议的实现。
- 我几周前在ETHOnline做了一次关于[EIP-1559的概述分享](https://www.youtube.com/watch?v=IEQPSJbZsq0)。

 &lt;br/&gt; 

## 后续工作✅

这些内容我在整篇更新里都有提到，但为了更清晰有条理，以下是我们接下来要做的工作：

1. 上线与运行一个有“大型状态”的工作量证明测试网，无论是通过从主网分叉还是重新搭建。

1. 尝试解决围绕交易池管理的潜在问题。[这个文档](https://hackmd.io/unbJUt-HQgStvwmpLPsXsQ)旨在记录实现团队采用的策略。

1. 持续改善围绕1559的工具，使非实现者更容易尝试使用并提供反馈。
2. 继续多项没那么紧急的工作，比如写JSON RPC的EIP，增加参照测试，等。

希望在下一次的更新里，我们已经有办法让想试验1559的人可以在实时网络里领取测试网的ETH，模仿主网的环境🤞

感谢阅读！

[0] 当交易被提交的时候，小费在区块里会被设置成5，并将在下一个区块里增加到10。这笔交易随后会变成无效。



 &lt;br/&gt; 

 &lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[VITALIK：权益证明VS.工作量证明（2020 年11月）]]></title><description><![CDATA[Eth2质押流程已开启，Vitalik再度发文阐释PoW和PoS机制的优劣]]></description><link>https://www.ethereum.cn/why-proof-of-stake/</link><guid isPermaLink="false">https://www.ethereum.cn/why-proof-of-stake/</guid><pubDate>Tue, 10 Nov 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2020/11/06/pos2020.html)



编者注：本文原由Chih-Cheng Liang和Hsiao-wei Wang翻译为繁体中文，由于表达习惯不同，考虑到简体中文读者的阅读体验，ECN对本文进行了简体转化和二次校对。

感谢Chih-Cheng Liang和Hsiao-wei Wang对本文进行[中文翻译](https://vitalik.ca/general/2020/11/06/pos2020_zhTW.html)。

权益证明 (Proof of Stake, PoS) 在区块链安全性上优于工作量证明 (Proof of Work, PoW) 的关键因素主要有三。

 &lt;br/&gt; 

## 在同样成本下可提供更高的安全性

理解这点最简单的方式就是把权益证明和工作量证明摆在一起看，假设每天有$1的区块奖励，攻击此网络所需的成本是多少。

### 基于证明

你可以便宜租到 GPU，所以攻击网络的成本就只是租到足够的 GPU 算力以超过现有的矿工。每产生 $1 的区块奖励，现有矿工的成本将近 $1 (如果成本高于 $1，矿工就会因为无利可图而退出，反之新矿工就会加入进来获取利润)。因此，攻击网络的成本只需要高于 $1/天，而且可能只需要持续几个小时。

**总攻击成本： ~$0.26 （假设攻击 6 小时），且因为攻击者可以收到区块奖励，所以这个数字还有可能压到零**

### 基于ASIC 的工作量证明

ASICs 其实是资本成本：当买进 ASIC 时你预期大概可以用两年，因为它会慢慢耗损或是被性能更好的硬件取代。如果一个链被 51% 攻击了，社群大概会更换 PoW 算法来做出应对，而这时你的 ASIC 就会失去价值。平均而言，挖矿成本约为 1/3 的经常性成本与 2/3 的资本成本 (详见[此处](https://eth.wiki/concepts/proof-of-stake-faqs#what-about-capital-lockup-costs))。因此，每 $1 的区块奖励上，矿工每天会花 ~$0.33 在电力与维护上，并花费 ~$0.67 在他们的 ASIC 上。假设 ASIC 可以用大约 2 年，矿工会需要为单位 ASIC 硬件花费 $486.67。

译注：$486.67 = 365 天 x 2 x $0.67 资本成本

**总攻击成本：$486.67(ASICs)+ $0.08(电力与维护)= $486.75**

译注：此处电力与维护成本也是假设攻击时长 6 小时

话虽如此，值得注意的是 ASICs (相较 GPU) 带来较高的安全性是以中心化的高代价换来的，因此[加入 ASIC 挖矿的门槛也非常高](https://blog.ethereum.org/2014/06/19/mining/)。

### 权益证明Proof of stake

权益证明的成本几乎是百分百的资本成本 (抵押的币)；唯一的营运成本是运行节点的成本。这样人们会愿意为每天每 $1 的区块奖励锁住多少的资金呢？不像 ASIC，抵押的币不会贬值，而且当你不想抵押了你还可以在一段短时间内取回质押金。因此，参与者应该会愿意为同样程度的奖励付出比 ASIC 的情况更高的资本成本。

让我们假设 ~15% 的报酬率足够吸引人们抵押 (这是 eth2 的期望报酬率)。因此每天 $1 的区块奖励会吸引相当于 6.667 年报酬的抵押，或换算为金额为 $2,433 。节点消耗的硬件与电力成本很小，每一千元的电脑可以抵押成千上万的资产，而且每月 ~$100 的电力与网费也算足够。但保守来说，我们假设这些经常性成本是抵押总成本的 ~10%。所以我们只有每天 $0.90 的区块奖励对应到资本成本，因此我们还要把上面的数字减少 ~10%。

译注： 6.667 年 = $1 / (15% 年报酬）； $2,433 = $1/天 x 365 x 6.667

**总攻击成本： $0.90/天  6.667 年 = $2,189**

长期来说，这个攻击成本会预期会更高，因为抵押会变得更有效率，而且人们也会更能接受较低的报酬率。我个人预期这个数字最终会攀升到 $10,000 的程度。

取得这么高程度安全性的唯一“代价”就是在质押期间不方便随意转移质押金。甚至有可能因为人们认知到这些被锁住的币会造成币的价值攀升，所以在社群流通的货币总数，或是能做有生产性投资的资金，都能维持不变。反观 PoW，维持共识的“代价”是[疯狂地损耗大量电力](https://www.theverge.com/2019/7/4/20682109/bitcoin-energy-consumption-annual-calculation-cambridge-index-cbeci-country-comparison)。

### 更高安全性或更低成本？

注意我们有两种方式可以运用这个增加 5-20 倍的每单位成本安全性。一种方式是区块奖励维持现状，并受益于增加的安全性。另一种方式是维持现有程度的安全性，并大量减少区块奖励 (也就是减少共识机制成本的“浪费”)。

两种方式都行。我个人喜欢后者，因为我们下文会看到，比起工作量证明，在权益证明中一个成功的攻击能够造成的伤害更少，而且更容易从攻击中复原。

 &lt;br/&gt; 

## 权益证明更容易从攻击中复原

在工作量证明的系统，如果你的链遭受 51% 攻击，你会怎么做？目前为止，实践上唯一的应对方式一直是“慢慢等，直到攻击者觉得无聊”。但这忽略了一种更危险的攻击叫做“重生点埋伏攻击 (spawn camping attack)”，攻击者可以对链攻击再攻击，明确的目标就是要让链无法再使用。

译注：重生点埋伏是一种游戏术语，在对方玩家阵亡重生的地方埋伏，造成对方玩家一重生就再阵亡，毫无回击能力。

基于 GPU 的系统完全没有防御的办法，而且持续攻击的攻击者可以轻易让一个链永远毫无用处 (或更实际一点，转移到权益证明或proof of authority 权威证明)。实际上，在攻击开始后的前几天，攻击者的成本就会变得非常低，而诚实矿工会离开，因为他们没办法在持续攻击之下取得区块奖励。

在基于 ASIC 的系统，社群有办法应对第一波攻击，但接下来的攻击就会变得很容易。社群可以在第一波攻击之后，硬分叉来更换工作量證明的演算法，也就是把所有 ASIC “变砖”（包含攻击者与诚实矿工的 ASIC）。但如果攻击者愿意承受自己 ASIC 变砖的成本，接下来的情况就和 GPU 的情况一样 (因为还没有足够的时间去为新算法制造与生产 ASIC)，所以在这之后攻击者可以很便宜地持续重生点埋伏攻击。

译注：变砖为电子产品俚语，代表损坏后无法使用，像砖头一样

权益证明的情况，情况则变得非常开朗。针对一些种类的 51% 攻击 (特别指想要推翻已经敲定的区块)，权益证明[共识有内建](https://arxiv.org/abs/1710.09437)的“罚没 (slashing)”机制，大比例的攻击者抵押会被自动销毁 (而且不会销毁到其他人的抵押)。针对其他种类的，更难侦测的攻击 (特别指 51% 合谋截断其他人信息)，社群可以协调一个“少数使用者发起软分叉 minority user-activated soft fork (UASF)”，可以大量销毁攻击者的资金 (在以太坊中，可以透过“消极惩罚 inactivity leak”做到）。不需要采取“硬分叉删除货币”措施。除了 UASF 需要人为协调要选择哪个少数区块，其余事情都是自动化的，只要遵照协定规则去执行即可。

译注：少数区块 minority block 是小于 51% 抵押总数的验证者决定出来的区块

因此，对链的第一次攻击就会耗损攻击者几百万美元，而且社群可以几天内马上站稳脚步。第二次攻击仍然会花费攻击者数百万美元，因为他们需要买新的币去取代旧的已经烧毁的币。再攻击第三次，就会再烧更多的数百万美元。局面极为不对称，而且优势并不会在攻击者那边。

 &lt;br/&gt; 

## 权益证明比 ASIC 更去中心化

基于 GPU 的工作量证明还算合理地去中心化，因为取得 GPU 不会太难。但前面提过，基于 GPU 的挖矿难以满足“在攻击之下的安全性”这个准则。另一方面，基于 ASIC 的挖矿，则需要数百万美元的资本 (而且如果你的 ASIC 是买来的，多数时候，制造商会占更多便宜)

这个资本门槛会是回答“权益证明代表富者更富”这个常见论点的答案：ASIC 挖矿也是富者更富，而且这个局面下，富者更占据优势。权益证明的最低抵押门槛在相比之下算是很低，而且许多一般人更有机会进入。

译注：就文章完成当下 440 USD/ETH 的价格来看，最低抵押门槛大概是 9.3 万人民币。

进一步说，权益证明更能抵抗审查。GPU 挖矿和 ASIC 挖矿很容易侦测，他们需要大量电力消耗、昂贵硬体采购、及大型厂房。另一方面，权益證明可以跑在一台不起眼的笔电上，甚至也可以透过 VPN 做。

 &lt;br/&gt; 

## 工作量证明可能的优势

我认为 PoW 有两大主要优势，但这些优势其实有相当的限制性。

### 权益证明更像个“封闭系统”，长期而言财富更加集中

在权益证明中，如果你有一些币，你可以抵押那些币，并且获得更多同种类的币。而在工作量证明中，你总是可以获得更多币，但你需要一些外部资源来达成。因此，人们会认为长期而言权益证明的币的分配会更集中。

我的回应是，在 PoS 中，报酬一般而言会很低 (所以验证者的获利也会低)。在 eth2，我们预期验证者的年收益率会相当于总 ETH 供给量的 ~0.5-2%。而且更多验证者抵押，利率会更低。因此，可能要花个一世纪，整个资产集中程度才会翻倍，而且在这样的时间跨度之下，其他促进分配的压力 (人们想花他们手上的钱，分配资产到慈善或他们自己的子孙等等) 比较可能会占上风。

### 权益证明需要“弱主观性(weak subjectivity)”而工作量证明不需要

关于“弱主观性”的概念可以看这个[原始介绍](https://blog.ethereum.org/2014/11/25/proof-stake-learned-love-weak-subjectivity/)。本质上，就是节点在第一次上线，或是在离线很长一段时间之后 (数个月) 再次上线，这个节点必须要透过第三方的资源，才能决定正确的链头在哪。这个第三方可以是他们的朋友、可以是交易所或区块链浏览器、或是客户端开发者本身、又或是其他角色。 PoW 则没有这样的要求。

然而，这可能是一个很弱的要求。事实上，使用者本身就已经必须对客户端开发者、或“社群”有这种程度的信任。最起码，使用者必须信任某个人 (通常是客户端开发者) 来告诉他们协议是什么，这个协议曾经经历过什么更新。这在任何软件应用中都无法避免。因此，PoS 的边际信任成本仍然很低。

但就算这些风险最终会发生，对我而言 PoS 系统仍然利大于弊：更高的效率、应对攻击并从攻击中复原的能力更强。

 &lt;br/&gt; 

参考来源：我之前有关权益证明的文章

- [Proof of Stake FAQ](https://eth.wiki/concepts/proof-of-stake-faqs)
- [A Proof of Stake Design Philosophy](https://medium.com/@VitalikButerin/a-proof-of-stake-design-philosophy-506585978d51)

 &lt;br/&gt; 

 &lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0验证者宝典]]></title><description><![CDATA[Eth2主网最早将于12月1日创世，你,准备好了吗？]]></description><link>https://www.ethereum.cn/eth2-validator-handbook</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-validator-handbook</guid><pubDate>Thu, 05 Nov 2020 00:00:00 GMT</pubDate><content:encoded>## ETH2 IS COMING！

根据Ethereum Blog最新通告，以太坊2.0规范v1.0已发布，Eth2最早创世时间定于1606824000，即北京时间2020年12月1日20:00。

主网存款合约地址为：0x00000000219ab540356cBB839Cbe05303d7705Fa

注意，请勿直接向存款合约地址转账，需前往Eth2 Launchpad根据引导进行质押操作和客户端安装。 Launchpad官方网址请认准：launchpad.ethereum.org

至少在12月1日前一周需要有16384名验证者进行质押(即至少存入 524,288 ETH)，否则顺延创世时间，即验证者的数量达到16384之后七天创世。大家可以阅读Ben Edgington的文章[《信标链的创世》](https://news.ethereum.cn/genesis/)了解创世过程。

 &lt;br/&gt; 

## Eth2质押那些事

Eth2测试网长跑结束，Eth2新征程正式开启。目前存款合约已部署，关于以太坊2.0质押那些事儿大家知多少？不要慌，ECN特此整理了Staking合辑，帮助大家抱佛脚，一起来回顾一下吧👀

 &lt;br/&gt; 

### 验证者教程系列

1. ECN自制超详细中文视频教程，包含环境配置、Lighthouse客户端安装以及质押操作：

   《[如何成为Spadina测试网验证者](https://www.bilibili.com/video/BV1d5411L7k9/)》

2. 验证者硬件要求以及Launchpad操作指引：

   《[如何成为Eth2 Medalla测试网验证者](https://news.ethereum.cn/guide-becoming-a-validator/)》

3. EthFANs

​    《[使用 Ubuntu 和 Prysm 参与 Medalla 测试网](https://mp.weixin.qq.com/s/vdbg2bovhaZ8_Y_C7IoktQ)》
​    《[使用 Nethermind 和 Lighthouse 运行以太坊 2.0 测试网的验证者](https://mp.weixin.qq.com/s/InbElsTYiHZRGGogx4bZMw)》

 &lt;br/&gt; 

### 通识系列

《[了解Eth2质押程序](https://news.ethereum.cn/staking：了解eth2质押程序/)》

《[Eth2 Staking系列：开篇](https://news.ethereum.cn/validated-staking-on-eth2-0/)》

《[Eth2 Staking系列：激励篇](https://news.ethereum.cn/validated-staking-on-eth2-1-incentives/)》

《[Eth2 Staking系列：共识机制篇](https://news.ethereum.cn/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)》

《[Eth2 Staking系列：分片共识](https://news.ethereum.cn/eth2-staking-sharding-consensus/)》

《[Eth2 Staking系列：密钥篇](https://news.ethereum.cn/eth2-staking-keys/)》

《[Eth2 Staking系列：客户端多样性](https://news.ethereum.cn/validated-why-client-diversity-matters/)》

[《](https://mp.weixin.qq.com/s?__biz=MzIwODA3NDI5MA==&amp;mid=2652529508&amp;idx=1&amp;sn=a0be35d5f6c3d5cdf86c063e5138ff2b&amp;scene=21#wechat_redirect)[Eth2 存款过程](https://news.ethereum.cn/ethereum-2-0-and-depositing-process/)》

《[什么是以太坊 2.0 测试网？如何参与？](https://mp.weixin.qq.com/s/nYWJtlA1Td_M-TuB636wZw)》

《[Eth2 验证者快速启动器发布](https://mp.weixin.qq.com/s/jkXq-akj_8sQcDJkoCYDJg)》

 &lt;br/&gt; 

### 其他相关资源

Eth2 Launchpad

https://launchpad.ethereum.org

Eth2浏览器

- [Beaconcha.in](https://beaconcha.in/)
- [Eth2Stats](https://eth2stats.io/)
- [BeaconScan](https://beaconscan.com/)

Eth2客户端

- [Prysm](https://prysmaticlabs.com/): Go语言客户端
- [Lighthouse](https://lighthouse.sigmaprime.io/): Rust语言客户端
- [Teku](https://github.com/ConsenSys/teku): Java语言客户端
- [Nimbus](https://nimbus.team/): Nim语言客户端

其他学习资源

- [ECN Eth2知识库](https://eth2.ethereum.cn/):（路线图/术语库/客户端/FAQ）
- [ECN Eth2相关进展](https://news.ethereum.cn/category/eth2/)
- [Ethfans](https://ethfans.org/)
- [以太坊官网 (英文)](https://ethereum.org/en/eth2/)

 &lt;br/&gt; 

## Eth2 Launchpad

Eth2 Launchpad (launchpad.ethereum.org) 旨在帮助和指引用户安全便捷地完成质押操作，并且实时更新网络质押进度数据，但目前尚不支持多语言版本，因此我们将其中有价值的部分进行了汉化，以供参考。

 &lt;br/&gt; 

### Overview：概述部分

这个部分提供了一些基本的背景知识和注意事项，也是进行质押之前的必经入口，包括验证者职责和风险、单向质押、密钥生成和管理等。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/kD3dRTr/p1.png&quot;/&gt;&lt;/center&gt;

 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jJBC9dK/p2.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/rQ5wnQt/p3.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QcfHS3h/p4.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/80v37cG/p5.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6DvjM6F/p6.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/DGjBqCj/p7.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/THv0Yks/p8.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/f4nwtDn/p9.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt; 
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/0scnqmD/p10.png&quot;/&gt;&lt;/center&gt;







阅读完本部分之后，大家就能进入正式的质押操作阶段了，后续具体步骤包括选择Eth1客户端、生成验证者密钥、上传验证者文件、连接钱包以及转账，可参见中文视频教程《[如何成为Spadina测试网验证者](https://b23.tv/BV1d5411L7k9)》。

##    &lt;br/&gt; 

## 验证者常见问题  

**1.  什么是 “验证者” (validator)？**

验证者是参与以太坊 2.0协议共识的实体。用大白话来说，即运行特定计算机程序的人。该程序会提议并证明新的区块，使之能添加到区块链上。  

换言之，你可以将验证者看作新区块的投票者。一个区块获得的票数越多，被添加到区块链上的可能性就越大。重要的是，验证者的投票权重由其质押余额决定。  

**2. 什么是存款合约 (deposit contract)？**

你可以将存款合约理解为以太坊账户与ETH 2.0验证者之间的资金转移。存款合约的状态注明了谁为质押者、谁为验证者、质押金额、以及谁有权限提款。  

**3. 为什么验证者需要质押存款？**

验证者需要质押存款，这样才能对他们的不当行为进行惩罚。换言之，为了保证这些验证者都遵守协议，他们的不当行为需要承担一定经济后果。  

**4. 验证者需要质押多少ETH?**

验证者在开始维护网络之前，需要质押32个ETH。这32个ETH就是验证者的初始余额。  

**5. 质押多于32个ETH会有什么好处吗？**

没有，单个验证者存入超过 32 ETH 不会获得任何优势。将质押的最大ETH数额限制到32个有助于提高去中心化程度，因为它防止任何一个验证者有过大的投票权重。请记住，验证者的投票权重取决于其质押余额。  

**6. 我可以暂停运行 (而非退出网络) 我的验证者节点几天，然后再重新开始吗？**

可以的，但正常情况下你会损失一定数额的ETH，大概相当于你在那段时期赚取的ETH数量。换言之，如果你赚取了大约0.01个ETH，那么你将损失大约0.01个ETH。  

**7. 我应该什么时候补充我的验证者余额？**

这个问题的答案很大程度取决于你余额还有多少ETH。如果你的余额接近16个ETH的话，你当然应该再存入：这是为了确保你不会被验证者集踢出 (如果你的余额低于16个ETH的话，你会被自动踢出)。如果你的余额接近31个ETH，你大概不需要再存入ETH以达到32个。  

**8. 我什么时候可以提款，退出与提款有什么区别？**

你可以用你的验证者节点签名一条自愿退出信息以示意你想要停止验证。 但是请记住，在阶段0里，一旦你退出了就回不去了。 你不能再激活你的验证者节点了，在阶段1.5之前你也不能转移或提取你的资金 (这意味着在阶段1.5之前你都无法访问你的资金)。  

 &lt;br/&gt; 

### 验证者职责篇 

**1. 验证者保持活跃和诚实会有什么激励吗？**

除了离线会被罚款外，验证者的恶意行为也会遭受惩罚，例如投票给无效或冲突的区块。另一方面，如果验证者提议或证明的区块被打包到链上，他们就会得到奖励。  

基本规则如下：帮助网络达成共识的行为会得到奖励妨碍共识达成的无意行为 (或不作为) 会招致轻度惩罚；恶意行为会招致严重惩罚 (也称为罚没)  

换言之，验证者在最大化他们的奖励时就是在为整个网络带来最大的裨益。  

**2. 奖励/惩罚是如何发放的？**

请记住，每个验证者都有自己的余额——初始余额会在存款合约里显示。以太坊网络规则会基于验证者的履职情况定期更新其余额。换言之，奖励与惩罚会随着时间反应在验证者的余额中。  

**3. 奖励/惩罚多久更新一次？**

大约每6.5分钟(即一个epoch)更新一次。在每个epoch里，网络都会评估每个验证者的表现，并相应给予奖励或惩罚。  

**4. 奖励/惩罚金额有多大？**

这个问题很难回答，因为在计算时需要考虑很多因素。理论上，影响验证交易所得奖励的最主要因素是在网络的质押总额(即，验证者总数)。根据质押总额，验证者的最高年收益率可能在 2% 至 20% 之间。  

在验证者总数固定的情况下，奖励/惩罚主要取决于验证者的余额规模 —— 如果提供证明的验证者的余额越高，验证者收到的奖励/惩罚金额就越高；余额越低，奖励/惩罚就越低。  

请注意，这种动态机制是以不那么明显的方式运作的。要想了解其具体原理，你先要理解有效余额(effective balance) 这个概念。如果你对这个概念还不熟悉，我们建议你阅读[这篇文章](https://www.attestant.io/posts/understanding-validator-effective-balance/)。  

**5. 为什么奖励取决于网络中的验证者总数？**

区块奖励是根据质押在网络中的ETH总量按比例动态计算的。简单来说，如果质押的ETH总量很少，奖励（利率）就很高，但是随着质押的ETH增加，每个验证者所获得的奖励（利率）就会降低。  

为什么要用这种动态调整？尽管本文不会深入其中的细节，但一个主要原因是网络的良好运转需要一定数量的验证者来维持 (ETH总质押量也是)。因此，为了鼓励更多的验证者参与其中，在达到必要的验证者数量前维持高利率显得尤为重要。  此后，我们仍然鼓励更多的验证者参与 (越多验证者参与意味着网络的去中心化程度越高)，但这不是必要的 (因此利率可能会下降)。  

**6. 如果离线，验证者会遭到什么惩罚？**

这视情况而定。除了[有效余额的影响](https://www.attestant.io/posts/understanding-validator-effective-balance/#the-impact-of-effective-balance-on-validating)外，还需要主要以像两种重要情况：

1. 如果绝大多数（2/3）验证者都在线，离线招致的惩罚会较低，因为有足够多的验证者在线，可以实现区块的最终确定性。这是预料之中的情况。 

2. 如果有超过 1/3 的验证者同时离线，离线惩罚就会较高，因为网络无法继续实现区块的最终确定性。这种属于不太可能发生的极端情况。

请注意，如果是第二种 (不太可能的) 情况，离线验证者在 21 天内损失的ETH可高达 50% (16 ETH)。21 天之后，这些验证者就会被逐出验证者池。这样一来，网络就可以恢复正常，开始达成区块的最终确定性。  

**7. 诚实验证者需要在线多长时间才能实现盈利？**

总的来说，只要验证者的在线时间超过 50% ，就能实现盈利。这意味着验证者不需要使用后备客户端或多余的网络连接来达到极长的在线时间，因为离线的后果并没有那么严重。  

**8. 作恶的验证者会遭受什么惩罚？**

同样视情况而定。恶意行为 (例如，投票给无效或有冲突的区块) 会让验证者遭到罚没。在早期最低罚没金额是0.25 ETH ，之后会恢复至1 ETH的低限，但是如果其他验证者在同一时间也遭到罚没，这一金额会增加。这样设计的目的是尽可能减少验证者因无心之失而蒙受的损失，但同时有力防止协同攻击。  

**9. 罚没是什么？**

罚没有两个作用：1) 大幅提高攻击 ETH 2.0 的成本，使攻击无利可图；2) 通过检查验证者是否履行其职责来防止他们偷懒。  

对验证者进行罚没，指的就是如果有验证者被证明作恶，他们的部分或全部权益就会被销毁。遭到罚没的验证者无法继续参与网络的共识机制，会被强制退出。  

 &lt;br/&gt; 

### 密钥篇  

**1. 签名密钥 (signing key) 丢失了会有什么后果？**

如果签名密钥丢失，验证者将无法继续提议或证明区块。慢慢地，验证者的余额将逐渐减少，因为验证者由于无法参与共识流程而受到惩罚。当验证者的余额减少至16 ETH时，系统便会自动将其逐出验证者池。  

然而，这并不意味着验证者要失去质押的所有ETH了。假设验证者是通过[EIP2334](https://eips.ethereum.org/EIPS/eip-2334) (根据默认的引导流程) 生成其签名密钥，那么验证者总是可以根据提款密钥重新计算其签名密钥。  

然后就可以凭借提款密钥提出那16个ETH了，大概要一天后提款才能到账。请注意，如果同一时间退出或被逐出网络的验证者太多了，等待时间将会更长。  

**2. 提款密钥 (withdrawal key) 丢失了会有什么后果？**

如果提款密钥丢失了，验证者将无法访问质押的ETH了。因此，建议验证者使用助记词 (mnemonics) 来创建提款密钥，作为备份。如果验证者是通过此Launchpad的引导流程加入的，其提款密钥将默认通过助记词创建。  

**3. 提款密钥被盗取了会如何？**

如果提款密钥被盗，盗窃者可以转移验证者的余额，但只能在验证者退出之后才能进行此操作。如果盗窃者没有签名密钥，那么其无法强制验证者退出。这时验证者先凭借签名密钥快速退出验证者节点，然后在盗窃者之前凭借提款密钥将资金转走。  

**4. 为什么要有两个密钥?**

简而言之，就是为了安全。签名密钥必须保证随时可用。因此，签名密钥必须保持在线。由于保存在线上的东西尤其容易受攻击，因此不建议同时用签名密钥进行提款。  

 &lt;br/&gt; 

 &lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权</content:encoded></item><item><title><![CDATA[通往L2互操作性的道路]]></title><description><![CDATA[StarkEx 2.0 于11月推出，条件式交易为L2互操作性提供更多的可能。]]></description><link>https://www.ethereum.cn/the-road-to-l2-interoperability</link><guid isPermaLink="false">https://www.ethereum.cn/the-road-to-l2-interoperability</guid><pubDate>Tue, 03 Nov 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [StarkWare](https://medium.com/starkware/the-road-to-l2-interoperability-718ff69ec822)

 &lt;br/&gt; 

# 摘要

- L2互操作性意味着用户可以以尽可能小的L1摩擦在L2系统之间转移资金。
- 本文所提议的L2互操作性解决方案基于我们此前建议[使用的条件式交易密码学基元](https://medium.com/starkware/starkexchange-fast-withdrawals-using-cookie-jars-88eefea6a11a)。
- StarkEx 2.0（于2020年11月推出）将使用链上条件式交易，提供L2-L1之间的互操作性（即快速提款）。
- StarkEx 3.0 (于2021年2月推出)，将使用链下条件式交易，提供在StarkEx系统之间的L2-L2互操作性。

 &lt;br/&gt; 

# 背景

Layer-2扩容解决方案发展迅速。以太坊主网上已经有多种有效性证明系统，还有一些欺诈证明系统也推出了测试网。L2解决方案虽然提供扩容性，但会带来一定的代价：我们完全在L1上操作所具有的一些优势可能会遭受损害。

我们并不希望某个L2解决方案一家独大：不同的App对扩容性的需求各不同，因此可以根据自身需求选择适合的L2解决方案。接下来，让我们给大家解释两个重要的术语：

- **互操作性(Interoperability)**：允许用户在app1 (初始环境) 和app2 (目标环境)之间高效地转移资金。
- **可组合性 (Composability)**：能够将app1…appn包含的操作组合成一次交易以发送。
  注意：可组合性将在之后的一篇文章中详细讨论。

除了上面所提到的定义之外，我们还需要着重解释什么是“条件式交易 (Conditional-Tx)”，这一重要基元让互操作性成为可能。

## 条件式交易

条件式交易是一个由密码构建成的区块 (我们在某篇文章中首次[讨论](https://medium.com/starkware/starkexchange-fast-withdrawals-using-cookie-jars-88eefea6a11a)过这一概念)，旨在为无需许可的区块链实现互操作性。条件式交易指某笔交易生效与否，取决于某些事件是否发生 (如支付有无发生，状态有无改变)。从概念上来讲，我们首先在初始环境设定一个条件式交易，一旦特定的条件在另一个环境 (即目标环境) 中得到满足，该交易便生效。

 &lt;br/&gt; 

# 循序渐进

尽管目前没有一个更好的方案，用户总是能够将资金从初始L2上转移至L1上，再从L1上转移至目标L2上。这个简单粗暴的方法既慢又贵，并且随着用户对互操作性的需求增加会越来越慢，越来越贵。

我们需要做得更好，为此，我们特地做了以下计划，循序渐进地实现L2互操作性。

### 阶段I：StarkEx (L2) → Ethereum (L1) —快速提款

“[快速提款](https://medium.com/starkware/starkexchange-fast-withdrawals-using-cookie-jars-88eefea6a11a)”(Fast Withdrawals) 可以解决用户需要快速地从L2系统StarkEx中提款至L1的问题。通过快速提款，用户不仅可以将资金转到自己的L1地址上，还可以转到L1的任意目标地址中，比如Compound、Aave等。重要的是，这允许用户在进行提款时以“区块时间”来衡量，而与StarkEx对批量交易进行证明的频率无关。

用例：Alice想要从她在L2上的 dYdX账户转移1个ETH至她的L1地址上。

**参与者**：

- Alice (在L2上持有ETH的用户)
- LP (在L1上持有资金的流动性提供者)
- 在初始环境中的StarkEx运营者 (在上述的例子中即dYdX)


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NS71xX0/image.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;图1：快速提款流程&lt;/center&gt;

流程：(1) Alice给LP发送一笔价值为1 ETH的条件式交易 (还要加上给LP的手续费)，条件为LP需向Alice的L1地址上转1 ETH；(2) LP在L1上转了给Alice之后，条件式交易生效，然后 (3) LP将该条件式交易提交给运营者，随后被打包进下一批等待被证明的交易中； (4) 等到这些证明被提交至L1并得到验证后，LP在L2的账户便收到了Alice的转款。

定期再平衡：LP需要定期地拿出他们在L2账户中逐渐积累的资金，补充他们在L1账户中逐渐消耗的资金。

### 阶段II: StarkEx (L2) → StarkEx (L2)

最初的StarkEx部署将各自托管一个应用程序。在本阶段，我们希望用户能够在这些不同的应用程序之间快速地转移资金。这很像快速提款，我们希望最小化用户的链上成本，以及省去他们等待下一批交易打包证明的时间。

用例：Alice想要从她的dYdX账户 (L2_1) 向她的DeversiFi账户 (L2_2) 转1个ETH。

**参与者：**

- Alice (在L2_1上持有ETH的用户)
- LP (在L2_2上持有资金的流动性提供者)
- 初始环境上的StarkEx运营者 (在上述的例子中即dYdX)




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/sHdKBBV/2.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;图2：链下条件式交易流程&lt;/center&gt;

流程：(1) Alice在L2_1上给LP发送一笔已签名的价值为1 ETH的条件式交易 (还要加上给LP的手续费)，条件为LP需向Alice的L2_2账号转1 ETH；(2) LP向Alice的L2_2账号上转钱之后；(3) 该笔支付被打包进一批交易中，随后被L2_2的运营者证明，并在L1上被验证。这批交易发布在L1上并被接受后，Alice发送的条件式交易便生效；(4) LP将该笔条件式交易提交至L2_1的运营者中，打包进下一批等待被证明的交易中；(5) 一旦这批在L2_1上交易被证明且提交至L1得到验证之后，该LP在L2_1上的账户便收到了Alice的转款。

定期再平衡：LP需要根据L2_1和L2_2这两个系统之间的资金流向，定期地再平衡两者之间的资金。

在这一阶段，支持互操作性的主要成本将是给LP们支付的资本成本；需要注意的是，他们的资本成本经过非常有限的一段时间便回笼，也就是从向用户提供流动性到运营者打包处理下一批交易这个时间。我们预测这个时间开始时需要几个小时 (大部分时候)，然后随着(所有StarkEx应用中的)吞吐量不断增加，这个时间会减少至证明生成时间 (几分钟)。

## 阶段III: L2 → L2

在阶段2的基础上进行扩展，允许资金在任意的L2解决方案之间转移，无论是有效证明系统还是欺诈证明系统 (如Optimistic Rollup、Plasma)。这里需要提醒的是，Optimistic Rollup在使用LP来支持互操作性时，会面临其本身固有的资本效率低下的劣势(参考[此处](https://medium.com/starkware/the-optimistic-rollup-dilemma-c8fc470ca10c))。

 &lt;br/&gt; 

# 信任模式

现在归纳一下我们所依赖的信任模式。

**对用户来说**
完全去信任的。

**对LP来说**
LP需要信任运营者 (初始环境中的)，即相信其会打包他们的有效条件式交易，也就是说在处理过程中不会审查他们。这种信任可以通过几种方式进行消除。

如果运营者没有及时处理LP的条件式交易，LP可以：

- 抗审查：提交被审查的条件式交易到链上的运营者的智能合约中，这会冻结运营者，使其之后提交的证明都无法得到处理。

- 安全抵押：提交被审查的条件式交易到链上的一个安全抵押智能合约中，从该合约中直接接收资金。

 &lt;br/&gt; 

# 发展路线图

- 阶段1将在**2020年11月**发布于以太坊主网 (即**StarkEx2.0**)，阶段2将于**2021年第一季度**发布 (即**StarkEx 3.0**)。已经有一批LP排着队等待提供服务了。

- 阶段3将紧随其后。我们预测不同的L2解决方案上的应用之间也会有进行互操作的需求，并且渴望与其他L2解决方案讨论互操作性的实现。

 &lt;br/&gt; 

 &lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（2020/10/31]]></title><description><![CDATA[Blst库审计工作进行中，存款合约部署指日可待]]></description><link>https://www.ethereum.cn/wnie2-2020-10-31/</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-10-31/</guid><pubDate>Mon, 02 Nov 2020 00:00:00 GMT</pubDate><content:encoded># ETH2进展更新（2020/10/31）



来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_201031)

作者 | Ben Edgington

 &lt;br/&gt; 

# 本期推荐

本期为大家精选了三个不可错过的访谈和播客，都非常不错。

- [Bankless](http://podcast.banklesshq.com/)的这两期播客非常有价值，值得一听：
  - Danny Ryan AMA：[Youtube](https://www.youtube.com/watch?v=JOgowAlKSqw)/[播客](http://podcast.banklesshq.com/eth-20-ama-with-danny-ryan)
  - Vitalik：以太坊设计理念 (主要谈及Eth2) [Youtube](https://www.youtube.com/watch?v=-R0j5AMUSzA)/[播客](http://podcast.banklesshq.com/35-designing-ethereum-vitalik-buterin)
- 最近的EthOnline涌现了许多干货，我个人尤其欣赏来自Superphiz的《[白话Eth2和Staking](https://www.youtube.com/watch?v=tpkpW031RCI&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=10)》，还有一个[网页](https://unvetica.com/ethonline/)提供了相关资源

 &lt;br/&gt; 

# 阶段0：信标链

我之前对Eth2存款合约的发布非常乐观，我们确实也准备好了😝。在上面的播客节目中，Danny称存款合约的部署稍微往后延迟了一些，先完成[Blst密码库](https://github.com/supranational/blst)的审计。

我不清楚为什么这会导致部署延期，因为[存款合约](https://github.com/ethereum/eth2.0-specs/tree/dev/solidity_deposit_contract)和官方[存款工具](https://github.com/ethereum/eth2.0-deposit-cli)都没有使用到Blst库🤷。在最近的开发者会议中，[Danny说](https://news.ethereum.cn/wp-admin/post.php?post=2627&amp;action=elementor#Open-discussion)**审计进展顺利，有希望在这周完成，之后我们就可以进入eth2上线流程了。**

并不是所有人都认为我们已经准备好部署存款合约了。对此Jeff Coleman围绕工具方面提出了[合理的观点](https://twitter.com/technocrypto/status/1318696378063851521)。至于客户端实现，作为Teku客户端的负责人，我承认还有一些细节仍然需要进行优化，但是没有什么大问题让我夜不能寐。

**每个打算成为质押者的用户都需要对风险和收益做到心中有数，并且有一个心理预期**。如果读者在早期对个人质押缺乏信心，尽管观望一下，这么做不会有什么损失。

## Medalla测试网

### Medalla现状

在完美运行两个月之后，截至本文发布Medalla测试网已经19天没有敲定区块了，要继续敲定区块，我们需要2/3的验证者上线，并且进行正确操作。在Zinken测试网上线之后 (短期测试网)，Medalla的参与度大幅下降。

**这就是无激励测试网的问题：随意离开网络不需要成本。**

当然了，网络还在持续运行中，长期的未敲定状态使得客户端团队能够发现内存和CPU方面的问题。我们针对Teku进行了一些优化，我的验证者运行状态十分不错。其他的客户端也在不断进行优化。

Medalla测试网的参与度目前在30%-60%之间波动，其中很大的一个原因可能在于大多数人所使用的客户端性能不稳。

**请大家使用[不同的客户端](https://news.ethereum.cn/wp-admin/post.php?post=2627&amp;action=elementor#Staking-stuff)！**

大家可能会想“有必要吗”？我严重怀疑我们会在主网中碰到长期的未敲定问题，大家都使用真实的ETH，并且质押金额巨大，验证者们会更加勤快地使用客户端。如果某个客户端产生问题，用户可以切换到另一个客户端。

所以如此说来，眼下的Medalla测试网十分不现实，并且耗费过多精力改善其当前的状态也是无济于事的。但是有些努力仍然是有必要的：性能改善会反馈到整体优化中。Status团队的Jacek发推特[阐释](https://twitter.com/jcksie/status/1321366361348673536)了Nimbus客户端遇到的挑战及其收获。

话说回来，**在接下来的几天内没有参与的验证者会由于怠工惩罚 (inactivity leak) 被逐渐驱逐出网络，这能够帮助我们重新开始敲定区块并回到正轨。**如果读者有暂停运行的验证者，请选择继续运行或是[退出网络](https://twitter.com/superphiz/status/1322165640006901761)。此处是一个自愿退出网络的教程，目前的客户端工具不太好用，Yorick Downe提供了一种更简捷的方法。

### Medalla数据竞赛

以下是一些[Medalla数据竞赛](https://ethereum.org/en/eth2/get-involved/medalla-data-challenge/)的参赛者 (目前已经截止，感谢Superphizh[制作本列表](https://www.reddit.com/r/ethstaker/comments/jieyg0/ethereum_studymaster_quiz_10_medalla_data/))。我还没有全部都过一遍，但一眼扫过去，我建议大家请勿针对某个特定的客户端实现轻易下结论。

一方面来说，我们无法在网络中可靠地辨别大多数；另一方面，所有地客户端都在Medalla运行期间持续进行优化和开发，目标也在不断地变化。

- [Proper Proposers and Skipped Slots: A Ranking and Segmentation Study of Validator Behavior](https://crypto.omnianalytics.io/2020/10/20/what-makes-a-top-tier-validator) (对验证者行为的排名和分类研究)
- [Eth2 Medalla – a data driven deep dive](https://eth2data.github.io/) (从数据着眼Eth2 Medalla测试网) (Paul Hauner已经对此给出了[反馈](https://twitter.com/paulhauner/status/1320895775954464769))
- [Visualizing whales in the rough seas of Medalla, the Ethereum 2 testnet](https://medium.com/coinmonks/visualizing-whales-in-the-rough-seas-of-medalla-the-ethereum-2-testnet-f748592fc08a) (将Medalla测试网中的“巨鲸”可视化)
- [Medalla: Exploring the data behind Eth2](https://github.com/dOrgTech/MedallaDataChallenge/blob/master/medallaClientSlashingExploration.ipynb) (从Medalla观察Eth2背后的数据)
- [The Ethereum 2.0 Beacon Block Data Schema and Visual Documentation](https://blockblockdata.github.io/medalla-data-challenge/a001/the_ethereum_2_beacon_block_data_schema_and_visual_documentation.html) (以太坊0信标区块数据架构以及可视化文档)
- [An Analysis of Data Propogation Latencies in Ethereum 2.0 Medalla Testnet](https://blockblockdata.github.io/medalla-data-challenge/a002/an_analysis_of_data_propogation_latencies_in_ethereum2_medalla_testnet.html)  [(](https://blockblockdata.github.io/medalla-data-challenge/a002/an_analysis_of_data_propogation_latencies_in_ethereum2_medalla_testnet.html)以太坊0 Medalla测试网中的数据广播延迟分析)
- [Clustering and Profiling Time Epochs in Ethereum 2.0](https://blockblockdata.github.io/medalla-data-challenge/a003/clustering_inclusion_delay_analysis.html) (以太坊0中的epoch分析)
- [Comparing Eth2 Clients on the Medalla Network](https://pintail.xyz/posts/medalla-client-comparison/) (从Medalla测试网对比各个Eth2客户端)
- [The Medalla Network Under Stress](https://pintail.xyz/posts/medalla-network-stress/) (压力状态下的Medalla网络)
- [Medalla Participation Rates: A Validator Taxonomy](https://pintail.xyz/posts/medalla-validator-taxonomy) (Medalla参与率：验证者分类)
- [Attesting the Health of Ethereum 2.0](https://www.splunk.com/en_us/blog/tips-and-tricks/attesting-the-health-of-ethereum-2-0.html) (评测以太坊0的健康状况)

## 工具

[Bitquery](https://bitquery.io/)已经发布一个开源的[Eth2浏览器](https://bitquery.io/blog/eth2-explorer-api-widgets)，内嵌小部件以及GraphQL API。看起来不错，我会继续探索。

同样是浏览器领域，[Beaconscan](https://beaconscan.com/)邀请你加入[Guild Warz](https://beaconscan.com/guildwarz)组队在Medalla测试网中提议区块以赢取DAI奖励。现在还可以加入哦！

 &lt;br/&gt; 

# 路线图

前几天出现了一些对Eth2发展路线图的可视化展示。

首先，先[提醒](https://twitter.com/meeseeking/status/1321452219506503681)一下大家Eth2的开发工作并不遵从某种次序，而是在所有阶段中并行进行：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/tCFcpCD/201030-phases.png&quot; /&gt;&lt;/center&gt;

&lt;center&gt;图片来自：&lt;a href=&quot;https://twitter.com/meeseeking/status/1321452219506503681&quot;&gt;Meeseeking&lt;/a&gt;&lt;/center&gt;




其次，我们再来看看这些工作如何结合在一起：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dmCc5hP/image.jpg&quot; /&gt;&lt;/center&gt;

&lt;center&gt;图片来自：&lt;a href=&quot;https://twitter.com/trent_vanepps/status/1321936246332104705&quot;&gt;Trent Van Epps&lt;/a&gt;&lt;/center&gt;





 &lt;br/&gt; 

# 生态资源

Justin Drake撰写了一篇记录[Eth2 BLS签名历史的文章](https://www.reddit.com/r/ethfinance/comments/jghide/daily_general_discussion_october_23_2020/g9sz7jm/)。BLS签名技术是近几年来主要的密码学创新，使得Eth2的雄图伟略有望成为现实。我也撰文表达了[对曲线BLS12-381的尊崇](https://hackmd.io/@benjaminion/bls12-381)。

## Ethonline

以下是刚刚结束的EthOnline中一些关于Eth2和以太坊未来发展的演讲，干货满满：

- [Catalyst – an Eth1 engine for Eth2](https://www.youtube.com/watch?v=4jFMYU9FG8A&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=2), Guillaume Ballet
- [A Developer’s Guide to Account Abstraction](https://www.youtube.com/watch?v=tKPo-Y74ces&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=3), Sam Wilson &amp; Ansgar Dietrich
- [The Future of Solidity](https://www.youtube.com/watch?v=-aSMCa4O7mg&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=4), Alex Beregszaszi
- [EIP 1559 Overview](https://www.youtube.com/watch?v=IEQPSJbZsq0&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=6), Tim Beiko
- [Secret-shared validator infrastructure for Eth2.0](https://www.youtube.com/watch?v=awBX1SrXOhk&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=9), Aditya Asgaonkar
- [Intro to Eth2 &amp; Staking for Beginners](https://www.youtube.com/watch?v=tpkpW031RCI&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=10), Superphiz
- [Eth 2 sweet tooth: rollups and date-a availability](https://www.youtube.com/watch?v=q42NZw6Gle0&amp;list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0&amp;index=11), Ben Jones

此处是[YouTube播放列表](https://www.youtube.com/playlist?list=PLXzKMXK2aHh4wSCFiW2naDgq3tK-WjSR0)，以及[推文总结](https://twitter.com/ETHGlobal/status/1321105079840215040)

## EthStaker

在[第十次EthStaker社区会议](https://www.youtube.com/watch?v=0xxTzEyiv3w)中，来自[Blox Staking](https://www.bloxstaking.com/)的Alon Muroch谈及了他们如何通过客户端构建完全非托管性的质押服务。说真的，这件事非常酷😉。其他的质押服务都需要对用户的签名密钥进行托管，甚至提款密钥也需要被托管。Blox的去信任化池式质押则都不需要，用户可以从始至终保留对密钥的控制权。

 &lt;br/&gt; 

# 研究工作

Vitalik就一个未解决的问题寻求解决方案：[通过错开分片区块时间达到亚秒级延迟，同时兼容激励](https://ethresear.ch/t/open-problem-incentive-compatible-sub-second-latency-via-staggering/8171?u=benjaminion)。如何从博弈理论的角度实现这种巨大的用户体验优化？

 &lt;br/&gt; 

# 常规会议

## 实现者会议

第51次实现者会议已于10月29日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/189)
- [会议视频](https://youtu.be/_4Ry2AEzXGU?t=63)
- 我的[速记](https://hackmd.io/@benjaminion/BJOIcBd_w)

讨论的主要内容是网络 (networking) 方面的一些细枝末节。

 &lt;br/&gt;   

# 活动预告

- ETH Staker社区主办的[以太坊2.0测验](https://unvetica.com/ethereum-2-0-quiz-show-presented-by-the-eth-staker-community/)，考试时间：UTC时间11月1日21:00。看起来很好玩，也是一个难得的学习机会。此处是[YouTube入口](https://www.youtube.com/watch?v=aN2feR5rH7Q)，Protolambda也会[参加](https://twitter.com/protolambda/status/1322631450261377024)！

(这个部分是Joseph Chow建议新增的。如果你有关于Eth2的活动内容，[请告知我](https://news.ethereum.cn/wnie2-2020-10-31/ben@benjaminion.xyz))

 &lt;br/&gt; 

# 其他新闻

- Lighthouse进行了一波[宣传](https://medium.com/empireventures/discovering-lighthouse-branding-the-eth2-0-client-d3a6bb503a6b)，[Sigma Prime团队](https://twitter.com/paulhauner/status/1319624363231117312)发布了一个非常独特的庆祝视频：[Hello Danny](https://www.youtube.com/watch?v=7bE7XJqSfTE)!

 &lt;br/&gt; 

# 写在最后

非常感谢大家一个月前提出的反馈意见，从中我认识到我的读者朋友们非常宽厚友善♥️！

收到最多的建议是希望增加邮件推送。对此我一直很犹豫，原因有二，一是我太懒了，二是我真的不想对大家的地址负责。但我会再考虑一下。

同时，最新的[RSS feed](https://benjaminion.xyz/newineth2/rss_feed.xml)中似乎有一些服务能够充当邮件网关的RSS。我也会尝试[Feedrabbit](https://feedrabbit.com/)，并让大家知道进展如何。

 &lt;br/&gt; 

 &lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[为什么Synthetix选择Optimism扩容方案?]]></title><description><![CDATA[Synthetix创始人详析选择Optimism的原因、为社区释虑、并提出执行计划。]]></description><link>https://www.ethereum.cn/why-optimism</link><guid isPermaLink="false">https://www.ethereum.cn/why-optimism</guid><pubDate>Mon, 26 Oct 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [blog.synthetix.io](https://blog.synthetix.io/why-optimism/)

&lt;br/&gt;







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dLzJPbB/Why-Optimism.png&quot;/&gt;&lt;/center&gt;





Defi的兴起发出了一个清晰的信号：以太坊需要在ETH2.0之前实现扩容，但要在DeFi生态内保持可组合性还需要在同一个扩容方案上协调。

幸好，市场是非常擅长预测和解决这样的困难的，我们现在已经有非常多的扩容技术上线了。我们与多个主要扩容技术变体的团队进行了对话，且经过对它们逐一评估，我相信Optimistic Ethereum是在社区里最可能达成共识的扩容方案。

这篇文章会详述我为何如此相信，且社区里对上线Optimistic Ethereum的忧虑，我也将进行回应。它还将给出在主网实现OVM的Synthetix变体所需的治理过程设计，以及说明何种情况下另一种扩容技术可以替代Optimistic Ethereum。本文旨在确保就Synthetix迁移到Optimistic Ethereum，社区成员能有达成共识所需的信息。

[如果你还未阅读Vitalik的文章《以rollup为中心的以太坊路线图》（[**A rollup-centric ethereum roadmap**](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698/2)），本文是围绕它的论述展开的，但Vitalik的是自顶向下的，而我这篇是自底而上的，着眼于DeFi项目需要扩展什么，以及为什么Optimistic Ethereum能满足这些要求。]

###  &lt;br/&gt;

# 社会共识

我感觉“不停做出权衡取舍”好像变成了我的新口头禅。但它是对的——完美的扩容解决方案是不存在的。每种方法都有其重要的权衡，而每种扩容技术的具体实现又有进一步的低层次权衡。所有这些都以一个高风险的元协作机制为基础，因为光是选择正确的设计和权衡是不够的，我们还必须对其他人最有可能选择的方案进行优化。因此，扩展变成不只是一个技术上的难题，它还是一个社会协作博弈。

当我第一次阅读关于Optimistic Rollups的内容时，当时我们的gas费还没有很高。无论是对于技术还是社会上的难题，它看上去都像是个优雅的解决方案，但我已经意识到，无论我们选择哪种扩容方案，我们都需要与其他项目合作。Uniswap的Unipig演示给了Optimism收获社区共识一个很好的机会，因为它与以太坊上最知名的项目之一合作了。因此，我选择参与这个解决方案，不仅在如何解决DeFi特有的困难上给Optimism提供反馈，还协助他们在社区里引导社会协作。









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gj5jgVV/why-optimism2.png&quot;/&gt;&lt;/center&gt;





### &lt;br/&gt;

# 技术因素

对于Synthetix来说，Justin Moses既是它的幸运也是它的诅咒。他为Synthetix树立了不轻易妥协的、严谨的工程文化，但他对认知负载的讨厌程度是在软体动物界外少见的。这意味着，把Synthetix部署到Layer2上需要在最小化风险与减少对代码库的任何修改之间达成微妙的平衡。迁移期间在Layer1和Layer2上运行两个并行的、不同的代码库，这种做法我们是绝不会同意的，因为迁移甚至都不会实现；而如果这意味着用另一种语言重写合约的话，就更加不可能发生了。

Synthetix是建在Ethereum上最复杂的智能合约之一，这无疑增加了维持不同代码库的难度。这是我们在将Havven network移植到EOS.https://twitter.com/kaiynne/status/1166234541616316417?s=21的失败尝试中首先发现的。

我们还需要向社区证明这项技术是可行的，且是值得我们进一步投放资源的，然后再尝试围绕它作为我们的扩容方案构建共识，OVM的交易演示也有助于加强这点。但仍有社区成员对这个方法保有忧虑也是在理的，因此即使社区共识已经非常明显偏向Optimistic Ethereum，我们还没到可以用SIP来测试它的地步。

但在我开始讨论具体的权衡之前，我想对用于执行智能合约的、现有的扩容方向提供概述：

1. 快速区块链，即“以太坊杀手”，其他Layer 1架构，非常快速的区块链

1. ETH 2.0，即2032年见 (开个玩笑)
2. 状态/支付通道，即“都能发送代币了，你还想要啥？”
3. 侧链，即xDAI那一套
4. Plasma，以Omisego为代表，也叫“虽迟但到”
5. 使用零知识的ZKrollup和其他解决方案，即你是否solidity的真爱。
6. Optimistic EthereumOptimistic Rollup，高能预警
7. Lightning，笑而不语

如果还有其他解决方案是我漏了的，我很抱歉，我非常期待在twitter上看到它们的消息。

由于在迁移阶段需要保持使用同一个代码库，上述的大部分解决方案都被排除了。当然，很多解决方案都声称与EVM兼容，但这并非听上去这般简单——虽然Optimism突破了这个限制，也还需要对合约进行少量修改。但基于这点我们可以很快排除这些方案：快速区块链、ZKrollups、Lightning、状态通道、和Plasma。即使ZKrollup取得快速进展，目前的所有变体都需要用一种新语言来重写合约。这并不是不可克服的，只是这些语言的工具还非常不成熟，这会大大增加实现风险。

可能会有一些快速区块链支持者读这篇文章时会情绪激动，的确其中有些项目是与EVM兼容的，允许solidity合约在上面部署，但它们大多数有其他问题，使我们感觉会削弱它们的可行性。包括那些十分新颖的共识机制也还没经过反复测试来证明其可行性，或安全性大打折扣。

目前来说，普适性计算是状态/支付通道和Plasma第二个难以达到的要求。

那就只剩下侧链和Optimistic Rollup了。我们排除了像xDAI这样的侧链，因为我们需要为价值上亿美元的资产提供保障，在未来还会再增加几个数量级。如果有异议，feel free to 掰头 with me

看完了全部的选项后，我们觉得Optimistic Ethereum呈现的权衡是最佳的，而且他们团队也非常有能力执行他们的路线图。

###  &lt;br/&gt;

# 分阶段的Optimism

很明显Optimistic Ethereum还没有上线，因此还存在重大的执行风险，这也是为什么我还没提交关闭Layer1上的Synthetix的SIP。但是，在上述的选项中，结合权衡与风险来看，我们认为Optimism证明了它不仅值得Synthetix投入大量工作做迁移，还要带动DeFi的其他项目一起参与。这就是为什么我决定我们需要利用我们作为最老牌的DeFi协议之一的地位并承担早期实现的风险。我知道这会有利于在社区建立共识。到目前为止，社区的普遍接受程度很高，且还没有人反对给Optimistic Ethereum分配资源。

但是，随着我们越来越接近可能的主网迁移，我们提出了三大忧虑。

  1）欺诈证明

  2）中心化

  3）提款延迟

最关键的技术问题是欺诈状态转变。有人说目前的实现阶段不包含欺诈证明，实际上，欺诈证明是包含在内的，但尚不支持自动生成的欺诈提交。Optimism团队选择了分阶段顺序的方法，以便在增加复杂性之前测试像储存与提款这样的特定功能。但是，这一点可以在测试网路线图里就声明，以避免用户疑惑。尽管在主网上线之前，自动提交欺诈证明这项功能就会上线。在欺诈证明功能不完备

的情况下，很明显是不会有主网上的资金可以存进Optimistic Ethereum网络的。对于任何提议迁移到一个低安全保障网络的SIP，我个人是会投反对票的，我也鼓励社区里的每个人都这样做。这也是为什么xDAI和其他POA (权威证明) 网络被认为不可用的原因之一，即安全性低。

另一个主要忧虑是Optimistic Ethereum呈现出来是去中心化的，但它有中心化的部分。我相信这个看法是被误导的，但它当然是有道理的。在过去几年，社区为提高协议的去中心化程度投入了大量的时间和资源，现在如果为了gas费和吞吐量而往后退，会是个糟糕的取舍。但事情不是这样的，排序者 (sequencer) 是在最少牺牲的前提下大幅提高用户体验的。

这些忧虑源自人们对Optimistic Ethereum网络中排序者的误解。大家需要知道排序者并不是必须访问Optimistic Ethereum的，它的存在是为了提高用户体验的。很多人还以为一个排序者意味着一个单点故障，这样的情况很不理想，但其实这种故障在L1的糟糕UX里早就存在了。当然，退回到Layer1的区块时间并不理想，但还有很多潜在的解决方案，包括如果活跃排序者出故障或被攻击，后备排序者可以替补上。所有这些忧虑都只是暂时的，因为目标始终是尽快转移到一个有排序者的网络里。

最后一个主要忧虑是提款延迟对跨层可组合性的影响——这个忧虑除了其他Layer1架构，其他所有扩容方案都会面临。这些延迟意味着在挑战期，资金都会锁在Layer2的网络，但还是有几种可变通的处理方法的。一种是搭建一个验证者网络，为桥的两边提供资金，并承担提供及时提款的风险以赚取费用。实际上，Connext已经开始往这方面开展工作了，这里有更多的细节。这并不能彻底解决可组合性问题，因为资金仍然需要在另一笔交易得以启动之前在主网上得到确认，但这基本上对所有扩容方案来说都是至关重要的，我们无法逃避。这也是为什么我认为所有的主要DeFi协议都应该尽早在Optimistic Ethereum上上线它们的并行版本。这会使得几乎所有目前的DeFi交易都在Layer2上发生。很有可能质押会完全迁移到Layer2，而交易合约将继续在Layer1和Layer2上平行运行。

需要明确的是，在“开始Optimistic Ethereum主网迁移”的SIP被提出之前，关于功能完备的主网的所有信息都需要公开。我个人有信心，这个条件在未来数月内会得到满足。

###  &lt;br/&gt;

# 主网迁移后

关于Synthetix该如何迁移到Optimistic Ethereum仍然需要在社区内进行辩论。首先，我们必须在是否需要有一个并行且有限版本的网络在Layer2主网里发布这个问题上达成共识。一旦我们在此达成了共识，我们需要评估此次主网发布的结果并对迁移的其他部分进行形式化。

尽管Synthetix的DAO很可能在主网迁移后的前几周提供资金，但我们将需要一份SIP提议把最终协议奖励的1%分给Optimistic Ethereum。如果我们将部分的协议奖励分给这个并行网络，我们可以监测采纳情况和使得市场可以对迁移风险进行定价。预计收益会因为下降的gas费而比在Optimistic Ethereum低，但也有可能平台风险会导致更高的收益，因为大多数的SNX持有者会选择晚点迁移。

我的看法是通过抵押Optimistic Ethereum上的SNX铸造sUSD与当前通过抵押托管的SNX铸造sUSD差别不大。我们决定允许通过托管的SNX来铸造sUSD以最大化可用抵押品的价值。对于那些已经迁移到Layer2的SNX，如果想将它们迁回到某个点，这是可以实现的，这意味着这些SNX在网络里都会被视为有效抵押品，只是与在Layer1上的SNX状态不同。因此，在Layer2铸造的sUSD与Layer1上的sUSD应该是可以互相置换的。对此当然有反对声音，理由包括这个实现会是非常复杂的。我们必须采用对整个社区来说最合理的方法。

如果此次的迁移是有效的，我们就会有一个相当有力的杠杆可以影响其他部分的迁移：只需要继续转移更大比例的通胀奖励，直到全部都发送到Layer2以及所有活跃的、质押的SNX都发生在Layer2上。到时我们当然需要支持在Layer1和Layer2上Synth的兑换。因此，在这个过程里有大量相互关联的依赖关系需要处理。

我曾公开表示我相信Optimistic Ethereum将是现在与Eth2.0上线之间DeFi的出路。如果Synthetix社区的其他人都如此相信，我们需要计划如何加入这个网络并完全从Layer1迁移过去。我们当然应该谨慎为之，但Synthetix的勇士们从未在没十足把握的对赌中退缩过，我相信这是我们遇到的最大挑战之一。

为了执行这项工作，我们将需要一系列SIP和SCCP，列明每次发布里提议的变化以及背后的理由。这将确保最大限度的透明度以及得到所有持币者的同意。

###  &lt;br/&gt;

# 后备方案

一般而言，以太坊扩容方案以及智能合约平台的竞争是动辄上几十亿美元的事业。在这个高风险游戏里，有非常多的竞争团队，因此尽管我们对Optimism有信心，还是可能有其他团队推出比他们优秀的方案。如果真的发生这种情况，我们必须做好将我们的工作中心转移到这项更有竞争力的技术的准备，特别是如果我们发现多个DeFi项目已取得了社会共识，决定从Optimistic Ethereum转到另一个方案。

我们必须为最差的情况做准备，即Optimistic Ethereum的发布失败了或中止了。在这种情况下，我们必须快速将资源转移到认真调研其他解决方案上，同时还要优化现存的Layer1系统。实际上，我们已经开始了应对紧急情况的准备工作。债务快照 (debt snapshot) 那份SIP的快速实现就是一个优化的例子，这个优化已经被搁置了很多个月，但为了解决在Layer1上迫切的gas问题，我们加快了这个实现。庆幸的是，我们得到了暂时的缓和，但它不能持续很久。如果因为任何原因我们无法就迁移到Optimistic Ethereum达成共识，我认为我们社区必须聚集起来一起选出另一个扩容方案，并团结起来推进它。虽然我认为可能性不大，但假装这是不可能的就过于轻率了。

###  &lt;br/&gt;

# 结论

本文旨在解答一些社区提出的问题，但同时希望可以解释在整个迁移过程中，我们是如何走到现在的，以及现在是处于什么阶段。没有什么是不可更改的，即使是一份已通过且实现了的SIP也可能因为情况改变而回滚。但是，我坚信如果我们就SIP达成了共识，并希望为DeFi扩容构建一个最可行的网络，整个社区都需要尽力推进它。我有信心我们的社区可以实现这点，我们比任何时候都更强大，并对2021充满期待，其中当然包括Synthetix得以在一个功能齐全的Optimistic Ethereum主网上运行。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊“黑暗森林”：混沌与生机]]></title><description><![CDATA[本文将以太坊网络比作“黑暗森林”，其与生俱来的无需许可，透明开放的特性之下也暗涌着混沌与危机。]]></description><link>https://www.ethereum.cn/ethereums-dark-forest-is-worth-cultivating</link><guid isPermaLink="false">https://www.ethereum.cn/ethereums-dark-forest-is-worth-cultivating</guid><pubDate>Thu, 22 Oct 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [trentv.medium.com](https://trentv.medium.com/ethereums-dark-forest-is-worth-cultivating-3cffa440aa4f)



&lt;br/&gt;

译者按：Dark Forest (黑暗森林) 法则的概念出自《三体》，指一旦某个文明被发现，就必然遭到其他文明的打击。本文将以太坊网络比作“黑暗森林”，其与生俱来的无需许可，透明开放的特性之下也暗涌着混沌与危机。而我们作为社区的一员应该作何态度？又该如何发挥其正面效应？

## 









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/R34TN75/1.png&quot;/&gt;&lt;/center&gt;













&lt;br/&gt;

# 摘要

以太坊在技术层、社区层以及治理层都是无需许可的——这意味着任何人都有权访问。尽管对于社区来说，这种开放性是有代价的，但正是它让以太坊成为了一个如此庞大的动态生态系统。我们必须始终牢记这个事实，并且坚持专注于构建[一个为协作而生的全球性舞台](https://medium.com/@virgilgr/ethereum-is-game-changing-technology-literally-d67e01a01cf8)。

##  &lt;br/&gt;

# 引言

在文章《以太坊：黑暗森林》(*[Ethereum is a Dark Forest](https://medium.com/@danrobinson/ethereum-is-a-dark-forest-ecc5f0505dff)*) 中，Dan Robinson和Georgios Konstantopoulos将以太坊的对抗性环境与“黑暗森林”这一概念进行对比。该比喻出自一本[同名书籍](https://en.wikipedia.org/wiki/The_Dark_Forest)，用以描述“置身于这个环境之中，被高级掠食者发现就意味着必然的死亡”。

这个对比形象地描述了以太坊交易池 (Ethereum mempool)，在这个虚拟空间中，存放着等待被打包进区块的交易。交易池受到来历不明的程序的密切监控，它们监控着交易及其可能的最终状态。如果有利可图，他们会不择手段地抢跑或是竞价交易。这些“利益”就像在黑暗森林中被发现的猎物一样，正如Dan和Georgios的痛苦经历那样，他们几乎不可能避开这些掠夺者，他们的目标不同于暗处的潜伏者。

##  &lt;br/&gt;

# 以太坊的每一层都是黑暗森林

在接下来的内容中，我会将黑暗森林的隐喻扩展到以太坊的技术、社区和治理层。正如任何人都可以监控交易池并从中获利一样，套利者也可以在每一层获取最终利益，无论他们是否考虑到社区的长远利益。

举些例子：

- 技术层：部署到主网，添加状态到链，监控交易池以便先发制人。
- 社区层：参与社区、推特热点，向Gitcoin Grants捐赠。
- 治理层：游说或反对某项技术变革，参与共识，参与全体核心开发者会议 (All Core Dev calls)。

当这种情况发生时，感觉就像不劳而获，因为他们并没有对基础设施作出贡献。如果这些人是其他社区的成员，这些本可以发挥更大作用的基础设施或带宽，便被他们所滥用了。

虽然以太坊无需许可的特性会对每一层都造成影响，但我们必须记住，这种特性本来就是其设计的体现。事实上，如果生态中没有出现这种乱象才更加令人担忧，最终产出的项目也会黯淡许多。这意味着缺乏抵抗力，幸运的是这种情况还没发生。这些特性的融合，正体现了以太坊的革命性之处，值得我们继续投身其中。

##  &lt;br/&gt;

# 拥抱以太坊的黑暗森林特性

值得铭记的是，在短短五年时间里，以太坊已经实现以下几点：

- 集合了新兴的技术、社区和治理特征，并且在任何其他生态系统中都无法复制
- 开放式工具集不断增长，任何人都可以在以太坊上进行无需许可的实验
- 以太坊具有去中心化分布式的特性，是不断扩大的全球性社区，出现了机构、货币以及不可篡改的合约

而这些惊人的属性都存在于一个生态系统中！正因为以太坊源自并成长为“黑森林”般的生态系统，才衍生出了无需许可、混沌、完全开放的特征。

这些属性平行于以太坊社区最喜欢的模式：[大教堂和市集](http://www.unterstein.net/su/docs/CathBaz.pdf)。市集模式和黑暗森林都是社区持续的能量来源。不管你来自什么国家，什么背景，都能够接触到我们正在构建的事物——这正是我们持续为之努力的强大动力。

##  &lt;br/&gt;

# 以太坊能够实现什么

我们已经看到来自世界各地的人们正在发挥以太坊的能力。正如 Virgil 所说：“以太坊是一个前所未有的大型合作舞台”([来源](https://medium.com/@virgilgr/ethereum-is-game-changing-technology-literally-d67e01a01cf8))。舞台上堆砌着协作机器：无论现实世界发生了什么，舞台上的工具和基础设施都不会停止运作。在真正[可信的中立](https://nakamoto.com/credible-neutrality/)方式下，这些协作工具可以用于实现任何目的。

我们有必要再次提醒自己，在以太坊上可以实现：

- 任何人都可以加入或创建的开放组织
- 极其透明的交易记录
- 全球准入的金融市场以及金融产品
- 社区货币
- 非攫取性汇款
- 非托管金融服务
- 对创意者公平的市场
- 可在世界计算机上部署的永久脚本
- 无国籍身份
- 体育博彩业
- 不受限制的投机
- 提供勒索软件的支付方式
- 金融化人类最宝贵的经验
- 无需许可的诈骗
- 跨国公司协调的当地资源开采

当预期与现实相悖

在上面那份列表中，不尽然都是正面的用途。但如果我们过度强调负面结果，那可能就会怀疑以太坊是否值得我们的投入。

今年夏天的流动性挖矿事件再次凸显了社区的分歧。一方面，一些尖锐的声音表示对快速发展的实验性项目很担忧，令人回想起“The DAO”热和ICO热；另一方面，又有许多人沉浸到这场激进试验的狂欢中。

对于以太坊生态发展速度以及以何种方式发展，社区内有不同的看法。关键是我们要弄明白，这是一种旧模式的最新表现，并且只要有区块产生，这种模式就会持续下去。未来仍会有狂热的投机炒作、无尽的骗局对以太坊的能力进行歪曲。

所有这一切都可以归咎于Molochs：这是与我们共同栖息在森林里的机会主义怪物，其唯一意图就是永久阻止我们进行协作 ([关于Moloch的思考](https://slatestarcodex.com/2014/07/30/meditations-on-moloch/))。像流动性挖矿这样的狂热，给我们的期望带来了不确定性。颠覆规范，将集体的意义从个人框架中剥离出去——尤其是使得gas费暴涨。

这三层 (技术、社区、治理) 承载着无数其他非社区或与社区相邻的实体。这些实体有时会借助以太坊达成不同的目的，但它们都希望利用其黑暗森林的能力。

他们可能试图利用社区和治理层来获得支持或资金，其专注点甚至会偏离有价值的项目。一些实体最终将对生态系统或法规产生长期的负面影响。有些人会煽动他们自己的狂热，有些人则会让核心社区陷入困惑：什么是有价值的目标以及如何去实现。鉴于用户对技术层的访问无需许可，以及社区层和治理层都具有可塑性，预测以及阻止各种可能性是无法实现的。

##  &lt;br/&gt;

# 社区能做些什么？

帮助打败这个Moloch：我们需要更加接受以太坊作为黑暗森林所具有的特性，这些特性分布在每一层。我们要以对抗性的心态加入到这个长期游戏中。并且要理解，我们与各种实体共享每一层，无论是已结盟的还是没有结盟的。我们要拥抱 (或者包容) 不确定性，以及无需许可生态系统可能产生的不稳定性。

我们是否仍然相信在以太坊上还有值得开发的技术、和值得尝试的社区以及治理模式吗？如果答案是肯定的，那么我们必须克服暂时的失落。

目标驱动能带来的正面效应一如既往，并将不断地发展——即便现在不太明显。专注于自己决心追求的东西，直到你所重视的事物为他人所认同。不仅仅是生态系统中的其他人，我们欢迎这个星球上的所有人进入这片黑暗森林。

无论是现在还是未来，我们都会将其作为一个社区来构建。这是一个大型的集体实验。黑暗森林需要多元化的利益、背景和技巧才能撑起这场合作博弈以及协作机器。在这里，我们需要力求谨慎的声音，也需要冲破界限的呐喊。社区本该如此，正是我们得以在这两极之前进行协调的能力，使得我一如既往相信我们一同倾注的心血会逐渐成为现实。

## &lt;br/&gt; 

# 结论

以太坊一直以来都是一个对抗性环境。当和其他加密平台和社区相比较时，以太坊作为黑暗森林所具有的特性使其独树一帜。由于以太坊的技术层、社区层和治理层都是无需许可的，因此任何人都可以使用甚至是滥用这些设施。我们无法改变其无需许可的特性，但我们可以调整对此的态度。

在变化发展如此快的时代，我们不能忘记自己的初心。我们要加倍努力，不断坚定于构建以太坊的黑暗森林。毕竟，这些特性所带来的正面效应一如既往地强大。

Molochs将会永远与我们在这片森林中同生共息，在他们熟睡时，我会继续建设以太坊，希望大家也如此。

**感谢[Justin](https://twitter.com/0xmidnight?lang=en), [Kevin](https://twitter.com/owocki), [Ameen](https://twitter.com/ameensol)和其他小伙伴的反馈，感谢**[**Dan**](https://twitter.com/danrobinson)**、**[**Georgios**](https://twitter.com/gakonst) **和**[**Virgil**](https://twitter.com/virgilgr)**的启发。**

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[VITALIK：GITCOIN GRANTS第七轮回顾]]></title><description><![CDATA[DeFi项目反哺生态，总计逾73万美元分配到857个项目；首次引入ZK Rollup降低手续费。]]></description><link>https://www.ethereum.cn/gitcoin-grants-round7</link><guid isPermaLink="false">https://www.ethereum.cn/gitcoin-grants-round7</guid><pubDate>Wed, 21 Oct 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [vitalik.ca](https://vitalik.ca/general/2020/10/18/round7.html)

&lt;br/&gt;


Gitcoin Grants第七轮已经圆满结束了！在本轮中，大家的兴趣空前高涨，捐赠数额也有所增长：857个项目获得27.483万美元捐赠以及45万美元匹配资金。

本轮捐赠类别再次发生了改变，分为“dapp技术”、“基础设施技术”以及“社区”。以下是本轮Grant的最终结果：

















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/239rCcv/1.png&quot;/&gt;&lt;/center&gt;















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/8dDYMKS/2.png&quot;/&gt;&lt;/center&gt;











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/tbxM6sh/3.png&quot;/&gt;&lt;/center&gt;









&lt;br/&gt;





# DeFi贡献了匹配资金！

在这一轮中，我们的匹配金额比以往高出许多。这是因为除了以太坊基金会和其他一些参与者提供的常规匹配资金之外，首次获得了各个defi项目的高度参与：

 











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Dp8dRFk/4.png&quot;/&gt;&lt;/center&gt;















匹配资金提供者有：

- [Chainlink](https://chain.link/)，智能合约预言机项目
- Optimism，layer2 optimistic rollup方案
- 以太坊基金会
- Balancer，去中心化交易所
- [Synthetix](https://synthetix.io/)，合成资产平台
- [Yearn](https://yearn.finance/)，抵押贷款平台
- [Three Arrows Capital](https://www.threearrowscap.com/about-us/)，投资基金
- [Defiance Capital](https://twitter.com/defiancecapital)，投资基金
- [Future Fund](https://twitter.com/future_fund_)，这绝对不是一家投资基金
- $MEME，meme币
- [Yam](https://yam.finance/)，defi项目
- 一些个人捐献者：ferretpatrol, [bantg](https://twitter.com/bantg/), [Mariano Conti](https://twitter.com/nanexcool/), [Robert Leshner](https://twitter.com/rleshner/), [Eric Conner](https://vitalik.ca/general/2020/10/18/twitter.com/econoar/), [10b576da0](https://twitter.com/10b57e6da0)

这些项目提供了大量的匹配资金，其中一些已在本轮中使用，也有一些资金预留作为“应急基金”，以防在未来轮次中匹配金额变少。

这对于生态来说是一个非常重要的里程碑，因为这表现了Gitcoin Grants对于少数资助者的依赖性降低，正在朝着一种更加可持续的方向发展。但值得思考的是，这些资助者的驱动力是什么？这是否是可持续的？

有几种潜在动机可能会在不同程度上发挥作用：

1. 从某种程度上来说，人天然是无私的，由于利息和代币价格的迅速上涨，在本轮中恰逢defi项目盆满钵满，因此将其中的一部分捐献出来似乎是“正确的选择”
2. 社区中的许多成员都对defi呈批判态度，将其视作无益的赌场，对以太坊的远大目标造成了负面影响。而参与公益是defi项目的一种表态，他们希望成为生态的贡献者，助其发展
3. 如果抛开这种负面看法，defi是一个竞争激烈的市场，其发展在很大程度上取决于社区的支持和网络效应，因此在生态系统中结善对于项目来说是非常有价值的
4. 发展最好的defi项目从这类公共产品中捕获到了足够的收益，因此进行贡献也符合他们自己的利益
5. 在defi项目中，存在高度的“共同所有”现象，即某种代币的持有者也持有其他代币和ETH。因此，即使进行大量资助不完全符合项目的利益，但是可能符合其代币持有者的利益，他们可能也持有被资助项目的代币，因此会推动项目进行资助。

当然了，我们还需要思考的问题就是：这些激励的可持续性程度如何？这种利他性和公共关系激励措施是否仅能发生一次性该种规模的爆发，还是可以更具可持续性？自此之后，二次方融资匹配的规模是否有希望达到200-300万美元？如果答案是肯定的，那么对于以太坊生态系统中公共产品融资 (public goods funding) 的多样化和民主化而言，这将是一个好消息。

## 媒体类受助方质量普遍上升

上一轮和本轮都呈现了一个奇怪的现象，在前几轮中具有“争议”的社区类受助方的地位开始自行下降了。理论上来说，似乎这类受助方应该持续得到拥护者的支持，而批评者对此仍然无能为力。而是事实本轮中最大的媒体类赢家相对无争议，并且是以太坊生态系统中广受欢迎的主流成员。零知识播客 ([Zero Knowledge Podcast](https://www.zeroknowledge.fm/)) 作为一个出色的播客，即便其面向的是相对小众且稍具技术背景的受众，也在本轮中获得了大量资助。

发生了什么呢？为什么媒体类受助方的质量自然而然地就提高了？或许是二次方融资机制的自我纠错能力比我们想象中要强？

## 超额偿付

在本轮中，每个类别的大赢家首次通通获得了巨额资助。基础设施类别的White Hat Hacking项目获得了39,258美元，社区类别的[Bankless](http://podcast.banklesshq.com/)播客则获得了47,620美元。我们可以思考这样一个问题：这些受助方获得的资助是否过度？

明确地说，我确实认为试图建立某种道德规范是非常不恰当的，规定公共产品贡献者只能赚取一定水平的报酬，而不能远超出这个范畴。相较之下，发布代币的人总是赚得盆满钵满，这种可能性对于公共产品贡献者来说是完全自然且公平的 (此外，这一轮的数额折算下来约每年20万美元，甚至还没那么高)。

然而，我们可以提出一个更为务实的问题：鉴于目前的奖励结构，同样是多捐献一美元，捐献给受助最多的项目或是捐献给受助不足却非常有价值的项目，是否后者更有意义？像是Turbogeth、Nethermind和RadicalXChange这类项目仍然可以利用微薄的资金做很多事情。由于本轮匹配资金首次达到这么大的规模，我们不得不重视这个问题。

尤其是如果将来匹配资金的规模越来越大，生态系统是否能够正确地分配资金并且避免某些项目的超额偿付？或者说，如果不能避免资金过度集中，那结果是否真的就那么糟糕？或许成为一轮grant的关注中心并获得50万美元意外之财的可能性能够激励公共产品贡献者的参与！

这些我们尚未得知的答案随着试验规模的不断扩大，或许将被首次揭开。

## 资助类别

目前Gitcoin Grants中的类别概念有些奇怪。每个类别都设有固定的匹配资金总量，在该类别中的项目之间进行分配。该机制从根本上来表达的是，我们可以信任社区能在一个类别内的项目之间进行选择，但是首先我们需要独立的技术判断来甄别资金应该如何在不同类别之间分配。

但是自此事情的走向更加吊诡。第七轮半途引入了“[collection”功能](https://gitcoin.co/grants/collections)：











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/kM8crQp/5.png&quot;/&gt;&lt;/center&gt;













如果我们在一个系列中点击“加入购物车”，就会将该系列中的所有项目都加入到购物车中。这个功能很奇怪，因为者似乎传递出了完全相反的信息：不清楚个中细节的用户可以选择将资金分配到整个类别，但是用户不能在每个类别中做出更主动的决策，除非手动编辑数量。

那么到底是怎样？我们信赖激进的二次方民主在每个类别中进行分配，却忽视了类别之间的分配？我们信赖其在每个类别之间进行分配，却不让人们在其中做出更细致的决策？我建议在第八轮中，应该对这些哲学挑战进行更加深入的思考，并且制定一种更具原则性的方式。

一种方案是只设立一个资金匹配池，然后所有的类别都作为自动的UI层。另一种方案则是以一种“扶持行动”(affirmative action) 的方式来启动特定类别。例如，我们可以将社区类别按地域划分，每个地域设立25,000美元的匹配资金池，如北美洲+大洋洲、拉丁美洲、欧洲、非洲、中东、印度、中亚+东南亚，从而使得更多被忽视的地区项目从中受益。还有许多可能性！还有一种混合路线，“主要”资金池可以在上一轮中自己二次融资！

## 身份验证

随着串谋、伪造账户和针对Gitcoin Grants的其他攻击日益增多，第七轮增加了一个额外的验证选项，使用了基于去中心化社交图谱的[BrightID](https://www.brightid.org/)，并将该项目的用户量提高了十倍：

















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QbKbBDx/6.jpg&quot;/&gt;&lt;/center&gt;













这其实很好，除了帮助BrightID发展之外，还使该项目经受了一次试炼：现在有很大的动机尝试创建大量假帐户！BrightID将面临艰巨的挑战，虽然普通用户的门槛降低了，但同时又要防御来自虚假账户和重复帐户的攻击。我期待看到他们采取措施应对挑战！

## 用于扩容性的ZK rollups

最后，Gitcoin Grants本轮首次采用了[ZkSync](https://wallet.zksync.io/)这种ZK rollup技术，以降低支付费用：





















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NWGkWH4/7.png&quot;/&gt;&lt;/center&gt;













主要成果简单来说就是ZK rollup确实成功地降低了费用！用户体验也不错。目前许多optimistic和ZK rollup项目都在寻求和[钱包集成](https://www.theblockcrypto.com/linked/80744/coinbase-wallet-optimisms-layer-2-rollup)，这能够进一步推动L2扩容技术的可用性和安全性。

&lt;br/&gt;

# 结语

第七轮对Gitcoin Grants来说至关重要。匹配资金更加具备可持续性。现在的资金规模足够大，足以为二次方自由工作者提供足够的资金，以至于产生某个项目是否获得“太多资金”的担忧！身份验证也正在向前迈进。随着[ZkSync](https://wallet.zksync.io/) ZK rollup功能的加入，支付也更加高效。我期待看到Gitcoin Grants的长足发展。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/10/18）]]></title><description><![CDATA[v1.0.0规范候选版本已发布；参与度不断降低的Medalla测试网何去何从？]]></description><link>https://www.ethereum.cn/wnie2-2020-10-18</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-10-18</guid><pubDate>Tue, 20 Oct 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_201018)

&lt;br/&gt;

 

# 阶段0：信标链

规范[v1.0.0的候选版本0](https://github.com/ethereum/eth2.0-specs/releases/tag/v1.0.0-rc.0)已经发布。其中与当前Medalla所采用的v0.12.x版本规范相比主要的改变有以下几点：

- Discovery协议升级到1，与当前的v5版本不兼容，加强了DoS攻击防御能力。
- BLS标准升级到v04版本，不再允许零私钥/无限公钥和签名。这点[之前](https://hackmd.io/@benjaminion/wnie2_200919)讨论过。
- 一些配置参数也有所改动：
  - GENESIS_DELAY(创世延迟) 调整为一周。这意味着创世状态在区块链正式工作前就能被知晓。这有利于客户端团队准备相应的客户端软件，也为用户预留了更新时间。在之前的创世演练中，这两点都成为了痛点。
  - INACTIVITY_PENALTY_QUOTIENT(怠工惩罚) 降低四倍。将停止敲定时期的惩罚减至1/4，不过这是一个暂时性的举措，为了在遇到困难时增强质押者的信心。
  - MIN_SLASHING_PENALTY_QUOTIENT(最低罚没惩罚) 降低四倍，也就是说罚没的最低数额仅为0.25 ETH。再次重申，这是暂时性的举措。
  - 比例性罚没 (其他验证者同时被罚没时遭到的惩罚) 也减至1/3。再次重申，这是暂时性的举措。
  - 对Eth1数据投票的更改：Eth1的同步距离目前是2048个区块 (约8小时)，Eth1的数据投票期也延长到两倍。用意主要在于延长存款和在信标链上激活验证者之间的等待期 (约延长6-8小时)。我不清楚其设计理念。

现在我们[只需要](https://github.com/ethereum/eth2.0-specs/pull/2082)MIN_GENESIS_TIME (最早创世时间) 和DEPOSIT_CONTRACT_ADDRESS (存款合约地址) 啦！

 &lt;br/&gt;

## 存款合约

说到这个，我现在每天都在期盼存款合约的消息。也可能就在我发布本期更新的十分钟之后:joy:。根据我的理解，我认为我们已经准备好了：存款合约可能在接下来的几天内发布；信标链的创世可能在6-8周之后（请注意，这并非正式声明，仅为个人猜测）。

同时，我们也需要[提高警惕](https://twitter.com/preston_vanloon/status/1316822695909105664)，接下来的日子里会涌现许多假存款合约和Launchpad前端。请密切关注官方通告，不要向任意合约发送ETH，这不是DeFi。

 &lt;br/&gt;

## 测试网

Spadina的创世彩排过程[有些曲折](https://hackmd.io/@benjaminion/wnie2_201002)，我们又在[Zinken测试网](https://github.com/goerli/medalla/blob/master/zinken/README.md)中进行了一次彩排。当时也按例举行了[发布排队](https://www.youtube.com/watch?v=YSuiuoeKoq0)，我很不幸地错过了，但是[the Daily Gwei](https://thedailygwei.substack.com/p/zinken-about-eth2-the-daily-gwei)进行了总结。虽然也不尽完美，但是过程还算顺利，足够我们进行真正的创世了。

与此同时，Medalla的[参与率非常低](https://medalla.beaconcha.in/)，大概是参与者们开始对测试网感到厌倦了。是时候前进了，最近的[实现者会议](https://hackmd.io/@benjaminion/wnie2_201018)中对其发展进行了讨论。

我也[撰文](https://www.coindesk.com/time-to-launch-ethereum-2-beacon-chain)分析了为什么测试网不再起作用，我们需要尽快发布阶段0。

 &lt;br/&gt;

## 赏金计划

目前[Eth2赏金计划](https://eth2bounty.ethereum.org/)已经[合并](https://twitter.com/dannyryan/status/1314563680588238853)了各种针对Eth2漏洞的赏金。除了鼓励大家对协议发起攻击，还鼓励大家对Teku、Lighthouse和Prysm客户端实现进行破坏。严重漏洞的赏金已经高达5万美元。

 &lt;br/&gt;

# Staking 质押

[EthStaker](https://www.reddit.com/r/ethstaker/)对staking意向进行了一次快速调查，[结果已经出炉](https://docs.google.com/forms/d/e/1FAIpQLSe8So44J3M7C4yZ-BPn7Gekej275lRzzqJgg026BQ8CtJuwsA/viewanalytics)，其中包括一些有趣且宝贵的信息。但让我感到失望的事，大家对客户端多样性的呼吁置若罔闻。Prysm确实是一个不错的客户端，但是还有其他能力很强的客户端可以选择。我知道我是其中一个客户端的产品负责人:stuck_out_tongue:，但是还是想提醒大家不要选择单一的客户端，因为这会将自己和网络置于危险之中。以下是Danny Ryan的[看法](https://blog.ethereum.org/2020/10/01/eth2-quick-update-no-18/)：

&gt; 关于客户端多样性，Spadina测试网中的Prysm客户端也占据了相当大的比重，而该客户端在创世过程中出现了严重的peering问题。但其实我们有很多强健的eth2客户端可以选择。如果我们在主网中能实现更好的客户端分配，那么在Spadina测试网中出现的单一客户端问题，对整个网络的运行影响就会小很多。

以及：

&gt; 用户集中使用Prysm客户端，加剧了Medalla测试网中发生的动荡。作为一个社区，在我们迈向主网的过程中，必须要自觉主动地寻求解决。

请勿将上述观点看作是对针对Prysm客户端的不利言辞，它的成功当之无愧，而是紧急呼吁大家重视[客户端多样性](https://twitter.com/ethereumJoseph/status/1317191907697692673)。

好了，我已经一吐为快，现在我们再来聊聊代币化质押金 (tokenised stakes)。

去年我在[一篇文章里](https://medium.com/ideo-colab/the-deth-of-ethereum-98553866e81b)首次提出了代币化质押金的想法，其中对于可能随之而来的中心化风险感到忧虑。最近，Tim Ogilvie认为代币化质押金是[一件好事](https://www.coindesk.com/staked-eth-will-replace-traded-eth)。此处是Adam Cochran的[系列推特](https://twitter.com/AdamScochran/status/1316816985645363204)，描述了Rocketpool将质押金代币化的计划，涉及经济学和合规问题。[Lido](https://medium.com/lido-finance/introducing-lido-ca193431c82)看起来似乎不错，声称“由业内顶尖的质押服务商支持”，这或许有可能减轻中心化风险。我并不为此感到开心，因为这并不利于鼓励大家进行个人质押，而是选用托管服务，但这是不可避免的。

Michael J. Casey在其[Coindesk的文章](https://www.coindesk.com/ethereum-2-lockup-defi-innovation)中也表示这是必然的趋势，并且认为其会有效反映出市场对Eth2项目的信心。

 &lt;br/&gt;

# 释义性资源

来自Stakefish不错的短视频：

- [Part I | Meet Ethereum 2.0](https://www.youtube.com/watch?v=jde9VEY8bbM)(2m36s)
- [Part II | Phase 0 and the Beacon Chain](https://www.youtube.com/watch?v=-qwSAFcicg8)(2m41s)

Gitcoin进行了直播，邀请Vitalik和其他嘉宾讨论了以rollup为中心的路线图，然后将其划分为较短的视频。此处是[视频列表](https://www.youtube.com/playlist?list=PLvTrX8LNPbPnMvn2fBI8rKS-nMZiExBQD)，[该系列推特](https://twitter.com/gitcoin/status/1316379162865795072)针对每个视频进行了简短总结，大家也可以观看此处的[完整视频](https://www.youtube.com/watch?v=UV9rNKExjn0)。

Vitalik还与其他嘉宾参加了[Taipei Ethereum meetup](https://www.youtube.com/watch?v=tg2bMlCaNXg)茶话会 (从第6分钟开始，Hsiao-Wei在[21分钟](https://www.youtube.com/watch?v=tg2bMlCaNXg&amp;feature=youtu.be&amp;t=1251)处开始讲解Eth2亮点)

Vitalik最近很忙 (还参与了[Ethereum Engineering Group](https://www.youtube.com/watch?v=_DUHTJEoaX0) 讨论账户抽象，以及Coindesk的会议)：此处是Vitalik最近在Status应用中进行[AMA的回顾](https://our.status.im/status-ama-recap-vitalik-buterin/)，主题包括Eth2。

没有那么简短的是u/ben-ned在Reddit上发布的有关如何在[Web3Signer](https://www.reddit.com/r/ethstaker/comments/j8vj9m/remote_signing_with_teku_and_web3signer/?utm_medium=android_app&amp;utm_source=share)服务中对Teku进行设置，使用Hashicorp保险库来保管密钥。目前对此也有一些工作在进行当中，[EIP 3030](https://eips.ethereum.org/EIPS/eip-3030)针对远程签名服务进行接口标准化，[此处](https://ethereum-magicians.org/t/eip-3030-bls-remote-signer-http-api-standard/4810)是相关讨论。提案正式通过后我们会进行实现，这在任何方面都与[Web3Signer](https://github.com/ConsenSys/web3signer)的工作非常类似。

Crypto Testers也发表了一篇[针对Eth2 PoS的释义文章](https://cryptotesters.com/blog/ethereum-staking-explained)，其中对质押形式进行了有价值的探讨。

 &lt;br/&gt;

# 研究工作

## Rollups

[之前](https://hackmd.io/@benjaminion/wnie2_201002)我们讨论了Vitalik提出的以rollup为中心的发展路线对以太坊未来的影响。这看起来似乎反响不错。Vitalik随后也在其[系列推特](https://twitter.com/VitalikButerin/status/1312905882330521600)中给出了更多观点：不是以rollup替代分片，而是基于分片应用rollup。

[Matt Garnett](https://lightclient.io/blog/eth2-is-a-rollup/)认为，以rollup为中心的发展路线和Eth2最终的归宿相去无几。

 &lt;br/&gt;

## 余额攻击

上周有篇文章引发了议论：[在Gasper中进行余额攻击](https://ethresear.ch/t/a-balancing-attack-on-gasper-the-current-candidate-for-eth2s-beacon-chain/8079?u=benjaminion)。该文基于[更早的一篇论文](https://arxiv.org/abs/2009.04987)。David Tse在洛杉矶区块链周中进行了相关[演讲](https://youtu.be/0MMHkCaQu6E?list=PLFJJb69BM_KJhE-Z-1whIOASAkfTf2j_M&amp;t=30397),并对共识机制的内部运作和取舍提供了一些不错的观察，非常推荐收看。

虽然这种攻击很有趣，但我认为其可行性就像球形奶牛 ([spherical cow](https://en.wikipedia.org/wiki/Spherical_cow))。尤其是文中的假设B (对于攻击能够起作用至关重要) 并未反映Eth2 gossip网络的真实情况。该攻击既依赖于对网络进行分区，又依赖于精确的时间，这两者都很难在实验室外实现。

尽管如此，也有一个[相关的修复建议](https://github.com/ethereum/eth2.0-specs/pull/2101)在讨论中。通过增加验证者发布证明的时间随机性，从而对攻击进行有效防御。我不赞成这样做，因为其依赖验证者的“诚实” (不惜一切代价遵循规范)，而不是“经济合理”行为（验证者出于自己的最大利益而行）。发布证明的时间是一种平衡行为，是尽早发布以将其包含在区块中还是发布得足够晚以确保对正确的区块进行投票，验证者的奖励则取决于是否正确完成这些工作。如果在时间上增加随机性会对奖励机制产生负面影响，那么用户将要求验证者不要采取这种行为，那这个修复方案并未起到任何作用。

[ethresear.ch](https://ethresear.ch/):

- 在以rollup为中心的世界中 (Phase 1.5 and done)，数据可用性非常重要。这是Vitalik提供的[具有Kate承诺的2D数据可用性](https://ethresear.ch/t/2d-data-availability-with-kate-commitments/8081?u=benjaminion)。他还一直致力于[数据采样](https://notes.ethereum.org/@vbuterin/r1v8VCULP)以提高数据可用性，同时不再依赖Eth2中的委员会。

- [关于eth1中eth2分片的费用市场合约](https://ethresear.ch/t/a-fee-market-contract-for-eth2-shards-in-eth1/8124?u=benjaminion)的提案最新出炉。这个想法是让人们竞标将数据放入Eth2分片区块并相应地在Eth1链上收费。

##  &lt;br/&gt;

# 常规会议

## 实现者会议

第50次会议于10月15日进行。

- [会议日程](https://github.com/ethereum/eth2.0-pm/issues/187)
- [会议视频](https://youtu.be/L4Dvlgxku1g?t=119) (前几分钟丢失)
- [我的速记](https://hackmd.io/@benjaminion/HyGGLCBww)

Medalla参与度正在下降，并且不再是最新规范，我们就Medalla测试网的处理方式有一些 (尚未定论的) 探讨。我们可能会对其进行升级，并保留一段时间。最终计划是使得一个小规模的、长期的开发者网络与主网并行运行。

房间中永远的大象无疑是主网的启动日期，我们永远不会在通话中谈论这类话题:joy:

 &lt;br/&gt;

# 其他更新

- [Lighthouse](https://lighthouse.sigmaprime.io/update-30.html)和[Prysm](https://medium.com/prysmatic-labs/prysm-eth2-client-web-interface-now-live-feb278f4aa15)的客户端团队更新

##  &lt;br/&gt;

# 写在最后

如果上述内容显得仓促，我深表歉意。我上周的假期非常愉快，还在[Dartmoor](https://en.wikipedia.org/wiki/Dartmoor)来了一场远足。强烈推荐给大家！

 &lt;br/&gt;

&lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。


</content:encoded></item><item><title><![CDATA[EIP1559的状态更新#2]]></title><description><![CDATA[EIP-1559目前面对的最大困难是以太坊的DoS风险，主网准备清单已发布，各种模拟工作正在开展。]]></description><link>https://www.ethereum.cn/1559-update-002</link><guid isPermaLink="false">https://www.ethereum.cn/1559-update-002</guid><pubDate>Mon, 19 Oct 2020 00:00:00 GMT</pubDate><content:encoded>作者 | [Tim Beiko](https://hackmd.io/@timbeiko/1559-updates/https%3A%2F%2Fhackmd.io%2F%40timbeiko%2F1559-update-002) 

##  &lt;br/&gt;

## 要点速览⬇️

- 我们在AllCoreDevs上再次讨论了EIP-1559。DoS攻击仍然是最终部署的主要障碍，但除此外没有其他大的障碍了；
- 我们还有另一个实现者会议：Besu和Nethermind都正在与1559测试网同步，我们正在调试Geth的共识问题，还有大量的研发工作在进行中；
- [主网准备清单](https://github.com/ethereum/pm/blob/master/Fee)已发布；
- Cat Herder的《[社区扩展报告](https://medium.com/ethereum-cat-herders/eip-1559-community-outreach-report-aa18be0666b5)》已发表！

##   &lt;br/&gt;

## 实现更新⚒️

 上一期的更新后，又已进行了大量工作，仅仅三周的时间！

首先，我们在[第97次AllCoreDev(](https://news.ethereum.cn/wp-admin/post.php?post=2576&amp;action=elementor#diff-49058cd1d689842ad5a93efb31c50abdd3486642bc32b4adb93354df123fd4ac)核心开发者全体会议)上讨论了EIP-1559。我们分享了最新的情况，询问了客户端团队他们认为实现1559最大的障碍是什么，以及在[第77次ACD](https://news.ethereum.cn/wp-admin/post.php?post=2576&amp;action=elementor#eip-1559)后这些障碍是否有改变。

好消息是对EIP-1559没有出现任何新的重要反对声音！有人提出一些小问题，比如EIP的目标有点不明确(是为了改善UX?销毁交易费？增加吞吐量？)，但没有新的、表示强烈反对的观点。规范的最新修改把实现变得非常简单，Nethermind团队感到非常惊讶。

坏消息是以太坊的拒绝服务攻击风险仍然是一个大问题，我们需要在部署1559之前解决。幸运的是，像[EIP-2929](https://eips.ethereum.org/EIPS/eip-2929)这样的工作现在已被纳入到下一次的短期测试网YOLOv2，而“扁平状态数据库”，如[Geth的snapshot加速结构](https://blog.ethereum.org/2020/07/17/ask-about-geth-snapshot-acceleration/)，也有助于解决问题。

第二，我们还开了另一个[1559实现者会议](https://news.ethereum.cn/wp-admin/post.php?post=2576&amp;action=elementor#diff-93ef5835d657a4a7d0a733c62e4a29144dd272541e07065066cd4bea0af9983f)。在该会议里讨论到了多个议题：Besu和Nethermind都正在1559Clique测试网上同步；Vulcanize仍然在调试在Geth上的共识问题；多个模拟场景的工作在进行中；我们准备开始修改JSON RPC规范以支持适应1559的交易。

第三，我汇编了一份[主网准备清单](https://github.com/ethereum/pm/blob/master/)，以追踪EIP-1559在主网上线前所需的准备工作。关于新出现的和已解决的问题，我都会持续更新到清单上。由于以太坊上的事几乎是无法预测的，这份清单应该可以帮助社区了解要使1559上主网的条件成熟，有哪些工作是完成的，以及还需要做什么。

我们目前最大的进展是使[提议#2924](https://github.com/ethereum/EIPs/pull/2924)被纳入到这份规范里。这份提议高度简化了1559！现在，通过把gas price设为base fee和tip的总和，我们可以以适应1559交易的方式来处理遗留交易。这意味着遗留交易将不会被弃用(但会稍给多一点tip[0])，这样我们将不需要一个过渡期，也不需要维持两个平行的交易池。🎉

##   &lt;br/&gt;

## 研发更新🤖

在这个实现者会议里，[Barnabé Monnot](https://twitter.com/barnabemonnot) 详细介绍了他的团队的模拟工作进度。他的[录音](https://youtu.be/SHVfypwL5W8?t=295)值得一听，可以了解更多细节，但简而言之，他的团队正在模拟各种可能的场景，从量化1559的UX效益，到分析用户为了交易更快被打包到区块而试图策略性竞价的行为。

在Jupyter上已发表了两篇notebook([stationnary users](https://nbviewer.jupyter.org/github/barnabemonnot/abm1559/blob/master/notebooks/stationary1559.ipynb)和[strategic users](https://nbviewer.jupyter.org/github/barnabemonnot/abm1559/blob/master/notebooks/strategicUser.ipynb))，我们可以期待来未来几周有更多notebook分享。计划中的模拟清单已经更新到了[主网准备清单](https://news.ethereum.cn/wp-admin/post.php?post=2576&amp;action=elementor#simulations)上。至于更深入的内容，可看Barnabé上周在[Taipei Ethereum Meetup](https://www.youtube.com/watch?v=3pErNDU5BiE&amp;fbclid=IwAR07ICRj62B9H--6SLb2Xda0wy172L2vJIPOW0C15dBF_f8fRNuKwTm1JPg)上对其工作的详细介绍。

另一个值得一提的更新是Vitalik在他的《[以rollup为中心的以太坊路线图](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)》里提到了EIP-1559。EIP-1559对rollup是有助益的，因为rollup依赖链上交易作确认，而EIP-1559会使打包下一笔交易进区块更容易。

##   &lt;br/&gt;

## 社区扩展😺

如上一篇更新提到的，Ethereum Cat Herders已经在社区接触了多个项目，调查他们对EIP-1559的看法，以及让他们回答一些关于EIP-1559的问题。现在Cat Herders已经整理了第一批电话访问与问卷的回答，他们已经发表了第一篇《[社区扩展报告](https://medium.com/ethereum-cat-herders/eip-1559-community-outreach-report-aa18be0666b5)》。这份报告有一份关键结果的概述以及对电话访问中经常被提到的问题的回答。

对于下一个版本的报告，Cat Herders想与更多钱包和交易所的项目团队对话。如果你想在这方面提供帮助，请[在twitter上联系我](https://twitter.com/TimBeiko)。

##   &lt;br/&gt;

## 其他更新📝

- Vitalik发布了关于EIP-1559的[一组新幻灯片](https://vitalik.ca/files/misc_files/EIP_1559_Fee_Structure.pdf)；
- 我上了Bankless的视频系列节目”[State of the Nation](https://youtu.be/FhAr8Upa-Ts?t=957)”，讨论了1559
- 我将参与EthOnline于十月23日举办的”[The Future of Ethereum”峰会](https://news.ethereum.cn/wp-admin/post.php?post=2576&amp;action=elementor#speakers)，届时会介绍1559。

##   &lt;br/&gt;

## 后续工作✅

希望这次更新的内容不会太多！如果你对更新内容有任何建议，请通过Twitter告诉我 (我是 [@timbeiko ](https://www.twitter.com/timbeiko)👋

至于接下来的工作，以下是你在未来几周可以期待的：

- 在Geth &lt;&gt; Besu &lt;&gt; Nethermind 测试网上会有更多的进展，希望会发布一个PoW(工作量证明)网络来测试基于1559的挖矿情况。
- 会有大量的EIP加到JSON RPC规范，以为1559提供支持。[第一份](https://eips.ethereum.org/EIPS/eip-3041)已经发布了！
- Cat Herders会接触更多钱包和交易所项目团队，收集他们对1559的看法。
- 可能会发布更多用于分析不同场景的notebook。

这期内容就这些了！感谢阅读，请期待几周后的更新！😁

[0] 通过把gas price设为fee cap，把tip设为feecap-base fee，所有“多余的预算”都归为tip，而为了适应1559的交易，tip会由发送者来设定，而feecap-base fee-tip的差值会返还给交易发送者。

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权</content:encoded></item><item><title><![CDATA[EIP-1559社区扩展报告]]></title><description><![CDATA[对于项目方来说，为EIP-1559的实现提供支持，有何顾虑？本报告面向社区，针对大家对1559的看法进行调查。]]></description><link>https://www.ethereum.cn/eip-1559-community-outreach-report</link><guid isPermaLink="false">https://www.ethereum.cn/eip-1559-community-outreach-report</guid><pubDate>Thu, 15 Oct 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Cat Herders](https://medium.com/ethereum-cat-herders/eip-1559-community-outreach-report-aa18be0666b5)



 &lt;br/&gt;

**本报告由Tim Beiko 和 Pooja Ranjan合著，同时感谢**William Schwab、Alita Moore和Edson Ayllon为本报告做的努力。

&lt;br/&gt;

# 关键结果

- 各项目对EIP-1559的总体印象在积极和消极之间平分秋色（少数项目持中立态度）。如果我们将矿工排除在外，60%的项目总体上持支持态度，持中立态度的项目比持消极态度的多一倍。
- 对于项目来说，EIP-1559的主要好处是对gas费的可预测性（特别是对那些为用户设定gas费的项目），另一个好处就是在每一笔交易中都会销毁部分ETH。
- 而EIP-1559的一些主要问题包括：其对矿工存在负面影响，难以对该题案进行全面的分析，以及存在一些潜在的实现和工具问题。
- 适当的工具、良好的通信、完善的文档和公共测试网都会使得各种项目加大对EIP-1559的支持，但还有许多项目希望在投入大量时间实现该EIP之前，能对其进行网络升级。
- 钱包和交易所在在参与调查的项目中占比较少。随后的社区扩展应以这两类项目为重点。
- 在我们与各个项目的通话中，反复被提到几个问题。**这些问题在本报告末尾的FAQ环节会给到解答**。

 &lt;br/&gt;

# 背景

在过去的几个月里，[EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)[1] (一项改革以太坊gas费市场的提案) 取得了很大的进展。虽然该提案可以为以太坊带来显著的用户体验和经济利益，但它改变了协议的几个基本部分，包括块头、交易格式和交易池。在[最后一次实现者会议](https://github.com/ethereum/pm/blob/3fc87a2947130a50dec4bddcac1f87e687e9f2b8/Fee)中，强调了更好地理解这些变化对项目的影响以及衡量社区对EIP-1559的看法的必要性。这令我们决定：采用更加有组织的方法来为这项特定的EIP进行社区扩展。

不久之后，Ethereum Cat Herders组织了一份[社区推广问卷](https://forms.gle/9HU8ytJAH8Jsnno76)，并与建立在以太坊上的项目举行了几次1：1会议。会议上我们回答了各个项目对EIP-1559D 一些疑问，收集了他们对提案的反馈，并讨论了该做些什么努力来让他们提供对该提案的支持率。截至2020年10月8日 (周三)，本报告收集并分享了大家在会议上的反馈，并列出了解答。

- 关于EIP-1559的概述，请参阅[最近的阐释文章](https://hackmd.io/@timbeiko/1559-update-001)和[Vitalik写的FAQ](https://notes.ethereum.org/Wjr1SnW-QaST7phX9C5wkg?view)。

#  &lt;br/&gt;

# 调查对象概述

共有25个项目分享了他们对EIP-1559的看法。其中15人通过问卷参与，另外10人通过视频电话与我们分享。大多数项目不希望在报告的末尾被直接提及，还有一个项目希望完全匿名参与，因此其数据不会出现在报告中。

而接受公开的参与项目有：Gitcoin、Argent、Infura、Kyber Network、ethers.js、POAP、TrueBlocks、Bitfly (etherchain.org/beaconcha.in)、Nanopool以及0xBitcoin.

我们要求项目按以下类别划分：链上应用程序、钱包、交易所、矿工以及其他工具或基础设施。

以下是参与调查的项目的分类:





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/LJDQdbr/1.png&quot;/&gt;&lt;/center&gt;















&lt;center&gt;根据各个项目自己划分所得的统计图&lt;/center&gt;

值得强调的是，受访对象中，矿工的占比很高，而钱包和交易所的占比较低。唯一参与其中的交易所是一所去中心化交易所，Kyber Network。在适当的情况下，该报告将把矿工们提供的反馈与其他项目分离开来，以便更加清晰。**随后的社区扩展将着重于交易所和钱包项目**。

  &lt;/br&gt;

# 对于EIP-1559的普遍认识和看法

我们联系的所有项目都表示对EIP-1559有所了解，其中近一半项目一直关注着其最新进展。**大家跟进EIP-1559最新进展的最常见方式是刷推特**。其他比较常用的渠道有：Github、Discord、Ethereum Magicians和EIP-1559实现者会议。几乎每个项目都从不同的渠道来获取EIP-1559的进展更新信息。















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/mhRVBN0/2.png&quot;/&gt;&lt;/center&gt;









当被问及对EIP-1559的总体印象时，有10个项目 (42%) 对EIP-1559整体印象良好，有4个项目 (17%) 持中立态度或因不够了解而无法表态，有10个项目 (42%) 对EIP-1559总体持消极态度。矿工这一群体持有的态度最为消极，8/9 (89%) 的回答是消极的。如果我们将矿工排除在外，那么9/15 (60%) 的受访者对EIP-1559持积极态度。

  &lt;br/&gt;

# EIP-1559的好处

当被问及预计EIP-1559会带来哪些好处时，受访者最常提到的是以下两点:

1. **Gas费的可预测性(提到7次)**: 普遍来说，这些项目十分期待EIP-1559将允许他们可靠地设定正确的gas费。那些专门为用户设定gas费的项目，尤其支持EIP-1559。
2. **销毁ETH (提到5次)**: 销毁base fee作为EIP-1559其中一点好处，即便在受访者本身都不重视这一好处的情况下，该好处也经常被提及 (例如，“人们喜欢EIP-1559，因为它销毁了ETH”)。

除了这两个，他们所提到的其他的好处有：降低了gas费、在网络中更好地激励大家联合起来、不需要给矿工支付额外的交易费用、为用户更快地打包交易。**鉴于EIP-1559并非旨在大幅降低以太坊的费用，因此有必要在以后有关EIP-1559的通信中明确说明这一点。**

  &lt;br/&gt;

# EIP-1559带来的风险

当被问及他们认为EIP-1559有哪些风险时，最常提到的三个风险是:

1. **对矿工的负面影响(提到10次)**:几乎所有受访矿工都提到EIP-1559会对他们产生负面影响，如果该提案通过，他们会考虑在另一条链上挖矿。一些矿工建议1559最好仅作为Eth 2.0的一部分。挖矿方面的其他问题包括: 矿工之间可能互相勾结；矿工们不肯升级他们的客户端以支持EIP-1559；以及如果小矿工被逐出以太坊，挖矿风险将集中化。

1. **难以分析EIP-1559(提到7次)**:第二个主要问题 (如果将矿工的回答排除，则是第一个问题) 是大家难以分析EIP-1559。这是由于下面几个背景: 首先，它缺乏正式的规范或对该机制的证明，人们难以独立评价和批判该提案；再者，EIP-1559涉及以太坊的许多方面且难以预测二级效应；最后，在EIP-1559真正应用到主网且ETH真正质押之前，都不可能恰当地测试EIP-1559激励设计。

1. **实现问题(提到6次)**:客户端和工具级的实现问题是他们所提及的第三大风险。具体来说，受访者担心如果没有针对EIP-1559的标准的API，那么到时处理多个客户端可能要比目前更加困难。当EIP-1559投入使用时，还可能存在工具崩溃的问题，以及工具开发人员能否轻松地对EIP-1559进行一致性测试。

  &lt;br/&gt;

# 其他忧虑

这些问题不一定经常被提及，但值得注意，应列入本报告供实施者和研究人员注意。请注意，我们并没有试图反驳任何这些问题或验证他们的合理性。在整个访谈过程中提出的所有合理的问题都列在这里。

## 有效性方面的忧虑

- 由于base fee会每区块提高5%，因此30分钟后会提高100，000倍。而且在EIP-1559的调整期间和使用峰值之间，网络上会出现不匹配 (通常持续几个小时到几天)。EIP-1559如何帮助下一个UNI代币发行，解决做市商清算危机，等等?
- EIP-1559试图同时做太多的事情:提高用户体验并制造通缩压力。为什么我们不按这两个目标分成两个EIP，以便于分析呢?
- EIP-1559是否减少区块的净可用空间呢?节点将需要硬件能够处理理论上最大的区块，但平均而言，只能处理一半那么大的块。
- 如果人们继续使用遗留交易 (legacy transactions)，而不愿意使用EIP-1559，因为这对他们来说更加简单，那该怎么办呢？

## 挖矿方面的忧虑

- 有可能矿工会互相勾结来决定base fee的高低吗？或者激励用户付更高的gas fee吗？我们怎么证明呢？
- 如果矿工/质押者之间互相勾结，将base fee变为0，他们不会有任何损失。这对用户和生态系统不会造成像51%攻击那样的负面影响。
- 减少对矿工的激励可能导致网络上出现更多的ASIC (专用集成电路)。
- 贿赂代理合约 (BribeProxy contract) 可能会变得普遍，这种合约将更多协议外的费用转到币安上。

## 工具方面的忧虑

- tx.gasPrice操作码会被弃用吗？想要利用EIP-1559而使用此操作码的智能合约需要重写吗？人们经常注意到，虽然重写合约工作量不是很大，但项目需要重新审计合约，这可能造成巨大的成本和延误。
- 对于一些工具，需要大量的工作来实现。在某些情况下，如果他们在最新版本中删除了遗留交易，那么当用户不是很能接受新的交易方式，并且想要继续使用旧版本时，他们很难再回到旧版本。

## 实现方面的忧虑

- 保持这两种交易类型 (遗留交易和EIP-1559交易)为以太坊网络带来更多的复杂性。
- EIP-1559会增加以太坊上DoS攻击的风险吗？
- 这将如何影响交易排序？二阶效应是什么？
- EIP-1559对客户端堆栈的各个部分如devp2p、内存池、数据库等有什么影响？
- EIP-1559尝试在客户端层解决的问题，是否不再需要在共识层做出改变？
- EIP-1559的实现将过于复杂，根本无法投入使用。

## 经济方面的忧虑

- 对于销毁base fee的影响，没有做过经济学方面的研究。
- 为什么要增加5%的base fee，而不是其他数值？
- 在EIP-1559在主网上线之前，缺乏激励解决EIP-1559存在的问题。

## 社区意识形态方面的忧虑

- 如果矿工不想升级客户端以支持EIP-1559怎么办？
- 我们如何确定EIP-1559能够拥有足够多的支持来进行如此巨大的改变？

对于实现者和研究者来说，努力解决这些忧虑是很有价值的。

  &lt;br/&gt;

# EIP-1559的备选方案

当被问及EIP-1559的替代方案时，一些受访者表示唯一的替代方案是[EIP-2593](https://eips.ethereum.org/EIPS/eip-2593)，也就是MetaMask的Dan Finlay提出的“自动扶梯费 (Escalator fees)”。

#  &lt;br/&gt; 

# 实现意愿与障碍

受访者被问到，为了支持EIP-1559,他们需要对他们的项目做出哪些改变，他们期望花多少时间来做那些改变，以及EIP的拥护者是否可以提供任何帮助推进这个过程。

下面列出了受访项目为支持EIP-1559所需做出的改变：

1. 重写区块奖励的计算；
2. 修改处理交易的逻辑，包括更新序列化和解析库；
3. 升级矿池软件
4. 重写合约以使用新的操作码，删除弃用的操作码；
5. 确保对第三方的依赖仍然有效 （例如，Chainlink的预言机）
6. 思考适用于1559的交易，为用户修改“gas抽象化”功能;
7. 升级客户端软件;
8. 更改用于预测gas价格的API;
9. 修改UI以适用于1559的交易；为客户端RPC(远程程序调用)接口的更改做调整
10. 使用支持1559的测试网和其他可用资源来做大量的测试和质量评估
11. 对用于分享区块和交易数据给用户的API做修改

上面提到的大多数更改都是针对具体项目的。为了保护项目隐私，列表综合了受访项目提及的类似修改，并旨在给出一个1559对现有项目影响的定性概述。

当被问到什么会帮助他们优先考虑对EIP-1559的支持时，最常见的答案如下：

1. **测试网(提到5次）**：有一个适合应用使用(例如，有支持1559的 JSON RPC)的公共测试网是大多数项目开展它们实现的第一步。

1. **网络升级集成(提到3次)**: 有多个项目提到它们想在EIP-1559通过网络升级、被广泛接受后才开始它们的实现工作。这些项目觉得实现一些在主网上没有得到保障的东西不值得。
2. **激励(提到3次)**：有几个项目提到如果使用EIP-1559有激励（例如，更低的gas价格）的话，将会推动他们更早实现它。

这些项目还提到其他一些帮助，包括更新工具（例如，ether.js或者支持EIP-1559的web3.js)、客户端里相关的RPC终端、清晰的操作码定义和弃用时间表、一个用来预测下一个区块的base fee的公共API、完善的文档说明、良好的通信、支持通道、以及合理的EIP经济模型。

同样地，受访者被问到什么会导致他们推迟实现EIP-1559。最常见的回答是“没有”（提到7次），表现出支持EIP的强烈意愿。以下是提到的一些潜在忧虑，顺序为被提及的频率：

1. **EIP/规范问题(提到3次)**：如果客户端的早期工作发现了规范里的重大问题，项目方会以此作为危险信号，在问题解决前，延缓支持EIP-1559的实现。

1. **主网部署的不确定性(提到2次)**：类似于有些项目希望EIP-1559被集成到网络升级时会优先使用他们的实现，其他项目也指出，围绕主网集成的不确定性会延迟他们的实现工作。

1. **优先次序(2个提及)**：一些项目提到，与支持EIP-1559相比，他们在做的一些其他功能实现可能会为他们的用户带来更多价值，因此可能会优先那些实现的工作。

1. **欠缺文档资料与支持(提到2次)**：如果对项目方来说，如何为EIP-1559提供支持、如何正确地测试它、以及有问题时应该在哪里报告，这些内容都不清晰的话，有些项目可能会推迟提供EIP-1559支持，直到这些条件都成熟了。

1. **缺乏社区支持(提到2次)**：有些项目提到如果他们了解到社区内对EIP-1559有反对声音的话，他们便不愿为EIP-1559提供支持，因为一方面有可能努力会白费，另一方面他们不想参与到社区内部的争斗中。

 

除了这些以外，被提到的其他担忧还包括：糟糕的测试网支持、缺乏适当的工具、尽可能使用遗留交易的可能性、以及不可能在主网部署前对EIP-1559进行测试。

最后，值得注意的是，一些强烈反对EIP-1559的受访者提到，他们无论在什么情况下都不会实现它的。这样的受访者中有6/7(~86%)是矿工。

#   &lt;br/&gt;

# 实现的时间线

我们问这些项目方：他们什么时候开始提供EIP-1559支持，他们准备投入多少时间来做这件事，以及EIP-1559在主网上线后他们希望看到多长的遗留交易能得到支持。

**你的项目准备什么时候开始提供EIP-1559支持的工作？**





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/9rwtt3G/3.png&quot;/&gt;&lt;/center&gt;











## 

##  

大多数的受访者都希望在EIP上线当前的测试网后开始实现这些变化。很多项目提到尽管EIP对项目开发不会带来重大影响，他们仍然需要重新审计项目的部分代码，这会增加时间与成本的消耗。

这个观点还在另一个问题的回答中得到支持：**“你准备为支持EIP-1559投入多少时间（对一个全职人员来说）？”**



















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dWkKB3H/4.png&quot;/&gt;&lt;/center&gt;











我们在这里可以看到，大多数的项目在提供EIP-1559支持这件事上都希望花相对少的时间。

最后，EIP-1559上线主网后，项目方强烈希望看到尽可能长的遗留交易能得到支持。超过一半的受访者提及EIP-1559上线主网后，他们希望看到超过12个月的遗留交易能得到支持。这证明了EIP-1559的[一个近期更改](https://github.com/ethereum/EIPs/pull/2924)——对遗留交易的长期支持很可能受到社区的广泛欢迎。

**EIP-1559部署到主网后，你希望看到在1559之前多长的交易能得到支持？**









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/2Nhqrqh/5.png&quot;/&gt;&lt;/center&gt;

















#   &lt;br/&gt;

# 结论

这次社区扩展的调查显示，尽管大量的项目方都对EIP-1559感到兴奋，有60%的受访者表示希望看到EIP-1559能在明年部署到主网，但也有一些项目方担心这份EIP还有很多漏洞，且会因为反对这份EIP的矿工而严重倒退。

这么多的忧虑与疑问都强调了EIP-1559需要更多人做解释工作和反驳某些忧虑。最后，受访者明确表示，跨平台的频繁交流、更新工具、支持通道，将大大有助于他们提供EIP-1559支持。

我们希望这份报告对社区是有建设性的！我们[将公开我们的调查问卷](https://forms.gle/xdeQsuHVHfqnroT69)，其他项目可以继续分享他们的想法，我们也试图接触更多的钱包和交易所项目，以增加这两个类别在此扩展研究的样本量。当接受访问的新增项目达到足够的数量时，我们会发布这份报告的更新版本。

#   &lt;br/&gt;

# 常见问题

在与这些项目方进行访问时，有一些问题经常被提出，下面为社区提供这些问题与一些回答。

## 常见的评论与忧虑

**这份提议书背后的目的是什么？**

- EIP文件与Vitalik最近的FAQ列出了一些目的

**有人反对这份提议书吗？**

- 有，如这份调查所示。尽管没有一份详细的反对者列表，但矿工这个群体似乎最为反对。值得注意的是，也有非矿工反对当前版本的提议书。他们的忧虑包括缺乏一份正式的经济分析，或更倾向其他替代方案，例如[EIP-2593](https://eips.ethereum.org/EIPS/eip-2593)。

**就处理交易费问题，是否存在另一份更简单的提议书？**

- 另一份提议书是[EIP-2593](https://eips.ethereum.org/EIPS/eip-2593)，它有助于改善交易发送的UX，但没有引入销毁base fee的 机制。

#   &lt;br/&gt;

# 计划中的变化

 **终端用户可以期待哪些明显的不同？**

- 这份EIP应该使应用开发者可以更容易预测他们交易的gas价格，使用户在大多数时间可以看到他们的交易更快被打包进区块，因为区块几乎一直有额外的空间。

**对智能合约开发者带来哪些变化？**

- 这份EIP会修改区块头——增加base fee字段，更改交易格式——删除“gas价格”字段并引入“fee cap”和“tip”字段。

#   &lt;br/&gt;

# 上线计划

**它将如何铺开？**

- 这份EIP将首先在短期的EIP-1559测试网上铺开。如果它被证实是可行的，它将通过网络升级程序，如果被接受了，将会被部署在现有的测试网和主网上。

**它是向后兼容的吗？**

- 不，这份EIP需要一次网络升级来激活，且节点也需要升级来支持它。

**网络会如何处理遗留交易，会有过渡期吗?**

- EIP的原始版本是有过渡期的，遗留交易在期间被缓慢弃用。而当前版本的EIP将“gas price”改为“fee cap”，并将“fee cap”与“base fee”的差值设为给矿工的“tip”，由此将遗留交易打包进区块。这意味着，这些遗留交易将可能需要多付他们的tip，但会一直得到支持。

#   &lt;br/&gt;

# Gas Prices、Base Fee、Fee Caps和Tips

**EIP-1559会提高/降低gas价格吗？**

- EIP-1559不会使gas价格不断升高或降低。Gas价格是对以太坊区块空间需求的函数。该EIP会使gas价格更易于预测(以及帮助用户避免多付gas费)，但它不会驱使gas的“均衡价格”下降。也就是说，EIP-1559不会使gas价格从300Gwei下降到30Gwei。

**base fee、fee cap和tip分别是什么？**

- **base fee**是一笔交易被打包进区块必须支付的最低gas价格。它取决于区块的空满情况。如果区块空间占用了超过50%，base fee会上涨，如果低于50%，base fee则会下降。base fee是交易费用中被销毁的部分。
- **fee cap**是一笔交易愿意支付的最高交易价格，包括base fee和给矿工的tip。它允许用户将fee cap设为高于当前的base fee，如果他们猜想下一个区块的base fee会上涨。fee cap中超出的部分(fee cap-base fee-tip)返还给用户。
- **tip**是交易费中发送给矿工的部分。

  &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[VITALIK：以ROLLUP为中心的以太坊路线图]]></title><description><![CDATA[Eth2未来的新可能性：执行分片+数据分片+Layer 2。]]></description><link>https://www.ethereum.cn/a-rollup-centric-ethereum-roadmap</link><guid isPermaLink="false">https://www.ethereum.cn/a-rollup-centric-ethereum-roadmap</guid><pubDate>Sat, 10 Oct 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [ethereum-magicians.org](https://ethereum-magicians.org/t/a-rollup-centric-ethereum-roadmap/4698)

&lt;br/&gt;

Optimism团队不久前[发布](https://medium.com/@optimismPBC/light-at-the-end-of-the-tunnel-c390a05bbcb8)了其测试网的第一阶段，及其通向主网的路线图。除此之外，[Fuel](https://medium.com/@fuellabs/announcing-the-fuel-v0-open-beta-565a2d340fc3)也在推进测试网进程，[Arbitrum](https://medium.com/offchainlabs/arbitrum-rollup-is-live-on-testnet-c5fed0d0a266)也已经登陆测试网。在ZK rollup领域中，[Loopring](https://loopring.org/)、[Zksync](http://wallet.zksync.io/)以及基于Starkware技术的[Deversifi](https://www.deversifi.com/)已经正式在主网上线，并且聚集了一定的用户。随着[OMG network](https://webwallet.mainnet.v1.omg.network/)推出其主网bata版本，plasma也有所进展。与此同时，eth1链上的gas费已经达到了新高，以至于[非金融类dapps被迫停止运行](https://medium.com/universal-ethereum/out-of-gas-were-shutting-down-unilogin-3b544838df1a)，[其他](https://zkga.me/)应用也只能在测试网中运行。

Eth2的发展目标之一就是增强扩容性，我们已经非常接近eth2前期阶段了，但要为应用提供基础层扩容性，我们还需要等到数年之后eth2最后一个主要阶段 (译者注：即阶段2) 的实现。讽刺的是，eth2作为rollups数据可用性层的可用性在阶段1就能实现，而在许久之后eth2才能真正用于“传统”的L1应用。将这些事实结合起来，我们可以得出一个结论：**以应对近期和中期的扩容性需求，整个以太坊生态系统需要将发力点集中到rollups上 (以及plasma和通道技术)。**

如果以此为前提，我们就能得知以太坊中心开发和生态系统发展应该优先考虑的问题，而这多多少少与当前的发展路径有所不同。那么我们应该优先考虑哪些问题呢？

###  &lt;br/&gt;

## 短期：推进Eth1基础建设以支持Rollups

在短期内，这样做的一个主要结果在于：**针对以太坊基础层的扩容工作将主要集中于扩大区块的数据容量，而不是优化链上计算或IO操作的效率**。Rollup扩容性的决定性因素在于该链能包含多少数据，如果能够在当前约60 kB/秒的基础上有所提升，rollups的扩容性则能得到进一步优化。

在基础层上，以下因素需要持续重视：

- [EIP 2929](https://ethereum-magicians.org/t/eip-2929-gas-cost-increases-for-state-access-opcodes/4558)：在当前gas情况下保证以太坊区块链能够抵御DoS攻击
- [EIP 1559](https://notes.ethereum.org/@vbuterin/BkSQmQTS8)：一是推动ETH销毁，二是优化交易效率，并且几乎能够确保交易被打包到下一个区块中 (rollups仍然需要等待确认)
- 新的椭圆曲线预编译，以实现对ZK rollups编程的完全支持
- 无状态客户端的相关工作，包括从十六进制树转换为二进制树等 (无论我们如何使用以太坊区块链，无状态客户端都非常有意义)

账户抽象 (account abstraction) 不太迫切，因为无论L1是否支持，我们都能在L2上实现。还有其他“巧妙的基础层功能”目前相对来说都没那么重要。

**Eth1客户端可以被重新定义为optimistic rollup客户端**。Optimistic rollups仍然需要全节点，并且如果rollup的内部状态转换规则本质上仍然是以太坊式的，只是进行了一些修改 (例如Optimism的目标)，那么我们可以使用现有代码来运行全节点。目前[eth1+eth2合并工作](https://github.com/txrx-research/eth1-shard-demo)已经实现将共识引擎从状态转换引擎中分离出来，而这项工作也有助于达成该目标。请注意，这也意味着类似TurboGeth的项目仍然非常重要，高吞吐量的rollup客户端 (而非eth1客户端) 将成为最大受益者。

###  &lt;br/&gt;

## 短期：调整基础设施以支持Rollups

目前，用户的账户、ENS域名、以及应用等等都在L1上，这些都需要改变。我们要将用户的主要账户、余额、资产等等都放在L2中。随之而来的是以下几个需求：

- **ENS needs to support names being registered and transferred on L2**; see [here 54](https://medium.com/the-ethereum-name-service/general-purpose-layer-2-static-calls-proposal-presentation-by-vitalik-buterin-at-ens-online-2d752906719e)for one possible proposal of how to do this.
- **ENS需要对在L2上注册和转移的域名提供支持**，[此处](https://medium.com/the-ethereum-name-service/general-purpose-layer-2-static-calls-proposal-presentation-by-vitalik-buterin-at-ens-online-2d752906719e)是一个可能的相关提案。
- **Layer 2协议应该被集成到钱包中**，而不是网页版的dapp中。目前，集成了L2的dapp或是类dapp (例如集成zksync的Gitcoin) 都要求用户完全信任该dapp，这导致安全性大打折扣。要维持当前的信任模型，L2成为钱包本身的一部分 (metamask, status等等) 是最理想的情况。这类支持应该进行标准化，因此支持zksync支付的应用也能随即兼容内置zksync的钱包。
- **加大跨L2转移的工作力度**，目标是能够即时、无缝进行跨L2链的资产转移。
- 对Yul或其他中间编译语言进行更加明确的标准化。以太坊的基础层EVM和Optimism rollup所使用的OVM作为编译目标稍有不同，但都可以由Solidity编译而成。为了使生态系统存在不同的编译目标，但同时还要接受不同的语言，避免Solidity的单一化使用，因此更明确地对所有高级语言都能编译的中间语言 (例如Yul) 进行标准化或许是有意义的。我们也可以考虑对形式验证友好的中间语言，能够处理诸如变量之类的概念，还能保证基本不变量，从而使所有被编译的高级语言都更易进行形式验证。

###  &lt;br/&gt;

## 以Rollup为中心带来的经济可持续性

加密货币项目必须具备经济上的可持续性，这是无法回避的事实，在2020年这意味着数百万甚至数千万的融资金额。其中的一部分能够由公共物品募资平台提供 (如Gitcoin Grants或以太坊基金会)，但这些机制的规模不足以覆盖这个等级的融资。但是Layer 2项目能够通过发布自己的代币来解决这个问题，前提是其代币具备真正的经济价值，即未来L2所捕获到的价值。

如果路线图以rollup为中心，随之而来的另一个好处是为L2协议留出了开阔的空间，这些L2协议有能力通过收费或是[MEV](https://ethresear.ch/t/mev-auction-auctioning-transaction-ordering-rights-as-a-solution-to-miner-extractable-value/6788)形式来获取发展资金，无论是直接还是间接地 (即代币发行)。以太坊基础层非常需要保持中立，这就使得在协议内进行公共物品募资 (public good funding) 变得十分困难，但L2具备自己的公共物品募资机制，这样一来争议就会大大减少。因此，在这个方面留出空间对于整个以太坊长期的经济可持续性来说可能是一个不错的战略举措。

除了募资问题，具有创造力的研发人员通常都倾向于在他们自己的领域中拥有影响力，而不是针对以太坊的整体协议进行无足轻重的争辩。此外，有许多现有的项目正在尝试创建各种平台。以rollup为中心的路线图使得所有这些项目有机会成为以太坊生态系统的一部分，同时仍能保留高度的经济和技术自主权。

###  &lt;br/&gt;

## **长期视野**

除了上文提到的短期考虑外，路线图以rollup为中心还可能意味着我们要重新构想eth2的长远未来：**每个人都可以进行处理的强安全性单一执行分片，以及可扩容的数据可用性层。**

要理解为什么是这样，需考虑以下因素：

- 当前以太坊的TPS约为15
- 如果大家都迁移到rollups上，TPS很快可以达到3000
- 一旦阶段1到来，rollups的数据存储迁移到eth2分片链上，理论上TPS最高能达到10万左右
- 最后，阶段2实现之后为eth2分片链提供本地计算，TPS达到……1000-5000

**这意味着eth2的“[phase 1.5 and done](https://ethresear.ch/t/phase-one-and-done-eth2-as-a-data-availability-engine/5269)”道路，精简基础层并且工作有所侧重，即共识和数据可用性。**

实际上这对于eth2来说是更好的发展方向，因为**分片数据可用性相对分片EVM计算要安全得多。**虽然分片EVM计算的不诚实多数证明 (dishonest-majority-proof) 验证需要欺诈证明，这需要有潜在风险且严格的2 epoch同步假设，但在异步情况下，数据可用性采样 (如果使用ZKP或多项式承诺) 是安全的。

这将有助于以太坊拥有比其他分片型L2链更强壮的安全模型，而这些分片型L2链都朝着某种形式的分片执行方向发展；[eth2将是功能强大的基础层，强大到足以提供功能逃逸速度 (functionality escape velocity) 就足够了](https://vitalik.ca/general/2019/12/26/mvb.html)。

##  &lt;br/&gt;

## **长期来看eth2的工作重点有哪些？**

- 将不同分片的出块时间错开，从而保证每几百毫秒内都会有某个分片提议区块。这使得在多个分片上运行的rollups拥有极低的延迟性，而链本身没有超低延迟的风险
- 优化并巩固共识算法
- 对EVM进行改动，使其对欺诈证明验证更加友好 (例如，这可能意味着某种“框架”功能，可防止代码脱离沙盒，或允许将SLOAD / SSTORE重新映射，使其能够使用除账户存储之外的其他数据源)
- 对一切进行ZK-SNARK

##  &lt;br/&gt;

## **折衷方案**

如果你并没有被说服接受“phase 1.5 and done”这个发展方向，也有自然的折衷方案：使用少量分片作为执行层 (例如4-8个)，其他的分片则作为数据层。目标是使执行分片的数量足够低，以至于在特殊情况下，常规计算机将能够对所有分片进行完全验证，但是与当前的基础层相比，其空间仍然要大得多。

基础层空间不能被最小化太多，因为用户和应用程序仍然有需求，例如：在rollups之间切换、提交欺诈证明、在ZK rollups中提交零知识证明、发布ERC20代币根合约 (确保大多数用户将在rollups中活动，但基础合约必须有安放之处)。如果每笔交易的成本为140美元，则大大破坏了用户体验。因此，如果有必要的话，使用4-8个执行分片可以显著减轻负担。一台计算机设备仍然可以验证所有分片。如今，验证每13秒产生的eth1区块大约需要200-500毫秒，因此在短时间内验证这种执行的八个线程是完全可行的。我们可以想象客户端采取这些规则：如果网络延迟很低，或者委员会人数&gt; 80％，则可以依靠欺诈证明和委员会，而在特殊情况下直接验证所有分片。

**参考资料：**

Vitalik Buterin在ETHOnline上的[相关演讲](https://www.youtube.com/watchv=r0jtV9mxdI0&amp;list=PLXzKMXK2aHh4sF0ZlCE49Frl4VJq3ME_V&amp;index=12)：

**往期荐读：**

[《简谈Eth 2.0的未来：将分片作为数据可用性层》](https://news.ethereum.cn/shards-as-data-availability-layers/)

[《如何评估六大以太坊Layer-2扩容方案》](https://news.ethereum.cn/evaluating-l2-scaling-solutions/)

[《对比zk-Rollup与Validium》](https://news.ethereum.cn/zkrollup-vs-validium-starkex/)

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[1559的状态更新001]]></title><description><![CDATA[EIP-1559系列的首篇更新，介绍了背景、目前四个方面工作的进展、以及未来的工作计划。]]></description><link>https://www.ethereum.cn/1559-update-001</link><guid isPermaLink="false">https://www.ethereum.cn/1559-update-001</guid><pubDate>Wed, 30 Sep 2020 00:00:00 GMT</pubDate><content:encoded>作者 | [Tim Beiko](https://hackmd.io/@timbeiko/1559-update-001)

&lt;br/&gt;

# 要点速览!👀

- EIP-1559会给以太坊的费用市场带来重大影响。它会使得交易费用更可预测，处理激增需求更高效，并在网络使用率和网络价值间建立积极的反馈循环。
- EIP-1559的进展：客户端实现、模拟、博弈论分析和社区扩展都在推进中。
- 下一次的实现者会议将在10月8日进行，届时会讨论“mainnet readiness checklist”（准备上主网的检查清单）。

##  &lt;br/&gt;

# 背景

由于这是关于EIP-1559的第一期更新，还是有必要介绍一下EIP-1559的背景。如果你对这份EIP非常熟悉，可以跳过这一部分。😁

[EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)是Vitalik于2019年提出的，并从那时起就得到很多人的支持。它旨在提高以太坊费用市场的效率。简而言之，它希望将区块扩大到现在的两倍，但保持只使用容量的一半。这意味着网络总有额外的容量来处理区块空间需求的激增问题[0]。EIP-1559通过追踪最低的gas费来实现这一点，最低的gas费即BASE FEE，一笔交易被打包到区块必须支付的费用。当一个区块所用容量超过50%时，BASE FEE会上升，而当一个区块所用容量低于50%时，BASE FEE会下跌。

当需求激增时，区块容量在短时间内会变成原来的两倍，直到BASE FEE上涨至用户不愿支付如此高昂的交易费[1]。此时，BASE FEE会下降至它之前的水平，网络会以现在两倍的速度处理所有这些交易。🎉

我们还会将BASE FEE硬编码到区块头，使用户在发送交易时更容易预估他们要支付的gas费。

但你可能会想，矿工难道不会想保持高的BASE FEE以从每个用户那里赚取高的交易费用吗？!🔥为了避免这种情况，我们会销毁这部分的交易费。这意味着矿工将不在乎BASE FEE的高低。为了激励他们处理交易而不是挖空的区块，我们引进了第二项可选费用——TIP。

最后，销毁BASE FEE在网络使用率和网络价值间创建了积极的反馈循环。随着更多人希望使用网络，BASE FEE升高，这意味着每个区块里有更大量的ETH会被销毁。这通过减少可用ETH的供应量间接影响了网络价值。[2]

关于EIP还有很多细节，但它们都超出了这篇更新的范围。读者们可以通过[Vitalik最近的FAQ](https://notes.ethereum.org/Wjr1SnW-QaST7phX9C5wkg?view)、[EIP’s EthMagicians](https://ethereum-magicians.org/t/eip-1559-fee-market-change-for-eth-1-0-chain/2783)!🧙‍♂️、和[实现者之前的会议笔记和视频](https://github.com/ethereum/pm/blob/master/Fee Market Meetings/README.md)里了解更多。

##  &lt;br/&gt;

## 目前的状态!⚒️

### **一点背景**

如上文提到，EIP-1559首先在2019年提出。EIP-1559的第一批产出中有一项是一年前做的[一份实现研究](https://docs.google.com/document/d/1yqvvfrQ_He0fN1SsUcvZNBdyhv__d8-1QPyteCbNT6Q/edit)。该研究强调了在go-ethereum代码库中用于支持EIP-1559所需的所有更改。研究出来后不久，[Vulcanize.io](http://vulcanize.io/)团队就开始了在客户端上部署实现。

在接下来的几个月里，EIP-1559在AllCoreDev （核心开发者全员会议）里多次被提到，并在2019年最后一次会议[ACD#77](https://news.ethereum.cn/wp-admin/post.php?post=2533&amp;action=elementor#eip-1559)里得到最实质性的讨论。***\*在此次通话中，大家重点讨论了EIP-1559为攻击者对网络发起DoS攻击创造更多空间的风险。因为区块可以被扩大到目前大小的三倍（现在是两倍），任何拒绝服务攻击的成功率也会变成现在的三倍（现在是两倍）。\****

今年年初，ConsenSys的Protocol团队同意协助推动EIP-1559发展，他们将为Hyperledger Besu提供另一个实现、协助项目管理、和帮助测试网络是否能负荷处理这些特大区块。

从那起，关于EIP-1559有四个方面的工作在开展中：实现、模拟、形式分析、以及社区扩展。

### **实现**

现在，[Besu](https://github.com/hyperledger/besu/labels/EIP-1559)和[Geth](https://github.com/vulcanize/go-ethereum-EIP1559/tree/eip1559_rebase)都有针对EIP-1559的实现。已经有两项实现有助于发现EIP中一些未被详细说明的地方、每项实现中的漏洞，并有望很快证明EIP-1559在简单的环境中是可行的 [3]。

随着我们解决实现的细节漏洞，我们将准备测试更多复杂的场景，比如工作量证明网络、加入更多的客户端、和处理大区块，来更好地理解EIP-1559对每个节点以及网络的影响。

### **模拟**

除了实现方面的工作，以太坊基金会的[Robust Incentives Group](https://github.com/ethereum/rig/tree/master/eip1559)也一直在进行基于代理的模拟工作。模拟的目标是要分析在一揽子不同的使用模式下，比如网络正常运行、使用激增、用户基于BASE FEE的历史数值而策略性地提交交易等，EIP-1559将会如何反应。

从这些模拟中得到的经验可以帮助我们主动修改EIP的规范，并希望帮助我们在把EIP-1559[部署到主网](https://github.com/barnabemonnot/abm1559)时避免犯错。读者可以在[这里](https://github.com/barnabemonnot/abm1559)看最新的模拟。

###  **形式分析**

尽管实现和模拟为EIP-1559提供正面的经验数据，它们无助于在理论层面上完善EIP-1559。简而言之，我们希望确保EIP-1559的设计是符合博弈论的，最好是最佳的。

为了实现这点，[世界顶尖的机制设计研究员](https://en.wikipedia.org/wiki/Tim_Roughgarden)Tim Roughgarden已签约参与评估EIP-1559提出的费用市场机制，并将其与以太坊目前的费用市场以及其他提议，比如“[escalator费](https://eips.ethereum.org/EIPS/eip-2593)”，做对比。

此项研究的目标是证明EIP-1559能如设计般可行，或对机制提出修改以把它变得更强健。

### **社区扩展**

EIP-1559是对以太坊改动最大的提议之一，它对协议的几个基本层面（交易、区块等）提出改变。为了动员社区成员关注这个提议，Ethereum Cat Herders社区已经开始接触社区里的不同项目，了解它们对EIP-1559的看法，以何种方法铺展开来对他们来说最方便，以及他们是否对这个提议有任何大的异议。

这些Cat Herders为想为这个提议做贡献的人设计了[一份调查问卷](https://forms.gle/1EyKYCKW6UjkC6Af8)，并与一些EIP-1559会影响到的项目团队进行一对一的对话。当他们在各个领域（dapp、钱包、交易所、基础设施、矿工等）咨询了足够大量的项目时，他们会发表一份报告，与实现者、研究者和其他核心开发者分享社区的反馈。

##  &lt;br/&gt;

## *后续工作*✅

内容真多！我们希望在第一篇更新充分交代背景，那么以后的更新可以更简短，并更专注在增量进展或新方案。

下面是大家在接下来几周要关注的一些事：

- 我们下一次实现者会议安排在10月8日;
- 基于与各种利益相关者的对话而列的关于EIP“准备上主网”的检查清单[4];
- 社区扩展研究的结果;
- Besu和Geth上的实现的更多进展，同时还有更多潜在的客户端团队开始着手他们的实现.

请期待我们下一篇文章对以上内容的更新!👋

感谢Danny Ryan和James Hancock对这篇文章的草稿提出宝贵的意见。

&lt;br/&gt;

## **脚注**

[0] 比如，当一个受欢迎的DEX宣布它将对它数以万计的用户空投治理币!😅。

[1] 当区块容量满了或是空的时候，每个区块的BASE FEE最多可以增加或减少12.5%，这意味着满的或空的区块的gas价格大概需要5分钟来上/下调整10倍、10分钟调整100倍、15分钟调整1000倍……

[2] 很明显，影响网络价值的因素还有很多，ETH的价格一直都是不稳定的。没有人能保证EIP-1559会比现在带来更高的网络价值。网络价值是供需关系的一个函数，而EIP-1559只影响供应。

[3]现在用于Geth和Besu实现的测试网只有少数的节点，运行的是Clique共识算法，和使用简单工具来给网络发送高峰时的交易。

[4] 因为日期不适用于记录以太坊世界的事宜，我们认为最有用的方式是在我们把它部署到测试网或主网之前，把所有与1559相关的东西都文档化，以此来记录它的进展。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[YIELD FARMING 调查报告]]></title><description><![CDATA[Yield farming的热潮是否可持续？Farmer是否理解其中的风险和利益？散户的最大痛点？]]></description><link>https://www.ethereum.cn/yield-farming-survey-2020</link><guid isPermaLink="false">https://www.ethereum.cn/yield-farming-survey-2020</guid><pubDate>Wed, 30 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [CoinGecko](https://www.coingecko.com/buzz/yield-farming-survey-2020?locale=en)









&lt;br/&gt;



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/sJ6WnPB/1.jpg&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;









加密货币领域一直在以惊人的速度发展，近90天内的新增长领域当属Yield Farming。

Yield Farming指的是用户将资产放入不同的DeFi协议中以获取最佳收益。通过采取不同风险程度的不同策略，“耕农”(farmer) 们可能获得高达1000%的年化收益 (APY)。

Yield farming兴起于Compound为平台借贷者推出[COMP](https://www.coingecko.com/en/coins/compound)流动性挖矿激励。自此之后，许多其他的DeFi协议也采取了yield farming策略，例如Balancer (BAL)、Yearn.Finance ([YFI](https://www.coingecko.com/en/coins/yearn-finance))、Curve.Finance ([CRV](https://www.coingecko.com/en/coins/curve-dao-token)) 以及SushiSwap ([SUSHI](https://www.coingecko.com/en/coins/sushi)) 等等。

根据我们的数据，[yield farming代币的总市值](https://www.coingecko.com/en?category_id=65&amp;view=market)达到了35亿美元，其中截至9月21日，YFI占比25%。据DeFiPulse统计，DeFi总锁仓量已经超过90亿，与今年7月相比增长了三倍。

然而，yield farming并不像看上去那么简单。只有DeFi资深玩家知道如何正确获利，因为这个游戏需要密切监控并不断调整策略。

CoinGecko希望通过通过以下三个方面对yield farming有更深的理解：

- Yield farming的热潮是否可持续？
- “耕农”们是否清楚相关的风险和利益？
- 散户想要成为“耕农”的最大痛点是什么？

因此，我们在8月对1347名受访者进行了调查，得到了以下四个主要发现：

1. 23%的受访者在过去60天内参与过yield farming，说明这仍然停留在小众群体中，但呈扩散趋势
2. “耕农”的每种yield-farming代币占其代币持有量的比重低于10%
3. 52%的“耕农”投入的资本低于1000美元，高额gas费成为了最大的顾虑之一
4. 40%的“耕农”不理解智能合约及相关风险

点击[此处](https://landing.coingecko.com/yield-farming-survey/?utm_source=buzz&amp;utm_campaign=report&amp;utm_medium=buzz&amp;utm_term=yield-farming-survey&amp;0=)下载Yield Farming调查报告。

####  &lt;br/&gt;

### 关键发现 #1：23%的受访者在过去60天内参与过yield farming，说明这仍然停留在小众群体中，但呈扩散趋势







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ZM3Q3YJ/2.jpg&quot;/&gt;&lt;/center&gt;











在调查中，我们发现耕农群体仍然在加密货币用户中占少数，1012名受访者中只有312人参与其中，其他用户只是有所耳闻。受访的耕农群体主要由30-59岁的男性构成。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VjsxhHB/3.jpg&quot;/&gt;&lt;/center&gt;









这个结果是意料之中，因为在加密货币领域男性群体比较庞大。再者，用户需要拥有一定的加密货币背景和经验才能参与到yield farming中。

然而，尽管yield farming热潮大概在3个月前开始，且“耕农”的数量较为可观，但这种牟利机会只是对老练的DeFi玩家来说。

**关键要点**：Yield farming只是一个小众游戏，面向群体是那些熟悉金融收益率并且在加密行业已经工作一段时间的人。他们熟悉现存的以及新的DeFi协议，并制定高效的流动性挖矿策略。

&lt;br/&gt;

### **关键发现 #2：“耕农”的每种yield-farming代币占其代币持有量的比重低于10%**

为了了解“耕农”们多样化的投资组合，我们深入挖掘了他们目前持有的币种。他们通常都是经验丰富的加密领域的玩家，在他们的投资组合中[ETH](https://www.coingecko.com/en/coins/ethereum)占83%，[BTC](https://www.coingecko.com/en/coins/bitcoin)占74%，还有一部分其他DeFi代币。

值得注意的是，通过yield farming流动性挖矿形式获得的DeFi代币占farmer总资产不到10%。比如说，虽然Chainlink的代币[LINK](https://www.coingecko.com/en/coins/chainlink)只能通过Yearn协议，在Yearn库中挖得，但大部分人主要在交易所购买，而不是通过提供流动性挖得 —— 它的APY比其他一些流动性挖矿项目低得多。

关键要点：在他们的投资组合中有一小部分是yield farming代币，这可能表明这些代币正被锁在不同流动性挖矿项目的智能合约中。另一方面，我们发现“耕农”们在池子里挖出了大量的代币后，会进行抛售行为，这表明yield farming代币不是为他们长期持有的。

####  &lt;br/&gt;

### 关键发现 #3：52%的“耕农”投入的资本低于1000美元，高额gas费成为了最大的顾虑之一





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/10ftWVX/4.png&quot;/&gt;&lt;/center&gt;









为了了解“耕农”们在参与yield farming时的行为，我们问了以下几个问题：

1. 他们每笔交易的平均gas费是多少？

1. 他们首次参与流动性挖矿时，投入的第一笔资金有多少？

1. 他们在进行yield farming时会使用杠杆吗？

1. 他们有在yield farming中获得回报吗？

我们发现，超过一半的“耕农”投入了1000美元以上的资金参与流动性挖矿，且大部分人没有使用杠杆。其原因尚不清楚，这是否因为耕农们不想承担额外的风险 (许多yield farming协议都是未经审计的，并且他们自己还不会看合约)。

然而，那些投入资金低于1000美元的“耕农”们可能没有获得同样多的利润，因为在流动性挖矿中，除了会产生诸如无常损失等其他相关风险以外，资金池与协议之间的持续交互将会产生昂贵的gas费。

不管怎样，此次调查中“耕农”们表示其投资回报率(ROI)高达500%。这个结果并不令人惊讶，因为目前许多新池的APY都超过了1000%。我们认为，流动性挖矿提供的高收益率是不可持续的，因为其中的风险很高，而且gas费的飙升将成为耕农们进入和退出流动性挖矿的阻碍。

关键要点:高昂的gas费可能会阻碍散户的参与，他们的投资回报率可能不如投资超过1000美元的耕农们高。

####  &lt;br/&gt;

### 关键发现 #4：很大一部分的“耕农”不理解智能合约，尽管他们声称了解相关风险





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1LjdSH9/4.jpg&quot;/&gt;&lt;/center&gt;











让我们震惊的是，大量的“耕农”看不懂智能合约 (占40%)，甚至不知道什么是无常损失 (占33%)，这意味着他们并不知道他们真正的投资回报率，而且是为了获取高回报的极端冒险者。

也许这就是为什么49%的“耕农”普遍对未经审计的智能合约持谨慎态度，并依赖智能合约审计员来检查合约的安全性。然而，审计公司一次又一次地表示，审计并不能保证合同是安全的，“耕农”们应该尽可能地采取预防措施。

关键要点：“耕农”们在任意一个池进行流动性挖矿时，都应该进行研究。因为市面上有更多的山寨流动性挖矿项目，这些项目很有可能给他们带来更大的风险，如代码漏洞或骗局。

####  &lt;br/&gt;

### 以下是本次调查报告的关键要点总结：

关键要点 #1：Yield farming只是一个小众游戏，面向群体是那些熟悉金融收益率并且在加密行业已经工作一段时间的人。他们熟悉现存的以及新的DeFi协议，并制定高效的耕农策略。

关键要点 #2：在他们的投资组合中有一小部分是yield farming代币，这可能表明这些代币正被锁在不同流动性挖矿项目的智能合约中。另一方面，我们发现farmer们在池子里挖出了大量的代币后，会进行抛售行为，这表明yield farming代币不是为他们长期持有的。

关键要点 #3:高昂的gas费可能会阻碍散户的参与，他们的投资回报率可能不如投资超过1000美元的耕农们高。如果他们受到无常损失影响，他们将会损失一定的资本。

关键要点 #4：“耕农”们在任意一个池进行流动性挖矿时，都应该进行研究。因为市面上有更多的山寨流动性挖矿项目，这些项目很有可能给他们带来更大的风险，如代码漏洞或骗局。

####  &lt;br/&gt;

### 结论

回到我们调查的最初目标：

- Yield farming的热潮是否可持续？
- “耕农”们是否清楚相关的风险和利益？
- 散户想要成为“耕农”的最大痛点是什么？

我们的观点是，高收益率的流动性池是不可持续的，但yield farming产品应继续发展。现在很明显的是，Uniswap在9月17日引入的yield farming资金池使流动性挖矿热潮更为稳定。事实上，它不仅是一阵热潮而已，而是已经成熟了许多的模式。

然而，在过高的gas费降下来之前，散户们很难在不损害其资本的情况下参与流动性挖矿，更别说还要考虑其他相关风险，如无常损失。

我们还鼓励用户们在参与任何流动性挖矿项目之前，学习如何读懂智能合约，熟悉相关的风险和收益。虽然我们很想做一个Degen*，充分利用这波高收益池的热潮。但是在这个周期里，很多项目都是通过无差别的产品开发，没费多大力气就搭上yield farming的顺风车，用户的下行风险更加突出。

*Degen是“堕落(degenerate)”的缩写，常用于加密领域，指为了获得巨额回报而承担巨大风险的交易者。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#17]]></title><description><![CDATA[信标链主网上线前最后一次存款及创世演练，Spadina Launchpad已上线，可进行质押。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-17</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-17</guid><pubDate>Wed, 23 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/09/22/eth2-quick-update-no-17/)


&lt;br/&gt;

![双周刊更新速览封面.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)


&lt;br/&gt;


# 要点速览

- [Spadina Launchpad](https://spadina.launchpad.ethereum.org/)已上线，Spadina测试网将在9月29日创世
- [存款CLI审计](https://github.com/trailofbits/publications/blob/master/reviews/ETH2DepositCLI.pdf)由Trail of Bits完成
- 发布[EIP 2982：Serenity阶段0](https://github.com/ethereum/EIPs/pull/2982)

##  &lt;br/&gt;

# Spadina Launchpad上线

[Spadina Launchpad](https://spadina.launchpad.ethereum.org/)已于9月22日上线

Spadina测试网是一个让大家进行快速演练的eth2测试网，将于9月29日上线，运行时间只有三天。如果读者有兴趣在主网启动前对存款和创始进行最后一次演练，那么请别犹豫参与Spadina测试网，快来提交存款吧！[此处是上周的快速更新](https://news.ethereum.cn/wp-admin/post.php?post=2511&amp;action=elementor#spadina-dress-rehearsal-just-around-the-corner)，可以详细了解Spadina相关信息。

如果这是你首次参与的eth2测试网，请务必进入[EthStaker Discord](https://discord.gg/e84CFep)获取相关信息，还可以选择一个想要使用的客户端，然后进入相应的客户端discord频道。

##  &lt;br/&gt;

# 存款CLI审计已完成

Eth2社区目前正在进行一系列的审计工作，包括规范、密码学库、客户端以及命令行工具。

我们很高兴地宣布，[Trail of Bits](https://www.trailofbits.com/)刚刚完成了对[eth2.0-deposit-cli的审计](https://github.com/trailofbits/publications/blob/master/reviews/ETH2DepositCLI.pdf)，这是我们希望爱好质押者可以与Launchpad一同使用的[工具](https://github.com/ethereum/eth2.0-deposit-cli)。Cli开发团队目前正在研究报告中的十个发现和代码质量建议。读者可以在[此处](https://github.com/ethereum/eth2.0-deposit-cli/milestone/3)追踪其进度。

除了这个审计，还有许多与Eth2客户端软件相关的审计正在进行中。读者可以根据[这个issue](https://github.com/ethereum/eth2.0-pm/issues/176)来追踪最新的开发进展。

##  &lt;br/&gt;

# EIP 2982

上周，我和Vitalik发布了[EIP-2982：Serenity阶段0](https://github.com/ethereum/EIPs/pull/2982)。

尽管这在编辑者中[引发了一些争论](https://news.ethereum.cn/wp-admin/post.php?post=2511&amp;action=elementor#pullrequestreview-489698517)，但EIP 2982的发布✅、最终1.0版本主网参数的选择以及存款合约的发布 (时间待定，但预计很快) 是主网上线之前的一些最终步骤。

Eth2阶段0主网即将到来，相关参与者都在为主网上线进行最终的准备工作。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/9/19）]]></title><description><![CDATA[信标链以EIP-2982形式提交，降低早期验证者惩罚力度；Spadina测试网即将上线。]]></description><link>https://www.ethereum.cn/wnie2-2020-9-19</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-9-19</guid><pubDate>Mon, 21 Sep 2020 00:00:00 GMT</pubDate><content:encoded>
来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200919)



&lt;br/&gt; 

# 生态荐读

来自Danny Ryan的《[eth2更新速览#16](https://blog.ethereum.org/2020/09/14/eth2-quick-update-no-16/)》，Danny还写了一首俳句小诗。还有Danny和Vitalik发布的[EIP 2982](https://github.com/ethereum/EIPs/blob/5dc1b8ddd645af01c81da8817b6bcc8ff883b9d6/EIPS/eip-2982.md)。

&lt;br/&gt;  

# 阶段0：信标链

## EIP-2982

也许这周热议最多的事件就是&quot;**Serenity**&quot;以EIP（以太坊改进提议）的形式被提交，对Eth2信标链做出了正式描述。Danny和Vitalik于9月17日创建了[EIP-2982：Serenity阶段0](https://github.com/ethereum/EIPs/blob/5dc1b8ddd645af01c81da8817b6bcc8ff883b9d6/EIPS/eip-2982.md)。

这是个好消息，也是一个里程碑，但仍然引起了一些争议。争议并不在于[Serenity](https://twitter.com/evan_van_ness/status/1306101572900999171)本身，而是关乎治理程序：这真的[算是](https://news.ethereum.cn/wp-admin/post.php?post=2497&amp;action=elementor#pullrequestreview-489698517)EIP吗？

我能理解将信标链纳入当前以太坊治理流程范围内的想法。文档中贯穿强调了Eth2是针对Eth1的升级，并且尝试将两者紧密联系在一起。因此使用了Serenity这个名称。(从[一开始](https://blog.ethereum.org/2015/03/03/ethereum-launch-process/)Serenity就是作为以太坊继Frontier、Homestead、Metropolis之后的第四阶段实现，Eth2无疑是Eth1的演进)

然而在这一点上，也许除了其说明性功能，我同意这并不算是一个EIP的说法。事实上，在阶段0和阶段1，Eth2在技术上完全脱离了Eth1协议。EIP中也证明了这一说法，“eth2早期阶段的执行不会破坏当前以太坊主网的共识”。Eth2不会作为Eth1核心开发者会议的话题，并且暂时也将不会受到Eth1治理程序的约束。(至于Eth2的治理流程，这完全是另一个话题。但这个EIP会设立一个先例，我们必须将每个Eth2协议决策都纳入当前的EIP。我不确定我们是否为此做好了准备) Eth1和Eth2将在阶段1.5中进行合并，到那时肯定会有大量相关EIP产生，这样做就没有任何问题。

话说回来，EIP-2982中包含了一些之前尚未涉及的有趣信息。**惩罚和罚没金额最初会低于当前规范中所定义的数量：**

- 在网络停止敲定区块时期，受影响的验证者因为inactivity leak受到惩罚的金额减至规范定义的1/4
- 当发生大量罚没事件时，罚没金额减至规范定义的1/3
- 验证者由于行为不端受到罚没的最低金额从1 ETH降低至25 ETH

**这些措施旨在降低早期验证参与网络的风险。计划在信标链运行五个月后将其重置为规范参数。**

EIP-2982是本周[Ethstaker Studymaster的测试题目](https://www.reddit.com/r/ethstaker/comments/ivu26u/quiz_5_for_the_eth2_studymaster_is_live_its_based/)。

## Spec v0.12.3

[0.12.3版本规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.12.3)已经推出，名为[Sindhudurg](https://twitter.com/adiasg/status/1306981249752289281)。没有包含重大更改，主要内容在于添加了处理弱主观性的指南，并且将Solidity版本的存款合约重新纳入规范。阶段1持续开发中，目前已经包含了测试矢量。

很快（“几周而不是几个月之后”）将会推出一个1.0版本规范，其中将包括上述针对惩罚措施的相关更改，以及对BLS标准的细微改动。到那时我们就做好了规范上的准备。!🚀

## Spadina测试网

Spadina是位于[多伦多的一个地铁站](https://www.google.com/maps/place/Spadina/@43.6673526,-79.4060234,17z/data=!3m1!4b1!4m5!3m4!1s0x882b349630bf698b:0xe2dff45d0c512e39!8m2!3d43.6673526!4d-79.4038347)，离[Chainsafe](https://www.google.com/maps/place/ChainSafe+Systems/@43.65177,-79.3994715,17z/data=!3m1!4b1!4m5!3m4!1s0x882b34c3600861ff:0xf3b7658559d0f3b5!8m2!3d43.65177!4d-79.3972828)的办公地点不远。在几周内即将上线的[短时测试网](https://github.com/goerli/medalla/blob/master/spadina/README.md)将以此命名，用于试跑存款和创世流程。

Spadina计划创世日期是UTC时间9月29日中午，其对应的Launchpad门户将于本周上线。不需要注册几百个验证者，但是如果大家能够使用不同的客户端来运行一两个节点，这将对Launchpad和客户端团队的创世测试非常有帮助。更多信息请参阅[Danny的文章](https://blog.ethereum.org/2020/09/14/eth2-quick-update-no-16/)。

Spadian测试网预计只会运行一两天。[Beaconcha.in](http://beaconcha.in/)浏览器[已经就位](https://spadina.beaconcha.in/)。

## BLS规范更新

[BLS签名规范](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/)已经升级到04版本。对我们来说最大的改动在于不再允许私钥为零。这个改动来自于一次关于Blst库的[讨论](https://github.com/supranational/blst/issues/11)。[此处](https://news.ethereum.cn/wp-admin/post.php?post=2497&amp;action=elementor#BLS-news)是更多背景资料。无论如何，我们的原则就是遵循标准，这只是一次无伤大雅的改动，所以我们计划采纳。

[Blst](https://github.com/supranational/blst)是一个专门用于BLS的高性能库，使用了BLS12-381曲线。一些客户端已经采用了Blst，也包括Teku。好消息是在接下来的九个月里，Blst库会[经历形式化验证](https://galois.com/blog/2020/09/announcing-the-blst-bls-verification-project/)。

除此之外，以太坊基金会也在为Blst代码库寻求[审计](https://notes.ethereum.org/@djrtwo/blst-rfp)，期限比较短。问题报告已经关闭，裁定也会在一周内返回。

## 工具

Aditya的[Kofta](https://github.com/adiasg/kofta)共识算法可以在实现[秘密共享验证者](https://medium.com/coinmonks/secret-shared-validators-on-ethereum-2-0-ea29ab380016)时发挥作用。

有多个团队都在致力于远程签名器，有些包含了罚没保护机制：

- 新的[ETHPOS Remote Signer](https://github.com/ethpos/remote-signer-ts)，运行在Prysm中
- Attestant的[Dirk](https://www.attestant.io/posts/introducing-dirk/)
- Blox Staking的[Key Vault](https://github.com/bloxapp/key-vault)
- ConsenSys的[Web3Signer](https://github.com/PegaSysEng/web3signer) (罚没保护在路上)

有一个安卓应用似乎不错， [Ethereum 2.0 Validator Monitor](https://www.reddit.com/r/ethstaker/comments/iosnky/ive_published_a_free_app_on_android_which/)。我正在试用，我的验证者两周以来都正常运行，所以还不确定该应用是否有用。

&lt;br/&gt; 

# 竞赛场

目前有一些不完全属于技术范畴的Eth2赏金。

首先是[Eth2 Medalla数据挑战](https://ethereum.org/en/eth2/get-involved/medalla-data-challenge/)，将于2020年10月20日截至。对Medalla测试网的数据进行分析或可视化，就有机会获得高达1.5万美元的奖金！[Ethstaker Discord](https://invite.gg/ethstaker)的#medalla-data-challenge channel是一个不错的入口，大家可以在里面获取网络各种数据转储的链接。

还有[Ethereum 2.0 POAP设计大赛](https://medium.com/@poap/ethereum-2-0-poap-design-contest-ca2d42ce69c5)。胜出的设计可将1000 DAI收入囊中。

既然说到了POAP，参与Medalla测试网的[POAP奖励](https://www.reddit.com/r/ethstaker/comments/ith0h1/medalla_client_poap_awards_broken_down_by_fair/)已经分发，大家现在已经可以[领取](https://poap.delivery/medalla/)了。这是激励大家运行不同客户端的一种倡议。我的小孩小时候为了一张贴纸在所不辞，事实证明成年人也不例外。将参与方式游戏化是非常好的创意！

 
&lt;br/&gt; 

# 文章及其他资源

译者注：获取原文章链接请点击“阅读原文”

Attestant的Jim McDonald在几个指标上对三个信标节点客户端的性能进行了[细致评估](https://www.attestant.io/posts/evaluating-beacon-nodes/)。!😉

Somer Esat继续更新了他的系列教程，这次是[Nimbus的指南](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-nimbus-5f4b2b0f2d7c)。这些指南能够帮助Linux系统用户设置多种不同的客户端。Anett也撰写了一篇在MacOS上运行Lighthouse客户端的[非技术性教程](https://hackernoon.com/how-to-run-an-eth-20-beacon-node-using-the-lighthouse-macos-client-7t2u3wtv)。

Lighthouse团队上周进行了一次[Reddit AMA](https://www.reddit.com/r/ethfinance/comments/is9kt9/ethfinance_ama_series_with_sigma_prime_lighthouse/)。

MyCrypto的伙伴们也发布了一篇高质量的Eth2介绍文章：[《白话ETH2.0：你需要知道什么？》](https://medium.com/mycrypto/eth2-0-everything-you-need-to-know-eb32fbfe0bd)。[ECN](https://twitter.com/Ethereum_CN)对此进行了[中文翻译](https://news.ethereum.cn/eth2-0-everything-you-need-to-know/)，除此之外他们还翻译了[Bankless的Eth2验证者教程](https://news.ethereum.cn/guide-becoming-a-validator/)，以及我有关[Shuffling (混洗) 算法](https://news.ethereum.cn/shuffling/)的文章。

Eth2相关的解释性文章也是交易所和staking服务商可用的营销素材。我最近有看到一些，比如说[Stakefish](https://medium.com/stakefish/deeper-dive-into-ethereum-2-0-part-1-93c475a18735)和[Luno](https://www.luno.com/blog/en/post/ethereum-2-0-what-we-know-so-far)。

[应大家的强烈呼声](https://twitter.com/aantonop/status/1306302847722631169)，Andreas开始行动了！本来是今天，但我错过了，还没有机会观看。此处是视频链接《[彩蛋直播之ETH2.0](https://www.youtube.com/watch?v=dCzNaD29s8s)》。已经有超过3500次观看，难以置信。

&lt;br/&gt; 

# 研究工作

本周与Eth2有关的一件事引起了我的注意：可证明的单一秘密领导人选举 ([Provable Single Secret Leader Election](https://ethresear.ch/t/provable-single-secret-leader-election/7971?u=benjaminion))。单一秘密领导人选举是在过去18个月中取得了巨大进展的领域，直到2019年3月还没有切实可行的实现方法，但是自那以后一直取得稳定的进展，现在看来是可实现的。

单一秘密领导人选举能够解决Eth2的一大挑战。目前来看，区块提议者提前两个epoch (13分钟) 就会被网络知晓。这就为攻击者提供了机会，如果攻击者能够通过某种方式将验证者ID链接到IP地址，他们就能有选择地以较低的成本对提议者进行DoS攻击。

如果无法生成区块，网络也无法运行。SSLE是一种为slot随机选择单一提议者的方式，而网络无法提前知晓提议者的身份。知道SSLE有实现的可能性真是太棒了！

&lt;br/&gt;  

# 常规会议

## 实现者会议

第48次会议于9月17日进行。

- 会议日程
- 会议视频
- 我的[速记](https://hackmd.io/@benjaminion/BJIQuJZSD)以及[Mamy的笔记](https://gist.github.com/mratsim/0bafb17499e6a33b69085ec21de7cd91)

## 网络

第六次networking会议的主要内容是网络协议。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/180)
- [我的笔记](http://my notes/)

目前正在进行的更新有：移除gossipsub中一些不必要的参数、调整节点评分以及升级发现协议到5.1版本。

&lt;br/&gt; 

# 其他新闻

[Nimbus](https://our.status.im/nimbus-update-september-11th/)、[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-56-road-to-mainnet-3fbd50dde484)、[Lighthouse](https://lighthouse.sigmaprime.io/update-29.html)和[Lodestar](https://medium.com/chainsafe-systems/lodestar-update-38f58c14a39d)客户端团队都发布了更新。至于Teku，其[release notes](https://github.com/PegaSysEng/teku/releases/tag/0.12.6)以及相关issue就是我们的更新。

[Beaconcha.in](http://beaconcha.in/)制作了一个[staking服务商列表](https://beaconcha.in/stakingServices)。如果你提供质押池，请[参与](https://twitter.com/evan_van_ness/status/1303419933976670215)Evan Van Ness的[调查](https://twitter.com/evan_van_ness/status/1306773373209501702)。

Protolambda是[第九次ETH2 Staking Community会议](https://www.youtube.com/watch?v=C5YfUqg69p8)的特别嘉宾，其中有很多不错的观点和建议。

我与我的同事Vijay一起参与了Coindesk的[播客](https://www.coindesk.com/ethereum-2-0-staking-need-to-know)，由Christine Kim主持。

&lt;br/&gt;   

# 写在最后

Eth2考古。这周被Google Photos提醒距离我们去年著名的Eth2客户端[互操作性](https://twitter.com/JonnyRhea/status/1172233598109442049)封闭营已经整整一年了，七个客户端团队齐聚在安大略的一个湖畔。[此处](https://media.consensys.net/how-30-eth-2-0-devs-locked-themselves-in-to-achieve-interoperability-175e4a807d92)是我的回顾文章。这是Eth2旅程中的一大里程碑，这是明白互操作性可行性的豁然开朗的时刻。

自那以来，有变迁也有不易。Harmony团队并入了PegaSys (Teku) 团队，Trinity团队也在几周前暂停了开发，但除此之外一切都很稳定。从可行的原型到上线前夕，这是一趟艰辛的旅程，也比我们预期中走得要久。但是回望走过的路，似乎没有本应加速的阶段。这是一个多么不可思议的项目，我每天都怀着谦卑之心参与其中，与如此多出色的同僚们并肩工作。

无关信息：[Gitcoin Grants](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification)第七轮开始啦！

 

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0的混洗算法]]></title><description><![CDATA[图解eth2的swap-or-not混洗算法，简析它为什么是安全且高效的]]></description><link>https://www.ethereum.cn/shuffling</link><guid isPermaLink="false">https://www.ethereum.cn/shuffling</guid><pubDate>Fri, 18 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ben Edgington ](https://hackmd.io/@benjaminion/shuffling)

## &lt;br/&gt; 

# 简介

如果你想学[鬼步舞](https://www.youtube.com/watch?v=RECaepj8LkU) (shuffle dance) 的话，那你就走错地方了。但相信我，Eth2里的混洗 (shuffle) 也一样让人兴奋。

混洗列表是以太坊2.0里一个基本运算。它主要用于在每12秒的slot里伪随机挑选验证者来组成委员会，以及在每个slot里选出信标链区块的提议者。

混洗似乎相当简单。尽管它有一些[隐患](https://www.developer.com/tech/article.php/616221/How-We-Learned-to-Cheat-at-Online-Poker-A-Study-in-Software-Security.htm)需要注意，这些隐患在计算机科学里是非常容易理解的。其中的黄金标准大概就是[Fisher-Yeats shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle)了。那我们为什么不在Eth2里使用它呢？我将在文末详细解释，但简单来说就是——轻客户端。

我们用的混洗算法是swap-or-not，而不是Fisher-Yates。这个选择是基于这篇本来用于构建加密方案的[论文](https://link.springer.com/content/pdf/10.1007/978-3-642-32009-5_1.pdf)。我最近在Eth2客户端[Teku](https://pegasys.tech/teku/)中[重写](https://news.ethereum.cn/wp-admin/post.php?post=2486&amp;action=elementor#L109)我们的实现，因此我想趁热把它写出来。

##  &lt;br/&gt;

# Swap-or-Not混洗算法

## 一轮的操作过程

混洗以轮次进行。每轮的过程是一样的，因此我在下面只会演示一轮的过程，它比看上去简单多了。🙂

### 1. 选择一个轴心点并找出第一个镜像索引

首先，我们选一个轴心索引p，这是基于轮次和其他一些种子数据，通过伪随机选出的。这个轴心选出后就在该轮次里固定了。

基于这个轴心点，我们在p和0的中间点选出一个镜像索引m1，即m1=p/2。（为了方便解释，我们将忽略麻烦的差一错误舍入问题）


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/rk7hCcP/shuffling1-70108eb483.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;轴心点和第一个镜像&lt;/center&gt;

### 2.从第一个镜像索引到轴心点，替换与否

对于镜像索引m1和轴心索引p之间的每个索引，我们随机决定是否对这些元素进行替换。

比如对于索引i1，如果我们选择不替换，那么我们就继续选下一个索引。

如果我们决定替换，那么我们将i1上的列表元素与i1’上的替换，即它在镜像索引上的图像。也就是i1与i1’=m1-(i1-m1)替换，这样i1和i1’到m1的距离是相等的。

我们对每个m1和p之间的索引都做相同的swap-or-not的决定。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/TbbmxXL/shuffling2-f88a693739.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;从第一个镜像索引到轴心的swap-or-not决定&lt;/center&gt;

### 3.计算第二个镜像索引

在做完从m1到p的所有索引决定后，我们现在找到第二个以m2为中点的镜像索引，即到p和列表末端的距离相等的点。也就是m2=m1+n/2。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/rt8XBq2/shuffling3-fb155bf1a6.png&quot;/&gt;&lt;/center&gt;
 &lt;center&gt;第二个镜像索引&lt;/center&gt;



### 4.从轴心点到第二个镜像，替换与否

最后，我们重复swap-or-not的过程，考虑所有点到轴心p替换的决定，即p到第二个镜像m2的决定。如果我们选择不替换，就继续下一个。如果我们选择替换，那么我们在镜像索引m2上把j1上的元素与它在j1’上的镜像进行替换。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/KxJwc0T/shuffling4-9a0d336163.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;从轴心到第二个镜像索引的swap-or-not决定&lt;/center&gt;

### 组合起来

在一轮的最后，我们都已经考虑了m1到m2之间所有的索引，即所有索引的一半，且无论替换与否，每个索引都在另一半有一个特定的索引。因此，关于替换与否，所有的索引都已被考虑过一次了。

下一轮以增加 (或减少) 轮次开启，这样我们会有一个新的轴心索引，然后开始循环上述的过程。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Ph7FQ4v/shuffling5-f47a236ad2.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;同一轮中从一个镜像移向另一个镜像的过程&lt;/center&gt;

###  &lt;br/&gt;

## 有趣之处

### 巧妙的地方

当在决定要不要替换的时候，这个算法会巧妙地选择候选索引或其镜像中的更高者。意思是当在轴心之下时，被选择的是i_1而不是i_1’；当在轴心之上时，被选择的时i_k’而不是i_k。这意味着，我们可以灵活遍历列表中的索引：我们可以将0到m1和p到m2分为两个独立的循环，或将两者合在同一个从m1到m2的循环，如我在上文所描绘（和[实现](https://news.ethereum.cn/wp-admin/post.php?post=2486&amp;action=elementor#L109)）的。这两种做法的结果是一样的：无论我考虑的是i_1还是镜像i_1’都没有关系；替换与否得出的是相同的结果。

### 轮次

在Eth2，上述的过程会进行90次。[原始论文](https://link.springer.com/content/pdf/10.1007/978-3-642-32009-5_1.pdf)里提到要经历6lgN个轮次才能“开始在选择性密码攻击 (CCA) 上出现较好的安全性界限”，其中N是列表的长度。在Vitalik的[注释规范](https://github.com/ethereum/annotated-spec/blob/master/phase0/beacon-chain.md)里，他说“密码学专家建议我们4log2N个轮次就能提供足够的安全性了”。在Eth2里验证者数量的绝对最大值，也就是我们需要混洗的列表最大次数，大概是222 (420万)。Vitalik给出的预估值是88轮，在论文里的预估值是92轮 (假设lg是自然对数)。因此，我们现在处于一个大致正确的范围，特别是我们最后非常可能没有这么多活跃验证者。

基于列表长度来调整轮次可能会得出有趣的结果，但我们不会这么做，这可能是不必要的优化。

有意思的是，当Least Authority审计信标链的规范时，他们一开始发现在选择区块提议者的混洗中是有偏倚的 (参考[Issue F](https://leastauthority.wpengine.com/static/publications/LeastAuthority-Ethereum-2.0-Specifications-Audit-Report.pdf))。但结果是他们错误使用了只有10轮次的混洗配置。当他们将混洗配置增加到90轮 (我们在主网使用的轮次) 时，偏倚的情况消失了。

### （伪）随机

混洗算法要求我们在每一轮里随机选一个轴心点，且在每轮里随机选择是否对每个元素进行替换。

在Eth2，我们肯定会从一个种子值产生随机性，由此这同一个种子总会产生同一个混洗结果。

轴心指标是由把与轮次串联的种子进行8字节的SHA2哈希产生的，

轴心索引由种子值SHA2哈希的八个字节生成，该种子值与轮次相串联，因此它通常在每轮里都有会改变。

用来决定是否要替换元素的决定性数位从以下几个元素中提取：种子的SHA256哈希、轮次、列表上元素的索引。

### 效率

这个混洗算法比Fisher-Yates算法要慢得多。如果Fisher-Yates算法需要N次混洗的话，我们的算法平均需要90N/4次。我们还要考虑伪随机性的产生，这是算法中成本最高的部分。Fisher-Yates需要接近Nlog2N数位的随机性，而我们需要90(log2N+N/2)数位，根据我们在Eth2里需要的N值范围，超出的数位是相当多的 (当N为一百万时，Eth2大约需要N的两倍)。

##  &lt;br/&gt;

## 为什么选择swap-or-not这种算法？

如果效率不高，为什么要选择这个实现？

### 对单一元素进行混洗

这个算法的闪光点在于，如果我们只关注少数几个索引，我们不需要对整个列表的混洗进行计算。事实上，我们可以将这个算法用于单个索引，来找出哪个索引将会被替换。

因此，如果我们想知道索引217的元素被混洗到哪里了，我们可以运行只针对该索引的算法，而无需混洗整个列表。此外，相反地，如果我们想知道是什么元素被混洗到索引217，我们可以将算法倒过来运行来找到元素217 (倒过来的意思是从高到低运行轮次，而不是从低到高)。

总之，我们可以在恒定时间内计算出元素i被混洗到哪里，也可以计算出元素i的源头在哪里 (用反向操作)，计算时间并不取决于列表的长度。Fisher-Yates混洗并不具有这种特性，且不能对单个索引进行混洗，它们往往需要重复混洗整个列表。

在[Eth2规范](https://news.ethereum.cn/wp-admin/post.php?post=2486&amp;action=elementor#compute_shuffled_index)里写的就是关于如何将算法应用到对单个索引进行混洗。事实上，一次性混洗整个列表只是它的一种优化！如果我们想的话，我们可以轮流只对列表里的一个元素进行混洗：(反向) 运行混洗来找出哪个元素最终落在索引0，再运行一次混洗找出哪个元素最终落在索引1，如此进行下去。我们不那样做的原因只是由于决定swap-or-not需要一次性生成一个256位的哈希，且就这样抛弃255位是很浪费的。如果我们使用1位的哈希或预言，混洗列表中一个元素的效率与混洗整个列表相去无几。

### 做到真正的“轻”客户端

这个特性之所以有意义，原因全在于轻客户端。轻客户端相当于是Eth2信标链和分片链的观测者，他们不储存整个状态，但希望可以安全地访问链上的数据。要对他们的数据正确性进行验证，即没有发生欺诈，其中的必要一步就是对证明数据的委员会进行计算。也就是要用到混洗算法，且我们并不希望轻客户端必须存储或是混洗整个验证者列表。通过swap-or-not混洗，他们可以只对他们需要的一小部分委员会成员进行计算，这样将在整体上大幅提高效率。

### 历史

如果你像我一样喜欢GitHub的考古特性，你可以在[这里](https://github.com/ethereum/eth2.0-specs/issues/323)查看最初为Eth2寻求混洗算法的讨论，[这里](https://github.com/ethereum/eth2.0-specs/issues/563)公布了最后的胜出者。

如果想从另一个角度看swap-or-not混洗算法，可以看一下Protolambda发表的一个[更可视化的解释](https://news.ethereum.cn/wp-admin/post.php?post=2486&amp;action=elementor#shuffling)。

##  &lt;br/&gt;

# 最后

这张图片是2019年我在EthCC上一边听Justin Drake讲swap-or-not混洗，一边在Teku客户端 (当时它还叫Artemis) 中实现初版swap-or-not混洗。🙂

 

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#16]]></title><description><![CDATA[存款和创世彩排，Spadina测试网将于本月上线。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-16</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-16</guid><pubDate>Wed, 16 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/09/14/eth2-quick-update-no-16/)



&lt;br/&gt;

![双周刊更新速览封面.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)


&lt;br/&gt;

# 要点速览

- [Spadina](https://github.com/goerli/medalla/pull/46) (存款及创世彩排) 测试网即将上线
- [Medalla Data Challenge](https://ethereum.org/en/eth2/get-involved/medalla-data-challenge/)准备中
- Blst极速BLS12-381签名库的审计[RFP](https://notes.ethereum.org/@djrtwo/blst-rfp)发布💥

##  &lt;br/&gt;

# Spadina“彩排”即将上线

我们意识到工程师和社区都可以在主网上线之前再在公共测试网中走一次流程。同时还要避免对Medalla的运行产生影响。因此，我们选择了进行短时彩排，将在本月晚些时候与Medalla并行进行。欢迎[Spadina](https://github.com/goerli/medalla/pull/46)！

Spadina将是一个 (主要) 主网配置测试网，具有3天的使用寿命 (EOL)。主要目标是给我们所有人提供另一次机会，在进入主网之前，再演练一次其中较为困难和冒险的过程：存款和创世。如果一切顺利，我们在今年进入真正的主网时会感到更加安心。

##  &lt;br/&gt;

## 是否应该参与Spadina？

如果你想体验Launchpad最新的迭代，想尝试一下密钥生成和管理，并检查是否能从头设置你最爱的客户端，那么就别犹豫了，一定要参与Spadina测试网！

如果你已经参与了多个测试网，在密钥和客户端管理方面颇具经验，并且能熟练地编写自定义系统配置和监测工具，那么您可以自由选择是否参与新测试网🙂

请注意Spadina的运行周期只有三天。虽然在三天之后测试网还会保持运行一段时间，但是客户端团队、区块浏览器和其他基础设施提供者在三天之后不会再继续提供支持。

##  &lt;br/&gt;

# 数据竞赛

上周，以太坊基金会宣布开启[Medalla数据竞赛](https://ethereum.org/en/eth2/get-involved/medalla-data-challenge/)，目的是鼓励更多人参与到eth2分析和工具建设中，同时扩充知识库和教育资源，促进大家对eth2及其网络的理解。

[此处](https://ethereum.org/en/eth2/get-involved/medalla-data-challenge/)是以太坊基金会的通告，参与有机会获得1.5万美元的奖金！

##  &lt;br/&gt;

# Blst BLS12-381签名库审计RFP

以太坊基金会和Protocol Labs正在为blst BLS12-381签名库的审计进行资助。

由[Supranational](https://www.supranational.net/)构建的Blst库由于其巨大的性能提升，迅速成为了eth2客户端的默认签名库。为了确保该库满足主网所需标准，我们正在为其寻找审计方，对其低级、优化的代码以及多种语言绑定进行全面审计。

[此处](https://notes.ethereum.org/@djrtwo/blst-rfp)是相应RFP，将于9月18日截至。

除了该审计之外，对blst的域、曲线和批量签名操作的正式验证也在进行中。这项工作有望在2021年初完成。🚀

 &lt;br/&gt;

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[白话ETH2.0：你需要了解什么？]]></title><description><![CDATA[本文通俗地讲解了从当前以太坊主网向Eth2.0升级的各个概念，包括Pos、信标链、分片。]]></description><link>https://www.ethereum.cn/eth2-0-everything-you-need-to-know</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-0-everything-you-need-to-know</guid><pubDate>Wed, 16 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [MyCrypto](https://medium.com/mycrypto/eth2-0-everything-you-need-to-know-eb32fbfe0bd)

&lt;br/&gt;

# 前言

Eth2升级对以太坊网络来说是一次基础架构的更新。如果读者持有ETH或使用最流行的DeFi协议之一，无需做任何事，因为当前的以太坊网络将与Eth2兼容。现在的ETH不会发生任何变化，网络升级不会产生新代币。

以太坊的大规模网络升级正在进行中，大家正翘首以待。Eth2有许多东西需要考虑，包括从PoW向PoS的过渡、分片以及信标链的引入。本文简要介绍了以下各个方面：

- 以太坊现状
- Eth1: PoW(工作量证明)
- Eth2: PoS(权益证明)
- 引进：分片链
- 引进：信标链
- Eth2路线图
- 总结

&lt;br/&gt;

# 以太坊现状

当前的以太坊堵塞、运行缓慢且gas费过高。在8月份网络拥堵最严重的时候，如果用户在gas limit为21,000以及gas 费为440gwei时提交一笔标准的ETH交易，那么很可能在30分钟以内完成交易，需要4.35美元的成本。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/w0sr0Rq/eth2-everything-1-82b741de01.jpg&quot;/&gt;&lt;/center&gt;

&lt;center&gt;网络拥堵情况如图所示&lt;/center&gt;

&lt;br/&gt;

假设读者现在想要尝试一些热门的、新的DeFi协议，但只想投入较小的数额的话，实际上没什么意义。因为交易费可能要比用户想要投入的ETH或者其他代币的价格要更高。

## 目前的局限性

目前，以太坊网络每秒大概只能处理15笔交易，相较于网络的庞大需求，每秒交易处理量实在是太少了。除此之外，当前的区块生成以及交易验证方式是不可持续的——据估计，以太坊网络的年电力消耗都快[赶得上哥斯达黎加](https://digiconomist.net/ethereum-energy-consumption/)了。

Eth2这一网络的巨大升级，也被称作Serenity，旨在解决以上提到的问题，并将其视为长期目标。这次大规模升级包括多个阶段，将逐个部署，旨在以一种安全、高度去中心化的方式对区块链进行扩容。

&lt;br/&gt; 

# Eth1:PoW (工作量证明)

当前，以太坊网络使用PoW共识机制，许多其他区块链如比特币也采用该共识。矿工们处理待定交易并且因此获得奖励。由于以太坊网络难度设置，矿工通过生成区块来处理这些交易需要大量的算力。

## 为什么这种系统不是最好的

从本质上说，只要愿意，每个人都可以成为网络上的一名矿工，但从中获利的机会微乎其微。想要在以太坊网络上挖矿获利需要购买足够多的硬件，而其价格远超过挖矿提供的激励。因为要考虑许多成本，例如电力成本、硬件的初始成本、矿池的费用，甚至在一些司法管辖区还要缴税。

PoW系统的意义在于使得网络的安全性得以保障，因为攻击者往往需要无比庞大的算力才能对网络造成损害，也就是说需要更加高的成本来购买硬件。然而，考虑到以太坊的价值，攻击网络的动机仍然存在。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NNw2K25/eth2-everything-2-40ccf8a982.png&quot;/&gt;&lt;/center&gt;



&lt;center&gt;莱斯利犀牛，Eth2 launchpad吉祥物 来源: https://medalla.launchpad.ethereum.org/&lt;/center&gt;

&lt;br/&gt; 

# Eth2:PoS (权益证明)

PoS并不需要像PoW那样需要庞大的算力才能保障网络安全。

Staking指的是ETH持有者通过质押一笔ETH来成为网络的验证者。验证者通过软件客户端运行节点，工作包括确认和验证交易，以及如果被选择了，验证者将在区块链上创建新的块。

验证者能否验证新的区块或者交易，取决于各种因素，比如该节点质押了多少的ETH以及质押了多长时间。

在PoS共识下，只要有32个ETH，任何人都可以参与运行网络。即便用户不够32个ETH，也可以使用消费级的电脑，加入质押池，参与网络运行。

## 如果算力不那么重要，如何保障网络安全？

为了防止网络被攻击，当验证者试图通过提出新的无效交易来破坏或攻击区块链时，质押的资金会因此丢失。这一过程被称为“罚没”，攻击者的大部分ETH (可能是他们质押的所有资金) 将被罚没。一名验证者节点至少质押32个ETH，如果攻击失败的话，将会损失一笔很大的资金。

经常用于类比当前PoW系统的一种描述是：攻击者发起攻击时，以免攻击失败，必须得消耗他们整个挖矿设施，而不只是消耗平常挖矿时的电力成本。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Vt4QhhN/eth2-everything-3-15691dcc07.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;图示：PoS vs PoS 来源：seekingalpha.com&lt;/center&gt;



&lt;br/&gt;

# 引进：分片链

简单来说，分片链就是可以在以太坊内操作的区块链。现在，每个以太坊节点在处理一笔新的交易之前都要同步整个以太坊区块链的信息。这要比实际需要更多的算力和存储空间。

## 分片的好处？

使用分片，节点可以集中关注一个分片子集，它们只需要同步这些分片的内容。也就是说，通过这种方式，节点不必存储整个以太坊区块链的内容，可以更有效地使用它们的算力，释放出更庞大的网络容量。

区块链上会有许多分片，它们以不同的方式运行着。比如，分片可以在以太坊网络中运行的情况上，同时基本遵循比特币的系统。虽然这种设计过于草率，但是可能性却无限。

## 安全性如何？

每个分片将独立运行，尽管每个分片与其他分片具有相同的安全性。这使得攻击单个分片变得非常困难，因为攻击者还得攻击其他分片。虽然分片独立运行，但它们能够彼此通信，这便是信标链从中作用的结果。

 &lt;br/&gt;

# 引进：信标链

在当前的以太坊网络中只有一条链，每个以太坊节点都与这条单一的链通信。然而，一旦分片上线，主网上就会有许多不同的区块链 (即分片链)，它们相互并行工作着。信标链起支配作用，确保网络中的每个分片同步相同的信息与数据——它为所有分片链提供共识。

如前所述，验证者可以验证交易，并且如果他们被选择，也可以提议新的分片区块。如果没有被选择提议新区块，验证者的工作是确保已被提议的区块无异常——对已提议的分片区块进行验证或证明。

## 共识是如何形成的？

至少需要128名验证者验证每个分片区块，这群验证者组成一个委员会。而提议以及验证每个分片区块的时帧为一个slot。该委员会每次对32个slot进行提议以及验证区块，合起来为一个epoch，之后该委员会将被解散，并将选出一组新的验证者。这样做是为了让恶意验证者无法控制新一组提议区块的最终结果。

当一个提议的分片区块从委员会中获得了足够的证明，交联 (crosslink) 将向信标链共享分片的状态，包括新区块以及其交易数据。

## 信标链的作用是什么？

信标链记录着上述全过程的所有事情，给分片区块提议者奖励ETH，并对作恶者进行惩罚 (即罚没)。当区块准备就绪且一切都运行良好时，仍然需要对其进行敲定，以防止作恶者对其进行复原。

信标链区块也被敲定之后，则认为分片区块已被敲定。完成此操作之后，其他分片将能够读取与该分片区块相关的数据。

&lt;br/&gt;

# Eth2路线图

由于Eth2对以太坊来说是一次重大升级，因此将分几个阶段进行部署。尽管每一阶段都有发布的时间安排，但要注意的是，这仍需要许多不同的团队进行大量的研究工作，因此可能会比预期时间要长。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/t3yxJPF/eth2-everything-4-1b75b35402.png&quot;/&gt;&lt;/center&gt;


&lt;center&gt;Eth2路线图 来源: https://medalla.launchpad.ethereum.org/&lt;/center&gt;

## 阶段0：信标链

信标链是Eth2的第一个阶段。请记住：信标链本身是没有用处的，因为它主要的工作是同步分片链，而那时分片链还没有上线。

但是，信标链还负责协调验证者的质押资产。到那时已经可以通过发送ETH到智能合约中来开始质押了，但是要等到阶段1才能提款。

**这一阶段预计将于2020年****发布****。**

## 阶段1：分片链

阶段1将实现分片链，然后可以与在阶段0中已经实现的信标链交互。这还不是分片的完整实现，因此帐户或智能合约直到第2阶段才能使用。按照预期，阶段1先有64个分片。

**该阶段预计将于2021年发布。**

## 阶段1.5：主网变为分片

到了这个阶段，系统将仍会采用PoW共识。而阶段1.5之后，以太坊网络将会成为分片，以及向PoS转变。这意味着网络上不再有矿工，取而代之的是质押ETH。

**该阶段预计将于2021年发布。**

## 阶段2：功能齐全的分片

到了阶段2，一切开始变得完整。分片能够运行智能合约，并且通过使用执行环境，能够以不同的方式构建分片。

阶段2仍处于研究阶段，许多方面仍开放讨论。该阶段的设置可能会有所改变，并且欢迎所有人参与讨论。

**该阶段预计将于2021发布，或者有可能会推迟。**

## 



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/4J47f29/eth2-everything-5-0b87cbe439.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;&lt;a href=&quot;https://twitter.com/VitalikButerin/status/1240365047421054976?s=20 &quot;&gt;推特链接&lt;/a&gt;&lt;/center&gt;

&lt;br/&gt;

# 结论

Eth2发布后，网络将会更快、成本更低，为区块链带来更多的可能性。任何人都有可能成为验证者，并通过质押他们持有的ETH赚取收益，同时维持网络的稳定与安全。

这是以太坊的重大升级，我们非常建议大家参与其中。读者现在就可以参与Eth2的测试网版本了，质押测试币成为验证者。了解更多信息请访问[Medalla launchpad](https://medalla.launchpad.ethereum.org/)。

&lt;br/&gt;
&lt;br/&gt; 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[YAM的日落？通往DEFI的可持续之路]]></title><description><![CDATA[剖析YAM大惨败的原因，浅谈如何让DeFi走得更远。]]></description><link>https://www.ethereum.cn/sustainable-defi</link><guid isPermaLink="false">https://www.ethereum.cn/sustainable-defi</guid><pubDate>Tue, 15 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | blog.rotki.com



&lt;br/&gt;

# 引介

本文探讨以下主题：什么是DeFi、DeFi会解锁哪些新的可能性、为什么DeFi这么酷这么火；然后谈谈DeFi不好的那一面，包括鼓励人们冒险、YOLO（You only live once）性质的挖矿和由最近YAM大惨败引起关注的未审计合约；最后，展望未来，分析社区需要吸取的教训，以实现Defi在未来数十年可持续且可靠地发展。要知道，金融工具不只是给活跃在推特上的一部分人用的，而是对全世界的人开放的。

&lt;br/&gt;

# 什么是DeFi

一句话概括，去中心化金融是各种传统金融工具的无须许可、去中心化版本，例如交易所、借款、贷款、合成资产等。在过去的两年里，这方面的创新如雨后春笋般涌现。

###  

## 去中心化交易所

我们有各种各样的去中心化交易所，比如：

- [Uniswap](https://uniswap.org/)
- [Kyber](https://kyberswap.com/swap)
- [Deversifi](https://www.deversifi.com/)

它们都以去中心化的方式运行，且是非托管型的，明显区别于像Binance和Kraken这样的中心化交易所，在那里你必须先存入资金，并托管给它们。

###  

## 借贷协议

像[Compound](https://app.compound.finance/)和[Aave](https://app.aave.com/home)这样的协议允许用户可以通过借出他们的资产来赚取利息，或在抵押后获得贷款。MakerDao还提供以[资金库](https://oasis.app/borrow)的形式借款，用户可以往资金库存入不同形式的抵押物后挖得稳定币DAI。

###  

## 合成资产

像[Synthetix](https://www.synthetix.io/)和[Token Sets](https://www.tokensets.com/)这样的合成资产协议，将多种不同的资产结合成一种单一资产。这样，用户只需要持有一种合成资产即可获得多种资产的敞口。

&lt;br/&gt;

# DeFi解锁了哪些新的可能性？

DeFi实际上没有创新的东西。它的所有内容其实都以某种形式存在于传统金融世界里。DeFi的惊艳和革命性之处在于它是完全去中心化的和无须许可的。世界上任何人，无论身处何地、背景如何都可以使用DeFi产品。它正为全世界的人带来无数的可能性，建构一个新的无须许可的金融系统。

&lt;br/&gt;

# DeFi的阴暗面

像任何涉及金钱的事物一样，DeFi同样吸引了很多贪心、短期投机者和昙花一现的项目。

有一个概念叫流通性挖矿者，指的是持币者通过在一个协议里提供流动性或质押赚取利息、费用或一些治理币。当然，流动性挖矿本身并没有问题。所有在DeFi协议里提供流动性的人实际上都是在进行流动性挖矿。这样的做法没有错。


&lt;center&gt;&lt;img src=&quot;http://172.105.234.239:1337/uploads/YAM_1_8f40df7b92.png&quot;/&gt;&lt;/center&gt;

挖矿不好的地方在于有“DeFi Chad”和“Defi Degen”这类人的存在。这类受表情包影响的挖矿者，盲目地不断从一个协议跳到另一个协议，从来不考虑合约的安全性，只求追逐最大的收益，快速将手上的代币抛给新加入的人然后开始下一轮循环。这样的操作明显是不可持续的。

###  

## YAM金融学

YAM就是DeFi中不负责任做法的一个典型例子。这个实验持续不到两天的时间。这个项目于UTC时间2020年8月11日19:00 [上线](https://medium.com/@yamfinance/yam-finance-d0ad577250c7)，并在36小时后[崩盘](https://medium.com/@yamfinance/yam-post-rescue-attempt-update-c9c90c05953f)。

####  

### 发生了什么？

YAM一开始就宣称自己是一个实验性项目，它混合了多个其他DeFi项目的代码，完全没有经过审计，且没有安全舱口或存款限额。无论出于什么目的，这完全是一个不顾后果的项目，尽管它的锁定资产峰值超过50亿美元。

关于这个项目漏洞的技术性解释，读者可以阅读[这篇文章](https://medium.com/@yamfinance/yam-post-rescue-attempt-update-c9c90c05953f)。简而言之，出现的漏洞使得YAM持有者在数量上达不到要求，从而无法做出任何决策，因此该协议的治理部分等于是无效了，而没有了它，整个协议就无法运行下去了。

当人们意识到这点，YAM的市值在短时间内从6千万美元一路狂跌到0。每个买入YAM但来不及抛售的人都遭遇了损失，因为他们卖不出去。Uniswap的流动性供给者也面临同样的情况，因为每次有人通过他们卖出YAM他们都会遭遇损失。

####  

### 这是可以避免的吗

当然！

在加密圈有很多有影响力的人（包括我自己）都发出了警告，告诉大家最后会血本无归。但一些最基本的预防措施本来是可以做的：

- 写合约测试
- 对代码进行安全性审计
- 如果你声称这是一个实验，那么请做到以下两点：a) 用代码来设置储存限额来保护你的用户; b) 用代码来设置安全舱口来保护你的用户

####  

### 庞氏游戏

更糟糕的是，从代币经济学的角度来看，YAM很明显是一个庞氏游戏。请注意庞氏游戏和庞氏骗局的区别，这篇文章对此进行了释义。

每12个小时，代币的总供应量就会增加，但通过rebasing（回基）这个过程，但每个用户的持有量保持不变。第一批的挖矿者加快YAM的流通和通过社交媒体抬价是会得到激励的，这样他们在rebase后就能找到受害者去接他们抛售的代币。新的持币者也有同样的动机去加快YAM的流通，这样在第二轮的rebase就到他们将代币抛售给下一批可怜的受骗者。这个过程不断循环下去。

这是个“公平”且透明的庞氏游戏，但无论如何也是“庞氏”性质。尽管在加密圈的人已经对这个项目进行了大量的研究，我仍然100%确定大多数人还没有意识到被骗了，最后遭受金钱损失。

####  

### Twitter上的抬价行为

我个人感到非常厌恶的是在推特上有越来越多以太坊社区的人在参与挖矿，且他们中很多人我是其实是很尊敬的。

我觉得这是不可原谅、不顾后果、且不负责任的。他们在抬价的协议还没有推出可使用的产品，代码没经过审计、没有进行测试、没有存款限额，什么都没有。他们这样做只是为了把更多的人骗进这个庞氏游戏，来维持他们收益的增长，然后将烂摊子抛给他们。

我诚挚地希望大家可以从这次的事件中吸取教训。如果你参与了这些未经审计的、不安全的庞氏游戏的抬价行为，那么DeFi如果被轻视了，你也有责任。如果我们真的想将DeFi推广到大众，我们不能再有这种不负责任的行为了。

####  

### 我们要付出什么代价？

&lt;center&gt;&lt;img src=&quot;http://172.105.234.239:1337/uploads/YAM_2_f496f56e95.png&quot;/&gt;&lt;/center&gt;

有些人亏了很多钱

- 市值从6千万美元跌至0。
- 买入YAM的人就好比手握烫手山芋，然后看着它烧焦至所有的投资都化为乌有。
- Uniswap的流动性供给者因为给那些垂死代币的卖方提供流动性而遭受损失。
- 消耗的大量gas费（300多的gwei）变得没有意义


**其他没有参与YAM挖矿的以太坊用户要被迫忍受当时300gwei的高gas费，还不能很好地使用以太坊区块链。**

最后也是最重要的一点，非加密货币圈的人对我们翻白眼，我们的名声受损了。我试着向每个我认识的非币圈的人解释这件事并了解他们的看法，他们都认为加密货币就是为诈骗和庞氏骗局服务的。你可以责备他们吗？

&lt;br/&gt;

# 负责任的去中心化金融

这篇文章如果有什么是值得你记住的话，请看这部分。DeFi是好的创新并会继续存在。只是我们全部都需要对它更加负责。

###  

## 负责任的DeFi用户

作为一个用户，不要急于涌向每个新出现并承诺百分百回报的项目。你需要问自己，**是否进行了充分的调查、要求查看审计报告、向社区里的人询问协议创始人的履历、并在可能的情况下阅读代码和了解代币经济学。**要做你自己的调研！如果出现了什么好得难以置信的项目，那它很可能是诈骗或庞氏游戏。

###  

## 负责任的DeFi创始人

看在上帝的份上，恳请创始人或开发者，不要拿产品来做测试。要有责任心。用户不会去留意警告提醒或免责声明。如果这是个试验，你想在主网上测试，没问题。那么，在前几个月里设置存款限额和中心化的安全舱口。用户的安全是你的责任。以“只是一个试验”作为逃避责任的借口是不可接受的。

###  

## 通往DeFi生态可持续发展之路

只有通过负责任的开发和专业精神，这个领域才能走向成熟。凭借YOLO这类煽动性的流动性挖矿表情包，我们是不可能吸引到新用户的。为了使DeFi成为一个新的无须许可的金融系统，它需要走向主流。它决不会依靠庞氏游戏和推特上的chad表情包来实现。相反，只有当在普通人看来这个生态是足够成熟并参与其中的时候，这个目标才能实现。让我们都尽自己的一份力量，通过负责任的建设和可持续的发展来推动这个生态前进，并将这个建设成能惠及大多数人而不是一小撮人的新金融系统。

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[DEFI护航员：预言机的重要性]]></title><description><![CDATA[本文分析了目前预言机存在的优缺点，并提出构建公平预言机生态的建议。]]></description><link>https://www.ethereum.cn/the-importance-of-oracles-in-decentralised-finance</link><guid isPermaLink="false">https://www.ethereum.cn/the-importance-of-oracles-in-decentralised-finance</guid><pubDate>Mon, 14 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 |[ hackernoon](https://hackernoon.com/the-importance-of-oracles-in-decentralised-finance-cannot-be-undermined-qp213xi1)


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/xqXWkXJ/1-d2ad0d5feb.png&quot;/&gt;&lt;/center&gt;


大多数关注区块链的人应该都听说过DeFi，且那些懂得如何使用它的人都明白DeFi意味着什么——但还有一方面的内容未被充分研究，那就是价格预言机以及它们对DeFi应用的影响。


&gt; 预言机是一种第三方服务，它为智能合约提供执行所需的数据，通常与价格相关。


在探索一些新兴解决方案之前，我会先分析一些受欢迎的DeFi项目以及它们正在使用的预言机系统，比如它们的优缺点，然后给出一些关于如何构建一个公平的预言机/数据检索生态系统的建议。

传统的金融系统需要中介机构，因此会出现单点故障。他们容易滋生腐败、诈骗、安全事故等。而智能合约和去中心化网络给了我们重建这些系统的机会，它们是普通人可以企及的，且能改善建在这些系统之上的传统金融产品，尤其是借贷方面的。

&lt;br/&gt;

# DeFi给我们提供新的、透明的、无须依赖中介机构的金融系统

DeFi产品的一个常见主题是它的**混合协议**，这些协议一方面将不稳定性排除在外，另一方面提供去中心化网络的优势。这是通过将加密资产与传统资产结合来实现的，特别是那些与锚定美元相关的。

**MakerDao**是最为人熟知的例子，它使用混合系统来维持平均1DAI=$1的比率，并要求通过锁定不稳定资产来挖DAI（价值$1的代币）。还有其他混合系统使用了像“弹性供应”（supply elasticity）这样的概念，比如Ampleforth或现在听起来有点久远的Diameter Base Protocol。在应对需求变化上，它们通过Rebase (回基) 机制来调整流通供应量。

使用Rebase机制的目的是通过循环供给来不断平衡需求，从而保持价格稳定，但在市场处于狂热状态下，这套机制不怎么行得通，就如我们最近所经历的。Ampleforth的价格狂飙到历史最高，由于受到一堆积极的rebase措施 (即空投代币给持有者) 所影响，一旦价格开始下坡，便下跌得又快又猛。


&gt; 预言机是整个生态的基础，因为所有的应用都依赖于精确的数据。


**Compound**是另一种DeFi产品，它允许通过抵押品来借入和借出资产，并根据借/贷方的需求调整利率。

Compound网络由COMP持有者来治理，他们可以通过一个提议系统对网络的未来发展进行投票——持有的代币越多，投票的权重越大。这将随管理员数量的变化产生有趣的结果。

它有时基于多份预言机报告来计算平均值，如果没有那么多管理员提供数据，它可能会计算出一个错误的价格，给大量借款者/贷款者带来严重影响。

 &lt;br/&gt;

# 随着DeFi产品的兴起，ChainLink无疑成为了赢家

在过去的18个月里，预言机的使用出现急速的增长，一些最有影响力的DeFi团队也正在使用，包括Kyber Network、Fulcrum、Opium Network、 Synthetix等。Chainlink的一个关键优势在于它是参考多个预言机得出价格的。Bzrx最近发生了事故，因为它只依赖Kyber Network提供的价格数据。 这意味着，Kyber的突然下跌会造成Bzrx清算头寸的情况。而用Chainlink的话，有分散的价格数据供应，可以避免这种情况的发生。

**尽管如此，根据新加坡科技与设计大学的Bowen Liu和Pawel Szalachowski发表的[研究报告](https://arxiv.org/pdf/2005.04377.pdf?ref=hackernoon.com)，Synthetix的ETH/USD预言机数据存在平均2%的常规价格偏差。**

虽然对目前来说这是一个高标准，但我们必须朝着更准确的价格信息和更有活力的系统努力，当然这是Chainlink正在做的事，但有良性竞争的话不是更好吗？

目前，大多数的价格流预言机都经常出现偏离实际的数据的情况。

几个百分点的偏差看上去不多，但当我们架构一个提供借贷、清算事件和利率方面信息的金融系统时，我们需要准确的数据。

 
&lt;br/&gt;

# DeFi产品中臭名昭著的“闪电贷”或快速平仓事件经常与价格预言机有关

如果我有一个DeFi产品并将它的价格拉到，比如说是BAT在某交易所的价格，且人们正以BAT的价格借入这个DeFi产品，那么只需要在该交易所有一笔大额抛售即可清算任何杠杆BAT的头寸。

而使用多种数据流和聚合器可以大大降低有能力推动市场快速运转的捣事者带来的风险。

 
&lt;br/&gt;

# 在DeFi预言机领域有一些新的竞争者

DIA在打造一个为智能合约提供开放金融数据的生态，并因此而闻名。它提供多种价格流，并从多个信息源获取数据，包括交易所、其他区块链、欧洲中央银行的外汇利率、ITINs （国际代币识别代码）、[SONIA](https://www.bankofengland.co.uk/markets/sonia-benchmark?ref=hackernoon.com)、[SOFR](https://www.investopedia.com/secured-overnight-financing-rate-sofr-4683954) &amp; €STR Overnight Rates（美元的有抵押隔夜融资利率和欧元隔夜无风险利率）。

他们旨在成为“金融数据的维基百科”，这意味着社区可以以开源的形式对数据进行投票，而不是由中心委员会决定。DIA不会在内部管理、获取或验证数据，相反，这些活动都由它的持币者，通过加密经济学激励和质押它的治理币来进行。这个设计大大提升了透明度，是一个由下而上的系统，用来清理、汇总和传送金融数据给API和以太坊的预言机系统。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QJpNfBW/2-3f5bf8fcf3.png&quot;/&gt;&lt;/center&gt;


这个数据库可以处理各种不同的数据流，从高频交易的API，一直到高性能键值数据库中永不改变和无法访问的数据。

DIA有趣的地方在于它同时支持多种传统金融数据和加密市场数据，且能根据用户的要求定制专属的价格数据。

上文提到的由Bowen Liu和Pawal Szalachowski发表的论文指出，像Synthetix和Compound这些应用在用的预言机系统都缺乏透明度，这导致它们难以检测出不当操作。当在一场[CryptoDiffer ](https://cryptodiffer.com/?ref=hackernoon.com)AMA中被直接问到与其他竞争者相比，DIA有什么优势时，DIA数据团队的Paul Claudius回答：

&gt; **“我们不是一个新的提供复杂价格模型的数据库，相反，我们专注于一个维基百科式的方法——每个人都可以为了社区的发展而参与和评价社区的工作。我们为数据提供者和深挖数据来源的社区成员发放我们的治理币以作激励。”**

在未来几个月里，它将会变成一个由社区来运营的DAO。我们的团队（或者更广的社区）到时可以开始基于这个数据生态创造DeFi产品，他们使用的价格流会经常接受社区的审计。

 
&lt;br/&gt;

# 但怎么样才算是一个好的预言机呢？以下是一些评价指标

我想文章写作至此，是时候谈谈“好的预言机是怎样的”以及“我们可以怎样构建好的数据系统”。这里列举的不是全部的因素，但可以帮助读者更好地了解我们应该往哪些方向发展。

 

###  治理

- **内部 vs外部**：这款预言机是专门为某协议/应用而造的，因此受该社区的治理？还是随时可为任意一个第三方所用？
- **计算的选择**：谁来选择计算预言机数值的方法论？预言机的计算模型通常各不相同，根据我之前的研究，由管理员或囤票者决定预言机逻辑是有风险的。用户是否可以选择多个链上价格流，然后将它们聚合使用？
- **预言机的变化**：预言机本身的变化是如何被决定的？这包括新合约的发布、聚合数据方法论的改变、以及有时候会完全删除一些数据来源。有些预言机要求“管理员”来做决定。这样公平吗？
- **数据来源**：预言机的文档是否足够透明，用户是否可以很容易检索到预言机数据的来源？有时候这些信息可以在白皮书找到，但实时数据经常是缺失的。
- **方法论**：关于计算方式、数据搜寻和数据聚合的确切方法论是否可以容易检索到和是否有文档清晰说明？通常这方面的信息都很含糊。

 

### 透明度

- **数据来源**：预言机的文档是否足够透明，用户是否可以很容易检索到预言机数据的来源？有时候这些信息可以在白皮书找到，但实时数据经常是缺失的。
- **方法论**：关于计算方式、数据搜寻和数据聚合的确切方法论是否可以容易检索到和是否有文档清晰说明？通常这方面的信息都很含糊。

 

### 数据操作

- **数据更新频率**：预言机的数据多久更新一次？市场变化可是很快的。
- **数据延迟**：被测数据点以及其并入数据流之间的延迟是多久？
- **许可证追踪**：有关基础原始数据的许可证信息是否可用？（比如，交易所的价格数据）
-  **Gas模型**：谁来支付gas费用以维持预言机的运行？

尽管还有许多需要考虑的因素，但当你在为你的项目选择预言机时，以上提到的都是很好的借鉴方向。预言机的生态值得我们持续关注，因为随着DeFi应用的崛起，预言机将接受更多的审查，毕竟，这些DeFi应用都要求准确可靠的数据。否则，人们可能会损失惨重。

但我鼓励人们去真正理解预言机产生的影响，并且去了解他们正在使用的应用在依赖哪些预言机的数据。

 &lt;br/&gt;

  &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。

 

</content:encoded></item><item><title><![CDATA[简谈ETH 2.0的未来: 将分片作为数据可用性层]]></title><description><![CDATA[什么是数据可用性？将Eth 2.0的分片作为数据可用性层能为以太坊开创怎样的未来？]]></description><link>https://www.ethereum.cn/shards-as-data-availability-layers</link><guid isPermaLink="false">https://www.ethereum.cn/shards-as-data-availability-layers</guid><pubDate>Wed, 09 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [lakshmansankar.com](https://www.lakshmansankar.com/#/shards-as-data-availability-layers)

&lt;br/&gt;

每当风云变幻之时，人们都会开始思考我们所部署的系统下一步的发展是什么。

DeFi在以太坊的崛起也把这样的疑问带到智能合约平台层面。目前以太坊的[gas费](https://etherscan.io/chart/gasprice)达到了史上最高，各种的拥堵使得用户和应用开发者不由得发出这样的疑问：以太坊真的是对的选择吗？

这是一个非常微妙的问题，需要考虑多个变量的影响：

- 主网发布后的一系列新Layer2方案
- Eth 2.0+分片进程
- 新的、资金充足的layer1链，例如Solana、Near
- 以太坊在社区或工具层面的惯性
- 应用链+互操作性技术，例如Cosmos、Polkadot
- 在DeFi基元互操作性和新应用低费用间的权衡

需要追踪的信息太多了！生态里的很多叙事都受叙事者的逐利动机影响，很多时候无济于事。

我想讨论一个让我感到兴奋的、可能的未来——将Eth 2.0的分片用作Layer2的一个数据可用性层。

这是非常技术性的表述，也是我觉得它不像其他网络文章中的[概念](https://haseebq.com/defi-in-eth2-cities-suburbs-and-farms/)得到那么多关注的原因。

我希望这能提供另一个关于未来的思维模型，供读者在未来5到10年里用作参考。

##  &lt;br/&gt;

# 数据可用性到底是什么？

“数据可用性”不怎么为人熟知，却是非常重要的概念。它经常出现在研究者间的对话里，但我很少看到它在圈外被讨论到。

这篇文章不是要解释它是如何实现的，而是讨论数据可用性为何物。如果想看更多关于它的技术说明 (如何使用)，可以参考这些[资料](https://github.com/ethereum/research/wiki/A-note-on-data-availability-and-erasure-coding)。

数据可用性可能成为区块链的一个特性。除了了解它是什么，了解它不是什么也非常有帮助。

目前，链上数据的可靠性是没有得到保障的。比如，如果想知道在某区块的交易里发送者的账户余额是否足以支付，这一信息不是数据可用性能提供的。

数据可用性可提供的是保证任何用户 (包括轻客户端) 都可以在区块链上找到所有数据

下图将数据可用性区块链进行了可视化

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/qpjntZ2/1-9fa3d24296.png&quot;/&gt;&lt;/center&gt;



它只是数据元素的一个序列，而不对其内容进行解读。大概可以简单将它看作是一个有序的、无须许可、仅添加的数据库。

但对于像比特币或以太坊这样的区块链，我们需要更多功能，我们需要知道哪些交易是有效的、哪些是无效的。

我们不必在区块链上处理这个问题，我们可以在一些“执行环境”里解释数据可用性区块链，它能分辨出哪些数据块是有效的、哪些是无效的：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dtM6sJN/2-c353bcf62e.png&quot;/&gt;&lt;/center&gt;



如果我们在“执行环境1”里解释我们的区块链，那么数据块1代表有效数据，数据块2代表无效数据。这个执行环境在其他地方是可用的，比如layer2。

这个方法的美妙之处在于它完全将数据从执行里分离出来。我们可以架构一条能快速将数据进行排序和处理执行的链。然后，通过一个layer 2的执行环境对数据进行解释，像[optimistic rollup](https://medium.com/plasma-group/ethereum-smart-contracts-in-l2-optimistic-rollup-2c1cef2ec537)那样。

 &lt;br/&gt;

# Eth 2.0分片作为数据可用性层

Eth 2.0的一个可能未来是，除去一个分片外，其他所有分片都变成Layer 2的高吞吐量数据可用性区块链。而那个例外分片用作eth1的[数据过渡](https://ethresear.ch/t/alternative-proposal-for-early-eth1-eth2-merge/6666)，因此是唯一一个能在共识层面上定义数据意义的分片。

下图为执行环境可视化：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/XSmXbhx/3-b90dd37954.png&quot;/&gt;&lt;/center&gt;



那些认为不可能实现跨分片交易的忧虑在未来将会得到解决。Layer2可以在它的交易里利用所有的分片。最终，分片间的经济区隔将完全取决于layer 2。

我们不必等到[Eth 2.0的阶段2](https://docs.ethhub.io/ethereum-roadmap/ethereum-2.0/eth-2.0-phases/)才能实现。在此我不做个人估计，但这会加速更加可扩容、可执行化以太坊的到来。

当然这只是一个愿景。最终无法实现的可能性也存在，但如果真的实现了，这将带来深远影响。

 &lt;br/&gt;

# 新一轮的协议战正在进行中！

我们准备要进入一个充满未知的世界，因为区块链和扩容技术试图在这个新的、高度拥堵的DeFi体制里进行自我实现。

聪明人会考虑许多不同的可能性，并且紧密追踪其发展，理解正在发生的事。本文对未来的可能性进行了简单探索，我希望它能够为读者增加一种关于未来的构想。

在以后的文章里，我将进行更深入的探讨。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[手把手教程：如何成为ETH2 MEDALLA测试网验证者]]></title><description><![CDATA[跟着本文学习如何参与Medalla测试网，为Eth2.0质押做准备！]]></description><link>https://www.ethereum.cn/guide-becoming-a-validator</link><guid isPermaLink="false">https://www.ethereum.cn/guide-becoming-a-validator</guid><pubDate>Tue, 08 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Bankless](https://bankless.substack.com/p/guide-becoming-a-validator-on-the)

&lt;br/&gt;


![eth2手把手1.png](https://i.ibb.co/XLkgy2L/eth2-1-8c9e26184f.png)


&lt;br/&gt;


作者Ryan Sean Adams寄语：我们对即将到来的Eth2感到十分期待，因此我们为想在Eth2当前测试网中跑验证者节点的读者整理了一份详细的教程。

感谢来自[ConsenSys](https://consensys.net/) [CodeFi](https://codefi.consensys.net/)的[Collin Myers](https://twitter.com/StakeETH)和[Mara Schmiedt](https://twitter.com/MaraSchmiedt)的整理，我们希望本教程能够为想要参与Eth2的以太坊社区成员提供帮助。









测试网已经来了，主网还会远吗？

##  &lt;br/&gt;

# 本文主要内容：

1. 推荐硬件
2. 选择并安装客户端
3. 设置Eth1节点
4. 使用Eth2 Launchpad
5. 附加内容和资源

## 

![eth2手把手2.jpeg](https://i.ibb.co/Svt4FCg/eth2-2-7dedb116c8.jpg)




&lt;br/&gt;

# 1. 硬件要求

基于Eth2的去中心化设计目标，验证者预计能够使用多种不同的基础设施设置 (本地或云端等)。

*参与测试网不仅能够实战演练，还能给自己充裕的时间来选择哪种设备和方式最为适宜，拥有最可靠的性能。而目前这也是我们唯一能做的事。*

以下是一些硬件配置、资源链接以及有参考意义的教程。

## 推荐配置：

  **操作系统**：64位Linux、Mac OS X、Windows

  **处理器**：Intel Core i7-4770或AMD FX-8310 (及以上)

  **内存**：8GB RAM

  **容量**：100GB可用空间SSD

  **网络**：宽带网络 (10 Mbps)

  **电源**：不间断电源 (UPS)

**Digital Ocean** **(****满足条件的云服务商****)** 

  **标准Droplet**

- **内存**：8GB RAM
- **容量**：160GB可用空间SS
- **运行时间**：99.99%
-  **可用性**：8个数据中心
- **费用**：0.060美元/小时；40美元/月

**符合条件的硬件设备：**

- [ZOTAC ZBOX CI662 Nano Silent Passive-Cooled Mini PC 10th Gen Intel Core i7](https://www.amazon.com/ZOTAC-Passive-Cooled-Quad-core-Barebones-ZBOX-CI662NANO-U/dp/B08CVW7ZTC/ref=sr_1_14?crid=3H3C58N0E4ADZ&amp;dchild=1&amp;keywords=mini+pc+barebones+i7&amp;qid=1598263033&amp;sprefix=mini+PC+barebones+,aps,767&amp;sr=8-14)
- [SanDisk Ultra 3D NAND 2TB Internal SSD](https://www.amazon.com/SanDisk-Ultra-NAND-Internal-SDSSDH3-2T00-G25/dp/B071KGS72Q/ref=sr_1_2?crid=1KNWA41H1VO9Q&amp;dchild=1&amp;keywords=sandisk+ssd+plus+2tb+internal+ssd+-+sata+iii+6&amp;qid=1598262732&amp;sprefix=sandisk+SSD+plus+2TB,aps,790&amp;sr=8-2)
- [Corsair Vengeance Performance SODIMM Memory 16GB (2x8GB)](https://www.amazon.com/Corsair-Vengeance-Performance-Unbuffered-Generation/dp/B08BLVHWXD/ref=sr_1_2?dchild=1&amp;keywords=CORSAIR+VENGEANCE+SODIMM+16GB+(2x8GB)&amp;qid=1598262850&amp;sr=8-2)

## 最低要求配置：

  **操作系统**：64位Linux、Mac OS X、Windows

  **处理器**：Intel Core i5-760或AMD FX-8110 (及以上)

  **内存**：4GB RAM

  **容量**：20GB可用空间SSD

  **网络**：宽带网络 (10Mbps)

  **电源**：不间断电源 (UPS)

**Digital Ocean (满足条件的云服务商)** 

  **标准Droplet**

- **内存**：4GB RAM
- **容量**：80GB可用空间SSD
- **运行时间**：99.99%
- **可用性**：8个数据中心
- **费用**：0.030美元/小时；20美元/月

**符合条件的硬件设备：**

- [ZOTAC ZBOX CI642 Nano Silent Passive-Cooled Mini PC 10th Gen Intel Core i5](https://www.amazon.com/ZOTAC-Passive-Cooled-Quad-core-Barebones-ZBOX-CI642NANO-U/dp/B08BBN3LS5/ref=sr_1_41?dchild=1&amp;keywords=mini+pc+barebones+i5&amp;qid=1598263166&amp;sr=8-41)
- [SanDisk Ultra 3D NAND 2TB Internal SSD](https://www.amazon.com/SanDisk-Ultra-NAND-Internal-SDSSDH3-2T00-G25/dp/B071KGS72Q/ref=sr_1_2?crid=1KNWA41H1VO9Q&amp;dchild=1&amp;keywords=sandisk+ssd+plus+2tb+internal+ssd+-+sata+iii+6&amp;qid=1598262732&amp;sprefix=sandisk+SSD+plus+2TB,aps,790&amp;sr=8-2)
- [Corsair Vengeance Performance SODIMM Memory 8GB](https://www.amazon.com/Corsair-Vengeance-Performance-CMSX8GX4M1A2400C16-2400MHz/dp/B077SB72QN/ref=sr_1_1?dchild=1&amp;keywords=CORSAIR+VENGEANCE+SODIMM+8GB&amp;qid=1598263273&amp;sr=8-1)

## &lt;br/&gt; 

# 2.选择并安装客户端

作为Eth2第一个多客户端大型公共测试网，Medalla的发布给验证者提供了不同的客户端选择，来运行他们的节点。

在Medalla测试网中，有4个客户端团队提供了可供试用的产品实现:


![eth2手把手3.png](https://i.ibb.co/tJXHtqQ/eth2-3-bb4ab281fe.png)






## 客户端团队

### 1. Prysmatic Labs的Prysm ([Discord](https://discord.gg/KSA7rPr))

[Prysm](https://github.com/prysmaticlabs/prysm)是基于Go语言对Eth2.0协议的实现，专注于可用性、安全性和可靠性。

Prysm使用Go语言编写，并在GPL-3.0的许可下发布。

- *使用说明*: https://docs.prylabs.network/docs/testnet/medalla
- *Github*: https://github.com/prysmaticlabs/prysm/

### 2. Sigma Prime的Lighthouse ([Discord](https://discord.gg/cyAszAh))

[Lighthouse](https://github.com/sigp/lighthouse)是使用Rust语言的Eth2.0客户端，专注于速度和安全性。Lighthouse的研究团队为[Sigma Prime](https://sigmaprime.io/)，是一家信息安全和软件工程公司。Lighthouse基于Apache 2.0许可下实现。

- *使用说明*: https://lighthouse-book.sigmaprime.io/become-a-validator.html
- *Github*: https://github.com/sigp/lighthouse

### 3. ConsenSys的Teku ([Discord](https://discord.gg/7hPv2T6))

[PegaSys Teku](https://pegasys.tech/teku/)是一款基于Java的Eth2.0客户端，旨在满足机构需求与安全要求。Teku基于Apache 2的许可，用Java编写，一种以其成熟度和普遍性而闻名的语言。

- *使用说明：*https://docs.teku.pegasys.tech/en/latest/HowTo/Get-Started/Install-Binaries/
- *Github:* https://github.com/PegaSysEng/teku

### 4. Status的Nimbus ([Discord](https://discord.gg/XRxWahP))

研究项目[Nimbus](https://our.status.im/tag/nimbus/)也是Eth 2.0的客户端实现，设计用于嵌入式系统和个人移动设备，包括硬件资源受限的老式智能手机。

- *使用说明: https://nimbus.team/docs/*
- *Github: https://github.com/status-im/nim-beacon-chain*

## &lt;br/&gt; 

# 3. 设置一个Eth1节点

验证者在Eth2上运行节点，需要先运行Eth1节点，以便监视32个ETH的验证者存款。在运行Eth1节点时，用户有多种选择，以下是一些最常用的工具。

**自托管：**

[OpenEthereum](https://www.parity.io/ethereum/)

[Geth](https://geth.ethereum.org/)

[Besu](https://besu.hyperledger.org/en/stable/)

[Nethermind](https://www.nethermind.io/)

**第三方托管：**

[Infura](https://infura.io/)

##  &lt;br/&gt;

# 4.在Medalla上运行Eth2验证者节点

## 第一步：在Goerli测试网上质押ETH

如果读者刚接触以太坊，那么加入网络的主要方式就是参与质押。Eth2的Medalla测试网需要每位验证者质押32个GöETH (除了使用Goerli测试币，其他步骤与真正的Eth2没什么不一样！)

如果用户想要参与测试网，以下是一些十分有用的工具以简化参与流程。

1. Prysmatic的 D[iscord](https://discord.gg/KSA7rPr) (获得goerli测试币的通道)

- Prysmatic团队已经自动化该过程
- 只需在discord里留言“!send (你的以太坊地址)”即可

 2. EthStaker的[Discord](https://discord.gg/) (获得goerli测试币的通道)

- 该自动程序由[Beaconcha.in](https://beaconcha.in/)运行和维护
- 只需留言“!goerliEth (你的以太坊地址)”即可

 3. Goerli认证水龙头 ([Goerli Authenticated Faucet](https://faucet.goerli.mudit.blog/))

- 只需复制粘贴你的ETH地址，然后选择‘请求’即可

## 第二步：前往[Eth2 Launchpad](https://medalla.launchpad.ethereum.org/)

过去几个月以来，[以太坊基金会](https://ethereum.org/en/foundation/)、Codefi Activate以及Deep Work Studio都在研究开发一个界面，使得用户更简单地参与质押并且成为Eth2.0的验证者。

研究结果就是[Eth2 Launch Pad](https://medalla.launchpad.ethereum.org/)，该应用可以让用户安全地完成以下步骤：生成Eth2密钥对，在Eth2测试网和主网上的正式存款合约里质押32个ETH。

Launch Pad专门为在家中运行节点的验证者设计。这些以太坊爱好者想要运行自己的节点，并且在自己的电脑终端屏幕上轻松地运行指令。

![eth2手把手4.png](https://i.ibb.co/QCjdQct/eth2-4-e004051e16.png)





### 第二步a：尽职调查 (*概述部分*)

在参与质押之前，应该花点时间来读读这些内容。“概述部分”提供了一些教育信息，关于质押ETH所面临的一些风险。

#### 

![eth2手把手5.png](https://i.ibb.co/p1rptZq/eth2-5-d7d8ca3182.png)





## 第三步：生成密钥对以及助记词

每一个验证者节点，都要生成自己的验证者密钥对和助记词，以便之后生成提款密钥。

第一步，用户需要选择想要运行的验证者节点数量，以及在哪个操作系统运行。



![eth2手把手6.png](https://i.ibb.co/hRqZqPw/eth2-6-710134b70e.png)





Launchpad会给提供两种选择来生成用户自己的存款密钥。点进此[链接](https://github.com/ethereum/eth2.0-deposit-cli/blob/master/README.md)，获取用户操作系统的更多说明细节：

https://github.com/ethereum/eth2.0-deposit-cli/blob/master/README.md

第一种选择是使用从[ethereum/eth2.0-deposit-cli页面下载的二进制可执行文件，在自己的终端运行./deposit指令](https://github.com/ethereum/eth2.0-deposit-cli/releases/)。


![eth2手把手7.png](https://i.ibb.co/Jynw8BY/eth2-7-1bcbad94df.png)






第二种选择是从Python源代码中构建deposit-CLI工具。参与者需要按照以下说明操作，以确保安装了所有必需的开发库和deposit-CLI工具。

完成之后，在自己的终端运行.\eth2deposit\deposit.py指令。


![eth2手把手8.png](https://i.ibb.co/jGFkJFk/eth2-8-aab3adb5fc.png)






当用户安装了deposit-CLI工具并在终端窗口中运行它后，将收到以下提示:

1. 确定要运行的验证者节点数量
2. 确定使用哪个语言来生成助记词
3. 确定在哪个测试网来运行验证者节点

**请选择 Medalla 测试网，作为本次教程。**

现在用户将被要求设置密码，一旦密码确认，用户的助记词将生成。**确保把它记在一个安全的地方，并离线存储。**

如果用户顺利完成这一步了，将会看到下图所示的屏幕：


![eth2手把手9.png](https://i.ibb.co/6cKGPtT/eth2-9-fc5eb66177.png)




如果大家对deposit-cli有任何问题，请访问下面的GitHub库：https://github.com/ethereum/eth2.0-deposit-cli

## 第四步：上传你的存款文件

就快成功啦！下一步就是上传你在前一个步骤中生成的存款json文件。

该文件位于/eth2.0-deposit-cli/validator_keys目录中，标题为deposit-data-[timestamp].json。


![eth2手把手10.png](https://i.ibb.co/K6qM33n/eth2-10-526f777a8d.png)






## 第五步：连接自己的钱包

下一步是连接你的Web3钱包并点击继续。**确保在钱包设置中选择了Goerli测试网。**

不要发送真的ETH到Medalla测试网的存款合约上。


![eth2手把手11.png](https://i.ibb.co/Th6gjYS/eth2-11-bd9457185f.png)

&lt;br/&gt;



![eth2手把手12.png](https://i.ibb.co/tQ4Fy2y/eth2-12-a277141758.png)











## 第六步：确认交易&amp;启动存款

连接并确认了你的钱包地址之后，接下来会去到一个总结页面，该页面显示了需要发送到存款合约的GoETH总额，这个总额基于用户运行的验证者的数量。

“同意”警告选项，单击确认导航到最后一步——实际存款。

点击“启动交易”将你的GoETH存入Medalla测试网合约中。

接下来需要通过钱包确认自己的GoETH存款，每个验证者节点需确认32个GoETH。交易一旦被确认，就代表你质押成功了！可以在最具有纪念意义的Web3测试网上称自己为正式的质押者了!



![eth2手把手13.png](https://i.ibb.co/gtrJxL3/eth2-13-710d1962c6.png)







##  &lt;br/&gt;

# 6.额外内容&amp;资源

在回顾了上述的步骤之后，我们建议验证者在开始质押之前，查看以下每个客户端的指南。根据选择的不同的客户端，上述的步骤将会有不同的操作顺序。

下面是我在这个行业中见过的最深入的指南，让读者们了解到这个过程中的细微差别。

**给Eth2验证者的额外资源**

*一旦决定使用哪个客户端之后，强烈推荐大家查看下列的资源整理：*

**Eth2区块浏览器：**

- [Eth2Stats](https://eth2stats.io/medalla-testnet)
- [Beaconcha.in](https://beaconcha.in/)
- [BeaconScan](https://beaconscan.com/)

**基础设施硬件**

- [Hudson Jameson (在去中心化应用节点中运行Eth2)](https://hudsonjameson.com/2020-05-18-eth-2-0-staking-and-more-with-topaz-and-dappnode-for-under-750/)
- [Quantstamp的文章](https://quantstamp.com/blog/how-to-be-an-eth-2-0-validator-on-the-topaz-testnet)

 **CoinCashew系列:**

- [如何在Ubuntu上使用Prysm参与Eth2 Medalla测试网质押](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth2)
- [如何在Ubuntu上使用Lighthouse参与Eth2 Medalla测试网质押](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth2-with-lighthouse)
- [如何在Ubuntu上使用Teku参与Eth2 Medalla测试网质押](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth2-with-teku-on-ubuntu)
- [如何在Ubuntu上使用Nimbus参与Eth2 Medalla测试网质押](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth2-with-nimbus)

**Somer Esat 指南:**

- [Eth2.0质押指南 (Ubuntu/Medalla/Lighthouse)](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-lighthouse-c6f3c34597a8)
- [Eth2.0质押指南 (Ubuntu/Medalla/Prysm)](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-prysm-4d2a86cc637b)

**保持更新Eth2的最新发展:**

- [What’s New in Eth2 (Ben Edgington)](https://hackmd.io/@benjaminion/eth2_news/https:/hackmd.io/@benjaminion/wnie2_200817)
- [Ethereum Blog (Danny Ryan的快速更新)](https://blog.ethereum.org/)
- [Ben Edgington (Eth2规范注释)](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/#introduction)
- [Jim Mcdonald (Attestant里的文章)](https://www.attestant.io/posts/)

**关于密钥:**

- [Ledger Nano X (BLS Firmware更新)](https://www.ledger.com/first-ever-firmware-update-coming-to-the-ledger-nano-x)
- [Attestant: ](https://www.attestant.io/posts/protecting-validator-keys/)《保护验证者密钥》

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[Eth2更新速览#15]]></title><description><![CDATA[客户多样性很重要 eth1+eth2端对端演示。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-15</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-15</guid><pubDate>Fri, 04 Sep 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/09/01/eth2-quick-update-no-15/)





&lt;br/&gt;



&lt;br/&gt;



*耕农们看好庄稼啦*



&lt;br/&gt;



*时和年丰*



&lt;br/&gt;



*硕果累累*



&lt;br/&gt;

# 要点速览

- 平稳地运行着
- 客户端多样性是必须的
- Eth1+Eth2 (阶段5，即合并阶段) [端对端demo](https://twitter.com/mkalinin2/status/1299038199591862274)
- 在逐渐接近阶段0这个过程中，测试和审计仍继续着

##  &lt;br/&gt;

# Medalla运行良好 (经过一些小波折后)

无波折的测试网是充满不确定性的、可疑的。

如果读者在过去几周里有关注Medalla的进展，那么大家对8月14日发生的为期5天的事故肯定不陌生了。大家可以阅读Prysm对该事故的[回顾文章](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)，以了解该次事故的技术因素和时间线细节。还可以读Ben最近的博客文章([[1](https://hackmd.io/@benjaminion/eth2_news/https:/hackmd.io/@benjaminion/wnie2_200817)][[*2*](https://hackmd.io/@benjaminion/eth2_news/https:/hackmd.io/@benjaminion/wnie2_200822)])，他对此事件进行了高水平的分析。事件发生后，客户端团队忙活了整个周末，部署同步操作和修复漏洞来解决网络的高度碎片化问题。

尽管该事件为测试网带来了巨大的压力，但同时给了所有的客户端一个机会，增强客户端的抗压能力，以应对一些难以想象的失控场面。我相信经历了这次事件，客户端软件会更加稳健。在Eth2主网上线之前，我会稍微睡得安稳一些。

事故过后，Medalla平稳地运行着：现在测试网上有3.9万个活跃验证者，还有1.2万在启动队列中等候着 (要等12天呢)！

 &lt;br/&gt;

# 客户端多样性是必须的

尽管有许多Eth2客户端正积极开发着*[**卓越的、可行的、强健的、可用的等等**]**，但是现在网络主要还是由单一的客户端**Prysm**主导。*

这是有历史原因的——过去一年多以来，Prysm都将重心放在早期的测试网、社区参与以及其可用性上。给了Prysmatic团队良好的声誉。对于我们整个行业和开源来说，社区建设是非常困难的，也是非常重要的。

也就是说，网络由Prysm主导的这个隐患，在此次Medalla的事件中放大了，而我们在为Eth2.0主网发布做努力时，作为社区，我们必须有意识地补救这个问题。我自己在Medalla上测试过了所有Eth2客户端，我可以直接告诉你，绝大多数客户端都十分强健且有完善的说明文档，所有客户端团队都会积极参与discord和github，帮助你解决任何可能遇到的问题。

&lt;br/&gt;

## 保护自己

客户端多样化不仅使Eth2共识更加强健，还会在用户面临极端情况时提供一定的保护性。由于Eth2的反相关激励机制，用户的消极行为与其他人的消极行为关联性越强，用户的损失就越大。

比如，假设由于客户端A出现故障，网络中60%的节点连续掉线几天，但是客户端B和客户端C保持平稳运行。尽管客户端B和C上的节点持续构建区块链，但是由于&gt;33%离线率，链将不能进行最终确定工作。而如果用户使用客户端A运行节点，由于最终确定性故障仍然存在 (可以称之为“不活跃漏洞”)，用户的损失将越来越多。然而如果你使用客户端B或C运行节点，由于你保持在线，你的余额会受到保护。[注意：不活跃漏洞比普通的离线要面临更严重的惩罚。]

相反，假设一小部分的客户端B节点 (占网络的20%)遭遇严重故障，导致其客户端用户面临大量掉线故障。在这种情况下，该链仍然能够继续最终确定工作，因为网络上80%的节点仍在运行。这些离线验证者并不会导致“不活跃漏洞”，他们只会遭受普通的惩罚。所以与上述情景相比，这些运行客户端B节点的验证者只会受到比较小的惩罚。

&lt;br/&gt;

## 易于切换的客户端

除了努力尝试开发新客户端，客户端团队也在努力确保切换客户端变得更加简单、安全。随着一些[跨客户端标准](https://hackmd.io/@sproul/Bk0Y0qdGD)的添加，用户很快就可以从一个客户端切换到另一个客户端，而且停机时间很短，没有意外罚没的风险。

这些防止客户端锁定的标准，是强健的Eth2网络的关键组件。易于切换的客户端将使社区在单个客户端出现故障时，能够更快地解决问题 (如Medalla事件)。

 &lt;br/&gt;

# eth1+eth2 端到端 demo 

Eth2的主要目标之一是阶段1.5 (即合并阶段)，届时现有的以太坊区块链共识将整合到eth2中。从那时起，我们所熟知和热爱的区块链将有PoS验证者来构建，取代当前的资源密集型工作量证明共识。

到阶段1.5的过渡旨在尽可能与现有用户和应用程序无缝衔接。Eth1客户端仍然是状态、事务和执行的载体。通过最大程度上保持用户层的不变，以太坊将能够像现在一样利用现有的工具和API来进行交易并支持dapp。

为此，Mikhail (TXRX团队) 和Guillaume (geth团队) 最近发布了多分片信标链 (其中eth1链作为分片之一) 的[端到端演示](https://twitter.com/mkalinin2/status/1299038199591862274)。在发布的演示视频中，Mikhail使用未修改的MetaMask钱包将大量交易发送到eth1分片链。

读者可以查看并且试用[docker化](https://github.com/txrx-research/eth1-shard-demo)的eth1+eth2 demo，如果想更深入的话，可以[从来源](https://github.com/txrx-research/teku/tree/phase1/phase1/src/main/kotlin/tech/pegasys/teku/phase1#eth1-shard-simulation)进行搭建并运行。

 &lt;br/&gt;

# 测试和审计仍在进行中，聚焦阶段0主网

在这方面我们并未松懈。

客户端团队正在努力工作，审计人员正在深入研究每个细节，并正在准备启动主网。🚀

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth 1.x：无状态以太坊新思路“reGenesis”]]></title><description><![CDATA[reGenesis和静态状态网络为“无状态以太坊”目标提供了一种可行的新思路。]]></description><link>https://www.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree-2</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree-2</guid><pubDate>Fri, 28 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/01/28/eth1x-files-the-stateless-ethereum-tech-tree/)





 &lt;br/&gt;


![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)
&lt;br/&gt;



这周我们将对[技术树 (tech tree)](https://github.com/ethereum/stateless-ethereum-specs/blob/master/techTree.md) 进行更新，为以太坊1.x研发添加一些新的主要里程碑，这些里程碑并不算是无状态以太坊的完整实现，而是我们在中期能够合理实现的目标。

其中最重要的更新是Alexey的reGenesis提案。虽然这是远未规范化的更新，但是从研发的角度来看，**reGenesis为“完全无状态”的终极目标提供了一种更保守更切实可行的路径。** 在其他方面与reGenesis互补的技术是**静态状态网络**，能够帮助在比特流 (bittorrent) 式的基于DHT的网络中传播状态快照和历史链数据。

同时，一些距离我们比较近的目标已经在为EIP化做准备，例如**代码分块 (code merkleization) 和状态二进制树。** 在本文中，我会为大家阐明已经实现的进展，并且附上链接，以便读者深入了解感兴趣的领域。




![1.x19.png](https://i.ibb.co/pjLWzmk/1-x19-dad107bd13.png)










## &lt;br/&gt; 

# 二进制树

目前以太坊使用十六叉[Patricia默克尔树](https://eth.wiki/en/fundamentals/patricia-tree)来编码状态，但如果**转变为二进制式会带来显著的效率提升，** 尤其是在见证大小这个方面。对以太坊状态进行完全重新编码需要制定新范式，以及清晰的过渡策略。最后，还需要决定是否将智能合约代码分块，并且将该过程合并到二进制树过渡中还是作为独立更新。

###  &lt;br/&gt;

## 二进制树范式

与当前的十六叉树结构相比，二进制树的概念要简单一些。十六叉树从树根遍历到子节点有十六条可能路径，二进制树只有两条。**随着状态树的重新规范，我们有机会解决以太坊运行五年以来显著的低效问题。** 此外，我们也有机会使状态更适应现实世界中数据库编码的性能挑战 (在[上一篇有关状态增长的文章](https://blog.ethereum.org/2019/12/30/eth1x-files-state-of-stateless-ethereum/)中有提到)。

有关正式二进制树规范和分块规则的讨论可以参见[ethresearch](https://ethresear.ch/t/binary-trie-format/7621).

###  &lt;br/&gt;

## 过渡到二进制树

重要的不仅仅是二进制树范式这个目的地，旅途本身也非常有价值！在理想的过渡过程中，不会对网络的交易处理产生干扰，也就是说客户端将需要在处理每十五秒出现的新区块的同时构建新的二进制树。

目前看起来最有希望的过渡策略被称为[**“覆盖”法**](https://ethresear.ch/t/overlay-method-for-hex-bin-tree-conversion/7104)，该方法部分基于geth的新快照同步协议。总的来说，新的状态改变会以二进制范式被添加到现有的十六叉树中，也就是说在过渡过程中会存在二进制和十六进制混合体。不受影响的状态会被转换为后台处理。一旦完成转换，这两层会被合并到一个二进制树中。

请务必注意，客户端多样性在二进制转换过程中也起到了非常重要的作用。每个客户端将需要实现自己的过渡版本，或是依靠其他客户端进行转换，然后在另一端等待新的树。

这需要我们“三思而后行”，所有客户端需要协同工作来进行测试并协调转换。出于安全性的考量，在过渡过程中网络有可能需要短暂停止服务 (例如挖出一些空块)，但是目前就任何具体计划达成共识还为时尚早。

 &lt;br/&gt;

## 代码分块

以太坊状态树的很大一部分由智能合约代码组成，约占50GB状态的1GB左右。所有用于智能合约交互的见证 (witness) 都必须提供其交互的代码，以计算codeHash, 而这可能产生大量额外数据。

**代码分块 (Code Merkleization) 旨在将合约代码切分为较小的块，然后将codeHash替换为另一个默克尔树根。** 这种方式使得我们可以使用参考哈希来替代见证中潜在的大部分智能合约代码，从而省去数千字节的见证数据。

进行代码分块有多种方式，按复杂度来看，比较简单的就是通用分块 (例如每块大小64字节)，而较为复杂的方式就是基于Solidity functionId或JUMPDEST指令的静态分析。最优的代码分块策略最终还是取决于是否适用于从主网收集到的真实数据。

 &lt;br/&gt;

# reGenesis

要了解reGenesis提案的最佳去处是[@mandrigin给出的解释](https://medium.com/@mandrigin/regenesis-explained-97540f457807)，以及[@realLedgerwatch提交的完整提案](https://ledgerwatch.github.io/regenesis_plan.html)，概括来说reGenesis基本可以说是“区块链的大扫除”。**完整的状态将从概念上分为“活跃”和“非活跃”状态**。整体“活跃”状态会按一定周期被停用，然后新的交易会再次几乎从零开始建立新的活跃状态 (因此被称作“reGenesis”)。

如果交易需要之前的状态，将会提供一个见证，这非常类似于无状态以太坊所需的证明：证明状态更改与某个非活跃状态相一致的默克尔证明。如果一笔交易需要状态的“非活跃”部分，它将自动将其转变为为“活跃”状态 (无论交易是否成功)，这该部分将会留至下一次reGenesis发生。

这样做的一个好处在于，在使用状态时创建一些经济限制，而实际上不会删除任何状态。其次，如果交易发送方盲目地反复试图交易，则无法生成见证。

关于reGenesis的意义，它使得以太坊朝着终极的无状态目标跨进了一大步，并且避开了要实现无状态面临的最大挑战，即**EVM执行时如何计算见证的gas。** 同时它还使得某个版本的交易见证能够在网络中传播，让更轻量级的客户端和dapp开发者能够有更多机会熟悉无状态范式和见证生成。

reGenesis之后“真正的”无状态性就只是程度上的问题了：无状态以太坊其实只是每个区块之后的reGenesis。

 &lt;br/&gt;

# 状态网络


![1.x20.jpeg](https://i.ibb.co/9vqHffc/1-x20-ae3f0c21f9.jpg)

从一开始，网络协议的优化只是技术树中的一个“支线任务”，但随着reGenesis进入无状态以太坊的版图，为分享以太坊链数据 (包括状态) 探索替代的网络原语也成为了主线任务。以太坊当前的网络协议是一个整体，但事实上有多种类型的数据能够通过不同的“子网络”来进行共享，而这些“子网络”能够满足不同的需求。

之前在无状态会议中讨论到这个话题时，我们称其为[“三个网络”](https://ethresear.ch/t/stateless-ethereum-may-15-call-digest/7420)，[基于DHT](https://ethresear.ch/t/stateless-ethereum-may-15-call-digest/7420)的网络能够更高效地服务于不常改变的数据类型。随着reGenesis的引入，“非活跃”状态能够被纳入这类不常变化的数据，从理论上来说也就能够适用于**比特流式的swarm网络**，而不是当前由全节点进行逐条广播。

自上一次reGenesis之后，在网络中传播不变状态的网络就是静态状态网络 (static state network)，可以[基于devp2p库 (以太坊网络协议) 中新的Discovery v5.1规范](https://github.com/ethereum/devp2p/pull/157)进行延展。

之前类似[Merry-go-Round sync](https://ethresear.ch/t/merry-go-round-sync/7158)和更为成熟的[SNAP protocol](https://blog.ethereum.org/2020/07/17/ask-about-geth-snapshot-acceleration/)，可用于同步活跃状态，是迈向完全分布式动态状态网络的重要步骤，使得客户端能够快速同步完整状态。

 &lt;br/&gt;

# 结语

关于无状态以太坊技术树每个分支更为细致和技术化的说明，读者可以参阅[无状态以太坊规范库](https://ethresear.ch/t/merry-go-round-sync/7158)，也能在Eth1x/2 R&amp;D Discord中对所有这些话题进行讨论，如果想加入可以在ethresear.ch上要取邀请。如果有任何反馈和建议，请在推特联系@gichiba或@JHancock。

&lt;br/&gt;

&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[VITALIK：区块链“验证”的哲学]]></title><description><![CDATA[关于区块链验证，为什么协和派比定义派更优？基于协和派的观点，区块链验证有哪些发展，以及可以如何有效抵抗51%攻击？]]></description><link>https://www.ethereum.cn/vitalik-ca-general-2020-08-17-philosophy</link><guid isPermaLink="false">https://www.ethereum.cn/vitalik-ca-general-2020-08-17-philosophy</guid><pubDate>Thu, 27 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源| [vitalik.ca](https://vitalik.ca/general/2020/08/17/philosophy.html)



 

 可以结合这些文章一起看:

- [A Proof of Stake Design Philosophy](https://medium.com/@VitalikButerin/a-proof-of-stake-design-philosophy-506585978d51)
- [The Meaning of Decentralization](https://medium.com/@VitalikButerin/the-meaning-of-decentralization-a0c92b76a274)
- [Engineering Security through Coordination Problems](https://vitalik.ca/general/2017/05/08/coordination_problems.html)

区块链的一个强大特性是链上每一部分的操作都可以被独立验证。即使区块链上绝大部分的矿工（或PoS机制下的验证者）被攻击者控制了，且该攻击者尝试推动无效区块的敲定，网络也可以轻易拒绝。甚至那些当时并不在验证区块的用户也（可能会自动）收到其他正在验证的用户发出的警报，他们可以确认攻击者的区块链是无效的，然后自动拒绝该链，并且进行协调以接受遵循规则的链。

但我们真正需要多少验证呢？我们是需要100个还是1000个独立验证节点？我们是否需要创造一种文化使得全世界的普通用户都运行软件来验证交易？这些问题本身就很困难，虽然区块链领域发轫于一条“Nakamoto”工作量证明式的区块链，但如果我们想架构基于更优共识机制的区块链，这些问题是我们需要解决的关键挑战。

&lt;br/&gt; 

# 为什么要“验证”？

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/S5C7Yyj/1-50698b31fb.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt; 51%攻击正推进无效区块的敲定。我们需要网络拒绝这条链！&lt;/center&gt;

&lt;br/&gt;

用户验证区块链主要有两点好处：首先，它能最大程度提高节点对**权威链**（社区成员普遍认为有效的链）做出正确判断并维持该链的几率。通常，有最多矿工/验证者支持认为有效的链被定义为权威链（比如，比特币里的“最长链”）。由此，无效链就自然被拒绝了。如果需要在多条有效链中选择，那么有最多矿工/验证者支持的链胜出。所以，如果你的节点可以验证所有的有效状态，也就可以检测出哪些链是有效、哪些链是无效的，从而最大程度提高你正确判断哪条是权威链的几率。

但关于为什么验证区块链是有利的，还有另一个更深层次的原因。假设一个能力很强的攻击者试图推动协议的改变（比如，改变发行量），并得到大多数矿工的支持。如果没有其他人验证这条链，这次攻击就很容易成功了：默认情况下，每个人的客户端都会接受这条新链。等到大家都知道发生什么事了，这将取决于是否有异议者试图协调其他人来反对这条链。**但如果一般的用户都在验证，那么协调的问题就落在了另一边：这成了想要改变协议的人的责任去说服用户自行下载软件补丁，接受协议的更改。**

如果有足够多的用户在验证，**那么改变协议的尝试并不会在默认情况下成功 (default to victory)。相反，试图改变协议的这一举动会变得有争议，并在默认情况下陷入混乱 (default to chaos)。**混乱会中断很多工作，且需要带外的社会协作来解决，但这会给攻击者带来更大的阻碍，削弱攻击者认为他们能够轻易成功并脱身的信心，甚至打消他们尝试发起攻击的念头。如果大多数用户都在验证（直接或间接），而攻击只得到大部分矿工的支持，那么这样的攻击将会**默认走向失败 (default to failure)**，这是最好的结果。

 &lt;br/&gt; 

# 定义派 (definition) vs 协和派 (coordination)

请注意，这个论证逻辑与我们经常听到的非常不一样：当一条区块链的规则发生了改变，从“定义”上来说，这条链就不再是正确链了，无论有多少用户认同这些新的规则，重要的是你个人可以选择留在那条你所赞同的旧链上。

这是[Gavin Anderson](http://gavinandresen.ninja/a-definition-of-bitcoin)提出的定义派的一个典型观点：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/5B06JZM/2-3ddcbbce35.png&quot;/&gt;&lt;/center&gt;



&lt;center&gt;（译者注：翻译如下）&lt;/center&gt;

我想提出一个比特币宏观上的技术定义：

“比特币是一个记录唯一的、经过有效签名的交易的账本，这些交易都被打包进由区块组成的链上，这条链始于创世区块（哈希值为0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f）。这条区块链遵循2100万个比特币的发行计划，有着累计最高的双重SHA256工作量证明。

如果要阐释全节点的价值，另外一个来自t[he Wasabi wallet](https://news.ethereum.cn/vitalik-ca-general-2020-08-17-philosophy/#the-importance-of-running-a-full-node)的观点表达得更加直接。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QQyNLqM/3-86333b36b6.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;(译者注：翻译如下)&lt;/center&gt;



当运行比特币全节点时，你可以界定自己自愿同意的精确货币规则，没有人可以将这一选择强加在你身上。因此，任何自主个体想要获得财务独立，都必须运行全节点。一旦你自己的规则切实设立了，你的软件会在比特币的点对点网络里发现与你的规则不冲突的其他节点。这些对等节点会给你发送符合他们规则的有效交易和区块，你可以自己验证这些交易和区块是否符合你的规则。如果被提议的交易中有一笔与你的规则相冲突，那么可以标记它为无效，然后切断与该节点的连接并禁止该节点给你发送恶意交易。

**确立你的货币主权**

通过全节点，你可以对比特币这种可靠货币的规则进行界定、验证和执行。

 

请留意这个观点的两个核心点：

- 如果区块链的一个版本不接受你认为是基本的且不可商榷的规则，那么从定义上来说它就不是比特币区块链（在其他情况下也不是以太坊或其他任何链），无论有多少人承认该链。
- 重要的是你所在的区块链上的规则是你认为可接受的。

但是，我认为这种“个人主义”的看法是非常错误的。为什么呢，让我们来看一下会引起顾虑的一个情景：绝大多数的参与者都接受对协议规则的某些改变，而只有你觉得无法接受。比如，如果未来交易费变得非常低，那么为了保持链的安全性，差不多所有人都同意采用一些新规则来增加发行量。而你坚持要继续执行旧的规则来运行你的节点，然后对大多数人所在的链进行分叉。

从你的观点来看，你的币仍然保持在以你认同的规则来运行的系统中。但这又如何呢？其他人不会接受你的代币；交易所不会接受你的代币；网站会展示新币的一些高峰值，但所指代的是多数人所在链的代币。你的代币没有“价值”。加密货币和区块链从根本上来说是社会建构的，如果没有其他人相信它们的话，它们什么都不是。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ZW49bVc/4-696aecfad2.png&quot;/&gt;&lt;/center&gt;








所以，那另一派的观点是什么呢？它的核心理念是[**用协和谬误 (coordination problem) 的方法来解决区块链的工程安全问题**](https://vitalik.ca/general/2017/05/08/coordination_problems.html)。

通常来说，现实世界中的协和谬误是很糟糕的事：如果英语这门语言可以摆脱它高度复杂性和不规则的拼写系统，仅仅保留发音，或如果美国转用公制，或如果我们可以在一次经济萧条中把物价和工资都下调10个百分点，这些对大多数人来说都是好事。然而，在现实中，这些转变都需要得到每个人的同意才可行，这经常是非常非常困难的。

但是，**在区块链应用上，我们将协和谬误转化为优势。我们将协和谬误创造的摩擦作为抵挡中心化攻击者发起的不当行为的壁垒**。我们建构具有特性X的系统，并保证会保持特性X，因为将规则从X改为非X需要所有人都同意并且同时升级他们的软件。即使有攻击者可以强推改变，这样做也是非常难的，尤其是当用户负责积极协调异议以抵抗改变的时候，难度会更大。

请注意协和派观点的特别之处在于：完全不同于上述所说运行全节点的目的只是为了独善其身，且在出现争议性强的硬分叉时，只有运行全节点的人才是安全的。而协和派观点更像是群体免疫：越多的人参与验证，每个人就越安全，且即使只有一部分人在验证，每个人也能得到高度保障。

 &lt;br/&gt; 

# 进一步分析“验证”

我们现在进入下一个话题，它与轻客户端和分片这些话题的相关性很强：通过验证我们实际上实现了什么呢？要理解这一点，让我们先回到前文所述，即如果攻击发生了，对于攻击的发展方向，我们有以下的偏向排序：

**默认失败**&gt;**默认混乱**&gt;**默认成功**

符号“&gt;”在这里当然表示“优于”。最好的情况是攻击直接失败；稍次的情况是攻击引起混乱，大家对什么是正确链莫衷一是；最坏的情况是攻击轻易成功。为什么陷入混乱比攻击成功要好得多？这个问题与动机有关：混乱增加了攻击者的成本，抵消他们最终能成功的胜算，从一开始削弱他们发起攻击的信心。**“默认混乱” (default-to-chaos) 的设定意味着攻击者不仅需要成功对区块链发起51%攻击，还需要赢得使整个社区信服、跟随改变的“社会战”。成功发起51%攻击并不代表最终的胜利，随后“社会战”的难度远大于此，因此攻击行为也变得没有那么诱人。**

验证机制的目的就是将攻击结果从“默认成功”偏移向“默认失败” (理想情况下)，或“默认混乱” (没那么理想的情况下)。如果大家都有一个能充分验证的节点，当有攻击者试图改变区块链的一些规则时，这样的攻击会失败。如果部分人有能充分验证的节点，但大部分其他人都没有，这种情况下攻击会导向混乱。但现在我们还可以思考：有没有其他方法可以实现同样的效果？

 

## 轻客户端和欺诈证明

顺着这个逻辑，自然发展出**有欺诈证明 (fraud proof) 的轻客户端**。今天大多数区块链的轻客户端只对由大部分矿工支持的一个特定区块做简单的验证工作，而不费心去查看其他协议规则是否被执行。这些客户端的运行都基于大多数的矿工是诚实的的假定。如果有争议性的分叉发生了，客户端默认跟随链上的大多数，那就变成了是由用户来主动选择是否要留在以旧规则运行的少数人所在的链上。因此，在今天轻客户端的机制下，攻击是默认成功的。但如果加上欺诈证明的话，情况会变得不一样。

下图是欺诈证明最简化的运作形式。通常，区块链上的一个区块只会影响一小部分的区块“状态”（包含账户余额、智能合约代码……）。如果一个充分验证的节点在验证一个区块时发现它是无效的，他们可以生成一个数据包（欺诈证明），这个数据包是从区块状态获得的，包含刚好能验证这个区块的数据。他们向轻客户端广播这个数据包。这样，即使他们没有链上的其他数据，轻客户可以使用这个数据包的数据自行验证区块。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/9bCgqhv/5-ae0c3956d9.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;区块链上的一个区块只会影响一小部分的账户

欺诈证明会包含这些账户的数据以及证明数据正确性的默克尔证明&lt;/center&gt;

这项技术有时也以[“**无状态验证**”](https://ethresear.ch/t/the-stateless-client-concept/172)为人所知：与保存一份完整的区块链状态数据不同，客户端可以只保存区块头，客户端可以通过向其他节点请求区块验证所需的状态的默克尔证明来进行实时验证。

这种技术的优势在于**轻客户端可以只在它们收到警报时才对个别区块进行验证**，警报是可验证的，所以如果轻客户端接收到一个错误的警报，它们可以停止接收该节点的警报。因此，正常情况下轻客户端仍然是轻量的，只需要验证由大多数矿工/验证者支持的区块。但在一些特殊情况下，大多数人支持的链会包含轻客户端不接受的区块，**只要有至少一个诚实节点在验证欺诈区块，那个节点会将其视为无效，广播欺诈证明，由此导致网络的其他节点都拒绝这个欺诈区块。**

 

## 分片

分片是协和派观点的一种自然延展：在分片系统里，交易数量太多了，要求大多数人一直在线直接验证是不现实的。但如果经过合理设计，系统里任何无效的单独区块都可以被检测到，且可以用欺诈证明来证明其无效性，然后在整个网络广播。 **一个使用分片系统的网络可以理解为其中的每个人都是一个轻客户端。只要每个分片上的参与者人数达到了一个最低门槛，那么整个网络都有了群体免疫。**

另外，在分片系统里，区块生成 (不只是区块验证) 是相当方便的，且可以通过消费型笔记本电脑完成，这一点是非常重要的。当网络的核心不再需要依赖高性能硬件时，可以降低拒绝少数人所在链的门槛，同时使得大多数人所驱动的协议改变更难“默认成功”并迫使所有其他人接受。

这就是可审查性在现实世界的意思：并不是一切都需要一直经过所有人的验证，而是 (1) 每个部分都有足量的人进行验证，只要有错误发生都会被检测到；(2) 当错误被检测到，且对所有人都清晰可见。

也就是说，长期来看，区块链肯定可以改善这种情况。**ZK–SNARKs（或validity proofs，即“有效性证明”）就是其中一种方式**：这是一种高效可验证的密码学证明，它使区块矿工可以向客户端证明区块是否满足一些任意的、复杂的有效性条件。**[有效性证明比欺诈证明更好](https://medium.com/starkware/validity-proofs-vs-fraud-proofs-4ef8b4d3d87a)**，因为它们不依赖于交互博弈发现欺诈。另一项重要的技术是[**数据可用性 (data availability) 检测**](https://arxiv.org/pdf/1809.09044.pdf)，它可以用来保护网络不受那些数据没有完全公开的区块的影响。数据可用性检测是基于一个非常保守的假定，那就是网络上至少有少量的诚实节点在继续运行，好的方面是诚实节点的数量门槛并不高，且即使在有大量攻击者的情况下门槛也不需要提高。

&lt;br/&gt;  

# 实时性与51%攻击

现在我将对“默认混乱” (default to chaos) 这种情况的最严重后果进行论述：51%攻击。在众多社区中，现行的常态是如果51%攻击成功了，那么51%攻击的链就必然成为有效链。现实通常都高度遵循这种常态，在最近[以太经典 (ETC) 遭遇的51%攻击](https://blog.bitquery.io/attacker-stole-807k-etc-in-ethereum-classic-51-attack)中得到充分体现。攻击者对3000多个区块进行回滚 (期间通过双花窃取了807,260个ETC)，他将链的交易往前回溯得很远，而这对于ETC的两个客户端之一OpenEthereum来说，在技术上是无法实现的；结果就是，Geth的节点跟随了攻击者的链，而OpenEthereum的节点留在了原来的链上。

即使这次意外并不是ETC社区计划内的设计，我们可以说这次攻击事实上的确是“默认混乱”的走向。不幸的是，社区随后通过投票决定接受更长的攻击链成为权威链，ETC在[推特](https://twitter.com/eth_classic/status/1289637659351031809)上将这一举动形容为“一如既往，遵循工作量证明”。因此，社区规范主动地帮助攻击者获得胜利。

但其实我们可以对权威链进行不同的定义并达成共识。试想这样一条规则，一旦一个客户端把某个区块打包到权威链，而该区块有超过100个后续区块，从那时起该客户端将拒绝任何不包含该区块的链。或者，在一个以最终确定性为导向的权益证明机制设定里 （比如以太坊2.0)，试想这样一条规则，当一个区块被最终敲定了，它就永远不能被回滚了。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/b1660q1/6-552c88d2df.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;为了方便说明，以5个区块为回滚上限为例；

实际上回滚上限可以更长，如100—1000个区块&lt;/center&gt;

也就是说，这实际上对权威链的定义作出了重大的改变：与客户端只看他们接收到的数据本身不同，客户端还要看数据是什么时候收到的。这可能会因为网络延迟出现客户端间产生分歧的情况：如果出现由于大型攻击，互相冲突的区块A和区块B在同一时间被敲定了，且一些客户端先看到A，一些先看到B的情况，怎么办？但我会说这是好事，因为这意味着***\*试图回滚交易的51%攻击不会“默认成功”，而是“默认混乱”\****，然后带外的应急响应机制可以在两个区块间选择哪个被打包到链上。如果协议设计合理的话，强制升级到带外应急响应的成本是很高的：在权益证明机制里，这种情况会要求1/3的验证者牺牲他们的存款，接受被罚没的后果。

我们可以将这个方法拓展到其他方面。我们也可以尝试使[审查交易的51%攻击](https://ethresear.ch/t/censorship-detectors-via-99-fault-tolerant-consensus/2878)走向“默认混乱”。对实时检测器 ([**timeliness detectors**](https://ethresear.ch/t/timeliness-detectors-and-51-attack-recovery-in-blockchains/6925)) 的研究将各种类型的攻击都默认走向失败这个方向推进，尽管还会有一些混乱的情况，因为对于连接不稳定或不在线的节点，实时检测器没有多大作用。

**对于重视不可篡改性的区块链社区，采用这种回滚限制可能是更优的发展方向。**说实话，无论一笔交易已经被打包到链上多长时间，也很难说这条区块链是不可篡改的，总是可能有一些很强的攻击者发起无法预料的攻击，让区块链上的交易发生回滚。当然，我知道即使是BTC和ETC，在极端情况下都已经设有回滚限制。如果发生回滚几周交易的攻击，社区可能会采用用户发起的软分叉来拒绝攻击者的链。但社区如果能更确切地在这件事上达成共识并将其形式化，会是向前迈出的一大步。

 &lt;br/&gt;

# 结论

这篇文章其实有几点启示。首先，如果我们承认社会协和的正当性，以及我们承认有关“1/N”信任模型 (即假设在网络的某处存在一个诚实的人；不同于假设某特定一方，比如Infura，是诚实的) 间接验证的合理性，那么我们能够创建扩容性更强的区块链。

最后，如果我们把实时性也列入到定义权威链的影响因素，我们就为提高拒绝51%攻击的能力引入了很多的可能性。其中，最容易获得的特性是[弱主观性 (weak subjectivity)](https://blog.ethereum.org/2014/11/25/proof-stake-learned-love-weak-subjectivity/)：如果客户端被要求至少每三个月上线一次，并拒绝回滚三个月以上的交易，那么我们可以把罚没添加到权益证明机制里，使攻击的成本变得非常高。但是我们可以再进一步：我们可以拒绝回滚被敲定区块的区块链，并由此维持不可篡改性，甚至是抗审查性。由于网络是不可预测的，在某些情况下依赖实时性的确意味着攻击会默认走向混乱，但其利大于弊。

当能理解以上这些观点，我们就能避开以下这些陷阱：(1) 过度中心化；(2) 验证过剩导致低效；以及 (3) 非明智的规范意外使得攻击更加容易。除此之外，这些思维还能帮助我们构建更有韧性、性能更好、更安全的区块链。

 &lt;br/&gt;

&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[Eth2 Staking系列#5：为何客户端多样性如此重要]]></title><description><![CDATA[Medalla测试网事件给我们带来什么启示？]]></description><link>https://www.ethereum.cn/validated-why-client-diversity-matters</link><guid isPermaLink="false">https://www.ethereum.cn/validated-why-client-diversity-matters</guid><pubDate>Wed, 26 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/08/21/validated-why-client-diversity-matters/)





&lt;br/&gt;

![质押1.png](https://i.ibb.co/WyP26VY/1-8cf3398852.png)
&lt;br/&gt;



免责声明：本文对并没有针对哪一个客户端。我们要知道，每个客户端甚至每个规范都可能含有不足以及漏洞。更别说，Eth2是一个十分复杂的协议，而它的实现者也都是凡人而已。写这篇文章的目的是为了强调如何以及为什么要减少风险。

 

Medalla测试网发布之后，我们鼓励大家使用不同的客户端参与测试网。而测试网创世那天，就给我们展现了多客户端的重要性：Nimbus和Lodestar客户端运行的节点无法处理整个测试网的工作，因而没有跟上同步节点的进度。这造成的结果是，Medalla发布半小时以后才开始进行最终确定工作。

8月14日，Prysm节点出现时间错误，因为他们参照的其中一个时间服务器突然跳到了未来的时间上。结果，这些节点开始提议未来区块、验证未来证明。然而，节点的时钟被校准之后 (通过更新客户端版本的方式，或者由于时间服务器调回正确的时间了)，早前取消了罚没保护的节点却发现其质押资产被罚没了。

这整个过程都发生得有点微妙，我强烈推荐大家阅读[Raul Jordan对该事件的回顾文章](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)。

##  &lt;br/&gt;

# 时钟错误 — 情况恶化

当Prysm节点开启时间旅行的时候，他们约占网络份额的62%。这意味着无法达到最终确定区块的最低标准 (要有&gt;2/3活跃验证者在链上)。更糟糕的是，这些节点无法找到它们所期望的链 (时间轴上出现了4小时的间隔，它们都去到了未来稍微不同的时间)，所以他们在对“丢失”的数据预测时，通过短分叉淹没了整个网络。



&lt;br/&gt;


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/y0jV1RT/2-b60beb9d87.png&quot; /&gt;&lt;/center&gt;

&lt;br/&gt;



&lt;center&gt;图示：目前Prysm客户端占Medalla节点总量的82%&lt;/center&gt;

&lt;center&gt;&lt;a href=&quot;https://eth2.ethernodes.org/network/Medalla&quot;&gt;来源：ethernodes.org&lt;/a&gt;&lt;/center&gt;

那么在这时，网络充斥着对链头的不同的预测，因此所有客户端开始应付越来越多的工作——确定哪个链头是有效的。这导致节点落后、需要同步、内存不足和其他形式的混乱，所有这些都使问题更加恶化。

总的来说，这此事件是好的，因为这不仅让我们修复了与时钟相关的根本问题，还可以在大量节点故障和网络负载的情况下对客户端进行压力测试。也就是说，这次失败告诉我们网络不能太极端，而该次事件的罪魁祸首就是因为Prysm的节点占网络的大部分。

##  &lt;br/&gt;

# 助力去中心化—Part 1，有益于eth2

正如本系列的[第二期文章](https://blog.ethereum.org/2020/02/12/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)里所讨论的那样，根据异步拜占庭容错算法，1/3是保证网络安全的一个神奇数字。如果超过1/3的验证者离线了，epochs不能再被最终确定。所以尽管这时链仍在增长，也不再能对区块进行确定，以及保证它是标准链的一部分。

##  &lt;br/&gt;

# 助力去中心化—Part 2，有益于验证者

很大程度上，验证者是被激励去做对网络有益的事情，而不是因为大家觉得这是件正确的事情所以才去做。

如果超过1/3的节点离线了，那么对离线节点的惩罚便开始增加，这就是所谓的“不作为”惩罚。

这意味着，一名验证者**想要尝试确保：如果自己的节点被逼下线了，那么不可能同时逼其他节点下线。**

罚没也是一样的。然而，由于规范或软件出现错误/bug，验证者总是有可能被罚没，单个罚没“仅仅”1个ETH。

然而，如果许多验证者同时被罚没，那么惩罚会上升到32个ETH。而又是这个神奇的数字，当超过1/3的验证者被罚没时，便会产生32个ETH的罚没。[[关于发生以上情况的原因可以在这找到答案\]](https://blog.ethereum.org/2020/01/13/validated-staking-on-eth2-1-incentives/)

这些激励方式分别被称为活性反相关和安全反相关，是eth2里有意设计的一个方面。反相关机制通过将个体惩罚和每个验证者对网络的影响程度捆绑在一起，激励验证者做出符合网络最大利益的决定。

##  &lt;br/&gt;

# 助力去中心化—Part 3，数据的展示

许多独立的团队正在实现Eth2，每个团队根据主要由Eth2研究团队编写的[规范开发独立的客户端](https://github.com/ethereum/eth2.0-specs/)。这确保了有多个信标节点和验证者客户端实现，每一个团队都对构建eth2客户端所需的技术、语言、优化、权衡等做出不同的决策。这样，任何一层系统中出现bug时，只会影响运行特定客户端的用户，而不会影响整个网络。

如果在这次Medalla Prysm发生的时间bug中，只有20%的eth2节点在客户端Prysm上运行和85%的验证者在线，那么Prysm节点不会遭受“不作为”惩罚，而且只需一点小惩罚以及开发者们的几个不眠夜就可以解决问题了。

相反，由于运行同一个客户端的验证者太多了（其中许多验证者取消了罚没保护），在很短的时间内罚没了3500到5000个验证者。

*高度的相关性意味着这些验证者的罚没惩罚约为16个ETH，因为他们使用的是一个比较普遍的客户端。

*在撰写本文时，罚没还在不断涌现，所以还没有最终的数字。

##  &lt;br/&gt;

# 用新的客户端

&lt;br/&gt;

![质押3.png](https://i.ibb.co/kgSkx5r/3-1b2dbdad64.png)
&lt;br/&gt;

现在是时候使用不同的客户端参与测试了，找一个少部分验证者在用的客户端（可以点击[此处](https://eth2.ethernodes.org/network/Medalla)查看分布状况）。[Lighthouse](https://eth2.ethernodes.org/network/Medalla)、[Teku](https://status-im.github.io/nim-beacon-chain/medalla.html)、[Nimbus](https://status-im.github.io/nim-beacon-chain/medalla.html)以及[Prysm](https://docs.prylabs.network/docs/)此时都运行得较为稳定，然[Lodestar](https://chainsafe.github.io/lodestar/)正迅速追赶中。

最重要的是，尝试使用新的客户端！我们可以在Medalla上尝试构建更加健康的节点分布，为去中心化主网做好准备。

 &lt;br/&gt;



&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[金融市场交易的范式转移：AMM去中心化交易所]]></title><description><![CDATA[AMM自动做市商模式给DeFi带来了巨大流动性，然这种模式下又会有怎样的风险？]]></description><link>https://www.ethereum.cn/constant-function-market-makers-defis-zero-to-one-innovation-968f77022159</link><guid isPermaLink="false">https://www.ethereum.cn/constant-function-market-makers-defis-zero-to-one-innovation-968f77022159</guid><pubDate>Tue, 25 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Chainlink](https://medium.com/bollinger-investment-group/constant-function-market-makers-defis-zero-to-one-innovation-968f77022159)

前言：流动性问题一直以来都困扰着去中心化交易所，自动做市商模式的不断创新，给DEXs带来了新的机遇和挑战。本文介绍了几种AMM类型，以及他们所具有的优缺点。

![AutomatedMarketMakerDEXs.png](https://i.ibb.co/v43Dwr1/Automated-Market-Maker-DE-Xs-993a0729a5.png)

基于自动做市商制度 (AMM) 的去中心化交易所已成为DeFi领域里最有影响力的创新之一。这些交易所为各种不同的代币提供开放的链上流动性。

AMM从根本上改变了用户交换加密货币的方式。交易双方都没有使用传统的买/卖订单簿，而是采用链上流动资金池预先融资的资金。流动资金池允许用户以完全去中心化和非托管的方式实现无缝交换链上代币。流动性提供者 (LP) 根据其在资金池中所占份额的百分比，获得一定的被动收入，即交易费用。

在本文中，我们将探讨AMM的工作原理，仔细分析其固有的问题，以及研究解决这些主要障碍的解决方案。以下是一些关键要点：

- 有几种AMM类型：恒定总和做市商 (Constant Sum Market Maker，简称CSMM)，恒定平均值做市商 (Constant Mean Market Maker，简称CMMM)，以及先进的混合常数函数做市商 (Constant Function Market Makers，简称CFMM)。
- 而AMM面临的挑战包括：无常损失 (impermanent loss)、多代币敞口、低资本效率。

- Bancor、Uniswap、Curve等交易所通过提高资本效率、降低波动风险以及提供更多的资本部署选项，来使得AMM对大型的流动性提供者更加有吸引力。
- 借用Chainlink预言机，Bancor即将发布的v2版本，旨在首次解决波动性代币的无常损失问题。

通过给大家提供一个更加全面的分析，希望DeFi用户们可以从中获益，更好地了解AMM面临的挑战以及其带来的创新，使得去中心化流动性充分发挥其潜力，为DeFi以及未来更加广阔的金融世界打好地基。

 &lt;br/&gt;

# 概述何为自动做市商 (AMMs)

做市商 (Market Makers) 指的是负责在交易所上提供报价行为的实体，否则，如果没有交易活动，交易所将会失去流动性。做市商为了赚取收益，从自己的账户买入和卖出资产。他们的交易活动为其他交易方创造流动性，降低大型交易的滑点。

自动做市商 (Automated Market Makers) 则使用“Money Robots”这一算法，在像DeFi这样的电子市场内模仿做市商的报价行为。尽管不同的去中心化交易所设计不同，但基于AMM制度的去中心化交易所一直以来都具有最高的流动性和日均交易量。

常数函数做市商 (CFMMs) 是最受欢迎的AMM类别，专门为实现数字资产的去中心化交易而设计。这些使用AMM的交易所基于一个常数函数的原理实现，即资金池里交易对的总资产储备要保持不变。在非托管的AMM中，用户将交易对通过智能合约存入池中，从而交易方可以利用池中的流动性来进行代币转换。因此，不同于订单簿交易所中交易双方直接交易的模式，AMM中的交易方是与智能合约 (即存入池中的资产) 进行交易。

自2017以来，就有3种主要的常数函数做市商模式出现。

第一种类型是恒定乘积做市商 (CPMM)，并在首代基于AMM的去中心化交易所 (Bancor和Uniswap) 中得到广泛应用。CPMM基于函数x*y=k，该函数根据每个代币的可用数量 (流动性) 来确定两个代币的价格范围。如果X代币的供应量增加，那么Y代币的供应量必须减少，反之亦然，以保持乘积K恒定不变。如果将该函数绘制出来，发现这是一个双曲线，其中流动性总是可用的，但是价格会越来越高，并在两端接近无穷大。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/nMQSFVd/AMM-1-aa9e9cb2d3.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;来源：Dmitriy Berenzon&lt;/center&gt;

第二种类型是恒定总和做市商 (CSMM)，这是零滑点交易的理想模式，但是不能提供无限的流动性。CSMM的公式为***\*x+y=k\****，绘制出来是一条直线。不幸的是，当这两种代币的链下参考价格不是1:1时，这种设计会使得套利者有机会耗尽其中一个资金池。该情况会破坏其中一个流动资金池，迫使流动性提供者承担损失，而交易方则不再有可用的流动性。因此，CSMM这种AMM模式并不常见。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/n0hLFyR/AMM-2-316199490b.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;来源:  &lt;a href=&quot;https://medium.com/bollinger-investment-group/constant-function-market-makers-defis-zero-to-one-innovation-968f77022159&quot;&gt;Dmitriy Berenzon &lt;/a&gt;&lt;/center&gt;

第三种类型是恒定平均值做市商 (CMMM)，基于这一模式的AMM可以创建两种以上的代币，并在标准的50/50分布之外进行加权。在该模型中，每个代币资金储备池的加权几何平均值保持不变。对于一个包含三种资产的流动资金池，公式如下：***\*(x\*y\*z)^(⅓)=k\*******\*。\****这种模式会给池内资产带来多变的风险敞口，并可以在池内任意资产之间进行交换。

随着基于AMM模式的流动性的发展，先进的混合恒定函数做市商 (CFMM) 出现了，它结合了多种功能和参数，以达到特定的目的。如调整流动性提供者的风险敞口，或者降低交易者的价格滑点。

例如，Curve的AMM结合了CPMM和CSMM，以提供资金池的流动性，从而降低给定交易范围内的滑点。其结果是一条双曲线 (见图蓝线)，对大多数交易返回线性兑换率，而只针对大额的交易返回指数价格。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ZmjMXyg/AMM-3-d5af950307.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;Curve 白皮书&lt;/center&gt;

本文其余部分将主要关注不同的AMM为了解决其关键问题会有什么不同的设计。尽管DeFi 中的第一代AMM资金池在过去两年中经历了爆炸增长，但仍然有一些障碍，影响了他们的广泛应用，**包括无常损失、低资本效率和多代币敞口等问题。**

 
 &lt;br/&gt;

# 阻碍AMM发展的一些固有问题

## 无常损失(Impermanent Loss)

流动性提供者所面临的最主要、最常见的未知风险是无常损失 (即随着时间变化，在AMM池中直接存入代币和仅仅在钱包里持有代币之间存在价值差)。只要AMM池内的代币的市场价格往任意一方偏离，就会产生无常损失。由于AMM池不能自动调整兑换率，因而需要套利者通过买入价格偏低的资产或者卖出价格偏高的资产，直到AMM提供的价格与外部市场价格相匹配。而套利者获得的利润是从流动性提供者的口袋中抽走的，给流动性提供者带来了损失。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QCC662g/AMM-4-2f9598466f.png&quot;/&gt;&lt;/center&gt; 
&lt;br/&gt;

&lt;center&gt;图示：当池中交易对在价值上相对不平等时，AMM池是如何产生无常损失的。&lt;/center&gt; 

在上面的图示中，由于其他交易所的交易活动导致了ETH的市场价格发生变化，AMM资金池中产生无常损失。而对于这种外部价格变化，AMM的内部反应是：重新调整池中的兑换率以匹配外部市场的兑换率。在这个重新调整 (即将池中的ETH换成BNT) 的过程中，AMM池中的总储备金略有下降。

之所以称之为“无常”损失，是因为只要AMM内的代币的相对价格恢复到原来那样，亏损便消失，流动性提供者将赚得的交易费作为收益保留下来。然而，这种情况十分罕见，意味着大多数流动性提供者遭受的无常损失超过他们所获得的交易费。下图显示了在考虑交易费之前，ETH/DAI AMM池中的流动性提供者遭受的无常损失。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/82yCmWC/AMM-5-ca6a38f7a1.png&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt;

&lt;center&gt;ETH价格从低于100美元开始，开始产生的无常损失&lt;/center&gt;

AMM通常要求流动性提供者存入两种不同的代币，旨在为交易双方提供相等的流动性。也就是说，流动性提供者不得不持有额外的ERC20储备资产，这意味着他们无法保持对单一代币的长期风险敞口，而是增加了多代币风险敞口。如此一来，拥有大量单一代币的团队和想要提供流动性的个人被迫购买其他资产，才能为资金池提供流动性。从而减少了他们在池中对基础代币的持有量，并且增加了另一资产的风险敞口。

 


## 多代币敞口(Multi-Token Exposure)

AMM通常要求流动性提供者存入两种不同的代币，旨在为交易双方提供相等的流动性。也就是说，流动性提供者不得不持有额外的ERC20储备资产，这意味着他们无法保持对单一代币的长期风险敞口，而是增加了多代币风险敞口。如此一来，拥有大量单一代币的团队和想要提供流动性的个人被迫购买其他资产，才能为资金池提供流动性。从而减少了他们在池中对基础代币的持有量，并且增加了另一资产的风险敞口。

###  

## 低资本效率

AMM需要大量的流动性，才能达到基于订单簿 (order book) 模式的交易所那样的滑点水平，在这一点上其饱受诟病。这是由于AMM里大部分流动性仅在定价曲线开始转向指数曲线时可用。因此，由于滑点较高，理性的交易者不会使用大部分流动性。

AMM流动性提供者无法决定提供给交易方的价格，这使得有些人把AMM称为“懒惰的流动性”，因其利用率低且供应不足。然而，订单簿交易所的做市商可以精确控制他们想要购买和出售代币的价格点位。这带来了高资本效率，但同时要求其积极参与以及监督流动性的供给。

 

## 改善MM的先进解决方案

现在一些创新项目的新设计模式正解决着第一代AMM所具有的大多数局限。

 

## 高资本效率和低滑点的AMM

正如前面部分所提到的那样，混合常数函数做市商 (CFMM) 只有在流动资金池到达界限时，滑点才能达到极低值，通过兑换率曲线 (大多数是线性和抛物线的) 表现出来。尽管这种模式下，由于资本利用率提高了，流动性提供者可以赚更多的费用 (尽管每笔交易的费用较低)，但是套利者仍然可以在资金池重新调整的过程中获益。

Curve交易所内提供代币之间的低滑点交换，这些代币具有相对稳定的1：1兑换率。这意味着它的解决方案主要是为了稳定币设计的，尽管他们最近上线了一些可以进行稳定交易的代币对，比如打包版本的比特币 (renBTC和wBTC)。

Bancor V2通过类似的机制将这种低滑点模型扩展至波动性资产，该机制可动态地更新池的储备权重，以保持储备池的价值为1：1的比率。此解决方案可在相同价格区域内扩大流动性，同时保持激励套利者采取行动重新平衡资金池。

 

## 减少无常损失

Bancor想要在其即将发布的V2版本中首次解决波动性代币的无常损失问题。Bancor V2通过使用锚定的流动性储备，保持其AMM储备的相对价值不变，从而降低了出现无常损失的风险。直到最近，这都是通过保持恒定1：1价格比率的镜像资产来实现的。但是Bancor V2使用Chainlink的预言机将这种概念应用到兑换率多变的资产。这种解决方案将成为AMM利用非稳定币数字资产的重大突破，因为它可以降低流动性提供者的风险。

通过使用Chainlink预言机，Bancor V2池能够保持准确的兑换率，即使代币的定价受外部市场价格变化影响而偏离。有了预言机，兑换率不再由套利者决定，而是由预言机提供价格更新，调整AMM的权重，因而内部兑换率与外部市场价格相匹配。这样做的好处是，套利者不再以“无常损失”的形式从流动性提供者的口袋里抽走利润。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QQ3Zw3D/AMM-6-f94eccf4e9.png&quot;/&gt;&lt;/center&gt;
&lt;center&gt;图示：市场价格改变后，Bancor V2如何使用Chainlink预言机来避免无常损失。&lt;/center&gt;

相反，套利者只需在AMM池中平衡代币分配，以应对代币交易。Bancor V2始终鼓励流动资金池恢复平衡，因为权重较低的储备池的流动性提供者赚取更高的投资回报率，直到AMM池调整到50/50的权重便恢复正常。总的来说，用户和代币团队都对其存入的流动性资金更有信心，相信其能够通过交易费用产生利润，并且不会常规的市场价格波动而贬值。

 

## 多代币敞口

Uniswap V2允许任意的ERC20代币和其他任意ERC20代币配对，流动性提供者不再必须面临ETH风险敞口。这使得流动性提供者灵活地保持更加多样化的ERC20代币头寸组合，并为交易创造更多潜在的流动性池组合，以从中获得流动性。

Bancor V2更进一步，它去掉了必须存入两种流动性资产的硬性要求，使得流动性提供者保持了单一代币的风险敞口。通过Chainlink预言机来追溯流动性储备池的价格，用户可以在AMM中保持对任意单个代币的风险敞口，即保持对任意ERC20代币的100%的风险敞口，或对BNT代币100%的风险敞口，或这两者之间的任意分配。

对于那些希望对其首选资产拥有100%的风险敞口的加密货币投资者来说，这是最理想的选择，尤其是在想要减轻无常损失的情况下。这可能会吸引想要在AMM上提供低风险流动性且无需购买额外资产的代币团队和投资基金。

  &lt;br/&gt;

# AMM的未来创新

从Bancor到Uniswap再到Curve等等，AMM技术正在为获得任意数字资产的即时流动性带来了新的可能性。AMM不仅为缺乏流动性的市场提供了报价，而且还是以一种高度安全、全球可访问以及非托管的方式进行的。

尽管AMM已经经历过了爆炸式的增长，但是这些围绕提高资本效率、改善多资产池和减少无常损失的创新，为吸引传统市场里更庞大的流动性提供者提供了基本的基础设施。随着资本利用风险越低以及更加符合用户要求，DeFi已准备好进行大规模的融资行为。

 

  &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

 </content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/8/22）]]></title><description><![CDATA[Medalla事件回顾和现状；信标链发布前的准备工作]]></description><link>https://www.ethereum.cn/wnie2-2020-8-22</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-8-22</guid><pubDate>Mon, 24 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源| [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200808)



 &lt;br/&gt;

# 测试网覆辙

Medalla信标链测试网的情况一直不太稳定。上周我总结了一篇[最初的事件回顾](https://hackmd.io/@benjaminion/wnie2_200817)，如果有的读者不清楚发生了什么可以先阅读一下。Prysm团队也已经发布了他们[详尽的报告](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)。总而言之，自8月14日周五开始，Medalla测试网经历了非常大的动荡，也承受了巨大的压力，这种状态持续了五天，而期间我们也一直在进行补救。

 

### 事件回顾

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/nj5zs7M/8-22-e1b523b00b.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;&lt;i&gt;事故发生六小时期间，我的Teku节点所目睹的Medalla参与率&lt;/i&gt;&lt;/center&gt;

&lt;center&gt;&lt;i&gt;UTC时间2020-08-14&lt;/i&gt;&lt;/center&gt;

我们可以看到，一开始在三十分钟左右的时间段里，验证者的数量大幅下跌。Prysm节点都突然消失了，因为他们的时间被设置为未来的四小时。*\*图中的红色水平线代表66.7%的参与率，而这是网络能够进行最终确定的最低要求，而当时参与率已经跌至最低点。

当节点将他们的密钥转移至其他客户端，情况开始逐渐好转。事故发生的两小时之后，随着Cloudfare解决了时钟问题，并且还没有更新的Prysm验证者也回到网络，情况似乎更乐观了。根据[Prysmatic Labs的记述](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)，**本来是旨在修护问题的客户端更新版本中出现了一个严重漏洞，**导致已经更新客户端的验证者无法恢复上线，这使得问题复杂化了。

事故的四小时之后，开始出现混乱的局面，参与率又再次下跌。因为所有客户端都需要处理Prysm验证者之前作出的“来自未来的证明”现在这些证明已经具备有效性。由于节点尝试处理这些证明和区块，网络开始分裂。Teku和Lighthouse客户端所占内存逐渐膨胀，这引发了性能和崩溃问题，而已经更新的Prysm客户端又无法上线，总的来说就是一片混乱。

但这是超出我想象得最棒的测试经历之一！如果召开一次有关客户端测试的会议，大家聚在一起讨论怎么以极端方式来破坏网络，我觉得我们可能都想不出这么刺激的方法。“时间穿越”事件也启发了我们的思考，尤其是在大量验证者被罚没之后。

随之而来的结果就是，我们尝试了许多之前从未探索过的代码路径，也做出了许多全面的改进。一切和之前相比都更上一层楼。从这次事件中我们真的收获了很多有价值的经验。

 

### 现状如何？

上周早些时候，客户端团队都忙于强化客户端，以应对突发的极端环境。我们非常艰难地缓缓爬升到了网络所需的66.7%的参与率，而网络终于又恢复到了正常状态。这一时间点是UTC时间8月19日的18:30，距离事故发生整整过去了五天。***\*在那五天中，始终有客户端能够坚挺住，网络从未真正停止运行。\****这证明了信标链非常健壮，信标链能够恢复。

关于此次事件推荐大家阅读：

- 我的[上一篇回顾总结](https://hackmd.io/@benjaminion/wnie2_200817)
- Prysmatic Labs的[同步事件报告](https://hackmd.io/@benjaminion/wnie2_200817)和[回顾总结](https://medium.com/prysmatic-labs/eth2-medalla-testnet-incident-f7fbc3cc934a)
- 以太坊基金会的看法：Carl最新撰写的Eth2 Staking系列[《论客户端多样性的重要性》](https://blog.ethereum.org/2020/08/21/validated-why-client-diversity-matters/)
- Evan的[系列推特](https://twitter.com/evan_van_ness/status/1296542806652133382)，以及随附的[视频](https://www.youtube.com/watch?v=dEYzsolkxd0)
- 以及客户端团队的更新（参见[下文](https://hackmd.io/@benjaminion/wnie2_200822#Client-team-stuff)）

 &lt;br/&gt;

# 阶段0：信标链

规范方面没有发生更新。

我的ConsenSys研发同事发布了关于[阶段0规范形式化验证](https://consensys.net/blog/blockchain-development/formally-verifying-the-ethereum-2-0-phase-0-specifications/)的进度报告。

以及此处是Sigma Prime多客户端模糊测试工作的进展。

  &lt;br/&gt;

# 释义性文章

这里是一些有趣的消息：***\*大家在学习Eth2的同时能够获得[POAP](https://www.poap.xyz/)奖励！\****此处是相关信息，大家可以进入[Ethstaker Discord](https://discord.gg/B2wkhH4)查看 #eth2-studymaster频道。[此处](https://discord.com/channels/694822223575384095/694836320786317392/746831562422747254)是通告。大致意思就是在十周的时间里，阅读十篇Eth2文章，并且回答相关问题。成绩不错的话就能获得POAP奖励。我真的希望Eth2的开发者没有被排除在外。

客户端教程：Somer Esat继续更新了他的系列教程，深度阐释了[如何使用Ubuntu系统在Medalla测试网中设置Teku客户端](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-teku-170e2c52bd23?source=friends_link&amp;sk=5f88cc288bb247f1711b729ef91de003)。Somer和Super Phiz也为此制作了一个[视频教程](https://www.youtube.com/watch?v=isPUoKfaelE)。除此之外，Super Phi还和Cayman一起录制了一个如何[设置Lodestar客户端的视频](https://www.youtube.com/watch?v=k5_fywXxdD8)。Coinmonks也撰写了一篇在Ubuntu系统中设置[Lighthouse客户端的教程](https://medium.com/coinmonks/how-to-setup-ethereum-2-0-validator-node-lighthouse-meddala-goerli-4f0b85d5c8f)。

至于Teku，我也制作了一个[Teku故障排除指引](https://docs.google.com/document/d/1YWi4HqkGqs9PQA67agHON4PciPKO39mlZwH_3AKg68I/edit?usp=sharing)。欢迎大家的反馈。

对于喜欢快速阅读的读者，推荐阅读Simon de la Rouviere关于[Eth2概览的推文](https://twitter.com/simondlr/status/1295048216942084099)。Narkasa交易所也发布了一篇不错的介绍：[《什么是以太坊2.0？》](https://medium.com/@narkasacom/what-is-ethereum-2-0-f27a7d4be640)

  &lt;br/&gt;

# 研究工作

关于Eth2信标链如何就Eth1状态达成共识的机制效率，我做了[一次分析](https://github.com/ethereum/eth2.0-specs/issues/2018)，这可能不属于“研究”范畴。太长不读：其中还有进步空间，对此我给出了一个建议。

ConsenSys的TX/RX团队已经做了一个在Eth2分片环境中 (也即阶段1.5) 运行Eth1客户端的模拟器，现在你也可以[参与运行](https://github.com/txrx-research/eth1-shard-demo)。Eth2环境是基于Teku客户端，Eth1则基于Catalyst (Guillaume Ballet的Geth分叉)。Danny在上周的[EDCON会议](https://www.youtube.com/watch?v=6iW1MeT-Cug)中进行了实时demo示范。

Vitalik[捍卫](https://ethresear.ch/t/explaining-the-liveness-guarantee/4228/7?u=benjaminion)了信标链在需要做出选择时对活性而非一致性的偏好。这是一场非常有趣的讨论。

  &lt;br/&gt;

# 媒体

虽然似乎已经过去了很久，但EDCON的会议视频值得回顾，有许多关于Eth2的干货：

- [Vitalik](https://www.youtube.com/watch?v=nnY22N_MnOc)：Eth1到Eth2的机会和挑战
- [Danny Ryan](https://www.youtube.com/watch?v=6iW1MeT-Cug)：Eth1/Eth2合并模拟器 (喵星人捣乱)
- [Hsiao-Wei](https://www.youtube.com/watch?v=-j5suWmE-DY)：阶段1分片数据链
- [Aditya](https://www.youtube.com/watch?v=9avhMNJWnmw)：弱主观性 (weak subjectivity)
- [Afri](https://www.youtube.com/watch?v=7yQLN49bb30)：通往Eth2的最终之路

[Terence ](https://www.youtube.com/watch?v=VZyapwu90lA)(Prysm) 和[Paul](https://www.youtube.com/watch?v=wp2--tbGJZM) (Lighthouse) 与客户端相关的演示

Paradigm对Danny进行了[采访](https://medium.com/paradigm-fund/interview-with-danny-ryan-eth2-researcher-at-the-ethereum-foundation-9059abc330b9)，来看看他不和猫咪摔跤的时候喜欢做什么 (和蔬菜有关)。

Vitalik接受[Cointelegraph](https://cointelegraph.com/news/vitalik-buterin-ethereum-20-presents-a-much-harder-challenge-than-we-thought)的采访：以太坊2.0面临的挑战比我们想象中更大。各位放心，问题不大，我们喜欢接受挑战！

  &lt;br/&gt;

# 常规会议

 

### 实现者会议

第46次会议于8月20日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/173)
- [会议视频](https://youtu.be/g3fKTfBXArU?t=275)
- 我的笔记和[Mamy的笔记](https://gist.github.com/mratsim/370f96bd0e50f3bc8bce4a7e4010f887)

此次会议中我们仅对Medalla事件进行了简短的回顾，因为我们在过程中一直保持沟通，并且时间也有点紧张。

目前大家都在准备信标链的发布。Afri正在处理和发布准备工作相关的[提案](https://github.com/ethereum/eth2.0-pm/issues/173#issuecomment-677486610)。Hsiao-Wei也在对我们的工作进行跟踪，幕后详情参阅[project board](https://github.com/ethereum/eth2.0-pm/projects/1)。

  &lt;br/&gt;

# 客户端相关

许多客户端都进行了更新，针对Medalla测试网的历险进行回顾：此处是[Nimbus](https://our.status.im/medalla-update/)的更新以及[后续文章](https://our.status.im/medalla-update-august-21/)；此处是[Lighthouse](https://lighthouse.sigmaprime.io/update-28.html)的更新；此处是[Lodestar](https://medium.com/chainsafe-systems/lodestar-medalla-update-59865a5cce1a)的更新。Prysm的回顾以及Medalla测试网事件分析。

  &lt;br/&gt;

# 写在最后

还有什么事能够媲美一边品酒一边探讨Eth2呢？Quantstamp和Cred联合组织了一次远程品酒和圆桌会议：“Wine Not Talk About Ethereum 2.0?”

详情和注册方式参见[此处](https://www.eventbrite.com/e/wine-not-talk-about-ethereum-20-tickets-116121397225)，他们会把酒寄给你。

我也会与许多我非常欣赏的Eth2小伙伴一同出席这次圆桌。但时间是我这边的凌晨两点，所以我可能在会议开始前就已经醉了。应该会很有意思的！

 &lt;br/&gt;

  &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[一种PROOF OF STAKE设计哲学]]></title><description><![CDATA[Eth2.0 PoS共识机制背后的哲学理念是什么？]]></description><link>https://www.ethereum.cn/a-proof-of-stake-design-philosophy</link><guid isPermaLink="false">https://www.ethereum.cn/a-proof-of-stake-design-philosophy</guid><pubDate>Fri, 21 Aug 2020 00:00:00 GMT</pubDate><content:encoded>作者 | [Vitalik Buterin](https://medium.com/@VitalikButerin/a-proof-of-stake-design-philosophy-506585978d51)

&lt;br/&gt;

前言：以太坊2.0将逐渐从Proof of Work过渡到Proof of Stake共识机制 (Casper PoS)，Vitalik Buterin在2016年就撰文阐述了其背后的价值权衡和设计哲学。时隔多年，随着社区对加密经济学的不断探索，又启发了我们怎样的新思考？

像以太坊（以及比特币、NXT和Bitshares等等）的系统基本上是加密经济有机体系中新产生的层级——是完全存在于加密空间的去中心化、无权威介入的实体，并由加密学、经济学和社会共识机制共同维系的。它们有点像是BitTorrent，但又有所区别，因为BitTorrent并没有状态的概念——结果证明这是至关重要的一个区别。它们有时候会被形容为“[去中心化的自治公司](https://letstalkbitcoin.com/is-bitcoin-overpaying-for-false-security)”，但它们又不是特别公司化，比如你并不能对微软公司实行硬分叉。它们像是开源软件项目，但两者之间也并不是特别像，你可以对区块链进行分叉，但这又没有分叉OpenOffice那么容易。

这些加密经济网络多种多样，有基于ASIC的PoW、基于GPU的PoW、朴素PoW、委托PoS，还有未来有希望实现的Casper PoS，而且每一种都不可避免地会有它自己背后的哲学。一种比较著名的例子就是以工作量证明机制为最高纲领。在这种机制中，会将矿工投入了最大数额的经济资本去创建的单条区块链定义为“唯一正确”的区块链。原本这只是协议内的分叉选择规则，但这种机制却在很多情况下被上升为一种神圣的信条。作为示例，可以[看一下我和Chris DeRose在Twitter上的讨论](https://twitter.com/vitalikbuterin/status/687050458301657088)，它展现了一个人即使是在面对协议中哈希算法不断改变的硬分叉时，还是以他纯粹的形式为这种想法辩护。Bitshares的[委托权益证明机制 (DPoS)](https://bitshares.org/technology/delegated-proof-of-stake-consensus/) 展现了另一种符合逻辑的哲学，也就是一切又再次从单一的信条衍生而来。这种信条可以更简单描述为：[股东投票](http://docs.bitshares.org/bitshares/dpos.html)。

其中的每一种哲学：包括中本（聪）共识机制，社会共识机制，股东投票

共识机制，都诞生了一套自身的结论，并形成了一种基于其自身观点来看颇有道理的价值体系，尽管在互相比较时一定会受到批判。Casper共识机制也有其哲学基础，尽管至今还没能以一种简要清晰的方式描述出来。

我、Vlad、Dominic、Jae和其他人都对权益证明协议存在的原因以及如何去设计这一类协议都有各自的看法，但本文仅阐释我个人的观点。

我会直接进一步列出观察情况以及结论。

- 密码学在21世纪中确实是非常特殊的，**因为在对立冲突中仍大多站在防御者一方的领域已经不多了，密码学就是其中一个**。比起建造一个城堡，摧毁它会更加容易；岛屿的防御性更强，但也会被袭击；但是一个普通人的椭圆曲线密码 (ECC)密钥却能足够安全，甚至能抵御国家级的入侵。密码朋克的哲学本质是利用这种宝贵的非对称性来创造一个能够更好地保护个人自由的世界。密码经济学从一定程度上说是密码学哲学的延伸。不同的是密码经济学保护的不仅是个人信息的隐私和安全，也要保护复杂的协作系统的安全性和活力。**把自己看作是密码朋克精神继承者的系统应该保持这种基本属性，毁坏一个系统要远比使用和维护系统的代价更高。**
- “密码朋克精神”并不单单只是理想主义，而建造一个易守难攻的系统，单就工程设计而言也理应如此。
- 在一个中期到长期的时间范围里，人们非常擅长共识。**即使敌手拥有无限的哈希算力，并且能对任意主要区块链系统进行51%攻击，甚至将其回滚到一个月前，但比起超越主链的哈希算力，要说服社区该链具有有效性要难得多。他们还需要篡改互联网上许多其他信息源，例如区块浏览器、社区中每一位可靠的成员、纽约时代、archive.org等等。总言之，在信息技术发达的21世纪，攻击者想要说服全世界接受他攻下的区块链，难度大概不亚于说服全世界美国没有登陆过月球。**因此，归根结底这些社会因素才是区块链的长期保障，无论区块链社区是否承认这一点（Bitcoin Core[确实承认](https://www.reddit.com/r/Bitcoin/comments/3fg0jw/could_a_cartel_of_pool_operators_collude_to/ctoat0d/)了社会层面的首要性）**。
- 然而单单由社会共识保障的区块链还是太低效率了，运行的速度也不够快，并且很容易让分歧无休止地持续下去（不管怎么去防止它，结果[还是发生了](http://www.npr.org/sections/money/2011/02/15/131934618/the-island-of-stone-money)）；因此，**在短期内，经济共识机制在保护区块链活性以及安全性上起到了非常重要的作用。**
- 因为只能用区块奖励保证工作量证明机制的安全性（用Dominic William的话来说，就是三个Es当中少了两个）译者注：即Entry cost (进入成本)，Exist cost (存在成本), Exit penalty (退出惩罚)，再加上矿工的激励仅仅来自于他们可能失去区块奖励的风险，因此，工作量证明机制的运行逻辑是：通过巨额奖励来催生大量算力。在PoW 当中要想从攻击中恢复过来是非常困难的：如果它是第一次发生，你可 以通过硬分叉改变工作量证明，这样就可以使得攻击者的ASIC失效，但如果再次发生的话，你就没得选择了，所以攻击者可以一而再再而三 地攻击。因此，挖矿的网络的规模要足够大才能降低攻击的风险。假设网络每天的算力成本是X，那么就能阻止规模小于X的攻击者出现。**我反对这一逻辑是因为（i）PoW会[消耗大量能源](http://digiconomist.net/beci)；（ii）PoW并不能实现密码朋克精神，因为其攻守成本是1：1，所以根本没有防御者优势。**
- PoS权益证明机制不再依靠为网络安全性提供奖励的机制，而是通过惩罚措施来打破这种对称性。质押资金（存款）的验证者会得到小小的奖励，这是为了对他们锁定资本、维护节点以及还要额外警惕私钥安全性做出的补偿，但是回滚交易受到的惩罚是他们同时间所获奖励的成百上千倍。因此权益证明机制的“一句话哲学”并不是“消耗能源来获得安全性”，而更应该是“提高损失的经济价值来保障安全性”。如果说一个给定的区块或状态享有价值X的安全性，前提是你得证明任何冲突区块或状态无法达到相同等级的最终确定性，除非恶意节点勾结起来支付价值X的协议内罚金。

- 理论上来说，大多数验证者勾结起来有可能会控制权益证明区块链，然后就开始作恶。然而（i）通过巧妙的协议设计，他们通过这种操纵手段攫取利润的能力就会尽可能被限制，而且更重要的是，（ii）如果他们尝试阻止新的验证者参与网络，或是执行51%攻击的话，那么社区就可以简单地协调好某个硬分叉并清除行为不端的验证者的存款。一次成功的攻击可能会耗费五千万美元，但比起[2016.11.25那一次的geth/parity共识错误](https://blog.ethereum.org/2016/11/25/security-alert-11242016-consensus-bug-geth-v1-4-19-v1-5-2/)处理情况来看，收拾残局的进程不会太艰巨。两天之后，区块链和社区会回到正轨，攻击者损失了五千万美元， 而由于攻击事件之后的供应量紧缩，代币的价值会上涨，社区成员可能会有所受益。这即是攻击和防御的不对称性。
- 上述并不能拿来表明非计划性的硬分叉将来会发展成为规律性事件；必要时，可以将在PoS中发起单次51%攻击的成本设置得和在PoW中进行永久的51%攻击一样高。这样庞大的费用和攻击的低效性应该能够保证在实际状况中不会有人尝试攻击。

- **经济学并不是万灵丹**。有些个人可能是出于协议外的动机，比如说他们的计算机可能会遭到入侵、他们可能会被挟持或者可能仅仅因为某一天喝醉了，然后决定破坏这条区块链，完全不计成本。再者，就积极的一面来说，个人的道德自制和沟通低效会将攻击所需的成本提升到比协议定义的损失价值 (value-at-loss) 更高的水平。这是我们不能依赖的优势，但与此同时它也是我们不应该觉得没有必要就抛弃的优势。

- **因此，最优的协议应该是那些在多种多样的模型和假设当中仍能够正常运行的协议**——具备协调选择的经济理性、具备个人选择的经济理性、简单的容错机制、拜占庭容错机制（在理想‘情况下既是适应性也是非适应性的对抗变体）、受到[Ariely/Kahneman启发的行为经济模型](https://www.amazon.ca/Honest-Truth-About-Dishonesty-Everyone-Especially/dp/0062183613)（“我们都只是轻微作弊”）以及在理想条件下既具有现实意义又具有实践意义的经得起推敲的模型。**重要的是要做好双层防御：防止中心化企业联盟做出反社会行为的经济激励，和一开始就防止企业联盟形成的反中心化激励。**
- **运作充分快速的共识协议具有一定风险，需要非常谨慎地对待**，因为如果系统效率和激励挂钩，那么这样的结合将会带来高额奖励，以及足以引发系统性风险的**网络层中心化**（例如所有的验证者都在同一个主机服务商中运行）。有些共识协议并没有这些担忧，这类协议并不要求验证者发送信息有多快，只要他们能够在在可接受的时间间隔内发送信息就行了（4-8秒，根据经验我们知道以太坊延迟时间通常在500毫秒-1秒）。一个可能的折中就是，创建一种快速运行的协议，但其中可以应用和以太坊叔块类似的机制，以确保节点的网络连接度超过了某个易达到的程度之后，其边际收益是非常低的。

至此，对一些具体细节肯定还有很多不同的情况和方法，但上述说法至少是我的Casper版本所基于的核心原则。我们当然还可以讨论互相竞争的价值观之间的利弊。是年发行率1%的ETH和成本五千万美元的修复性硬分叉，还是年发行率为0的ETH和成本五百万美元的修复性硬分叉？我们该什么时候通过在容错模型下降低安全性作为在经济模型下提高协议安全性的交换呢？可预测的安全性和可预测的发行率，我们更在意哪个？这些都是留待另一篇文章探讨的问题，而至于对这些价值进行权衡的多种方式，则需要更多的文章来回答，但我们迟早会讨论到 🙂

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[MEDALLA测试网“崩溃”事件始末]]></title><description><![CDATA[上周五Eth2测试网Medalla突发时间同步问题，网络参与率断崖式下降，究竟发生了什么？]]></description><link>https://www.ethereum.cn/wnie2-2020-8-17</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-8-17</guid><pubDate>Tue, 18 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200710)


&lt;br/&gt;

译者注：请运行Prysm客户端的用户尽快升级到[Alpha.23版本](https://github.com/prysmaticlabs/prysm/releases)

 

本期是wnie2计划之外的更新，将针对周末Eth2 Medalla测试网发生的插曲进行回顾和分析。

 

我们在差不多两周前启动了Medalla，也就是8月4日，这是一个**大型的、公开的多客户端测试网，运行Eth2主网规范。**关于Medalla测试网的介绍，可以参阅[上期](https://hackmd.io/@benjaminion/wnie2_200808)。

 

测试网平稳运行了10天，即使验证者参与率比我们预期中要低 (70%-80%的验证者保持长期在线)。但这无伤大雅，测试网完全能应付。

 

然而周五的傍晚，我在控制板中目睹了验证者参与率突然断崖式下降。**在几分钟之内，活跃验证者从22000降低到5000左右，网络中约80%的验证者都消失了。**

 

因此，本文将对此事件进行回顾，包括其后果和下一步的措施。

 &lt;br/&gt;

# 究竟发生了什么？

我们发现，网络中每个运行Prysm客户端的验证者都突然消失了。由于Prysm是使用度最高的客户端，其后果严重性可想而知。

 

Prysmatic团队在此次事件中开放了一个[文档报告](https://docs.google.com/document/d/11RmitNRui10LcLCyoXY6B1INCZZKq30gEU6BEg3EWfk/edit)，并且持续在其中更新事件细节以及团队响应。以下是一些重点内容以及我的注释。

 

事件起因是**时钟同步 (clock sync)** 出现问题。Prysm客户端的配置使用了Cloudflare的[Roughtime](https://blog.cloudflare.com/roughtime/)来计算时间。(在我看来) 其起因还不是非常明确，但很显然**Roughtime将时间推移到了未来的四小时，并且持续了一个多小时。**Prysm客户端验证者们突然发现他们的时间快了四个小时，并且继续为尚不存在的区块链生成区块和证明。

 

就其本身而言，还不足以造成灾难性的后果。即使有许多区块丢失，并且面临大量来自未来的证明，剩下的客户端仍然能够在原链上进行建设。渐渐地，随着Prysm节点的时钟调整回来，他们开始回到网络中，并且验证者参与率也开始回升。网络似乎在恢复正常。

 

但几小时之后，情形又急转直下。

 

在初始时间发生的四小时之后，又发生了两件事。首先，所有Prysm客户端在未来生成的证明都开始具备有效性。其次，重新加入网络的Prysm节点又开始消失了，原因是为了防止他们生成任何相悖的证明，罚没保护机制被触发了。

 

这两件事同时发生，让网络陷入了混乱。剩下的客户端仍在努力地处理他们所接收到的信息，信标链变成了不停分支的丛林。(Prysmatic团队的Raul告诉我，Prysm首次修复中的一个bug使得情况恶化)

 

在一段时间之内，网络中的信息仍处于可控范围内。但在接下来的24小时左右，要导航愈加复杂混乱的分叉，所需的内存和CPU变得难以负担。我看到一个Lighthouse客户端使用了30GB内存 (约为通常情况下的100倍)，对于Teku客户端来说，即使使用12GB的Java内存堆并最大化处理器，也遇到了麻烦。

 

请注意，这一切都发生在周末。感谢所有奋战在一线的客户团队们，为了使节点能够应对混乱的网络，他们需要不停地优化内存和效率。

 

**到目前为止，网络正在逐渐恢复。**用户报告不尽相同，但是**Prysm和Lighthouse的新版本刚好能够找到正确的链头并继续构建信标链。**[ Eth2Stats](https://blog.cloudflare.com/roughtime/)当前显示链头或附近的Lighthouse、Prysm和Teku节点的一些节点。我们会继续优化Teku，减少其在同步时所需的资源。

 &lt;br/&gt;

# 没有发生共识失败

有一点需要明确的是，**客户端之间没有发生共识失败**，也就是说网络恢复时，所有客户端都能就链头状态达成共识，也就意味着信标链不会从根本上失败，也不需要进行任何硬分叉。

 

## Lessons经验

我们将会花更多时间对这个插曲进行全面反思和总结，以下是我个人的一些陋见。

 

### 时间同步的重要性

高度依赖第三方时间服务对于网络来说是一个致命点。碰巧的是，ConsenSys TX/RX研究团队的Alex Vlasov之前就撰文详尽阐释了时间同步及其在以太坊2.0网络中的重要性。他的工作在飞速进展当中，或许这也是一次让大家关注到这个方面的契机。此处是他的[相关文章和ethresear.ch贴文](https://github.com/harmony-dev/beacon-chain-java/wiki/Research-documents-(ENG))。

 

### 客户端多样性的意义

理想情况是我们会有四个及以上独立客户端，每个客户端节点所占比例不超过网络的30%。如此一来，即使有一个客户端出现了问题，而影响都不足以引起我们的注意。

 

就算我们无法达到这种理想情况，但是降低单个客户端的极高使用率也能使得网络更加强健。假设这次只有50%的验证者下线而非80%，网络也会更容易恢复。这是因为当客户端出现问题时，会影响网络的**区块产生、证明打包、广播效率、点对点通信以及同步**，而这些因素也会对剩余的验证者产生连带效应。

 

### 备用方案的有效性

一些质押者能够切换签名密钥到其他客户端的热备份节点。这无疑使非常棒的安全网络，虽然需要当心避免被罚没：新验证者可能对于既有验证者的投票历史一无所知，因此可能做出相悖的投票。

 

在将来，一旦我们完成了[新的API](https://github.com/ethereum/eth2.0-APIs/)，应该可以实现在不同的信标节点之间切换验证者客户端的能力，而不仅仅是密钥。例如，一个Prysm验证者能够轻易地脱离Prysm信标节点，并且重新连接到Teku信标节点。这能够解决上面提到的罚没问题。

 

### 质押者的责任感

目前参与Eth2并不是“一劳永逸”的事。质押者们需要保持一定注意力，游走于论坛之间，为开发者提供反馈并且能够在短时内更新客户端。我非常支持大家运行自己的个人验证者，但前提是对自己应承担的责任有所意识。

 

### 欲速则不达

为什么总是在周五傍晚出岔子？

 

即使发生在这个时间，Prysmatic团队做出的响应令人惊叹。详情请参阅该团队的[事件报告](https://github.com/ethereum/eth2.0-APIs/)。我以下的表述并非意在给Prysmatic团队带来不良影响，他们的工作的确非常出色，而是为Teku团队在面临相似处境的时候提供经验。

 

当有这么多用户失去资产的时候 (即使只是测试币)，并且网络处于高压状态下，自然而然会想要做出迅速的反应，但是有时可能欲速则不达。

 

这次事件中有两件事是可以避免的。首先，在初始修复版本Alpha.21中有一个缺陷，导致要求用户在17小时后进行回滚。

 

据Prysmatic团队Raul的说法，此缺陷是造成随后出现网络混乱的原因。其次，团队在处理情况时无意中删除了其1024个验证者的防罚没记录数据库，导致大部分验证者被罚没。

 

任何一个客户端都可能会发生类似情况。所以即使处于高压状态下，无论是开发者还是用户，我们所有人都要沉稳应对，不能一味追求速度。因此当我们在尝试恢复网络时，遵循了慢工出细活的方式。

###  

### 暴露问题以绝后患

最后，这次插曲其实是有必要的。如果测试网中什么都没测试出来，那它有何意义？一直处于顺滑运行的状态显然是不现实的。

 

这次是一场了不起的考验！这也许是网络所能遭受的最严重的一类冲击，就算让我们自己来设计，可能也设计不出这样的测试。让测试网遭受这种程度的冲击正是我们强化客户端所需的必备条件。

 

上周[The Block在文章中](https://www.theblockcrypto.com/daily/74616/medalla-eth-2-dress-rehearsal)引用了我的陈述：

 

在邮件中，PegaSys工程师Ben Edgington写道Medalla“是首个具备主网规模和配置的测试网”。

 

“这是首次大规模试验，而之前只是屏幕上的规范，或是玩具网络。点对点网络中有许多方面需要进行测试和优化。到目前为止，一切都在正常运行中，但是在我们能确保无误之前，还需要更多的时间，更广的规模以及更大的网络压力”。

 

说实话，[还真是盼啥来啥](https://twitter.com/benjaminion_xyz/status/1294909664652595201)。

&lt;br/&gt;

##  

# 下一步是什么？

目前，所有客户端团队都在致力于强化客户端，使其能够应对极端的网络情况。问题不大，**我们应该在接下来的几天内就能使Medalla恢复到正常状态，**可能会对所有验证者的余额产生影响，也会有一些验证者面临罚没。

 

如果在这之后，即使网络能正常运行，但验证者参与率还是无法回升，那么我们可能会考虑从头开始，重新部署存款合约 (重新创世或许也是一个不错的选择)。但这只是现阶段的一个备选方案。

 

Medalla万岁

 

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[以太坊开发者大会改进提案DIPs]]></title><description><![CDATA[Devcon团队公布新的参与方式，号召大家为开发者大会提出更好的点子。]]></description><link>https://www.ethereum.cn/announcing-devcon-improvement-proposals</link><guid isPermaLink="false">https://www.ethereum.cn/announcing-devcon-improvement-proposals</guid><pubDate>Mon, 17 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/08/14/announcing-devcon-improvement-proposals/)


&lt;br/&gt;

今天，我们 (Devcon组织团队) 很高兴向大家公布一个参与明年的开发者大会的新方式，这使得Devcon更好地为以太坊社区发言。

开发者大会改进提案 (DIPs, Devcon Improvement Proposals) 旨在让以太坊整个生态系统参与社区协作，通过正规化流程来收集大家的想法，并应用到Devcon中，从而改善Devcon体验。

  &lt;br/&gt;

# 为什么现在公布？

在先前的文章中，我们已经提到了如何让Devcon更好地反映整个以太坊生态系统的想法。然而，这件事变得越来越具有挑战性。从许多方面来看，我们很乐意去处理这样的挑战，因为这些挑战是由以太坊构建者、演讲者、与会者、组织者以及所有其他参与人员的规模和多样化的增长所带来的。

虽然曾经有一段时间，参与的人少到大家可以轻松地在一间教室里，但我们早已过了许多方面都供不应求的状态 (例如门票数量、演讲者人数或是自产的应用程序数量)。

因此，在今年早些时候发布的[文章](https://blog.ethereum.org/2020/03/02/devcon-whats-ahead/)中，当我们开始尝试解决过去特定领域中的困难时，我们也积极思考如何开始这项从未有团队考虑过的工作，这就有了这篇文章。

  &lt;br/&gt;

# 如何实现DIPs？

让我们深入探讨如何应用DIP。开始使用DIP的最佳方法是访问[DIP github资源库](https://github.com/efdevcon/DIPs)，并在新的[Devcon论坛](https://forum.devcon.org/)中参与对话。



![DIPs2.png](https://i.ibb.co/w4n2tT9/DI-Ps2-3fb5aaa8d8.png)




作为第一步，我们建议读者在Devcon论坛上发布自己的想法，以获得更广泛的社区的反馈。一旦想法变得明朗起来，读者便可以可以提交一份正式的提案。

而提交之后，读者将收到来自我们团队和其他人的反馈，以帮助完善您的想法，并讨论这些提案如何融进DIPs这个项目，等等。

DIPs的灵感是受到PEP (Python增强提案)、BIP (比特币改进提案) 以及EIP (以太坊改进提案)的启发而来。尽管比起来这个新试验项目有点中心化了（由于提案的通过最终取决于Devcon团队），我们还是很高兴能够有一个新的渠道拓展Devcon的形式，并且希望在大家的提案中找到共识。

DIPs的目标是让每个人感到自己的想法被倾听到，以进行更开放的讨论，(最重要的是)可以从不同的创新者中学习，从而提高Devcon活动的质量。

 

 &lt;br/&gt;

# DIPs是怎样的？

如果到目前为止该过程对读者来说有点抽象，并且想知道DIPs到底是怎样的。很高兴告诉你！DIPs虽然今天才公布，但是Devcon团队最近几周已经和一些团队合作测试运行第一批提案了。

我们第一批的提案包括尝试[促进Devcon活动的碳平衡](https://github.com/efdevcon/DIPs/blob/master/DIPs/DIP-1.md)；[酒店与机票可以在一个FOSS (免费开源软件) 的去中心化市场进行预定](https://github.com/efdevcon/DIPs/pull/3)；准备一个[寻宝游戏](https://github.com/efdevcon/DIPs/blob/master/DIPs/DIP-4.md)；以及为与会者提供一张[智能钱包卡片](https://github.com/efdevcon/DIPs/blob/master/DIPs/DIP-5.md)。

  &lt;br/&gt;

# 总结

我们知道以太坊生态系统已经发展得十分庞大，仅凭我们团队无法顾及到每一位社区成员的好主意。而有了DIPs，以及大家的不懈努力，我们可以使得Devcon比以往任何时候都更能反映社区的想法。

非常欢迎大家查看[DIP-0](https://github.com/efdevcon/DIPs/blob/master/DIPs/DIP-0.md)，以获取更多的信息。大家可以浏览已经提交的DIPs，然后加入[论坛](https://forum.devcon.org/)，参与最新以及正在进行的讨论。我们已经迫不及待地想要听到大家的想法了！

  &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[「HELLO, ETH 2.0」AMA精彩回顾]]></title><description><![CDATA[ETH2.0最受关注的问题谁来解答？这里有最前沿的技术开发者，最深入社区的Eth爱好者！来回顾大家的精彩发言吧！]]></description><link>https://www.ethereum.cn/helloeth2</link><guid isPermaLink="false">https://www.ethereum.cn/helloeth2</guid><pubDate>Sun, 16 Aug 2020 00:00:00 GMT</pubDate><content:encoded>&lt;center&gt;“能打败以太坊的，只有以太坊2.0。”——Vitalik&lt;/center&gt;

&lt;br/&gt;

作为全球市值排名第二的公链项目，以太坊规划完备的蓝图一直吸引着全球区块链社区的关注。迎来PoS机制后的以太坊2.0，又将为我们缔造怎样的惊喜和奇迹呢？

本着活跃国内以太坊社区，给中国以太坊社区用户更多的普及教育的初心，昨晚以太坊中国（ECN）与OKEx矿池合作，成功举办了双语版的“Hello, ETH 2.0”AMA直播活动，对话来自全球的以太坊社区领袖，带大家全方位、深度解读以太坊2.0。

本次AMA活动主题包括：以太坊2.0发布路线图/多客户端测试网/layer2扩容解决方案/PoS机制/社区建设

**嘉宾阵容：**

- **Raul Jordan**, 以太坊2.0开发团队Prysmatic Labs联合创始人
- **Afri Schoedon**, ETH2.0多客户端测试网的先锋开发者
- **Steve Guo**, Loopring首席技术官
- **阿剑**, EthFans总编
- **Jason**, Unitimes社区合伙人

&lt;br/&gt; 

**问答环节第一部分：关于以太坊2.0的常见问题**

**Q1.作为全球市值排名第二的公链项目，以太坊一直吸引着海内外用户的广泛关注。以太坊2.0目前临近上线，呼声也是越来越高。各位嘉宾是否可以用简单通俗的语言向我们解释一下，什么是以太坊2.0？它和现在的以太坊相比，有哪些区别？**

**Rual:** 对我来说，eth2完全颠覆了以太坊区块链从前的设计，**旨在最大程度地同时实现去中心化、抗审查和扩容目标。**我们过去几年不断学习，为的就是寻找更加可靠的方法，来实现我们最初的目标——让以太坊成为一台连接世界的计算机，其中包括权益证明和分片机制。

**阿剑**：Danny Ryan 说得好：“Eth2.0 is built for Ethereum, and finally it will become Ethereum itself”。以太坊2.0 是为以太坊生态打造的下一代区块链底层，它跟现在的以太坊相比有两大区别：**一是使用 PoS（权益证明）算法来推动区块链的运行；二是使用 “信标链+多分片链” 的架构来提高可扩展性。**简单来说，以太坊2.0 不再由运行工作量证明算法的矿工来出块；而是各存储了保证金的验证者用数字签名来表达对区块的认可，由此确定主链并使状态获得终局性（finality）。这就是权益证明（PoS）的含义。

此外，信标链 + 多分片链的架构实际上是将 PoS 机制内部的状态与普通用户交易的状态分离了开来，信标链不再执行交易，交易的执行都交给分片链（可以理解为多个与当前的以太坊有同样复杂性的区块链），而信标链负责敲定状态并沟通各分片。

 

**Q2:以太坊2.0的研发和部署计划历时已久，国内外社区对于以太坊2.0的正式启动时间也是众说纷纭。两位是否可以分享一下以太坊2.0目前的开发进度和大致发布时间？研发工作面临哪些主要挑战？**

**Afri:** 谈ETH2发布路线图的时候最好不要提主网启动的具体日期。因为关于时间问题众说纷纭，有人说1月3日，有人又说7月30日。事实上，这两个时间都不合适。我们都没法说准主网的创世区块何时产生，因为ETH2实在是有太多变动因素了。

但是，对于启动ETH2这一重大里程碑，我可以给出真实的看法。首先，所有客户端都必须实现规范的最终版本v0.12.1。目前只有一个客户端实现了规范v0.12.1并发布了最新版本，而其他四个客户端仍朝着这个目标努力。我们的计划是，本月底多客户端测试网能够实现最终版本规范v0.12.1，这将是第一个达到该目标的多客户端测试网。

如果这运行顺利的话，**我们就可以准备在7月初启动具有主网配置的公共多客户端测试网了。**大家对此期待已久了，但准确来说这并不是所谓的“官方”多客户端测试网。但是如果最终规范版本实现运行得顺利的话，7月我们就可以启动最后的公共测试网了。

可能有别的小型开发者测试网正在运行中，但我们应该把重心放在公共测试网上。如果最终版本的公共多客户端测试网能够稳定运行两至三个月，那我们就可以开始准备ETH2的主网启动工作了。

**首先，启动ETH2之前需要实现存款合约**。到时还得举办一个合约启动仪式，确定存款合约是将存款从ETH1向ETH2转移的唯一桥梁。启动仪式怎样设计还没决定，但我知道Carl正在为此做准备。我估计最早得到8月底，甚至9月中旬。

**举办了启动仪式且合约部署完成之后，从技术上来说，我们就正式进入ETH2了**。到那时就算没有官方发布日期，用户也可以在ETH1链上质押第一笔存款，因为质押手续是完全无需许可的。

我的建议是，最快都要在正式的多客户端测试网产生创世区块的90天后，ETH2信标链主网才能产生创世区块。因为我们需要8周的测试时间和4周的缓冲时间，以防出现漏洞。

不管何时能够部署存款合约，我们到时视情况而定推迟主网的创世日期就可以了。但是考虑到上述步骤，主网创世时间可能最早要等到十月份。而且主网创世之前我们还需要达到至少1.6万的质押金额，这可能得额外花几周时间。

**最后我简单总结一下**……如果一切顺利进行的话，ETH2会在11月上线。更加乐观的说法是，如果我们加快工作的话，10月就能上线。但也要做好心理准备，如果规范中有地方需要修复，并且所有客户端得再次实现新规范，那么可能就要等到2021才能上线了。我觉得ETH2不会在12月上线。

 

**Q3: (1/3)互操作性一直是以太坊的独特优势之一。去年九月，以太坊主要的七个客户端团队经历了为期一周的“互操作性封闭营”，在客户端之间的通信和同步方面取得了巨大进展。多客户端测试网作为以太坊2.0正式上线之前的终极试炼，目前我们迎来了第二个多客户端测试网Witti。所以我想请问Raul，到目前为止，客户端互操作性进展如何？客户端之间实现互操作性对以太坊2.0的意义为什么如此重大?**

**Raul:** 客户端互操作性至关重要，因为它帮助我们在单个实现过程中发现关键漏洞。例如，当所有eth2节点都通过Prysm客户端实现运行时，如果没有客户端互操作性，那么我们不可能发现验证者奖惩机制的相关漏洞。

例如，当所有eth2节点都通过Prysm客户端实现运行时，如果没有客户端互操作性，那么我们不可能发现验证者奖惩机制的相关漏洞。如果没有互操作性的话，可能会影响到主网用户，甚至是整个ETH2的发展。

Afri在不同eth2客户端团队之间做了很多协调工作。

 

**Q3: (2/3)请问Afri，作为多客户端测试网Schlesi和Witti测试网的倡导者和开发者，请您简单介绍一下多客户端测试网的主要任务是什么？Witti多客户端测试网目前的现状如何？**

**Afri:** Eth2.0的第一个阶段，阶段0，即信标链。ETH1的客户端无法运行信标链节点。各种新实现的客户端将首次共同协作，采取全新的独特方法达成共识，一起构建一个新的区块链。

在ETH2主网启动之前，我们需要测试网尽可能地模拟主网状态。也就是说，我们需要运行一些长期运行的稳定测试网，并且支持多个客户端运行，理想情况是能够支持所有客户端。多客户端测试网Schlesi已退休，现正运行Witti，不久之后我们将启动Altona。

**Witti正平稳运行中。目前约有15万个slots，网络活性也不错**。验证者参与率徘徊在71%左右。所有客户端都还会遇到漏洞且需要更新优化。我估计我们还要进行好几次多客户端测试。

 

**Q3: (3/3)还有一个问题就是，多客户端测试网在以太坊2.0上线之前需要平稳运行2-3个月，那么考量测试网平稳运行的标准有哪些？预计何时上线正式的多客户端测试网？**

**Afri:** 怎样才算平稳运行呢？**其中一点就是测试网上没有出现共识问题，不会发生永久性分叉，并且所有客户端都应该对主链达成共识**。再者，不同的客户端之间存在着一些不兼容的情况，所以我们需要保证客户端之间实现良好的网络通信。我希望在启动最终多客户端测试网之前不在客户端后端中加入ENR（以太坊节点记录），并能够为线路节点提供适当的多地址格式。

**还有就是要看证明和验证者活跃度的状态。**如果活跃度可以维持在80%-90%以上，区块链的活性良好，并且能够持续敲定区块，那就差不多了。

至于最终多客户端测试网的发布时间，我之前有提到最快会在7月中旬启动。我非常期待这一天的到来！

 

**Q4: (1/2)在以太坊2.0进展如火如荼的同时，近来，以太坊第二层扩容解决方案也成果颇丰。以太坊2.0逐步上线之后，有了PoS和分片的加持，以太坊生态即将步入扩容时代。Loopring（路印）作为首个且目前唯一一个成功采用ZK-Rollup的去中心化协议，您可以简单介绍一下ZK-Rollup是如何实现优良用户体验的吗？**

**Steve**: zkRollup是一种用于以太坊的可扩展性方案，通常是被定义为layer 2的解决方案。它能处理更多交易，更快速并且成本更低。它在链下批量执行所有计算，并且只向以太坊提交一个小的零知识证明（不能是伪造的证明）进行验证。由于以太坊会验证这些证明，并且存储足够的数据来准确判断链下账户的状态，因此zkRollup拥有以太坊层级的安全性。

**ZK-Rollup中的ZK意思就是零知识证明，Rollup大家可以把其看成是汇聚打包**。零知识证明框架目前有好多种，路印协议最终选定了zkSnark作为背后的零知识证明框架，主要是因为zkSnark的证明数据大小是目前最小的，这就意味着链上成本能做到最低，同时生成证明所必须的链下计算成本也不算高，技术框架本身也已经过ZCash多年的实践考验过的。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/WDtHXTQ/AMA-1-19a5159578.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;cr：Loopring&lt;/center&gt;

**ZK-Rollup技术中是会有一个中继系统**。首先，中继在链下把所有账号信息组织成一颗Merkl树，Merkle树的计算过程是两两配对计算哈希，直到算出树根的哈希值，该树根的哈希值就能唯一的代表整颗树当前的状态，因为任意叶子节点上值的变化必然会导致树根的哈希值不一致。

然后中继在链下收集一组用户发起的交易（可以是转账，也可以是买卖），之后就可以为这些交易生成零知识证明。其证明包括如下内容：

- 前一次区块链上保存的根哈希值是R1；
- 每一笔用户的交易是经过用户签名的；
- 按照用户的每笔交易去更新Merkle树，验证更改是否有效；
- 本次更新之后的根哈希值是R2；

最后，中继把交易的一些关键数据（比如余额）、生成的零知识证明和新的根哈希值R2递交到区块链上，区块链上预先部署的一个智能合约会根据其记录的历史根哈希值R1和输入的交易关键数据去检查这个证明是不是有效的。如果证明有效，那么说明中继后台是诚实的更改了链下保存的Merkle树，从而更新Merkle树哈希值R2。

整个方案的关键点就在于：**区块链上只是负责存储数据和验证零知识证明，其余的计算处理都是通过在链下更改Merkle树的方式来实现，从而极大的减小对区块链资源的消耗，提升区块链的整体性能。**

又因为链下部分有链上验证的辅助，所以也能确保链下处理资产的安全性和正确性。从而达到在不牺牲区块链带来的安全前提下，提升区块链的整体性能。理论上我们能在保持和以太坊主网同样安全的前提下，达到每秒2025笔交易，每百万笔交易大约150美金的成本。

 

**Q4: (2/2)Steve和Jason是否可以继续分享一下，以太坊生态将如何受益于layer1和layer2未来在扩容性方面的结合？又会对DeFi产生怎样的推动力？首先有请Steve。**

**Steve:** Layer2扩容技术的真实落地应用对以太坊生态来说非常重要，大家也都知道，因为一些传销盘的原因，近期以太坊网络特别拥堵，转账费用暴增，这些都对以太坊的大规模应用会造成影响，比如Reddit已经选定以太坊作为其Token的分发平台，Reddit的用户基数特别庞大，这个一旦大规模应用起来，以太坊会变得越来越拥堵。

恰好我们路印也已实现了基于zkRollup技术的支付系统，6月7号我们路印支付正式上线，目前已支持了10几种Token的二层转账，二层转账秒到，零手续费，大家再也不用为以太坊拥堵，转账费用高而烦恼。对Layer1上DeFi产品来说，如果我们把转账功能都移到了Layer2去的话，那么Layer1的带宽就会变得更充足一些。

**Jason**：首先是选择性的问题。以太坊layer2方案的繁荣给予开发者和用户更多的选择，同时规避了单一layer2所带来的潜在的风险和垄断。比如大家讨论得热火朝天的ZK-Rollup和Optimistic Rollup，从token交易的角度来看，ZK-Rollup的交易速度更快，结算时间更短，对于DEX类应用更加友好，体验更加丝滑，所以Loopring选择了ZK-Rollup。

而Optimistic Rollup对智能合约逻辑实现的支持更加友好，允许开发者去构建更加复杂的DeFi应用，所以你看Synthetix选择了Optimistic Rollup。这是第一个好处，生态内有了更加丰富的选择，然后这些选择反哺生态，让生态变得更加繁荣。

第二个是从整体的角度来看，以太坊的安全性和可扩展性都得到了提升。我们知道，layer1，也就是我们所说的主链，是以太坊数据最终的安全性保障。**一方面，layer1的扩展提升了链上数据处理的效率，同时也极大地降低了发生垃圾交易攻击的可能性。**

**另一方面，layer2方案的部署以及繁荣，降低了用户对layer1可扩展性的需求，layer1可以更侧重于保证自身的安全性**。这意味着，在保证用户体验的同时，以太坊数据更加安全可靠，从而吸引更多地用户基于以太坊构建应用生态，包括DeFi生态，因为金融应用的第一需求就是要保证安全性。

第三个是价值捕获和网络效应。layer1和layer2的结合使得以太坊可以满足绝大多数的金融以及其他领域的应用需求。随着PoS的到来以及DeFi的繁荣，以太坊上质押的资产形式会越来越多，最终也许真的就成为了大家梦寐以求的“结算层”。同时，这种金融繁荣会带来更大的网络效应，推动包括DeFi在内的以太坊生态进一步发展，这是一个强正反馈。

 

**Q5:以太坊2.0上线后，以太坊将由目前的PoW机制转为PoS机制。PoS机制的以太坊2.0，Staking经济将作为其中举足轻重的一环。各位嘉宾如何看待以太坊2.0中的Staking经济？对于矿工、矿池、开发者和普通投资者等，各方又该如何参与进以太坊的Staking呢？**

**Raul**： 我认为质押经济能够保障以太坊的安全性。我们希望用最通俗的语言向大部分用户解释staking，包括那些想要在家运行节点的以太坊爱好者。如果只有少部分的中心化交易所能够参与质押，那么以太坊还是无法像我们所设想的那么安全，并且无法实现去信任化。

而现在，大部分质押者都能通过参加其中一个公共测试网，参与eth2运行测试。Prysmatic Labs正运行一个eth2公共测试网Onyx，点击次网站参与测试：[https://prylabs.net](https://prylabs.net/)。也可以访问该网站对节点进行监测：[https://beaconcha.in](https://beaconcha.in/)

**阿剑**：因为协议的特殊性，以太坊 2.0 的 Staking 会跟现有的 Staking 形态有很大区别。为了去中心化，协议层对 Staking 的参与做了很多限制，这些限制其实也是不同的服务商可以发力的地方。

另外，当前的以太坊 2.0 才刚刚要开始 Phase 0 阶段，因此不至于说是立刻就会对整个生态产生天翻地覆的影响，所以大家要观望一下也完全没问题。毕竟现阶段协议层的限制还是比较多的。

最重要的是，想尝鲜以太坊 PoS 的朋友，最先应该做的是了解以太坊 2.0 的协议设计。这样不管是自己动手参与，还是使用第三方服务，心里会更有数。

**Jason**：关于Staking经济，首先从投机市场的角度来说，Staking减少了市场上ETH的流通量，肯定会刺激币价上升，这对于所有ETH的持有者来说都是喜闻乐见的。这是一个很现实的问题，绝大多数普通投资者、矿工、矿池等都是以盈利为目的的，他们是以太坊生态不可或缺的一环，你不能指望光靠一个天天亏本的信仰以太坊就能发展壮大了。

那么有了利益的捆绑，整个以太坊生态里面的参与者就构成了一个利益共同体。大家都希望以太坊生态能够更加安全地繁荣发展，而不是走向衰败，这种期望无形中会进一步加强以太坊的安全性，并推动其发展。有一个不太合适的词，叫“大而不倒”，这个词很形象地概括了Staking经济给以太坊带来的影响。

普通投资者最快捷地就是直接购买ETH，或者在未来会有交易所和钱包提供Staking服务，普通投资者也可以通过这样的渠道间接地参与Staking。当然啦，自己跑PoS节点也并不难。

DeFi项目方可能要乐开花，因为过去实行部分准备金制度并不容易，一方面在这个圈子里理财暴雷的风险还是很高的，另一方面是其他公链的体量比较小，Staking的收益很多时候无法覆盖币价下跌的损失。但是未来DeFi项目方可以把资金池子里多余的资金用作Staking，实现更加稳定的“躺赚”。

**Steve**：我个人是很看好2.0的Staking模型可能会带来以太坊币价的上涨，有机会能锁定超过千万的以太坊到2.0的Staking中去。

根据Consensys一次287人的调研结果表明：**有32.8%的人准备自己跑Staking节点，33.1%准备用第三方节点做Staking。**


![AMA2.png](https://i.ibb.co/WDtHXTQ/AMA-1-19a5159578.png)





&lt;center&gt;cr: ConsenSys&lt;/center&gt;

我们路印交易所也在考虑Stake池的事情，因为毕竟用户资产躺在智能合约里面是不能再给用户带来超额收益的，但如果能用于Stake的话则会有更多的收益。但我们会用智能合约来保证是在用户拥有知情和控制权的前提下来做这件事情，也就是保证资产的非托管性。

 

**Q6:阿剑和Jason分别来以太坊中文社区EthFans和Unitimes，对以太坊在国内的用户教育和普及方面作出了卓越的贡献。在转向以太坊2.0的关口，两位认为作为社区方面临的挑战是什么？如何推动社区成员，甚至是更主流人群对以太坊2.0的关注和参与？对此我们能做些什么？**

**阿剑**：一个蛮大的挑战是 Eth2.0 整个系统比较复杂，而且战线也比较长。这种长使得我们要花更多的心思去判断生态里面哪些事情是现阶段比较重要的、哪些东西是长远来看有价值的。当然长也有长的好处，我们可以花更多时间去普及这个复杂的系统，事情可以做得更细。

我觉得社区要做的事情是多关注整个生态的变化，要始终让大家觉得这是个很好玩的生态。因为技术可能是枯燥的，但生态会有精彩的、有想象力的地方；生态中的一个东西可能是单调的，但看到整个生态，就会觉得是多样而有趣的。

**Jason**：关于社区面临最大的挑战是，目前整个区块链开源技术，也包含以太坊的中文社区的真实受众和贡献者依然较少。一方面因为技术门槛也偏高，需要学习和研究很多门学科才能够更好的理解区块链技术；另一方面是技术还比较新，很多人对技术的认识还不多，有些甚至有一些偏见。

就比如以太坊，目前以太坊已经是全球公有链里技术社区最大最健康的项目了，但在中文社区建设上依然任重而道远，过去的几年时间，很多人更倾向于在二级市场投机赚取收益，并没有参与到以太坊生态的建设中，他们对以太坊大多停留在对于投机的调研或兴趣；另一方面，以太坊中文社区发展起来的时间要比国外晚一些，语言方面也是中国开发者学习新技术的一道障碍，所以对于一些潜在的想学习以太坊的受众来说，他们可能还没搞清楚以太坊1.0的原理，就又来了1.x、2.0，所以从这个层面来将，以太坊中文社区还要继续强化科普教育以及开发者社区建设。

至于推动更多人对以太坊2.0的关注和参与，目前像EthFans还有Unitimes，当然还有ECN、ethplanet等等很多的以太坊中文社区都在努力。以太坊2.0是一个新的起点，也是以太坊中文社区弯道超车的机会，我们可以做的有很多，比如线上线下的研讨会、workshop以及科普教程的开发等等。

 &lt;br/&gt;

**问答环节第二部分：自由问答**

**Q1： ETH2.0 信标链采用 Casper 共识机制，这种共识机制具体而言有什么优势，它解决了什么问题？从现在情况来看，相较于2017年以太坊的高价格，现在的以太坊是不是被低估了？**

**Raul:** Casper要解决的一个具体问题是，与现有共识相比，可以提供更为安全的权益证明共识。PoS链的大多数其他证都妥协于委托权益证明（DPoS）。也就是说，该协议仅支持少量验证者（可能是20-100）。**以太坊2.0的Casper机制最多容纳400万验证者，这在促进去中心化的同时提高了安全性。**

其他协议无法支持这么大数量的验证者，因为彼时将无法扩展共识协议。以太坊2.0 Casper能够在支持大量验证者的情况下实现扩容性。

**阿剑**：Eth2.0 的共识其实可以分成两个部分，一个部分是 LMD-GHOST 分叉选择规则，它将各验证者最新签名视为对分叉链的支持，然后选择最多签名的分叉作为主链，确定出新块的位置；另一个部分是 Casper FFG，该共识算法的意义是一方面是出块共识的问题，另一方面是长程攻击问题，因为它是通过奖惩机制的设计使得网络能定期敲定信标链的状态，可以理解为定期刷新创世状态（因此 GHOST 也不必回溯太深来确定主链）。。**整体效果就像 Raul 所说的，以太坊的 PoS 机制比起其它的 PoS 机制，可以支持百倍千倍的验证者数量。**

 

**Q2: 如何解决中心化交易所staking可能带来的集中化风险?**

**Rual:** 我们可以通过使运行自己的节点变得更简单来解决这个问题。Eth2.0的节点要比Eth1.0或EOS节点更容易运行。这有助于提高去中心化程度和减少大交易所垄断。

 

**Q3: 关于ETH2.0 的Layer 2解决方案有考虑过 Bitcoin采用的LightingNetwork吗？相比LN，zkRollup有什么具体的优势？**

**Steve**: 可以这么理解，zkrollup是比闪电网络更高效，更快时间能达到资产的最终一致性的解决方案. 闪电网络给不同人转账得有中间跳板，而zkrollup只需要自己的一个中继系统。但zkrollup需要有智能合约，特定椭圆曲线运算的支持，所以比特币上估计是没法部署。

 

**Q4: 目前除了TxRx团队在做2.0研究，还有哪些团队在做研究，分别具体分工是？**

**阿剑**：以太坊的研究团队挺多的。我所知的至少有三个。一个是基金会的研究团队，Vitalik 和 Danny Ryan，Justin Drake 等等；一个是 ewasm 团队，他们也做一些跟 Phase 2 有关的研究。还比如 ConsenSys 公司也有一个 Quilt 团队做 Eth2.0 相关的研究。但具体分工，我不太了解。多看 ethresearch 论坛应该会有眉目

 

**追问：研究进度信息非常碎片，ethresearch网站提问主要以个人形式为主，所以难于确定属于哪个团队。**

**阿剑**：是的，你说的这个现象确实存在。所以如果自己没有对背景了解得非常清楚的话，可以等一段时间再去回顾或者看有没有总结出来。非专业人员一一跟进其中的进展是比较困难的

 

**Q5: 以太坊是公链龙头，这点毋庸置疑；以后波卡上线后，实现了多条公链的互通，那么以太坊会如何定位呢？保持独立还是加入互联互通？这会对以太坊地龙头造成影响吗？**

**Jason**: 首先明确一个问题，未来以太坊不会也不可能一家独大，跨链互通和相互合作是包括以太坊在内的所有区块链的必然趋势。现阶段而言，Polkadot最大的问题是，他的设计过于理想化，但是并没有经过实际的考验。区块链是一个复杂的组合式工程，任何一个细节出了问题，都有可能导致整个系统被破坏，而以太坊最大的优势恰恰在于，它是目前经过现实检验的最安全、最稳定、最繁荣的区块链系统。

 &lt;br/&gt;

*注：Raul以及Afri的原回答为英文，由ECN翻译为中文，以英文原版为准。详情[点击](https://news.ethereum.cn/hello-eth2-ama/)阅读原文。

以太坊生态的繁荣离不开每一位建设者和拥护者。我们衷心感谢各位嘉宾耐心细致的分享，也感谢观众朋友们对以太坊的关注🙏

源于理想，始于社区，ECN不会停下脚步，期待下次再会。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn/ 若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Hello ETH2.0 AMA]]></title><description><![CDATA[Original version of 「Hello ETH2.0 」AMA!]]></description><link>https://www.ethereum.cn/hello-eth2-ama</link><guid isPermaLink="false">https://www.ethereum.cn/hello-eth2-ama</guid><pubDate>Sun, 16 Aug 2020 00:00:00 GMT</pubDate><content:encoded>**Hi there 🙂**

ECN finally lands on Medium, with our first Ask-Me-Anything summary script. The #Hello, ETH2.0# AMA lasted for 2.5 hours from 21:00 pm to 23:30 pm (UTC+8) last night, livestreamed on WeChat in English &amp; Chinese and also on Twitter in English documentation. It’s really informative and insightful as an Ethereum 2.0 primer, with five eth buidlers from the wide ecosystem spectrum.

------

&lt;br/&gt;

# Guests

- Afri Schoedon, Pioneer of ETH2 Multi-Client Testnets
- Raul Jordan, Co-founder of Prysmatic Labs
- Steve Guo, CTO of Loopring
- A Jian, Editor of EthFans
- Jason, Unitimes Community Partner

#  &lt;br/&gt;

# Topics

Eth2 launch roadmap / multi-client testnets / layer2 scalability / PoS / community building

------

# &lt;br/&gt; 

# Q&amp;A

*Note: the answers from Steve, A Jian and Jason are translated from Chinese into English by ECN. In case of any discrepancy, the Chinese version shall prevail.*

**Q1** Ethereum has been interesting and exciting global users with its rapid growth. Now with the long-anticipated milestone getting closer, the calls for Ethereum 2.0 are growing louder. Could you explain what Ethereum 2.0 looks like in plain words? How does it differ from current eth1 main chain?

**Raul:**

To me, eth2 is a total redesign of the Ethereum blockchain to maximize for decentralization, censorship resistance, and scalability at the same time. It takes all the earnings we have had over the past few years and turns them into a much more sustainable approach to achieve its original goal of becoming a “world computer”.

**A Jian:** (translated)

Danny Ryan said “eth2.0 is built for Ethereum, and finally it will become Ethereum itself”. Ethereum 2.0 is to build the base layer of the next-generation Ethereum blockchain ecosystem.

Eth2 differs from the current Ethereum in two respects: 1) use PoS (Proof of Stake) algorithm to drive the blockchain operation; 2) to improve scalability by “beacon chain + multi-shard chain” architecture.

In plain words, blocks in eth2 are not produced by PoW miners, but confirmed and finalized by stakers who deposited their ETH. Besides, “beacon chain + multi-shard chain” architecture separates the state inside PoS and that of transactions. Instead of executing transactions, beacon chain will handle finalization and communicate with shards. Shards could be considered as complicated blockchains resembling the current eth1 chain, which excute transactions.

 

**Q2** It’s been years since Ethereum 2.0 plan was initiated. There are many opinions and wild guesses occurring across the community about its official launch time. Could you share with us the current development progress of Ethereum 2.0? What are the major challenges to be solved? And when do you expect Ethereum 2.0 to go live?

**Afri:**

It’s good to talk about launch roadmap without coming up with a concrete dates. One could say it’s January the 3rd or July the 30th. But the truth is, it won’t be neither of the dates. We cannot tell when the mainnet genesis will happen. This is because there are so many moving parts.

But I can give a realistic view on the open issues and milestones. First of all, **all clients have to implement the final version of the spec, v0.12.1.** Currently only one client has a release out currently, and the other four clients are still working towards a stable release. We will see a first multi-client testnet with the final v0.12.1 spec be launched potentially end of this month.

If this goes well, we will be able to prepare the public multi-client testnet launch under mainnet conditions early July. This is the long awaited milestone, sometimes mistakenly referred to as “official” multi-client testnet. **But if it goes well, we can do the final public testing in July.**

There might be a couple of smaller developer testnets on the side, but the main focus should be the public one. **If the public multi-client testnet turns out to be stable over the period of two or three months, we can start working towards a real mainnet launch.**

First of all this requires a deposit contract. A ceremony to determine the contract that is to be used as the one and only bridge to ETH2 deposits needs to be held. How this will look like is not entirely defined yet. I know Carl is preparing that. We should ask him soon. **I expect the earliest possible date for such a ceremony would be end of August or rather mid September.**

**Once the ceremony is done and the contract is deployed, technically the rush into ETH2 has officially started.** Even without official launch date, people could start making the first validator deposits on the ETH1 chain as this is an entirely permissionless process.

**I would suggest to schedule the minimum genesis time for the beacon chain mainnet to be exactly 90 days after the genesis time of the official multi-client testnet.** This would give us 8 weeks of testing and 4 weeks of buffer time in case we would have to fix something.

Regardless of the deployed deposit contract, we can always push back the genesis time for mainnet if needed. But given the steps outlined above, the earliest possible mainnet genesis time would be somewhere in October. This does not take into account that **we need at least 16k deposits before we see a mainnet genesis event.** This could additionally take some weeks to ramp up.

So, to sum up…. **November if everything goes well.** October if we are very optimistic and pushy about the date. Pessimisticly speaking, it would be 2021 in case anything needs to be patched in the spec and adapted by all clients…. I don’t think we will launch in December.

 

**Q3** (1/3) Interoperability has been one of Ethereum’s edges. The question for Raul is that by far is there anything more happening around client interoperability? And why client interoperability matters so much to eth2?

**Raul:**

Client interoperability matters so much because that’s the way we can **catch critical bugs in a single implementation.** For example, if all of eth2 ran using our Prysm implementation, we would never find a critical problem regarding validator rewards and penalties that we have found thanks to client interoperability.

 

**(2/3)** The multi-client testnet is considered to be the ultimate hurdle before we see real eth2. As the initiator of eth2 multi-client testnets Schlesi and Witti, could Afri share with us the primary targets of multi-clients, and Witti’s current running state?

**Afri:**

The first phase of Ethereum 2.0, the phase 0, is the beacon chain. The old ETH1 clients will not be able to run a beacon chain. **For the first time, a variety of newly implemented clients will be working together on a brand new blockchain with a new, unique approach to networking and consensus.**

Before such a mainnet can be launched, we need testnets that mimic mainnet conditions as good as possible. **This requires us to have stable, long-term, and persistent testnets up and running that are supported by not only one client but multiple clients, ideally, all clients.** The Schlesi testnet was one of many steps in that direction, the Witti testnet is another, and soon we will launch Altona.

Witti is running fairly stable. It currently has seen around 150k slots and good livelyness. The participation rate of validators is hovering at 71%.

All clients still experience bugs and introduce new optimizations. I suspect we **still need a lot more multi-client testing.**

 

**(3/3)** One more question for Afri. It’s said that the final multi-client testnet has to remain stable for at least 2 months before beacon chain release, so what are the indicators for stability measurement? When is the public multi-client testnet expected to go live?

**Afri:**

Indicators for stability are: **no consensus issues and no permanent forks obviously, all clients should agree upon the correct chain.** Also, we need to finalize proper networking, there are a lot of rough edges and hiccups between the different clients. I hope we can ban ENR into the backend of the clients before we launch and have proper multi-address format for wiring nodes.

Further indicators are **attestations and validator activity.** If we maintain **above 80–90% activity** and the chain **stays in perfect liveliness with high finality**, we should be good to go.

As I outlined earlier, **the soonest possible launch date for a public multi-client testnet would be mid-July.**

 

**Q4** (1/2) After the official launch of eth2, with the support of layer1 solutions like PoS and sharding, Ethereum is heading into a new scalability epoch.The adoptions of Rollup techniques fuel the transaction speed while reducing the transaction fees significantly, bringing much better experience to users. As the CTO of Loopring, the first and ever decentralized protocol with working ZK-Rollup, could you please describe how is ZK-Rollup designed to optimize our user experience?

**Steve:** (translated)

Zk-Rollup is a scalability solution applied to Ethereum, often known as a layer2 solution. It can support more transaction processings with faster speed and lower cost. **It executes all computations off-chain and only needs to submit a small zero knowledge proof (cannot be faked) to verify.** Since the proofs will be verified on Ethereum, and sufficient data will be stored to clarify the sate of off-chain accounts, **ZK-Rollup will share the same security level as Ethereum.**

Loopring chose zkSnark as its zk proof framework (tested by ZCash for years), with smallest verifying data size so far, which means lowest on-chain cost. And zkSnark doesn’t require many off-chain computing resources to generate proofs.




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/LQ50yGM/AMA-1-19a5159578.pnghttps://i.ibb.co/LQ50yGM/AMA-1-19a5159578.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;cr: Loopring&lt;/center&gt;

There is a relayer system in ZK-Rollup. First, the relayer will organize all account information off-chain into a Merkle tree where the hashes are computed in pairs until we get the Merkle root hash. Given that any change in arbitrary leaf value results in different root hash, the root hash will be the only display of the whole tree’s current state.

Then the relayer will collect a transaction set（transfer or buy&amp;sell）off-chain and generate zk proofs for those transactions. The proof generation process: the last stored root hash R1; every transaction is signed by users; update the Merkle tree according to those transactions, and verify the changes; get the updated root hash R2.

Finally, the relayer submits critical data (e.g. balance), zk proof and updated root hash R2 onto the blockchain. The pre-deployed smart contract will verify if the proof is valid based on the recorded root hash R1 and transaction data input. If it’s valid, the root hash R2 can be updated because the relayer has conducted honest changes to the off-chain Merkle tree.

Here lies the key point of this scheme: **it slashes the resources consumption and improve the overall blockchain performance by only keeping data storage and zk proof verification on chain, and moving computations off chain.** And more important, the security and validity of processing asset off-chain can be guaranteed by on-chain verification, so that **we don’t need to compromise security for better performance.** Theoretically, Loopring could bear **2025 tx/s at a cost of $150 per million transactions with the same security level as Ethereum mainnet.**

 

**(2/2)** Could Steve and Jason further share your insights of how Ethereum ecosystem will benefit from the combination of Layer1+Layer2 scalability? And what are the potential driving forces for DeFi?

**Steve:** (translated)

The real application of layer2 scalability is indispensable for Ethereum ecosystem. Recently some fraud schemes lead to a surge of gas price, and the network has been slowed down, which would be damaging for mass adoption of Ethereum. For example, Reddit has already decided to use Ethereum as its token distribution platform. With the tremendous user base of Reddit flooding onto Ethereum, the traffic would be too much for the network to handle.

Fortunately Loopring has implemented a payment system, Loopring Pay, based on ZkRollup, which was officially launched on June 7th. Now it has already supported 10+ token transfers on layer2 with zero fees, which helps mitigate issues like network congestion and expensive fees. **While for DeFi apps, if we can handle transfers on layer2, then the layer1 bandwidth coud be eased.**

**Jason:** (translated)

To begin with, it’s a matter of choice. The rising layer2 scalability solutions endows developers and users with more choices, while avoiding the potential single layer2 failure. Take ZK-Rollup and Optimistic Rollup schemes for example. Seen from token transactions, ZK-Rollup is a better choice for DEX apps and users with faster transaction speed and settlement. Maybe that’s why Loopring adopted ZK-Rollup. While Optimistic Rollup is more friendly with logical implementation of smart contracts, which allows developers to build more delicate DeFi apps. So we saw Synthetix with Optimistic Rollup. More choices popping in, more prosperous the ecosystem will be.

Second, at a higher level, **the security and scalability of Ethereum get improved.** Layer1, the Ethereum main chain, serves as the basic security guarantee for data. On one hand, scalable layer1 improve on-chain data processing while lowering the possibility of spam transaction attacks. On the other hand, with more solutions deploying on layer2, layer1 can alleviate its scalability burden and focus more on security side. That is, Ethereum will become more reliable while ensuring the user experience, which encourages more users to build on Ethereum, including DeFi apps, where security comes as a priority.

Third, I’d like to talk about value capture and network effects. **The combination of layer1+layer2 enables Ethereum to cover the demands of most applications in finance or other spaces.** With PoS and booming DeFi, there will be more staking assets on Ethereum, which might eventually make Ethereum the “settlement layer”. Meanwhile, greater network effects will come along with thriving finance, which would be strong positive feedback by driving the further development of Ethereum ecosystem including DeFi.

 

**Q5** It’s been known that when eth2 phase 0 happens, Proof of Work Ethereum will turn into a Proof of Stake blockchain where staking economy will be a major player. What are your insights of staking economy? How could various stakeholders participate in eth2 staking, such as average investors, miners, mining pools and DeFi services etc.?

**Raul:**

The staking economy, to me, will define the security of Ethereum. We wish to make staking easy for most people, including hobbyists that want to run a validator at home. If most staking only happens on a few centralized exchanges, we believe the chain will not be as secure or trustless as it should be.

Most stakers can get started today with experimenting on eth2 by joining one of the public testnets. At Prysmatic Labs, we run a public testnet called Onyx that you can join here: [https://prylabs.net](https://prylabs.net/) and monitor here: [https://beaconcha.in](https://beaconcha.in/)

**A Jian:** (translated)

Eth2 staking distinguishes itself from existing staking model due to its unique protocols. To decentralize, the protocol layer places many curbs on staking, and this is exactly where service providers could come in.

Now when speaking of eth2, it’s more about the coming phase 0, which won’t bring disruptive changes to the whole ecosystem at once. So it’s totally fine to keep watching.

I suggest that if you want to participate in eth2 staking, understanding how its protocols are designed would be helpful for your assessments, no matter you choose to DIY or use third-party services.

**Jason:** (translated)

On the market side, staking behavior results in reduced ETH market circulation **which will definitely stimulate a rise in ETH price.** This is what all ETH holders would like to see. As integral parts in Ethereum ecosystem, most average investors, miners and pools are driven by earnings. After all stakeholders need to make their ends meet in the first place, and then they could afford to sustain Ethereum’s growth.

Therefore, players in the Ethereum ecosystem will form a community with shared interests. Everyone is expecting Ethereum to play safe, which potentially empowers and pushing Ethereum forward. There is a funny but vivid expression for how staking economy will affect Ethereum: too big to fail.

A more straightforward way for average investors to participate is purchasing ETH, or staking their ETH via staking services provided by exchanges or wallets. If you want to run your own PoS node, it’s not that difficult.

This is what DeFi servers would like to see, as implementing fractional reserves is a little bit tricky. One thing is that managing your asset with DeFi is still risky. For another, other public chains are relatively smaller in volume, and sometimes staking earnings will fail to cover the loss when its price goes down. However, maybe DeFi servers could see net earnings by staking with extra asset in their pools.

**Steve:** (translated)

**Personally, I’m optimistic about eth2 staking giving rise to the ETH price.** And it’s likely more than 10 million ETH will be locked in staking.

According to a staking survey from ConsenSys, with a sample of 287: **32.8% users will run their own validator nodes, and 33.1% will use a third party staking services.**





![AMA2.png](https://i.ibb.co/WDtHXTQ/AMA-1-19a5159578.png)





&lt;center&gt;cr: ConsenSys&lt;/center&gt;

Loopring is also considering to provide our own staking pool, as users will gain no excess earnings by leaving their assets in smart contracts. But staking will do. However, we promise that users’ assets will still remain non-custodial via smart contracts, which means users have the right to know and control their assets position.

 

**Q6** A Jian and Jason are representatives from Chinese Ethereum communities EthFans and Unitimes. We wonder what are the challenges for community builders on the verge of Ethereum 2.0? What could be best practices to engage community members or even more mainstream population into the next generation of Ethereum?

**A Jian:** (translated)

A big challenge lies in the **complexity and durative roadmap of eth2 system,** which requires more patience to tell what really matters at the current stage and what really values in a long term. Otherwise, there’s time reserved for us to popularize the complicated eth2 system with more delicate efforts.

I think community builders should keep a good sense of the whole changing ecosystem, to deliver interesting and exciting stuff in this ecosystem. Technologies might be dry, but there are always marvels and novelties happening around the Ethereum ecosystem. **The ecosystem as a whole is diversified and fascinating.**

**Jason:** (translated)

The biggest challenge facing the Ethereum community is that currently there are still not many fans and contributors for the blockchain open source technology.

On the one hand, the technical threshold is a bit high, which means people should have a good mastering in various disciplines to better understand blockchain. On the other hand, such technology is too advanced to be popularized and even some are still biased towards it.

Let’s say Ethereum, with the biggest and strongest developer community, still has a long way to go in building Chinese Ethereum community.

One thing is that in the past few years, most users have been wandering in secondary market for earnings, staying out of the Ethereum ecosystem construction. For another, it’s a bit hard for some potential Ethereum learners to get over with the language barrier, less community maturity and rapid iteration of Ethereum technologies. Eth2 or eth1.x might be around before someone could understand eth1. And in this case, we still need to **carry forward education on Ethereum and developer community building.**

Now we have EthFans, Unitimes, ECN and EthPlanet to work as Chinese community contributors. **Eth2 is a brand new start as well as an opportunity for Chinese Ethereum community to thrive.** We still get plenty to do such as organizing online or offline seminars, workshops and developing educational resources.

------

#  &lt;br/&gt;

# Free Talk

**Q1**.We knew that ETH2.0 will introduce Casper consensus. What’s the advantage of it? What problems will it fix?

**Raul**:

A specific problem Casper solves is that allows for more secure proof of stake consensus than those which exist out there today. Most other proof of stake chains make the compromise of being delegated proof of stake. That is, the protocol only supports a small number validators (maybe 20–100). Ethereum 2.0 Casper allows for a maximum of 4 million validators, encouraging decentralization and increasing security.

Other protocols do not allow a large number of validators because they cannot scale their consensus algorithm if that happens. Ethereum 2.0’s casper allows you to have scalability and a high number of validators.

**A Jian**: (translated)

The consensus of Eth2.0 can be divided into two components:

1. LMD-GHOST fork choice rule, which considers the latest signature of validators as the agreement of the fork chain, and selects the fork with most signatures as the calonical chain.
2. Casper FFG. Its significance is to maintain block consensus and prevent long-range attacks. It enables the network to keep finalizing beacon chain by the design of reward and punishment mechanism, which can be understood as regular updates of the genesis state (so GHOST doesn’t have to track too deep to determine the main chain). The overall effect will be as Raul said, Ethereum’s PoS can support 100x or 1000x validators than other PoS chains.

 

**Q2**.How can we handle the centralization risk of staking?

**Raul**:

We can help with this problem by making it easier for people to run their own node. Eth2.0 nodes are easier to run than eth1 or EOS nodes. This will help encourage decentralization and reduce exchanges holding all of the stake.

 

**Q3**.Has Ethereum ever considered to adopt Lighting Network used by Bitcoin as a layer2 solution? Why is ZK-Rollup better than LN?

**Steve**: (translated)

We can put it this way: ZK-Rollup is a more efficient and faster solution to achieve the asset consistency than LN. Intermediate nodes are required in LN while ZK-Rollup has its own relayer. ZK-Rollup is not likely to be deployed on Bitcoin because it needs support from smart contract and specific elliptic curve computations.

 
&lt;br/&gt;
 

# The End.

------

Yet it will never end. See you next time💗</content:encoded></item><item><title><![CDATA[ETH2验证者须知：如何判定“证明”的有效性]]></title><description><![CDATA[Eth2验证者如何才能获得更高的奖励？首先要知道什么是“证明”有效性。]]></description><link>https://www.ethereum.cn/defining-attestation-effectiveness</link><guid isPermaLink="false">https://www.ethereum.cn/defining-attestation-effectiveness</guid><pubDate>Wed, 12 Aug 2020 00:00:00 GMT</pubDate><content:encoded>
来源 | **[Attestant](https://www.attestant.io/posts/defining-attestation-effectiveness/#fnref2)**
 
&lt;br/&gt;

译者按：Eth2.0验证者怎样才能获得更高的奖励呢？原来证明越早被打包进区块链，验证者获得的奖励便越高。本文根据关键度量“打包距离 (inclusion distance)”帮助验证者判定“单个证明”以及“聚合证明”的有效性。

 &lt;br/&gt;

# 证明

证明指的是由验证者就Eth2.0区块链当前状态所发起的投票。每位活跃验证者每epoch（约6.5分钟）发起一次证明，由以下元素组成：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gVV9LQJ/1-663333385e.png&quot;/&gt;&lt;/center&gt;



&lt;center&gt;图1：证明的组成&lt;/center&gt;

其中一个有趣的过程是链头投票，指的是验证者投票证明出最新的有效区块，即链头。链头投票的组成见下图：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/3CGkxQH/2-8a1d1d0b82.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;图2：链头投票的组成&lt;/center&gt;

在这里，slot指的是验证者投票证明当前链头所在的位置，哈希值则标识了验证者所在的位置。而这两者组合起来，独特地标识出区块链上的某一点，并且获得足够的票数之后，网络就链的状态达成了共识。

尽管每个证明中的数据都相对较小，但随着成千上万的验证者参与，该数据会迅速庞大起来。由于此数据将永远存储在链上，因此减少储存数据的大小很重要，可以通过聚合（aggregation）过程来实现。

聚合由多个证明组成，并且所有证明都由同一委员会投票，包括链头投票和最终确定性投票，然后将其合并成为一个聚合证明：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/mRTd8km/3-f617ec0c94.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图3：聚合证明的组成&lt;/center&gt;

聚合证明与简单证明在两个方面有所不同。首先，聚合证明中有多个验证者。其次，他的签名是聚合签名，由匹配的简单证明的签名构成的。聚合证明非常有利于存储，但是会带来额外的通信和计算负担（更多信息请参见下文）。

如果要求每个验证者聚合所有证明，这意味着每一个证明的信息都需传递给每位验证者，其中的通信总量会迅速使网络超载。同样的，如果聚合是可选可不选的，那么验证者不会情愿浪费自己的资源。然而如果我们换一种方式，由网络来选择验证者子集执行聚合任务。那么他们会更乐意做好自己工作，因为聚集证明所包含的验证者数量更多，更有可能被打包进链，意味着验证者将更有可能获得奖励。

执行此聚合过程的验证者被称为聚合者（affregators）。

 &lt;br/&gt;

# 提高证明奖励

Eth2.0使用打包距离度量（metric inclusion distance）来计算验证者证明所获得的奖励。一个slot的打包距离指的是进行证明的slot与最先打包证明进区块的slot之间的差。例如，在slot ss中进行证明，而在slot s+1s+1中被打包进区块，那么打包距离为11。如果是在s + 5s + 5处被打包进区块，则打包距离为55。

**在Eth2.0中，证明的价值取决于其打包距离，打包距离越短越好。这是因为信息越早呈现在网络上，它就越有用。**

为了体现证明的相对价值，根据打包距离的大小，对负责证明的验证者给予不同的奖励。具体来说，奖励乘以1/d，其中d是打包距离。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/LNRhkPw/4-4e79240cda.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;图4：证明奖励与打包距离的关系&lt;/center&gt;

如果网络运行良好，所有证明的打包距离将会是1。这意味着证明实现最大的有效性，并且相应地获得最大的奖励。如果证明产生延迟，那么验证者获得的奖励将相应地减少。

 &lt;br/&gt;

# 打包证明过程

那么证明是如何打包进Eth2.0区块链的呢？过程如下：

1.每个证明验证者都会根据链状态相关的数据生成证明；

2.证明广播到Eth2.0网络中相应的聚合者中；

3.而收到证明的聚合者将其与其他由同一个委员会投票的证明合并起来；

4.聚合证明被广播至0网络的所有节点中；以及

5.如果聚合证明还没有被添加到链上，任意一个提议区块的验证者能够将其打包进区块。

 

当证明的打包距离超过1时，我们就有必要搞清楚其中原因，有以下几种影响因素：

 

## 证明生成延迟（Attestation Generation Delay）

验证者可能会出现“证明产生延迟”的问题。比如，关于链状态的信息可能会出现过时的状况，或者验证者能力不足，需要花很多时间来生成证明以及对证明进行签名。无论出于何种原因，延迟的证明对于该过程的其余步骤都有间接影响。

 

## 证明广播延迟（Attestation Propagation Delay）

一旦有验证者生成证明，需要将其广播至网络的聚合者中。该过程旨在让聚合者及时接收到最早的证明信息，从而在证明信息广播至整个网络之前便将证明聚合起来。验证者应尝试和尽可能多的其他验证者连接，以确保快速广播证明至聚合者中。

 

## 聚合产生延迟（Aggregate Generation Delay）

证明聚合过程可能会出现延迟的状况。其中最常见的原因是，产生的证明使得节点超载。然而，当有大量的验证者需要聚合证明时，聚合算法的速度也会造成聚合产生的明显延迟。

 

## 聚合广播延迟（Aggregate Propagation Delay）

类似于证明广播延迟，聚合证明也需要广播至网络，并且可能遭受相同的延迟。

##  

## 区块产生失败（Block Production Failure）

证明要想要成为链上数据的一部分，必须得打包进区块。然而，区块产生有可能会失败。当验证者离线，或者没有成功同步网络其余验证者的数据时，生成的失效数据将被链否决。

区块产生失败会造成另一个影响，由于之前的有效证明没有打包进区块，下一个产生的区块需要接收更多的证明数据。如果可打包进下一个区块的证明超过了其所能容纳的范围，那么验证者将很有可能会选择那些有着最短的打包距离的证明，因为可以获得更多的奖励。这使得剩余的证明的打包奖励越来越少，导致证明错过最佳块以及随后的区块。

由于区块产生会受到验证者状态的影响，我们界定了最早打包slot，该slot是有效区块产生且进行证明的slot之后的第一个slot。这样的界定考虑到证明不能打包进不存在的块中，并且避免受到验证者有效性的影响。

#  

## 作恶行为

尽管如此，恶意验证者还是有可能拒绝将任何给定的证明聚合起来，或者拒绝将证明打包进其区块里。前者的解决方法是为每个证明组分配多个聚合者，而后者的解决方法是对拒绝打包聚合证明进区块的行为进行惩罚。然而，拒绝打包进块的惩罚如果受到经济补偿，或者该行为在政治上更有价值，那么负责证明的验证者无法采取任何措施来强制负责产生区块的验证者打包证明进块。

#  

&lt;br/&gt;

# 计算证明的有效性

考虑到区块生产和打包距离，证明的有效性指的是一个证明对网络的有用性。其计算方式为：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6F2nfDh/5-805f4715b9-1.png&quot;/&gt;&lt;/center&gt;




并以百分比值表示。以下是一些有效性计算的例子：

&lt;center&gt;

| Attestation slot | Earliest inclusion slot | Actual inclusion slot | Calculation  | Effectiveness |
| :--------------: | ----------------------- | --------------------- | ------------ | ------------- |
|        5         | 6                       | 6                     | 6−56−56−56−5 | 100%          |
|        5         | 6                       | 7                     | 6−57−56−57−5 | 50%           |
|        5         | 6                       | 8                     | 6−58−56−58−5 | 33.3%         |
|        5         | 7                       | 7                     | 7−57−57−57−5 | 100%          |
|        5         | 7                       | 8                     | 7−58−57−58−5 | 66.7%         |
|        5         | 7                       | 9                     | 7−59−57−59−5 | 50%           |

&lt;/center&gt;

如果一个证明因为其打包距离为最大值32而打包失败，那么该证明的有效性为0。

 &lt;br/&gt;

# 聚合证明的有效性

对于单个证明来说，计算证明有效性或许有那么点意思，但就这个值本身来说没有多大的意义。而聚合证明的有效性（包含的时间更久以及更多的验证者），可以让我们更好地了解一组验证者的整体有效性。聚合证明的有效性是单个证明有效性的平均值。例如，对给定组中所有验证者的有效性进行7天的记录，取其平均值。

  &lt;br/&gt;

# 总结

Eth2.0启动之后，成千上万个节点将彼此定位并开始提议区块以及对区块进行证明。与所有不成熟的网络一样，想要节点尽可能的有效还有很多问题要解决。如本文所述，用于记录节点效率的明确指标便是证明有效性。验证者如果想要最大程度地提高奖励，可以通过证明有效性来评判其自身整体表现。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新(截至2020/8/8)]]></title><description><![CDATA[回顾大型联合测试网Medalla的“创世”]]></description><link>https://www.ethereum.cn/wnie2-2020-8-8</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-8-8</guid><pubDate>Mon, 10 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200808)



##  

&lt;br/&gt;

# 文章荐读

来自Danny Ryan的最新一期[《eth更新速览》](https://blog.ethereum.org/2020/08/03/eth2-quick-update-no-14/)：Medalla发布抢先看，攻击网消息 – 赏金提升至1.5万美元。

##  

&lt;br/&gt;

# 测试网

本周最大的新闻当属Medalla测试网的成功上线。Medalla是一个公开的测试网，应用主网规范，鼓励所有人都参与其中。如果没有意外发生，那么Medalla将是信标链发布前的最后一个大型测试网。

Medalla于UTC时间8月4日周二1300之后的八秒创世，共有20084名验证者注册。以太坊基金会和[/r/ethstaker](https://www.reddit.com/r/ethstaker/)组织了一个发布派对：zoom会议中有三四十名参与者，我还看见在[YouTube](https://youtu.be/PvQdZ74i7Xw?t=128)的直播有超过1700名观众 (录像的观看次数已经达到12400，太棒了！) [我也参与了发布派对](https://twitter.com/gregthegreek/status/1290639084818509825)！

由于多种原因，刚开始的验证者参与度很低，在7个epochs之后 (40分钟) 我们才看到网络完成第一次最终确定。其实在现实情况中，这也不是什么大事，至少不像有些媒体写得那么夸张。Anthony Sassano在他的[the Daily Gwei](https://thedailygwei.substack.com/p/medalla-is-live-the-daily-gwei-43)中对这次事件进行了回顾。

在最近的[开发者会议](https://hackmd.io/@benjaminion/B1PSWKFbv)中我们讨论了初期低参与度的一些原因：在设置引导节存在一些问题，也未能及时将其引入客户端；创世时参与运行的几个客户端实现在进行证明 (attestations) 时出现了一些问题，因此团队暂时转而使用其他客户端。许多大型质押者处于离线状态，可能未及时准备就绪。

为了在主网启动时避免这些问题，我们打算将创世延迟从现在的48小时延长至96小时，甚至是一周。这段缓冲期为大家预留了足够的准备时间。

无论如何，这之后一切都运行良好。所有客户团队都发布了更新，以解决各种问题，这就是测试网的目的所在。因此，如果您正在运行验证程序，请确保更新至最新版本。撰写本文时，系统中有23737个验证者，激活队列中还有4706名验证者在排队。每个epoch只能进入4名验证者，因此当前队列将需要5天以上的时间才能进入，大家保持耐心。

如果读者想要尝试运行Medalla测试网，以下是一些有用的工具：

- [Launchpad](https://medalla.launchpad.ethereum.org/) – 注册验证者的友好工作流，[点此](https://codefi.consensys.net/blog/introducing-the-deposit-launch-pad-for-eth2)了解更多
- [Eth2Stats](https://eth2stats.io/medalla-testnet) – 在此处添加你的节点，查询附近节点及其位置
- [Beaconcha.in](https://beaconcha.in/) – 提供许多有用信息，可以为你的验证者设置控制板
- 获取[POAPs](https://beaconcha.in/poap). 运行多个不同客户端即可收集全套POAP
- [ethstaker Discord](https://discord.gg/SfWGYuE). 客户端团队的Discords链接已被置顶，可前往寻求帮助

## 攻击网

与Medalla同时运行的还有以太坊基金会团队发起的攻击网 ([attacknets](https://hackmd.io/@benjaminion/wnie2_200725#Attack-nets))。第一轮非常成功，Jonny Rhea对Prysm发起成功攻击，并且在[Go语言标准库中发现了一个存在九年之久的bug](https://twitter.com/preston_vanloon/status/1291422644185649152)。此处是Jonny的[相关文章](https://github.com/ethereum/public-attacknets/issues/12)。

[下一轮](https://github.com/ethereum/public-attacknets)的赏金已经提升至1.5万美金，心动不如行动！

##  

&lt;br/&gt;

# BLS相关进展

也许大家以为BLS密码签名的相关更改已完成。目前针对（草稿）IETF BLS签名标准中的边缘情况有[一些争议](https://github.com/supranational/blst/issues/11)，最终可能会对标准带来[一些更改](https://github.com/cfrg/draft-irtf-cfrg-bls-signature/issues/25)。

问题在于使用“无限”签名（G2G2组中的标识点）签名的有效载荷的有效性。也就是说私钥为零。从密码学的角度来看，由于所有数据都相同，这是毫无意义的签名。但是从表面看来，这符合当前的标准草案：0 &lt;= SK &lt;r。

对于Eth2来说，这无关学术：所有实现都需要以完全相同的方式处理所有签名。攻击者不受标准约束，会意外产生失控的情形。要参与到共识系统，需要我们对于“什么是有效签名”达成一致。这种情况其实在Witti测试网中就出现过，当时有人使用这类签名和公钥[创建了存款](https://hackmd.io/@benjaminion/wnie2_200612#Witti--gt-Altona)。当时，根据我们对标准的理解，所有信标链客户都认可它是有效的，并且没有出现问题。

对于我们的目的而言，如何解决这个问题不是很重要，明确申明无限签名的无效性更有意义。我们确实需要确定且明晰的定义，以便Eth2客户端能够继续达成共识，并且理想情况下仍要保持符合标准。

##  

&lt;br/&gt;

# 释义性文章

Google版的规范注释刚面世，便把我的AltaVista版本的规范注释比下去了😪。(译者注：[AltaVista](https://en.wikipedia.org/wiki/AltaVista)是全球较知名的网上搜索引擎之一。)

好了，开玩笑的。Vitalik的[Eth2规范注释](https://github.com/ethereum/annotated-spec)写得相当出色，并且毫无疑问是学习的主要资源。然而不管怎样，我还是会继续完成我的版本。这两个版本侧重有所不同，相信两者可以愉快地共存。我还计划添加一些额外的功能，比如慢慢上线更佳的内部导航。

但是无论如何，相信现在网络上关于[信标链创世的解释文章](https://hackmd.io/@benjaminion/genesis)就只有我写的那一篇了。在Medalla发布之前，许多人包括开发者在内对此都有较多的疑惑，因此我写了一篇简短的介绍。

以下是关于如何在Medalla上运行节点的一些指南。如果我错过了你的文章，很抱歉，以下是我这周注意到的一些信息:

- Larrypcdotcom发表了文章[《关于如何在测试网Medalla上设置Eth2客户端的说明》](https://gist.github.com/Larrypcdotcom/fcd4e79c2cf02ce37ec6ed9797beca2c)
- Somer Esat发布了两篇指南，即如何基于Ubuntu服务器在测试网Medalla上质押，分别[基于Lighthouse客户端](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-lighthouse-c6f3c34597a8)以及[Prysm客户端](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-medalla-prysm-4d2a86cc637b)进行讲解。
- CoinCashew发布了一篇[基于Ubuntu服务器和Teku客户端](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth2-with-teku-on-ubuntu)的质押指南。
- r/ethstaker上有关于如何[保证质押安全](https://www.reddit.com/r/ethstaker/comments/hmqpdu/staking_and_security/)的信息，有些指南涵盖了这一点，有些没有，尽管这相当重要。
- 我发现了这个Prysm文档《[提高点对点连接性](https://docs.prylabs.network/docs/prysm-usage/p2p-host-ip/)》，这对所有客户端来说都是一个好的建议。

Attestant的Jim McDonald继续更新其良心科普系列，发布了[《保护验证者密钥》](https://www.attestant.io/posts/protecting-validator-keys/)。

Jim还想出了一个方法来定义验证者的[证明效率](https://www.attestant.io/posts/defining-attestation-effectiveness/)。客户端将他们的证明（投票）打包进信标链的速度是衡量客户端性能的主要标准，因为这将影响验证者节点可以获得多少奖励。这是个非常有用的衡量标准，[beaconcha.in](http://beaconcha.in/)已经将其纳入到验证者概览界面。

Alon Muroch继续更新其关于BLS签名的系列文章，发布了[《配对的主要概念》](https://medium.com/@alonmuroch_65570/bls-signatures-part-2-key-concepts-of-pairings-27a8a9533d0c)。 Alon所在的公司Blox也在[为Eth2验证者开发Hashicorp vault插件](https://github.com/bloxapp/vault-plugin-secrets-eth2.0)。其他有趣的消息是，Ledger在最近的Nano-X更新中增加了[对BLS12-381曲线的支持](https://www.ledger.com/first-ever-firmware-update-coming-to-the-ledger-nano-x)。不知道这在实践中意味着什么，但请留意其进展！

##  

&lt;br/&gt;

# 研究工作

一个由[学生制作](https://twitter.com/krzhang/status/1288749117565308929)的视频，[分析了Eth2.0的托管证明游戏 (proof-of-custody game)](https://youtu.be/8Gsj5DXV-q0)。这是阶段1分片链规范中的重要组成部分。

##  

&lt;br/&gt;

# 常规会议

## 实现者会议

第45次会议于8月6日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/171)
- [会议视频](https://youtu.be/DVePZUQOyFk?t=184)
- 我的[速记](https://hackmd.io/@benjaminion/B1PSWKFbv)以及[Mamy的笔记](https://gist.github.com/mratsim/1985e83a37419fb6d33e2ba8a5fcf004)

我们对Medalla测试网的创世进行了回顾，并且围绕客户端是否需要以及如何相互识别进行了深入的讨论，还探讨了从同一个助记词中获得签名密钥和提款密钥的利弊。Justin向我们介绍了Secret Single Leader Election的一项突破，该突破可能会用到阶段1中，这令人非常兴奋。

##  

&lt;br/&gt;

# 其他新闻

**EDCON** (Community Ethereum Development Conference)于周日和周一举办。[周一围绕Eth2主题展开讨论](https://www.edcon.io/#maodianAgenda)，演讲者有Vitalik、Danny、 Hsiao-Wei、Aditya、Afri、来自Sigma Prime的Paul Hauner 以及来自Prysmatic Labs的Terence —— 都是些常见的嘉宾。我一定会尽我所能跟进这些消息。

- [PrysMatic Labs](https://medium.com/prysmatic-labs/eth-2-0-dev-update-55-medalla-testnet-7d03d828aaa8)客户端团队的更新。
- Bankless的Haseeb Qureshi发布了一篇有趣的文章，探讨了Eth2中的DeFi可能是什么样的：[城市、郊区还是农场](https://bankless.substack.com/p/defi-in-eth2-cities-suburbs-farms)。
- Bitfly发布了Eth2网络浏览器[Ethernodes](https://eth2.ethernodes.org/)。我暂时对它的准确性有所保留（居然没有Teku客户端！），但浏览器中显示我的家乡有两个节点，而我运行着其中一个。 因此，如果您也在英国雷丁附近，让我知道吧！

 &lt;br/&gt;

&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[信标链的创世]]></title><description><![CDATA[测试网Medalla创世后运行良好，本文全方位解读信标链创世。]]></description><link>https://www.ethereum.cn/genesis</link><guid isPermaLink="false">https://www.ethereum.cn/genesis</guid><pubDate>Wed, 05 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ben Edgington](https://hackmd.io/@benjaminion/genesis)

&lt;br/&gt;

人生中能见证庞大的、分布式的多客户端区块链创世的机会是非常难得的。不久前的7月30日是以太坊1.0区块链创世的五周年——真正重大的创世事件很罕见且相隔甚远。

至于以太坊2.0，[Medalla测试网](https://github.com/goerli/medalla)已经在8月4日上线，这很可能是我们今年下半年唯一一次在以太坊2.0发布前的正式彩排。

Eth2的创世机制说来有点复杂，创世是一个区块链系统为自身注入生命的过程。我将用浅显易懂的语言尽可能准确地讲解它。至于真正技术上的说明，读者可以在[Eth2 annotated spec](https://news.ethereum.cn/wp-admin/post.php?post=2149&amp;action=elementor#genesis)上看我的注释。

在下文，“创世事件”指代信标链启动并开始处理证明和区块的确切时间。也是slot 0 epoch 0开始的时间。

（如果读者想看速览的话，可以直接跳到后文“创世的两种情况”部分）

##  

&lt;br/&gt;

# 验证者存款

首先，读者需要知道的一点背景知识是验证者在加入Eth2前需要将存款存进Eth1区块链上的合约里。对于每个Eth2的验证者来说，他们需要将32个ETH和其他一些数据发送到合约。例如，读者可以通过[Launchpad](https://medalla.launchpad.ethereum.org/overview)网站发送存款和数据到Medalla测试网。请记住Medalla现在在用Goerli测试网的ETH！不要发送主网的ETH到合约。当然，到了真正的信标链发布的时候，我们会用主网的ETH。

接下来，我们只关心有效存款：不少于32个ETH的单笔存款，或属于同一个验证者的、总计不少于32个ETH的多笔存款，为此需要额外的数据验证（加密签名）。任何无效或不足的存款都将在创世中被忽略不计。

##  

&lt;br/&gt;

# 信标节点

在创世前，在Eth2链上活跃的只有信标节点；在创世后，验证者会马上活跃起来。信标节点维持着系统的状态，并在点对点的网络里相互通信。

因此，在创世前，有大量的信标节点关注着以太坊1.0区块链，留意着存款合约上的有效存款。他们不需要24小时留意，因为Eth1的区块都被打上时间戳，因此节点可以在创世前的任何时间跟进最新情况。

现在，大家都知道Eth1的区块可以回滚，且可以改变主意，决定哪些交易是有效的。这就是为什么你在交易所转入ETH时需要等待30个区块的时间。回滚的范围通常非常小——大约一到两个区块；但一旦遇到网络攻击，回滚的范围可以变很大。为了尽量避免在Eth2上出现这种情况，我们在同步Eth1链上数据时非常谨慎地保持[14](https://news.ethereum.cn/wp-admin/post.php?post=2149&amp;action=elementor#seconds_per_eth1_block) * [1024](https://news.ethereum.cn/wp-admin/post.php?post=2149&amp;action=elementor#eth1_follow_distance)秒的延迟，大概是4小时。我把这称为Eth1的同步距离 (Eth1 follow distance)。

##  

&lt;br/&gt;

# 什么时候？谁？

关于创世的两个问题“什么时候？”和“谁？”：什么时候开始，和谁会在创世块验证者大军里。这两个问题的答案定义着信标链的创世状态，所有其他的状态都由此衍生开来。

大致的过程如下：

1. 关注Eth1区块链上的存款情况
2. 当经历了足够长的时间和存款达到一定数量时，创建创世状态
3. 两天后，在创世时间启动区块链

在第2步，我们在寻找Eth1上第一个区块时需要特别注意两点：

- 是否有足够的存款；
- 时间是否太早。

符合这两个条件的第一个区块将被设为创世状态。

时间和角色受以下三个关键参数设置的影响。

- [MIN_GENESIS_TIME](https://news.ethereum.cn/genesis/#min_genesis_time)是创世事件可以发生的最早时间。对Medalla来说，就是[1596546000](https://news.ethereum.cn/genesis/#L8) Unix time——2020年8月4日UTC时间13：00：00，采用RFC2822规范。
- [GENESIS_DELAY](https://news.ethereum.cn/genesis/#genesis_delay)是[172800](https://news.ethereum.cn/wp-admin/post.php?post=2149&amp;action=elementor#L25)秒，48小时整。这是创建创世状态和区块链与创世事件启动之间的时间间隔。这段延迟是为了让客户端团队将创世状态写进他们的信标节点里，这样即使他们不运行验证者节点也不再需要关注Eth1的区块链。这也为举办一般的创世事件直播和聚会活动预留时间。😄
- [MIN_GENESIS_ACTIVE_VALIDATOR_COUNT](https://news.ethereum.cn/genesis/#min_genesis_active_validator_count)是在创建创世状态前我们在Eth1的存款合约里所需的最低有效验证者数量。在Medalla测试网（和主网），这个参数是[16384](https://news.ethereum.cn/wp-admin/post.php?post=2149&amp;action=elementor#L7)个验证者。

##  

&lt;br/&gt;

# 创世的两种情况

创世状态时基于满足以下两个条件的第一个Eth1区块：

创世状态所基于的第一个Eth1区块需要满足以下两个条件：

1. 至少有16384 (MIN_GENESIS_ACTIVE_VALIDATOR_COUNT) 个验证者已经在这个或之前的区块上进行了注册；以及
2. 它的时间戳不会太早（不早于MIN_GENESIS_TIME – GENESIS_DELAY这段时间）。

根据这两个要求得到满足的顺序，创世过程会以下面两种情况进行:

###  

## 1.存款数先得到满足

在这种情况下，条件1先得到满足。我们在最早创世时间前收到的足够的存款。

Medalla测试网在MIN_GENESIS_TIME – GENESIS_DELAY间的时间点是周日8月2日UTC 1300。

我们的启动区块是这个时间后挖到的第一个Eth1上的区块，也就是在13：00：05挖到的（1pm后的5秒）。

如果截止到该区块存款合约收到的有效存款达到或超过16384笔，那么至今收到的所有存款都会包含在创世状态里。因此，验证者数量可能会远超出16384（在Altona测试网上，我们将MIN_GENESIS_ACTIVE_VALIDATOR_COUNT设为640，但结果有685个创世验证者）

这个Eth1区块启动创世状态的运算，而Medalla的创世事件将在区块时间戳的48小时整后开始。在这个例子里，就是8月4日周二的13：00：05。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VDsxpxv/genesis-1-7175d28623.png&quot;/&gt;&lt;/center&gt;



&lt;center&gt;**红色区块是满足两个条件的第一个Eth1区块**&lt;/center&gt;

请注意，由于Eth同步距离，我们直到4小时后才真正知道创世状态。也就是说，在这种情况下，我们在8月2日周日UTC1700知道Medalla的创世状态。

### 总结

如果存款数额首先满足要求，那么创世事件会在最早创世时间后几秒启动。创世状态包含这个时间点48小时以前的所有注册了的验证者。

###  

## 2.时间戳满足条件早于存款数

这种情况在条件2先得到满足的时候发生。存款数增长缓慢，且没有在预定时间内达到最低有效数额。

在这种情况下，打包第16384笔存款的Eth1区块成为启动区块。我们假设这个区块是在8月5日周三UTC 12：34：56被挖到的。

现在，区块状态将包含16384个验证者和在那个区块里任何其他有效的存款。因此，如果那个区块包含多笔存款的话，那么将会有比最低存款数更多的验证者包含在内。

创世时间将会是该区块的时间戳加48小时。在这个例子里，就是8月7日周五UTC 12:34:56。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/0CJLVRz/genesis-2-72557e9e97.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;**红色的区块是满足两个要求的第一个Eth区块**&lt;/center&gt;

同样，由于Eth1同步距离，直到这个Eth1区块被挖出的4小时后我们才知道创世状态或创世时间。

### 总结

如果存款增长慢，在包含第16384笔存款的Eth1区块被挖出48小时，创世事件会启动。创世状态包含16834个验证者，加上在同一个Eth 1区块里的其他一些验证者。

##  

&lt;br/&gt;

# 结论

文章写到这里，大家是不是已经了解了信标链创世的基本情况？🙂

如果你没赶上Medalla创世状态的敲定，那么你的验证者将会按照存款时间顺序进入排队队伍，并在创世后被慢慢安排到验证者集里。排队可能会花上几个小时或几天的时间。

期待在Medalla上见到你们！🚀

&lt;br/&gt;

&lt;br/&gt;



声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#14]]></title><description><![CDATA[如果读者想知道创世时间是如何计算的，请阅读Ben Edgington对信标链创世的解释文章。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-14</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-14</guid><pubDate>Tue, 04 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/08/03/eth2-quick-update-no-14/)




&lt;br/&gt;

![以太坊周刊插图.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



所有目光都聚焦在多客户端测试网Medalla上面——还有不到24小时就创世了👀

（译者注：Medalla测试网的创世时间为北京时间8月4日晚上9点）

&lt;br/&gt;

# 要点速览

- [Medalla测试网](https://github.com/goerli/medalla/tree/master/medalla)于北京时间8月4日晚上9点启动
- 新的[多客户端攻击网](https://github.com/ethereum/public-attacknets/tree/master/attacknets/beta-1)已更新，将带来更难的挑战以及更丰富的赏金

##  &lt;br/&gt;

# Medalla测试网于明日启动🏅

上周五，启动Medalla的最低质押标准已达到（需要1.6万+的验证者），也就是说，Medalla的创世时间定为[Unix时间](https://en.wikipedia.org/wiki/Unix_time)1596546008，也就是UTC时间8月4日下午1点之后的8秒。如果读者想知道创世时间是如何计算的，请阅读Ben Edgington[对信标链创世的解释文章](https://hackmd.io/@benjaminion/genesis)。

![img](https://news.ethereum.cn/wp-content/uploads/2020/08/p2.jpg)

Medalla的发布是eth2开发征途上的一大重要里程碑——如果Mdella运行稳定，下一步将是主网发布。同时，Medalla测试网凝聚了多年来无数工程师、研发人员以及社区成员的努力心血。我们衷心希望大家能够像我们一样兴奋 :)。

请记住，Medalla测试网上成千上万的验证者是由每一位社区成员组成的。我们需要每一位成员将其视为主网启动的最后一次彩排——提前演练如何运行好节点；密切关注验证节点的表现；实时关注自己使用的客户端软件的任何重要更新。换句话说，需要每一位测试网质押者把质押的测试币当作是真的ETH。

###  &lt;br/&gt;

## 客户端多样性👯

将有5个客户端参与Medalla的创世!

- ConsenSys([discord](https://discord.gg/7hPv2T6))负责的[Teku](https://github.com/pegasyseng/teku)客户端
- Prysmatic Labs([discord](https://discord.gg/KSA7rPr))负责的[Prysm](https://github.com/prysmaticlabs/prysm/)客户端
- Status([discord](https://discord.gg/XRxWahP))负责的[Nimbus](https://github.com/status-im/nim-beacon-chain)客户端
- ChainSafe Systems([discord](https://discord.gg/aMxzVcr))负责的[Lodestar](https://github.com/ChainSafe/lodestar)客户端
- Sigma Prime([discord](https://discord.gg/cyAszAh))负责的[Lighthouse](https://github.com/sigp/lighthouse/)客户端

祝贺以上的团队！希望有使用以上的客户端运行节点的用户，不要忘了感谢客户端团队，如果能考虑打赏一些ETH或者DAI作为小费就更好了。他们得到的远远不止这些。

别忘了！ Medalla启动时，每一个客户端都有其独特的纪念勋章[POAP](https://www.poap.xyz/) NFT，使用任一客户端运行节点即可获得奖励。点击此处了解更多[详细信息](https://beaconcha.in/poap)🏅

##  &lt;br/&gt;

## 社区资源ethstaker

除了感谢eth2客户端团队所作的非凡工作之外，我还特别介绍ethstaker——它为羽翼未丰的验证者社区提供了蓬勃发展的用户驱动资源。这项工作以社区的形式运营，旨在通过[subreddit](https://www.reddit.com/r/ethstaker/)和[discord服务器](https://invite.gg/ethstaker)，给那些质押爱好者提供一个交流场所。

过去一周，我花了一些时间研究discord，在这里，用户可以共享信息，提出（并解答）技术问题，并且多数围绕新技术以及eth2的质押技术来讨论。如果读者参与了测试网Medalla的质押或有兴趣参与，请务必查看。

我希望ethstaker以及与客户端相关discords能够成为验证者紧跟验证相关内容更新重要渠道。

##  &lt;br/&gt;

## 攻击网mc-attack-0发布

最新的多客户端攻击网[mc-attack-0](https://github.com/ethereum/public-attacknets/tree/master/attacknets/beta-1/mc-attack-0)今日发布！

这种新的攻击网络属于[beta-1](https://github.com/ethereum/public-attacknets/tree/master/attacknets/beta-1)分类，将更新规则和提高赏金——发现关键漏洞，最高可获取1.5万美元的赏金。

自首个攻击网beta-0发布以来，我们已经颁布了以下奖励：

- Jonny Rhea对teku-attack-0执行了一个[简单的DOS攻击](https://github.com/ethereum/public-attacknets/issues/7)，获得5000美元的赏金，提醒了我们在JVM-libp2p上缺乏对DoS攻击的基本防御。
- 🏆💪🐒感谢Martin Swende[在Prysm SSZ解码上找到一个关键漏洞](https://github.com/ethereum/public-attacknets/issues/11)，该漏洞允许攻击者远程击溃prysm-attack-0上的节点（由于Martin为以太坊基金会安全部门上工作人员，因此没有颁发赏金）。
- 授予AlexSSD7 5000美元赏金，其在prysm-attack-0上执行了[L4 DDoS攻击](https://github.com/ethereum/public-attacknets/issues/9)，从而停止4-节点网络的最终确定工作。该攻击提醒我们注意时钟偏移器，因其阻止节点在被攻击之后实现自我修复。
- 授予1000美元赏金（荣誉奖）给Jonny Rhea，其[摧毁了lighthouse-attack-0上的发现机制](https://github.com/ethereum/public-attacknets/issues/4)。

最后，加入我们[以太坊研发Discord #攻击网 频道](https://discord.gg/hpFs23p)，以参与讨论以及获取参与攻击的信息。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Vitalik：Gitcoin Grants第六轮回顾]]></title><description><![CDATA[本轮总计捐赠和匹配金额超40万美元，日趋成熟的二次方融资又面临怎样的挑战？]]></description><link>https://www.ethereum.cn/gitcoin-grants-round-6</link><guid isPermaLink="false">https://www.ethereum.cn/gitcoin-grants-round-6</guid><pubDate>Mon, 03 Aug 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Vitalik Buterin’s website](https://vitalik.ca/general/2020/07/21/round6.html)

&lt;br/&gt;

Gitcoin Grants第六轮已经结束，总计**695个项目**接收到来自**1,526位捐赠者**的**227,847美元**以及**175,000美元**的匹配金额。本轮的参与项目主要分为三个类型：常规类型包括技术和社区 (更名自“媒体”以覆盖更大范围)，以及第六轮的特殊类别Crypto For Black Lives。

以下是本轮Grants的结果，我们先来看看技术和社区项目的收获：









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/9gS21ds/git1-77a6d35072.jpg&quot; /&gt;&lt;/center&gt;&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ngMVZkw/git2-a90f16a4e9.jpg&quot; /&gt;&lt;/center&gt;






## &lt;br/&gt;

# 收入稳定性

在上一轮中，我提出的一[个顾虑](https://vitalik.ca/general/2020/04/30/round5.html)就是**获赠方如何维持稳定的收入**。试图通过二次方融资维持生计的参与者希望在收入稳定性方面得到一定保障，即他们不会因为捐赠者们突然集体“移情别恋”而在下一轮捐赠中颗粒无收。

第六轮采用了两种机制，尝试为获赠方提供稳定收入：

1. 添加“购物车”界面，能够同时进行多笔捐赠，其中附带显眼的“重复上一轮捐赠”功能
2. 增加一条规则，匹配金额不仅仅以该轮所获得的赠款来计算，而会“结转”上一轮赠款的1/3。(假如你上一轮捐赠了10美元，那么匹配计算公式就会假设你在上一轮中捐赠10美元并且将在本轮捐赠33美元)

很显然，第一点成功达成了增加捐赠总量的目标，但很难去衡量其是否保障了获赠方的收入稳定性。而第二点则比较容易衡量，因为我们能看到实际的匹配金额数据，也能看到结转1/3之前的匹配金额本应是多少。

技术类别：








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/x7fBwRf/git3-5f3c0397f1.png&quot; /&gt;&lt;/center&gt;




社区类别：







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Jdk94ZX/git4-20466d8e6f.png&quot; /&gt;&lt;/center&gt;





很显然，与我们预想得差不多，规则有助于减弱波动性。尽管如此，也会有人反驳说这个结果微不足道：也会有人说这与从第N轮中获得部分收益然后将其转移至N+1轮没有什么区别 (例如新的EIP-1559社区基金获得的捐赠比预期要少)。当然，从数字上来看，收入确实更加“稳定”，但是项目可以通过每轮2/3的收入来为自己提供稳定性，继而在之后收入陡降时能够使用剩余的1/3。既然项目有能力为自己提供稳定性，为什么二次方融资 (quadratic funding) 机制为什么还要煞费苦心提升设计复杂性来为项目提供稳定性？

我的直觉是可能在下一轮中沿用“重复上一轮捐赠”，然后停用1/3结转功能，看看结果如何。数据显示，即使没有结转功能，媒体分类也能维持足够的稳定性。而技术部分波动性较大，仅仅是因为EIP 1559社区基金的突然加入；弄清楚这种情况的普适性也是试验的一部分。

## &lt;br/&gt;

# EIP 1559社区基金

本轮中一大出乎意料的赢家当属EIP 1559社区基金。**EIP 1559 ([EIP提案](https://github.com/ethereum/EIPs/issues/1559)/[FAQ](https://notes.ethereum.org/Wjr1SnW-QaST7phX9C5wkg?view)/[原始论文](https://ethresear.ch/t/draft-position-paper-on-resource-pricing/2838)) 是一个重要且意义深远的费用市场改革提案**，旨在提升用户在以太坊上的交易体验、提高经济效率、提供协议内gas费预言机并且销毁部分手续费。

这个提案令许多以太坊社区成员感到激动，而现状是目前用于实现该提案的资金非常之少。这个Gitcoin grant就是社区为解决这个问题所作出的努力。

这项grant收获了一些大额赠款，包括我和Eric Conner各自捐出的2400美元。在本轮的早期，很明显能看出EIP 1559社区基金匹配额和捐赠额的比例异常之低，2万美元的赠款约匹配到4千美元资金。这是因为由于个人捐赠数额越大，说明赠款来自于少数富有的捐赠者，因此匹配资金会少于同等捐赠数量但来自更多捐赠者的项目，这是二次方融资公式的设定。

## &lt;br/&gt;

# 二次方“信号”

出人意料的是，EIP 1559 grant起到了一举两得的作用。首先，EIP 1559获得了实现所需的65473美元资金。其次，**这为社区释放了一个可靠信号：**我们对于EIP 1559的需求程度究竟如何。[长久以来](https://vitalik.ca/general/2017/12/17/voting.html)，以太坊社区都没有探索到一个有效的方式来判断“社区”的需求，尤其是在面临争议的时候。

虽然[存在](https://www.etherchain.org/coinvote)代币投票这种方式，好处在于能够判断谁是“真正的社区成员”，但缺点是你在以太坊社区中的权重取决于你持有多少ETH。这是一种富人治理形式，在津津乐道的DAO代币投票中，一个持有更多ETH的成员其投票权重高于所有对立方投票者的总和 (约占20%)。






&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/k8VgZ7s/git5-78f911fc07.png&quot; /&gt;&lt;/center&gt;





另一种形式则是github、reddit和twitter的评论的和投票 (也被称谑称为“proof of social media”社交媒体证明)，这种形式虽然较为平等，但是极易操纵，没有办法证明社区成员的身份，并且经常受到“外围干涉”的诟病 (那些表示反对的用户究竟是真正的以太坊成员还是只是来搅局的bitcoiners?)。

**二次方融资则恰到好处地取长补短**：投票需要投入一定资本，这就确保了项目的真实拥护者的投票权重高于路人，而平方根公式则确保了个别超级富豪“巨鲸”无法压倒资本较少但更为广泛的联盟。






&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dcG26Qr/git6-81e3f56541.png&quot; /&gt;&lt;/center&gt;





这也向我们抛出了一个问题：在评断社区对于以太坊协议提案的情绪时，直接使用二次方投票 (quadratic voting) 机制 (能有对提案投出赞成或反对票) 是否有意义？

###   &lt;br/&gt;

# “临时类别”的表现

自第五轮以来，Gitcoin Gratns每轮都设置了三个种类：技术、社区 (更名自媒体分类) 以及一些仅适用于当轮的临时类别 (guest categories)。第五轮的临时类别是COVID relief，第六轮为Crypto For Black Lives。






&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Qmfjzw2/git7-d50a6f0369.jpg&quot; /&gt;&lt;/center&gt;

获赠最多的是Black Girls CODE，收获了匹配池中超80%的金额。我认为其原因很简单：Black Girls CODE已经持续参与了几轮融资，存在感相比其他新进项目都要强，并且为更多的以太坊社区成员所熟知。另外，比起商业和融资，以太坊社区更“理解”帮助人们编程的重要性。

对此有一个问题是，Gitcoin当前在每轮设置一个临时分类的方式是否发挥了作用？如果答案是“没有”的话，那原因大概是：设置这些类别的初衷是非常令人钦佩的 (助力黑人社区、抗击COVID疫情)，但总的来说以太坊社区并不是这些议题的专家，我们当然也不是致力于解决这些挑战的项目的专业人士。

如果我们的目标是将二次方融资引入以太坊之外的领域，那么最合适的替代方案是设立针对这些社区的单独融资轮，https://downtownstimulus.com/ 就是一个很好的例子。如果目标是引发以太坊社区对这些议题的关注，那么可能持续多轮会起到更大的作用。比如说“临时类别”可以持续三轮 (约六个月)，每轮8333美元的匹配资金 (同时可能会同时设立2-3个临时类别)。无论如何，我们需要对这个模型进行优化设计。

##   &lt;br/&gt;

# 合谋

现在我们要来看看本轮不光彩的地方了。**在本轮中出现了前所未有的蓄意合谋以及其他形式的欺诈**。以下是极度离谱的一些例子：

明目张胆的贿赂行为：







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GTrWVLq/git8-65672295de.jpg&quot; /&gt;&lt;/center&gt;







冒名申请：








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Vq832fg/git9-d502a4a3e5.png&quot; /&gt;&lt;/center&gt;






多笔捐款明显来自同一个地址：






&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/09f2fq2/git10-a5b16387d9.png&quot; /&gt;&lt;/center&gt;






最大的问题在于，在不需要对每个项目进行逐例分析的情况下，通过全自动或是技术方式能够预防多少欺诈活动？如果二次方融资必须要进行成本高昂的逐项审查才能防止欺诈，那么无论在理想世界中它能带来多少益处，在现实世界中也称不上是一个很好的机制。

所幸的是，我们还是可以采取许多潜在措施来减少恶意合谋和欺诈行径。例如**加强身份认证系统**。在本轮中，Gitcoin增加了非强制性SMS验证，而本轮被揭露的合谋案例都是通过github认证账号产生的 (而并非SMS认证账号)。在下一轮中，增加除了github之外的验证方式 (SMS验证或是其他更去中心化的形式，例如BrightID) 是可行的。针对贿赂方面，[MACI](https://github.com/appliedzkp/maci)能够有一定的遏制作用，这使得行贿者无法得知某个项目的真实捐赠者。

冒名申请不仅仅是二次方融资面临的挑战，而这可以通过手动验证来解决。如果青睐更去中心化的解决方案，那么可以试试[Kleros](https://kleros.io/)这类系统。我们甚至都可以想象到其激励机制：每个人都可以存入一笔押金，然后将某个项目标记为欺诈，从而引发调查；如果该项目被证明是正当的，那么举报者就会失去押金，如果项目确实存在欺诈行为，那么举报者就能获得该项目所收到的一半资金。

##  &lt;br/&gt; 

# 结语

我们还没提到本轮展露出的向好迹象：许多二次方融资中的积极行为已经稳定下来。**我们看到有价值的技术和社区项目获得了融资；与之前几轮相比，本轮社交媒体板块的争议有所缓和；人们也越来越了解二次方融资的机制和参与方式。**

也就是说，目前该机制向我们暴露出了多种弱点和挑战，而我们也会在未来的发展中实际面临这些问题。目前还有一些挑战尚待解决，我个人尤其关注的问题是**社区对于匹配资金流向的争议**。总的来说，二次方融资发展至今遇到的问题比我预计得要少。

在接下来的几轮中，我建议大家对**安全性和扩容性方面**保持稳定关注，并寻求扩大匹配资金池规模的方式。我仍然非常期待看到有意义的公共产品获得支持！

  &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[五周年总结：以太坊网络发展历程]]></title><description><![CDATA[回顾以太坊生态首个五年升级互联网的征程。]]></description><link>https://www.ethereum.cn/the-state-of-the-ethereum-network-2020</link><guid isPermaLink="false">https://www.ethereum.cn/the-state-of-the-ethereum-network-2020</guid><pubDate>Fri, 31 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://consensys.net/blog/news/the-state-of-the-ethereum-network-2020/?utm_campaign=Ethereum)



&lt;br/&gt;


![五年总结.jpg](https://i.ibb.co/G3rjnDK/3253d0f779.jpg)

&lt;br/&gt;



**达到重大成就需要经历以下7步：**

1. **默默无闻**
2. **开始出现在人们的视野里，但却被认为一派胡言**
3. **人们开始了解你的产品，但看不到其发展潜能**
4. **只把你的产品当作玩具**
5. **人们把它看作神奇的玩具**
6. **人们开始使用**
7. **人们无法想象没有这个产品的生活**

**当你开始改变世界，人们却不以为意——Morgan Housel**

 &lt;br/&gt;

# 默默无闻

以太坊是当前世界上开发最活跃，交易最多的区块链网络。但是在五年前的今天，当创世区块面世并且以太坊网络正式启动时，软件工程界以外的人几乎没有听说过以太坊区块链。

&lt;br/&gt;

## 以太坊：比特币+一切

2015年，高盛（Goldman Sachs）发布了一份具有里程碑意义的报告[《如果我告诉你区块链会颠覆一切传统》](https://www.goldmansachs.com/insights/pages/macroeconomic-insights-folder/what-if-i-told-you/report.pdf)，其中以太坊被视为“行业先锋”。 在其他地方，它被称为“团体”。人们曾试图了解它到底是什么，以及到底是什么使其区别于作为数字现金系统的比特币。ConsenSys花费了大量时间，并且愿意一直投入时间去研究以及解释他们之间的差异。这些差异值得不断地强调：

- 比特币是区块链技术的单一应用。
- 区块链有许多种类型，不同类型之间的属性有很大的差异。
- 以太坊是其中一种区块链。
- 以太坊是开源的，因此由所有人共有。

如果读者朋友们想知道区块链对人类网络的未来和权力分配有何重要意义，我十分建议大家阅读一下推特博主Naval Ravikant发起的[讨论](https://twitter.com/naval/status/877467629308395521)。

&lt;br/&gt;

## 开发者的区块链

以太坊区块链基于以下五项设计原则构建，Vitalik Buterin在[以太坊白皮书](https://ethereum.org/en/whitepaper/)中做了概述：

- 简洁性
- 普适性
- 模块性
- 灵活性
- 公平性以及去审查性

如果有人要求您充分应用这些原则，制造一台机器，那么以太坊将是您的最佳选择。

在[《精通以太坊》](https://github.com/ethereumbook/ethereumbook)这本书中，Andreas Antonopoulos和Gavin Wood将以太坊称为“开发者的区块链，由开发者构建，为开发者服务”。开发者通常倾向于使用开源的、可用性强的、可编程和功能强大的软件。成千上万的开发者首选使用以太坊，因为以太坊的源代码是免费的，开发者可以在其他人的基础上构建网络；并且智能合约会统一标准化和模板化，当开发者锁定合约以及接入不同的数据源之后，将会拥有无限的可能性。









![五年1.png](https://i.ibb.co/QnD7Qj3/1-9bd3b72f0e.png)
&lt;center&gt;以太坊网络上的去中心化应用每月发布数量&lt;/center&gt;

[State of the Dapps](https://www.stateofthedapps.com/)为以太坊生态系统提供了调查服务，研究了dapp合约的发展以及对GitHub库里的数据进行导出和调查，向大家揭露了以太坊幕后的开发狂潮。《纽约时报》发表*[Beyond the Bitcoin Bubble](https://www.nytimes.com/2018/01/16/magazine/beyond-the-bitcoin-bubble.html)（*《超越比特币泡沫》之后，人们似乎终于开始关注以太坊了。比特币只是区块链冰山的一角，而世界其他地区跟上这股开发潮流只是时间问题。

 &lt;br/&gt;

# 人们认为以太坊是一派胡言

## DAO攻击

2016年，the DAO攻击事件及其紧随其后的硬分叉引起了所有人的注意。有人说以太坊实在太疯狂了。而新闻界则[评论](https://www.wired.com/2016/06/50-million-hack-just-showed-dao-human/)，对于此类系统的可行性，该事件“引起了一系列哲学问题的讨论”。

然而开发者们表示，“这是一段旅程中的仪式”。

那之后，社区开始记录已知的攻击和对[智能合约库](https://openzeppelin.com/contracts/)进行战争测试（battle-testing）。尽管多年来[安全事件](https://magoo.github.io/Blockchain-Graveyard/)依然不断发生，但去中心化自治组织现已成为以太坊生态系统的主要组成部分（比如Aragon, Moloch DAO, Legal DAO, Maker DAO），而历史经验证明，硬分叉是升级网络协议的一有效模式。

&lt;br/&gt;

## 正和思想

想想以太坊生态系统中还有什么曾被认为“疯狂”的点子：

- 在公共网络上运营的企业
- 不同的区块链共同工作

像Ernst &amp; Young这样拥有百年历史的公司，现在正在使用“[零知识证明](https://consensys.net/blog/blockchain-development/introduction-to-zk-snarks/)”技术在以太坊公共网络上开发关于私人交易的解决方案。他们正在与其他组织的团队合作，推动[Baseline Protocol](https://consensys.net/blog/press-release/ey-and-consensys-announce-formation-of-baseline-protocol-initiative-to-make-ethereum-mainnet-safe-and-effective-for-enterprises/)计划的发展，并帮助企业在主网上线。

以太坊和Hyperledger曾是分布式账本技术(DLT)领域的两大竞争对手，然而他们现在已经通过Besu，Burrow和Sawtooth实现完全整合。甚至Fabric也支持以太坊智能合约。

加密货币初期的代表思想Maximalism激进主义（即单一区块链管理模式），已逐渐消失，取而代之的是具有互操作性的区块链协议。在过去的几个月中，[WBTC](https://consensys.net/blog/news/new-ethereum-defi-report-wrapped-bitcoin-eth-insurance-yield-farming/)大幅增长。WBTC是指以太坊上以ERC-20实现的代币化比特币，使得比特币持有者能够参与比特币网络上没有的DeFi协议。

关键是，早期区块链参与者所支持的正和思想（positive sum thinking）曾经看起来十分牵强，且在技术上是不可能实现的，然而现在逐渐成为现实。引用Jeff Bezos的一句话，“新的发明需经受得住人们长期的误解。”

 &lt;br/&gt;

# 人们明白以太坊但是……

## ICO热潮

2018年初，区块链和以太坊社区仍受2017年发生在加密领域的冲击事件所影响。由于大量的投机机遇以及前所未有的ERC-20代币的发行，2017年的ICO热潮开启了以太坊历史上最繁华的一次牛市。此次热潮直接向我们展示了以区块链技术为核心的网络效应机遇所带来的力量。但是，许多国家（中国、韩国、摩洛哥、哥伦比亚、新加坡以及其他国家）严厉禁止其公民参与比特币、以太币和其他加密资产的交易。

当加密货币的冬天降临，ETH的价格不再是光辉时代的一千美元以上时，加密货币行业开始重新看待过去一年中的ICO热潮，并考虑ICO热遗留下来的问题。据《财富》杂志报道，到2月，[将近50％的ICO项目已经失败](https://fortune.com/2018/02/25/cryptocurrency-ico-collapse/)。The Verge发表了一份发人深省的报告，内容涉及加密领域牛市之后[许多韩国千禧一代的心理健康状况和绝望情绪](https://www.theverge.com/2018/4/3/17192886/bitcoin-cryptocurrency-south-korea-millennials)。











![五年2.png](https://i.ibb.co/RS4GKdB/2-38d4810d62.png)
&lt;center&gt;以太坊上的ERC-20代币合约的发行&lt;/center&gt;

如今，以太坊网络上已有超过16万个ERC-20代币合约。其中许多是在2018年初ICO热潮高峰期间创建的。在今年的过去几个月里，ERC-20代币的发行开始朝着相似的水平增长，但并没有像我们在2017年末和2018年初经历的价格波动。

&lt;br/&gt;

## “以太坊的对手们”

ICO热以及其所带来的余温为一系列新的可编程区块链提供了丰富的土壤，其中许多将其技术定位为以太坊的替代品。众多以太坊的对手中，最引人注目的是EOS，该公司于2017年发布了白皮书。

这些在ICO热潮之后出现的新区块链，在其市场营销过程中，主要针对如何解决以太坊的缺点：扩容性，隐私性，用户体验和实用性。这些缺点中有一些是可以察觉的，有些是真实存在的，而有些是夸大的。

总而言之，以太坊ICO热潮及其所带来的一系列新产品在技术上已有深刻的了解，但他们仍在探索引人注目的用例和机遇。尽管此前的加密货币热潮以及其后来的冰河时期带来了许多问题，但不幸中的万幸是，这促使我们关注除价格和交易量之外更低水平的、也许更加具有揭示性的区块链指标：智能合约的部署、去中心化程度和风险程度。

 &lt;br/&gt;

# 人们觉得它是玩具

## 接入点和NFT

随着以太坊社区制定像[ERC-721](https://eips.ethereum.org/EIPS/eip-721)这样的新代币标准，游戏和艺术成为与底层区块链技术的有趣的接入点。这是有道理的：游戏有其内建的微观经济学和收藏品，通过哈希函数在区块链中展现的数字艺术品很容易实现货币化以及确权。像诸如[SuperRare](https://superrare.co/)的市场是为数字艺术品而产生的。人们称之为“品味证明（proof of taste）”。

&lt;br/&gt;

## 加密猫

最初在以太坊网络引起轰动的是一个不起眼的DApp，名为CryptoKitties，这是一个数字小猫交易游戏，看起来像Neopets（一种网络宠物游戏）和期货交易的结合。2017年12月，随着CryptoKitties的价格飙升至六位数，网络总请求量增加了一倍以上。由MetaMask、Infura、Grid +和Axiom Zen的[开发人员组成的工作团队](https://consensys.net/blog/news/the-inside-story-of-the-cryptokitties-congestion-crisis/)共同优化了用户体验，并探索了长期扩容解决方案以缓解网络拥堵。并且在协作过程中，他们认识到以太坊协议开发的深刻意义。 正如来自Grid +的Alex Miller指出的那样：“每个持有ETH的人都受其激励机制的驱动，共同推动以太坊系统发展。”

每日活跃用户的与用户账户的增长模式类似。在过去五年中，2018年1月16日是每日活跃用户最多的一天，主网上有723,085个唯一地址进行交互。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/qCvKPHF/3-f407916ee0.png&quot; /&gt;&lt;/center&gt;


每日活跃用户的与用户账户的增长模式类似。在过去五年中，2018年1月16日是每日活跃用户最多的一天，主网上有723,085个唯一地址进行交互。

人们还意识到，游戏玩家和艺术家都是直接从[以太坊钱包](https://metamask.io/)中经营业务。开发者已经解锁了新的经济模型。他们将金融带到了游戏中——现在是时候看看他们是否可以将金融游戏化了。

 &lt;br/&gt;

# 人们觉得它是神奇的玩具

## DeFi的崛起

有种说法是所有以太坊上的应用都是[去中心化金融（DeFi）](https://consensys.net/blockchain-use-cases/decentralized-finance/)。因为其核心是：区块链由网络矿工不断花费资源来维持，以获得去中心化货币的奖励。之后这些积攒的货币开始流通，被售卖给他人，并且进入生态系统。

然而，随着2017年年末MakerDao发行代币DAI给金融领域带来重大影响，在更多的人看来，DeFi是有机会取代当今传统金融体系的一套相互关联的协议。[MakerDao](https://makerdao.com/en/)把ETH锁在智能合约里，置换出稳定币DAI作为抵押。自那以后，以太坊的DeFi生态开始稳步发展，很大程度上仍然由MakerDao主导。






![五年4.png](https://i.ibb.co/tCkxcB8/4-591b6b27da.png)

&lt;center&gt;锁在DeFi协议里的ETH和WETH总量&lt;/center&gt;

2019是[DeFi之年](https://consensys.net/blog/news/2019-was-the-year-of-defi-and-why-2020-will-be-too/)，但其影响仍然主要局限于社区里对DeFi技术熟悉的生态工作者。虽然有[很多公司](https://consensys.net/blog/news/the-100-projects-pioneering-decentralized-finance/)在架构DeFi协议，但除了最熟练的DeFi用户，总体来说用户体验并不成熟，且功能仍然相当有限。

在2019年初，DeFi生态在很多方面都像是一个沙盒，以太坊爱好者在上面对这些开放的协议做路测，证明去中心化金融是可行的。经过2018年的熊市后，对于是将ETH用于投资还是一直持有等待另一个牛市，ETH持有者可能会更加谨慎。

&lt;br/&gt;

## 金融基元与资本乐高

金融基元指的是去中心化金融的基础功能和技术，从而我们能将两者结合或在它们的基础上创造出更加复杂或特定的应用。这些金融基元和在其上构建的应用的关系用一个通俗的比喻来说就好像乐高积木。资本乐高层层相叠，这样形成了一个相互交织、相互连接的金融架构，这种金融体系强大且可自定义。

这些资本乐高发展到2019年年末已形成群聚效应，在2020年DeFi的地位已经从“神奇的玩具”演变为重新想象我们的金融基础架构的关键工具的早期。

 &lt;br/&gt;

# 人们逐渐开始使用以太坊

## 软件侵蚀金融

五年前，“[将全球GDP中的15万亿美元转移到开源可编程的区块链上](https://www.coindesk.com/software-ate-the-world-heres-how-it-eats-finance)”会让人觉得匪夷所思。但现在，这似乎是使全球金融系统走向更快、更强韧、更透明和从根本上可信任的方向的唯一道路。有前瞻性的企业跟随开发者的步伐并从几年前开始对以太坊投资至今。我们从2015年开始与微软的合作，是我们通过“[Ethereum Blockchain as a Service on Azure](https://news.ethereum.cn/the-state-of-the-ethereum-network-2020/#:~:text=&quot;)”计划帮助企业采用区块链技术的最早尝试之一。[企业以太坊联盟（EEA）](https://news.ethereum.cn/wp-admin/post.php?post=2084&amp;action=elementor#:~:text=&quot;)和[Hyperledger](https://www.hyperledger.org/)也已经成为大型机构在上面积极协作、审查部署选项、制定通用企业标准的宝贵平台了。

&lt;br/&gt;

## 大量企业和机构加入

那么，使用以太坊的主要参与者有谁呢？这是一长串的清单：[贸易金融巨头](https://consensys.net/blockchain-use-cases/finance/komgo/)、[农业技术巨头](https://consensys.net/blog/press-release/covantis-initiative-announces-technology-partner-consensys/)、今年[福布斯区块链五十个项目](https://news.ethereum.cn/wp-admin/post.php?post=2084&amp;action=elementor#50debce57553)中有32个建在以太坊上。现在，大集团正朝向以太坊高歌勇进。每年处理大约价值2千万美元交易的美国证券托管结算公司最近宣布了一个[基于以太坊的数字资产管理原型](https://consensys.net/blog/enterprise-blockchain/major-financial-clearinghouse-is-exploring-ethereum-for-digital-asset-management/)。

新的倡议不断涌现。欧盟区块链观测台与论坛在上个月的[最终报告](https://consensys.net/blog/enterprise-blockchain/blockchain-in-europe-learnings-from-the-eu-blockchain-observatory-and-forum/)里分享了一幅多源区块链倡议地图，该地图包含全球700多个倡议。






![五年5.png](https://i.ibb.co/m5D9B58/5-20e08ae179.png)

&lt;center&gt;欧盟区块链观测台与论坛的全球区块链倡议地图&lt;/center&gt;

这些项目里有些还是非常具有探索性的。例如，拥有300年历史的中央银行不会一夜间就采用基于区块链的支付系统。但根据国际清算银行[最近的一份报告](https://www.bis.org/publ/bppdf/bispap107.pdf)，有80%的这种传统机构正积极的研究[中央银行数字货币（CBDC）](https://consensys.net/solutions/payments-and-money/cbdc)。这些机构意识到在一个拥有超级应用、捆绑式服务和数字经济日益发展的世界里，以太坊不只是他们彼此开展更大业务所需的基础架构，还是他们为21世纪客户提供服务的生命线。

&lt;br/&gt;

## 开源的以太坊

从一开始，ConsenSys的使命就是构建足够多的基础架构和工具，以使世界的其他人能够和我们一起建构一个新的信任基础架构。我们经常将这个过程比作在飞行中建造火箭飞船。代价非常高，且现在一旦开始就无法停止。

在过去的一年里，我们一直努力将我们的产品整合到一个完整的堆栈，使以太坊的开源程度比以往任何时候都更高——无论你是需要API访问节点架构的dapp开发团队，还是准备优化业务流程和数字化金融工具的金融机构都能受惠于我们的产品。随着像[SKALE Network](https://consensys.net/blog/press-release/skale-token-to-launch-on-consensys-codefi-activate-on-august-17th-2020/)这样的layer2解决方案逐渐成形以及[以太坊2.0](https://consensys.net/blog/blockchain-explained/what-is-ethereum-2/)即将上线，我们很高兴看到可用性和网络性能有新的发展和改善，为开发者、企业和下一波超级用户打开可能性。

 &lt;br/&gt;

# 人们无法想象没有以太坊的生活

这篇关于以太坊重大突破七步曲的章节现在仍在书写，并在未来几年徐徐但坚定地展开。这种规模的创新通常无法以季度甚至年为单位来衡量。但是，我们可以想象，一些用户和一些主要机构已经无法想象没有以太坊的生活了。

感谢在过去五年里整个生态所有人的支持、热情和不懈的工作。升级我们的全球架构不是一件简单的事，但是一项非常值得且有深远影响的工作。我们迫不及待想看看这个网络在未来五年内是什么样的。

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/7/25）]]></title><description><![CDATA[“官方”多客户端信标链测试网Medalla即将上线，将使用0.12.2版本规范。]]></description><link>https://www.ethereum.cn/wnie2-2020-7-25</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-7-25</guid><pubDate>Mon, 27 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200725)



##  

&lt;br/&gt;

# 必读好文

这一期很难挑选，有太多精彩的文章了。比如以下两篇：

1. 以太坊基金会博文：Eth2进展速览#13 – Danny Ryan
2. Tanner Hoban及Tom Borgers：以太坊2.0经济学分析报告。以及[总结性文章](https://medium.com/@thomasborgers/ethereum-2-0-economic-review-1fc4a9b8c2d9)。

##  

&lt;br/&gt;

# 阶段0：信标链

## 规范

0.12.2规范版本已经发布。这个版本能够做到100%向后兼容，并且不会破坏0.12.1版本。大多是说明类以及网络方面的改进。在Medalla测试网中,我们将使用0.12.2版本规范。

## 审计工作

客户端最近迎来了一系列安全性评估，以下是现状概览。

Lighthouse客户端团队的安全性审核已经于[六月初](https://lighthouse.sigmaprime.io/update-26.html)由Trail of Bits完成，但报告还没有出炉。第二次审核预计将于信标链发布前进行。

Prysm安全性评估由Quantstamp于[最近完成](https://medium.com/prysmatic-labs/quantstamp-security-audit-results-for-the-prysm-eth2-client-7f949c6c866f)，其[结果](https://www.dropbox.com/s/qwb2upe7nsruanz/Prysm - Report.pdf?dl=0)以一系列[Github issue](https://github.com/prysmaticlabs/prysm/issues/6327)的形式呈现。同样地，Prysm团队也计划于信标链发布前夕进行第二次审核。

Nimbus客户端团队于最近[开始了](https://our.status.im/nimbus-beacon-chain-assessment-kickoff/)安全性审核工作，当前仍在进行中。预计耗时三个月以进行从头至尾的审核，另一个不寻常之处在于将由不同的团队对代码库中的不同部分进行审核，分别是ConsenSys Diligence、NCC Group以及Trail of Bits。相关情况会[在Github上进行发布](https://github.com/status-im/nim-beacon-chain/labels/nbc-audit-2020-0 :passport_control:)。

至于Teku，我们上周早些时候发布了[一个针对安全性评估的RFP](https://consensys.net/blog/blockchain-development/teku-ethereum-2-0-client-request-for-proposals/)。如果有审计方感兴趣，我们非常希望收到你们的消息！该RFP将于8月3日截止。

最后，当客户端团队进行审计工作时，Runtime Verification也针对Gasper完成了[形式化验证](https://runtimeverification.com/blog/formally-verifying-finality-in-gasper-the-core-of-the-beacon-chain/)，Gasper是LMD GHOST和Casper的组合名称，这是将在eth2信标链中应用的共识机制。

## 工具

Sigma Prime已经发布了[社区可用的模糊测试工具](https://blog.sigmaprime.io/beacon-fuzz-06.html)！大家现在可以在自己设备上的Docker容器中对不同的Eth2客户端进行模糊测试了。这种方式使得我们可以将更多资源投入到工作中。我已经在运用这个工具[为Teku进行测试](https://twitter.com/benjaminion_xyz/status/1283717334985826304)了。大家可以加入Sigma Prime的[Discord频道](https://discord.com/invite/AkPb4vx)进行讨论！

[Eth2Stats](https://eth2stats.io/)是一个非常棒的信息来源，但需要一定的维护工作。因此，Alex Tudorache (ConsenSys Codefi Staking) 已经对其服务器和控制板组件进行了[开源](https://github.com/ConsenSys/eth2stats-server)，如此一来大家都可以运行自己的版本，甚至是加入开发工作。

来自ConsenSys的更多好消息：Infura创建了[eth2-comply](https://github.com/INFURA/eth2-comply)，这是一个“用于以太坊2.0 API一致性测试的无代码平台”。客户端和其他团队可以借助该平台了解他们在[信标链新API标准实现方面](https://github.com/ethereum/eth2.0-APIs)的忠实程度。

##  

&lt;br/&gt;

# 测试网

## Medalla

🥳本周头条🥳：官方”多客户端信标链测试网Medalla即将上线！

Medalla这个名字的灵感来源于布宜诺斯艾利斯的Medalla Milagrosa地铁站，但只取了第一个单词，意为“[medal](https://github.com/goerli/medalla#why-do-you-call-it-medalla)”。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Xsb780y/7-25-3b646d4568.png&quot;/&gt;&lt;/center&gt;





根据[Danny的说法](https://blog.ethereum.org/2020/07/23/eth2-quick-update-no-13/)，Medalla会是一个公开的信标链网络，鼓励大范围的参与。该测试网会在最大程度上接近主网规范 (当然最明显也最重要的区别就是参与测试网是免费的，只需要质押ETH测试币)。此处是关于Medalla的[FAQ](https://github.com/goerli/medalla#ethereum-20-multi-client-testnets)以及部分测试网历史。

为了鼓励大家广泛参与，并且为了试运行真实信标链环境中的部分组件，[存款Launchpad](https://medium.com/deep-work-studio/eth2-deposit-launchpad-an-interface-for-the-first-world-computer-3e089138b264)也会在测试网中投入使用。其能够帮助大家参与测试网，并且降低质押难度。此处是Launchpad的[源代码](https://github.com/ethereum/eth2.0-deposit)。Launchpad门户可能会在7月27日 (周一) 进行部署。

对于主网来说，需要至少16384名验证者才能激活信标链。假设在UTC时间8月2日13:00前存款达到下限，那么网络就能在UTC时间8月4日13:00启动。大家如果想要成为创世验证者的一员，那么请在8月2日之前准备好存款！

[POAP](https://www.poap.xyz/) (Proof of Attendance Protocol)、[*beaconcha.in*](https://beaconcha.in/)和[*r/ethstaker*](https://www.reddit.com/r/ethstaker/)的小伙伴们将组队为Medalla的初期参与者提供独一无二的POAP NFT勋章。届时将会产生[五类勋章](https://twitter.com/etherchain_org/status/1286673742999859200)，分别代表五个可能参与运行Medalla网络的客户端。其初衷是鼓励参与者们运行多样化的客户端，并且收集整套勋章！

## Altona与Onyx

当前运行中的Altona多客户端测试网 (开发者网络) 和Onyx (Prysm的大型测试网) 没有太多新消息。但总的来说它们一直在平稳运行。Medalla上线后，这两个测试网都会停止运行。

## 攻击网

上周的另一条重大新闻当属公共[攻击网](https://github.com/ethresearch/public-attacknets)的上线，包括三个客户端Prysm、Lighthouse以及Teku。攻击网由以太坊基金会负责运行，独立于客户端团队之外。起初，攻击网规模较小并且难度较低，但计划是之后会提升难度并且重点关注某些故障模式。

到目前为止，Jonny Rhea已经赢得了头两项赏金。第一项是价值一千美元的“荣誉奖”，内容是在Lighthouse攻击网中破坏节点发现服务。第二项是在Teku网络中进行[DoS攻击](https://twitter.com/JonnyRhea/status/1286810750896541698)以导致最终确定性失败，虽然还没有正式颁发，但应该满足本阶段五千美元的最高赏金。

赏金和挑战之后会越来越多，所以赶快来参与吧！此处是以太坊基金会#attacknets Discord频道的[邀请链接](https://discord.gg/zyZXUN7)。

##  

&lt;br/&gt;

# 释义性文章

本周主题看来是如何在手机上进行质押：

- Status总结了如何在安卓系统中安装Nimbus客户端
- Phonethic也撰写了一份[在安卓系统中运行Prysm验证者的指南](https://phonethic.protoman.net/docs/)

Status撰文给出了大家应该运行自己的验证者节点的[理由](https://our.status.im/case-for-running-your-own-validator/)，我非常同意！此处还有Status的第三篇关于Eth2的文章：[什么是Proof of Stake](https://our.status.im/ethereum-2-0-what-is-proof-of-stake/)？

其他客户端安装指南：

- Steve Berryman (Attestant) 更新了关于Lighthouse客户端安装的[系列教程](https://www.reddit.com/r/ethstaker/comments/hst308/ethereum_2_eth2_lighthouse_validator_installation/)
- Ethernaut深入解析了如何使用不同配置[运行Prysm客户端](https://theethernaut.substack.com/p/running-an-eth-2-validator)，其中包括Dappnode

来自Dapp University的十分钟Eth2科普视频：[Ethereum 2.0 is coming!](https://www.youtube.com/watch?v=ZcZ6IRDu75I) 看来Gregory试图将观众变成区块链专家。

来自Alon Muroch的关于BLS签名教程的[Part 1](https://medium.com/@alonmuroch_65570/bls-signatures-part-1-overview-47d9eebf1c75)和[Part 2](https://medium.com/@alonmuroch_65570/bls-signatures-part-2-key-concepts-of-pairings-27a8a9533d0c)。如果大家感兴趣的话，也可以看看我[关于BLS12-381的文档](https://hackmd.io/@benjaminion/bls12-381)。

Somer Esat也分享了其作为[以太坊质押者的告白](https://medium.com/@SomerEsat/confessions-of-an-etheruem-staker-e5a23f46efa2)。我认为Somer很好地捕捉到了我们之中的大部分人目前对于参与Eth2的想法和担忧。

##  

&lt;br/&gt;

# 媒体资源

在此我就不重述EF研究团队在Reddit AMA中关于发布日期的插曲了，Anthony Sassano在他的[*the Daily Gwei*](https://thedailygwei.substack.com/p/eth2-phase-0-will-launch-in-2020)中已经做出了讨论。除此之外，如果你是一个POAP的持有者，那么不妨参与这个关于Eth2开发速度的[投票](https://poap.vote/11/cast) (无需gas)。说到Reddit上的AMA，Anthony也在推特中做出了[总结](https://twitter.com/sassal0x/status/1281937994333556737)。

Afri最近还以Eth2测试网协调者的身份参加了Paradigm的[采访](https://medium.com/paradigm-fund/interview-with-afri-schoedon-the-pioneer-of-eth2-multi-client-testnets-4d2fdfed8255)。我喜欢Afri的直率“我是一个专注于layer-1的人，我并不太关注DeFi”，我想这也适用于我。

Preston Van Loon (Prysmatic Labs联合创始人) 参与了[*POV Crypto*播客](https://twitter.com/POVCryptoPod/status/1284181983711510528)。值得一听，开场音乐也很动听。

很高兴看到Coindesk有越来越多关于以太坊的报道。Christine Kim最近撰写了一篇不错的Eth2概览：[以太坊2.0的运行机制及其重要性](https://www.coindesk.com/research/reports/ethereum-2-0-how-it-works-and-why-it-matters) (23页的报告，需要注册下载)。不幸的是，报告中还是包含一些显而易见的荒谬表达，例如“今年已经多次延迟发布”。唉。

##  

&lt;br/&gt;

# 研究工作

[Eth2.0经济分析报告](https://drive.google.com/file/d/1pwt-EdnjhDLc_Mi2ydHus0_Cm14rs1Aq/view?usp=sharing)是我这周最喜爱的读物。其中信息量巨大，内容涉及面广且复杂，是一份非常重要的分析报告。读到其中一些结论的时候，我感到非常高兴，尤其是“我们发现网络的经济学高度符合更加去中心化的网络参与，达到了Eth2的设计目标”。附录B (第90页) 的相关方采访中埋藏了许多有趣的信息。

其中给出的两个主要建议是 (1) 提高一倍网络发行率 (验证者奖励) 以提升验证者参与度，达到Eth1的安全级别；(2) 预备更灵活的方法，以便在面临突发情况时动态调整验证者奖励。目前来看，后者的实现需要对信标链进行硬分叉。对于报告给出的第一条建议，Vitalik[并不这么认为](https://twitter.com/VitalikButerin/status/1283926011718008832)。

许多[Ethresear.ch](http://ethresear.ch/)上的Eth2研究终于看到了曙光，这周收获了[满满的爱](https://twitter.com/VitalikButerin/status/1285231462892134401)。Hsiao-Wei对其几年来的活动进行了一些[分析](https://twitter.com/icebearhww/status/1285263900800212992)。

最近的[*Ethresear.ch*](http://ethresear.ch/)研究：

- 一份[关于改进ETH2.0质押机制的提案](https://ethresear.ch/t/improved-mechanism-for-eth-2-0-staking/7695?u=benjaminion)，旨在保护协议免受ETH价格的剧烈震荡。[此处是相关EIP](https://github.com/DAism2019/EIPs/blob/a6aa0e08105eba15f314eb03a9a58a2b376cf5ad/EIPS/eip-2794.md)。我之前对此并没有太过关注，但这种考虑也许是是有必要的。
- Afri更新了他的[客户端基准](https://ethresear.ch/t/ethereum-2-0-client-metrics-07-2020/7699?u=benjaminion)。相比之前的巨大改变：这仍然是一个快速发展的目标。我们的同步时间提高了3-4倍，几乎可以合并到Teku中，如果你设备的内存很大 (例如Afri的32GB)，大可不必理会Teku中Java疯狂消耗内存的现象；如果你没有足够的内存，那它就不会占用那么多内存。这是非常合理的优化策略。
- [高效的类CBC最终确定性小工具，容错力达99%](https://ethresear.ch/t/an-efficient-cbc-like-finality-gadget-for-99-fault-tolerance/7723?u=benjaminion)。尽管信标链已经具备了共识机制，但将来还可以对其进行改进。

除开[*Ethresear.ch*](http://ethresear.ch/)，Githun上最近还有关于[VC/BN架构的未来的讨论](https://github.com/ethereum/eth2.0-specs/issues/1969)。在阶段0，验证者客户端 (VCs) 是十分轻量级的，用户可以通过一个信标节点 (BN) 运行数千个验证者。在之后的阶段中，验证者客户端可能就没那么轻量级了，可能需要与信标链进行更紧密的耦合。这条讨论就探索了其未来可能的架构及其影响。在我看来，发展到某个点之后，稍重量级的验证者客户端可能对去中心化更有效：1 stake + 1 CPU = 1 vote。所以我基本赞同这种看法。

##  

&lt;br/&gt;

# 常规会议

在本周的Eth1集体核心开发者会议中，也有一些关于Eth2的[讨论](https://youtu.be/RWX9vkY7Oas?t=2985)。Eth2可以看作是将协议从Eth1设计选择中解放出来的机会，因为在五年之后就不再适用了。目前的Eth1可以被限定为Eth2的一个分片，而其他的分片能够使用EVM的加强版本。这与阶段2暂被搁置的初始计划有些许相似。无论如何，在未来几个月中很期待听到更多结合Eth1和Eth2的讨论。

## 实现者会议

第44次会议于7月23日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/169)
- [会议视频](https://youtu.be/MMNgoDYKvhQ?t=204)
- 我的[速记](https://hackmd.io/@benjaminion/rJmLIzPeD)以及[Mamy](https://gist.github.com/mratsim/914b9042063d99fc22da5a1456ecf733)的笔记，以及Pooja (the Cat Herders) 的[完整笔记](https://github.com/ethereum/eth2.0-pm/blob/bac3ebe79ef0ecb0bda6cafb41f750f83f97c038/eth2.0-implementers-calls/call_044.md)

在常规进展中，Protolambda希望通过客户端处理可选gossipsub字段的方式来解决一些不一致性。此处是[提案](https://github.com/libp2p/go-libp2p-pubsub/pull/359)和一些[客户端调查](https://github.com/ethereum/eth2.0-specs/issues/1981)工作。

此外，Vitalik希望我们能开始考虑阶段1的实现。就目前来说，大家都专注于推进阶段0的发布，分散注意力可能有些难。然而，已经有一些相关工作在展开了。PegaSys TXRX团队的Mikhail Kalinin已经通过将Python规范转译为Kotlin在Teku中实现并测试了阶段1模拟器。他甚至还能将其与以太坊基金会Guillaume Ballet开发的Eth1引擎结合起来运行。[此处](https://twitter.com/dannyryan/status/1286293643976822786)是摘要信息，更多细节参见[此文](https://blog.ethereum.org/2020/07/23/eth2-quick-update-no-13/)中的“eth1+eth2合并工作进展”。

另外，Prysmatic Labs的Terence一直在致力于将阶段1[引入Prysm](https://github.com/terencechain/prysm-phase1)，并将其发现回馈到规范中。

## 秘密共享验证者

首次Eth2秘密共享验证者 (**Secret shared validators**) 社区会议于7月16日进行，由Mara Schmiedt组织。

- [演示](https://docs.google.com/presentation/d/1XiHTOENFDbMHzvS2apd1tCNHkzgJ3KutryB8om5Ur6I/edit#slide=id.p)
- [录像](https://consensys.zoom.us/rec/play/v5F-d-ms_W03HdyX5gSDVv99W9S6fK6shyEXqfIKyEy0UyYLY1eiZOEWMLY8ml-53JjWei8U80O9uX_E) (密码: 5x#.0wO1)

以太坊基金会的Discord也有#secret-shared-validators频道 ([邀请链接](https://discord.gg/zyZXUN7))，也有[Telegram小组](https://t.me/joinchat/H5nvw0gh2hbBeGhMZZJGSA)。

此处是一些关于秘密共享验证者如何[预防故障](https://notes.ethereum.org/@adiasg/preventing-eth2-validator-failure)的研究笔记。

##  

&lt;br/&gt;

# 其他新闻

- [Lighthouse](https://lighthouse.sigmaprime.io/update-27.html)和[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-54-so-close-to-official-multi-client-testnet-e4e1873e7c24)客户端团队的更新
- Preston会在7月30日的Blockchain Acceleration Foundation and Blockchain at Berkeley针[对Eth2的发展现状](https://live.remo.co/e/the-state-of-ethereum-20/register)进行演讲
- 由Staked举办的[ETH质押网络研讨会](https://staking.staked.us/eth-staking-webinar)将于8月4日进行

&lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[Eth2更新速览#13]]></title><description><![CDATA[Eth2发布前的最终联合测试网Medalla即将到来；初代攻击网等你来挑战！]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-13</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-13</guid><pubDate>Fri, 24 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/07/23/eth2-quick-update-no-13/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



测试网，测试网，测试网！(重要的事情说三遍！)

 &lt;br/&gt;

# 要点速览

- [Medalla多客户端测试网](https://github.com/goerli/medalla/blob/master/medalla/README.md)发布日期已敲定🚀
- 初代测试版[攻击网](https://github.com/ethereum/public-attacknets)已上线，欢迎所有白帽参与👩‍🍳
- Eth1+Eth2合并工作获得喜人进展👊

## &lt;br/&gt;

# Medalla测试网

[Altona](https://blog.ethereum.org/2020/07/23/eth2-quick-update-no-13/altona.beaconcha.in/)测试网自上线以来一直稳定运行，在与eth2客户端团队进行协商之后，我们的下一个多客户端测试网[Medalla](https://github.com/goerli/medalla/blob/master/medalla/README.md)，其MIN_GENESIS_TIME最早为unix time 1596546000 (即最早创世时间为UTC时间2020年8月4日)。

![以太坊周刊更新速览开头.png](https://i.ibb.co/p3S00JZ/131-6aabe3a2bc.jpg)

与Altona相比，Medalla迈出了巨大的一步，它是为社区建设并且由社区维护的多客户端测试网。在Medalla之前上线的多客户端测试网都被看作是“devnets”(开发者网络)，因其主要由客户端团队和EF成员运行 [(点击查看我上一篇文章中对Altona的解释)，](https://news.ethereum.cn/eth2-quick-update-no-13/#altona-v012-testnet)但在本次发布的测试网中，以太坊网络的稳定性和安全性几乎可以说是被完全交由社区手中 (也就是你的手中✋🤞🤟

需要注意的是，MIN_GENESIS_TIME 指的是区块链最早能够启动的时间，但如果未达到最低验证者数量，网络仍然无法启动。为了遵循主网规范，Medalla的最低验证者数量**不能少于16,384** (524,288 ETH被质押)。也就是说，在UTC时间8月2日下午一点之前 (即最早创世时间的前48小时) 如果没有达到16,384这个验证者数量的话，测试网会晚于MIN_GENESIS_TIME启动。这是完全合理的。

总的来说，如果同时满足这两个条件，测试网就能在48小时之后顺利进行创世。我们会密切关注存款进度，一旦明确创世时间，会及时告知社区。🎉

届时我们也会发布一个Medalla的验证者“Launchpad”，这是辅助验证者进行存款的引导界面。对此我们将公布更多相关信息。

创世时期将会有不少于四个客户端完全参与测试网：[Lighthouse](https://github.com/sigp/lighthouse/)、[Nimbus](https://github.com/status-im/nim-beacon-chain)、[Prysm](https://github.com/prysmaticlabs/prysm/)以及[Teku](https://github.com/pegasyseng/teku)。一如往常，我们非常鼓励客户端保持多样性，以增强网络弹性 [(此处是eth2多个客户端的相关讨论)。](https://news.ethereum.cn/eth2-quick-update-no-13/#so-many-clients)请读者多多熟悉客户端的文档，也可以到他们的discord频道中提问 🙂

除了以上四个客户端，我也非常期待[Lodestar](https://github.com/ChainSafe/lodestar)能够在一定程度上参与创世，甚至我们可能还会有另一个令人惊喜的客户端加入。

号外：Medalla会为发布期间的参与者发放[POAP](https://medium.com/poap/what-is-poap-d7e8fdfc207d)！敬请关注🏅

##  &lt;br/&gt;

# beta-0攻击网发布

召集所有优秀的白帽骇客👩‍🍳

本周发布了三个攻击网[ (attacknets)，](https://github.com/ethereum/public-attacknets)分别是[lighthouse-attack-0](https://github.com/ethereum/public-attacknets/tree/master/attacknets/lighthouse-attack-0), [prysm-attack-0](https://github.com/ethereum/public-attacknets/tree/master/attacknets/prysm-attack-0)和[teku-attack-0](https://github.com/ethereum/public-attacknets/tree/master/attacknets/teku-attack-0)，成功攻破能获得五千美元赏金！(攻破的意思是，阻止至少16个连续epoch的最终确定性)

初代的攻击网都有意设置得比较简单 (每个客户端对应一个攻击网) 且规模不大 (每个攻击网四个节点)，因此应该不难攻破。详情参阅[README](https://github.com/ethereum/public-attacknets)文档以及引导贴士，也可以加入[Eth R&amp;D #attacknets 频道](https://discord.gg/TRgSp3W)进行讨论。

继beta-0 测试网之后，我们将扩大攻击网的规模并增加难度，会出现更复杂的挑战，对应的赏金也会更多。

**[值得一提的是](https://github.com/ethereum/public-attacknets/issues/4)🏆 lighthouse-attack-0**中有一大发现。虽然并未妨碍测试网的最终确定性，但确实是一个关键漏洞。感谢Age (SigmA Prime) 的迅速修复！

##  &lt;br/&gt;

# eth1+eth2合并工作进展

在此我想分享一下eth1+eth2合并工作的进展，并对Mikhail (TXRX) 和 Guillaume (geth) 的优秀贡献表示感谢！

以太坊未来的发展方向是，将当前的eth主链作为分片合并到新的eth2系统中。这也是将eth2客户端 (共识) 和eth1客户端 (高度优化的用户层) 结合到同一个系统中的过程。

相关资源：关于客户端关系的[阐述](https://ethresear.ch/t/eth1-eth2-client-relationship/7248)；Mikhail也对合并工作做出的详细[阐述](https://ethresear.ch/t/the-scope-of-eth1-eth2-merger/7362)；Guillaume针对基于geth的eth1引擎 (Catalyst) 的架构[描述](https://ethresear.ch/t/architecture-of-a-geth-based-eth1-engine/7574/3)。

基于这些写就的文章，Mikhail和Guillaume一直致力于实现其中的概念。Guillaume的Catalyst是一种geth版本，将其共识委托给RPC调用 (即eth2客户端)，目前已经完成开发准备投入使用。Mikhail的阶段1实现正在运行完全分片化的eth2模拟器，其中选定的分片将区块生产和有效性调用委托给本地的存根 (stubbed) eth1引擎。
![速览132.png](https://i.ibb.co/jwkVdxW/132-de2be04962.png)

下一步就是将这两个部分相结合，进行端对端的eth1+eth2模拟！

再次感谢Mikhail和Guillaume的杰出工作！我对此感到非常激动，而这也与即将发布的信标链在并行前进！🚀

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[评估以太坊2.0经济安全性]]></title><description><![CDATA[一文概览PoS激励模式分析报告。]]></description><link>https://www.ethereum.cn/ethereum-2-0-economic-review</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-2-0-economic-review</guid><pubDate>Thu, 23 Jul 2020 00:00:00 GMT</pubDate><content:encoded>&lt;center&gt;对以太坊权益证明机制激励模型的分析&lt;/center&gt;

来源 | [ConsenSys](https://medium.com/@thomasborgers/ethereum-2-0-economic-review-1fc4a9b8c2d9)



&lt;br/&gt;

前言：Eth2.0 权益证明机制PoS即将投入使用，该激励模式基于以太坊2.0最新规范v0.12实现，这将对以太坊经济模式及网络安全性带来什么影响？让我们通过Tanner Hoban和Tom Borgers的经济模型和分析报告，深入了解影响Eth2.0质押经济的相关变量，以及分析得出的结论。

以太坊2.0网络升级目标远大，即逐渐向PoS (权益证明) 共识算法这一激励机制转变，这一升级对网络的经济性状产生深远影响。该系统的设计比较复杂：在这种激励机制下，诚实的验证者可通过验证交易以及最终确定网络状态来获取奖励，而离线以及作恶的验证者将受到惩罚。

在本文中，我们通过一个精细的网络经济模型和新的评价工具来界定、衡量以及分析Eth2加密经济学的安全性。

首先，为了实现对Eth2经济的评估，我们用Excel构建了一个经济模型，用于解释在当前规范下以及特定情境下的系统输出结果。在项目的整个过程中，我们逐步对该模型进行了完善，列出一些预期数值，并根据验证者收入、成本、收益和网络发行量得出基于数据的结论。

Eth2系统受接近100个变量影响，而这些变量对上述所说的输出结果会产生实质影响。**该模型生动地阐释了受不同的ETH价格和ETH总质押量影响，验证者的盈利水平将如何变化，强调了网络安全性受各种不稳定的因素影响。**

我们根据网络攻击成本做了一系列假设，界定了Eth2.0 阶段0中所必需的经济安全程度。目的是为了确保攻击成本高于其收益，并达到当前以太坊Eth1链的安全级别。

我们确定了经济攻击向量的两种主要类别 (即绝对多数攻击和最终确定性攻击)，两种类别的变量和风险级别都是不同的。在阶段0中，我们主要关注旨在破坏网络的攻击。尽管发现网络有遭受此类攻击的风险，但我们更担心之后的阶段。我们预估以太坊的目标质押率为13.8％，根据历史ETH价格和哈希率情况，该目标质押率可为网络提供足够的安全保障。

Eth2中的安全性高度依赖于ETH的质押数量，而ETH质押总量本身也是计算收益的一个系数。我们制作了一个模型，以了解资本有效投资者的动机，并将其命名为**Required Serenity Active Validator Yield (RSAVY) 模型**。该模型旨在研究质押的风险和成本问题，以及质押的**期望回报率 (RRR)**。根据我们的结论，在最佳网络状态下 (内外因共同影响下)，验证者参与质押的期望收益率为3.3%。在更加悲观但稳定的情况下，验证者期望收益率会提高到11.6％。

RSAVY模型不仅可以用来计算期望回报率，还可以根据特定的场景制作网络分析图表。基于这些场景，我们将不同的参数应用到模型中，并给出结论与建议，总结如下。

 &lt;br/&gt;

## **结论：**

- **与PoW相比，以太坊0的PoS共识机制复杂得多。**Eth2系统高度复杂且经精心设计，但对于验证者来说，可能会很难把握。这将导致一系列的不确定性和不可预测性，阻碍了潜在的资本有效验证者参与质押。
- **Eth2中的网络安全性取决于三个关键变量：ETH质押数量，ETH的价格以及波动性。**其中每个变量都会对攻击网络的成本产生直接或间接的影响。ETH的质押总数量是最可控的变量，而ETH的价格对网络安全性有直接且相当大的影响，但超出系统的控制范围。而波动性受不同因素影响，且间接影响ETH质押情况以及ETH价格。
- **Eth2遭受攻击时，相比Eth1更容易牵一发动全身。**Eth2削减了参与网络运行所需的物理和硬件成本，从而使得硬件和电力消耗基本降至最低。此外，DeFi的蓬勃发展以及向Eth2的最终过渡将极大地加速并扩展这一趋势。
- **资本有效验证者的数量更容易预测。**尽管以太坊发烧友的参与对于成功启动信标链很重要，但是这不足以达到足够的安全级别。因此，吸引更多的资本有效验证者参与质押，有助于达到ETH目标质押水平。
- **根据ETH历史价格，8%的目标质押率将保证Eth2网络达到当前Eth1的安全水平。**根据计算得出，在以往的价格波动下，ETH目标质押率需达到13.8%方可保证网络安全。
- **验证存在规模经济效应 (即验证规模越大，效益越高)，但是随着ETH价格上涨，规模效应将被削弱。**工作量证明机制PoW通过不断扩大工作量来获取更多奖励，而在PoS机制下，随着ETH价格的上涨，验证者成本将逐渐降低。我们发现该经济模式对越是去中心化的网络越友好，这正好符合Eth2的设计目标。 
- **目前市面上77.7％的ETH为所谓的“具备验证者资格”钱包所持有中（即拥有超过32 ETH的钱包)**。大约有8660万ETH  (即ETH总供应量的77.7%) 储存于非交易所钱包中，且这些钱包的余额均超过32 ETH。而另外还有1870万ETH由那些提供质押服务的交易所持有。可以见得这是一个诱人的绝佳潜在市场 。
- **Eth2维持安全性的成本将远低于Eth1。**在当前的信标链规范下，且假设质押总量为1550ETH (即质押率为8％)，我们预估网络年通胀率为0.55％，远低于当前以太坊PoW网络的4-4.5％。
- **Eth2网络安全性在很大程度上取决于ETH的价格稳定性。**关于Eth2的经济稳定性和安全性，我们最为关注的是在ETH价格较低的情况下，Eth2网络的弹性如何。结合考虑网络攻击者迅速扩张攻击的能力，我们认为这一点值得关注。
- **由于阶段0和阶段1之间缺乏流动性，这可能会导致不可预测性和中心化。**鉴于Eth1和Eth2之间缺乏双向通道，并且在阶段0和阶段1种无法实现交易，我们预测将会形成一个由金融衍生市场以及中心化交易所构成的二级市场。 而验证者如果在这些平台上高度集中，将会带来一系列中心化危机以及不可预测性。
- **留意金融衍生品攻击。**以太坊生态系统正突飞猛进，而ETH作为一种资产类别也在迅速发展。随着期权体量的增加，以及诸如“闪电贷”之类的特殊金融产品遭受恶意攻击，金融衍生品可能成为攻击者的首选途径。

 &lt;br/&gt;

## **建议：**

- **将基本奖励系数 (Base Reward Factor) 增加到至少128**：我们明白为了维持网络安全性而加大成本投入意味着什么，如果基本奖励系数为64，我们认为这对于网络安全性的投入明显不足。在向权益证明机制 (PoS) 分阶段过渡的过程中，谨慎行事对于以太坊网络来不失为明智的做法。
- **在应对冲击事件如ETH价格暴跌方面，需要探索一种更为灵活的方法来调整奖励机制 (比如研究安全保障网的实现)。**在面对网络冲击事件时，我们建议探索一种更加灵活的方法以调整奖励或基本奖励系数。方法包括使用阈值触发器、阶梯函数或与ETH价格直接相关的函数。

[原报告链接](https://drive.google.com/file/d/1pwt-EdnjhDLc_Mi2ydHus0_Cm14rs1Aq/view)
 
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[解构ETH2.0：EVM和EWASM]]></title><description><![CDATA[摘要：技术小白也能读懂EVM和eWASM。]]></description><link>https://www.ethereum.cn/breaking-down-eth-2-0-ewasm-and-evm-explained</link><guid isPermaLink="false">https://www.ethereum.cn/breaking-down-eth-2-0-ewasm-and-evm-explained</guid><pubDate>Thu, 16 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ivan on Tech](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-ewasm-and-evm-explained)

&lt;br/&gt;

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jTFFP5P/EVM-p1-3acda284cf.jpg&quot;/&gt;&lt;/center&gt;




 &lt;br/&gt;

# 以太坊2.0之eWASM

eWASM是以太坊迈向2.0时代的又一创新之举。主流看法是，eWASM能够促进网络的速度、可扩展性和灵活性，也使得开发者能够基于以太坊2.0的协议构建更为复杂的智能合约。除此之外，我们之前的文章还对Eth 2.0的许多不同方面进行了解释，如[Staking](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-staking-explained)、[Sharding](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-sharding-explained)、[以太坊Layer-2](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-ethereum-layer-2-and-scalability-explained)、[zk- snark](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-zk-snarks-and-zk-rollups)等。在探讨eWASM之前，我们再过一遍以太坊2.0的基本路线。

 &lt;br/&gt;

# 什么是以太坊2.0？

以太坊2.0包含一系列升级，将对协议进行颠覆性的改进，扩容以太坊网络，使其更加高效。其中的升级包括：使用Casper协议的Proof of Stake (权益证明) 机制、分片、Raiden (雷电网络)、Plasma以及Rollups等等。这些升级将会在[以太坊不同的阶段](https://academy.ivanontech.com/blog/eth-2-0-exploring-the-phases-of-eth-2-0)中实现，以确保合理地部署和执行。

- 阶段0：启动信标链，转向PoS权益证明机制
- 阶段1：加入分片
- 阶段2：使用以太坊0 eWASM替代现有的以太坊虚拟机 (EVM)


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Jk9pgFR/EVM-p2-bef5c69ef1.jpg&quot;/&gt;&lt;/center&gt;








本文将主要探讨阶段2，如果读者对以太坊2.0有一些了解，那么应该知道从EVM到eWASM的转变是非常宏大的工作。在我们进入eWASM之前，先来看看EVM到底是什么。

 &lt;br/&gt;

# 以太坊虚拟机是什么？

每条去中心化的区块链都需要一个虚拟机来处理并执行操作。比特币的虚拟机相对简单，因为它只需要处理交易。然而，由于以太坊支持图灵完备的智能合约，其复杂度也就更高。因此，我们需要思考另一个重要问题。

既然智能合约要满足不可篡改性，并且即使历经多个节点也能无损运行，那么以太坊虚拟机 (EVM) 需要拥有哪些主要特性？



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jkcvrkH/EVM-p3-f3fe5b5da0.png&quot;/&gt;&lt;/center&gt;






- 确定性
- 可终止性
- 独立性

###  

## 确定性

如果针对相同的一组输入，无论其执行了多少次代码，程序都给出相同的输出，那么就可以说是该程序具有确定性。确定性函数的一个完美示例就是数学运算。例如，假定所有数字都以10为底，则无论重复运算多少次，1 + 4始终等于5。

DApps往往需要同时处理大量金额，所以用户需要清楚知道代码在每个执行阶段如何响应。

###  

## 可终止性

我们需要谨记一点，以太坊智能合约是图灵完备的。如果有充足的时间和资源，那么理论上来说智能合约可以解决任何问题。然而，我们无法判断合约是否能在给定的时间限制内完成所有操作。这就是为什么智能合约需要有终止机制。以太坊智能合约借助“gas”来定义其使用期限。当合约达到gas上限，则无法继续进行操作。

###  

## 独立性

最后，智能合约应该在一个完全独立的环境中运行。如果合约发生什么意外情况 (例如被攻击或是出现漏洞)，那么其影响不应该波及到其他底层协议。

要满足以上三个特性，有两种系统可以供智能合约使用——虚拟机和Docker容器。由于Docker的合约默认设计不具备确定性，以太坊决定采用虚拟机。

 &lt;br/&gt;

# 以太坊虚拟机：如何运作？

当我们说到“虚拟机” (virtual machine) 的时候，到底是什么意思？

传统的操作系统 (Windows/iOS) 一次只需要在一个系统中运行。而虚拟机 (VM) 是基于本地操作系统所创建更高级抽象，可用于复制物理机的功能。

虚拟机使得用户能够在不同的硬件架构和操作系统中同时运行同一平台。这就是为什么虚拟机非常适合像以太坊这样的去中心化网络的原因。以太坊的主要目标是成为一台全球超级计算机，使得开发者能够借助其计算资源构建自己的智能合约和去中心化应用程序。以太坊虚拟机 (EVM) 的功能就类似世界计算机，遍布全球的节点都能进行访问。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/cc61r9C/EVM-p4-bcc1a1a79b.jpg&quot;/&gt;&lt;/center&gt;


###  

## 堆栈和状态机

相较于普通的虚拟机，EVM还具备两个额外特性。首先，作为状态机的EVM可以读取输入然后相应地更新其状态。其次，EVM还是堆栈式，其内存结构能够以堆栈形式进行组织和访问。

如果读者熟悉数据结构，那么应该对堆栈并不陌生。堆栈是线性数据结构，其中的操作是通过LIFO (后进先出) 来执行的。

下面举个例子：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/FBpqGpb/EVM-p5-04e6aa9506.png&quot;/&gt;&lt;/center&gt;






在上图的堆栈中，第一条插入的数据是Orange，最后一条数据是Apple。根据LIFO的逻辑，我们取出的第一条数据应该是Apple，最后才是Orange。

现在我们再来看看堆栈操作：Push和Pop。

- Push：向堆栈中加入数据
- Pop：使用LIFO逻辑将数据从堆栈中移除

###  

## EVM中的堆栈操作

在堆栈式虚拟机中，操作执行如下：

- 首先移除数据和操作数
- 相应操作被执行
- 执行结果被加入堆栈

参考以下图表：

- 我们首先移除两个数字：20和7
- 将这两个数字相加，我们得到27
- 最后，结果被重新加入堆栈

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/syHn2Dd/EVM-p6-4e8e455b83.png&quot;/&gt;&lt;/center&gt;



 

**EVM堆栈式系统的优势**

- 堆栈结构可确保EVM不需要获取操作数的确切地址。堆栈结构会始终且必然将VM指向下一个操作数。降低大量操作开销的同时提高了整体效率。
- EVM拥有：世界状态(world state)、机器状态 (machine state) 和虚拟ROM。世界状态将所有帐户存储在网络中，机器状态包括程序计数器、可用gas、堆栈和内存等数据。最后，虚拟ROM读取名为“ EVM字节码”的机器级代码。这是只有EVM才能理解的独特语言。

###  

## EVM – 读取字节码 



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/drgR35y/EVM-p7-57e6798089.png&quot;/&gt;&lt;/center&gt;





编程语言分为高级和低级语言。低级语言 (如字节码) 能够轻松被机器读取，但人类却难以理解。这也是为什么大多数编程语言都是高级形式的原因。那么，在智能合约中程序是如何运作的呢？

- Solidity/Vyper语言的智能合约被编译为字节码，使用到的编译器叫做“solc”
- 字节码由网络读取并处理
- 字节码是Solidity操作码的二进制形式。从EVM转向eWASM的过程中，编译器是非常重要的一个部分，因为EVM无法理解除了字节码之外的任何语言。
- 每个操作码在规范中都被赋予了易于理解的名称，并由数字代码表示。例如，数字0X01代表ADD操作码。

###  

## EVM的功能性

- EVM是以太坊网络中的去中心化处理单元。每笔交易、交互和智能合约执行只能通过EVM进行。
- 负责所有不同的数据结构，包括指令、操作数以及已经处理的数据。
- EVM通过指令分配器获取并执行指令，对操作码进行解码。
- EVM还会跟踪多个网络组件，例如世界状态、存储状态以及区块信息。
- 在以太坊网络中为智能合约创建一个运行时环境。该环境包含需要用以执行具体交易的信息，例如gas价格 (最新gas价格)、代码大小、Caller (交易接收方地址) 以及Origin (交易发送方地址)。

###  

## EVM的缺点

虽然EVM具备许多优势，但也存在四个主要问题，导致网络的整体吞吐量受限：

- 由于EVM需要处理大量各种各样的操作，其速度便不尽人意。EVM的操作码规范没有进行更新，也没有针对不同的硬件平台做出优化。
- 第一点提到由于EVM需要处理大量不同操作，就会容易成为运转瓶颈。其结果就是严重损害整个网络的效率。
- 自从发布初始规范以来，EVM并没有进行太多优化，导致编写合约所需的工具和语言极大受限。

假如底层工作环境本身存在巨大缺陷，那么引入一系列新颖机制 (分片/rollups/Casper) 的意义何在？以太坊之所以寻求从EVM转向使用eWASM，也出于对以上缺陷的衡量。

那么什么是eWASM呢？在此之前，我们需要先理解什么是WebAssembly。

##  

&lt;br/&gt;

# 什么是WebAssembly (WASM)？


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/0CJLVRz/genesis-2-72557e9e97.png&quot;/&gt;&lt;/center&gt;







WebAssembly最近获得了许多关注。WebAssembly是由World Wide Web Consortium (W3C, 万维网联盟) 创造并定义的新代码类型，能够在现代浏览器中高效执行。

WebAssembly凭什么独树一帜？

由于WASM具备基于堆栈的低级二进制格式，且在默认情况下很小，从而可以实现快速加载和执行。浏览器下载WASM代码后，便可以快速将其转换为任何计算机的程序集。

**WebAssembly**

- 受多个JavaScript引擎和运行时环境的支持，可以在大多数现代浏览器中执行。
- Go/Rust/C/C++语言可以直接编译为WASM
- 能够快速适应所有机器级架构，具备极高性能
- 附带与大多数现代硬件架构兼容的指令集
- 在大多数平台上趋近于本地运行速度

##  

&lt;br/&gt;

# 以太坊2.0 eWASM

读到这里大家可能已经发现了，eWASM (Ethereum WebAssembly) 就是以太坊2.0版的WebAssembly。

根据相关团队的说法：

**eWASM = WASM –非确定性(浮点) +计量+ EEI路径(用以与以太坊交互)**

eWASM团队已经给出其具体的设计目标：

- 构建EVM转译器，并且以eWASM合约形式添加计量注入器
- 发布明确详细的规范：以太坊接口、eWASM合约语义以及细节
- 为solc编译器构建一个eWASM后端
- 提供C语言和Rust语言的相应指令和库，以支持智能合约编写

诸如EOS、Tron以及Cardano等项目已经或者准备采用WASM，实现eWASM之后，以太坊也将成为其中之一。

#  

&lt;br/&gt;

# eWASM vs EVM

EVM的主要设计目标就是要保证正确性，即使可能会因此牺牲一定的效率。以太坊开发者Lane Rettig认为EVM是基于理论设计而非实用设计，因此可能无法完美支持现实应用。EVM中的每个节点都必须完整正确地运行EVM，而WASM是为现实应用而生的，能够翻译轻松实际的代码逻辑，因此在效率和速度上更具优势。

现在有了大概的认识，我将进一步对比eWASM和EVM。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/HgHbhm4/EVM-p9-27b11f93f3.jpg&quot;/&gt;&lt;/center&gt;




###  

## eWASM vs EVM #1:速度

简单来说，EVM可以看作是“万精油”，但没有达到理想效果。就拿代码编译来说吧。

EVM经常无法有效编译大量代码。而浏览器的本地JS引擎通常需要大量工作来为某些操作的执行匹配最佳路径，而这对EVM的整体吞吐量来说会产生巨大影响。此外，EVM只能处理256位的字节码，因此小于256位的字节码必须转换为256位格式。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/BcztR01/EVM-p10-4ef296665e.jpg&quot;/&gt;&lt;/center&gt;










EVM的设计极大限制了以太坊的速度和可扩展性，使其每秒最多只能处理25笔交易。而这对于现实世界和现实需求来说是非常不切实际的。

eWASM可以直接转换为编译代码，从而提高加载速度，并且大幅提升每个区块能够处理的交易量。除此之外，有了分片和layer2解决方案的加持，以太坊2.0的速度会显著提升。

###  

## eWASM vs EVM #2:预编译

eWASM还能消除以太坊对预编译的依赖。预编译是EVM字节码的特殊位，好处在于能够节省gas成本，进行高效的密码运算。大多数情况下，如果不进行预编译，那么几乎不可能将创建合约所需的gas控制在上限范围内。而eWASM的gas效率非常之高，以至于能够省去大部分甚至全部的预编译。

然而，预编译也有不足之处。引入新的预编译往往需要网络进行系统范围的硬分叉。根据历史经验，因为可能导致社区分裂，硬分叉多少具有争议性。

而这些意味着什么？

eWASM能够帮助开发者又快又省地创建智能合约，并且没有硬分叉的顾虑。

###  

### eWASM vs EVM #3:灵活性

最后，相较于标准的EVM，eWASM最显著的优势就是代码灵活性。要编写智能合约，以太坊开发者必须特地学习Solidity语言，而这就成为了开发者的知识瓶颈。

eWASM能够与多种语言进行交互，并且拥有更为广泛的开发者工具集。eWASM将支持C/C++/Rust语言。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/v4dK84m/EVM-p11-e2b375c44d.jpg&quot;/&gt;&lt;/center&gt;






eWASM将获得所有主流JavaScript引擎的支持，例如：

- Microsoft的Chakra引擎 (Microsoft Edge)
- Google的V8 engine (Node.js及基于Chromium的浏览器)
- Mozilla的Spidermonkey引擎(Firefox及Thunderbird)

 

eWASM还将获得以下非浏览器实现的支持，例如：

- ml-proto (OCaml引用解释器)
- wasm-jit-prototype (使用LLVM后端的独立虚拟机)
- wabt (基于堆栈的解释器)

 

EWASM还具有以下的开创性优势，这些优势是之前的EVM不可能拥有的：

- 对于以太坊轻客户端，得到浏览器支持会更简单，因为eWASM是根据W3C标准架构的
- eWASM有更多编译器和更多种类的开发者工具
- 由于大量的项目已经在使用eWASM了，它已聚集了一个健康、多元的开发者社区

##  

&lt;br/&gt;

# 结语：eWASM能否助Eth 2.0更上一层楼？

关于eWASM，以太坊社区感到非常兴奋。然而，相关讨论也总是伴随着天花乱坠的说法，我们还需要听到不同的声音。一位资深以太坊开发者Greg Colvin就对eWASM智能合约持疑，其主要观点是：

- eWASM无法消除预编译
- eWASM过渡依赖编译器，可能会导致单点故障

其实绝大多数以太坊开发者都相信eWASM将对协议的整体性能和吞吐量造成巨大影响。

结果究竟会如何呢？让我们拭目以待吧！

 &lt;br/&gt;

&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[如何保障智能合约的安全性]]></title><description><![CDATA[阅读此文防患未然，了解智能合约开发者如何应对安全性问题。]]></description><link>https://www.ethereum.cn/the-smart-contract-security-mindset</link><guid isPermaLink="false">https://www.ethereum.cn/the-smart-contract-security-mindset</guid><pubDate>Wed, 15 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://media.consensys.net/the-smart-contract-security-mindset-a09f5f8f5f4f)



&lt;br/&gt;


![智能合约.jpg](https://i.ibb.co/z72HrRj/3738e719ad.jpg)
&lt;br/&gt;



尽管区块链行业的发展日趋成熟，但是智能合约的开发仍是一个相对较新的领域。因此，为了应对新的漏洞和安全危机，以及满足开发新的最佳实践的需要，我们应该不断完善安全性方面的问题。学习[最佳实践](https://consensys.github.io/smart-contract-best-practices/)只是智能合约开发者在安全性方面踏出的第一步。

智能合约编程需要一种不同于传统的工程思维。智能合约失败的代价很高，更新迭代需要较大工程量，这使得它在某些方面更类似于硬件编程或金融服务编程，而不是web或者移动端开发。因此，仅仅防御已知的风险是远远不够的，还需要掌握新的开发理念。

 &lt;br/&gt;

# 准备应急措施

任何重要的合约都会出现故障。因此，开发者必须做好充足的准备，以便及时应对漏洞。

- 出现故障时暂停合约 (“断路器”)。
- 管理风险资金的数量 (限制流量，最大化利用率)。
- 准备有效的升级路径以修复和改进bug。

#  &lt;br/&gt;

# 防患未然

最好是在完整的产品发布之前发现bug。

- 全面测试合约，并在发现新的攻击向量时添加相应测试。
- alpha测试网版本发布之后，提供[bug赏金](https://consensys.github.io/smart-contract-best-practices/software_engineering/#bug-bounty-programs)。
- 分阶段推出，每个阶段更新功能并添加新测试。

#  &lt;br/&gt;

# 保持智能合约的简洁性

复杂性会提高出现故障的概率。

- 确保合约逻辑简单。
- 模块化代码以使合约和函数保持较小。
- 请尽可能使用既有工具或代码 (例如不要使用自己的随机数生成器)。
- 在保证清晰度的前提下再考虑性能。
- 只在系统中需要去中心化的部分使用区块链技术。

##  &lt;br/&gt;

# 保持更新

跟进新的安全性措施。

- 检查智能合约，以最快的速度定位新漏洞。
- 尽快升级到任何工具或库的最新版本。
- 采用可能有效的保障安全性的新技术。

##  &lt;br/&gt;

# 了解EVM的特性

尽管开发者对以太坊编程较熟悉，但仍需要注意一些陷阱。

- 要特别小心外部合约调用，该过程可能会执行恶意代码并改变控制流 (control flow)。
- 要明白，开发者的公共函数是公开的，可能会被恶意调用，调用顺序也可能是任意的。任何人都可以查看智能合同中的隐私数据。
- 注意gas成本和区块gas限制。
- 注意，区块链上的时间戳是不精确的：矿工可以在几秒内影响交易执行的时间。
- 随机性是区块链上一个重要的特性，大多数产生随机数的方法在区块链上是具有博弈性的。

##  &lt;br/&gt;

# 基本权衡因素

在评估智能合约系统的结构和安全性时，需要考虑多种基本的权衡。对于所有智能合约系统的普遍建议是，在这些权衡之间找到平衡点。

从软件工程的角度来看，理想的智能合约系统是模块化的，即重用代码而不是复制代码，以及支持可升级的组件。而从安全架构的角度来看，理想的智能合约系统可能同样会使用这种模式，尤其是面对更为复杂的智能合约系统。

然而，当安全性和软件工程最佳实践出现不一致时，也会有一些例外情况发生。而在每种情况下，可通过选择合约系统上的最佳性能组合来达到平衡，例如:

- 固定版本vs.可升级
- 整块化vs.模块化
- 复制vs.重用

&lt;br/&gt;

## 固定版本vs.可升级

当多个资源 (包括此资源) 强调自身的延伸性时 (比如可中断的、可升级的或可修改的模式)，那么就需要在延伸性和安全性之间找到一个平衡点。

延伸性增加了复杂性和潜在的受攻击性。如果智能合约系统在预先规定的有限时间内能够完成的功能非常有限，那么这时简洁性比复杂性要有效得多，例如，无治理的限时代币发售合约系统。

&lt;br/&gt;

## 整块化vs.模块化

独立的整块化合约允许信息在本地识别和读取。虽然整块化合约一般不被重视，但对于数据和流的极端本地化存在争议，例如代码审计的效率优化。

与本文考虑的其他因素一样，在简单的短期合约中，安全性最佳实践趋向于与软件工程最佳实践相悖；而在更复杂的永久合约系统中，两者趋于相一致。

&lt;br/&gt;

## 复制vs.重用

从软件工程的角度来看，智能合约系统希望能够在需要时最大化重用功能。在Solidity语言中，有许多重用合约代码的方法。实现代码重用的最安全的方式通常是：使用自己之前经过验证和部署的合约。

如果之前部署的合约无法使用，开发者通常就需要依靠复制功能了。[OpenZeppelin的Solidity库](https://github.com/OpenZeppelin/openzeppelin-contracts)尝试提供一些模式，使得安全代码可以在无需复制的情况下被重用。任何合约安全分析都必须将目标智能合约系统中还没有与风险资金建立相当信任级别的重用代码包含在内。

现如今，在以太坊上创建应用软件无疑是最令软件工程师激动的前沿领域，但这需要持续不断的威胁建模 (threat modeling)、安全审计，还需要做好周全计划以应对故障发生。

 &lt;br/&gt;

&lt;br/&gt;



声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/7/10）]]></title><description><![CDATA[摘要越短，信息量越大]]></description><link>https://www.ethereum.cn/wnie2-2020-7-10</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-7-10</guid><pubDate>Mon, 13 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200710)



##  

 &lt;br/&gt;

## 精选推荐

本期的文章荐读是Anthony Sassano的Daily Gwei[**《eth1和eth2合并之路概览》**](https://thedailygwei.substack.com/p/the-great-merger-the-daily-gwei-22)。

趁此机会，我想说Daily Gwei真的很棒，篇幅精简，内容准确且丰富。足以见得Anthony对于生态中许多领域的了解颇深。而且这是日刊，我很难想象每天要花多少功夫在这上面。（本条并非广告😂，而是完全出自本人对Anthony及其工作的钦佩）

另外，这周我觉得还值得一听的是Vitalik作为嘉宾的**[Hashing it Out播客](http://thebitcoinpodcast.com/hashing-it-out-86/)**。内容不仅限于Eth2，而是俯瞰当前以太坊生态中的方方面面。

##  

 &lt;br/&gt;

## 社论

我上周突然发觉，距离我们相聚在柏林恰好两周年了😅，而这是我们解锁Eth2旅程的起点。之前我们的工作方向一直是对分片和Casper进行独立设计，由Eth1上的智能合约管理。但其局限性随后被证明：一方面，彼时的预期最低质押额是1000 ETH。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NNhwdjM/7-10-1-457425efa8.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;

Eth2后来的雄心壮志已经远远突破了旧设计的局限性，我们可以说是从一张白纸开始重新设计这整个系统。我们是否做了对的选择？我完全相信这是正确的方向。旧设计的约束条件过于严格。（即使如此，在上面提到的播客中，Vitalik对于在起初没有采取最小可用的Proof of Stake机制表示遗憾）

多么有收获的两年啊！我们目睹了巨大的创新和惊人的成就。回想起多客户端测试网从无到有，现在已经接近产品级，我仍然感觉难以置信。我从事产品开发已经25年了，我从来没有看见有哪一个重量级产品发展得如此之快。帮我个忙，如果下次你再听见这样的牢骚：Eth2到底什么时候上线？请礼貌地提醒他们这个事实。

##  

 &lt;br/&gt;

## 阶段0：信标链

自上期以来的重大消息就是我们成功发布了Altona测试网 ([浏览器](https://altona.beaconcha.in/)/[仪表盘](https://eth2stats.io/altona-testnet))。创世在UTC时间6月29日12:30:05顺利完成。如果感兴趣的话可以看看由[superhiz](https://www.reddit.com/user/superphiz/)组织的[录播](https://www.youtube.com/watch?v=3apiaM5g6jY)。视频中我看起来有点不安，但随后同我的节点Metal Albert一样心花怒放，因为它挖出了[创世区块](https://altona.beaconcha.in/block/2549b9ea577ccaeba472e7c966aa853cd5bd0acaa2f0031bf1dafdf237810a3f)。

当前运行中的测试网，Altona (多客户端) 以及Onyx (Prysm) 都在稳定运转，展示出向好的迹象。一个支持大规模参与的测试网络有望在2-3周内开放。请保持关注!

Least Authority发布了针对Protocol Labs的Gossipsub v1.1设计和实现的审计报告。这是我们会在Eth2中使用到的网络协议。其中有许多可调节的参数。在最近的开发者会议中，我们将很快发布一个次要规范，其中包含适用于Eth2的gossipsub参数。

说到审计，以太坊基金会也在为客户端使用的[Herumi](https://github.com/herumi/bls)密码库[寻找审计方](https://twitter.com/dannyryan/status/1279085799644884992)。详情参见[RFP](https://notes.ethereum.org/@Uj8LfAR6SACOz4TM6m07kw/HJd-uSTh8)，但要尽快了，截至时间是周二。

之前提到过BLS库产生了一个分支：Supranational的[Blst](https://github.com/supranational/blst)库。[一些客户端团队](https://twitter.com/paulhauner/status/1280760605373161472)正在尝试集成，到目前为止其性能还是很可观的。有消息称，今年稍迟一些会对其进行形式化验证 (这比审计要严格许多)。对了，[hash-to-curve规范](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-09)也更新到了v09版本，但是v07和v09之间没有产生影响Eth2的实质性改变，因此对我们来说并无大碍。

以太坊基金会为ETHGlobal的[HackFS](https://hack.ethglobal.co/hackfs)提供Eth2和libp2p项目的[赏金赞助](https://twitter.com/dannyryan/status/1279443288756416512)。从测试网不难看出来，对于分布式系统来说，要分析并修复漏洞是一项很复杂的工作 (如果证明数量突然变少了，我们如何寻找原因？) 在这些问题上，我们亟待更好的工具。所以就看大家的了😄

 

### 工具

Jim McDonald在[thegraph.com](https://discord.com/channels/595666850260713488/595701053161209866/728550226662785145)中为多个测试网 (Topaz, Onyx, Altona) 的存款合约添加了子图。这使得我们能够轻松查阅存款历史。快来[The Graph](https://thegraph.com/explorer/subgraph/attestantio/eth2deposits-altona)上试试吧！

Protolambda[发布](https://github.com/protolambda/rumor/releases/tag/v0.2.0)了[Rumor v2](https://twitter.com/protolambda/status/1279108981710094338)版本。Rumor是“使用Go语言编写的交互式壳层，可运行Eth2网络堆栈、连接测试网、调试客户端并为工具提取数据”。在[Github](https://github.com/protolambda/rumor)上查看进度。

Protolambda的工作从不单一，除此之外他还一直在构建一个[脚本存储库](https://github.com/protolambda/eth2-py-scripts)，可用于信标节点交互或是处理Eth2数据。

区块浏览器也没有停止创新。Etherscan[发布](https://medium.com/etherscan-blog/beaconscan-the-validators-explorer-66c5aa2d4229)了一款支持电子邮件警报、仪表板以及其他功能的Eth2验证者浏览器[[1\]](https://hackmd.io/@benjaminion/wnie2_200710#fn1)。详情参见[BeaconScan](https://beaconscan.com/)。同时，[beaconcha.in](http://beaconcha.in/)也在持续添加新功能：根据涂鸦字符串构建仪表板、为验证者添加标签、注册验证者时[对存款进程进行跟踪](https://twitter.com/etherchain_org/status/1278693851901894661)，他们还[发文](https://kb.beaconcha.in/ethereum-2.0-and-depositing-process)阐释了存款程序和验证者状态。

##  

 &lt;br/&gt;

## 释义性文章

最近的文章大多与信标链节点和验证者的运行相关。参考以下：

- Attestant的Steve Berryman：在[Altona测试网中安装并运行PegaSys Teku验证者](https://medium.com/@steve.berryman/installing-and-running-an-ethereum-2-pegasys-teku-validator-on-the-altona-testnet-e3b9a0989a52)
- CoinCashew：如何使用[Ubuntu系统和Lighthouse客户端在ETH 2.0 Altona测试网](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth-2.0-altona-testnet-with-lighthouse-on-ubuntu)中进行质押
- Hive Blog：使用[树莓派4B 8GB运行Altona测试网验证者](https://hive.blog/ethereum/@tarekadam/altona-test-net-validator-using-raspberry-pi4b-8-gb)
- [设置Prysm验证者](https://github.com/metanull-operator/eth2-ubuntu)的详细教程。其中许多部分适用于所有客户端。

目前为止，这些文章多多少少都比较技术化，主要受众也是不惧繁琐的用户。如果觉得这些文章不适合你，不用担心，之后也会有许多类似[DAppNode](https://dappnode.io/)的简便即用性选择。然而这也提醒我们，运行自己的节点需要付出一定工作量并承担相应的责任。这并不是一劳永逸的事，需要长期的投入和维护。

如果大家对多个Eth2的客户端感到困惑，Somer Esat对客户端的当前状态做了一次梳理[《以太坊2.0与七个客户端》](https://medium.com/@SomerEsat/ethereum-and-the-seven-clients-648815c4ac71)。Somer的文章很有帮助，我可以确定其中关于Teku的信息是准确无误的。（本文还有[中文版](https://www.unitimes.pro/p/3a0f747f59a44c0e9ef29308a7f3470b)）

这里我尴尬地承认在上期遗漏了一篇文章 (特别是我已经审校过其草稿😧。 Mara Schiedt致力于探索在[以太坊2.0中使用秘密共享验证者](https://medium.com/coinmonks/secret-shared-validators-on-ethereum-2-0-ea29ab380016)，以增强网络的强韧性和多样性。Eth2协议从一开始将这类去信任地多方计算功能加入了设计，尽管有些担心参与者最后会选择捷径，但我希望这能成为现实。

Bison Trails宣布对Eth2进行支持，并发布了一篇Eth2设计和路线图[科普文章](https://bisontrails.co/eth2-announcement/)。

Ivan on Tech再次为我们解构ETH 2.0：[读懂eWASM和EVM](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-ewasm-and-evm-explained)

[Everstake](https://twitter.com/bo_opryshko/status/1280126459420573697)也开启了一个Eth2系列，首篇：[什么是以太坊2.0？](https://medium.com/everstake/what-is-ethereum-2-0-and-what-will-happen-to-this-cryptocurrency-8a24a73ae62e)

##  

 &lt;br/&gt;

## 媒体

这期开始我将尝试新开一个板块，这个板块囊括了播客、推特和其他新闻，而收集的新闻放在这里是最合适的。

在我写这篇文章的同时，以太坊基金会开发团队正于[Reddit上举办AMA问答活动](https://www.reddit.com/r/ethereum/comments/ho2zpt/ama_we_are_the_efs_eth_20_research_team_pt_4_10/)。这些一直都值得关注——我们可以看看到目前为止一些很有价值的问答。去年开发团队举办的AMA问答由[Ethhub](https://docs.ethhub.io/other/ethereum-2.0-ama/)整理并发布，以供参考。

Tyler Smith在twitter上发表了系列推文，内容是关于[未来6-12个月](https://twitter.com/R_Tyler_Smith/status/1280545450572099584)内以太坊将面对的风险与机遇。不只是讲Eth2，但[推文重点在Eth2上](https://twitter.com/R_Tyler_Smith/status/1280545459761790984):

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/PTjV9z0/7-10-2-e859b76355.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;

在[ETHPlanet](https://twitter.com/ETHPlanet/status/1280198696643117057)主办的夏令营里，Vitalik、Danny和Karl Floersch讨论了Eth2和以太坊扩容问题。可在[YouTube](https://youtu.be/WTqGUKSpciw?t=811)上看重播(由于网络连接出现问题，链接跳过了前13.5分钟)。这是一次很好的概述性谈话。

另一个采访：播客MikoBits与Quantstamp的Kacper Bak进行了一场[Eth2的深入探讨](https://www.youtube.com/watch?v=7qLa39V08vM)。(顺便说一下，Quantstamp对[Prysm的安全性进行了审计](https://github.com/prysmaticlabs/prysm/issues?q=is:issue+label:Audit)。)

Bernhard Mueller和Vitalik讨论了如何[简化](https://twitter.com/muellerberndt/status/1279011030128001029)Eth2路线图，并以系列推文展示出来。

与以往一样，关于信标链的发布日期有各种猜测。预测市场在这方面应该很在行: 信标链能不能在2020推出呢？[Omen](https://gateway.ipfs.io/ipfs/QmbB3wA5R2PR8s87pJRSUCcBHRxAtfFtkSWmVWEcHsaFeV/#/0x592af74865799e1ed509afef002a6eca26e1caa2)市场目前的比是55:45。Evan Van Ness押注[500 USDC](https://twitter.com/evan_van_ness/status/1278901117846540288)，赌信标链将于2020上线。而[Polymarket](https://www.poly.market/market/will-ethereum-20-phase-0-launch-before-2021)市场预测比从56:44变为74:26🤷‍♀️

与此同时，Justin仍然[坚持](https://www.reddit.com/r/ethereum/comments/ho2zpt/ama_we_are_the_efs_eth_20_research_team_pt_4_10/fxizbhp/)上线日期为[1月3日](https://twitter.com/trent_vanepps/status/1281594510280208384)。[Vitalik](https://www.reddit.com/r/ethereum/comments/ho2zpt/ama_we_are_the_efs_eth_20_research_team_pt_4_10/fxj3vfu/)和[Danny](https://www.reddit.com/r/ethereum/comments/ho2zpt/ama_we_are_the_efs_eth_20_research_team_pt_4_10/fxj2r7p/)想要加快上线进度。我非常期望今年以内可以上线，并且我们与Teku的所有产品规划都围绕着这个目标进行。再看一个关于上线日期的[漫画](https://twitter.com/preston_vanloon/status/1281609559988006912)。
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GJ52RXW/7-10-3-5ad55dd91e.png&quot;/&gt;&lt;/center&gt;

&lt;center&gt;（图片源自推特 @preston_vanloon）&lt;/center&gt;

 &lt;br/&gt;

## 研究工作

Aditya Asgaonkar发文分析了[Eth2的弱主观性时期](https://notes.ethereum.org/@adiasg/weak-subjectvity-eth2)。[之前](https://hackmd.io/@benjaminion/wnie2_200627#Implementers)提到，他的结论有些令人吃惊。我以为我们假设Eth2的弱主观性时期为几个月，但根据Aditya的计算更倾向于一两周。

弱主观性时期的出现是[由于](https://blog.ethereum.org/2014/11/25/proof-stake-learned-love-weak-subjectivity/)PoS协议何如适用于新入网的节点或是离线一段时间之后重新同步的节点。这不会影响大多数保持同步的节点。问题是，一旦验证者离开了网络，他们就可以随意制造历史区块或者历史证明，并且不会受到惩罚 (因为其无法被罚没)。如果有一定数量的验证者这样做，那么他们可能会诱使新节点遵循错误的链。对此，我们采取的一种防御机制是限制验证者加入和离开网络的速率。但即使如此，Aditya表示即使验证者数量庞大，也可能会在几周内退出大量验证者，从而引发上述问题。

此问题的解决方案是让新节点在弱主观性时期内的某个位置能找到值得信任的检查点。这就能确保节点始终同步正确的链。Aditya提出了几种实现方式，我们也在最近的[开发者电话会议](https://hackmd.io/@benjaminion/B1WexiV1P#Weak-subjectivity)中进行了讨论。对于客户端开发人员而言，这可能意味着全然不同的工作流程。我们正在组建工作组讨论解决方法。显然，我们需要尽可能以去信任方式来分布这些检查点。

来自[ethresear.ch](http://ethresear.ch/)：

Alex Vlasov (ConsenSys TXRX团队): [通过时间同步漏洞去匿名化](https://ethresear.ch/t/de-anonymization-using-time-sync-vulnerabilities/7610?u=benjaminion)。贴文探讨了更多如何通过时间同步漏洞进行网络攻击，主要攻击点是对验证者进行去匿名化，Jonny Rhea (同样来自TXRX团队) 最近也[一直在研究这个问题](https://ethresear.ch/t/packetology-validator-privacy/7547?u=benjaminion)。

我们如何能够保护验证者的隐私呢？问题在于，如果一个攻击者提前知道轮到我提议区块，那么我会被攻击者有选择地进行低成本DoS攻击。这就导致网络为攻击者敞开了大门。

我们有方法使得每个slot的区块提议者[无法被提前知晓](https://ethresear.ch/t/public-single-leader-election-psle-secret-probabilistic-backup-election-spbe/7633/3?u=benjaminion)，也即秘密领导人选举。但这涉及到复杂的密码学技术。另外一种相对简单的方式是每个slot都随机选择多个提议者，期望值为1。这可以通过验证者签名秘密进行，但可能会导致每个slot出现多个甚至没有区块提议者。这两种方案各有其利弊。

Danny Ryan提出了一种结合两者优势的方案：[公开领导人选举 (PSLE) + 秘密随机备选选举 (SPBE)](https://ethresear.ch/t/public-single-leader-election-psle-secret-probabilistic-backup-election-spbe/7633?u=benjaminion)。该方案的主要理念在于，如果真的发生了网络攻击，那我们可以放出烟雾弹，直到出现可靠的解决方案。

##  

 &lt;br/&gt;

## 常规会议

### 实现者会议

7月9日进行了第43次会议。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/165)
- [会议视频](https://youtu.be/4IooxDX_GfU?t=52)
- 我的[速记](https://hackmd.io/@benjaminion/B1WexiV1P)以及[Mamy的笔记](https://gist.github.com/mratsim/9fe87f650cde05c5da8c3c49da2f3b06)

除了常规会议内容，我们还讨论了一些特殊话题：

- 事故响应：Sigma Prime的Mehdi正在组建一个跨团队工作组，以规定如何对事故进行响应，为的是随时应对信标链上发生的故障。
- 弱主观性：我们对上文中Aditya的弱主观性报告的结果进行了讨论。然而在大多数情况下，我们这群开发人员性格都比较内向，因此在电话会议中没有太多的讨论。 但是，Aditya将召集另一个工作组，我希望在组内大家能热烈地讨论。

同时，我很期待Sigma Prime即将发布的”Fuzzing@Home”设置，该设置将其模糊测试 (fuzz-test) 环境放入Docker中，这样就可以通过大规模分布式的方式对客户端实现进行测试。

##  

 &lt;br/&gt;

## 客户端团队

- 客户端团队[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-53-altona-testnet-launched-bf41173a8513)的更新。顺便说一句，我们现在每两周发布一次Teku更新，读者可以查看我们的[更新日志](https://github.com/PegaSysEng/teku/releases)，而不是去看一篇辞藻华丽文章。
- 我们修复了Teku中的一个细小bug，Adrian Sutton将此事件[写了下来](https://www.symphonious.net/2020/07/06/exploring-ethereum-2-the-curious-case-of-the-invisible-fork/)。摘要：晚到的区块 (late-arriving blocks) 导致了令人惊奇的竞争状态。

今天上午Lodestar团队的Cayman出席了台北以太坊交流会，并对其产品套件进行了演示：[Web中的Eth2](https://www.youtube.com/watch?v=UxxLM7O65uE)。点击[此处](https://docs.google.com/presentation/d/1gX1S4FBmMdjyM5oUm5-sMtNZ3kPwEiwU3iNk7KnIw2E/edit#slide=id.g55f47d0478_0_10)浏览ppt。事实证明，Lodestar团队整理了一些我以前没有注意到的好工具：

  - [https://simpleserialize.com](https://simpleserialize.com/) (事实上，我听说过这个)
  - [https://enr-viewer.com](https://enr-viewer.com/) （我一直都期待着这个♥️）
  - [https://bls-keygen.com](https://bls-keygen.com/)

##  

 &lt;br/&gt;

## 写在最后…

我的Gitcoin上的第六轮二次方匹配 (CLR) 捐赠计划收到了48位小伙伴的[捐赠](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification)。非常感谢！你们太好啦

至于如何完善我的规范注释项目，我的脑海里有更大的蓝图，不仅仅是只完成信标链部分。在接下来的几周内，我将继续我的工作。

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2.0-存款过程]]></title><description><![CDATA[本文拆分讲解Eth2.0存款过程以及验证者可能遇到的其他状态。]]></description><link>https://www.ethereum.cn/ethereum-2-0-and-depositing-process</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-2-0-and-depositing-process</guid><pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate><content:encoded># ETH2.0-存款过程



来源 | [beaconcha.in](https://kb.beaconcha.in/ethereum-2.0-and-depositing-process)

本文将为您分阶段讲解存款过程。在阅读本文之前，我强烈建议读者先阅读[《Eth2.0密钥》](http://ethereum/)一文，以便更好地理解以太坊2.0的密钥是如何运作的。

 &lt;br/&gt;

# 存款合约




![p1.png](https://i.ibb.co/2tLqFTZ/p1-104f7b630a.png)





接下来我们分别看看上图的每个状态，并说明如何大致地确定每个状态的持续时间。

  &lt;br/&gt;

# Mempool-状态：未知

每一笔已签名的交易都得先访问**Mempool**，这可以称为交易的等候室。在此期间，交易状态为[pending (待处理)](https://etherscan.io/txsPending)。矿工会根据交易提供的gas费，选择优先处理让他们获益最大的交易。如果网络高度拥挤 (即许多交易待处理)，则新交易提交的**gas费**很有可能超过旧交易，从而导致旧交易的等待时间为**未知**。

  &lt;br/&gt;

# 存款合约-状态：已存款

一旦交易到达存款合约，**存款合约**就会检查交易的输入数据和价值。如果**交易额**低于1 ETH的**最低限制**，或者交易输入数据**不存在/无效**，交易将**被拒绝**并退回给发送方。

如下图所示，用户端创建的输入数据正体现了Eth2.0即将上线的验证者密钥和提款密钥。点击此处阅读《Eth2.0密钥》一文。

**为什么要花7.5个小时呢？**

为了确保交易不会因区块重组而作废 (开发者以代码呈现ETH1_FOLLOW_DISTANCE)，Eth2.0会将进入存款合约之后1024个Eth1.0区块的交易纳入考虑。处理完1024个Eth1.0区块后，还必须等待32个Eth2.0 Epochs (时段)，信标链才能识别该存款。在这32 Epochs过程中，验证者对新存款进行投票。然而，如果出现区块提议失败或者Eth1.0恶意节点 (负责将存款记录提供给Eth2.0网络)，就会导致更长的等待时间。既然如此，不如尝试自己运行节点吧！

计算方式：1024个区块= 1024 x〜13秒= 13,312秒=〜4小时，32 Epochs= 32 x 6.4分钟= 204.8分钟=〜3.5小时。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/3f4Cj4s/p2-26c9b1c292.png&quot;/&gt;&lt;/center&gt;



同样，Eth2.0链识别出存款之后（7.5小时后），通过beaconcha.in浏览器可查看，验证者状态将更新为已存款。

 

&lt;center&gt;被拒绝存款&lt;/center&gt;




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6Xx55xK/p3-675e1f4a97.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;被拒绝交易&lt;/center&gt;

  &lt;br/&gt;

# 验证者队列-状态：待处理



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QYn1NTN/p4-a47640b18c.png&quot;/&gt;&lt;/center&gt;




到了这步，信标链可以访问存款了。根据总共的存款数量，会产生一条验证者队伍。 每个Epoch仅激活四个验证者 (每天激活900个验证者)。

注意：前16,384个验证者 (即创世验证者) 不需要排队，而是直接从Slot 0开始质押。

  &lt;br/&gt;

# 质押-状态：活跃



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VDWPh3m/p5-9209e803a0.png&quot;/&gt;&lt;/center&gt;





验证者现在质押状态已被激活，可以提议区块并对证明进行签名——他们即将获得奖励！

  &lt;br/&gt;

# 其他验证者状态
- 存款无效 (Deposit Invalid)

交易的[BLS](https://kb.beaconcha.in/ethereum-2-keys)签名无效。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/8BkfGD9/p6-e529d82123.png&quot;/&gt;&lt;/center&gt;




-  验证者离线 (Active Offline)

即活跃验证者在2个epochs中未进行证明工作。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/kcbZFJm/p7-6d7a79f497.png&quot;/&gt;&lt;/center&gt;





- 在线验证者退出

由于验证者余额低于16ETH或验证者请求退出，处于在线状态的验证者当前正在退出网络。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/kcbZFJm/p7-6d7a79f497.png&quot;/&gt;&lt;/center&gt;





- 离线验证者退出 (Exiting Offline)

由于验证者余额低于16ETH或验证者请求退出，处于离线状态的验证者当前正在退出网络。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dtNQ2YQ/p9-e037e8d446.png&quot;/&gt;&lt;/center&gt;








- 在线验证者罚没 (Slashing Online)

在线验证者作恶，被驱逐出网络。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SXvkrTr/p10-4844884221.png&quot;/&gt;&lt;/center&gt;






- 离线验证者罚没 (Slashing Online)

验证者处于离线状态，但实施过恶意行径被驱除出网络。验证者正排队退出网络，需要等候至少25分钟。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Pjy1Lfk/p11-8ac1e1fbe8.png&quot;/&gt;&lt;/center&gt;




- 被罚没(Slashed)

验证者已被驱逐出网络，资金可在36天后提取。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/yfPWdZp/p12-6a9e8641f5.png&quot;/&gt;&lt;/center&gt;





- 已退出 (Exited)

验证者已退出网络，资金可在一天后提取。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/RzSZb8W/p13-5b79eefe43.png&quot;/&gt;&lt;/center&gt;


 

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

## </content:encoded></item><item><title><![CDATA[2020第二季度：以太坊活跃用户翻番]]></title><description><![CDATA[据Dapp.com第二季度市场报告，以太坊活跃用户量和交易额迅猛增长。]]></description><link>https://www.ethereum.cn/ethereum-users-double-q2-2020-report</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-users-double-q2-2020-report</guid><pubDate>Thu, 09 Jul 2020 00:00:00 GMT</pubDate><content:encoded>
来源 | [decrypt.co](https://decrypt.co/34768/ethereum-users-double-q2-2020-report)



&lt;br/&gt;
&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/XXnRzT2/406772dad9.png&quot;/&gt;&lt;/center&gt;


Dapp.com的2020年第二季度市场报告显示，在DeFi热的催化下，以太坊上的用户量和交易额均有大幅增长。

 

译者注：原[Dapp.com报告](https://www.dapp.com/zh/article/q2-2020-dapp-market-report)中的提要

- 2020年6月21日，DeFi dapp的日交易额达到了**历史最高点608,230,230.58美元**。同一天，Compound的治理代币COMP的价格也达到历史新高372.79美元。
- DeFi dapp转账超过49亿美元 (历史最高)，比第一季度增长了67%。DeFi总体量达到**115亿美元**。
- 在DeFi产品中，BAT是使用得最多的代币。BAT代币中产生了达**9.31亿美元**的交易额，大于ETH和Dai的交易总和。
- 以太坊上的活跃dapp用户量在第二季度增长了一倍 (97%)，激增**1,258,527名新用户**，创历史新高。
- 在6月5日前，以太坊上DeFi dapp的平均日活跃用户量是7,682。这个数字在COMP代币发行后增加了48%，达到**11,230**。
- 在六月，DeFi dapp交易额达到**57亿美元**，占以太坊网络上所有dapp总额的97.5%。
- 在COMP发行后，Compound的交易额从上半月的1.31亿美元上涨到下半月的33亿美元，增长了24倍。它的用户量也从2629增加到了11,879，增长了3.5倍。

 



2020年的第二季度可能会成为以太坊上去中心化应用 (decentralized application，简称dapp) 发展的转折点。

根据Dapp.com 2020年第二季度的Dapp市场报告，在基于以太坊的dapp上，活跃用户在单个季度的累计总量超过了**100万**。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NrShPRP/1-38793745b7.png&quot;/&gt;&lt;/center&gt;

DeFi应用大力助推这波增长。**六月交易额达到****57亿美元**，且其活动量在以太坊区块链的占比超过了97%。报告显示了以太坊对于DeFi成功的重要性，以及在最近几个月里DeFi的席卷之势。

[Compound在六月发布的COMP治理代币](https://decrypt.co/32547/compound-new-king-defi-after-just-one-day-comp-trading)推动了DeFi在第二季度的增长。与五月相比，DeFi的交易额增长了一倍，并将以太坊整个季度的DeFi总额推高至超过**103亿美元**。而EOS和TRON作为以太坊在DeFi领域最接近的两个竞争对手，在第二季度的交易额分别是18.9亿美元和2.6亿美元。

在6月21日，**DeFi 24小时交易额超过6亿美元**，创下所有区块链交易量的新高。

Dapp.com计算活跃dapp用户量的方式是累加整个季度所有与dapp发生过交互的用户。以太坊上活跃的dapp用户数从第一季度的637,000增加到第二季度的**1,250,000**。

而日活跃DeFi用户是一个范围更小的类别，指经常与以太坊DeFi产品交互的用户钱包地址。其数量也从第一季度还不足7,700增加到第二季度的**11,200**以上。

2020年第二季度的市场报告还指出Brave浏览器的BAT代币位居这季度总交易额的榜首，达到9.3亿美元。这令人惊叹的交易额得益于[流动性挖矿者](https://decrypt.co/33279/top-defi-yield-farmers-share-their-secrets-to-a-profitable-harvest)的加持，他们利用COMP分配系统的利好来增加收入。

这场闹剧的结果是，[最近的一次治理投票](https://decrypt.co/34176/comp-holders-vote-change-yield-farming-rules-compound)决定调整COMP的分配机制，以激励将体量和流动性导向用例更广泛的代币 (例如DAI和USDC稳定币)。

在第二季度，以太坊上新发布了**45个**新dapps，最接近的竞争对手TRON为33个。

数据显示，开发者可能更愿意在已有的dapp上下功夫，而不是发布新应用：在第二季度，所有区块链上仅有99个新发布的应用，相比之下，第一季度有135个。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/5sR1vBJ/2-e4bab0c808.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;

**第二季度又是以太坊称霸的一个季度**，无论是环比来看还是与TRON和EOS这类竞争协议相比，以太坊用户数量和每日交易量都有显著增长。

随着基于以太坊的DeFi不断发展，并且还有继续攀升之势，似乎越来越不可能会有对手能取代DeFi目前的宠儿地位。

声明：作者表达的观点和意见仅供参考，并不构成任何金融、投资或其他建议。


&lt;br/&gt;

&lt;br/&gt;
 
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2经济学]]></title><description><![CDATA[了解以太坊2.0的经济模型升级以及ETH的投资演进。]]></description><link>https://www.ethereum.cn/the-economics-of-eth2</link><guid isPermaLink="false">https://www.ethereum.cn/the-economics-of-eth2</guid><pubDate>Fri, 03 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [The Control](https://thecontrol.co/the-economics-of-eth2-dbcc78a2f48)



&lt;br/&gt;

*一位基金机构的投资者最近跟我说：“我相信比特币是数字黄金，但我不明白**ETH**的长期价值在哪里？因为它不像企业，背后有资金流动。纵观历史，当一个资产的总市值达数十亿，而其底层是没有基础价值作支撑的话，它最终会崩溃。**ETH**最后很可能走向这样的结局。”*

很多传统的投资者持相同的观点。他们现在相信投资比特币是有价值的，但他们不理解ETH的投资价值。不同于比特币简单且稳定的货币政策以及明确的价值贮藏叙事（数字黄金），ETH存在变动的货币政策使人困惑，且其价值贮藏特征是不明晰的。

即将启动的eth2可能会改变这个局面。Eth2的技术升级（参考[Danny Ryan的最新文章](https://blog.ethereum.org/2020/06/02/the-state-of-eth2-june-2020/)）令人振奋，并将吸引最多的聚光灯，但它在经济学上的升级可能带来更加深远的影响。

 &lt;br/&gt;

# 经济模型升级1：稳定货币政策

加密货币的一个新颖特征是没有央行可以随意改变货币政策。全球很多的央行都曾增加货币供应，牺牲了国民的利益（[最近的黎巴嫩](https://www.ft.com/content/a1c5f2aa-79a6-48ec-aa8e-6b5d60bda1f7)）。比特币社区有保持协议不变的文化，这使社区更容易对它的货币政策建立信任，而比特币货币政策的首要设计原则是保持数字货币的稀缺性。

以太坊社区在其知名创始人（Vitalik）的带领下，在早期形成了区别于比特币社区的创新文化。一些较早协议的变动使部分人觉得以太坊的货币政策会因为一些人的突发奇想而轻易改变。[DAO硬分叉](https://qz.com/730004/everything-you-need-to-know-about-the-ethereum-hard-fork/)是最广为人知的协议变动，但从2015年7月30日以太坊的创世块诞生以来，还有两个其他硬分叉[调整了区块奖励](https://media.consensys.net/the-thirdening-what-you-need-to-know-df96599ad857)。

实际上，今天以太坊的治理比大多数人想象的更接近比特币。按照计划，货币政策在以太坊2.0启动后会有一波变动（详情参阅下文）。一旦以太坊2.0上了主网，**货币政策变动的可能性将与比特币相仿**。两者的变动都是可能的，但概率不高，并取决于开发者、矿工和用户达成的共识。

 &lt;br/&gt;

# 经济模型升级2：降低发行率

在产生创世块的时候，[有7,200万个ETH分给了初期贡献者](https://etherscan.io/stat/supply)。在创世块之后，有3亿9千2百万个ETH通过与比特币相似的工作量证明（PoW）共识机制分配给了ETH矿工。[在PoW机制下，ETH从2015年7月开始每年通胀率约为11.2%](https://etherscan.io/chart/ethersupplygrowth)，与比特币每年同期5.58%的通胀率相比，大概是比特币的2倍。

在以太坊2.0，共识机制将从PoW转变为PoS （Proof-of-Stake 权益证明），发行量将大幅减少。阶段0启动之后，理论最大发行量将被触发，即每年2百万ETH。这意味着，以太坊2.0上线满一年后，ETH的通胀率将从过去一年的4.5%降至1.8%。基于对验证者数量、质押的ETH总量和交易费的保守估计，通胀率可能将远低于1.8% （详情参阅下文）。

在加密社区众所周知，比特币现在的通胀率大约是1.8%，相较下，低于[一篮子全球法币约2.99%的通胀率](https://www.statista.com/statistics/256598/global-inflation-rate-compared-to-previous-year/)。而相对不那么为人所知的是：以太坊2.0上线后，**ETH的通胀率将低于比特币的通胀率**。

 &lt;br/&gt;

# 经济模型升级3：烧毁交易费，可能使通胀率在远早于2140年就降至0

目前，所有与以太坊网络交易相关的费用都由矿工获得。这些交易活动增长迅速，在过去的一年里，矿工赚取的交易费达大约259,823个ETH ($5970万)。

根据[EIP 1559](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1559.md)，大部分的交易费将被烧毁，而不是直接支付给矿工。这意味着如果烧毁的交易费超过新发行量的话，净通胀率会是负数。基于PoS上线以及基于PoS的交易活动的假设，[此处](https://docs.google.com/spreadsheets/d/1zU1wzlDsw-BPWp5d4eJMJLHGuCbB_UJ2rPLP7eanW9I/edit#gid=1579490016)提供了eth2净通胀率的详细经济模型。

众所周知，从现在算起的120年后，当比特币的总供应量在2140年达到2,100万个时，其通胀率会降至0%。将货币政策写进代码这一举措使比特币持有者确信比特币的数字稀缺性。而ETH则没有这样稳定确凿的政策，导致持币者对ETH的数字稀缺性相对缺乏信心。但当人们认真了解了被敲定的新政策，会意识到**ETH的稀缺性远强于普遍认知**。

 &lt;br/&gt;

# ETH的投资演进

加密货币作为贮藏和转移价值的一种优良资产需要有7种特性——稀缺性、耐用性、可分割性、可移植性、可置换性、可辨认性和可编程性，而比特币是这7种特性的最佳体现。ETH目前拥有这7种特性中的6种，且在[可编程性](https://thecontrol.co/defi-usage-numbers-7e5e2cd5ab2e?source=rss----ce012282ea98---4)中表现突出，正是这个特性将加密货币与法币和黄金区分开来。

ETH目前所欠缺的特性是人们对其稀缺性的认知，这不符合一般的投资逻辑。因为事实是尽管以太坊在创新上是行业领先，且承载[最大量的交易活动](https://studio.glassnode.com/compare?a=BTC&amp;a=ETH&amp;c=&amp;c=&amp;e=&amp;e=&amp;m=fees.VolumeSum&amp;m=fees.VolumeSum&amp;mAvg=0&amp;mAvg=0&amp;miner=&amp;miner=&amp;scl=lin&amp;scl=lin)，但ETH的总市值仅为比特币的大约15%。至于前文所说的升级，直到代码被开发者落实、被矿工和用户认可之前，上述升级都还尚未敲定。但如果这些变化很快如描述般实现了，ETH的投资可能会开始与传统投资者熟悉的那套逻辑所契合。

&lt;br/&gt;

*声明：* [*1confirmation*](http://www.1confirmation.com/)*持有**ETH**。本文仅作信息参考目的，不构成**ETH**投资建议。在花大量功夫了解以太坊网络复杂性、参与以太坊生态前，请勿轻易购买。*

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[解读：COMPOUND与YIELD FARMING]]></title><description><![CDATA[DeFi热议的Yield farming到底有何魔力让大家趋之若鹜？本文详细解读Compound以及其掀起的借贷浪潮。]]></description><link>https://www.ethereum.cn/contextualising-compound</link><guid isPermaLink="false">https://www.ethereum.cn/contextualising-compound</guid><pubDate>Thu, 02 Jul 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [The Cipher](https://cipher.substack.com/p/contextualising-compound)



如果读者有一直密切关注市场，便会注意到**Compound和“收益 (yield)”**近期已然成为加密市场的爆点。我会在此文探讨yield的概念，它又是如何应用于DeFi的？以及如何适应当今大环境下的市场趋势？由于这部分内容面向的是更广泛的受众，如果读者对金融知识比较熟悉，可以略过下面的普及部分。

 &lt;br/&gt;

# 了解Yield (收益)

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/25ZCN6S/Compound1-cb91c00094.png&quot;/&gt;&lt;/center&gt;

在金融投资领域，**收益 (yield)** 是指投入一定的成本而获得的回报，通常以百分比来表示年回报在初始投资中的占比。收益还包括一年中所获得的复利。以下是一些获得收益的常见例子：

1. 假设您投入10万美元购买房屋并出租。在一年中，能获得约1.2万美元的租金收益。扣除了维护费用和其他费用共2000美元后，您的净利润为1万美元，因此收益率为10%。而这并不包含基础资产本身的升值。

2. 收益的另一种常见形式是投资股票产生的股息。股票的市盈率 (price to earnings) 是决定股票估值的关键因素，因为在可以用股票进行交易之前，投资者通常是依靠所持股的股利来满足日常花销。只要股息高于银行存款的收益，投资者何乐而不为。最近，由于股息下跌，股票回购已成为常态。

简而言之，“收益”(yield) 是指个人将资本存放在实体中而获得的回报。收益的高低受许多因素影响，比如投资所涉及的风险、向经纪人支付的业绩报酬、税收以及投资行为所处的法律环境。收益还受通货膨胀的影响。在印度，银行存款的存款利率约6％，且几乎没有任何风险。相比之下，新加坡的银行存款利率低于1％。造成这种差距的原因是，印度货币每年趋向于贬值。这也是资本外逃在新兴经济体中如此普遍的原因之一。

如果读者想要进一步了解资本和网络作用，我强烈建议阅读以下书籍：
1. 《广场与高塔》 （*Square and The Tower*）
2. 《金融之王》 （*Lords of Finance*）
3. 《金钱关系》 （*The Cash Nexus*）
了解了以上知识之后，我们一起来看看DeFi里的“yield”是指什么。

 &lt;br/&gt;

# 加密货币中的Yield (收益)


 
目前，所有在早期就持有大量加密货币的参与者都面临着如下挑战（i）代币可能会贬值，（ii）如何从所持代币中赚取收益。DeFi里的“收益”(yield) 就有一石二鸟的效果。大约有75％的ETH在一年内没有发生转移。一些巨鲸通常会收购大量ETH并持币观望，因为在他们的预期中基础资产本身会随着时间增值。那么可以如何变现闲置资产呢？这就是智能合约发挥作用的地方。

根据历史经验，任何基于加密货币的借贷活动都具有一定挑战性，因为一旦抵押加密货币而借出法币，赎回抵押资产的可能性极低。如果读者想了解更多背景资料，可以阅读我于2017年写下的[这篇文章](https://medium.com/outlier-ventures-io/how-to-realize-the-potential-of-blockchain-in-developing-economies-b94b24d6ce7c)。智能合约之所以助推了借贷和链上交易活动，是因为其能够

(i) 借助预言机跟踪价格来源，以及

(ii) 在没有人为干预的情况下实行清算。

**这意味着什么？**
(i) 当MakerDAO上的贷款没有足额抵押品时，没有人会提醒借款方并要求其补充抵押品。而是系统会自动跟踪价格，并通过激励网络的用户来对借款方进行清算。

(ii) 在Curve.fi、Kyber和0x上并没有业务人员跟踪借贷订单的进行，系统会自动核对订单细节。

系统自动跟单这一功能还不够让人眼前一亮。**DeFi的强大之处在于，其能够****验证货币流向以及****决定清算价格。**而我们能够以目前的速度追踪黑客，DeFi的这一功能功不可没。那么这和收益有什么关系呢？我们还需要考虑三种推动力。

1. 当前，加密生态系统中有大量闲置资金正期望投入使用。
2. 用于处理交易的知识层和基础设施层已经就绪，因为最近两年来，像Maker和0x这样的团队已经对他们的系统进行了充分测试和扩容。
3. 应用层已经趋于成熟，而应用层的活动最为频繁（我在稳定币相关文章中有所提及）

闲置资产、成熟的基础设施以及各种获得充足投资的新兴应用，三者的结合就像一场完美风暴，催生新一轮加密应用浪潮。从某种意义上说，我们正处于这场风暴中。而收益则起到吸引大众参与DeFi的作用。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/dWLhyNW/Compound2-f2c013dc54.png&quot;/&gt;&lt;/center&gt;

当前，DeFi收益主要基于交易活动。市场始终会有以下两种需求：

（i）增加去中心化交易的流动性

（ii）从交易中获得利润。

只要DeFi可以提供有竞争力的价差 (即买入和卖出价格之间的差额) 和优于中心化交易所的贷款利率 (例如Bitmex贷款利率)，就会有寻求交易的用户需求。与中心化交易平台比如币安相比，使用DeFi可能成本会更高，因其不需要严格遵守AML / KYC规则 (即反洗钱和用户信息规则) 并且资金出入耗时更短。一旦利率或利差远高于中心化平台，考虑到其中的智能合约风险，资本巨鲸就不会继续使用DeFi了。

为什么用户接受代币贷款？最轻而易举的方式是通过做空个人借贷的资产而获得利润。当资本巨鲸贷了一笔以美元计价的BAT时，假设BAT的价格将在未来几周内下跌。也就是说，他们抵押了美元而贷出一笔加密货币，然后在去中心化交易所卖出，一旦该加密货币价格下跌，就立马回购并归还贷款。如果把贷款利率也考虑在内，贷款价格和还款价格之间的差价就是做空所得的利润。

如果碰到Maker这类包含治理的代币，还会出现活跃投资者通过出借基础资产增加投票权重。换句话说，当前加密货币贷款既可以用于治理，也可以用于价格预测。

 &lt;br/&gt;

## Compound浪潮

看到这里相信读者已经了解什么是收益、其在DeFi中如何运作以及获得收益的常见手段，那么现在我们就可以探讨一下为何上周大家如此关注yield farming。自2018年以来，Compound就是一个出色的借贷平台，其代币经济模型经历了多次迭代。Compound一直以来都是MakerDAO最大的竞争对手，并在上周逐步发布了其代币。

两者的关键区别在于，Compound激励借贷双方进入compound的代币池，每天都会有代币产生，而产生的代币作为用户的奖励。与之相比，Maker代币的主要用途是投票 (而不是作为奖励)，而Aave代币主要用于减少利息支付金额。

Compound每天分发的代币价值约为86万美元 (假设[2880个代币，每个价值300美元](https://medium.com/compound-finance/expanding-compound-governance-ce13fcd4fe36))。由于用户个人几乎可以立即兑换compound代币并出售，因此用户普遍将大量资金转移到Compound的借贷市场以赚取收益和代币奖励。Compound的激励机制主要以**两种关键方式**起作用：
1. 巨鲸可以将其闲置的USDT / USDC存入Compound平台几天，以获得Comp代币，然后可以卖出获取利润。
2.鉴于借贷双方都大量增加，小型用户也可以在几天内获得高达1％的收益。相比之下，某些国家/地区的年化收益率仅为0.1％，读者这下能明白Compound流动性挖矿现象为什么能够像火一样迅速蔓延开了吧。

下图可以或多或少地解释Compound上的用户行为。图表受Nir Eyal的《Hooked》启发。其运作方式如下：

A.巨鲸在Compound进行大额贷款/借款
B. 获得大量代币后，待其价格上涨后出售
C. 价格上涨加上大量借贷活动，随之而来的高年利率吸引了更多用户使用山寨币参与借贷
D. 由于大量借款人以期通过交易赚取利润，供应量很快就被耗光
旁注：我希望Nir Eyal不要因为盗图而起诉我。建议读者购买他最新的书[*Indistractable*](https://www.nirandfar.com/indistractable/)，这是一本好书。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/hM4yjr4/Compound3-c08b97ced7.png&quot;/&gt;&lt;/center&gt;

如果读者想知道这会对Compound产生什么样的影响，可以参考这段时间以来Compound平台借出的金额，并大胆猜测一下Compound是什么时候发布的代币。

![Compound4.png](https://i.ibb.co/4JrcctF/Compound4-dd09ae3850.png)

在大约两周的时间里，该协议的资产管理规模 (AUM) 增加了约3.4亿美元。有趣的是，**需求方 (借款人) 似乎大部分来自机构参与者**。为了了解其中原因，可以看看这张图表，分析了Compound的用户类型。此代币分发机制已经吸引到大约800名借款用户 (他们必须借出3.3亿美元) 和5000多名新的贷款用户。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/g7j3Rk6/Compound5-0b0a9fde9f.png&quot;/&gt;&lt;/center&gt;

**Comp代币的分发多多少少看起来也像是巨鲸们的游戏**。下面分享的图表标记了主要的Comp代币奖励获得者。大约20个地址共获得了所有Comp代币的一半。而参与Comp代币分发的钱包所获得的Comp总值中位数为0.07个 Comp，约20美元。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/DpB3Vh9/Compound6-a248cda645.png&quot;/&gt;&lt;/center&gt;

在我看来，其中的关键点显而易见：

- 机构投资者对DeFi借贷仍有庞大的需求，并将持续维持其需求。而Compound正是瞄准了其需求。
- 当前，Compound上的借贷激励是分发Compound代币。随着代币供应的增加，价格将暴跌。而这也将导致Compound平台的借出金额减少。
- 到至6/23日为止，仅约16％的代币供应流向交易所。其代币估值可能虚高。
- 这疯狂的奖励机制是Compound借贷激增的主要推手。目前Compound面临的挑战是提供多样化的借贷方式 (例如基于零售、法币的借贷) ，以及如何继续将其代币应用于社区治理的核心方面。
- 资本巨鲸是游戏主要玩家。



我确实倾向于认为，“yield farming”的概念对于普通用户而言被高估了。风险在于，在接下来的日子里，用户既可能无法维持高收益，又可能无法获得Comp代币奖励。奇怪的是，当前流行的Compound借贷使人们联想起一年前中心化交易所引发的流动性挖矿行为。我指出这些并不是暗示项目本身注定要失败，而是要强调一个事实，即多元化的形式至关重要，因为代币价格的下跌可能会导致其自身的螺旋式循环。如果Compound选择增发代币，我们可以等着看会发生什么。

然而，这确实证明了基于代币的激励措施可以在短时间内吸引大量流动性。Synthetix开创了代币激励的先河，而Compound则发挥得淋漓尽致。在未来几个月，我们很可能会看到各种各样的DeFi项目在代币经济和产品效率方面相互竞争，以吸引更多用户。从这个角度来看，DeFi会为普通用户呈现更好的产品。DeFi项目之间的竞争热，让我们拭目以待。

 

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[解读以太坊2.0密钥]]></title><description><![CDATA[了解ETH2.0密钥的运作机制，以及与ETH1.0的区别。]]></description><link>https://www.ethereum.cn/ethereum-2-keys</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-2-keys</guid><pubDate>Tue, 30 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [beaconcha.in](https://kb.beaconcha.in/ethereum-2-keys)

#  

&lt;br/&gt;

# 以太坊2.0密钥概述



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/9qLhj3P/p1-938fe8e0e5.png&quot;/&gt;&lt;/center&gt;




#  &lt;br/&gt;

# 总述

以太坊1.0和2.0的密钥是基于相同的思路并使用[椭圆曲线密码学](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography)创造出来的。但是，以太坊2.0的功能性有所增强，在创造密钥时需要不同的参数，并使用[BLS (Boneh-Lynn-Shacham)](https://en.wikipedia.org/wiki/Boneh–Lynn–Shacham) 签名方案。

#  &lt;br/&gt;

# 以太坊2.0密钥有哪些？

在以太坊1.0，用户访问他们的资金只需要**一个私钥**，而在以太坊2.0中则需要两个不同的密钥——**验证者私钥**和**提款私钥**。

##  

## 验证者密钥

如下图所示，验证者密钥由两个元素组成：

- 验证者**私钥**
- 验证者**公钥**

由于**验证者私钥**需要**随时**对ETH2进行链上签名，比如区块提议和证明。因此这些密钥必须保存在热钱包里。

这种灵活性使得验证者签名密钥可以快速地在设备间进行迁移。但是，如果密钥丢失了或被盗了，盗窃者可以**通过以下两种方式作恶**：

- 通过以下的做法使验证者被[罚没](https://kb.beaconcha.in/glossary#validator-lifecycle)：
  - 作为[区块提议者](https://news.ethereum.cn/ethereum-2-keys/#block-proposer)时，对同一个时隙(slot) 的两个不同信标区块进行签名投票
  - 作为[区块证明人](https://news.ethereum.cn/ethereum-2-keys/#attestations)时，对另外一个区块进行环绕证明投票
  - 作为[区块证明人](https://news.ethereum.cn/ethereum-2-keys/#attestations)时，对同一个目标检查点进行两次不同的证明投票
- 强行[主动退出](https://news.ethereum.cn/ethereum-2-keys/#validator-lifecycle)，阻止验证者质押，并给提款密钥所有者提供ETH余额的访问权限。




**验证者公钥**包含在**存款数据**里，作用是使得ETH2能够识别验证者身份。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/g7XyhJT/p2-416ecf39d8.png&quot;/&gt;&lt;/center&gt;


##  

## 提款密钥

如果在[阶段1和阶段2](https://notes.ethereum.org/@serenity/handbook)能够实现ETH转移的话，那么转移验证者的余额则需要用到提款密钥。如同验证者密钥，提款密钥也由两部分组成：

- 提款私钥
- 提款公钥

丢失了这个密钥意味着无法访问验证者余额。但是，验证者仍然可以对证明投票和区块进行签名，因为这些操作只需要验证者的私钥，只是如果密钥丢失了的话验证者这样做基本没法取得奖励。

要提款的话，验证者状态必须是[“已退出”](https://news.ethereum.cn/ethereum-2-keys/#validator-lifecycle)。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Ns4zTzj/p3-38c89175a1.png&quot;/&gt;&lt;/center&gt;





#  

#  &lt;br/&gt;

# 单个ETH1钱包中有多笔存款（即有多个验证者）的情况

每个验证者都有他们自己**唯一的存款数据**，而[信标链](https://news.ethereum.cn/ethereum-2-keys/#beaconchain)通过存款数据来识别验证者。一**个验证者有四个密钥。**

问：我要如何重新将存款存进验证者余额里？（例如[有效余额](https://news.ethereum.cn/ethereum-2-keys/#current-balance-and-effective-balance)已被清空）

答：发送另一笔大于等于1 ETH的交易到存款合约，以验证者的特定存款数据作为交易输入。在第一笔存款交易后，这个唯一的存款数据会储存在区块链上，并可以在多个浏览器上查询到。

注：存款合约要花费大概**360,000 gas**，但鉴于退款操作需要一定成本，建议将交易费定在**400,000到500,000 gas之间**。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SvdQSBS/p4-89ac86dc47.png&quot;/&gt;&lt;/center&gt;




&lt;br/&gt;

# ETH2.0验证者的助记词

在过去的几年里，我们已习惯于[12到24个单词的助记词系统](https://en.bitcoin.it/wiki/Seed_phrase)。我们为什么要倒退回本地保存密钥呢？这方式显然更复杂、更不安全。

在BLS密码库的审计完成之前，目前已知的硬件钱包将不支持ETH2.0密钥的产生。[EIP-2333](https://eips.ethereum.org/EIPS/eip-2333)和[EIP-2334](https://eips.ethereum.org/EIPS/eip-2334)提供了解决方案，但仍有待实现。基于这些认知，我们可以预见在阶段0启动的时候，**助****记****词**系统是不可用的。

##  

## 它是怎么运作的？

[助记词](https://en.bitcoinwiki.org/wiki/Mnemonic_phrase)和路径都是为大家所熟知的功能了，[用户在访问他们的硬件钱包时](https://ethereum.stackexchange.com/questions/19055/what-is-the-difference-between-m-44-60-0-0-and-m-44-60-0)也经常会碰到。

##  

## “旧的ETH1.0”的路径结构和示例

m/44’/60’/0’/0

[m / purpose’ / coin_type’ / account’ / change / address_index](https://ethereum.stackexchange.com/questions/19055/what-is-the-difference-between-m-44-60-0-0-and-m-44-60-0)



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SvdQSBS/p4-89ac86dc47.png&quot;/&gt;&lt;/center&gt;







同样的逻辑也适用于ETH2.0密钥，只是有一些**不同的参数**。会有一个**“父密钥”**（助记词）使得用户可以将尽可能多的验证者连结到一个**提款密钥**里。如此一来，用户可以通过助记词**导出所有的密钥**。下图对此做出了简要概述：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ygy94TY/p5-574509f05e.png&quot;/&gt;&lt;/center&gt;







来源：[Carl Beekhuizen](https://blog.ethereum.org/2020/05/21/keys/) 

Cr: Nishant Das 负责事实核查

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/6/27）]]></title><description><![CDATA[测试网工作如火如荼，Altona将于6月29日创世，由来自五个团队的验证者参与。]]></description><link>https://www.ethereum.cn/wnie2-2020-6-27</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-6-27</guid><pubDate>Sat, 27 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/eth2_news/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200627)



  &lt;br/&gt;

## 要点速览

Danny带着《Eth2更新速览#12》又与我们见面了。

 &lt;br/&gt;

## 阶段0：信标链

自上期以来规范没有发生更改，但下周预计会发生一次无伤大体的改动，包括一些测试进展并且有可能应用最新的存款合约（参见下文）。

如同Danny在[Eth2更新速览](https://blog.ethereum.org/2020/06/23/eth2-quick-update-no-12/)中所阐释的一般，考虑到Vyper编译器的安全性问题，存款合约已经从Vyper重写为Solidity语言，并且经过重新验证。新合约保留了之前的接口，因此对于客户端们来说没有产生影响，除此之外，**由于Solidity的优化程度更高，新合约还能节省gas消耗。形式化验证报告请点击[此处](https://github.com/runtimeverification/deposit-contract-verification/blob/master/deposit-contract-verification.pdf)。总的来说，我个人非常青睐Vyper语言。对于在区块链上编写代码的风险，Vyper采取了一种周全保守的应对方式。我非常希望多年后Vyper能成为我们可以信赖的语言。但就目前而言，这可能是最佳解决方式。Vyper的开发者之一对此给出了自己的[看法](https://twitter.com/fubuloubu/status/1275550047833374725)。

在[BLS密码库](https://github.com/supranational/blst/)方面，Supranational已经开源了他们新的Blst库。我们目前在寻求如何将其与Teku客户端集成。Nimbus团队也在对一些BLS库进行[评估](https://notes.status.im/nim-bls-curve-backends)。

Afri Schoeden针对三个Eth2客户端执行了一些[基准测试](https://github.com/q9f/eth2-bench-2020-06/blob/master/res/2020-06-eth2-bench.pdf)：Prysm, Lighthouse以及Teku。尽管结果很有趣，但只是早期说明。目前，我们在提高Teku性能方面正在取得飞速进展，Prysm团队也一直[埋头苦干](https://www.reddit.com/r/ethstaker/comments/hfb4sb/preliminary_ethereum_20_client_metrics_for_early/fvxbzdk/)。因此，我们的目标是不断变化的。

另外，在诠释结果时需要格外小心。例如Teku从未超过30个节点的原因是30是我们的默认限制：这是一个命令行参数。虽然这是一项艰巨的任务，但是Lighthouse团队在使得客户端更轻巧高效方面给出了完美的答卷。

  &lt;br/&gt;

## 测试网

### Witti

Witti作为第二个多客户端测试网启动于一个月前，运行时期并没有发生意料之外的情况，这也是我们希望看到的。

Witti初期由Lighthouse，Prysm和Teku节点参与，Nimbus也在不久之后加入。几个星期以来，由于低参与度，导致测试网在很长一段时间里都无法完成最终确定性。这似乎是测试网的特性，实际上这种情况在真正的网络中并不会太常见。参与者容易忽略他们的测试网验证者角色。

我认为可以任由Witti在少量验证者的情况下运行，观察二次泄漏 (最终确定性恢复机制) 能否成功启动足够的非活跃权益以再次开始最终确定。

### Altona

柏林地铁路线图的下一站将停靠Altona！(但我找不到这个站名，Afri你确定吗？) **Altona将是首个采用0.12.1版本规范的联合测试网，也是正式多客户端测试网的候选者。**

Altona的预计创世时间为UTC时间6月29日12:30，将由五个团队的640名验证者参与(可能还有一些潜入验证者)：Teku、Prysm、Nimbus、Lighthouse以及以太坊基金会。由于Afri抽不出身，这次应该不会有直播计划。但是在Altona的Dicord频道中一定会有很多相关讨论，欢迎参与。

### 网络攻击计划

在这周的[开发者会议](https://hackmd.io/@benjaminion/r1PieQMAU)中，Danny宣布将启动[**“网络攻击”计划**](https://notes.ethereum.org/@djrtwo/Hkth99G3I)。为了减轻客户端团队的负担，本次计划将主要由以太坊基金会组织。在攻击计划中，无论是针对客户端、网络还是协议，只要有人成功发起攻击，就能获得奖励。这个计划可能会在未来几周内启动，各位是不是已经技痒了？赶快做好准备吧！

### Onyx

虽然放在最后但绝非不重要的一点是Prysm的Onyx新测试网。虽然本质上来说是一个单客户端测试网(几乎全部由Prysm节点运行)，但实际上其他客户端都可以加入。我们正在就Onyx对Teku进行同步和测试。

上文谈及的测试网，我认为更倾向于“开发者网络”，是各个客户端团队的操练场，也还并没有投入许多精力到用户体验的优化中。而Onyx却有着不同的目标：希望鼓励[最大范围](https://prylabs.net/)的参与。**无论读者是否打算长期运行Prysm节点，这的确是了解如何运行验证者的好机会。**

Onyx持续运行了约两周，目前已经超过23000个验证者。

  &lt;br/&gt;

## 释义性文章

CoinTelegraph发布文章[《自己运行节点还是选择质押服务》](https://cointelegraph.com/news/ethereum-20-the-choice-between-ones-own-node-and-a-staking-service)，探索了这两种方式。在下文的“其他资讯”板块中，可获得更多相关信息。 CoinTelegraph的另一篇文章则权衡了Eth2给以太坊生态系统带来的[好处和风险](https://cointelegraph.com/news/ethereum-20-should-be-secure-and-scalable-but-poses-risks-for-users)。

我们优秀的伙伴ECN (以太坊社区网络) 举办了一场线上AMA活动，主题为[“Hello, ETH2.0”](https://twitter.com/Ethereum_CN/status/1273627505975603200)。读者可点击浏览[回顾文章](https://medium.com/@ethereumcn_43714/hello-eth2-0-ama-e28837e7ce11)，以及[AMA问答记录](https://docs.google.com/document/d/1foYGbeRMB9MqrjKQZY1pf15wenPg333k_KP4o636AXg/edit) (均为英文版)。

译者注：Wow，感谢Ben的关注和收录，期待以后有机会邀请Ben做客中国社区！

Nick Tomaino在其发表的文章《Eth2的经济学》中讨论了Eth2如何为以太坊带来长期价值。

 &lt;br/&gt; 

## 研究工作

如果对Eth2网络 (networking) 工作感兴趣的话，请务必查阅Jonny Rhea在Ethresearch上关于Packetology的帖子。开始是了解[对验证者去匿名化](https://ethresear.ch/t/packetology-validator-privacy/7547?u=benjaminion)。其次是关于测试网[区块广播的分析](https://ethresear.ch/t/packetology-eth2-testnet-block-propagation-analysis/7561?u=benjaminion)。希望能看到更多诸如此类的研究。

虽然当前讨论的声音都围绕着阶段0信标链的发布，但许多关键工作仍然在幕后悄然进行。例如，以太坊基金会的Guillaume Ballet与PegaSys的Mikhail Kalinin等人针对Eth1-Eth2的合并 (也即所谓的阶段1.5) 进行了大量工作。这是Guillaume的最新成果：[基于 Geth 的 Eth1](https://ethresear.ch/t/architecture-of-a-geth-based-eth1-engine/7574)引擎架构。

我已经停止跟进无状态以太坊的相关工作，因为实在是太繁杂了。但是无状态工作仍然是Eth2后期阶段的重要推动力。此处是最近的无状态以太坊电话会议的笔记。

自开始讨论这个问题以来，我的PegaSys同事Alexandre和Olivier就如何在Snarks中将哈希加速200倍以上发布了一项提案。其中涉及到数理，但其提供了**见证压缩**的解决方案，这有可能对无状态工作产生巨大影响，尤其是Vitalik也在最近的Eth2开发者会议中有所提及。

  &lt;br/&gt;

## 常规会议

### 实现者会议

6月25日进行了第42次会议。

- [Agenda](https://github.com/ethereum/eth2.0-pm/issues/162)会议议程
- [Video](https://youtu.be/P1AEmUt9ltg?t=327)会议视频
- 我的[速记](https://hackmd.io/@benjaminion/r1PieQMAU)以及Cat Herders的[完整笔记](https://github.com/ethereum/eth2.0-pm/blob/555d787a21c372b5cec5d849ebc3ddf1b6f0aa5b/eth2.0-implementers-calls/call_042.md)

会议中我们除了探讨“网络攻击”计划之外，还研究了其他有趣的话题。比如，Aditya讨论了“[弱主观性时期](https://blog.ethereum.org/2014/11/25/proof-stake-learned-love-weak-subjectivity/)”，他预估该时期持续约两周。我认为这比许多人的预期要短很多。等到Aditya发表了他的文章之后，我会回过头来，再次解释该概念并研究其结论。

如果读者想要做一些提前工作，可以先浏览Vitalik五年半前发布的文章，了解何为弱主观性。还有我的同僚Adrian Sutton也发布了[文章](https://www.symphonious.net/2019/11/27/exploring-ethereum-2-weak-subjectivity-period/)，简单解释了弱主观性的概念。

如果读者想了解基础网络的相关问题，我们在会议中讨论了一些规范细节，包括：某些用途是否真的需要提供快速压缩 (Snappy compression) 这一选项、yamux在libp2p的使用、Noise协议中的不兼容问题以及时间差异参数 (clock disparity)。

### 密钥管理

6月18日还举办了一个[会议](https://github.com/ethereum/eth2.0-pm/issues/161)，讨论了Eth2密钥管理的最佳实践，以及各个客户端需要实现什么来加强密钥管理的安全性。我没能参加这次会议，但是Mamy做了一些[笔记](https://github.com/ethereum/eth2.0-pm/issues/161#issuecomment-646086662)。基本上来说，客户端团队都表示对会议内容无异议。

注意：点击[此处](https://github.com/ethereum/EIPs/pull/2743)、[此处](https://github.com/ethereum/EIPs/pull/2744)、[此处](https://github.com/ethereum/EIPs/pull/2749)和[此处](https://github.com/ethereum/EIPs/pull/2748)可查看与Eth2密钥生成和储存相关的EIPs近期更新。可能还会有更多更新，读者们敬请关注。

  &lt;br/&gt;

## 其他资讯

ConsenSys公布了其[Codefi质押试点计划](https://consensys.net/blog/press-release/consensys-codefi-announces-ethereum-2-0-staking-pilot-program-with-six-members/)，这是Eth2质押服务平台，面向的客户是机构性的质押者。这一消息引起了不少积极的讨论，但[并不是](https://twitter.com/koeppelmann/status/1273013226364698625)每个人都对此持积极态度。

首先我先申明其中一个好处：我是Eth2客户端Teku的产品负责人，Codefi质押正是在此客户端上进行的。(读者可能会在Coindesk的文章中找到我的一些引述)。虽然Teku的设计将面向机构性的质押者，但我同样深信，如果没有大量的个体质押者，Eth2将无法实现其目标。

我可能会在接下来的几周内 (当然不是在午夜时分) 给大家带来更多相关的信息。简单来说，我倾向于采取“两者兼顾”的观点。

- 客户端团队[Nimbus](https://our.status.im/nimbus-june-update/)和[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-52-onyx-testnet-launched-a87a937f292e)的更新
- Sigma Prime的[模糊测试](https://blog.sigmaprime.io/beacon-fuzz-05.html)更新

 &lt;br/&gt; 

## 写在最后

Gitcoin二次方匹配捐赠计划又开始啦！我没有为What’s New in Eth2这一栏目提供具体的捐赠方式，但是如果读者想贡献自己的力量，那么我在上一轮发布的[Eth2规范注释项目](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification)仍然可以捐赠。非常感谢所有在本轮已经捐款的读者们，在我还没宣传之前就已经捐赠了！

在“[规范注释](https://benjaminion.xyz/eth2-annotated-spec/)”这个项目中，我正持续跟进其最新的规范更新，但是进展缓慢。我计划在接下来的几周内加快速度，以尽快完成“信标链状态转移”的最后一部分。

  &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#12]]></title><description><![CDATA[Solidity存款合约完成形式化验证；首个公共测试网Altona下周启动，集成最新规范。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-12</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-12</guid><pubDate>Wed, 24 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/06/23/eth2-quick-update-no-12/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



如往常一样，eth2的许多相关工作依然在持续推进。除了一些进展更新（参阅下面的Eth2现状）以及其他公开工作总结中的内容，客户端团队、贡献者、社区成员以及准验证者也一直都很忙碌！

在本文中，我们将谈到存款合约的重要动态，以及实现0.12版本规范的重大举措。

&lt;br/&gt;

# 要点速览

- 新的[Solidity存款合约](https://github.com/axic/eth2-deposit-contract)已完成形式化[验证](https://github.com/runtimeverification/deposit-contract-verification/blob/master/deposit-contract-verification.pdf)，并纳入赏金计划
- 应用[12规范版本的Altona](https://github.com/goerli/witti/issues/17)测试网预计下周启动
- 继续对Sigma Prime的[beacon-fuzz](https://github.com/sigp/beacon-fuzz)模糊测试进行资助，让漏洞无处遁形
- [最新eth2博客文章速览](https://blog.ethereum.org/2020/06/02/the-state-of-eth2-june-2020/)

##  &lt;br/&gt;

# Solidity存款合约及形式化验证

在此，我们宣布推出使用Solidity编写的、更安全的新[eth2存款合约](https://github.com/axic/eth2-deposit-contract)！该合约保留了之前的公共接口 (增加了[EIP 165](https://eips.ethereum.org/EIPS/eip-165)中的`supportsInterface` 功能)，因此对于当前的客户端和开发者工具来说，这次更改毫无影响。实际上，合约的Solidity代码主要是根据初试的Vyper合约进行逐行转化，以便进行审核及形式化验证。

在过去几个月中，[Alex Beregszaszi](https://twitter.com/alexberegszaszi)一直在致力于用Solidity重写eth2存款合约，目前已经由多位Solidity专家完成审核，并且也通过了RuntimeVerification的[形式化验证](https://github.com/runtimeverification/deposit-contract-verification/blob/master/deposit-contract-verification.pdf)，在很大程度上再次应用了最初为Vyper版本合约编写的K规范。

尽管Vyper版合约经过了严格的测试、审查和形式化验证，但对于Vyper编译器的安全性，依然存在隐虑。因为在Vyper合约进行字节码验证时，在编译器中发现了多处漏洞 (已经修复)。除了首次形式化验证，[Suhabe Bugrara](https://ethresear.ch/u/suhabe/) (ConsenSys R&amp;D) 再次对其进行了[复核](https://github.com/suhabe/eth-deposit-contract-vyper-review/blob/master/EthDepositContractVyperReview.pdf)与形式化验证，正式规范基于其结果进行了许多优化 (有助于简化Solidity版存款合约的验证)。尽管验证结果证明了其可靠性，但Suhabe依然认为只要使用Vyper编译器，那么就不能说字节码是安全的。

同时，[ConsenSys Diligence](https://diligence.consensys.net/blog/2019/10/vyper-preliminary-security-review/)和[Trail of Bits](https://blog.trailofbits.com/2019/10/24/watch-your-language-our-first-vyper-audit/)对Vyper编译器进行了深入的安全性调查，结果发现了更多漏洞，并且引发了大家对Vyper编译器代码库系统安全性的担忧。

抛开这些调查结果，Vyper仍然是一种很有潜力的编程语言。基于Python的编译器正处于持续开发中，并且有许多贡献者都在探索如何将Vyper规范化，并且为其寻求替代编译器。

尽管对形式化验证之后的代码充满信心，但在Vyper编译器中发现的问题导致我们对字节码验证极度依赖。相比使用有问题的编译器，然后再验证这些已知 (或未知) 的漏洞并没有对字节码产生影响，不如一开始就使用安全性得到公认的编译器对字节码进行验证。

为了避免关键的存款合约在安全性上受到任何质疑，我们建议在eth2主网使用新的Solidity合同，我们也欢迎Solidity合约和EVM代码专家来对[新存款合约](https://github.com/axic/eth2-deposit-contract)进行审查和[形式化验证](https://github.com/runtimeverification/deposit-contract-verification/blob/master/deposit-contract-verification.pdf)。如若在存款合约中发现任何漏洞，都可以申请[Eth2阶段0赏金](https://notes.ethereum.org/@djrtwo/phase0-bounty)。

*注意：新的存款合约暂未被纳入[规范库](https://github.com/ethereum/eth2.0-specs)。我会在这周将Solidity合约并入规范，并且尽快以次要版本形式发布。在此提前宣布是为了给社区预留充分的时间对其进行审查。*

  &lt;br/&gt;

# Altona: 0.12版本规范测试网

自从`0.12`版本规范发布以来，客户端团队都马不停蹄地对其代码库进行更新和测试，以迎接公共测试网的到来。

我看到了很多来自社区 (discord/reddit等等) 的疑问：为什么一个看起来并不重大的更新却需要耗费这么长的时间来完成？尽管每个客户端的代码库和面临的挑战不尽相同，但客户端团队们都对`0.12`版本规范极为重视。虽然这个版本的规范更新并不棘手，但是大家在强化客户端安全性和功能性方面花费了额外的时间，以期为主网发布之前的最后一个半主要版本规范做足准备。

采用0.12版本规范的第一个公共多客户端测试网——[Altona](https://github.com/goerli/witti/issues/17)预计在接下来的7天内启动。初始时期，Altona测试网将由主要客户端团队（计划是Lighthouse/Nimbus/Prysm和Teku），Afri Schoedon和几位EF团队成员进行参与。发布之后，将公布存款合约地址，届时就可以开放给公众参与了。

如同之前的多客户端测试网，Altona更像是一个开发者网络，而不是以最终用户为主导的测试网。也就是说，Altona的首要任务是帮助客户端团队在产品环境中测试其0.12版本软件，并且使得eth2工程师能够发现并解决多客户端情境中的漏洞。即使如此，我们依然欢迎大家参与到Altona测试网中。如果Altona成功运行，那么我们会开启一个更大的、以社区为主的主网配置测试网，最少需要16,384名验证者来激活网络。

*对了！Altona会使用最新的Solidity存款合约。如我所说，这对eth2客户端软件来说毫无影响，因为公共接口没有改变。十分期待在产品环境中对其进行测试！*

  &lt;br/&gt;

# 资助Sigma Prime的beacon-fuzz

在此我们很高兴宣布继续对Sigma Prime的多客户端模糊测试[beacon-fuzz](https://github.com/sigp/beacon-fuzz/)进行资助。截至目前，这个项目已经取得了巨大成功，检测出了系统中所有客户端的[漏洞](https://github.com/sigp/beacon-fuzz/#trophies)。

大家可以参阅[Sigma Prime的博客](https://blog.sigmaprime.io/beacon-fuzz-05.html)来跟踪进展。也请大家持续关注 `beacon-fuzz`的扩展计划“宅家进行模糊测试”，以便能参与其中，说不定在家庭电脑上就能找到bug！

  &lt;br/&gt;

# 最新Eth2博客文章

如果读者朋友们还没有阅读我几周前发布的文章，现在也为时不晚！请参阅[《Eth2截至2020年6月的进展》](https://blog.ethereum.org/2020/06/02/the-state-of-eth2-june-2020/)，看完之后大家会对eth2项目的发展现状以及eth2如何成为真正的以太坊有更加清晰的认识。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[Eth1.x：EIP1559与以太坊改良之路]]></title><description><![CDATA[以太坊费用市场亟待改变，我们应该如何看待EIP 1559与Escalator提案？]]></description><link>https://www.ethereum.cn/eth1x-1559</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-1559</guid><pubDate>Mon, 22 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/06/16/eth1x-1559/)



&lt;br/&gt;


![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)
&lt;br/&gt;



最近我的脑中总是浮现世界末日之后的荒原。就像电影《疯狂的麦克斯：狂暴之路》中的一个场景。主角们刚刚逃脱了第一波追捕，并领先于可能的追捕者。他们需要继续前进，但也需要对电影中的关键部分进行维护：一辆能够帮助他们逃出生天的巨型“战车”。因此，主角Charlize Theron在途中爬到车底进行维修：



![1.x15.png](https://i.ibb.co/Xb3nysH/1-x15-35265727a5.png)




在行进过程中对一辆巨大的、复杂的卡车进行维修，太符合这部电影惊心动魄的剧情设置了。当我看到这个场景时，发觉正好可以用来比喻EIP修订过程与核心开发者工作之间的关系。

针对以太坊协议的更改是实时进行的，许多谨慎细致的工程实现会被纳入，以便所有事情、所有人 (如果可能的话) 都能在升级过程中继续前行。在区块链荒地的道路上仍有颠簸，但总的来说，以太坊仍然遥遥领先于其他劫掠车辆 (技术债务)——只要卡车保持前进步伐，不停止向地平线移动。新的提案在短期内可能会对现状造成一些破坏，但总体而言，它们通常是对协议有价值的改进。

**本文要讨论的升级属于“Eth1.x”的范畴，但却并不是无状态以太坊的一部分工作，而是一个全新的Gas费用市场/区块大小机制。** EIP1559已经成为社区与开发者针对以太坊改良反馈的一个颇具趣味的案例研究。透过这个EIP的历史发展进程与关注度的提升，我认为我们可以从中窥探到许多针对以太坊发展的建设性讨论，并且希望获得一些明确的见解，能够指引无状态以太坊框架之外的重要发展。

之前在同系列文章中，我试图做到有条有理地抽丝剥茧，但在本文中，我不会深入讨论本EIP的技术细节，而是更多地关注提案内容本身，及其引发的讨论。在此之前，我们先来简单聊聊 EIP-1559 和‘Escalator’这两个提案的内容，围绕着这两个提案又产生了哪些讨论，目前现况如何。

#  &lt;br/&gt;

# EIP 1559

[EIP 1559](https://eips.ethereum.org/EIPS/eip-1559)的初衷是一个不错的切入点，其动机十分简单：

“以太坊目前的“最高价竞争”费用模式效率低下，并且伴随着不必要的高昂用户成本。此EIP提出了一个替代方案，即根据网络需求调整基本网络费用，从而提升费用价格效率，同时降低客户端软件为了避免支付非必要高费用所需的复杂度。”

**在当前系统中，新提交的交易必须等待被矿工打包进新区块，但交易方可以通过提高 gasPrice参数到网络平均水平之上，激励矿工优先打包自己的交易。**  按照理性的矿工逻辑，他们总是会倾向于打包高手续费的交易，以此最大化自己的收益，因此，我们可以推断首先被打包进新区块的交易伴随着最高的gas费。

**这种最高价竞争模式的问题在于，当交易需求膨胀时，局面很快就会失控。** 当区块即将达到最大容量时，将交易打包进下一个区块的费用可能会大幅攀升，因为用户希望通过付出高价使得自己的交易被优先打包。

尽管目前矿工们具备一定的能力来增加单个区块的交易容量，但并不能非常快速地改变上线，而且实际上矿工们更乐意通过将小容量区块来获取收益，而不是提高区块的gas上限 (考虑到叔块率，区块越大矿工面临的风险就越大)。

尤其是如果用户的钱包使用了价格算法以使自己的交易在一定期限内被打包，那么最终可能会支付[天价手续费](https://etherscan.io/txs/label/high-transaction-fee)将交易打包进一个几乎快满了的区块。

EIP 1559引入了gas费用的 ‘base fee’ (基本费) 概念，该费用被设定为动态调整，使得区块中的gas总使用量接近当前的一千万gas上限。**这笔基本费不会进入矿工的口袋，而是会被销毁。**

为了激励矿工打包交易，用户还能设定一个&apos;Tip&apos; (小费) 参数，并给出一个自己愿意为交易打包所支付的最高费用，矿工将获得这笔消费。

由于基本费不会因网络需求的即时变化而剧烈波动，因此用户在一定程度上避免了最高价竞争所带来的低效问题 (但小费模式延用最高价竞争)。此外，由于基本费会被销毁，而不是支付给矿工，如此一来矿工就没有动机尝试操纵费用了。更重要的是，该机制还试图解决钱包开发者的一大难题：通过使费用更具预测性，钱包就能自动估算网络费用。

如果读者想进一步了解EIP 1559，我建议阅读[Vitalik的EIP 1559 FAQ](https://notes.ethereum.org/Wjr1SnW-QaST7phX9C5wkg?view)以及[Barnabe的Jupyter笔记](https://github.com/ethereum/rig/blob/9de2ecbba130fba13011eca2b229979b0adcba52/eip1559/eip1559.ipynb)。

#  &lt;br/&gt;

# Escalator: EIP 1559的新对手

当前以太坊交易费的最高价竞争机制存在低效问题，这是不争的事实，而且我们需要明确一点：当前费用机制还有优化空间，对此没有人有异议，制定最高价竞争机制的替代方案对整个以太坊网络来说是大有裨益的，开发者和终端用户最终都能从中受益。我们能够并且应该就此达成一致意见。

然而，EIP 1559中提出的新机制与当前的运行方式大相径庭，如果采用的话会引发一些问题，尤其是会影响为用户创建并提交以太坊交易的软件。**钱包需要进行巨大的调整来适应这一新机制。**

虽然从长远来看，所有相关方都能从中受益，但就短期来说，为了适应新机制并且防止软件崩溃，采用该提案会对开发者造成巨大的工作负担。

EIP 1559保持其原始状态一段时间之后，以太坊社区开始权衡，包括受此提案影响最大的钱包开发者。钱包开发者们没有抵制此提案，而是从一个有趣的切入点来进行讨论。

他们重新衡量了此提案的核心动机 (即提升以太坊交易的用户体验)，并带在该语境中代入EIP 1559，他们表示“如果无论如何我们都要实现这些工作，那我们从一开始就应该了解这对用户来说会是怎样的，并且本着这个初衷来考虑提案内容。”

这就是[Dan Finlay提出EIP 1559替代方案的简要背景——The Escalator Algorithm。](https://github.com/danfinlay/EIPs/blob/Escalator/EIPS/eip-x.md)此提案与EIP 1559中的机制有许多相似之处，动机和目标也大抵相同。但Escalator机制是作为替代改进提案提出的，使得大家围绕这两种机制进行更为细致的讨论。

为了推动社区针对gas费用市场进行更高效更具体的探讨，我认为给出一个明显优于现状的替代方案是有必要的，如此一来就可以将EIP 1559中涉及到的所有特性与另一个合理替代方案进行对比。

Escalator机制与当前的最高价竞争模式有些相似，但提出了一些重要改变：

- 相比在提交交易时设定固定价格，用户可以给出 **“逐步上调”** 的价格，并设定一个他们愿意为了使交易被打包而支付的最高价。所有的出价都会被置于‘escalators’队列中，队列将**按照同等速率逐步地、可预测地提高**队列中的所有出价。矿工在查看所有escalators的队列时，会选择最高价格的交易，不管这些交易位于哪个escalator中。当某笔交易被打包进区块时，该用户不会按照当前出价进行支付，而是支付队列中的下一个最高价。

Escalator机制的主要优势是**能够高效展现价格，同时通过收取队列中的第二高价格，防止用户支付过高费用**。

该机制也有一些优势与EIP 1559相似：**即使发生网络堵塞，用户也能更简便地选择适当的价格**。值得注意的是，Escalator机制本身不会对区块大小的决定机制产生任何影响。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/pKHH1Vn/1-x16-1f80d547ce.gif&quot; /&gt;&lt;/center&gt;


Escalator Algorithm提案本身就很有意思，我强烈推荐阅读此提案的[‘user strategy’ (用户策略) 部分](https://news.ethereum.cn/eth1x-1559/#user-strategies-under-various-conditions-and-algorithms)，以便对三种不同的交易处理模型进行高层次的比较。如果读者对这个话题感兴趣，这篇介绍Escalator Algorithm的[论文](https://agoric.com/papers/incentive-engineering-for-computational-resource-management/full-text/)也很值得深入研读，但我好像偏题了……

在一次EIP 1559实现者电话会议中，Dan给出了一些模板，展现钱包中的不同参数在用户看来是怎样的，他还强调了如何通过用户的需求隐藏或显示这些参数。





![1.x17.png](https://i.ibb.co/K982Xr5/1-x17-61ffe60187.png)

这些设计旨在为社区讨论提供参考，帮助我们从用户的角度衡量EIP 1559和escalator算法。

通过提出一个合理的替代提案，并且将开发者关于用户体验的意见重新纳入考虑，EIP 1559/Escalator的相关讨论非常巧妙地为优化费用市场这一最终目标创造了新的探索空间。费用市场还远远没有为下一次硬分叉做好准备，但它就像《疯狂的麦克斯》中的战车，仍然在前进。

#  &lt;br/&gt;

# 以太坊未来可期

我相信EIP 1559/Escalator对于以太坊社区来说是观察和学习的重要对象，尤其是这与无状态以太坊未来的一大变化有着许多相同的特征：[Oil/Karma EVM semantic changes](https://ethresear.ch/t/meta-transactions-oil-and-karma-megathread/7472).与费用市场类似，其中的一些提议**对以太坊开发者和用户将产生重大的二级效应。** 如同EIP 1559，需要明确考虑到如何支持用户体验，因此也有机会和理解用户体验的开发者进行协作，确保提案有足够的动能支撑起成功的升级。

改进以太坊 (1.x) 以及其他公链是一段艰辛的旅程。有效的讨论路线应该是朝着有意义的改进建议，并且进一步保证听到受影响最大的开发者和用户的声音，将他们的顾虑纳入讨论。因为我们终将驾驶着同一辆战车驶向Serenity。要走在[以太坊状态膨胀问题](https://blog.ethereum.org/2019/12/10/eth1x-files-fast-sync/)的前面，意味着我们要不断地提出有建设性的方案和批判，在保持动能的前提下进行改变，这是我们赖以生存的根基！


![1.x18.png](https://i.ibb.co/mtcfzSV/1-x18-1e38e7ff7f.png)




&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[如何评估六大以太坊LAYER2扩容方案]]></title><description><![CDATA[这里是一份以太坊Layer-2扩容解决方案评估指南，从多个方面分析了ZK rollup、optimistic rollup、侧链、支付通道、plasma以及validium，助您选择最适合自己的扩容解决方案！]]></description><link>https://www.ethereum.cn/evaluating-l2-scaling-solutions</link><guid isPermaLink="false">https://www.ethereum.cn/evaluating-l2-scaling-solutions</guid><pubDate>Fri, 19 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Matter Labs](https://medium.com/matter-labs/evaluating-ethereum-l2-scaling-solutions-a-comparison-framework-b6b2f410f955)





 &lt;br/&gt;

随着越来越多的扩容方案崭露头角，以太坊第2层扩容生态系统对网络建设者来说已变得难以取舍。棘手的问题在于，每个解决方案都承诺向用户保证去信任、安全性、经济适用性以及易于使用，这不可避免地会让开发者们眼花缭乱，难以抉择。因此我们建议建设者不要轻易相信每个方案的一面之词，而是应该全面地调查比对清楚，然后在各种方案之间做出权衡。

为了让这项工作不那么复杂，我们整理了一系列问题，以帮助网络建设者评估不同的扩容解决方案，从而采用最适合其需求的解决方案。这些问题分为以下几类：

- 安全性
- 性能/经济适用性
- 可用性
- 其他方面

除了这些问题之外，我们还汇总了一张对照表，为读者搭建一座桥梁，让其能够窥探到不同扩容方案设计者的想法。尽管我们已尽最大的努力保持中立和公正，但想要简明扼要地比对不同方案的异同，仅靠一张表格是不够的。我们希望后文的补充问题与假设能够弥补表格的不足。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ss3j8D8/528b952e1b.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;非常感谢Georgios Konstantopoulos（L2独立研究者）、John Adler（Fuel）、Ben Jones（Optimism）、JD Kanani（Matic）、Patrick McCorry（any.sender）、Justin Drake（以太坊基金会）和Brecht Devos（Loopring）对该表格的校对和更正。&lt;/center&gt;

##   &lt;br/&gt;

# 安全性

## 活性假设 (例如瞭望塔)

该协议需要用户活性吗？换句话说：用户需要自己监测扩容方案上所有链上 (比如Layer-1) 活动吗？还是说通过可信任的代理方 (瞭望塔) 来监测呢？

在某些情况下，可以通过一些措施激励可信任的各方负责保证链上活性，激励措施需要与其用户一致 (即担保)。然而，值得注意的是，这些可信任代表方会因为行为不当而承担经济损失，而损失的金额不超过他们成为委托方所提交的“押金” (即保证金)。用户应该考虑委托方是否有机会攫取超过保证金金额的利益，以及对风险的承受度如何。

## 大规模提款退出假设

该扩容性方案的安全性假设允许所有用户在短时间内成功退出交易 (即提款) 并将资金转移到Layer-1上吗？

当某个Layer-2扩容方案出现安全漏洞时，所有用户需要在短时间内退出Layer-2，这便是大规模提款退出假设。如果用户选择留在Layer-2，则运营者可能会暗中操纵并没收Layer-2上剩下的资金。比如Matic支持大规模提款退出假设，留给用户提款的期限是一周。

但是由于网络堵塞和拒绝服务攻击 (Denial-of-Service, DoS)，实现大规模提款退出假设相当困难。比方说，在给定用户退出Layer-2的时间范围内，以太坊网络可能会高度拥挤，因此交易也许无法及时打包。即使不会出现网络拥堵的情况，也可能会有攻击者操纵gas费或者对以太坊[日蚀节点](https://eprint.iacr.org/2018/236.pdf) (eclipse nodes) 进行攻击，导致交易无法及时打包。该攻击向量值得我们深思。

## 托管

Layer-2的验证者若是达到一定数量，能否长期使用户无法访问自己的资金？他们可以窃取用户的资金吗？

如果你想要你的项目保持抗审查性的话，这一点尤其重要。

## 热钱包密钥易受攻击

layer-2解决方案中的资金安全性是否取决于运营者保障密钥安全性的能力？密钥是否必须保持在线才能维持系统运作（即热钱包密钥）？

有的密钥必须保存在线上以保持系统运作 (如热钱包密钥)。那么Layer-2解决方案上的资金安全性是否取决于运营者保障密钥安全性的能力？

[众所周知，保护热钱包是很难的。](https://www.bitdegree.org/tutorials/cold-wallet/)

## 易受加密经济攻击

解决方案应对加密经济攻击时脆弱性如何？以及方案设计是否基于博弈论的假设？

受加密经济激励诱发的攻击形式多样，包括[损害Layer-2上验证者（或他们的运营人员）的声誉](https://www.imperva.com/learn/application-security/social-engineering-attack/)，[贿赂Layer-1的矿工](https://ethresear.ch/t/nearly-zero-cost-attack-scenario-on-optimistic-rollup/6336)，建立[恶意DAO](https://slideslive.com/38911605/smart-contract-security-incentives-beyond-the-launch)等。这些攻击向量进化得非常快，并且经证实难以在基于博弈论假设架构的系统里消除这些向量。

这里还包括一些非技术性盗窃但产生同等后果的情况。例如[这种对Validium的双花攻击](https://twitter.com/the_matter_labs/status/1270093208727556108)：攻击者无法通过设计窃取其他人的资金，但仍然可以重复使用自己的资金。

## 密码学基元

解决方案是基于标准密码学还是较新的密码学研究，比如[SNARKs或STARKs](https://github.com/matter-labs/awesome-zero-knowledge-proofs)？

通常来说，面世时间越长的加密学架构，越难被破解。如果使用的加密学技术越先进、越新颖，那么就需要能力更强的团队来对其进行实现和审计。

  &lt;br/&gt;

# 性能/经济适用性

## 最大吞吐量

在以太坊1.0的解决方案中，能实现的最大吞吐量是多少？以太坊2.0呢？

尽管某个解决方案的吞吐量在今天看来可能令人满意，但你自然会展望未来，对将来所需的额外吞吐量进行预测，考虑你计划采用的方案是否能满足未来的需求。

## 资本效率

扩容方案的资本效率如何？它需要锁定大量资金才能运作吗？

与其他解决方案相比，资金效率较低的系统用户成本会更高，并且可能由于缺乏即时的流动性而发生运行中断。比如，支付通道的资金效率相对较低，因为通道运营者必须锁定其通道平均交易量几倍的资金才能确保交易金额不超出容量上限。

## 开新账户的成本

新用户在Layer-2开账户时需要Layer-1的链上交易记录吗？

在对比图表里，我们展示的是每个系统在最好情况下的表现，但在个别实现里，效率可能没那么高。例如，zkSync和Loopring都用zkRollups，但Loopring要求用户用Layer-1的一笔交易来开新账户才可以使用支付功能，而zkSync则不需要。

  &lt;br/&gt;

# 可用性

## 提款时间

在Layer-1上提款需要多长时间？

为了解决纠纷，一些解决方案的提款期限可能要花上一周或更长的时间。为了缓解长时间等候的问题，有没有流动资金提供者可以为用户提供流动资金以换取风险溢价？由于快速提款需要支付一定的金额，那使用这个方案的真实价格是多少？

## 获得主观最终确定性的耗时

基于协议的安全性预设，一笔交易多快能够达到在Layer-1中无法被回滚的状态？

主观确定性的意思是，即使Layer1的智能合约还不能信赖该交易，但外部的观察者能信服交易的不可逆性。例如，在Optimistic Rollups里，为了得到Layer-1的确定性，你需要一个以太坊上的证明，然而完全获得确定性需要大约1周时间。

## 客户端对主观确定性的可验证性

轻客户端（浏览器/移动钱包）可以验证主观确定性时间吗？

继续optimistic rollups的例子，当你需要以太坊上的一个证明来得到Layer-1的确定性和验证你的交易不可更改时，你必须下载整个rollup状态并执行上周的所有交易，以确保打包的区块都是有效的。

## 即时交易确认

解决方案能否提供真正的即时交易确认？还是提供担保下的即时交易确认？

“即时表面确定性”可以在大多数Layer-2协议上实现，例如，交易会在用户交互中显示即时的确认。只有支付通道（状态通道）对这些证明提供完全的安全性保证，而在其他协议里，这些交易在Layer-1上被确认之前仍然可以被撤销。撤销这些交易不是没有代价的，无论成功与否，这些方案上的验证者都将失去他们的安全保证金（即存款）。

即时交易确认这一特性取决于扩容方案具体实现上的细节。

  &lt;br/&gt;

# 其他方面

## 智能合约

Layer-2支持任意可编程的智能合约还是仅限于使用[predicate](https://specs.counterfactual.com/en/latest/adjudication-layer.html)实现的子集。

## 字节码的可移植性

你可以将以太坊合约上的既有EVM字节码几乎原封不动地移植吗？

## 本地隐私支持

协议提供本地隐私支持吗？

如果没有默认的低成本屏蔽交易，隐私保护将会[非常低效](https://twitter.com/VitalikButerin/status/1196468111995756544)，在关于在多个平台上去匿名化的大量研究里, 这一点已得到充分有力的证明（[1](https://cryptolux.org/images/d/d9/Zcash.pdf),[2](https://arxiv.org/pdf/2005.14051.pdf)）。

  &lt;br/&gt;

# P.S.对zkRollups的一个边注

现在有两个扩容方案是使用zkRollups的，现在可以试用——路印（主网上线）和[zkSync](https://zksync.io/) （Matter Labs旗下平台，现已上线）。两者的主要区别在于对底层证明系统的选择。路印用的是Groth16 SNARK，配以一个特定应用信任设置，而zkSync使用了更新的PLONK，配以通用信任设置的证明系统。考虑到最近这个证明系统在设计上获得的突破，我们相信PLONK会成为促进zkRollups应用的一个主要因素，我会在即将发布的文章里详细说明。



我们希望这篇文章对读者在寻找扩容方案时会有所帮助，并且使你对这领域的未来感到兴奋。如果你有任何疑问，或你想就上面谈论到的内容进行讨论，欢迎随时通过邮件hello@matter-labs.io、[Twitter](https://twitter.com/the_matter_labs)、[Telegram](https://t.me/zksync)联系我。

Matter Labs致力于让更多的人参与到公共区块链上。我们正在构建[zkSync](https://zksync.io/)，这是以太坊上一个安全快速的扩容平台。

译者注：zkSync已于6月18日上线主网。

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新 (截至2020/6/12)]]></title><description><![CDATA[椭圆曲线的BLS哈希出现了08版本，新多客户端测试网Altona在架构中，Onyx于6.14启动。]]></description><link>https://www.ethereum.cn/wnie2-2020-6-12</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-6-12</guid><pubDate>Mon, 15 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200612)



 &lt;br/&gt;

# 热门精选

这周的热门话题竞争并不激烈，Danny Ryan的《截至2020年6月，以太坊2.0的发展状况》（[*The State of Eth2, June 2020*](https://blog.ethereum.org/2020/06/02/the-state-of-eth2-june-2020/)）是绝对的必读文章。

  &lt;br/&gt;

# 阶段0：信标链

规范的[0.12.1版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.12.1)遇到了一个小意外，这实际上是个重大变化，但我们认为影响不大，因为这个变化并不复杂，而且发生在大家完全实现0.12.0版本之前。这个变化与信标链的诞生时间有关，主要是这样Afri就不必在当地时间凌晨2点监测测试网了。

同时，我对椭圆曲线的BLS哈希的[08版本](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-08)感到很意外，因为我们所有人都已经决定选择07版本了。但仔细看的话，其实相对07版本并没有什么会影响到Eth2的实质性变化，只是一些表面上和说明上的修改，以及对测试向量的更新。08版本似乎正在进入IETF标准化的下一阶段。所以不会产生太大影响✌️。读者可以在[IETF tracker](https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/)上查看整个发展过程。

在Eth1上的工作继续围绕着这个问题展开：在验证者决定要将ETH转入存款合约前，如何全面验证存款。问题在于测试网上已经出现了相当数量的存款故障，这是一种非常严重的故障模式，因为会导致验证者质押的32个ETH永远掉进黑洞。解决方法之一是在Eth1上执行[EIP-2537](https://eips.ethereum.org/EIPS/eip-2537)，它为在Eth1存款合约中验证Eth2的签名（它在Eth2的阶段0后还会有用）提供必要的加密工具。但是，由于[存款合约](https://github.com/ethereum/eth2.0-specs/blob/dev/deposit_contract/contracts/validator_registration.vy)已经完成形式化验证，我们并不想对其进行修订。鉴于此，Alex Stoke一直在编写了一份[代理合约](https://github.com/ralexstokes/deposit-contract-verifying-proxy)（proxy-contract），这份合约接受存款，对存款进行验证，并且只有当存款一切正常才提交到存款合约。现在已经有人对代理合约做审查和gas优化的工作了。要注意的是代理合约的发展仍然取决于EIP-2537的预编译在Eth1的实现情况，在我看来这项工作尚未完成。最坏的情况是，我们可以使用一个独立运行的存款审查器，但这取决于人们能否用之有道🙄。

  &lt;br/&gt;

# 测试网

Anthony Sassano在他新一期的The Daily Gwei新闻简报里，编写的第5条是[Eth2 Testnets Aplenty](https://thedailygwei.substack.com/p/eth2-testnets-aplenty-the-daily-gwei)，为我们所处的现状和目的地提供了坚实可靠的信息参考。

以及，信标链测试网世界正风起云涌。

## Witti -&gt; Altona

多客户端测试网Witti推出了两周，风平浪静地如期运行着，没有出现什么耐人寻味的问题。Teku、Lighthouse和Prysm都在上面运行得很顺利，有时候会在[控制面版](https://eth2stats.io/witti-testnet)上出现Nimbus。曾经有过一段时期无法敲定区块，因为一些验证者离线了，也有出现一些[罚没](https://witti.beaconcha.in/validator/74)的情况，将这两种情境结合起来，就导致了Schlesi网络的崩溃。但在Witti测试网中，由于多个客户端已经解决了遗留问题，所以一切如常运作。

期间发生了一件有趣的事，有人注册了一个拥有[“无穷性”公钥](https://witti.beaconcha.in/validator/c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)的验证者，这就是当私钥为0时会发生的情况。它绝对是有效的，但也意味着任何人都能以你的身份伪发信息然后使你被罚没。其实我有点意外居然之前没人做这件事；这其实很简单。

下一步是推出一个名为“Altona”的新多客户端测试网，目前在架构中。这个测试网将运行0.12版本的规范，而Witti采用的是0.11版本，预期会与最终上线的规范非常接近。在客户端团队都将他们的代码库更新到0.12.1版本后，Altona会启动，读者可以在[Altona progress tracker](https://github.com/goerli/witti/issues/17) 上了解最新情况。

在我们等待的时候，Witti会保持运行，所以快来参与质押演练吧！Somer Esat发布了[Prysm](https://medium.com/@SomerEsat/guide-to-staking-on-ethereum-2-0-ubuntu-prysm-witti-2b972e697918)在Witti上的质押指南，而我写的[Teku](https://docs.google.com/document/d/1CTN_t_0UGRJSpW27yOux1lwxbVz-J4CclGs-tSax4U4/edit)的Witti质押指南仍然适用，这里还有一些关于[Lighthouse](https://medium.com/nethermind-eth/using-nethermind-to-run-a-validator-in-eth2-5c227653e197)在Witti上运行的说明（在Eth1链上使用Netherland客户端）。

## Topaz -&gt; Onyx

Prysmatic Lab的单客户端测试网Topaz在上一场“战役”中表现优异，现在负伤退役，由[Onyx](https://medium.com/prysmatic-labs/introducing-the-onyx-testnet-6dadbd95d873)接替上阵。

最新的消息显示[Onyx合约](https://goerli.etherscan.io/address/0x0f0f0fc0530007361933eab5db97d09acdd6c1c8)已经收到了16,384个测试网ETH验证者的押金，达到了启动的必要数量，并将于[2020-06-14 05:17:24 UTC](https://twitter.com/prylabs/status/1271436918220156929) 启动。

Onyx将运行0.12.1版本的规范，且技术上来说不再是单客户端，尽管预期仍然会是Prysm占主导，而多客户端方面的工作还是主要由Altona承担。

读者可以在[这里](https://prylabs.net/)加入Onyx。Attestant对如何启动和运行做了一些[分步操作说明](https://medium.com/@steve.berryman/installing-and-running-an-ethereum-2-prysm-validator-on-the-testnet-c004dd7eece8)，这是CoinCashew编写的关于在[Windows](https://www.coincashew.com/coins/overview-eth/guide-how-to-stake-on-eth-2.0-onyx-testnet-with-prysm-on-windows)上进行所有这些操作的说明，还有Terence汇编了一个很不错的FAQ和[故障排除指南](https://hackmd.io/@tchain/BkFDGtAn8)。

## 工具和分析

Bitfly不满足于运行[beaconcha.in](http://beaconcha.in/)，还提供显示测试网节点类型和位置的[Eth2 测试网统计数据](https://eth2.ethernodes.org/)，但你需要教它识别Teku节点😉。

Protolambda一直在制作关于[Witti上验证者行为](https://twitter.com/protolambda/status/1270357785352581122)的精致图表。说起图表，Jonny Rhea也在继续深入研究Witti测试网上的节点行为。这里是一阵[推特风暴](https://twitter.com/JonnyRhea/status/1269050893577736192)，展示了一些早期的分析。（[黑夜模式看起来更舒服](https://twitter.com/JonnyRhea/status/1269148762401890304)）我碰巧知道Jonny即将完成其最新研究的撰写。在接下来几天多留意 [Ethresear.ch](http://ethresear.ch/)，他的文章将使我们大开眼界。

想观看更多图片？这是精华中的精华：Bitfly对其Topaz网络信标节点上的所有[尝试连接](https://twitter.com/etherchain_org/status/1268814397742473216)进行了可视化处理，分布非常均匀。

最后，区块链上有个[新的浏览器](https://witti.blockaction.io/)！是由BlockAction建的。

## 接下来是什么？

正如上文所提到的，Witti一直平稳地运行着。一方面，这很不错：在欢快的节奏中，一切都顺利地运行着。但是，这不代表着Eth2真正上线后，面对各种攻击还能顺利地运行。为此，Danny正在起草一份关于攻击网络的提案，以激励大家踊跃击溃测试网。该任务十分艰巨，但这是我们成功上线Eth2的重要一步。

  &lt;br/&gt;

# 释义性文章

管理验证者密钥 (validator key) 和取款密钥 (withdrawal key) 是本周的主题。这是我们在[Eth2开发者电话会议](https://hackmd.io/5hSJ4418R6ih8ogAwiDi7Q#Validator-key-hygiene)上谈论的其中一个话题，我们会在接下来的电话会议中商定一些常见的最佳实践。以下是一些近期的文章：

- Bitfly旗下的网站[Beaconcha.in](http://beaconcha.in/)继续完善其[知识库](https://kb.beaconcha.in/)。点击查看其新文章[《以太坊2.0密钥》](https://kb.beaconcha.in/ethereum-2-keys)。
- 另一篇来自Attestant的优秀阐释性文章[《保护取款密钥》](https://www.attestant.io/posts/protecting-withdrawal-keys/)。
- 以及之前报道过，但常看常新的一篇文章[《Eth2 Staking系列 #4 ：密钥篇》](https://news.ethereum.cn/wnie2-2020-6-12/#4 - Keys)🔑，作者是Carl Beekhuizen。

至于Eth2的当前状态，除了[Danny发文](https://blog.ethereum.org/2020/06/02/the-state-of-eth2-june-2020/)介绍了截至6月Eth2的发展状态之外，Quantstamp也撰写了一篇文章[《理解Eth2的现阶段发展：阶段0》](https://quantstamp.com/blog/understanding-phase-0-the-current-stage-of-eth-2-0-development)，帮助我们了解阶段0的发展现状，优秀的小伙伴ECN👏已将其翻译成[中文](https://news.ethereum.cn/understanding-phase-0-the-current-stage-of-eth-2-0-development/)。（译者注：嗯？突然被cue？ECN会继续为大家呈现优质的文章翻译~）

Ivan on Tech发布了文章[《解构ETH2.0：下一代以太坊》](https://academy.ivanontech.com/blog/breaking-down-eth-2-0-the-next-generation-of-ethereum)，清晰地概述了PoS权益证明以及可扩展性方面相关问题。

  &lt;br/&gt;

# 研究工作

以太坊基金会的RIG小组 (Robust Incentives Group) 成员Barnabé Monnot发表了文章[《信标链运行2050：基于代理的eth2模型》](https://github.com/ethereum/rig/blob/master/eth2economics/code/beaconrunner2050/br2050.ipynb)，公布了他第三阶段的工作：使用[cadCAD](https://github.com/BlockScience/cadCAD)模拟环境对信标链行为的加密经济学进行建模。此阶段主要在验证者之间添加了一个模拟的异步p2p网络。用Barnabé的话来说就是：“我们正不断完善基于代理的模型”。

在过去的几周中，开发者论坛[ethresear.ch](https://ethresear.ch/)上，Eth2前端的更新进展寥寥无几。但是，如果读者想要进一步了解并且愿意挑战一些数学领域，那么可以看看Vitalik的设计。该设计为我们展示了一种更加有效的用于表示状态的方法，作为[默克尔树的替代方法](https://ethresear.ch/t/updating-and-generating-kate-witnesses-in-amortized-sqrt-n-time/7520?u=benjaminion)。该方法提出在sqrt(n)平均时间内生成和更新Kate证明。虽然该方法在实际操作中仍不可行，但我们很有可能向着正确的方向迈出了一步。

  &lt;br/&gt;

# 常规会议

## 实现者会议

6月11日进行了第41次会议。

- [Agenda](https://github.com/ethereum/eth2.0-pm/issues/158)会议议程
- [Video](https://youtu.be/WmU3k2v4UA8?t=56)会议视频
- 我的[速记](https://hackmd.io/@benjaminion/SkfYVnJ68)以及[完整笔记](https://github.com/ethereum/eth2.0-pm/blob/0daf992a7576c35ae22027131a927c26f47b6766/eth2.0-implementers-calls/call_041.md)的草稿

正如上文所提到的，我们花了一些时间讨论[验证者密钥保护措施](https://hackmd.io/@benjaminion/SkfYVnJ68#Validator-key-hygiene)。

 &lt;br/&gt; 

# 其他资讯

- 客户端团队[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-51-v0-12-testnet-on-the-horizon-85e93de00f94)和[Lighthouse](https://lighthouse.sigmaprime.io/update-26.html)的进展更新。
- 可借助Infura访问Eth2 API端点（由Teku提供支持）。请参阅他们的教程，了解如何以编程的方式查询信标链。
- 神秘人heyheeyheeey突然发布一项提案：以Argent钱包作为Eth2 Staking接口。
- Afri作为嘉宾出席了[“ETH2 Staking社区电话会议#6”](https://news.ethereum.cn/wnie2-2020-6-12/#6)，谈到了他在Eth2多客户端测试网上的工作内容。

##  

 &lt;br/&gt;

# 写在最后

最后邀请大家共赏一首歌—[Happy birthday to me](https://www.youtube.com/watch?v=A0YyFqydPl8) 🎂 (调高音量，和我一起摇摆！)

译者注：感谢Ben Edgington对eth2进展更新的耕耘，让以太坊的关注者们能够贴近生态的呼吸脉搏。迟来的Happy Birthday to Ben!

 

 &lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。。</content:encoded></item><item><title><![CDATA[对比ZKROLLUP与VALIDIUM (STARKEX)]]></title><description><![CDATA[同样是以太坊二层扩容方案，zkRollup和Validium有何不同？各自的利弊是什么？本文将详细对比分析。]]></description><link>https://www.ethereum.cn/zkrollup-vs-validium-starkex</link><guid isPermaLink="false">https://www.ethereum.cn/zkrollup-vs-validium-starkex</guid><pubDate>Fri, 12 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Matter Labs](https://medium.com/matter-labs/zkrollup-vs-validium-starkex-5614e38bc263)


&lt;br/&gt;

译者按：Validium作为以太坊Layer-2的一项新增扩容方案，起名字当然不能含糊，社区各人员在推特热烈讨论过后，最终由V神确定下来。那么同样作为Layer-2扩容方案，与zkRollup有何不同呢？二者的利弊将在此文中一一揭晓。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1zZXmfn/ZKROLLUP-VALIDIUM-1-f497bfbf5b.png&quot;/&gt;&lt;/center&gt;







“StarkEx提高了交易所的安全性——但用户的资金仍可能会被冻结、没收或盗窃。”

最近，DeversiFi推出了其[新版本交易所](https://blog.deversifi.com/introducing-deversifi2-0/)，由StarkEx交易引擎提供支持。这是一项不可思议的技术成就，进一步满足了用户对加密货币交易的安全需求。这也标志着一个历史性转折点：这是[STARK](https://github.com/matter-labs/awesome-zero-knowledge-proofs#starks) (去信任的简洁化零知识证明) 在生产系统中首次得以应用。

至于背景，StarkEx采用以太坊的二层扩容解决方案 Validium，其中所有交易的有效性都强制使用零知识证明来验证，而数据可用性在链下进行处理。这可以防止Validium中的资金被盗，因为每次资金转移都必须得到转出用户的授权。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GVfDV3V/ZKROLLUP-VALIDIUM-2-0e72b7837d.png&quot;/&gt;&lt;/center&gt;






Validium的机制与[zkRollup](https://zksync.io/faq/tech.html#zkrollup-architecture)非常相似，唯一的区别是zkRollup中的数据可用性保存于链上，而Validium则保存于链下。因此，Validium的吞吐量会高许多——但这是有代价的。

&lt;br/&gt; 

# StarkEx Validium 的运营者可以冻结用户资金

“能够摧毁某个事物的人，必定控制着它。”——《沙丘》，弗兰克·赫伯特著

由于不像 zkRollup 那样具有链上数据可用性保障，Validium 的运营者 (或者更准确来说，数据可用性的管理者) 有权拒绝任意一个用户转移其资金。

具体操作：运营者在没有告知用户的情况下对其默克尔状态做了细小的改动。由于缺少此信息，用户无法创建默克尔证明 (Merkle proofs) 来验证其对账号的所有权。

如上图所示：如果运营者更改了帐户d3，则帐户d1的所有者将无法证明其帐户所有权，因为丢失了证明过程中所需的节点m的信息。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/8BB731s/ZKROLLUP-VALIDIUM-3-fb74b2bca8.png&quot;/&gt;&lt;/center&gt;








有没有一种方法可以防止Validium中的数据扣留攻击？自2016年Plasma的概念诞生以来，该问题已有过广泛讨论，并且研究得出了zkRollups这一技术成果。如果尝试通过非rollup方案，以去信任的方式保障数据可用性，那么[Validium将丧失大部分竞争优势](https://twitter.com/VitalikButerin/status/1267566253780226048)。

虽然问题不能完全解决，但StarkEx通过引入一种许可型数据可用性委员会 (DAC) 缓解了该问题。每次状态更新，都必须需要一定数量的DAC成员签名来确认DAC已接收到数据。在StarkEx中，DAC由[8位成员](https://medium.com/starkware/data-availability-e5564c416424)组成（太多成员会损害系统的活性）。这些都是由法律监管的声誉卓著的组织，他们不太可能滥用权力——至少理论上如此。

矛盾的是，知名度和声望高，以及受强大的法律权威监管[正是其弱点所在](https://vitalik.ca/general/2019/05/09/control_as_liability.html)。一种可能发生的失控情况是：运营商被要求执行KYC / AML法规 (即了解客户身份信息和反洗钱措施)，并有义务冻结交易记录超过1万美元的帐户中的所有资金 (可能会永久冻结)。

随着我们深入研究，便发觉其更加有趣。StarkEx实行[验证者合约升级机制](https://medium.com/starkware/contract-upgradability-d3a4451877c)，该机制允许运营者立即将新的验证者添加到验证者合约上。这一机制不能使任何旧的合约代码逻辑无效。例如，平台无法删除用户签名检查。但是它允许添加其他限制条件 (以编程语言Solidity为例，可以将限制条件表示为`require()`语句)。

这是一个很好的安全功能：如果StarkEx在其STARK电路逻辑中发现缺失任何限制条件，StarkEx可以快速修复漏洞，且不会造成新的漏洞出现。但是，此功能可能会被滥用，成为一种**潜规则的审查机制**。简单来说，StarkEx运营商始终可以在合约逻辑上部署扩展逻辑，没有提前警告用户便引入黑名单。StarkEx的官方文档里没有明确说明，但是似乎执行新规则不需要获得DAC成员的同意。

把StarkEx当成一种完全去中心化的交易协议其实不太准确。**不妨类比想象一下Vitalik Buterin拥有一个开关，可以立即冻结任何以太坊账户。**然而另一方面，StarkEx确实可以提高加密交易所的安全性 (StarkEx创建者当然会这么做)。

#  &lt;br/&gt;

# StarkEx Validium运营者可没收用户的资金

让我们再发散一下我们的思维。我们设想一下不管是什么原因 (很有可能是运营者无法控制的情况)，导致一大部分用户的资产现被冻结。那用户存在StarkEx的资金也被没收了吗？

事实上，这是有可能发生的。

就像许多其他加密项目一样，StarkEx实现了最新的[合约升级机制](https://medium.com/starkware/contract-upgradability-d3a4451877c)。在部署新版本之前，用户会提前28天收到通知，而任何不愿意接受新版本的用户都可以退出StarkEx平台。

除了那些资金被冻结的用户。

宽限期 (即留给用户考虑是否接受新合约部署的28天时间) 结束后，StarkEx将部署新的合约代码逻辑，将冻结的资金转移至指定方保管。不幸的是，受影响的用户中无法对此进行反抗。

合约升级还存在着一些[合理的忧虑](https://twitter.com/jadler0/status/1268920716944162816)，“升级通知期限”本身时长可能不足以允许每个不同意合约升级方案的用户退出Validium (所谓的“批量退出”(mass exit)方案)。但是，此问题并非Validium独有,而是普遍存在的合约可升级性问题。

#  &lt;br/&gt;

# 2020/07/06更新：

# Justin Drake描述了Validium上的密码学经济攻击。

在后续讨论中，Justin Drake[指出](https://twitter.com/drakefjustin/status/1269309163995303936)Validium的数据可用性方案可能会导致意外攻击：如果数据可用性委员会 (DAC) 中的有效票的签名密钥被盗 (并且这些密钥在线上保存，因此极易受到安全攻击)，攻击者可以将Validium的状态转换为仅自己可知，从而冻结所有资产，并向用户勒索解锁赎金。

从理论上讲，合约升级机制应该可以缓解这种攻击。Validium的运营商可以启动新版本的部署，为期28天的合约升级通知期过后，状态会恢复到上一个已知版本。资金将会被锁定一个月 (成本当然会相当高)，但是如果DAC拒绝谈判，攻击者将颗粒无收。

然而，事实证明，攻击者可以通过一种方法迫使运营者在损失所有资金或允许攻击者发起双花之间做出决定。我们可以通过以下示例进行说明：

想象一下，某用户可以这样黑进ATM：取款完成后删除整个银行的数据库。用户只能从自己的账户中取款，但是当银行的数据库丢失之后，该用户的操作记录也会被删除掉。(译者注：该操作行为即双花。)

银行员工可以在一个月内完成一系列复杂流程，恢复数据库。但是，由于他们不知道是谁取款的，只能将状态恢复至上一个检查点，也就意味着取过款的账户余额也恢复了！

当然，双花的金额仅限于攻击者的账户余额。然而，如此一来，构建一个去信任的合约，并从暗网中的某个邪恶匿名巨鲸里借到必要的资金就显得十分容易了。这就留给我们的读者思考了。

从该攻击我们可以看出Validium与PoA网络的安全模型相对相似。然而实际上，PoA网络有20个节点且需要至少51％的签名者签名，而Validium有8个节点，需要所有签名者签名。比较而言，**PoA网络更加安全**。

#  &lt;br/&gt;

# zkRollup的数据可用性保护用户的资金不被没收、审查、攻击，代价是降低吞吐量

只要有一个以太坊全节点在线，zkRollup的用户就可以同步rollup的状态。

zkRollup 如何运作：对于每个 zkRollup 区块来说，重建系统状态所需的信息必须作为以太坊交易的调用数据提交上去。否则，zkRollup 智能合约将拒绝状态转换。zkRollup上进行状态转换时，每笔交易需花费少量gas费，成本随交易总数呈线性增长。

有了默克尔树数据，被审查的用户便可以直接将自己的资金从主网上的zkRollup合约中取出。用户只需要提供默克尔证明，验证其账户所有权。因此，链上数据可用性可以**保障用户的资金不被冻结或没收 (连zkRollup运营者也没有权力)。**

然而链上数据可用性会限制网络吞吐量。目前，zkRollup在以太坊上每秒至多可处理交易量2000笔，而StarkEx Validium声称其每秒可处理交易量9000多笔。两者的差异决定了其应用领域的不同。例如zkRollup尤其适用于增强去中心化加密支付的可扩展性 (VISA的全球平均每秒交易处理量为 2000笔) 以及严格要求去信任的不可篡改型智能合约。而另一方面，Validium可能更适用于传统的高频交易，或对去信任需求较低的游戏。

#  &lt;br/&gt;

# 总结

本文阐释了zkRollups和Validium (StarkEx) 在运作上有何相似之处，以及两者的主要差异 (即链上和连下数据可用性)，这对我们理解这两种技术以及它们的适用场景起到关键作用。两者的主要差异：zkRollup 是完全去信任的去中心化扩容协议；而 Validium的性能更符合托管式的PoA系统 (从其吞吐量和风险预测来看)，但是其拥有较高的安全性。

每一次旨在完善去信任和增强用户管理自身资产的权力的技术更新，都是为了推动用户实现自主性。为了继续前进，我们总是需要权衡利弊，学会取舍。

然而，在加密社区中，越来越多人意识到区块链技术已经过了 “不要作恶” (don’t be evil) 的阶段，现在是时候过渡到“无法作恶”(can’t be evil) 的阶段了。我们可以通过自主托管技术、提高抗审查性和隐私性、消除单点故障来实现这一目标。我们正在奋力构建的系统，其基本价值观就是由这些理念构成。

完全去信任的扩容时代即将到来。让我们等待 Matter Labs 的官宣吧，[敬请关注](https://twitter.com/the_matter_labs)！

 

 &lt;br/&gt;

&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[理解ETH2的现阶段发展：阶段0]]></title><description><![CDATA[本文以通俗易懂的语言呈现了Eth2首阶段的现状和发展。]]></description><link>https://www.ethereum.cn/understanding-phase-0-the-current-stage-of-eth-2-0-development</link><guid isPermaLink="false">https://www.ethereum.cn/understanding-phase-0-the-current-stage-of-eth-2-0-development</guid><pubDate>Wed, 03 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Quantstamp Labs](https://quantstamp.com/blog/understanding-phase-0-the-current-stage-of-eth-2-0-development)


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GCyjbVt/1-aec33fa29c.jpg&quot;/&gt;&lt;/center&gt;





读者朋友们可能听说过ETH 2.0的开发正在取得进展，但可能有所疑问：我们现在是处于开发的哪个阶段了？大多数现有的资讯不是技术性很强就是过于笼统，因此我们写了这篇文章来帮大家理清思路，解答困惑。

我们现在正处于**阶段0**，在这个阶段，会测试并启动**信标链**，而信标链是ETH 2.0中权益证明（PoS）系统的核心。这篇文章会解释信标链的作用以及为了它的正式发布我们现在正在进行的工作。

###  

# 信标链的目标是什么？

ETH 2.0的一个目标是**通过分片来分担处理和储存交易的工作**，从而**扩大交易吞吐量**。分片是有价值的尝试，因为目前在ETH 1.0，每个全节点都需要验证整个以太坊网络上的交易并储存整个以太坊状态，这意味着每个全节点都在管理以太坊上所有的经济活动。

考虑到以太坊的目标是要**能够承载全球范围内的全部经济活动**，那么在每一个全节点上储存全球经济活动的数据无疑是困难的。随着状态在ETH 1.0上的不断增长，运行一个全节点会变得越来越不可及，这就意味着以太坊去中心化的程度会降低。况且，以太坊现在还尚未成为主流，就已经接近交易吞吐量的极限了。

在ETH 2.0中，分片通过在信标链上协调和最终确定数据来缓解这些限制带来的危机。**信标链则作为真实信息的源头。**




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/8byzwvd/2-abd1ed2c8b.jpg&quot;/&gt;&lt;/center&gt;




###  

# 信标链借助PoS来达成共识和敲定分片上的数据

**信标链将使用PoS来验证分片上的数据**。在工作量证明（PoW）的区块链里，矿工如果表现得好的话会有激励，如果他们在挖矿时选择通过分叉来攻击网络，将得不到区块奖励和交易费来填补电力和挖矿设备等的沉没成本。

信标链改变了在区块链上实现安全性和数据验证的工作机制。不同于扣除矿工的经济报酬，使其无法覆盖沉没成本，从而确保区块链的安全，**信标链通过削减或“烧毁”属于验证者的ETH来保证安全性。**

如果想取得验证ETH 2.0的资格并由此获得收益，潜在的验证者首先需要向系统提交（即质押）**至少32 ETH**。如果验证者试图给网络提交错误的数据，或他们的离线时间过长，他们之前提交的部分甚至全部的ETH都会被扣除。

###  


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NYWTJg1/3-0a161e01ae.jpg&quot;/&gt;&lt;/center&gt;





# 阶段0的发展现状

启动信标链是一项需要小心谨慎的工作。为了确保过程顺利，开发者正遵循[这些信标链规范](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md)对客户端实现进行测试。

**客户端是去中心化系统的核心，因为他们解决了中心点故障的问题**。在ETH 1.0里，全节点通过以下三种方式排除中心点故障：

- 保存以太坊的整个状态（即全部的经济活动和余额等）
- 与对等节点（其他客户端）共享最新的区块链信息，例如新挖出来的区块和等待验证的交易，以及
- 接收到信息后先验证再分享给其他客户端，执行网络规则

在现阶段，ETH 2.0的开发工作主要是由多个独立团队对客户端进行开发测试。Prysm是一个由[Prysmatic Labs](https://prysmaticlabs.com/)开发和[由Quanstamp审计](https://github.com/quantstamp/prysm-1)的ETH 2.0客户端。这个客户端现在正在进行[Topaz 测试网](https://beacon.etherscan.io/)的测试，任何人都可以下载客户端并模拟运行ETH 2.0的信标链。

[点击这里](https://quantstamp.com/blog/how-to-be-an-eth-2-0-validator-on-the-topaz-testnet)了解**如何在Topaze ETH 2.0测试网上运行Prysm客户端！**





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/T2V4ttY/4-9910b1ef7a.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;按时间列举最近阶段0的里程碑事件&lt;/center&gt;

####  

# 多种实现并行能保障ETH 2.0的安全性

ETH 2.0的茁壮成长需要多个客户端在信标链启动时处于活跃状态。如果我们依赖单个客户端，该客户端的一个bug就足以给网络带来毁灭性影响，包括将整个网络置于非共识状态或阻止区块的敲定。

当网络上存在多个客户端实现时，单个客户端的一个bug对网络带来毁灭性影响的可能性会大大降低。如果在一个客户端中出现了一个bug，该客户端会无法参与共识，但整个网络还能继续运行并敲定交易，因为其他的客户端不太可能会出现同样的bug。换句话说，其他的客户端会维持共识。因此，**多客户端并存能提高网络安全**。

**创建测试网的目的是模拟将信标链放到主网的真实情况**。为了测试当多个客户端共享信息（区块、交易等）时会不会出现bug，ETH 2.0的客户端实现正积极地在多客户端测试网上通信。

Schlesi是第一个多客户端测试网，于今年4月27日启动。一度有4个已同步的客户端实现在其中运行了测试网信标链，它们是：

- Prysmatic Labs的Prysm
- PegaSys的Teku，由ConsenSys资助
- Sigma Prime的Lighthouse，以及
- Status的Nimbus


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jWszJjD/5-81f2c4de01.png&quot;/&gt;&lt;/center&gt;








 

5月17日，某个客户端出现了一个共识bug，并在Schlesi多客户端测试网上引起一个分叉。在找到bug后，客户端的开发者决定结束Schlesi测试网并重新创建[一个从区块0开始的新多客户端测试网——Witti](https://witti.beaconcha.in/)。值得注意的是，在测试网上发现bug是开发过程中很正常的一种情况。在ETH 1.0正式发布前的测试网中，也发现了很多诸如此类的bug。

 





&lt;center&gt;&lt;a href=&quot;https://witti.beaconcha.in/ &quot;&gt;在Witti Testnet上的验证者数和质押的ETH数。来源：beaconcha.in&lt;/a&gt;&lt;/center&gt;

###  

# 信标链的启动及后续

**ETH 2.0将在今年末前启动，但这并不是一个硬性期限**。信标链正式面世前，需要多客户多测试网在足够长的时间内表现稳定。

一旦以太坊社区对测试网的稳定性达成了一定水平的社会共识，**存款合约 (Deposite Contract) 将在ETH 1.0上发布。**[存款合约](https://github.com/ethereum/eth2.0-specs/blob/dev/deposit_contract/contracts/validator_registration.vy)的用处在于收集将来ETH2.0验证者的质押金，这样他们才有资格在信标链上执行验证工作。当质押的ETH达到预定数额时，信标链将被激活，继而在该链上生成新区快。

信标链的启动将标志着阶段0的结束。此后，ETH 1.0和2.0将并行存在一段时间。ETH 1.0将最终过渡为ETH 2.0系统上的一个分片。

Quantstamp将继续报导未来ETH 2.0的发展。请在[Twitter](http://twitter.com/quantstamp)上关注我们并访问我们的[博客](http://quantstamp.com/blog)，及时了解最新资讯。

 &lt;br/&gt;

&lt;br/&gt;

网页版声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新 (截至2020/5/30)]]></title><description><![CDATA[Eth2研发工作稳步进行中：阶段0规范迎来v0.12.0版本，新多客户端测试网Witti运行良好。]]></description><link>https://www.ethereum.cn/wnie2-2020-5-30</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-5-30</guid><pubDate>Mon, 01 Jun 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200530)

#  

&lt;br/&gt;

# 阶段0：信标链

规范0.12.0版本已经发布，并且取名非常有意思：[Quarantine Haircut](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.12.0) (隔离理发)。

此版本主要针对备受期待的**BLS签名标准**进行了更新，也包括对[消极惩罚](https://news.ethereum.cn/wp-admin/post.php?post=1786&amp;action=elementor#inactivity_penalty_quotient)(“二次泄漏”) 的调整。**如果经过了四个epochs依然没有一个检查点获得最终确定，那么就会实施消极惩罚。**其目的在于削减怠惰验证者的质押金，使其被网络强行驱逐，剩下的活跃验证者就可以再次对区块链进行最终确定 (实际操作中可能要花费几周时间)。

**如果验证者正常工作，则不应受到惩罚。**但根据之前的规范，即使验证者恪尽职守，也可能会遭受一定的经济损失。在本版本规范中，不会再发生这种情况。只要验证者正常参与工作，就不会遭受损失。

另一项重要进展是libp2p Gossipsub协议更新至[1.1版本](https://blog.ipfs.io/2020-05-20-gossipsub-v1.1)。

客户端团队目前也正致力于实现新版本。该版本将作为多客户端测试网的基础组成部分之一，如果没有出现任何重大问题，网络正式上线时也会沿用。

顺便一提，同时还针对[规范0.11.3版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.3)进行了一些隐藏更新。该版本实际上是回溯性发布的。Runtime Verification在其中发现了一个**零日共识 (zero-day consensus) 漏洞**，并且所有客户团队都收到通知要在报告公开之前低调[修复漏洞](https://github.com/PegaSysEng/teku/pull/1782)。这模拟了在真实的网络中应对类似意外的情景，是一个有用的测试案例。

现如今所有人都很忙，以至于很容易将重要的解决方案掩埋在大量的PR中。未来这种情况会有所改善，遇到类似的情况也要非常谨慎地处理和协调。

##  

&lt;br/&gt;

# 测试网

## Schlesi的日落

在[上期的wnie2](https://hackmd.io/@benjaminion/wnie2_200515)中，我提到扩大Schlesi的参与范围并鼓励大家都加入进来，在这之后不久，我们成功地[击破了Schlesi😱](https://twitter.com/etherchain_org/status/1262070083645517835)

Ivan在最近的[Prysmatic Labs](https://medium.com/prysmatic-labs/eth-2-0-dev-update-50-multiclient-testnet-restart-slasher-improvements-f1e9339b1922)更新中给出了一些细节。过程如下：

- 由于未知原因，区块链停止对新的检查点进行最终确认
  - 当参与人数较少的时候会发生这种情况。一个可能的致因是Teku没能在其区块中包含大量证明。
  - 无论如何，这都会导致“二次泄漏”(quadratic leak) 的发生，旨在淘汰未参与工作的验证者。
- 同时，发生了第一例罚没。
- 紧接着，Prysm、Lighthouse和Teku都不能彼此达成共识，发生了三向分叉。
  - [Prysm](https://github.com/prysmaticlabs/prysm/issues/5897)和[Lighthouse](https://github.com/sigp/lighthouse/pull/1166)都未能对遭到罚没 (未驱除) 的验证者进行消极惩罚
  - 此外，Prysm还为遭罚没的验证者[错误地](https://github.com/prysmaticlabs/prysm/issues/5901)提供了区块提议奖励
  - Teku的表现则符合规范😇

多客户端测试网的过程[非常艰辛](https://twitter.com/benjaminion_xyz/status/1262092270146392064)，要使得漏洞无处遁形，我们需要对网络大力施压。无论是无法进行最终确定，还是验证者罚没事件，对我们来说都是非常有意义的挑战。

Teku是网络中最后一个正常运行的客户端，但我们也是九死一生。一旦缺乏最终确定性，所占用的内存就会开始无限增长，最终结果就是迫使大多数Teku节点退出网络。

我们为一对伴侣提供了巨大的存储空间，虽然能够暂时应对，但也是捉襟见肘，应该无法坚持多久。我们[正在解决](https://github.com/PegaSysEng/teku/pull/2007)这个问题！

## Witti万岁！

标题取自Somer Esar的[测试网阐释性文章](https://medium.com/@SomerEsat/schlesi-is-dead-long-live-witti-151178064c3c)。

原则上来说，我们可以修复Schlesi，但是在本阶段，测试网应该一次性使用并且快速迭代。因此几天之内，Afri便开始筹备[Witti测试网](https://github.com/goerli/witti)。创世阶段将包括三个客户端 (Prysm、Lighthouse以及Teku)，Schlesi起始时只有两个客户端。

开始的时候有些坎坷：一些客户端对于创世时间和需要迅速修复的分叉版本有些不同意见。但于UTC时间的5月26日零点，Witti正式上线了。Afri在Twitch上[进行了直播](https://www.twitch.tv/videos/632975432)。目睹新测试网上线是一种非常神奇的体验，或许下一次我应该熬夜等待。🎉

说到熬夜 (UTC零点在我这里是凌晨一点，Afri则是凌晨两点)，目前还有一些关于网络上线时间[灵活性](https://github.com/ethereum/eth2.0-specs/issues/1849)的讨论。

无论如何，Witti截至目前运行良好，Afri也在最近的开发者会议中鼓励大家努力对新测试网[施压](https://news.ethereum.cn/wp-admin/post.php?post=1786&amp;action=elementor#Testnets)。大家在[witti.beaconcha.in](https://witti.beaconcha.in/)和[Eth2Stats](https://eth2stats.io/witti-testnet)上可以追踪到进度。

如果读者朋友想要成为Teku节点，此处是我写的[指引](https://docs.google.com/document/d/1CTN_t_0UGRJSpW27yOux1lwxbVz-J4CclGs-tSax4U4/edit)。

## Topaz

同时，Prysm客户端的[Topaz测试网](https://medium.com/prysmatic-labs/introducing-topaz-testnet-8e8a4e00a700)仍在[不断发展](https://twitter.com/terencechain/status/1266399332967739396)，目前已经拥有数量惊人的验证者。尽管单客户端测试网相较多客户端测试网容易许多，但Topaz的成功仍然了不起。Prysm团队正在[收集用户反馈](https://docs.google.com/forms/d/e/1FAIpQLSfzAKCgLpN1WxVQX502WezgTXaVS6xb0w0S5kjaMhfd9tgXtQ/viewform)。如果您加入了Topaz或Sapphire，烦请移步填写反馈。

Somer Esat最近发布了一篇从Ubuntu平台加入Topaz的[Staking全面指南](https://github.com/SomerEsat/ethereum-staking-guide)。

来Etherscan看看Topaz的[涂鸦墙](https://beacon.etherscan.io/stat/graffiticloud)吧！

## 其他测试网资讯

Jonny Rhea一直在研究一个有趣的[网络浏览器](https://github.com/txrx-research/prkl)工具，事实证明该工具确实非常有用：从本质上讲，分布式网络的debug难度很大。我们可以看到它为[Topaz](https://txrx-research.github.io/prkl/topaz-analysis.html)和[Witti](https://txrx-research.github.io/prkl/witti-analysis.html)生成的美图。Jonny对其内容进行了[说明](https://twitter.com/JonnyRhea/status/1263151048199372801)。😀

#  

&lt;br/&gt;

# 释义性文章

ConsenSys持续在发布Eth2的相关内容。最近的内容是：[以太坊2.0中我的ETH会如何？](https://consensys.net/blog/blockchain-explained/what-happens-to-my-eth-on-ethereum-2/)

Cointelegraph：[以太坊2.0 Staking解析](https://cointelegraph.com/explained/ethereum-20-staking-explained)

CoinCodeCap：[信标链—以太坊2.0的心脏](https://blog.coincodecap.com/ethereum-beacon-chain/)

想了解Staking中的签名密钥和提款密钥吗？想知道它们如何从同一个助记符导出吗？Carl Beekhuizen也更新了他的[“Eth2 Staking系列”之四：[密钥篇!🔑](https://blog.ethereum.org/2020/05/21/keys/)。

Cayman Nava：[进行Staking之前每个Eth2验证者需要了解的八件事](https://medium.com/chainsafe-systems/8-things-every-eth2-validator-should-know-before-staking-94df41701487)

Hudson一直在整理[Eth2 Staking的硬件设备](https://hudsonjameson.com/2020-05-18-eth-2-0-staking-and-more-with-topaz-and-dappnode-for-under-750/)并且安装DAppnode。温馨提示，Reddit上最近有许多关于在家里设置[Staking硬件](https://news.ethereum.cn/wp-admin/post.php?post=1786&amp;action=elementor#Staking)的讨论。在此我很高兴地和大家分享[Metal Albert](https://news.ethereum.cn/wp-admin/post.php?post=1786&amp;action=elementor#And-finally…)仍在完美运行。

另外，Rocket Pool希望读者了解一下[代币化质押](https://medium.com/rocket-pool/rocket-pool-2-5-tokenised-staking-48601d52d924)以及他们的2.5版本更新。

以下是一些视频资源：

- [ETH2 Staking 社区会议#5](https://www.youtube.com/watch?v=LB1MmF-mEKM)，Attestant的Jim McDonald也参加了。我喜欢Jim的原因有二：他很懂行；他和我是我所知道的唯二有英式口音的Eth2开发者。
- Danny Ryan参加[0访谈](https://www.youtube.com/watch?v=ikSK8V9yapQ)，回答了一些来自/r/ethfinance板块的[问题](https://www.reddit.com/r/ethfinance/comments/gsybfz/danny_ryan_on_eth20_progress/)，提供[MP3](http://files.kobe.show/DannyRyan.mp3)格式。
- [Multi.io](https://www.reddit.com/r/ethereum/comments/gs1yhi/ethereum_20_staking_overview_by_multiio/)：[以太坊2.0之Staking概览](https://www.youtube.com/watch?v=GfYU3KL29tE)
- 最后是来自[VoskCoin](http://voskco.in/)的[以太坊2.0更新](https://www.youtube.com/watch?v=9y33z7Ncazs)

#  

&lt;br/&gt;

# 研究工作

来自PegaSys另一只研发队伍TX/RX的[更新](https://hackmd.io/@353yQn6WTImF5o12LQXXfQ/BJf1eCAjU)：

- 节点发现协议v5的广播效率比较
- Eth1 &lt;-&gt; Eth2合并
- 上文提及的Eth2网络监测
- 跨分片交易模拟
- Onotole规范转译器
- 分叉选择测试
- 时钟同步协议

阶段1也有一些有趣的进展。Eth2的协议在设计之初就考虑到如何兼顾多方计算 (MPC)，以便进行去信任的集体质押。PlatON[已获得一笔资助](https://medium.com/@PlatON_Network/platon-has-confirmed-to-complete-an-ethereum-foundation-granted-project-poc-in-ethereum-2-0-8270e3953523)，用于实施和测试MPC托管证明结构。

除了TX/RX更新中提到的工作之外，[EthResear.ch](http://ethresear.ch/)上的主要动态是Vitalik针对Justin的[Eth2喂价概念](https://ethresear.ch/t/enshrined-eth2-price-feeds/7391?u=benjaminion)提出的[反对提案](https://ethresear.ch/t/counter-proposal-to-enshrined-price-feeds-dual-token-oracles/7437?u=benjaminion)。Justin的提案在[两周前](https://news.ethereum.cn/wp-admin/post.php?post=1786&amp;action=elementor#Research)引起了一些热议。Vitalik倾向于将大部分预言机实现保留在应用层，但在基本协议层添加一些功能以促进其安全性是可能的。

#  

&lt;br/&gt;

# 常规会议

## 实现者会议

5月28日进行了第40次会议。

- [会议议程；](https://github.com/ethereum/eth2.0-pm/issues/154)
- [会议视频](https://youtu.be/xvIk22HvTVE?t=282)；
- 我的[速记](https://hackmd.io/@benjaminion/H1h7zHTiL)以及[Mmay的笔记](https://gist.github.com/mratsim/813c041b58bfc2f2f34722c3cdcffac2)

本次会议没有重要的变动或通告。大部分内容还是围绕节点发现协议v5进行。

#  

&lt;br/&gt;

# 其他资讯

- 客户端团队[Lighthouse](https://lighthouse.sigmaprime.io/update-25.html), [Lodestar](https://medium.com/chainsafe-systems/lodestar-project-update-c89b15122c57)and [Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-50-multiclient-testnet-restart-slasher-improvements-f1e9339b1922)的进展更新
- Danny[想知道](https://twitter.com/dannyryan/status/1266026646294806541)有哪些团队致力于验证者离线状态的通知服务
- 下一次[Eth2 Staking会议](https://www.reddit.com/r/ethstaker/comments/gqwwua/ethereum_stakers_community_call_6_features_afri/)将在UTC时间5月31日晚8点进行，Afri会针对Eth2测试网进行讨论。这次会议比以往要早，我尽量参加。
- 以太坊基金会正在[招募](https://twitter.com/CarlBeek/status/1266388162689073152)Eth2存款Python CLI的审计者。此处是[RFP](https://notes.ethereum.org/@av80r/Eth2-deposit-CLI-audit_RFP)。
- EthHub[想了解](https://twitter.com/econoar/status/1266166292442038275)大家希望在“使用Eth2板块”中看到哪些内容

#  

&lt;br/&gt;

# 写在最后

今天我终于预定了[**The Infinite Machine**](https://www.amazon.com/Infinite-Machine-Crypto-hackers-Building-Internet/dp/0062886142/ref=sr_1_1?crid=2D48OQ5YQR3LP)，Camila Russo在其中讲述了以太坊的故事。我不清楚其中是否会有许多Eth2的内容，但我仍然对这本书非常期待。

 

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊基金会2019春季发展报告]]></title><description><![CDATA[2018年至今，以太坊硕果累累，接下来一年以太坊基金会将做出什么改变？]]></description><link>https://www.ethereum.cn/ethereum-foundation-spring-2019-update</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-foundation-spring-2019-update</guid><pubDate>Sun, 31 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/05/21/ethereum-foundation-spring-2019-update/)




&lt;br/&gt;


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/MMWqtCR/1a8b2a9c12.png&quot; /&gt;&lt;/center&gt;

&lt;br/&gt;



# 1. 前言

致以太坊社区，

以太坊的前景是光明的。在过去的一年中，作为一个由开发者、企业家、研究人员和热忱的用户组成的全球社区，以太坊取得了巨大的进展。过去一年中，每周都有基于以太坊构建的新应用程序发布到主网，扩展性解决方案上线，以太坊2.0也在稳步向前，并且即将抵达重要里程碑。以太坊仍然是名副其实的去中心化应用平台，并且每天都守护着数十亿美元的数字资产。

以太坊基金会团队对整个社区取得的进步感到震撼和欣慰。从以太坊成立之初，我们就作为一个非盈利性组织致力于维护生态系统，并且只专注于为以太坊提供最好的支持。

随着生态系统逐步成熟，以太坊基金会也不断修缮着工作重心。“为以太坊提供最好的支持”并非意味着包办一切，这意味着我们会专注于可以附加最大价值的领域，并且为其他同伴留出发挥价值的空间，让他们也发光发热。

那么现如今以太坊基金会扮演着怎样的角色呢？

**以太坊基金会是一个：资源分配者、生态系统发声者、拥护以太坊走向世界的倡导者。**

&lt;br/&gt;

### **资源分配者**

现如今，以太坊基金会持有流通中约 0.6% 的ETH，以及一些现金储备。这些资源将会随时间推移而减少，以投入到以太坊生态系统的关键工作中。虽然这些资本在数量上十分可观，但并非取之不竭。我们的责任是要确保每一美元和 wei 都得到高效利用。

同时我们也致力于增强以太坊生态系统的资金基础。也就是说，我们将鼓励基金会以外的其他组织支持高优先级项目，同时以太坊基金会也支持创新的融资机制，包括 Gitcoin grants 和 MolochDAO。诸如此类的努力既能使得我们更好地利用现有资源，也能为未来资助重点项目铺设一条长期的、可持续的道路。

&lt;br/&gt;

### **生态系统发声者**

我们知道很多人将基金会看作值得倾听的发声者，即使我们积极壮大其他组织也是如此。这个声音是一种资源，可以有效地助推以太坊发展。例如，我们有能力发掘具有重要意义却鲜为人知的项目，与公众分享有关以太坊进展的宝贵信息，并且鼓励地区性以太坊社区的发展。

在未来的以太坊社区中，大家将会听到来自基金会更加积极活跃的声音。

&lt;br/&gt;

### **拥护以太坊走向世界的倡导者**

对于社区外的公众来说，提起“以太坊”可能会令人心生疑惑——这或许还只是一个保守说法。许多新人之前从未接触过类似的概念，因此还不理解我们充满活力和去中心化的生态系统。

当有人 (企业、政府或普通人) 通过各种方式进入到以太坊世界，以太坊基金会通常是他们的第一站。首先要需要明确的是：以太坊生态系统是分布式存在的，不隶属于也不由任何基金会或组织运营。我们的基金会起到辅助外界了解以太坊的作用，是人们进入以太坊生态系统的一个传送门。

我们也意识到在以下几个方面有必要采取更多主动性：扩大以太坊生态系统、吸引开发者加入、改善开发者体验。下文将详述我们在这三个方面部署了哪些重要资源。

 &lt;br/&gt;

# 2.以太坊基金会的哲学理念

以太坊并非一个普通的开源项目，基金会也不是一个普通的组织。因此，要成功培育出具有活力、去中心化的以太坊生态系统就需要另辟蹊径。

即使我们手握资源，在整个以太坊生态系统部署大量资源的行为也必须秉承着一个核心精神，即去中心化。因此我们特意使用“减法哲学 (philosophy of subtraction) ”作为理念指导，这使得我们所做的一切都是透明的。

简单来说，遵循减法哲学意味着：防止组织在增长过程中自我累积价值的自然趋势，确保这种价值是由基金会自身之外更广大的以太坊生态系统所创造的。

  



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/nc6rJGF/1-9aea93b71a.png&quot; /&gt;&lt;/center&gt;







我们不为自己抢占先机，而是将这些机会散发给社区；我们不会自外而内积累优势，而是自内而外将资源分享给生态系统中的团队；我们不与以太坊生态系统相争，当其他组织创造价值时我们感到非常欣慰，因为这使得以太坊更加去中心化、可持续。

以太坊成功则以太坊基金会成功，而以太坊的成功在于一个强大的去中心化社区。主导我们工作的正是这样的思维方式。

 &lt;br/&gt;

# 3. 以太坊基金会资助项目

过去12个月是以太坊发展的关键时期，我们不遗余力地为整个生态系统中的团队提供了支持。以太坊基金会资助的项目团队取得了许多喜人的进展，本文无法全然涵盖，以下是精选案例:

&lt;br/&gt;

### **ETH 2.0 客户端团队**

ETH 2.0 是以太坊协议一系列转型升级的总称。去年，ETH 2.0 从研究项目转为工程设计项目。基金会支持下的客户端团队包括 Nimbus、Prysm、Sigma Prime 和 Substrate Shasper ，这些团队都致力于使 ETH 2.0 成为现实。

在过去的几个月里，Nimbus、Prysm 以及 Sigma Prime 的 Lighthouse 测试网都已陆续发布。上面提到的团队和其他团队目前正在对他们的客户端进行稳定和优化，为多客户端测试网做好准备工作。

在未来的几个月里，许多资源将进入测试阶段，还有模糊测试和审计。我们利用 运行时验证（ Runtime Verification）来对存款合约 (deposit contract) 进行形式化验证并对信标链 (beacon chain) 作出正式规范。除此之外，参与 ETH 2.0 研究、开发和安全的团队还在安全性方面做出了相当大的努力。

&lt;br/&gt;

### **ETH 1.x**

去年启动的 ETH1.x 计划旨在提高以太坊短期的可扩容性和可持续性，以便当前阶段的以太坊能更平稳地向 ETH 2.0 过渡。我们资助的项目包括 Alexey Akhunov 对无状态客户端 (stateless clients) 和状态费用 (state fees) 的研究，以及 Andrew Ashikhmin 对同步协议改进 (sync protocal improvement) 的研究。

有关Geth 和 Solidity 等重要项目的工作仍在继续，我们支持的所有团队也在定期汇报更新。

&lt;br/&gt;

### **ZK-rollup**

ZK-rollup 借助简洁的零知识证明，使以太坊能够每秒处理数百笔交易。我们为 Barry Whitehat 和 Matter Labs 的合作提供了支持，他们的合作在研究、开发和实现方面起到了带头作用。

&lt;br/&gt;

### **ETHGlobal**

ETHGlobal 主要在世界各地举办以太坊黑客松，致力于将新的开发者引入以太坊生态系统、发掘以太坊项目、促进新公司的成立。在最近的 ETHCapeTown 活动中，70%的参会者来自南非，40%的参会者刚开始接触以太坊领域。

&lt;br/&gt;

### **以太坊学术及研究合作**

以太坊基金会在斯坦福大学和麻省理工学院举办了三场研讨会，彼时，数十位才华横溢的数学家、计算机科学家和经济学家被引导到与以太坊相关的领域进行学术研究。其中的许多人仍在继续研究这些问题，并在一些关乎以太坊未来的重要领域中取得了进展，包括 Casper CBC、VDF、Plasma结构、基于简洁零知识证明的系统、活性及以太坊2.0安全界限等等。

此外，以太坊基金会、Supranational 和 Protocol Labs 合作的 Cryptohage 项目为 LCS35 时间胶囊加密难题提供了一个解决方案，该难题由著名的密码学家 Ron Rivest 提出，原本预计的解题时间需要三十五年，而使用此解决方案仅用了两个月。

&lt;br/&gt;

### **与知名组织合作，推动他们参与以太坊生态系统**

作为拥护以太坊走向世界的倡导者，基金会一直极力鼓励知名组织参与到以太坊生态系统中来，以强化整个生态系统。

其中值得注意的是，我们一直与微软 Azure 团队保持紧密合作，承诺长期致力于通过 Visual Studio Code 和全新的 Azure Blockchain Service 来改善以太坊开发者体验。

我们还与 HTC 和 Opera 等大型实体组织建立了联系，鼓励它们参与以太坊社区，支持基于以太坊的应用程序。我们还与联合国儿童基金会 (UNICEF) 等独立组织合作，寻求将以太坊用于社会公益。

基金会支持下的团队正在做的事不胜枚举，上文只是给出了一些例子。接下来几周这些团队将会发布更多进展，敬请关注。

 &lt;br/&gt;

# 4. 未来一年的资源分配计划

**从生态系统出发的全局视野**

今天，我们很高兴能与大家分享基金会接下来一年的工作重心，以及我们希望如何在为整个生态系统分配资源。

经过以往的学习和迭代，我们对工作流程和工作重心作出了必要的修改。从前以太坊生态系统比现在小得多的时候，基金理应优先资助一些“内部”团队，以进行最基础的建设。但随着社区不断扩张，我们启动了一个资助计划，这使得生态系统内更多的团队都能得到我们的支持。

于现在的以太坊基金会而言，一个项目是由内部团队或外部团队主导的已经不再重要。重要的是我们要高效地利用资源，使以太坊的目标都能成为现实。这就是为什么我们在考虑资源分配时，要从局部思维中脱离出来，转向“生态系统层面”的全局视野。

在接下来的一年里，以太坊基金会计划在生态系统各方面的关键项目中投资 3,000 万美元。该预算不受ETH价格影响。

我们相信，当前是以太坊发展的关键时期，有必要对生态系统各方面的重要项目进行大量投资。在这样一个巨大而蓬勃的生态系统中进行资源分配对基金会的治理优化提出了挑战。我们需要不断地对决策进行重新评估和优化，因此每天都会有达到平衡的新的可能性。

为了进一步阐明我们如何定义优先资助项目，我们列出了三种主要的资源分配范畴：

是否能帮助 **(i)构建未来的以太坊，(ii)支持目前的以太坊，(iii)开发者的增长和意识。**

&lt;br/&gt;

### **搭建以太坊的未来**

**未来12个月预计拨款 1,900 万美元**

自诞生之初，以太坊一直是一个雄心勃勃的技术项目。因此，要实现以太坊的雄心壮志，大量的资源需要被用于资助研发。目前正在进行的生态系统各方面的关键工作包括ETH 2.0 等活跃的工程设计项目，以及更多的长期投资，比如提高学术界在以太坊技术中的参与度。

其中包括：

- ETH 2.0：客户端团队、研究工作、VDF、文件撰写和通讯；
- Layer 2：状态通道和Plasma；
- 继续eWASM的研究工作；
- 智能合约语言；
- 形式化验证、审计和规范化工作；
- 零知识证明的研发工作，包括ZoKrates;
- 以太坊“阶段3及后续阶段”的研发工作；
- 直接与学术机构合作，吸引优秀的研究人才

&lt;br/&gt;

### **支持目前的以太坊**

**未来12个月预计拨款 800 万美元**

以太坊产品目前维护着数十亿美元的资产，同时以太坊还作为数以百计的已上线应用程序的基础层。我们坚信有必要为这方面的工作提供持续支持，方能维持目前“以太坊 1.0”在全球智能合约平台中的主导地位。

其中包括：

- “ETH 1.x”架构下的许多提议；
- Geth
- Solidity
- js &amp; Ethers.js

**开发者的数量和意识增长**

未来12个月预计拨款 300 万美元

&lt;br/&gt;

### **开发者！开发者！开发者！**

以太坊只是一个平台，而基于以太坊平台进行搭建工作的开发者也是以太坊的未来美好愿景能否得以实现的关键因素之一。想要扩大以太坊社区、续创以太坊成就，就必须在开发者关系、教育和培训等方面进行投入。亚洲地区为以太坊的发展提供了重大机遇，因此这方面在亚洲地区显得尤为重要。

这个投资金额还包含了以传统方式向技术受众和基于以太坊的应用程序用户进行推广，从而提升人们对以太坊的认知。

其中包括：

- 开发者教育和培训；
- 支持围绕开发者开展的社区活动，例如ETHGlobal；
- 继续举办Devcon 作为以太坊生态系统的年度聚会；
- 支持地区性以太坊社区组织；
- 改善开发者体验和开发者工具；
- 吸引优秀的开发人才；
- 促进浏览器及其他面向大众消费者的技术将以太坊无缝集成到其用户体验中；
- 持续改进ethereum.org

###  &lt;br/&gt;

# 致谢！

回顾以往，以太坊在过去一年中取得的进展值得庆贺；展望未来，却比以往任何时候都更激动人心！

文中描述所及的一切：每一次的技术进步、每一个计划、每一次活动，都是由你们中的一员实现的。这虽然是来自以太坊基金会的一封信，却是关乎整个以太坊社区的一封信。无论读到这里的你是以太坊社区得新成员还是从创世区块起就与我们并肩前行，感谢你们的支持和付出！通往以太坊未来的路上，期待与你们继续相伴。</content:encoded></item><item><title><![CDATA[安全解锁合成资产时代]]></title><description><![CDATA[DeFi圈内如火如荼的合成资产实验是什么？本文为你讲解其机制和利弊。]]></description><link>https://www.ethereum.cn/safely-unlocking-the-synthetics-era</link><guid isPermaLink="false">https://www.ethereum.cn/safely-unlocking-the-synthetics-era</guid><pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate><content:encoded>&lt;center&gt;什么是合成资产？重要性何在？如何在DeFi框架内进行评估？&lt;/center&gt;



来源 | [Bankless](https://bankless.substack.com/p/safely-unlocking-the-synthetics-era)



&lt;br/&gt;



没准你已经在使用合成金融产品了。



如果你 (Alice) 和你的朋友Bob打赌，其胜负取决于赛事结果，那么你就进行了一次所谓的合成交易 (synthetic trade)。如果其中由你的另一个朋友Charlie保管押金，以保证赌局结束后能够进行兑现，那么 Charlie 就充当你们的代理人(escrow)和清算层 (settlement layer)。如果你们信任 Charlie 的严谨公正，让他来进行裁断，那么他也充当了预言机的角色。



每种合成产品都由以下核心部分组成：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Jyt80m4/1-d85eec6639.png&quot;/&gt;&lt;/center&gt;

合成产品之所以备受欢迎，恰恰是因为它们具有**灵活性**。**它们使市场参与者能够对冲本来无法买卖的风险，使之成为现代金融最有用的概念之一。**



在衍生产品面世之前，大宗商品制造商无法对冲其产品价格下跌的风险，而大宗商品消费者亦无法对冲价格上涨的风险。还有500多万亿美元的法币利率衍生品市场，允许借贷人对冲其利率风险。流动利率市场使得金融产品 (譬如美国的30年固定利率房贷) 成为可能。不然的话，要是银行债务倾向于提供流动利率，哪有银行还愿意借出30年的固定利率贷款。



 

&lt;br/&gt;

# 为何链上合成资产如此重要？



开放性金融市场的前提是每一位市场参与者都拥有平等的准入资格**。**通过中心化的媒介来代币化现实资产，则有价值的金融产品将共享同一个清算层。然而，开放金融市场并不能消除所有准入障碍，因为用户最终必须信任中心化媒介或托管人，并遵守其规则。**区块链上的合成产品通过消除所有金融市场的各种准入障碍来促进市场的公平性与开放性，允许任何个人、实体或去中心化自治组织 (DAO) 使用任何类型的金融产品，同时，也能避免中心化或单点故障 (single points of failure)。**



 

&lt;br/&gt;

# DeFi合成资产



由MakerDAO管理的稳定币Dai就是其中一种合成资产。



之所以称之为合成资产，是因为它具有两个主要特征：



1. **Dai的价格锚定美元 (USD);**
2. **Dai的价值由抵押品的价值背书，并非其本身固有。**



Dai的价格由ETH背书，锚定美元 (USD)。不过也可以在Maker平台上锚定其他目标价格，获得各种不同的合成资产：



- 锚定Gold/ETH，便可获得黄金 (Gold) 合成代币，由ETH背书
- 锚定EUR/ETH，便可获得欧元合成代币，由ETH背书
- 锚定S&amp;P/DAI，便可获得标准普尔指数 (S&amp;P index) 合成代币，由Dai背书



这一巧妙的金融设计就像万花筒一般，给予“金融工程师们”充分的自主性和创造性。我们可以将任意的抵押代币兑换成任意的合成代币。甚至还可以抵押合成代币A，兑换合成代币B。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Jkt0tWC/2-95afb57223.gif&quot;/&gt;&lt;/center&gt;


&lt;center&gt;（上图）可以设计合成资产来启用各种各样的应用——既适用于合成代币持有者，也适用于发行者。而上图仅仅给出了最表层的描述。&lt;/center&gt;


&lt;br/&gt;

也就是说，并非所有的合成资产的价格都相同。针对不同的用途，用户需要仔细斟酌一种合成代币的特性。这确实不难，问问自己这两个问题：



- 该合成代币的目标价格是什么？
- 在什么条件下，我可以信赖被锚定的合成代币价值呢？



 

&lt;br/&gt;

# 对比评估DAI和sUSD



为了解释清楚，可能需要对比评估Dai和sUSD。这两者的目标价格都是1美元，然而其流动担保和维持锚定的机制都大不相同。



**sUSD更适合短期投机**。sUSD的交易价格恰好是1美元，但是仅可以在Synthetix交易所上进行交易。只要预言机价格准确，并且资金池中的抵押物充足，那么Synthetix交易所中所有的交易都能以合理的价格进行。与Synthetix平台上其他的合成资产相比，这一特性使得sUSD更加适合投机。然而，没有了这个平台，sUSD缺少维持其稳定性的直接工具。



**Dai更适合于长期持有**。Dai的交易价格在1美元上下波动，然而正因为如此，MakerDAO治理体系采用了许多手段来平衡供求关系。不过在最坏的情况下，全球清算 (Global Settlement) 可能会导致所有Dai赎回1美元的抵押品。当然，只要MKR持有者共同制定恰当的治理方案，Dai就能维持其价值。Dai的这种特性使其不适合作为USD的短期交易替代币，却十分有利于长期的稳定价值储存 (前提是信任MKR以及MakerDAO基金会)。



不同的合成资产机制都要克服如此两难，并找到折衷的办法。



作为用户，我们得清楚自己需要什么作为背书，以及持有多长时间。我们需要一份短期流动资产还是长期价值储存资产？这些问题可以帮助你选择合适的合成资产协议。



 

&lt;br/&gt;

# 预言机的问题



不管使用哪种资产协议，它们多多少少都会使用到预言机。



预言机允许智能合约了解平台以外的数据信息。而DeFi协议利用这些数据来决定哪种资产可以作为抵押。**这意味着如果你掌握了预言机输出的数据，你就掌握了锁定在DeFi合约里的资产。**



目前DeFi圈内面临的最大难题就是预言机。最近的一些事件很明显都是由预言机问题所导致：bZx闪电贷攻击、SNX预言机抢先交易以及Maker黑色星期四事件。



### 解决方案1：需要借助链下价格



大多数的解决方案，都是提议尽可能快速频繁地从链下可信任的APIs中安全地获取数据。Provable Things、Chainlink甚至Compound的开源预言机都延伸了这种解决方案。许多DeFi合约为了提高其安全性，还在链上价格可用前进行延迟，或者增加“上限条款”(circuit-breakers)，即在特定的时间段内价格的最大值。我们需要对这类策略进行权衡，例如可能导致预言机抢先交易或者更严重的操作不确定性。



### 解决方案2：无需借助链下价格



另一种提高DeFi安全性和解决DeFi扩容性问题的方法，就是最小化预言机的使用程度。与其解决我们正面临的去中心化预言机问题，我们要知道更加符合区块链本质的DeFi合约无需假设链上准确价格来源的存在。相反，只有当合约间存在无法解决的争议时，“无喂价” (priceless) 合约才会使用预言机，以查询历史价格。并且，对于确实需要推送到链上的预言机价格，需要为价格的准确性提供经济担保。



 

&lt;br/&gt;

# 总结



合成资产是强大的金融基元，开放式金融允许用户以新方式创建各种合成资产。但是我们对于合成资产不能盲目地趋之若鹜，其设计模式还未经全面测试，并且每种模式都有其利弊。作为用户，我们则拥有参与时下这场金融试验的绝佳机会，并为下一代标准的制定做出贡献。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

## </content:encoded></item><item><title><![CDATA[Eth2 Staking系列#4：密钥篇]]></title><description><![CDATA[在Eth2中，验证者需要哪些密钥？又将如何记录和存储密钥？]]></description><link>https://www.ethereum.cn/eth2-staking-keys</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-staking-keys</guid><pubDate>Mon, 25 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/05/21/keys/)

作者 | Carl Beekhuizen



 &lt;br/&gt;

![质押1.png](https://i.ibb.co/WyP26VY/1-8cf3398852.png)
&lt;br/&gt;

 

感谢Sacha Yves Saint-Leger和Danny Ryan对本文的审校。

无论是哪一个权益证明 (PoS) 系统，其核心都是签名方案。签名用于识别验证每个验证者的身份，从而我们将验证者行为 (无论好坏) 追溯到验证者本身。

我们可以通过查看验证者签名的消息验证其是否诚实，也可以将违反共识规则的消息作为其恶意行径的证明。

在eth2中，每个验证者的身份标识便是他们的公钥。具体来说，每个验证者会有两组密钥：签名密钥和提款密钥。

#  &lt;br/&gt;

# 签名密钥

签名密钥是验证者需要用于签名证明 (attestation) 和提议区块的密钥。由于一个验证者在每个epoch内至少需要对一条消息进行签名，客户端软件必须对签名密钥进行托管。

#  &lt;br/&gt;

# 提款密钥

客户端软件始终保持互联网连接，因此验证者的签名密钥是完全有可能受到威胁的。为了减轻相应影响，验证者的操作需要通过两种密钥来实现。

如上所述，验证者通过签名密钥履行其职责。而提款密钥可以控制验证者的资金 (转移和提取ETH)。

验证者在其整个生命周期内需要使用提款密钥的次数很少。也就是说，可以将提款密钥可以使用冷存储方式，以极高的安全性进行存储 (脱机)。

*最早在阶段1才能进行转账和提款

#  &lt;br/&gt;

# 太多密钥怎么办？

如果每质押32 ETH，质押者都需要保存并且使用两种不相关的密钥来进行存款，那么局面很快就会失控。

幸运的是，对此我们有一个解决方案：为密钥设置一个共用密钥，这样一来仅需存储一个密钥就可以访问多个密钥。

在eth2中，这个解决方案通过[EIP 2333](https://eips.ethereum.org/EIPS/eip-2333)和[2334](https://eips.ethereum.org/EIPS/eip-2334)实现：这组标准描述了提款密钥和签名密钥之间的关系，以及如何从单个助记符中导出它们。

#  &lt;br/&gt;

## 助记符

助记符是对密钥进行编码的另一种方法，使得人们在存储和备份其私钥时更为简便。

举个例子，记录一组助记符 `sausage solution loud isolate focus glide frame door clown million shuffle impulse` 比准确地记录一串密钥 `0x1e9f2afcc0737f4502e8d4238e4fe82d45077b2a549902b61d65367acecbccba`

#  &lt;br/&gt;

## 要从共用密钥导入密钥

与钱包互动时，你可能会碰到格式为`m/44’/60’/0’/0/0`的“路径”。这些路径描述了密钥之间的关系。

根据[EIP 2333](https://eips.ethereum.org/EIPS/eip-2333)，其关系采用树结构的形式，其中密钥由熵源 (树的seed) 和树路径确定。

我们使用种子来计算树根，然后在基于树根层层构建。该密钥树完全根据其后分支之间的关系和树根来进行定义。

实际上，这使得我们可以从树的根部开始，并在每个分支上计算中间键，然后抵达相关叶子节点，从而在树中找到需要的任何键。

奇妙之处在于，我们可以从单个熵源 (比如一个助记符) 开始，然后基于此衍生出实际上无限数量的密钥。

此外，通过仅存储该助记符，你可以备份作为验证者所使用的每个密钥。

Eth2 就运用了这种理念，允许通过单个助记符来生成验证者需要的任意数量的密钥。举个例子，如果你想运行3个验证者节点，那么你可以借助单个助记符来生成位于`m/0`, `m/1`, `m/2` 的3个提款密钥。



 &lt;br/&gt;

![质押4.png](https://i.ibb.co/6RqvkdM/4-0263804aa8.png)
&lt;br/&gt;

 

每个分支都由 `/` 隔开，因此 `m/2` 表示从主密钥开始并跟随第2条分支。

在[EIP 2334](https://eips.ethereum.org/EIPS/eip-2334)中，验证者的签名密钥是提款密钥的第`0`个子分支。也就是说，在实际情况中，当你遵循这个标准时，如果知道了用于提款的私钥，那么你可以计算出相应的签名私钥。

继续上方的例子，我们可以在`m/0/0`, `m/1/0`, `m/2/0`找到相应的三个签名密钥。



 &lt;br/&gt;

![质押5.png](https://i.ibb.co/NrzTRqy/5-6f62b1e627.png)
&lt;br/&gt;

 

为了阐明概念，上面的例子尽可能简化了，但实际上涉及的路径要长一些 ([EIP 2334 ](https://eips.ethereum.org/EIPS/eip-2334)要求分别使用 `m/12381/3600/i/0` 和 `m/12381/3600/i/0/0` 的路径来获得提款密钥和签名密钥)。但其中的逻辑和上面的例子相同。

总而言之，需要记住的要点就是：如果你知道助记符，那你就可以计算出提款密钥，继而通过提款密钥得到你的签名密钥。

#  &lt;br/&gt;

# 存储密钥

验证者客户端使用keystore文件作为交换密钥的方式。

Keystore 是经由用户密码加密的包含私钥的文件。只要该密码不是存储在同一台计算机上，Keystore就可以在不同的计算机之间安全进行存储和传输。

当准备开始验证时，要向你的验证者客户端提供 Keystore和对其进行加密的密码，客户端需要这两条信息才能导入私钥。

#  &lt;br/&gt;

# 成为验证者

要成为验证者，首先要生成适当的密钥。当你记下自己的助记符，密钥就能够生成。

由于在阶段0期间无法提取或转移ETH，所以不需要通过Keystore来获取提款密钥，只需保证助记符以安全方式进行存储就够了。

当验证者客户端需要用到签名密钥时，你的每个验证者节点都会收到一个存储相应密钥的Keystore文件。

生成密钥后，就是质押时刻了！每个验证者都需要质押32 ETH，以及质押数据，其中包含你所有的验证者公钥。

之后质押数据将会被记录在eth1的存款合约中。存款合约会由eth2节点进行监控，以便之后将质押数据复制到eth2中。一旦你的质押数据被成功转移到eth2上，那么你就正式成为了一名验证者！

##  &lt;br/&gt;

# 成为验证者的捷径

我们一直致力于构建一个友好的界面来引导用户成为验证者。很快我们就会发布一篇博文介绍什么是Eth2 Launchpad及其使用指南！

往期系列文章推荐：

[Eth2 Staking 系列：分片共识](https://news.ethereum.cn/eth2-staking-sharding-consensus/)

[Eth2 Staking 系列：共识机制篇](https://news.ethereum.cn/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)

[Eth2 Staking 系列：激励篇](https://news.ethereum.cn/validated-staking-on-eth2-1-incentives/)



 &lt;br/&gt;



&lt;br/&gt;

 

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊基金会2020春季报告]]></title><description><![CDATA[以太坊基金会将其现有的生态支持形式分为四大类，力求将资源分配做到多样化、去中心化、全面化。]]></description><link>https://www.ethereum.cn/ethereum-foundation-spring-2020-update</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-foundation-spring-2020-update</guid><pubDate>Fri, 22 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/05/19/ethereum-foundation-spring-2020-update/)

作者 | Ethereum Foundation Team



&lt;br/&gt;



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/tXZXnWH/1.png&quot; /&gt;&lt;/center&gt;
&lt;br/&gt;



致以太坊用户和建设者：

[“以太坊的前路一片光明”](https://blog.ethereum.org/2019/05/21/ethereum-foundation-spring-2019-update/)，我们在去年的报告中如是说道，时隔一年我们仍然这样坚信。今年有所不同的是，以太坊生态系统在过去几年研发工作的奠基上，开始一点一滴拼凑起未来的版图。*(译者注：中文版[以太坊基金会2019春季发展报告](https://news.ethereum.cn/ethereum-foundation-spring-2019-update/)*)

本报告将着重介绍以太坊基金会如何推进以太坊的发展、在拨款等方面进行了哪些工作，以及我们凭何判断以太坊的前景空前明朗。

##  &lt;br/&gt;

# **我们是谁？**

作为一个非营利性组织，以太坊基金会只做对以太坊有利的事。我们也知道那个2014年启动的小型开源项目已经成长为这个行业中最大的社区。正如我们在去年的报告中所说，以太坊的独特优势在于集结了全球的开发者、企业家、研究者以及活跃的用户，我们的以太坊大家庭还在不断壮大。

通常来说，我们只执行自身职责范围内的工作，或者说我们比其他组织更适合为以太坊和以太坊社区提供支持。生态系统是由参与者们汇聚而成的，所以我们首先要感谢大家不断提升自己，日益推动以太坊的去中心化！

即使挑战层出不穷，研发者们仍然锲而不舍，你们的实力和成就令我们叹为观止。还有过去一年中以太坊的用户们，你们的支持和参与为我们的工作提供了源源不断的动力，我们也会竭尽全力将以太坊的潜力呈现给大家。

在本文中，我们会谈到以太坊基金会将**如何推动资源分配工作**，以及**资源分配的流程**。作为以太坊的倡导者，除了生态内部的工作，我们还承担着将以太坊传播到外部世界的使命，因此文内还将介绍如何获取以太坊的最新进展。2020年，我们将迎来备受期待的信标链和PoS (权益证明) 以太坊区块链。

 &lt;br/&gt;

# 我们的目标是什么？如何达成？

以太坊基金会本身比起“教堂” (cathedral) 更类似“集市” (bazaar) 模式。这就意味着EF中的每个工作组和团队都执行着不同的职责，但共同目标都是推动以太坊的发展。这也是我们眼中的以太坊，就像以太坊由**多层layer**构成，以太坊基金会的**资源分配方案**也是如此。

清楚了这一点，下文我们也会就如何分配资源进行阐述。

总的来说，我们面向的是许多固定研发团队、社区建设者或是独立的个人，因此单一的、中心化的分配形式并不是万灵药。通过不断地迭代，我们已经形成了多管齐下的资源分配方式。

接下来，我们可以将分配过程想象成一个**多层蛋糕**，透过这个比喻，大家就会对我们如何做出决策有更深入的理解。

&lt;br/&gt;

## A类：长期支持



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/bg44Dh5/2.png&quot; /&gt;&lt;/center&gt;


我们首先要说到的是长期支持领域，这也是大多数读者较为熟悉的方面。其中包含的一些团队 (例如**Geth**和**Solidity**)，我们从一开始就向其提供了支持。其他的一些项目和团队后来也陆续得到我们的支持，例如**Eth1.x**和**无状态研究**、EF的**Eth2研究团队**以及**形式化研究**，这些都是以太坊成功路上的关键。

这个分支中也包含管理和运营角色，例如ESP (以太坊生态支持计划) 团队、社区和沟通协调者、以及行政和法律相关人员。

曾经，以太坊基金会是这些项目的归宿，但随着生态系统逐渐庞大，基金会的宗旨也有所改变。现在，这些项目和团队归于以太坊基金会的支持类别之一，而基金会则是最合适的资助者。

在过去两年中，基金会在预算上赋予了A类项目团队更多的自主权。我们认为这种方式能更好地反映出受支持方是如何作为一个团队运作的。

每年我们都要求团队递交**路线图**和**预算提案**，其他团队则能够通过衡量自己的需求来评估和通过他们的申请。可以将其看作是一个制衡体系，其中我们几乎不以个人形式进行协作。

如此一来，我们就能清晰地判断哪些项目在运行、哪些项目需要援助、最大的进步空间在哪里以及通过何种形式协助团队达成目标。

至于其他方面，我们之前提到过将机会向整个生态系统扩散，旨在跨越内部和外围的界限。这样做能最小化我们的运营权责，同时也避免对开发进程产生过多影响。

通过我们的不断努力，这种**“外向型”扩展**已经衍生出多种不同形式，这也是我们接下来会谈及的其他分配方式。无论属于何种类型，都可以被统称作“生态支持”。

为了协助管理接下来的工作重点，在B类资助中，生态支持计划 (Ecosystem Support Program, ESP for short) 率先开辟了道路。

###  &lt;br/&gt;

## B类：公开征集

### 重心移向ESP

自EF Grants Program计划升级为生态支持计划 [(ESP)](https://esp.ethereum.foundation/) 之后，基金会提供的资源可分为**经济支持**和**非经济支持**。目标在于以最优方式分配资源，在最大程度上推动以太坊的发展和应用。

之前发布的一篇博客文章[《生态系统支持计划：2019一览》](https://blog.ethereum.org/2020/04/01/ecosystem-support-program-allocation-update/)详细回顾了我们在2019年对基金会外部团队的经济资助。从今年开始，ESP会在每个季度进行报告，[第一季度报告](https://blog.ethereum.org/2020/05/07/ecosystem-support-program-allocation-update-q1/)已经上线。ESP团队会在未来几个月内和大家更多地分享对团队进行的非经济支持，以及团队如何从中受益。***(译者注：中文版***[生态系统支持计划2019一览](https://news.ethereum.cn/ecosystem-support-program-allocation-update/)***)***

ESP最重要的职能之一就是通过公开的调查来发现和参与新项目，从而扩大支持范围。ESP团队会对[公开调查表](https://esp.ethereum.foundation/project/)中提交的项目进行评估，并纳入同侪评审，并与申请者进行磋商，需要时会咨询专家顾问，从而为项目团队量身制定支持计划。

在做出资源分配和经济支持等决策时，ESP团队会事无巨细地制定计划，尽可能对每个因素进行考量，包括项目的计划路线、执行、团队架构，甚至是可行的替代方案、可能带来的成就以及影响。

简而言之，ESP的决策流程会比以往更全面，旨在为项目的每个阶段提供帮助，并且协调他们所需的支持。

B类支持也很难照顾到生态的方方面面，仅仅通过收到的公开调查表无法为生态提供全方位的支持，因为本质上我们是对既有申请进行响应。

以太坊偌大的生态中，不可避免地存在被忽视的领域和未能满足的需求，因此，我们需要基于前两种支持形式进行创新，更加积极主动地去发掘需求。

###  &lt;br/&gt;

## C类：委托分配

假设现在有一个具有潜在颠覆性的新第二层解决方案进入大家的视野，但却受制于缺乏组织和资金。在C类支持形式中，这个新兴的焦点就可以被称为**“领域”(domain)**，而我们能做的就是将资源分配和设定项目目标的职能**“委托”(delegate)** 给一位甚至多位相关领域的专家，由他们去激发团队的创造力和信心，无论他们是否为EF工作。

这些领域专家会辨别出需要解决的具体问题，然后与建设者进行沟通，通过经济支持为他们的工作提供资金。

更重要的是，过程中完全不需要EF参与到新团队中，并且与上面提到的B类支持方式相比，更具主动性、针对性和协作性。

初始阶段每个领域获得小额预算和拨款，如同去年在韩国、日本和台湾的本地拨款计划，但金额会随时间增长。更为成熟的领域可以参考已经投入应用的零知识、eth2协作、开发者体验以及[Ethereum.org](https://ethereum.org/)网站建设等等。

虽然B类和C类包含了多样化的分配方式，但我们的团队在工作中不免存在盲点，任何组织都难以仅靠自身克服这个顽疾。那么我们还能做些什么呢？

###  &lt;br/&gt;

## D类：第三方支持





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/twfS41n/3.png&quot; /&gt;&lt;/center&gt;


将资源**二次分配**给独立的资助模型和组织可以助我们进一步做到分配上的去中心化。虽然我们对越来越精细化的生态支持工作感到自豪，但是二次分配能够使得资金流向EF团队未曾考虑到的需求。

此类别包含的例子有社区驱动的资助匹配 **(Gitcoin的CLR机制)** 和**DAO基金 (Moloch)**。第三方分配者也适用于这一类别。例如我们对UNICEF (联合国儿童基金会) 加密基金提供的支持，该基金对资助项目进行识别筛选并提供资金。

又例如**ETHGlobal**，其始终保持着自身的独立性，通过黑客赏金和其他形式实现资金的二次分配。诚然，D类支持形式尚处于早期阶段，但我们在这些方面的工作在有序展开。

虽然这种方式在部分人看来是实验性的、激进的，但以太坊生态中有许多成员一直在寻求更完善的资助方式，涌现出的创意已经为我们打开了新的大门。

这一类工作针对EF其他类型的资助形式起到了弥补作用，可能包含了A类至C类未涉及的极端案例，尽管有些方面还是存在一定的争议甚至是竞争。我们只对初始的资金分配有话语权 (例如将资金分配给DAO组织)，在这之后应该如何**二次分配**就掌握在各位的手中，这对于创新性和参与度而言是百利而无一害的。

我们明白必须从始至终对资源分配承担责任，这或许是一场挑战，但我们可以通过开辟多元化的资助渠道来克服这些问题。

例如在初始阶段进行小额资助以识别执行者的资质，以及不同的二次分配形式。将这些方式结合起来有利于控制风险 (人气竞赛或群体思维)，以达到一种健康的平衡状态。

 &lt;br/&gt;

# 各类别相辅相成

如果从一个更宏观的视野来看待这几类支持形式，我们不难发现尽管每种方式都着其自身的利弊，但它们之间相辅相成，继而造就出一个更强大的资助模式。

&lt;br/&gt;

### A类

优点：唯一涉及默认持续资助的类别，使得团队可以全神贯注于长期发展。

缺点：在急速变化的生态系统中，不是所有问题都可以通过招募或是建设团队解决的，因为团队通常需要一个长期的目标。

&lt;br/&gt;

### B类

优点： 通过公开征集，可以进行更多样化、更具针对性的资助。

缺点：响应式资助并不能照顾到方方面面，并且团队会受到既有资源的限制。

&lt;br/&gt;

### C类

优点：允许具有专业背景的人员主动地确定优先级，在项目启动上灵活性更强。

缺点： 这些项目往往是实验性的，且C类资金分配受到EF识别需求和受资助方能力的限制。

&lt;br/&gt;

### D类

优点：以人为本，并且能够观察生态内的趋势。

缺点： 高度实验性，对以太坊产生的影响/回报具有延迟性。

我们给自己的每个选择都可以帮助EF更加有效地鼓励他人进行创新，并且随着我们的成熟，蛋糕的分配也在不断优化：




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/z5fxSjV/5.png&quot; /&gt;&lt;/center&gt;



如上所示，在EF Grants Program (ESP前身) 于2018年启动之前，几乎所有资金都面向“EF团队”。

2018年，我们为明确最需要资助的优质项目进行了大额拨款。这就为未来奠定了更坚实的基础，使得贡献者的精力和数量更加可持续。随着公网即将迎来巨变，我们很高兴看到一些果断的决策正渐收成效。

总言之，我们的支持方式从A类逐渐向B类和C类过渡，而D类还相对稚嫩，但这都是未来趋势的发端，我们也清楚这样做是为了建设更好的以太坊。

##  &lt;br/&gt;

# 2020的计划

今年，基金会完全能够达到甚至是超越去年五月做出的承诺。具体来说，根据生态系统的需求、ESP申请者的数量和质量以及新资助种类的扩展情况，我们倾向于将资金分配总量控制**在两千五百万至四千万之间**。

我们针对eth2的支持力度会按需逐渐加大。此外，在这个关键时刻，对eth1.x相关研发工作的资助也会保持稳定，并且我们认识到不能顾此失彼 **(eth2的部分工作需要基于无状态以太坊)。**

根据我们的数据，截至本文发布，基金会已提供了ETH总量的约**0.53％**。自几年前网络正式发布以来，这个数字一直在平稳下降，因为我们一直恪守发展壮大网络和生态的使命，进行有序的投入。

##  &lt;br/&gt;

# 跟上节奏，加入我们

## 生态支持项目的最新进展

从今年开始，我们将围绕ESP提供的协助和大家进行更多交流，包括重点介绍受资助项目的更新和成就。

为了呈现所有这些信息，团队对[ESP网站](https://esp.ethereum.foundation/)进行了更新，除了对现有内容进行优化，还加入了新板块：

- 在[feature页面](https://ecosystem.support/feature)可以了解我们所资助的一些项目
- [主页](https://ecosystem.support/)将提供ESP计划的最新消息
- [“wish list”](https://ecosystem.support/wishlist/)将包含我们在未来将重点关注的支持领域

新板块将定期进行更新和替换，并且计划还会增加其他板块，因此请各位留意更新。要获取最及时的消息，请在Twitter关注[@EF_ESP](https://twitter.com/EF_ESP)，并注册[订阅ESP的消息](https://news.ethereum.cn/ethereum-foundation-spring-2020-update/#newsletter)！

我们希望能够对有助于以太坊发展的优质项目进行资助，如果你知道有哪些亟待援助的建设者或是团队，[请立即与我们联系](https://esp.ethereum.foundation/project)。

###  &lt;br/&gt;

## 来自受助团队的礼物

我们向所有以太坊的爱好者发出邀请：大家可以在[EF的博客](https://blog.ethereum.org/)中阅读多个系列的文章，以便对以太坊网络最新的工作进展了然于胸。这些系列由研发者们亲手呈现，讲述他们如何为以太坊的未来注入生命。

&lt;br/&gt;

### Eth1.x系列

作者：Griffin Ichiba Hotchkiss

了解以太坊现阶段的工作，包括**无状态以太坊**等主题。

#### 近期更新：

- [The 1.x Files: A Primer for the Witness Specification](https://blog.ethereum.org/2020/05/04/eth1x-witness-primer/)– 2020-05-04
- [The 1.x Files: The Updated Stateless Tech Tree](https://blog.ethereum.org/2020/04/02/eth1x-stateless-tech-tree/)– 2020-04-02
- [The 1.x Files: Stateless Summit Summary](https://blog.ethereum.org/2020/03/12/eth1x-files-stateless-summit-summary/)– 2020-03-12

***(译者注：中文版请参考以下）***

- [ETH 1.X：无状态以太坊路线图更新](https://news.ethereum.cn/eth1x-stateless-tech-tree/)
- [ETH 1.X ：无状态以太坊峰会回顾](https://news.ethereum.cn/eth1x-files-stateless-summit-summary/)



&lt;br/&gt;

### Eth2更新速览

作者：Danny Ryan

正如标题所述，本系列旨在跟进eth2的最新资讯和进展，朝着信标链前进！

#### 近期更新：

- [Eth2 quick update no. 11](https://blog.ethereum.org/2020/05/06/eth2-quick-update-no-11/)– 2020-05-06
- [Eth2 quick update no. 10](https://blog.ethereum.org/2020/03/31/eth2-quick-update-no-10/)– 2020-03-31
- [Eth2 quick update no. 9](https://blog.ethereum.org/2020/03/17/eth2-quick-update-no-9/)– 2020-03-17

***(译者注：中文版请参考以下)***

- [Eth2更新速览#11](https://news.ethereum.cn/eth2-quick-update-no-11/)
- [Eth2更新速览#10](https://news.ethereum.cn/eth2-quick-update-no-10/)
- [Eth2更新速览#9](https://news.ethereum.cn/eth2-quick-update-no-9/)

###  &lt;br/&gt;

### Eth2 Staking系列

作者：Carl Beekhuizen

用户们即将以一种全新的方式使用ETH。通过本系列可以了解eth2 staking的相关信息和背后的设计。

#### 近期更新：

- [Validated, staking on eth2: #3 – Sharding Consensus](https://blog.ethereum.org/2020/03/27/sharding-consensus/)– 2020-03-27
- [Validated, staking on eth2: #2 – Two ghosts in a trench coat](https://blog.ethereum.org/2020/02/12/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)– 2020-02-12
- [Validated, staking on eth2: #1 – Incentives](https://blog.ethereum.org/2020/01/13/validated-staking-on-eth2-1-incentives/)– 2020-01-13

***(译者注：中文版请参考以下)***

- [Eth2 Staking系列：分片共识](https://news.ethereum.cn/eth2-staking-sharding-consensus/)
- [Eth2 Staking系列：共识机制篇](https://news.ethereum.cn/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)
- [Eth2 Staking系列：激励篇](https://news.ethereum.cn/validated-staking-on-eth2-1-incentives/)

###  &lt;br/&gt;

### 其他系列此处不一一列出。

敬请期待更多来自其他EF所支持团队的持续更新，在此处可以找到最新版本！

在过去的一年中，不断有重要的新鲜血液注入生态，去中心化的分布式网络带来的力量令我们深深感到自豪。而作为一个整体，我们将继续耕耘，为每个人提供参与建设的机会，而不需要将每个项目都集中在同一个屋檐下。

在未来的一年里，我们会见证eth2的发布，eth2将由多客户端进行支持，而这些客户端将有独立的团队进行建设和维护。

#  &lt;br/&gt;

# 在eth2到来之前……

在大方向上我们将不骄不躁，持续围绕以太坊生态系统履行职责，我们也期望见到新的项目和新的参与形式！目前大家可以保持关注EF博客和[@Ethereum](https://twitter.com/ethereum)，也可以探索新的[Ethereum.org社区页面](http://ethereum.org/community)。近期学术团队和Devcon团队也将发布大新闻，敬请关注！

如果各位读者想要了解的信息本文尚未涉及，请随意发问。无论有任何疑问或建议，可以随时联系press@ethereum.org。我们会从社区范围内收集反馈或外部资源，感谢社区源源不断为我们提供灵感！我们可能在会几个月内发布Q&amp;A，以期得到一些反馈。

在eth2到来之前，我们的主要工作仍然是遵行EF的职守，不僭越不松懈，坚挺在以太坊生态最需要我们的地方。我们已经迫不及待想要一睹以太坊的新貌，而这一切离不开每个人的耕耘和时间的浇灌。路漫漫，愿相伴。

🦄

  &lt;br/&gt;

  &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。



</content:encoded></item><item><title><![CDATA[ETH2术语库]]></title><description><![CDATA[迎接ETH2新时代的到来，术语库就是我们的武器。]]></description><link>https://www.ethereum.cn/eth2-glossary</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-glossary</guid><pubDate>Wed, 20 May 2020 00:00:00 GMT</pubDate><content:encoded>**该术语库由ECN整理，如需转载请注明来源**

**公众号 ETH中文网     网站:[ ethereum.cn](https://news.ethereum.cn/eth2-glossary/)**

##  &lt;br/&gt;

## A

### **Attestation 证明**

证明是指验证者所发起的投票，由验证者的签名聚合而成，用以证明区块的有效性，投票通过验证者的余额进行加权。

### **Attester 证明者**

信标链上的验证者可以充当区块提议者和证明者，证明者对区块发起投票。

##   &lt;br/&gt;

## B

### **Beacon Chain 信标链**

以太坊2.0阶段0中实现，将引进权益证明 (PoS) 共识机制。也被认为是Eth2的“协调层”。

职能：

- 为验证者分配职责
- 对检查点进行最终确定
- 在协议层上执行随机数生成
- 巩固信标链
- 对链头进行投票，作为分叉选择的基础
- 针对分片链的过渡/数据进行连接和投票

### **Block proposer 区块提议者**

由信标链通过RANDAO机制随机选择出来的验证者，对下一个区块进行提议。每个slot中仅有一个区块提议者。

##   &lt;br/&gt;

## C

### **Casper FFG**

Casper FFG是基于PoS共识机制的区块最终确定系统，其规定了区块最终确定的规则，并对已确定的区块进行检测。Casper FFG融合了PoS算法技术及拜占庭容错共识原理，其与链增长过程脱钩，可以作为一个独立的叠加层，为任何有效区块链协议提供最终确定区块的服务。与PoW共识机制相比，FFG可以为区块链带来更高的安全性，防止区块被篡改。

Casper FFG vote指验证者为最近一个epoch的检查点即 “目标检查点” 和前一个检查点即 “来源检查点” 发起投票，证明投票由验证者广播到p2p网络，最终再由区块生产者打包进区块。

### **Committees 委员会**

信标链和分片里每个slot中的委员会至少由128位验证者组成，根据伪随机过程RANDAO，验证者们被随机分配到委员会中，对区块发起投票，确定其有效性。

### **Checkpoint 检查点**

检查点指位于每个epoch第一个slot里的区块，如果该slot内没有产生区块，则最近的前一个区块为检查点。每个epoch都会有一个检查点区块；一个区块可能同时是多个epoch的检查点。

### **Chain head 链头**

链头是指信标链或分片链末端的一个区块，每个slot中的区块都要发起一次LMD GHOST投票，对信标链头进行验证。

### **Crosslink 交联**

交联是指将一个信标区块和一个分片区块连接起来，在一个交联中，信标链紧跟分片链头。交联计划于eth2的阶段1实现，为的是将分片扎根在信标链中，为分片分叉选择、分片链最终确定性和跨分片通信打好基础。

### **Current Balance &amp; Effective Balance 现存余额&amp;有效余额**

现存余额指验证者当前持有的ETH总数，而有效余额指根据现存余额计算出来的ETH数量。有效余额规定了验证者获得的ETH赏金或者罚没数量的范围。**有效余额最多为32个ETH。**

以下举例说明了如何计算有效余额：

- 如果现存余额为32个ETH — 有效余额为32个ETH
- 如果现存余额由22个ETH减少到21.76个ETH — 有效余额将为**22个ETH**
- 如果现存余额由22个ETH减少到21.749个ETH — 有效余额将为**21个ETH**
- 如果现存余额增加到19.25个ETH，且原有有效余额为18个ETH，那么有效余额将增加到19个ETH
- 如果现存余额增加到22.25个ETH，且原有有效余额为21个ETH，那么有效余额将增加到22个ETH

**验证者若想要扩大有效余额数量，需要持有的现存余额为“有效余额+1.25个ETH”**。换句话说，如果验证者原本持有有效余额20个ETH，想要增加到21个ETH，验证者的现存余额必须增加到21.25个ETH。如上述第三个例子所示，倘若现存余额减少了0.25个ETH，低于阈值，**有效余额也会随之调整**。

##   &lt;br/&gt;

## D

### Deposit Contract 存款合约

部署在以太坊PoW链上的智能合约。要成为Eth2的PoS验证者，需要首先向存款合约发送一笔交易，包含一定量的ETH作为质押金。存款合约记录了质押历史纪录，并且将所有质押金锁定在PoW链上，之后可以转移至Eth2信标链上。请注意，在Eth2早期阶段，存款合约只支持单向转移，不能将质押金从Eth2转回PoW链。

### D**ouble proposal 双重提议**

一名区块提议者在他所分配到的slot里提议一个以上的区块。

### **Double vote 双重投票**

一名验证者针对同一个目标检查点 (target)，不同的源检查点 (source) 发起的两次FFG投票。 双重投票可以被看做是PoS版本的双花攻击 (double-spend attack)。








![术语库.png](https://i.ibb.co/0XtWqYM/b96ef6dd78.png)




 &lt;center&gt;双重投票及环绕投票示例，图源Justin Drake&lt;/center&gt;

##  

##   &lt;br/&gt;

## E

### **Epochs 时段**

每个epoch由32个slots (时隙) 组成，每个slot为12秒，一个epoch即6.4分钟。

### **EBB 时段边界区块**

时段边界区块 (EBB, epoch boundary block) 是一些文献中用到的术语，可以理解为“检查点”(checkpoint) 的同义词。

### **Execution Environment 执行环境**

计划在Eth2阶段2引进。每个分片共识层内的执行将在执行环境的准则/框架内进行。本质上，执行环境是规则的框架/规则集，用于确定Ewasm作为虚拟机如何进行状态转换。它限制了状态的存储和更改方式。开发者可以按照意愿来构建分片中的EE，例如支持UTXO-style链、Libra-style系统或是中继费用市场等。每个分片都可以访问所有EEs，并且能够在其中执行事务，运行智能合约并与之交互。

##   &lt;br/&gt;

## F

### **Fork choice rule 分叉选择规则**

Eth2中的分叉选择规则是 LMD GHOST (Latest Message Driven GHOST, 由最新消息驱动的GHOST)。在该协议中，获得投票数最高的分叉将被选为链头。与最长链规则相比， GHOST的优点在于能够在网络延迟较高时降低攻击效率，同时最小化链重组的深度。即使攻击者能够高效地在其分叉链上继续产生区块，尝试使该链成为最长链，协议也会选择另一条票数更高的分叉链。

### **Finalization 最终确定**

最终确定性指两个相冲突的区块 (检查点) 无法同时被最终确定，也可以称之为经济确定性 (economic finality)。在Eth2中，一旦两个相冲突的检查点被最终确定，那么系统中至少三分之一的活跃验证者将受到罚没。如果连续两个epoch被证明 (或跳过一个epoch的连续两个epoch)，则第一个epoch被认为获得最终确定。

##   &lt;br/&gt;

## **J**

### **Justification 证明**

证明指验证者对检查点进行投票并确定信标链头的行为。如果2/3的验证者 (即绝对多数) 对两个epoches达成共识，例如源检查点 (source) 和目标检查点 (target)，那么这两个检查点都被证明了。如果连续两个epoch被证明 (或跳过一个epoch的连续两个epoch)，则第一个epoch被认为获得最终确定。

##   &lt;br/&gt;

## L

### **LMD GHOST**

LMD GHOST是Eth2中的分叉选择规则。GHOST (Greediest Heaviest Observed SubTree) 实际上是一种较早的协议，在PoW和其他区块链中应用颇广。协议仅遵循“最重”子树，即最长链。在比特币语境中，最重分支是哈希算力最高的链，并且被视作是最长链 (规范链)。LMD (Last Message Driven) 通过“最新消息驱动”来发挥“消息” (message) 的作用。消息是一则证明 (attestation)，其不同之处在于获得最多票数的分叉将被视为规范链。

##   &lt;br/&gt;

## P

### **Proof of Stake (PoS) 权益证明**

权益证明 (PoS) 是一种用于公共区块链的共识算法，该算法取决于验证者在网络中的经济权益。在基于工作量证明 (PoW) 的公共区块链中，通过奖励解决密码难题的参与者，以验证交易并创建新区块 (即挖矿)。而在基于 PoS 链中，一组验证者轮流对下一个区块进行提议和投票，每个验证者的投票权重取决于其押金 (即权益) 的多少。 PoS 的显着优势包括提高安全性、降低中心化风险和节省能耗。

在以太坊2.0上，激活一名验证者需要在网络中质押32 ETH。

### **Phase 0 阶段0**

阶段0作为以太坊2.0的首个阶段，目标是启动信标链，预计在2020年实现。阶段0通过管理协调验证者来实现PoW到PoS共识机制的转变。此阶段不会提供分片链或执行等功能，也就是说，参与者在此阶段无法在Eth2网络中进行交易或是调用智能合约。

### **Phase 1 阶段1**

阶段1是以太坊2.0继阶段0之后的第二次网络升级，主要目标是启动分片链，并将数据写入分片链。分片是提升以太坊可扩展性的关键，因为其允许并行处理交易而大大提升了吞吐量，目前最新方案是在阶段1中部署64个分片（将来或许会更多）。

**Phase 1.5 阶段1.5**

阶段1.5是一个术语，指阶段1升级期间以太坊1.0和2.0区块链的合并时期。在阶段1.5之后，以太坊1.0链将作为2.0链的一个分片运行。彼时，1.0链的全部功能 (包括ETH的使用) 将在2.0链上实现，而不会破坏数据一致性。

### **Phase 2 阶段2**

阶段2是以太坊 2.0的第三个阶段，紧随阶段0和阶段1。阶段2目前的定义不如前两个阶段明确，但预计将包含：添加以太坊账户、支持ETH的跨分片传输和提取、调用合约、构建执行环境，以便基于Eth2构建可扩展的应用，并且将1.0链完全引入2.0，最终弃用工作量证明机制。

##   &lt;br/&gt;

## S

### **Sharding 分片**

分片概念原本指数据库的横向分割，将大型数据库分割为更小、更快、更易于管理的部分。为了保证去中心化，区块链需要采取类似的横向扩容方式。每条分片链都拥有一个节点子集在该链上进行工作。虚拟矿工和验证者被分配到不同的分片中，并且只处理和验证自己所在分片链上的交易。Eth2的短期计划是启用**64个分片**，预计在阶段1实现分片与信标链的交联。

### **Shuffling “混洗”机制**

验证者“混洗”的主要目的在于确保分片的安全性。由于验证者分散在不同的分片中，有的节点可能会恶意控制某个分片。对验证者进行混洗 (shuffling)，使得每个分片区块都有一个委员会，其中的验证者都经由随机挑选。经数学计算，如果攻击者控制的验证者少于总数的三分之一，就难以对某个分片发起攻击。

### **Slots 时隙**

12秒的时间段，其中随机选择的验证者将提议一个区块。在每个slot中，在信标链和分片中都可能新增一个区块，但是slot中也可以没有产生区块。每个epoch中，验证者被随机分配到一个slot和分片中组成委员会，除了一名区块提议者，其他委员会成员负责对该区块进行证明 (attest)。每个委员会最少有128名验证者。

### **Surround vote 环绕投票**

一名验证者发起的FFG投票环绕之前的FFG投票，或是被之前的FFG投票所环绕。

举个例子，假设一名验证者在epoch 5内，为slot 32处的源检查点和slot 128处的目标检查点发起了一次FFG投票：

- 在epoch 6内，为slot 64处的源检查点和slot 96处的目标检查点发起的FFG投票，被其在epoch 5中的投票环绕。
- 在epoch 6内，为slot 0处的源检查点和slot 160处的目标检查点发起的FFG投票，则环绕了其在epoch 5中的FFG投票。

### **Slashing 罚没**

对验证者进行罚没，是指如果验证者被证实存在破坏行为，其 (部分) 质押金将被销毁。在Eth2阶段0时期，验证者主要会因为三种恶意行为被罚没：**双重投票 (double voting)、环绕投票 (surround voting)、双重提议 (double proposal)**。被罚没的验证者将被停止继续参与协议，并且会被强制退出。

被销毁的质押金会与同时段被罚没的验证者数量**成一定比例**，以避免验证者因无心之举而受到超额惩罚。因为攻击需要大量验证者参与，被罚没的验证者越多，说明被攻击的可能性越大，惩罚力度也就越强。最低罚没金额为1 ETH，最高罚没金额为验证者全部余额。

##  &lt;br/&gt;

## V

### **Validator 验证者**

验证者可以看作是权益证明 (PoS) 共识机制中的“虚拟矿工”。用户通过质押ETH来激活和管理验证者，**每质押32个ETH，就会激活一名验证者。**

验证者通过验证者客户端进行工作，而客户端借助信标（链）节点来运行。每个信标节点都有跟踪和读取信标链的功能。而每个验证客户端都可以执行信标节点的功能，或者调用信标节点。一个客户端允许一个或以上验证者执行验证职能。

**验证者生命周期：**

1. 质押：已将32 ETH存入ETH1存款合约，此状态将保留约7个小时。这可以在ETH1链遭遇攻击时保障安全性。
2. 等待在Eth2激活

- 在网络中有327680个有效验证者之前，每个epoch可以激活4个验证者 (每天900个)。在此之后，每个epoch可以激活5个验证者。并且每增加6.4万个活跃验证者，每个epoch可以激活的验证者数量+1
- 激活数量与活跃验证者的数量成比例，上限是有效验证者集除以64,000

1. 活跃验证者：参与证明&amp;提议区块

出现以下情况任一，验证者停止工作：

- 余额低于16个ETH (被驱逐)
- 自愿退出
- 受到罚没</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/5/15）]]></title><description><![CDATA[Eth2阶段0指日可待，研发者们步履不停的同时，社区也要付出耐心，坚定信任。]]></description><link>https://www.ethereum.cn/wnie2-2020-5-15</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-5-15</guid><pubDate>Mon, 18 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200515)



&lt;br/&gt;

# 推荐阅读

在众多资源中很难只选其一二，但以下两篇绝对值得一读：

- ConsenSys的Codefi发布了[《以太坊0 Staking生态报告》](https://consensys.net/insights/eth-2-staking-ecosystem-report)。下载需要注册，但好事多磨，40页的报告涵盖了用户在Eth2进行Staking的意愿分析和结果。
- 读者若是想获知最靠谱的Eth2资讯，推荐Danny的[《Eth2更新速览#11》](https://blog.ethereum.org/2020/05/06/eth2-quick-update-no-11/)。( 译者注：ECN网站已翻译[此文](https://news.ethereum.cn/eth2-quick-update-no-11/)。)

#  

&lt;br/&gt;

# 社论：Eth2何时到来？

[五年以来](https://blog.ethereum.org/2015/12/24/understanding-serenity-part-i-abstraction/)，我们一直对以太坊2.0翘首以盼，对于eth2的发布日期，也一直伴随着各种[乐观](https://news.ycombinator.com/item?id=7554923)的猜测。事实是，从来都不存在一个“官方”的、集体达成共识的实际投入使用时间。

尽管如此，还是有许多人根据自己掌握的信息，对上线日期做出大胆预测。在[Ethereal峰会的Eth2阶段0环节](https://vimeo.com/417616896)，我认为eth2很有可能在今年第三季度上线。Paul Hauner的预测是第三或者第四季度。Vitalik本人[并未表明](https://twitter.com/VitalikButerin/status/1260152524495085568)eth2会在[七月](https://blockonomi.com/ethereum-2-0-still-on-track-for-july-launch/)上线 (我也没有这样说过)！

最近听到最多的声音是“为什么eth2延迟了这么久”。但eth2何时发布并没有一个最终时限，所以我认为这个问题应该这么措辞：为什么筹备eth2需要花这么长的时间？

Justin Drake在其[推文](https://twitter.com/drakefjustin/status/1261242655650000897)中一语中的：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ZctfPds/Justin-Tweet-200515.png&quot;/&gt;&lt;/center&gt;
&lt;br/&gt;

“我们一直在提高要求
*设计上的迭代
*鼓励社区开发多个客户端，而不仅限于EF主导的单一客户端
*libp2p vs. devp2p; BLS12-381 vs. BN254”


之所以耗时良久，是因为大家希望能够一步到位，这也是正确的选择。

Danny Ryan最近在参加[POV Crypto播客节目](https://twitter.com/POVCryptoPod/status/1260225357791129601)时就这个话题展开了讨论，这也是本周推荐收听的栏目 ([视频](https://www.youtube.com/watch?v=PYNqoKh3KWs);[音频](https://podcasts.google.com/feed/aHR0cDovL3BvdmNyeXB0b3BvZC5idGMubGlic3lucHJvLmNvbS9yc3M/episode/OWFjYWVhYTEtYjdlYS00Y2FmLTg4ZTItMjU3NGMzMTI2NDFm))。

现在我们距离eth2仅仅一步之遥，我甚至能够嗅到它的气味。

#  

&lt;br/&gt;

# 阶段0

## Testnets测试网

测试网当属本周的主角，所以我将其放到了前面的位置。

目前有两个Eth2阶段0公共测试网。[Topaz](https://medium.com/prysmatic-labs/introducing-topaz-testnet-8e8a4e00a700)是由Prysmatic labs设立的Prysm测试网，[Schlesi](https://github.com/goerli/schlesi/)是由Afri Schoeden创建的多客户端测试网。

### Schlesi

Schlesi测试网比预期更加成功，更加稳定。截止目前，有三个客户端完全参与 (Prysm、Lighthouse和Teku)，同时，其同步后的信标节点和验证者也在持续运行。Nimbus和Lodestar客户端也在奋起直追，Nimbus很快就将完成同步。这是自去年各客户端团队[在安大略省参加互操作性封闭营](https://media.consensys.net/how-30-eth-2-0-devs-locked-themselves-in-to-achieve-interoperability-175e4a807d92)以来所达成的最大里程碑。

在[Eth2Stats界面](https://eth2stats.io/schlesi-testnet)能够看到一些Schlesi的信标节点，[Metal Albert](https://news.ethereum.cn/wnie2-2020-5-15/#And-finally…)也会在其中。大家还可以在[Bitfly的Schlesi浏览器](https://schlesi.beaconcha.in/)中跟踪验证者性能和网络进度。

Schlesi尚不会作为一个公共网络大规模开放，目前还处于孩童学步的阶段，因此我们尚未加入酷炫的前端使其易于加入。尽管如此，我还是[撰文说明](https://docs.google.com/document/d/1BP6B5muGjLGXVD1EOtorvlSBVzb5XR4OsYwBSTjiiDU/edit?usp=sharing)如何设立Teku节点并在Schlesi中运行，如果读者确实感兴趣，可以注册验证者。可能还有更简单的方法 (例如从二进制文件安装或使用Docker，或对eth1数据使用Infura)，但该说明忠实地记录了我的做法。如果读者开始运行节点，请务必加入[以太坊R＆D Discord](https://discord.gg/zyZXUN7)上的#schlesi频道以获取最新信息。可能初期会面临一些问题。

在上周的[Eth2开发者电话会议](https://hackmd.io/@benjaminion/rkzVrp958)中，我们讨论到使用Schlesi框架构建更强大的多客户端测试网。目标时间初步定在六月，前提是在客户端中实现规范v0.12，并且至少有三个客户端的16,384名验证者参与。若是能试运行Eth2存款合约的前端可谓是锦上添花 ([下文](https://news.ethereum.cn/wnie2-2020-5-15/#Launchpad)讨论Launchpad)。

### Topaz

Prysm’s single-client Topaz network keeps on chugging, and can be followed with [Etherscan](https://beacon.etherscan.io/), [BeaconChain.in](https://beaconcha.in/), and [Eth2Stats](https://eth2stats.io/topaz-testnet).

Prysm的单客户端Topaz网络保持平稳运行，可以在[Etherscan](https://beacon.etherscan.io/)、[BeaconChain.in](https://beaconcha.in/)和[Eth2Stats](https://eth2stats.io/topaz-testnet)中进行跟踪。

Topaz已经达成四项了不起的[成就](https://twitter.com/terencechain/status/1261366313202487296)：

- Eth质押金额接近[一百万](https://twitter.com/preston_vanloon/status/1261125852604928002) (测试网)
- Preston的[Raspberry Pi](https://twitter.com/preston_vanloon/status/1257567274736578560)设备稳定运行2000个验证密钥
- 节点连接到[500个节点](https://twitter.com/preston_vanloon/status/1260434369031933953)
- [节点数量超过](https://twitter.com/preston_vanloon/status/1257363955502153729)某些“以太坊杀手”的主网节点

Topaz的[前端](https://prylabs.net/)很棒，如果目前只是想尝试参与的话，不失为一个好去处。

##  

## 规范

自上期更新以来，规范没有发生改变。但是预计v0.12很快就会发布，其中将囊括期待已久的[BLS密码技术](https://github.com/ethereum/eth2.0-specs/pull/1813)，将带来IETF [BLS签名标准草案](https://datatracker.ietf.org/doc/draft-irtf-cfrg-bls-signature/)的02版和IETF [hash-to-curve标准的07版](https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/)。

之前委托相关团队给出跨Eth2客户端的一致API标准，目前团队已经[发回](https://docs.google.com/spreadsheets/d/1kVIx6GvzVLwNYbcd-Fj8YUlPf4qGrWUlS35uaTnIAVg/edit)[报告](https://docs.google.com/spreadsheets/d/1kVIx6GvzVLwNYbcd-Fj8YUlPf4qGrWUlS35uaTnIAVg/edit)，[正处于讨论阶段](https://github.com/ethereum/eth2.0-APIs/issues/37)。

##  

## 测试

Sigma Prime继续针对各客户端实现进行模糊测试。他们最近发布了[更新报告#4](https://blog.sigmaprime.io/beacon-fuzz-04.html)，其中包括测试中发现的一些bug。大量工作正在进行中，这样说并非是夸大对Eth2重要共识组件进行测试的重要性。该团队将很快发布Docker映像，以便我们都可以参与到大规模的模糊测试中。

除了测试客户端实现之外，检测规范本身的正确性和明确性也很重要。我的一些PegaSys同事正在借助Dafny框架对阶段0规范进行形式验证。该工作组上周在以太坊工程小组进行了非常易于理解的[展示](https://www.youtube.com/watch?v=UCSwkUQO_no&amp;feature=youtu.be) ([幻灯片](https://slack-files.com/T9C7VSRBN-F01482P95A4-6a8835f00f)/[Github](https://github.com/PegaSysEng/eth2.0-dafny)）。他们演示了如何通过Prysm子例程上的实时demo测试客户端实现。

网络 (networking) 不是共识的关键，但其重要程度不减分毫。Lakshman Sankar正在研究[stethoscope](https://github.com/lsankar4033/stethoscope)，这是针对eth2信标链客户端的一套网络测试，将作为现有参考测试套件的补充。同时，Jonny Rhea的Prkl[网络监测工具](https://github.com/prrkl)在测试网运行状况监测和[问题查找方面](https://news.ethereum.cn/wnie2-2020-5-15/#Eth2-Network-Monitor)也卓有成效。

另一个需要深度探索的领域则是加密经济安全性。以太坊基金会的RIG团队 (Robust Incentives Group) 一直在针对不同场景进行事无巨细的[建模](https://github.com/ethereum/rig/blob/master/eth2economics/code/beaconrunner2049/beacon_runner_2049.ipynb)工作，在这种情况下，涉及到的是网络分区。

屏幕前的你也可以参与进来！[阶段0赏金计划中的奖金](https://notes.ethereum.org/@djrtwo/phase0-bounty)已经翻倍，赶快行动起来！🕷️

##  

## 以太坊2.0Launchpad

我在上文提到了酷炫的前端，来得早不如来得巧，[以太坊2.0 Launchpad](https://github.com/ethereum/eth2.0-deposit)已经开源。Launchpad由ConsenSys Codefi、DeepWork Studio和以太坊基金会合作开发，并将成为在Ethereum 2.0主网上进行质押的官方门户网站。这是DeepWork对[设计过程](https://medium.com/deep-work-studio/eth2-deposit-launchpad-an-interface-for-the-first-world-computer-3e089138b264)的记录。此处何时可以启动Launchpad的调查投票。*( 译者注：投票结果显示有42.8%的多数参与者赞同在7月30日以太坊五周年纪念日之际发布以太坊2.0 Launchpad。)*

Jimmy Ragosa分别在两条系列推特中针对Launchpad做出了演示和评论 ([Part 1](https://twitter.com/JimmyRagosa/status/1260284226244673536)和[Part 2](https://twitter.com/JimmyRagosa/status/1261322006458503168))。Mara Schmiedt和Carl Beekhuizen在上周的Ethereal峰会上也谈到了Launchpad，但相关视频还没有上传。当时还存在一些技术问题，希望可以顺利解决并如期发布，此处是Ethereal峰会视频。

##  

## Staking

Reddit上出现了一篇贴子，帮助大家[全面了解可以进行staking的硬件设备](https://www.reddit.com/r/ethstaker/comments/ggmbvd/a_comprehensive_look_at_hardware_for_staking/)。这在个人质押者中引起了热议，并涌现出许多不错的建议。这是另一篇相关[主题帖子](https://www.reddit.com/r/ethstaker/comments/ge2qwx/looking_for_easy_suggestions_on_staking_hardware/)。两周前我也公布了[我的设备](https://news.ethereum.cn/wnie2-2020-5-15/#And-finally…)。

Staking奖励计算器开始盛行，以下是一些不错的选择：

- Ethereumprice: [ETH2 Calculator](https://ethereumprice.org/eth-2-calculator/)
- Bitfly:[Staking Calculator](https://www.beaconcha.in/calculator)
- ConsenSys [Activate](https://docs.google.com/spreadsheets/d/15tmPOvOgi3wKxJw7KQJKoUe-uonbYR6HF7u83LR5Mj4/edit)(最早出现且最为完备)

Collin Myers相关文章：[以太坊2.0 Staking有多能赚？](https://decrypt.co/28217/how-much-you-might-earn-staking-on-ethereum-2-0)

Joseph Chow认为，我们应当结合秘密共享验证者来[进行自由质押](https://ethos.dev/free-staking/)。

由ConsenSys举办的[Staking主题网络研讨会](https://pages.consensys.net/codefi-networks-the-state-of-staking)将于5月19日ET时间下午一点进行，目前还可以进行预约！

#  

&lt;br/&gt;

# 释义性文章

ConsenSys的Eth2宝库又添干货：[《何为以太坊2.0？》](https://consensys.net/blog/blockchain-explained/what-is-ethereum-2/)，[《何为Proof of Stake？》](https://consensys.net/blog/blockchain-explained/what-is-proof-of-stake/)

[《关于Eth2.0经济学的延伸思考》](https://medium.com/@Austerity_Sucks/more-on-the-economics-of-eth-2-0-26a505fd025)。参考Preston推文：[Eth2中的ETH仍然是ETH，而不是BETH。](https://twitter.com/preston_vanloon/status/1257304491579174913)

[BitMEX Research](https://blog.bitmex.com/ethereum-2-0/)有一个相当详细的Eth2概述，我还未针对其准确性做出评估，乍一看还不错，[但是有人持批判态度](https://twitter.com/FigoFinozeros/status/1257391132650192896)。

#  

&lt;br/&gt;

# 研究工作

本周最具争议的想法当属Justin Drake提出的[Eth2价格预言机提议](https://ethresear.ch/t/enshrined-eth2-price-feeds/7391?u=benjaminion)。这是一个简单的概念，我完全能够看到其中的吸引力。既然我在帖子开头被提及，那我需要说明一下我给Justin的反馈是谨慎且负面的：本质上，这在客户端团队现有的治理和维护义务基础上增加了负担，而且目前的第二层预言机似乎做得不错。我的观点在一定程度上与[Ameen !😄](https://ethresear.ch/t/enshrined-eth2-price-feeds/7391/5?u=benjaminion)的见解不谋而合。Vitalik对此给出了明确且详细的[回应](https://ethresear.ch/t/enshrined-eth2-price-feeds/7391/4?u=benjaminion)。讨论仍在继续……

[ethresear.ch](https://ethresear.ch/):

- PegaSys R＆D的Mikhail Kalinin发表了[关于合并Eth1-Eth2](https://ethresear.ch/t/the-scope-of-eth1-eth2-merger/7362?u=benjaminion)的文章。本文对于合并Eth1到Eth2 (然后弃用工作量证明) 所需的工作进行了全面且广泛的回顾。
- EF Ewasm团队发布了[Eth1x64 Variant 1 “Apostille”](https://ethresear.ch/t/eth1x64-variant-1-apostille/7365)。Eth1x64是一个稻草人 (或者说思想实验)，旨在具体探索分片后的以太坊世界会是怎样。这个计划从之前的一个合并想法发轫，即在Eth2的所有64个分片上部署Eth1，并尝试研究如何将其全部结合在一起。此版本在跨分片转移中使用收据，并且在Solidity的扩展版本中编码了[示例通证](https://github.com/ewasm/eth1x64/blob/cfa0317f29cbf5a8ef5f67612944cbb9ba38d5b4/variant1_token_examples.md)。
- Dankrad为阶段1[提议001位的监管证明](https://ethresear.ch/t/a-0-001-bit-proof-of-custody/7409)。监管证明的概念是：验证者必须断言他们已经看到了区块提议者产生的数据，并且需要在网络中接受监管，从而对伪造断言的怠惰验证者进行罚没。Dankrad的提议有助于使验证者和监管者诚实履行职守，几乎没有协议开销。事实上，平均每1024个分片区块中的一个区块会不可避免地出现“中毒”证明，对该证明签名将使验证者受到罚没，因此验证者必须在签名之前进行检查。很机智的解决方案！
- Vitalik发布了[一个开放性问题：理想的向量承诺寻求解决方案](https://ethresear.ch/t/open-problem-ideal-vector-commitment/7421?u=benjaminion)。不得不说，这个领域发展得如此之快。上个月的多项式承诺也是如此，而现在话题皆是关于[可聚合的子向量承诺。](https://eprint.iacr.org/2020/527.pdf)

PegaSys [TXRX团队最新进展](https://hackmd.io/@353yQn6WTImF5o12LQXXfQ/r1wFNxo9U)不可错过：

- Onotole Eth2规范转译器
- 信标链分叉选择测试
- 优化节点发现协议v5
- 上文提及的Eth1-Eth2合并事项
- 上文提及的Eth2网络跟踪
- 跨分片交易模拟

#  

&lt;br/&gt;

# 常规会议

## 实现者会议

为了错开Ethereal峰会，实现者会议延迟了一周。第39次会议于5月14日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/149)
- [会议视频](https://www.youtube.com/watch?v=7uZtEy0nNbw)
- 我的[速记](https://hackmd.io/@benjaminion/rkzVrp958)以及[Mamy](https://gist.github.com/mratsim/6e7d4a05c526cdfe64c588bdcab860e1)的笔记

谈到一些实质性的[研究更新](https://news.ethereum.cn/wnie2-2020-5-15/#Research-Updates)，包括引进Axic的[evm384](https://notes.ethereum.org/@axic/evm384-preview)，这可能是在Eth1中实现BLS12-381的预编译有效替代方案，以达到与Eth2的兼容性。

##  

&lt;br/&gt;

# 网络 (Networking) 会议

第5次Eth2 networking会议于5月6日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/148)
- [我的速记](https://hackmd.io/@benjaminion/rJkuZ4e5I)
- [会议录音](https://youtu.be/VPgMe6CVf5Q)

[gossipsub v1.1](https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md)是一个重要主题，优化了攻击防御性和引导程序。

#  

&lt;br/&gt;

# 其他资讯

- [Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-49-multiclient-testnet-security-audit-741ae1049ebf)客户端团队更新；
- Nimbus客户端[安全审计的RFP](https://our.status.im/nimbus-eth2-0-security-audit-request-for-proposal/)。请于5月24前回应；
- 我之前错过了[以太坊Stakers社区会议](https://github.com/superphiz/ethstaker)的消息。可以在Twitter上关注[@ Eth2Scc](https://twitter.com/Eth2Scc)以获取最新消息。到目前为止，阵容似乎很强大。不幸的是，会议时区与我不太吻合。

#  

# 写在最后

各位还没看够？？😅

行吧，你知道J.K.罗琳的那条发问“什么是比特币”[推文](https://twitter.com/jk_rowling/status/1261351775698694147)吗？我推荐观看这个视频，这是目前为止我见过关于比特币最好的解释。

 &lt;br/&gt;

&lt;br/&gt;

*声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。*</content:encoded></item><item><title><![CDATA[图解以太坊发行量]]></title><description><![CDATA[ETH发行量应如何计算呢？本文借以图表阐述每个阶段的ETH发行量受哪些因素影响。]]></description><link>https://www.ethereum.cn/posts-charting-ethereum-issuance</link><guid isPermaLink="false">https://www.ethereum.cn/posts-charting-ethereum-issuance</guid><pubDate>Mon, 18 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [attestant.io ](https://www.attestant.io/posts/charting-ethereum-issuance/)



&lt;br/&gt;

为了保证链的安全性，Eth1采用工作量证明共识机制，而Eth2采用权益证明。两种网络都通过产生新的ETH来奖励参与者，这就使ETH总供应量不断增长。总供应量持续且无限地增长会导致通货膨胀，那么相较于其他货币来说，ETH或许会贬值。本文着眼于从Eth1到Eth2网络的技术变化，因这些变化将对ETH总供应量产生短期和长期影响。

 

&lt;br/&gt;

# 发行量与通货膨胀



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SyFkpFy/1-c242b58087.png&quot;/&gt;&lt;/center&gt;





譬如，若某个时间点的总供应量为1000万，一年后为1200万，那么就表示净发行量为200万。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SmmRzkL/2-7e04b9311d.png&quot;/&gt;&lt;/center&gt;






 在上述例子中，通货膨胀率为20%。

通货膨胀率与发行量以年为单位计算。**发行量显示总供应量变化的幅度，通货膨胀率则显示总供应量变化的影响。**

请注意，ETH是一种单一货币，无论是在Eth1还是Eth2链上，最终都可以相互转换。因此，当计算通货膨胀率时，会将两条链上的发行量与总供应量相加得出实际数值。

 

&lt;br/&gt;

# Eth1发行量

众所周知，关于Eth1发行量，每挖出一个区块，矿工便能得到2个ETH的区块奖励。Eth1区块的生成速度并非早已设定，只是随着时间的推移，**区块的平均生成时间渐渐稳定在14秒**。因此，**每年大约发行450万个ETH。**

Eth1还会发放叔块奖励。最先产生或广播到网络中的区块将成为主链的一部分，其叔块则与主链失之交臂。叔块奖励在很大程度上取决于网络，趋向于占主要发行量的5％左右，即每年约25万个ETH。

截至撰写本文时，ETH总供应量将要达到1.1亿，过去一年的通货膨胀率约为4.5％。

 

&lt;br/&gt;

# Eth2阶段0的影响

Eth2有自己的发行机制。区块的生成更具规律性，即每12秒的时隙最多生成一个区块。尽管如此，**每个区块的生成过程中积极保护网络安全的验证者总数决定了该区块的奖励。**下图呈现发行量与验证者数量的关系：




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/7nKLcxQ/3-b0290c2c6d.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;图表1：Eth2发行量&lt;/center&gt;

注意，上图统计的是可能达到的最大发行量。实际上，由于出现网络故障等问题，某些验证者在本应活跃时处于非活跃状态，导致损失奖励的同时还要遭受罚款，这两种情况都会导致发行量减少。结果，对Eth2发行量预计约为上图所示值的90％。

 

&lt;br/&gt;

# EIP-1559的影响

目前，用户在以太坊链上发送交易时支付的所有费用都会奖励给该区块的矿工。[EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)是一个以太坊改进提案，对交易费用分配方案进行改良（当然还有其他更改）。**交易费用中的很大一部分会被“销毁”，从链上彻底消失，从而使发行量减少。**

各种交易费用销毁额方案都被已纳入考虑范围，目前的提议是大约销毁80％的交易费用。随着时间的推移，交易费用也会发生显著的变化（这是EIP-1559正在试图解决的问题），但采用当前费用平均数，即每个区块产生0.1ETH的交易费用，这将使发行量减少约18万个ETH。

 

&lt;br/&gt;

# 停止挖矿的影响

关于合并Eth1和Eth2的讨论持续进行中。出于本文的目的，不管以任何形式进行合并，重点是Eth1链将采用Eth2的权益证明共识机制以保证安全性，不再需要现存的工作量证明共识机制。

**合并后不再发放区块奖励与叔块奖励，将使发行量大幅下降。**

 

&lt;br/&gt;

# Eth2阶段2的影响

Eth2的阶段2引入交易。尽管尚未确定这些交易的相关细节，**但此阶段将引入其他参与者充当状态提供者(state providers)。**网络需要为他们的工作支付薪酬，这意味着发行量将有所增长。目前尚无具体数据，但是可以合理地预计状态提供者将获得完全验证节点奖励的30％，

阶段2中的验证者需要独立完成更多的工作量，这样能够抵消上述情况中的增长。而且，从阶段2启动开始，首次能够停止验证，且操作简单，这很可能会使验证者数量减少，发行量也随之减少。

然而，在很大程度上，Eth2阶段2才开始属于功能齐全的Eth2链。随着越来越多的应用程序部署在Eth2上，交易增多，ETH的销毁量也会随之上升（多亏Eth2实行EIP-1559），发行量则不断下降。

 

&lt;br/&gt;

# 综上所述

下图时间轴综合了所有的变化，粗略地预计了Eth发行量接下来几年内的变化趋势。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/xX0thB6/3.png&quot;/&gt;&lt;/center&gt;








&lt;center&gt;图表2：发行量变化趋势&lt;/center&gt;

显而易见，时间轴上并没有标明实际日期，而是采用了编号标记。这些编号分别对应以下阶段：

1. Eth2阶段0
2. EIP-1559  
3. 停止挖矿
4. Eth2阶段2

我不保证这些事项将严格按照顺序进行。譬如，有可能停止挖矿后才实施EIP-1559。

尽管上图不太明晰，但从图中可以看出，Eth2启动后，预测的发行量从近似值转变为范围值，这是由于发行量开始取决于验证者数量。所示范围值根据迄今为止的可用信息得出，是最具可能性的估值。

**Eth2转向采用权益证明，对发行量产生了直接而巨大的影响，但只是一次性的。相比之下，EIP-1559对发行量的初始影响相对较小，但其影响的程度与以太坊网络上处理的交易数量成正比。随着交易量的增多，发行量将继续下降，可能降至0以下。此时，ETH将首次出现通缩现象。**

希望ETH通胀率长期保持在0.5％至-0.5％之间，同时保持甚至提高安全性水平。这表明要想确保交易安全的同时，不产生大量的内部与外部成本，以太坊还要努力向前迈进。尽管无法确定具体的时间表，但发展步骤明确，寓示着以太坊和ETH前景广阔。

 

 &lt;br/&gt;

&lt;br/&gt; 

*声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。*</content:encoded></item><item><title><![CDATA[以太坊硬分叉简史]]></title><description><![CDATA[以太坊区块高度超1000万，一文细数以太坊5年以来历经了哪些硬分叉!]]></description><link>https://www.ethereum.cn/the-history-of-ethereum-hard-forks</link><guid isPermaLink="false">https://www.ethereum.cn/the-history-of-ethereum-hard-forks</guid><pubDate>Fri, 15 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | MyCrypto



&lt;br/&gt;

2020年5月4日，以太坊区块高度达到 1000 万。在过去五年中，计算1000万个区块的总算力为15 zettahashes (即15*10^21)。然而一些现代显卡如GTX 1080 Ti需要花费1.5亿年以上才能完成这项工作。

在我们迈向这个里程碑的过程中，发生了多次为大家所知的分叉。虽说分叉指的是新链与主链分离，但是旧链通常会被遗弃，因而人们也把分叉和“网络升级”联系起来。

**现在，我们就一同回顾以太坊迄今为止经历的分叉，看看现在的以太坊主网是如何发展而来的。**





![硬分叉简史1.png](https://i.ibb.co/tzNdx33/1-a85263afe9.png)




&lt;center&gt;以太坊历次分叉的日期和区块高度&lt;/center&gt;



###  &lt;br/&gt;

### **测试版本：奥林匹克—#0**

2015年5月9日，以太坊基金会发布奥林匹克：边疆测试版 (Olympic: Frontier pre-release)。

奥林匹克的发布作为概念证明，其赏金项目提供总额为25,000 ETH的奖励，用于奖励发送最多交易的用户、处理最多交易的矿工，或是用于激励矿工发现一些重大问题，如在Go和C++客户端之间发起一个 (实质性的) 分叉。

该版本历时14天。从技术上来说，奥林匹克完全不同于以太坊主网，因而不应该被列入硬分叉名单里。尽管如此，边疆版本的创世区块仍出自奥林匹克这一阶段。



###  &lt;br/&gt;

### **边疆—#0**

边疆 (Frontier) 的发布代表着以太坊“Eth 1.0”首次官宣。该次发布为**创世区块的生成**，区块里打包了在官方预售时用户购买ETH的8893笔交易。

总计预挖七千两百万ETH，其中将近一千两百万ETH为以太坊发展基金所有。

#### 🔻**边疆解冻**

在边疆诞生之初，每个区块的gas上限被硬编码为5000。由于每笔交易至少需花费21,000gas，因此彼时的以太坊区块链中只能进行挖矿操作。下面引用Ethereum.org发表的一篇博文

“‘解冻 (thawing)’阶段使得矿工们和早期应用者有序地地开始他们的挖矿工作和配置其客户端。几天之后 (或许3-4天，视情况而定)，我们将会对软件进行一次略微的更新调整，所有客户端都需要安装更新。更新后，每个区块的Gas限制提高到3百万，这只是个初始数值，可以根据矿工的默认设置进行增减。”

主网发布了5天之后，gas限制变更为一个默认的目标数值3,141,592。

然而，由于矿工们在每个区块中，每次只能在前一个区块的基础上将gas限制提高或减少1024，因此这一改变需要一个过程。

**区块#46,147**内打包了以太坊的第一笔交易，价值为31337 wei。






![硬分叉简史2.png](https://i.ibb.co/gRwj8nh/2-b90fa31810.png)



&lt;center&gt;以太坊第一笔手动交易 来源：etherscan.io&lt;/center&gt;





###  &lt;br/&gt;

### **冰河时代— #200,000**

在区块链领域，**“difficulty” (难度)** 这个词用以描述一台计算机需要花多少算力来生产下一个区块。

**区块难度 (diffifulty) 会自动重新调整以稳定区块时间。在一个特定的时间段里，挖出的区块越多，区块难度越大，反之亦然。**

为了确保另一硬分叉点在以太坊首次发布的16个月内从PoW向PoS过渡，这导致了区块难度呈指数增长，意味着大概一年后生产区块的速度大大减慢。

这之后，以太坊网络将进入“冰河时代”，在这一阶段，算力难度呈指数增长，直到矿工难以再生产新区块。






![硬分叉简史3.png](https://i.ibb.co/gRwj8nh/2-b90fa31810.png)





&lt;center&gt;来源: etherscan.io.&lt;/center&gt;

上图描述了生产一个区块所需要的平均时间。如图所示，三个峰值意味着冰河时代开始来临。而每当一个峰值结束，便意味着有一个新的硬分叉出现，从而延迟了冰河时代。

虽然冰河时代需要中断几次，向PoS过渡的努力从不停歇。

###  &lt;br/&gt;

### **家园— #1,150,000**

家园是第二个主要的计划版本，包括三条**以太坊改进提案 (EIPs)**。

- EIP 2: Homestead硬分叉升级
- EIP 7: DELEGATECALL
- EIP 8: Homestead P2P开发向前兼容要求

###  &lt;br/&gt;

### **DAO硬分叉— #1,920,000**




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/PxVnjYH/4-3816b6f607.png&quot; /&gt;&lt;/center&gt;





2016年6月17日，the DAO合约上出现漏洞并被攻击者乘虚而入，导致约三百六十万ETH被盗取。根据该合约的设计，这些资金需要被冻结28天才能成功被转移。

如果没有采取任何措施的话，黑客会拥有ETH总额的4.4%。

为解决这个问题，备受争议的EIP 779被提出来，其目的在于修改攻击者的锁定合约。如此一来，ETH持有者便可以从the DAO合约上提出其ETH。

7月20日，以太坊大部分成员支持实行硬分叉，然而少数社区成员持反对意见，并决定实行硬分叉，分叉后的原链改名为**以太坊经典 (Ethereum Classic)**。

###  &lt;br/&gt;

### 橘子口哨 (Tangerine Whistle)— #2,463,000

橘子口哨是一次计划外的次要分叉，仅包括一条EIP-150。该提案对一些操作码 (opcodes) 重新定价，提高拒绝服务攻击 (denial-of-service) 的成本，以防止此类攻击。

###  &lt;br/&gt;

### **伪龙 (Spurious Dragon)— #2,675,000**

2016 年 11 月 22 日发生了另一次计划外的硬分叉“伪龙”，包括四项提案，用以解决一些攻击问题：

- EIP 155: 简单重放攻击保护
- EIP 160: 提升EXP操作码的费用
- EIP 161: 状态树清理 (不变量保持替代)
- EIP 170: 调整智能合约的最大字节数限制

###  &lt;br/&gt;

### **拜占庭 (Byzantium)—#4,370,000**

以太坊计划的第三阶段为“大都会”(Metropolis)，而拜占庭是该阶段的前半部分。

其中包括许多更新：增加4个新操作码和4条预编译；减少区块奖励；推迟冰河时代难度炸弹 (difficulty bomb)。

以下是拜占庭硬分叉包含的完整EIP：

- EIP 100: 将难度调整更改为包括叔块在内的目标平均区块时间
- EIP 140: 恢复指令
- EIP 196: 对椭圆曲线alt_bn128上的加法和纯量乘法 (addition and scalar multiplication) 预编译合同
- EIP 197: 对椭圆曲线alt_bn128上的最佳配对 (optimal ate pairing) 预编译合同
- EIP 198: 模幂
- EIP 211: 新操作码：RETURNDATASIZE和RETURNDATACOPY
- EIP 214: 新操作码STATICCALL
- EIP 649: 延迟大都会难度炸弹以及减少区块奖励
- EIP 658: 在收据中嵌入交易状态码



###  &lt;br/&gt;

### **君士坦丁堡/圣彼得堡 (Constantinople / St. Petersburg )— #7,280,000**

大都会的第二个阶段便是君士坦丁堡硬分叉，分叉发生于**区块高度7,080,000**，包括以下五项EIPs：

- EIP 145: 以太坊虚拟机 (EVM) 上的按位转换指令
- EIP 1014: Skinny CREATE2
- EIP 1052: EXTCODEHASH 操作码
- EIP 1234: 延迟君士坦丁堡难度炸弹以及调整区块奖励
- EIP 1283: 不需要dirty maps的SSTORE净gas计量 (net gas metering)

然而，在该分叉即将执行**前32个小时**，发现了EIP-1283带来的意外影响，即使许多已经部署在链上的合约面临重入攻击 (reentrancy attack)。于是，君士坦丁堡硬分叉推迟执行。

因此，EIP-1283从计划中移除，**该分叉调整至区块高度7,280,000上进行**。接着，君士坦丁堡分叉改名为**圣彼得堡分叉**。

###  &lt;br/&gt;

### **伊斯坦布尔 (Istanbul ) — #9,069,000**

有了拜占庭分叉和君士坦丁堡前面这两个分叉，伊斯坦布尔分叉这个名字对大家来说也就不那么奇怪了。

此分叉更新了两条操作码、一条预编译和一些gas上的调整。

- EIP 152: 添加BLAKE2压缩函数 (compression function) `F`预编译
- EIP 1108: 减少alt_bn128预编译gas成本
- EIP 1344: ChainID 操作码
- EIP 1884: 对trie-size-dependent操作码重新定价
- EIP 2028: 减少交易数据gas成本
- EIP 2200: 对净gas计量结构化定义 (Structured Definitions for Net Gas Metering)

 如果想要了解该分叉的详细内容，可以阅读我另一篇文章“以太坊伊斯坦布尔分叉—技术讲解”。

###  &lt;br/&gt;

### **缪尔冰川 (Muir Glacier) — #9,200,000**

缪尔冰川分叉只包含EIP-2384，目的是再一次推迟难度炸弹。

###  &lt;br/&gt;

### **宁静 (Serenity) / ETH 2.0 — ?**








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/r5w8tqS/5-d480725c7c.png&quot; /&gt;&lt;/center&gt;




以太坊线路图的下一阶段便是宁静，也被称作ETH2.0。这次更新将包括加入PoS信标链、分片链、eWASM等等。

想要了解更多关于Eth 2.0的进程，请阅读由ConsenSys发布的文章“Serenity路线图”[1] 。(译者注：此篇路线图略微过时，读者们可以阅览此文https://news.ethereum.cn/wnie2-2020-3-20/了解Eth2.0的最新发展)。



&lt;br/&gt;

&lt;br/&gt;

ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn。</content:encoded></item><item><title><![CDATA[VITALIK：以太坊2.0年均ETH发行量将控制在10万~200万]]></title><description><![CDATA[EIP-1559核心思想：销毁部分ETH、调整区块大小。]]></description><link>https://www.ethereum.cn/buterin-ethereum-2-0-will-issue-100000-to-2-million-eth-per-year</link><guid isPermaLink="false">https://www.ethereum.cn/buterin-ethereum-2-0-will-issue-100000-to-2-million-eth-per-year</guid><pubDate>Wed, 13 May 2020 00:00:00 GMT</pubDate><content:encoded>以太坊创始人Vitalik Buterin在POV Crypto Podcast的[采访](https://povcryptopod.libsyn.com/133-internet-money-w-vitalik-buterin)中讨论了EIP-1559和以太坊2.0的货币政策。



###  &lt;br/&gt;

# **以太坊与比特币的区别**

Buterin首先谈到了以太坊与比特币的区别，以及两者的“互联网货币之争”。

Buterin说道，尽管比特币和以太坊“做的事情，有时相同，有时不同”，但这两种加密货币都怀着同样的意图，即创建去中心化基础层，并且能够在此基础上构建其他应用程序。 

他认为，两者在应用上的侧重点有所不同。比特币的主要想法是采用诸如闪电网络之类的支付解决方案来实现价值存储和交换媒介的功能，而以太坊的想法是通过智能设计构建应用程序。

此外，Buterin还谈到了工作量证明（PoW）的优势，并将2009年称为该共识算法的“黄金时代”。他强调PoW允许任何拥有计算机的人参与比特币挖矿，这一点很重要，但由于2013年的GPU和ASIC革命，这一黄金时代宣布告终。此后，用户必须“拥有1000万美元”才能参与PoW网络。

Buterin表示，对于以太坊来说，PoW算法起初具有积极影响，因为这一发行机制使ETH“分配更加公平”。

尽管如此，**作为一种加密货币的发行和分配机制，PoW算法的价值“逐年”衰减**。他将PoW算法归类为能从生态系统受益的一种机制，但是该机制已经达到成熟阶段，优势一直在减弱。

接下来，Buterin解释了权益证明相较于工作量证明的优势。目前，以太坊正在过渡到以太坊2.0的PoS算法。从这个意义上说，“ Topaz”测试网具备ETH 2.0主网配置。Buterin澄清道，**PoS并非是一种分配机制，而是就发行政策而言具有更多优势的机制**。



“之所以实行权益证明，原因之一是我们要大量减少发行量。目前发行量正在下降。如果实际上每个人都参与，理论上的最大发行量将约为每年200万，ETH 2.0规范中已发布此计算结果。”

Buterin表示，按照目前Topaz测试网的参与水平来算，每年的发行量约为100,000 ETH。因此，**他预计推出以太坊2.0后，每年将发行10万至200万个ETH。相比之下，当前以太坊的发行量要高得多，每年约450万个ETH。**

&lt;br/&gt;

# EIP-1559及其对以太坊货币政策的影响

Buterin还简要介绍了[EIP-1559](https://www.crypto-news-flash.com/experts-agree-bitcoin-halving-not-priced-in-ethereum-supply-shock/)及其对以太坊货币政策的影响。

### 🔻 通过销毁减少供应量

Buterin提到，由于每笔费用都需要销毁其中一部分，当交易量处于高位时，总流通量净减明显。“这就是此提案所瞄准的基本费用参数”，他解释道，发送一笔交易后，交易费用分割成两部分——一部分作为“小费”给予矿工，另一部分则被销毁。

### 🔻 新变量：区块大小

**以太坊网络的另一个重要升级是根据网络活动调整区块大小，而非调整交易费用。**



“之所以这么做，是因为平均每产生1000万Gas，基本交易费用就会自动调整，但区块大小并不总是1000万Gas…”

“在这个市场上，最佳交易费用难以预测，对于那些不愿意支付大笔交易费用，因而不得不等待交易打包的交易者来说是吃亏的。但实际上，这种等待并不会使任何人受益，网络也不会从中受益。”

因此，此次升级将有助于解决用户当前面临的一些问题，例如最佳交易费用难以预测和交易处理时间过长。



&lt;br/&gt; 

*参考链接：*

*[1] https://cointelegraph.com/news/eth-20-issuance-will-be-2-million-a-year-at-most-says-vitalik*

[2] https://www.crypto-news-flash.com/buterin-ethereum-2-0-will-issue-100000-to-2-million-eth-per-year/

[3] https://povcryptopod.libsyn.com/133-internet-money-w-vitalik-buterin

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[一文回顾ETHEREAL虚拟峰会]]></title><description><![CDATA[Ethereal虚拟峰会圆满结束！本文为你总结行业大咖们对以太坊有何展望。]]></description><link>https://www.ethereum.cn/6-blockchain-takeaways-from-ethereal-virtual-summit-2020</link><guid isPermaLink="false">https://www.ethereum.cn/6-blockchain-takeaways-from-ethereal-virtual-summit-2020</guid><pubDate>Tue, 12 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://consensys.net/blog/news/6-blockchain-takeaways-from-ethereal-virtual-summit-2020/)

以太坊、DApp开发、企业应用以及DeFi将何去何从？我们不妨听听行业大咖的洞见和展望。



**“纵观世界，不受语言、性别、宗教和空间限制的很有可能只有以太坊。它是由人们汇聚而成的共同语言。”**

——Collin Myers，全球产品战略官，ConsenSys Codefi

 

5月7日和8日，有史以来的首届**Ethereal虚拟峰会**邀请到来自整个区块链生态的200多位与会者，开发者、企业家、企业资深人士和行业领袖济济一堂，就区块链行业议题进行观点碰撞和协作互融，面向广泛加密社区进行普及，内容不仅包括2020年的重要里程碑，还覆盖了以太坊生态系统的各个维度——从Eth2 Staking到企业许可，再到开发应用。

如果要用一句话来概括峰会主题，那就是大到疫病肆虐，小到设备延迟中断，任何挫折都无法阻碍社区竭力将区块链推向主流。就如同Joe Lubin在和Mike Novogratz的谈话中所强调的，无论是激进式变革者还是渐进式改良者，都需要合力“将阳春白雪播撒给众人”。

在未来几天，我们将发布单独的视频录像，以便大家收看错过的环节或是重温高光时刻。本文将主要针对这两日紧锣密鼓的会议，总结出六大主题。

 &lt;br/&gt;

# COVID-19对经济造成的冲击唤醒人们对数字化资产潜力的认知

**“COVID好似一场野火，待春风拂去灰烬，又有新的生命抽芽。”**

——Angie Lau，Forkast.News主编

目前的主流观点认为，最近的全球经济危机为系统化变革敲响了警钟，尤其是金融基础设施亟待更替。在发钞和美元贬值问题方面，“数字稀缺”和将ETH作为“经济带宽”不断被提及。正如Mike Novogratz解释道，“COVID触发了前所未有的财政和货币效应。”并且这些对策不见得有效。

也正是因此，[中央银行数字货币 (CBDC)](https://consensys.net/solutions/payments-and-money/cbdc) 在银行界赚足眼球，作为一种区块链应用，CBDC旨在简化支付渠道并降低了个人公民使用金融服务的门槛。**考虑到比特币减半以及ETH的天然稀缺属性，许多人将这次罕见的经济效应视作区块链和数字化资产进入全球视野的转折点。**

  &lt;br/&gt;

# 以太坊2.0阶段0是2020年最值得期待的里程碑

**“Eth2已经箭在弦上，就如同当年Eth1发布前的几个月。”**

——Vitalik Buterin，以太坊联合创始人

以太坊2.0的首个阶段 (即阶段0) [信标链](https://consensys.net/blog/blockchain-development/the-ethereum-2-0-beacon-chain-explained/)是Eth2系统的核心。阶段1将实现[分片](https://consensys.net/knowledge-base/ethereum-2/faq)，把以太坊区块链“分割”为64个不同的并行链。Joe Lubin强调，[以太坊2.0](https://consensys.net/knowledge-base/ethereum-2/)“几乎立即就能投入使用”。

Vitalik还提到，“Eth2将使交易成本降低100倍，从而以低成本进行更多操作。”Eth1最终将作为其自身的分片存在于Eth2网络中。

说到阶段0及其新共识机制所涉及的[经济学](https://consensys.net/insights/eth-2-staking-ecosystem-report)，Staking同样备受关注。 ConsenSys Codefi的Mara Schmiedt和以太坊基金会的Carl Beekhuizen推出了[以太坊2.0 Launchpad](https://github.com/ethereum/eth2.0-deposit)，这是由以太坊基金会提供的在Eth2链上质押ETH的官方渠道。Launchpad目前正处于积极开发测试网阶段。

提到Eth2系统的复杂性，EF的Danny Ryan将其描述为“十分复杂却令人血脉偾张”，“如果决定要实现，那就一定要到位”。除了对Eth2进行测试，**目前另一个当务之急是对用户进行Staking普及，包括基础知识、收益和风险。**

Codefi团队最近发布了[《以太坊2.0 Staking生态系统报告》](https://consensys.net/insights/eth-2-staking-ecosystem-report)，其中**探讨了ETH持有者质押ETH的意愿及其质押动机和顾虑。**

  &lt;br/&gt;

# 以太坊1.0重大扩容解决方案已就位

**“今天的区块链，就好比是Apple出现之前的计算机。SKALE的使命就是将区块链推向主流。”**

—— Stan Kladko，SKALE Labs CTO

SKALE Network是专注于侧链的弹性区块链网络，与以太坊主网兼容，**每条链每秒可运行多达2000笔交易。**该团队计划本月启动SKALE测试网，并在接下来的几个月中为主网上线做准备。SKALE Network将在[Codefi Activate](https://activate.codefi.network/)平台上启动，使用一种名为使用证明 [(Proof of Use)](https://codefi.consensys.net/blog/proof-of-use-activating-networks-through-encoded-participation) 的独特代币机制。

正如SKALE CEO Jack O’Holleran解释道，“围绕网络健康进行设计，将DApp放在首位”。即使Eth2即将到来，**诸如SKALE之类的扩容解决方案仍然是以太坊满足短期网络需求的巨大机会。**

  &lt;br/&gt;

# “企业以太坊”也是以太坊，企业不过是按需增加隐私性和合规性

**“技术是相同的，不同之处在于部署方式。”**

——Yorke Rhodes，Microsoft区块链项目联合创始人

在过去几年中，以太坊在隐私性和许可性方面取得了一些关键进展，越来越多的企业转向开源以太坊区块链，以推出低成本、高度可编程并且极富韧性的技术。 “我们大可换一种角度来思考，”John Wolpert如是说，“或许乏味的传统技术也能焕然一新。”

ConsenSys的协议工程团队PegaSys[宣布](https://consensys.net/blog/press-release/consensys-and-microsoft-collaborate-to-bring-ethereum-to-enterprises-with-the-pegasys-ethereum-suite/)，PegaSys Ethereum套件  (包括Hyperledger Besu、PegaSys Plus和PegaSys Orchestrate) 将上线Microsoft Azure Marketplace。

此外，用于以太坊的[Microsoft区块链开发套件](https://marketplace.visualstudio.com/items?itemName=AzBlockchain.azure-blockchain)现在能够直接支持Hyperledger Besu。这些新产品将帮助企业开发者轻松使用所需的平台和工具，从而构建与主网兼容的受许可的专用以太坊网络。Baseline Protocol计划的联合创始人Wolpert明确指出了以太坊主网的优势：作为企业方，可以“将主网用作消息总线，连接自己和他人的记录系统”。

Wolpert回忆道，“在2015年时，我们在美国公司中还无法讲出‘区块链’这个词”。而现在，Ethereal虚拟峰会上有许多企业巨擘谈起区块链头头是道，我们不难发现今夕已非彼时。

  &lt;br/&gt;

# 开发团队正在“解锁”大家感兴趣的经济模型。

# DApp用户也能直接在以太坊钱包中经营业务。

**“只需要互联网和以太坊钱包，每个人都可以在以太坊上拥有属于自己的小型数字收藏品事业。”**

—— Jeffrey Zirlin，Axie Infinity

**区块链游戏已经成为新人进入Web3世界的大门。**正如Horizon Games的Peter Kieltyka所说，“我们80％的用户群体是从未接触过区块链的人”。诸如SkyWeaver之类能够以游戏形式赢利的DApp尤其受欢迎，用户可以在其中创建和交易数字收藏品。

再加上多方位的助力，例如SKALE这类强大扩容解决方案、MetaMask移动钱包以及新颖的经济模式，DApp生态有望在今年实现腾飞。

为什么不从今天开始尝试使用MetaMask钱包支持的区块链应用？

  &lt;br/&gt;

# 安全性是DeFi的悬顶之剑

**“我认为促进社区对DeFi应用进行审计并非不可取，毕竟攸关经济风险。”**

——Kyle Kistner，bZx联合创始人

在Ethereal的DeFi环节中，大家最为关注的话题当属Jordan Lyall首日在“运行和壮大DeFi平台所面临的挑战”讨论中提出的问题：我们如何在鼓励创新的同时保证用户资产的安全性？

**DeFi生态在今年初达到了十亿美元的里程碑，**但也遭受了数次攻击以及全球市场动荡的影响。DeFi Score之类的开源工具已然诞生，旨在协助用户根据重心化和流动性等因素衡量平台风险。

社区的普遍共识是，DeFi协议团队需要进行全面的用户研究和智能合约审计，尤其是在资产总量不断攀升时期。

**DeFi协议是活跃度最高的以太坊DApp类型。**DTC Capital的Spencer Noon明确表示“金融是以太坊的首个最佳用例”。Compound和Uniswap等去中心化金融平台在可组合性和全面去中心化方面做出的承诺令人敬佩。

Joe Lubin在第一天就为我们揭开了DeFi的神秘面纱，“看似‘神奇的互联网经济乐高’不过是由借贷和交易协议堆砌而成。这是一个勇敢新世界，我们每个人都可以上手操作”。要在这个勇敢新世界为探索者引航，我们需要不断增强安全措施，加大普及力度并且提高平台风险透明度。

  &lt;br/&gt;

# 彩蛋：“深度伪造”(Deepfake) 为互联网埋下定时炸弹

**“要撤下视频，联合国进行了干预。”**

——Kathryn Harrison，DeepTrust Alliance创始人

Kathryn Harrison用成本低廉、真实度超高 (deepfake) 的照片震惊了观众，这甚至使她的直播被YouTube切断，可能是因为触发了Google的内容条款。DeepTrust Alliance是一个非营利组织，借助区块链技术来打击虚假伪造行为的全球联盟。

Kathryn的演讲为我们敲响了警钟，正如Argent的Itamar Lesuisse所说，**“去中心化不仅仅停留在理念上，更在于人们是否实际信任该平台”。**而假如虚假伪造行径盛行，人们又将能否信任内容的真实性。

去中心化的验证系统可以帮助人们识别虚假和畸变的信息，这可能是一些观众在Kathryn的演讲之前并未关注到的方面。

面对着COVID-19，面对着脆弱的系统，面对着中心化，我们的斗争仍未结束。但我们见证了如此多披荆斩棘的斗士，始终确守初心。感谢大家的参与和奉献！



 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[生态系统支持计划：2020第一季度总结]]></title><description><![CDATA[2020年第一季度以太坊基金会受助项目揭晓，总经济资助达256.4万。]]></description><link>https://www.ethereum.cn/ecosystem-support-program-allocation-update-q1</link><guid isPermaLink="false">https://www.ethereum.cn/ecosystem-support-program-allocation-update-q1</guid><pubDate>Mon, 11 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/05/07/ecosystem-support-program-allocation-update-q1/)



&lt;br/&gt;

*生态系统支持计划* *(Ecosystem Support Program)* *隶属于以太坊基金会，致力于为以太坊各种项目提供经济或非经济支持，从而推动以太坊事业发展。*

我们团队在今年4月1日发布了[一篇文章](https://blog.ethereum.org/2020/04/01/ecosystem-support-program-allocation-update/)，详述了我们在2019年所完成的工作内容，以及如何分配我们的资金。那么接下来，我们会持续按季度更新工作进展。

2020年的开端略显魔幻且艰难，幸而以太坊建设者一直在砥砺前行，在他们坚持推动以太坊事业发展的道路上，ESP团队感到十分荣幸，能够继续为他们提供支持。

我们在2020年第一季度提供了2,564,000美元的经济资助。这些资金用于各种各样的项目，内容包括：使用加密经济学来激励大家在社交媒体上提出更多高质量内容建议；帮助实现Eth1客户端的多样性和互操作性；Eth2客户端的持续性开发工作等等。

本季度的受助项目主要有6类：开发者体验、Eth1、Eth2、间接资助项目、Layer2、用户体验。

以下列出了各个受助方的详细信息：

&lt;br/&gt;

### **开发者体验**

- **2 of 2 scorched earth**：Vitalik Buterin[提出](https://ethresear.ch/t/list-of-primitives-useful-for-using-cryptoeconomics-driven-internet-social-media-applications/3198)的“Two Of Two Scorched Earth”奖惩机制，用以建立一个去中心化的点对点内容建议系统，旨在激励高品质的内容传递。
- **EthWorks**：对Waffle (编写和测试智能合约的库) 进行维护和改进。资助目标包括：ENS集成、文档扩充和添加动态模拟。更多信息请访问：https://github.com/EthWorks/Waffle
- **POA Network**：Arbitrary Message Bridge为任意两条基于EVM的链搭建桥梁，实现链间代币转移。此外，还可以在链间中继数据，调用合约，例如在以太坊主网上从POA Network或Quorum Chain调用方法。对POA Network的资金资助将用于：丰富AMB的功能性、创建demos以及0的准备工作。更多信息请访问：https://www.poa.network/

###  &lt;br/&gt;

### **Eth1** **项目**

- **Nethermind**：对Nethermind重启资助计划，资金用于Nethermind 1.x客户端的实战测试 (battle-testing)，beam sync的发布、完善性能以吸引矿工用户。更多信息请访问：https://nethermind.io/
- **Tasit SDK**：作为JavaScript框架，Tasit SDK凭借React Native构建本地以太坊移动dapps，其专注于用户体验，并且易于上手。更多信息请访问：https://github.com/tasitlabs/tasitsdk

###  &lt;br/&gt;

### **Eth2**项目

- **Fast Binary Field FFT**：想要评估计算数据可用性根的难度，实行快速二进制字段FFT (fast binary field FFT) 是必不可少的；根据对计算数据可用性根的特殊CPU支持，进一步探讨是否使用16位字段比64位字段更合适。
- **Lighthouse**：继续资助Sigma Prime以推动质押客户端Lighthouse的开发。Lighthouse用Rust编写，为以太坊0网络服务。Lighthouse v0.11.1已上线且在运行中，面向用户的测试网也即将上线。更多信息请访问：https://github.com/sigp/lighthouse
- **Lodestar**：继续资助Chainsafe在其JavaScript客户端Lodestar上研发Eth2轻客户端，且进一步推动Eth2 JS语言/网页浏览器生态系统的发展，如建立库、提供工具和教育资源支持。对Lodestar的一系列关键组成部分已完成审计，审计结果[已公布](https://medium.com/chainsafe-systems/lodestar-initial-audit-passes-with-flying-colours-397d0ecaee3b)。更多信息请访问：https://chainsafe.io/
- **Nimbus**：继续资助Status以支持Eth2客户端Nimbus的开发。Nimbus用于嵌入式系统和个人移动设备，包括使用资源约束型 (resource-restricted) 硬件的旧版智能机。Nimbus v0.11.1测试网[即将发布](https://our.status.im/nimbus-update-april-10/)。
- **VDF Continuation Funding**：著名的复杂性理论学家Ryan Williams研究了基于RSA的VDFs序列性假设，比如深入了解可验证延迟函数 (VDFs)的“延迟”(delay) 部分，而“延迟”是Eth2不可支配随机性 (unbiasable randomness) 的基础。由基金会支持的研究旨在证明模幂 (modular exponentiations) 的信息理论性下界 (lower bounds)。

###  &lt;br/&gt;

### **间接资助**

- **Gitcoin bounties**：为推动以太坊生态系统发展，对社区管理的赏金给予资金资助。更多信息请访问：[https://gitcoin.co](https://gitcoin.co/)

###  &lt;br/&gt;

### **Layer2**

- **Plasma Chamber**：加密经济学实验室 (Cryptoeconomics Labs) 正致力于实现产品级的Plasma Chamber。基金会希望其能达成的工作包括：在测试网部署[OVM](https://medium.com/plasma-group/introducing-the-ovm-db253287af50)合约、开发Plasma钱包以及发布内含工具和文档的开发者门户网站。更多信息请访问：https://www.cryptoeconomicslab.com/

###  &lt;br/&gt;

### **用户体验**

- **ENS Continuation Funding**：持续推动以太坊域名服务的发展，包括全面集成域名服务 (DNS) 命名空间，即使用ENS和IPFS来储存、服务DNS域名；实现多币种支持服务；完善ENS网站和Manager；加大ENS的推广力度。更多信息请访问：[https://ens.domain](https://ens.domain/)

我们殷切希望这些项目能够不断成长，最终反哺以太坊生态系统。每当团队和项目有所成就，我们期望能够和大家一同庆祝！感兴趣的读者可以关注推特[@EF_ESP](https://twitter.com/EF_ESP)，获得受助项目的最新动态，也可以在[ESP网站](https://esp.ethereum.foundation/)上注册新闻订阅！

下次再见喽，

来自ESP团队</content:encoded></item><item><title><![CDATA[ETH2阶段0赏金计划指南]]></title><description><![CDATA[阶段0赏金计划已公布，想要分一杯羹吗？速览本文，了解赏金指南！]]></description><link>https://www.ethereum.cn/phase0-bountyeth2-phase-0-pre-launch-bounty-program</link><guid isPermaLink="false">https://www.ethereum.cn/phase0-bountyeth2-phase-0-pre-launch-bounty-program</guid><pubDate>Fri, 08 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [ethereum.org](https://notes.ethereum.org/@djrtwo/phase0-bounty#Eth2-Phase-0-Pre-Launch-Bounty-Program)



 &lt;br/&gt;

译者按：以太坊基金会于四月初宣布了eth2阶段0赏金计划，这项计划的初衷是激励大家群策群力，在eth2主网正式启动之前寻找并报告核心规范中的bug。目前，[阶段0赏金计划](https://notes.ethereum.org/@djrtwo/phase0-bounty)的所有奖励已经翻倍，如果发现严重漏洞，最高可获得2万美元奖励。本文将介绍赏金计划的细则，帮助大家参与进来。

以太坊基金会将维持阶段0赏金计划，直至阶段0主网上线。在进入阶段0后，该计划会被纳入标准[以太坊赏金任务](https://bounty.ethereum.org/)。

 &lt;br/&gt;

# 规则

 

- 范围为master分支中的[阶段0信标链](https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/beacon-chain.md)及[阶段0分叉选择](https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/fork-choice.md)规范
- 已经由他人提交的或是以太坊基金会已知的issue不符合赏金奖励要求
- 所有的bug报告需要以issue或PR形式提交到[0-specs](https://github.com/ethereum/eth2.0-specs)库
- 若需匿名提交报告，可以发送至[bounty@ethereum.org](mailto:bounty@ethereum.org)，但无法获得赏金奖励
- 以太坊基金会将独立负责评估bug报告的有效性和严重程度
- 赏金奖励可选择由ETH或DAI支付
- Eth2的客户端团队可以参与赏金计划，但需要接受较高等级的审查（例如不得隐瞒bug/不得在规范撰写过程中刻意引入bug）。EF研究团队无法参与该赏金计划。

**注意**：阶段0赏金计划的范围只包含[核心eth2规范](https://github.com/ethereum/eth2.0-specs)。客户端实现可以作为理解规范和解决bug的工具，但客户端实现的bug暂时不包含在本赏金计划内。

  &lt;br/&gt;

# 如何上报

 

所有的bug报告需要以issue或PR形式提交到[eth2.0-specs](https://github.com/ethereum/eth2.0-specs)库

以提高审核效率，请遵循以下报告格式：

- 在issue/PR中加上前缀“[Bug Bounty]”
- Issue/PR主体部分请使用以下格式：
  - **描述**：概括所提交的bug [一句话]
  - **攻击场景**：描述针对该bug的攻击场景或意外/错误行为 [1-3句话]
  - **影响**：描述该bug在应用场景中可能造成的影响 [1-2句话]
  - **出处**：指出bug出现的文档、函数以及具体行数
  - **再现**：如果在寻找bug的过程中使用了任何工具或模拟器，请详细描述如何重现该bug。最好能使用python规范和规范库中的相关测试工具来展示。
  - **细节**：有关该bug的细节描述。系统需处于什么状态、需包括什么类型的消息以及需按照什么顺序等等。
  - **修复**：如果有修复建议的话，可以进行描述

  &lt;br/&gt;

# 严重性级别及相应奖励

 

以下“严重性级别”用于对bug的严重性进行分类并按照级别对上报人进行相应奖励。奖金以美元计值。

**注意**：5月6日所有的奖金都已翻倍，严重程度最高的漏洞奖金多达2万美元:)

- **低严重性– $1000**
  - 定义：对信标链系统的功能影响甚微，甚至可以忽略不计，但是仍然可以视作是“瑕疵”，有修复的必要
  - 示例：在某些情况下，对证明位进行了错误的更新，但最终确定性计算仍然正确

- **中等严重性– $5000**
  - 定义：不影响信标链系统的主要操作，但并非预期行径
  - 示例：
        - 在一个epoch内，证明奖励只给到N-1个参与者，而不是所有N个参与者
        - 在某些情况下，消极惩罚始于MIN_EPOCHS_TO_INACTIVITY_PENALTY + 1的epoch，而非计划中的MIN_EPOCHS_TO_INACTIVITY_PENALTY epochs。

- **高严重性 – $10000**
   - 定义：影响信标链的主要操作，但不会导致系统崩溃或完全停止最终确定
   - 示例：
          - 在某些情况下，最终确定性计算每四个epoch进行，而正常情况是在每个epoch中进行
          - 在进行分叉选择时，某些有效区块的子集无法成功添加到区块树中

- **极高严重性– $20000**
  - 定义：会导致信标连系统崩溃，完全阻停最终确定，或者其他严重中断
          - 示例：
            - 即使链上已打包足够的证明，系统也会进入不再更新最终检查点的状态
            - 新的有效区块无法被加入到分叉选择的区块树中
            - 某些情况下，诚实验证者遭到罚没
            - 奖励计算中发生下溢或上溢，导致意外造币 (或销毁) ETH或客户端崩溃

 &lt;br/&gt;

# 参考资源

 

- [Core eth2 specs](https://github.com/ethereum/eth2.0-specs/tree/master)
- [Executable spec on pypi](https://pypi.org/project/eth2spec/)
- [Design rationale](https://notes.ethereum.org/@vbuterin/rkhCgQteN?type=view)
- [Phase 0 for Humans](https://notes.ethereum.org/@djrtwo/Bkn3zpwxB?type=view)
- [Annotated Spec](https://benjaminion.xyz/eth2-annotated-spec/)
- [Eth R&amp;D discord](https://discord.gg/VmG7Uxc)

 &lt;br/&gt;

# 隐私

 

以太坊基金会对参与赏金计划而可能泄露的任何私人信息概不负责。

如果漏洞报告的确泄漏了私人信息 (例如包含IP地址的测试网日志)，我们要求您在公开报告中去除任何此类信息。请注意，我们还有其他附带资源可以共享，并且可以随时联系赏金评估人。

 &lt;br/&gt; 

# 法律声明

 

此赏金计划是针对活跃的以太坊社区的一项实验性和全权奖励措施，旨在鼓励和回报平台的贡献者。这不是一场比赛。我们可以随时停止该计划，并且奖项由以太坊基金会全权决定。

此外，我们无法向位于制裁名单中的个人，或处于制裁名单中的国家/地区 (例如朝鲜，伊朗等) 的个人颁发奖励。个人应对所有税负负责。所有奖励均适用于法律条款。您的测试不得违反任何法律或侵害任何他人数据。



 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0网络的健康指标]]></title><description><![CDATA[无法得知Eth2网络是否正常运行？犹豫加入以太坊质押大军？五大健康指标为你指路。]]></description><link>https://www.ethereum.cn/defining-ethereum-2-network-metrics</link><guid isPermaLink="false">https://www.ethereum.cn/defining-ethereum-2-network-metrics</guid><pubDate>Fri, 08 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [attestant.io](https://www.attestant.io/posts/defining-ethereum-2-network-metrics/)





&lt;br/&gt;

译者序：在区块链的赛道上，要成为最后的幸存者，不可忽视网络的健康状况。本文将另辟蹊径，为你一一解释以太坊2.0网络的五项健康指标，包括网络活性、参与率、验证者预估报酬、质押有效性以及罚没风险。它们如何影响以太坊网络健康？又是如何相互影响的？

关于单个Eth2.0验证节点实际表现的衡量方法已有不少论述，但整个以太坊网络健康状况的相关文章却少之又少。以太坊网络中的一些重要指标能够为网络运营者及期望参与者 (运行节点或充当验证者) 提供有价值的信息。本文我们将明确某些指标的定义、衡量方法以及衡量标准。

###  &lt;br/&gt;

# 网络活性 (Network Liveness)

## **是什么？为何重要？**

网络活性衡量Eth2.0区块链中的新区块被最终确定的速度。这一指标举足轻重，因为若区块尚未最终确定，那么其中的交易仍可以被篡改。如果某条链没有持续对区块进行最终确定，那么它就无法达到其基本目的，即维持交易和状态的恒定不变性 (immutability)。

网络活性的评分为0%~100%，若多个区块持续无法被最终确定，得分为0%；若区块的最终确定速度达到协议的极限速度，得分则为100%。如果网络活性为0％，则表示网络无法对区块进行最终确定，因此所有验证者都会被扣除押金，即使他们个人工作表现良好。

网络活性通常为100％，网络拥塞时降至50％。若网络活性低于50％，会出现严重的网络问题。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/g30NrFM/1.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图表1：网络活性的范围值&lt;/center&gt;

## 计算方法

网络活性计算公式：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/yXRJgCb/2.png&quot;/&gt;&lt;/center&gt;




当前时段计算公式：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gPbJDLW/3.png&quot;/&gt;&lt;/center&gt;





最终确定时段可从活跃的Eth2节点获取。

&lt;br/&gt;

# 参与率 (Participation Rate)

## 是什么？为何重要？

参与率指的是实际参与证明的验证者占总预计参与验证者的比例。这一指标也很重要，因为参与率越低，每个参与验证者获得的报酬就越低。参与率过低或许会导致网络活性不足。

良好的参与率处于80％到95％之间。如果参与率低于67％，则无法再对区块进行最终确定，网络活性也随之下降。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/MpLcTKG/4.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图表2：参与率的范围值&lt;/center&gt;

####  

## 计算方法

参与率计算公式：



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/BcTD434/5.png&quot;/&gt;&lt;/center&gt;




值得一提的是，最后一个时段的证明数量这一数值有多种来源。它可以是最后一个epoch的区块中包含的证明数量，可以是节点所见的最后一个epoch的证明数量，也可以是来自最后一个时段的区块中包含的证明数量等等。同时，它也可以是倒数第二个时段包含的证明数量。此值的确切计算方法取决于用户以及其可获得数据。

参与证明的验证者指的是那些依据[验证者生命周期](https://www.attestant.io/posts/understanding-the-validator-lifecycle/)被视为活跃、正在退出或遭受罚没的验证者。

&lt;br/&gt;

# 验证者的预估报酬 (Estimated Validator Return)

## 是什么？为何重要？

大多数验证者都期望得到奖励报酬。验证者的预估报酬指的是验证者在一年中通过履行职责获得的预估ETH报酬。这一指标用可获得报酬占质押ETH数量的比例来衡量。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Krfmxfx/6.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图表3：验证者最低报酬Vs. 参与证明验证者大概总数&lt;/center&gt;

重要的是要知道，即使验证者尽忠职守，参与度低或网络活性降至0%也会导致其报酬减少。因此，严格来说，此处的验证者预估报酬只不过是其能获得的最大收益中的一部分。具体来说，参与率降低会导致验证者实际预估报酬减少，因此，将上述的基本验证者预估报酬乘以参与率，得出的结果或许更具有代表性。但是，这种计算方式容易受网络参与率暂时性高峰期和低谷期的影响而使结果产生波动，所以采用一段时间内的平均参与率得出的结果更为准确。然而，即使在这种情况下，也只能得出预估值，因为这是一种前瞻性指标。

在很大程度上，报酬水平的高低，取决于证明时产生的成本。这里的成本[多种多样](https://www.attestant.io/posts/exploring-ethereum-2-validator-costs/)，理解清楚才能进一步计算报酬。另外，请注意，运行验证节点的成本通常以法币为计量单位，而报酬以ETH为计量单位，因此需要换算汇率。然而，对于典型的验证节点来说，每个验证者每月的成本为25美元左右，假设一个ETH价值200美元，收益变化情况如下图所示：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/KhHZ1kR/7.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图表4：扣除成本后的预估报酬&lt;/center&gt;

####  

## 计算方法

对于给定数量的验证者，可以直接从上图中读取验证者预估报酬。参与证明的验证者数量可从Eth2.0节点获取。

&lt;br/&gt;  

# 质押有效性 (Stake Effectiveness)

## 是什么？为何重要？

质押有效性指的是用于质押验证的ETH所占比例。以太坊2.0采用[有效余额 ( effective balance)](https://www.attestant.io/posts/understanding-validator-effective-balance/) 这一指标来判断证明的权重。当大多数验证节点的实际余额高于其有效余额时，他们将处于低效率水平。

举个例子，假设某个验证者的余额为31.7个ETH，其有效余额则为31个ETH，从而导致剩余的0.7个ETH未经用于验证者证明。未经使用的ETH数量会随着验证者余额的变化而变化，但在很少情况下为0。

质押有效性十分重要，因为用于质押的ETH越多，网络安全系数越高。部分验证节点的ETH已被锁定，却无法用于证明过程，这些ETH对网络安全性没有意义，因此是被白白浪费的。

另外，对于单个质押验证者来说，这一指标也很重要，因为质押有效性降低，验证者获得的预期报酬率也会随之下降，因为报酬的多少基于有效余额的高低。

预计在Eth2.0推出后不久，质押有效性将大致维持在90％左右，因为某些验证者被扣除资金的同时，其他验证者会获得资金。随着时间的推移，节点工作效率越来越高，且实际余额没有设置上限，但有效余额的限值为32个ETH，因此，质押有效性将有所下降。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/CKXRX0c/8.png&quot;/&gt;&lt;/center&gt;








图表5：质押有效性的范围值

####  

## 计算方法

单个验证者的质押有效性计算公式：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/XDB1mKq/9.png&quot;/&gt;&lt;/center&gt;









计算整个网络的质押有效性时，有效余额为所有参与证明验证者的有效余额总和，实际余额为所有参与证明验证者的实际余额总和。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/RQcx0BN/10.png&quot;/&gt;&lt;/center&gt;




&lt;br/&gt;

# 罚没风险 (Slashing Risk)

## 是什么？为何重要？

罚没是Eth2.0网络的最终制裁手段，即扣除验证者的部分押金，并立即将其逐出验证者池。但是，上一句话中的“部分”取决于某个验证者被罚没之前和之后其他验证者的行为。同一时间被罚没的验证者越多，每个验证者所承担的罚金就越高（更多详细信息请参见[本文](https://www.attestant.io/posts/understanding-the-validator-lifecycle/)）。

由于验证者已充分了解罚没机制，预计其发生机率很低。这使得跟踪这一指标变得更加有趣，一旦达到某一较高水平，就表明网络遭到攻击。如果罚没风险超过15%，就表明有大量节点遭到罚没，这时候应该查明原因。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Vt69zgQ/11.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;图表6:罚没风险的范围值&lt;/center&gt;

####  

## 计算方法

罚没风险计算公式：

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/sC33pvW/12.png&quot;/&gt;&lt;/center&gt;





注意，这是一个估值。原因如下：1）假设所有验证者的余额为32个ETH，但事实可能并非如此。2）实际上，罚没的实际金额不仅取决于罚没风险，还取决于罚没机制触发后18天内的风险，这些日子里会出现新的被罚没验证者。

&lt;br/&gt;

# 总结

以上这些指标能够反映整个以太坊2.0网络的健康状况，帮助ETH持有者决定是否加入质押网络，也能帮助质押者掌控风险，使节点平稳运行。同时通过监测这些指标，用户能够确认Eth2网络是否如期正常运作。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览 #11]]></title><description><![CDATA[阶段0赏金计划奖金翻倍；Schlesi多客户端测试网平稳运行；即将迎来Eth2主网发布前最后一次重大规范迭代……]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-11</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-11</guid><pubDate>Thu, 07 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/05/06/eth2-quick-update-no-11/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)
&lt;br/&gt;



近来大家都忙于各种事情，我会尽量保持本系列博文的更新。与此同时，读者们可以阅读Ben Edgington的[What’s New in Eth2](https://notes.ethereum.org/@ChihChengLiang/Sk8Zs--CQ/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200501?type=book)以获得eth2的最新进展。

[Ethereal虚拟峰会](https://www.etherealsummit.com/)将于本周四周五举行！届时会有许多eth2干货，并且会议完全免费。感谢所有组织者的协调，使得会议能够线上进行。我超兴奋:)

 &lt;br/&gt;

# 要点速览

- [阶段0赏金计划](https://notes.ethereum.org/@djrtwo/phase0-bounty)奖金翻倍
- [Schlesi](https://schlesi.beaconcha.in/)多客户端测试网正在平稳运行
- `12`版本规范准备中

 &lt;br/&gt;

# 阶段0赏金翻倍

 

从今天开始，[阶段0赏金计划](https://notes.ethereum.org/@djrtwo/phase0-bounty)的所有奖励将增加一倍，如果发现严重漏洞，**最高可获得2万美元奖励！**

本计划旨在激励大家寻找并报告eth2阶段0核心规范中的漏洞，为主网发布做好准备。

以太坊基金会将从现在开始负责运行此计划，直到阶段0主网发布之前。在阶段0投入使用后，我们将把阶段0的赏金计划转变为标准的 [以太坊赏金计划 (Ethereum Bounty Program)。](https://bounty.ethereum.org/)

点击[此处](https://notes.ethereum.org/@djrtwo/phase0-bounty)阅读更多相关规则、如何报告bug、bug的严重程度以及相应奖励。

祝各位猎bug之旅愉快 🐛 ！

 &lt;br/&gt;

# Schlesi多客户端测试网

 

四月十七日，首个eth2多客户端测试网[“Schlesi”](https://schlesi.beaconcha.in/)诞生了！

Schlesi是由Afri Schoedon领导的eth2多客户端工作，该测试网是首个持续性多客户端测试网。非常感谢Afri的努力，使得多个客户端可以进行互操作，还提供了整个过程的详细bug报告，并且至今为止已经支持测试网平稳运行了几周！

Schlesi测试网初期加入了[Prysm](https://github.com/prysmaticlabs/prysm/) 和 [Lighthouse](https://github.com/sigp/lighthouse/) 这两个客户端，之后[Nimbus ](https://github.com/status-im/nim-beacon-chain/)和 [Teku ](https://github.com/pegasyseng/teku)也成功进行了同步，并且正在努力协调验证者的行为。大家可以去看看测试网区块中的涂鸦墙 `graffiti`，许多区块带有客户端/搭建的[标记](https://schlesi.beaconcha.in/block/66300)，有一些区块则附带了一些[很有趣的消息](https://schlesi.beaconcha.in/block/66165)。

Schlesi很可能会在多次迭代之后成为正式的多客户端测试网，然而目前随着bugs浮出水面、版本替换或者新的客户端上线，我们预计每1~2周会重启一次Schlesi。

如果读者想加入Schlesi多客户端测试网或是深度参与进来，可以通过 [Eth R&amp;D schlesi 频道](https://discord.gg/Tmgzwng)联系我们！

##  &lt;br/&gt;

# v0.12版本规范准备中

 

我最近的大部分时间花在准备[eth2规范](https://github.com/ethereum/eth2.0-specs)上，以便升级到`v0.12`版本。如果没有发现严重的安全性漏洞，这将是主网上线前最后一次对规范进行较大的改动。

该版本将加入针对BLS签名的 IETF hash-to-curve 第七份草案[ (Draft 7)](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07)、持续优化的网络规范，以及出于测试考虑对状态转换进行的细微改动。

在eth2的工作进程中，IETF的BLS标准让人感到兴奋的同时也倍感压力。一方面，我们非常希望应用严谨的行业标准，充分利用稳健的工具和更简洁的互操作性；但另一方面，BLS的标准化过程完全独立于我们所能掌控的范围。

随着BLS标准的更新，eth2规范也会面临重大的更改，而实现这些改动需要一些开发工作量，这就会给我们的预计时间线带来不确定性。

IETF规范的维护人员对 Draft 7没有异议，并且预计不会做出进一步更改。Eth2 团队和其他许多区块链项目计划采用Draft 7，如若发现严重的安全性漏洞，才会考虑对其做出后续改动。

在网络 (networking) 方面，我们刚刚进行了一次收获颇丰的[电话会议](https://github.com/ethereum/eth2.0-pm/issues/148)，讨论解决了初始同步、特定功能的节点发现、基于类型的消息大小限制等细节问题。不妨看看Ben Edgington为此整理的[笔记。](https://hackmd.io/@benjaminion/rJkuZ4e5I)🚀

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Ethereum.org进展更新（三）]]></title><description><![CDATA[以太坊官网升级搜索功能，完善网页内容，将以全新面貌示人。]]></description><link>https://www.ethereum.cn/ethereum-org-development-update-3</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-org-development-update-3</guid><pubDate>Wed, 06 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/05/05/ethereum.org-development-update-3/)



&lt;br/&gt;

你好以太坊！以下是ethereum.org团队最新的更新：

&lt;br/&gt;

##  

# 帮助我们达到30种翻译版本的目标！




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/6r0Hwdw/EF-4-8a27ef285c.png&quot; /&gt;&lt;/center&gt;






过去6个月以来，世界各地的以太坊社区将Ethereum.org的网站内容翻译成23种语言。**目前，非英语网页的浏览量占总浏览量的20%以上。**

接下来的两个月， 我们计划将翻译版本增加到30种以上。**如果你所掌握的语言在ethereum.org上没有翻译版本的话，我们衷心希望你能加入我们的翻译项目！**

我们迫切需要母语为**越南语、泰语、丹麦语、挪威语、匈牙利语、芬兰语和乌克兰语的人才加入我们团队。**

如果有意向贡献的语言版本已经存在，你也可以协助我们针对最新版本的网站进行更新。

想要加入ethereum.org的翻译项目吗？请访问[此处](https://ethereum.org/languages/#ethereum-org-translation-program)以了解更多详情。

##  &lt;br/&gt;



# 建立在ENS和IPFS上的Ethereum.org



该网站已在星际文件系统 (IPFS) 上运行, 凭借以太坊的去中心化域名服务 (ENS) 可访问该网站。[ENS团队详细介绍了访问方法。](https://twitter.com/ensdomains/status/1244699514373431296)

特此感谢IPFS团队 (尤其是Chris Waring)，开发了[IPFS插件VuePress](https://www.npmjs.com/package/vuepress-plugin-ipfs)，使得访问更加顺利。还要特别鸣谢ENS团队的Brantly Millegan以及Alex Van de Sande对此作出的贡献。

##  &lt;br/&gt;

# 搜索功能升级



![EF更新5.png](https://i.ibb.co/SNw0kbM/EF-5-048b0ee179.png)





我们收到不同用户的反馈：ethereum.org 的网站搜索仅基于网页标题或者页眉 (header) 进行查找定位，不利于搜索特定的话题内容，即便网站上有相关内容的目录。本次升级便是受到了以太坊社区意见的启发。

我们刚上线了新搜索系统Algolia，里面编录了我们所有网页的HTML，并且在精确匹配的基础上，Algolia还能通过模糊匹配来搜索内容，如此便显著提高了网站内容的可检索性。

##  &lt;br/&gt;

# 一周年庆

一年前，新版网站[Ethereum.org](https://blog.ethereum.org/2019/04/30/beginning-a-new-ethereum-org/)上线。

一年以来，以太坊社区的大力支持让我们倍感惊喜。目前网站维护人员已达170多名，且有350多名志愿者将网站内容翻译成多语言版本。

除了大家的支持与反馈，最重要的是，感谢你与以太坊社区相伴成长。

##  &lt;br/&gt;

# 下一步是什么？

在接下来几个月里，我们团队的主要工作是完善网站内容，包括改进现有网页和增加新网页:

- 介绍EIPs ([已上线](https://ethereum.org/eips/))
- 以太坊基金会 ([已上线](https://ethereum.org/foundation/))
- ETH 2.0 ([进行中](https://github.com/ethereum/ethereum-org-website/issues/878))
- 以太坊节点Ethereum Nodes ([进行中](https://github.com/ethereum/ethereum-org-website/issues/969))
- Ethereum Gas 
- 去中心化金融 (DeFi)
- 以太坊白皮书
- 稳定币 (Stablecoins)
- 以太坊新闻快讯
- …等等

在一些优秀的社区成员的帮助下，我们即将完成对网站***\*开发者\****板块的审计，此后，我们将增减网站内容，重组网页以及重新编辑现有的网页内容。

在接下来的几周，我们还会继续公布新的设计升级内容和网页布局变化。

想要参与到我们的工作中吗？或者对我们的日常工作感到好奇吗？我们最近发布了一个新网页[About Ethereum.org](https://ethereum.org/about/)，向公众展示了我们的工作点滴。欢迎大家在查阅后，和我们分享你的想法！

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/5/1）]]></title><description><![CDATA[多个客户端正陆续加入Schlesi多客户端测试网，Schlesi能否一战到底？]]></description><link>https://www.ethereum.cn/wnie-2020-5-1</link><guid isPermaLink="false">https://www.ethereum.cn/wnie-2020-5-1</guid><pubDate>Tue, 05 May 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://notes.ethereum.org/@ChihChengLiang/Sk8Zs--CQ/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200501?type=book)



&lt;br/&gt;

近来的热点无疑是测试网，主网配置测试网和多客户端测试网都在逐渐到位。

###  &lt;br/&gt;

# 阶段0：信标链



[0.11.2版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.2)规范已发布，其中对状态转换进行了一些微小的更新，并针对网络规范给出了更实质性的说明。随着测试网的建立，网络规范也在持续优化。此版本中的所有内容都向后兼容v0.11.1。

我们可能很快就能迎来0.11.3版本，该版本规范将重构奖罚[计算机制](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/state-transition/#rewards-and-penalties)，以便进行更细致的测试。奖惩计算一直是客户端实现中的一个错误源头，基准测试并不总是会检测到此类错误。

说来话巧，我们前几天[在Teku就碰到了这种难题](https://github.com/PegaSysEng/teku/pull/1703)：漏洞版本和修复版本都可以通过当前的基准测试。因此，这个版本的修改可以说是人心所向。

####  

## **🔻 测试网**

### **Topaz**

Prysm的[Topaz测试网](https://medium.com/prysmatic-labs/introducing-topaz-testnet-8e8a4e00a700)已经上线。[此处](https://podcast.ethhub.io/prysmatic-labs-topaz-eth2-testnet-and-beyond)是Eric Conner与Prysm客户端团队录制的[Into the Ether](https://www.pscp.tv/w/1LyxBNABnvkxN)（音频播客）。**[目前](https://twitter.com/terencechain/status/1256333425268494337?s=20)Topaz测试网已超过10万个slots。**

在Topaz测试网早期，其中[超过1/3](https://twitter.com/terencechain/status/1252324918076694528?s=20)的验证者受他人控制（目前[将近一半](https://twitter.com/terencechain/status/1256333425268494337?s=20)）。这样做的意义在于，既然我们知道控制2/3验证者的一方能够有效地操纵网络，但至今为止还没有任何一个实体可以实现。有些人甚至已经设置了[大量](https://twitter.com/econoar/status/1256258727012786176?s=20)的验证者。

如果您在Topaz上运行验证者，可以尝试一下Bitfly的[涂鸦墙](https://twitter.com/etherchain_org/status/1254792243967217669?s=20)。

不幸的是，当其他非Prysm客户端尝试与Topaz进行同步时，验证者奖励计算出现了很明显的小bug。漏洞虽小，但足以使得共识失败，并且使得其他客户端无法加入测试网。

Preston对此[做出了解释](https://twitter.com/preston_vanloon/status/1255180024019218432?s=20)。计划是使Topaz目前继续运行，互操作性也会更侧重于Schlesi多客户端测试网。

### **Schlesi**

[Schlesi](https://github.com/goerli/schlesi)是由Afri Schoeden构建的多客户端测试网。时机成熟之时，Schlesi可能成为正式的多客户端测试网。

**Schlesi测试网于4月27日[诞生](https://twitter.com/a4fri/status/1254770383506440195?s=20)创世区块，但该测试网的设计目标并不是长期运行，并且可能还会重启几次。**

Schlesi正在运行Prysm (修复版本) 和Lighthouse，并且不久之前加入了Teku。Nimbus似乎也能[进行同步](https://twitter.com/ethnimbus/status/1255804796961001472?s=20)，目前一切进展尚佳。

您可以使用Bitfly浏览器跟踪[Topaz](https://beaconcha.in/)和[Schlesi](https://schlesi.beaconcha.in/)两个测试网的进度，其中有些[不错的图表](https://beaconcha.in/charts)展示。[Etherscan](https://beacon.etherscan.io/)也在跟踪Topaz测试网。

####  

## **🔻 BLS标准化**

**针对哈希到椭圆曲线 (hashing to elliptic curves) 的IETF标准[第7版草稿](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-07)已于上周发布。这是我们部署Eth2 (包括存款合约) 所需的版本，**同时我们也希望其他区块链能够采用该版本，以实现广泛互操作性。

**包含此BLS规范的阶段0规范0.12.x版本将很快发布。**所有客户端都需要更新到最新版本，因为这是一项重大改动。**预计该版本将是阶段0上线之前对规范的最后一次重要改动**，除非我们在测试网运行期间发现了其他需要解决的问题。

###  
&lt;br/&gt;

# 阐释性好文

[ConsenSys网站的Eth2页面](https://consensys.net/knowledge-base/ethereum-2)已上线，其中设有[Eth2 FAQ板块](https://consensys.net/knowledge-base/ethereum-2/faq)，希望对您有所帮助。或许之前我已略有提及。

Boxmining上有一篇简明易懂的[Eth2概述文章](https://boxmining.com/ethereum-2/)，可圈可点。此网站还提供了Topaz测试网的参与指南。

Status团队的Jacek，在推特上对构成Eth2客户端的组件进行了[阐释](https://twitter.com/jcksie/status/1256146925671403521?s=20)。

推荐几个很精彩的YouTube视频：Vitalik在The Shitcoin Dot Com Show上[谈论了Eth2](https://www.youtube.com/watch?v=OKmjnHKYLFg)，而Danny Ryan 在Parallel Society上做了一个[ETH 2.0 Ask me Anything](https://www.youtube.com/watch?v=IJTzYYevOWI)的问答活动。凌晨2点的Danny比在心情舒畅时的我状态更佳。

&lt;br/&gt;

# **研究工作**

欲了解PegaSys Eth2研发团队之一TXRX的工作到底是什么？Joe Delong发布了[其团队的最新工作进展](https://hackmd.io/@353yQn6WTImF5o12LQXXfQ/H1yRS6tt8#)，包括：

- [Prkl](https://github.com/prrkl)网络检控器 (更多细节参见下文…)
- [可验证预编译](https://ethresear.ch/t/optimizing-trusted-code-base-for-verified-precompiles/7340?u=benjaminion)相关工作，有效推进Eth2执行环境的发展
- Eth2分叉选择测试的相关进展
- Eth2[跨分片模拟](https://github.com/dangerousfood/vorpal)
- [discovery v5版本](https://github.com/zilm13/discv5)模拟程序
- Eth1 &lt;-&gt; Eth2合并进展更新

有幸与各位成为工作伙伴，我很[高兴](https://www.dictionary.com/browse/chuffed)！😄

说回刚提到的Prkl，实际上它是一种针对Eth2的网络爬虫 (network crawler)，Jonny Rhea曾经利用它寻找到规范和实现中的大量bug与问题，详情请参见上述更新。这种网络爬虫还能够生成一堆反映网络状态的信息[图表](https://twitter.com/JonnyRhea/status/1256362461520965632?s=20)。

另一支PegaSys研发团队正在利用Dafny[对Eth2规范进行正式验证](https://github.com/PegaSysEng/eth2.0-dafny)。如果所处时区合适，记得收看由以太坊工程团队于5月13日举办的[meetup](https://www.meetup.com/ethereum-engineering/events/269880527/)活动！

第三支PegaSys研发团队TeamX正在研究以太坊如何通向无状态，虽然面临重复的工作，但这是将Eth1迁移到Eth2的必要先决条件。

而实现无状态的前提是要对许多事件进行改动，其中包括如何通过JSON-RPC API满足用户对数据的需求。

假设节点没有状态 (这就是无状态的意思)，那么它们如何为Dapps提供所需数据？TeamX团队提出了一种涉及[缓存和引荐来源地址 (Caching and Regerrer)](https://hackmd.io/@Za4WVceRQVKFxOfS7l91IQ/BkTkKgSY8) 的架构。

[ethresear.ch](https://ethresear.ch/)：

✨ 除了上述TXRX团队的工作之外，Alex Vlasov还更新发布了关于Eth2容错时钟同步的系列文章：[《面向信标链的轻量级时钟同步协议》](https://ethresear.ch/t/lightweight-clock-sync-protocol-for-beacon-chain/7307?u=benjaminion)。

✨ Alon Muroch正在研究[参与者轮换形式的抽象无信任池](https://ethresear.ch/t/abstract-trustless-pool-with-participant-rotation/7332?u=benjaminion)，这是一种能够形成无信任权益池的安全途径。

✨ 几周前论坛上发布了一条关于寻找打包聚合证明有效方法的帖子，Ali Atiia对此发布了一篇[后续文章](https://ethresear.ch/t/attestation-aggregation-heuristics/7265/8?u=benjaminion)，妙趣横溢。

 
&lt;br/&gt;
# 常规电话会议

## 实现者会议

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/145)
- [会议视频](https://www.youtube.com/watch?v=avRcGzfjeIw&amp;t=46)
- [我的速记](https://hackmd.io/@benjaminion/rkXuXCRd8)以及[Mamy的笔记](https://gist.github.com/mratsim/b4ae481879c5994be8dd3b17a4cbb91a)

####  

## API

正如上次所说的那样，我们正致力于将各种Eth2客户端之间的[API](https://github.com/ethereum/eth2.0-apis)标准化，这意味着集成第三方工具将变得更加简单，并且或许还将实现不同验证节点与信标节点之间的互操作性。

4月20日的会议专门针对这一主题开展。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/143)
- [Protolambda](https://gist.github.com/protolambda/51152013648367e4d9bd1874d0860bc9)与 [Mamy的笔记](https://gist.github.com/mratsim/f0ab07dcb6e7c040bec5995b69391210)

在电话会议召开之前，Danny和Protolambda已经对客户端API的现存状态[进行了](https://github.com/ethereum/eth2.0-APIs/issues/25#issuecomment-616003897)全面的[分析](https://docs.google.com/spreadsheets/d/1kVIx6GvzVLwNYbcd-Fj8YUlPf4qGrWUlS35uaTnIAVg/edit#gid=1802603696)。此次会议的主要成果是组建了一个小型工作组，潜心于简化该项工作并使所有事情顺利进行。该小组将在接下来的几天内汇报提案。

&lt;br/&gt;

# 其他新闻

♦ 客户端团队[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-48-eth2-topaz-testnet-going-strong-b7b8cd2fb244)，[Lighthouse](https://lighthouse.sigmaprime.io/update-24.html)及[Nimbus](https://our.status.im/nimbus-update-may-1/) 的进展更新

♦ [Quantstamp](https://twitter.com/prylabs/status/1255165003868454912?s=20)将为Prysmatic Labs的客户端提供审计服务

♦ Infura已制定[针对Eth2的发展计划](https://twitter.com/infura_io/status/1256243099283738626)。一旦多客户端测试网启动，用户就能够[设置](https://blog.infura.io/infura-april-2020-update/)其信标节点API “仅邀请可访问”。

♦ 这是一个[简单的计算器](https://ethereumprice.org/eth-2-calculator/)，用于计算显示节点的Eth2质押奖励。

♦ 还有一条关于[如何激励Eth2开发者](https://twitter.com/IslandHunting/status/1251709783880712192?s=20)的推特，旨在抛砖引玉。就我个人而言，我已经感受到大伙对我的爱意❤️，这份满满的爱意不断激励着我。但是也许我并不代表所有人啦。

&lt;br/&gt;

# Ethereal峰会

**[Ethereal峰会](https://www.etherealsummit.com/)已改为线上形式，将于本周举行。**

从美国东部时间星期五上午9点开始，以太坊2.0 happy hour将持续两个半小时。众多Eth2最受喜爱人物都会亮相，当然少不了你喜欢的😂！查看议程请点击[此处](https://www.etherealsummit.com/agenda)，干货满满！

免费注册哦！不见不散！😃

&lt;br/&gt; 

### **最后**

质押时代即将来临，我也得给自己换个新设备了，它叫Metal Albert（下图是和同名小熊的合照）。


&lt;center&gt;&lt;img src=&quot;https://img.chainnews.com/material/images/84f5e24fcbdf4bb2a56f009eaafebbc9.jpg-article&quot;/&gt;&lt;/center&gt;

&lt;center&gt;*右边的黑盒子是质押设备*&lt;/center&gt;

&lt;br/&gt;

这台设备的配置还不错：i5-9500, 16GB, 1TB NVMe, 250GB SSD。但我正在计划利用它来运行Eth1主网节点和Goerli节点，参与一系列测试网，也许还会运行诸如Swarm之类的其他系统，以及参加Eth2质押。我打算长期运行这台设备，所以得有大量的空间。

下一站，集成UPS (不间断电源)！

马上去寻找附近涂鸦墙中的Metal Albert吧！

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[何为CASPER FFG]]></title><description><![CDATA[Casper FFG 如何维护 Eth2 信标链共识过程中的安全性和活性]]></description><link>https://www.ethereum.cn/casper-ffg-explainer</link><guid isPermaLink="false">https://www.ethereum.cn/casper-ffg-explainer</guid><pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [adiasg.me](https://www.adiasg.me/2020/03/31/casper-ffg-explainer.html)



&lt;br/&gt;

译者序：Eth 2.0信标链的共识协议将逐渐从PoW向PoS过渡，在这条全新的链上，如何保障其安全性和活性呢？Casper FFG 作为区块最终确定工具，为eth2带来了福音。通过这篇文章，我们可以对Casper FFG的运行规则、安全性证明和活性证明有一个初步的了解。

&lt;br/&gt;

为了对用户负责，任何区块链都必须保证链上区块的最终确定性和链的活性，而区块链共识机制的根本就是提供这些保障。在Eth2.0中，共识过程只在信标链中进行，而Casper FFG机制则保证其运行。本文主要描述了Casper FFG机制的基本概念，举例阐释其在信标链上的作用。

Casper FFG作为一项“最终确定性工具”(finality gadget)，为区块的最终确定制定了规则，并对已被确定的区块进行检测。FFG独立于区块链本身的增长过程，可以作为一个叠加层为任何有效的区块链协议提供区块最终确定性。

就这方面而言，Casper FFG并非一项成熟的共识协议，因其本身并没有相关设置，以保证链的活性。(或许我会择时再写一篇文章阐释影响Eth2.0信标链活性的相关因素)

让我们先来看看Casper FFG机制的结构，然后深入了解其规则，从而理解FFG如何保证信标链的安全性和活性！

 &lt;br/&gt;

# 投票

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/9rqk4PN/1.png&quot;/&gt;&lt;/center&gt;






验证者通过验证区块间的交易是否有效，给链上的区块进行投票。每记投票的格式为(S, T)，包含以下信息：

- 来源区块 (S)
- 目标区块 (T), 必须产生于S之后

实际操作中，一记投票需包含以下内容：验证者的数字签名以及相应区块信息（包括区块哈希和区块高度）。

 &lt;br/&gt;

# 证明&amp;最终确定

“证明”(Justification) 和“最终确定”(finalization) 是Casper FFG机制下的两个共识执行阶段，可以类比于更为传统的拜占庭容错共识协议 (BFT) 的“准备”和“执行”阶段。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1zm1JKD/2.png&quot;/&gt;&lt;/center&gt;







**2/3验证者投票证明了区块A和区块B**

**证明**：区块B如果满足以下条件，则已被证明：

- 是创世区块，或者
- 超过2/3的验证者投出了(A，B)票，A是在B之前产生的区块，且已被证明。




![casper-ffg-votes3.png](https://i.ibb.co/7gcQVWY/3.png)





**最终确定**：区块B如果满足以下条件，则已被最终确定：

- 是创世区块，或者
- B已被证明，且超过2/3的验证者投了 (B,C) 票，以及C是B的直接子区块（即C区块高度=B区块高度+1）

 

**注意**：关于Eth2.0 Casper FFG机制的最终确定规则，还有更加全面的阐释，详情请参阅[此论文](https://arxiv.org/pdf/2003.03052.pdf)。上文所给的具体阐释，只是为了让本文更加通俗易懂。

 &lt;br/&gt;

# Casper FFG的规则

Casper FFG机制有两条简单的规则：

验证者不可以进行以下任何一种情况中的 (S1, T1) 和 (S2, T2) 投票
1.区块高度(T1) = 区块高度(T2),或者
2.区块高度(S1) &lt; 区块高度(S2) &lt;区块高度(T2) &lt; 区块高度(T1)

（译者注：这两种情况在Eth2中被描述为“双重投票”和“环绕投票”，恶意验证者会因此受到罚没。）





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GtTnCPC/4.png&quot;/&gt;&lt;/center&gt;






Violation of Casper FFG Rule 1: height(T1) = height(T2)



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1ZFwZzx/5.png&quot;/&gt;&lt;/center&gt;







Violation of Casper FFG Rule 2: height(S1) &lt; height(S2) &lt; height(T2) &lt; height(T1)

 &lt;br/&gt;

# 安全性&amp;活性

Casper FFG的目的是保障区块最终确定这一共识执行过程的安全性和活性，下面两点具体阐述了其安全性和活性：

- 可追责安全性 (Accountable Safety) : 如果两个互相冲突的区块被最终确定，那么至少有1/3的验证者违反了Casper FFG规则，他们则会被标记下来。
- 合理的活性 (Plausible Liveness) : 不管协议处于哪一阶段，验证者都可以在不违反Casper FFG规则的前提下发起投票，对新区块进行最终确定。

尽管和传统的拜占庭容错共识机制 (BFT)文献相比，本文对FFG安全性和活性的阐释显得有些业余，但是对于大家理解区块链的最终确定机制，却刚好合适。

事实上，如果读者对BFT相关文献非常熟悉，会认为对于“plausible liveness”的解释十分荒谬。然而，由于Casper FFG只是最终确定性机制，因而说到保证系统的活性，其只需要避免以下情况的出现：诚实验证者为了继续提议或证明区块，不得不违反FFG规则。

至于安全性，可靠的安全性尤为重要，如违反规则的验证者会被标记下来，并将标记信息发送到PoS的机制上，从而对恶意验证者进行惩罚。这样做有助于协议的实现，以达到系统的平衡。

 &lt;br/&gt;

# 安全证明

使得两个相斥的区块A和B最终确定（且互不为对方的子区块），有两种情况：

- A区块高度=B区块高度
  - 由于A和B在被最终确定之前都需要被证明，至少2/3的验证者需要分别为目标点A和B投票。这就意味着至少有1/3的验证者违背了第一条Casper FFG的规则。
- A区块高度&lt;B区块高度
  - 区块A要被最终确定，那么至少2/3的验证者都要对区块(A,C)投票，而区块C是A的子区块。
  - B区块要被证明，那么随着区块高度增加，区块应该按[genesis, B_0, B_1, … , B_n, B]排列，其中每个区块都能按顺序证明下一个区块，即至少2/3的验证者要做出类似(G, B_0), (B_0, B_1)的投票。假设B_m是该序列中的首个区块，且A区块高度 &lt; B_m区块高度。
  - 需要注意的是，如果该序列中的任何区块和区块A或C的高度相同，那么形同以上第一种情况，我们已经得到了证明。
  - 在(B_n, B_m)投票中 (n = m-1)，B_m能够被证明。但由于B_n或B_m和区块A或C不在同一个区块高度，那我们就能得到区块高度的排列：B_n&lt; A &lt; C &lt; B_m。
  - 因此，有2/3的验证者都违反了Casper FFG的第二条规则。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wwpQT6N/6.png&quot;/&gt;&lt;/center&gt;







安全性证明，区块高度A&lt;B

还要注意的是，仅通过检查所有投票集合，找到有冲突的投票并检查相应的验证者签名，我们很容易确定违反Casper FFG规则的验证者。

 &lt;br/&gt;

# 活性证明


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/GcmYPJS/7.png&quot;/&gt;&lt;/center&gt;










- 假设P_0是经证明后的最高区块，而Q是某些验证者所认为并且投票的最高区块。
- 区块P_1作为P_0的子区块且区块高度Q&lt; P_1。此时如果有2/3的验证者对(P_0, P_1)投票使其被证明，并没有违反Casper FFG规则。
- P_2是P_1的子区块，如果有2/3的验证者对(P_1, P_2)进行投票，并使得P_1被最终确定。这也并没有违反Casper FFG规则。

因此，至少2/3的诚实验证者总是能够对一个新区块进行最终确定，这就保证了共识机制的活性。



 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[DEFI攻击频发：ERC-777难辞其咎？]]></title><description><![CDATA[前车之鉴，后事之师。]]></description><link>https://www.ethereum.cn/provablethings-thought-of-defi-attacks</link><guid isPermaLink="false">https://www.ethereum.cn/provablethings-thought-of-defi-attacks</guid><pubDate>Tue, 28 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [pNetwork Team](https://medium.com/@provablethings?source=post_page-----31c62e2bc799----------------------)



译者序：DeFi协议Uniswap及dForce于4月18、19日相继受到重入攻击，损失金额高达数千万美元。有惊无险的是，dForce已追回被盗资产并归还用户。一时之间，矛头直指ERC-777代币标准。然而，ERC777 本质上作为ERC-20的扩展，目的是增加新功能从而提升用户体验。我们是否真的要因噎废食？DeFi又应该如何突破安全瓶颈？

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/HqyR97W/ERC-1-db029a5dcc.jpg&quot;/&gt;&lt;/center&gt;
&lt;br/&gt;

仅仅只是一个周末的时间，智能合约帐户被盗金额高达数千万美元。

Uniswap的imBTC资金池[遭到黑客攻击，导致价值30万的代币丢失](https://twitter.com/tokenlon/status/1251423721476116480?s=20)。时隔不久，dForce也[遭到了类似的攻击](https://www.coindesk.com/attacker-drains-decentralized-protocol-dforce-of-25m-in-weekend-attack)，尽管大部分的失窃加密货币目前[已被归还](https://www.coindesk.com/dforce-hacker-returns-almost-all-of-stolen-25m-in-crypto)。这两起事件都是利用重入攻击向量漏洞发起攻击。

有人声称ERC-777代币标准的某些函数存在漏洞是造成这两起攻击的原因。但是，重入攻击漏洞已司空见惯，尤其在[2016年的DAO攻击](https://www.coindesk.com/understanding-dao-hack-journalists)发生期间名声大噪。因此实际上，攻击与ERC-777代币标准本身无关。

重要的是，随着这个新兴行业的发展，我们必须要认识到各种协议的优点和缺点，鼓励开放协作与争议，共同致力于提高行业标准。

怪罪于代币标准是无建设性的，并且会误导大众。旨在解决旧问题的新代币标准本身更具备安全性，却因此或许面临被质疑的风险。反之，我们要对这种不断演变的事实进行周全的分析并采取行动。

 &lt;br/&gt;

# ERC-777是什么？

以太坊代币即运行于以太坊之上的数字货币，在生态系统中发挥着独特而重要的作用。各个代币由其智能合约表示，其他DApp和用户与这些智能合约进行交互。

因此，以太坊引进了代币标准，以此来简化生态系统中的诸多DApp与代币之间的交互，从而提高可组合性。秉承着成为 “标准代币接口” 的目标，[ERC-20代币标准](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md)最初于2015年投入开发。[此处](https://docs.ethhub.io/guides/a-straightforward-guide-erc20-tokens/)是ERC20代币标准运作机制的相关指南。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/xM5RBdY/ERC-2-328bc19fb2.png&quot;/&gt;&lt;/center&gt;

 &lt;br/&gt;

随着时间的推移，以太坊代币与生态系统建立起越来越多的联系，应用范围越来越广泛。代币的用例和应用日益增多，更加复杂的智能合约对基本ERC-20代币标准提出了更高的要求，因此其部分局限性也随之开始显现。

实际上，最初该标准是为处理基本功能性而设的，因此不适用于所有用例。

尽管当今大多数代币都遵循ERC-20标准，但仍有部分代币在此基础上根据自身需求添加自定义功能。结果，部分非标准功能 (称为 [“扩展功能 (extension)”](https://docs.openzeppelin.com/contracts/2.x/api/token/erc20) ) 已添加到各个代币。

譬如，ERC-20标准不支持铸造和销毁功能，但事实上这些功能是必需的，于是便被添加为扩展功能。在某些情况下，功能需求部分重合，因此各种代币添加的扩展功能不尽相同。

ERC-20标准的这种分散性使DApp集成过程，甚至整体可组合性不必要地复杂化。为了解决这种分散性问题，社区试图就新标准达成共识。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/x2Pwcjy/ERC-3-0cd7563e5e.png&quot;/&gt;&lt;/center&gt;

经过持续两年的[开放讨论](https://github.com/ethereum/eips/issues/777)，这项新的[ERC-777代币标准](https://eips.ethereum.org/EIPS/eip-777)于去年推出。ERC-777代币标准的功能更为强大，它 “试图对广泛使用的ERC20代币标准进行改良”，并成为其正式化的完全扩展版本。

它引入并 “明确了与代币交互所需的高级功能”，使代币持有者能够更好地控制其资产。所有ERC-777代币都向后兼容ERC-20标准，这意味着如果DApp或钱包支持ERC-777标准，那么也就支持ERC-20 标准。

ERC-20是一种简单的代币格式。正是得益于其简易性，目前已有众多项目和团队利用该标准相对轻松地构建了新的DApp，既促进了生态系统的发展，也激发了创新创造活力。**然而，它的局限性也使其面临用户体验方面的持续挑战。**





&lt;br/&gt;

# ERC-777标准旨在解决ERC-20标准固有的两个主要问题

1.ERC-20仅对以太币 (ETH) 交易做出响应。批准并转账需要进行两个步骤，这一缺点导致诸多用户体验问题。最明显的问题是，处理单个请求需要发起两笔独立的交易。**ERC-777则能通过执行功能实现代币的转入，无需借助ETH作为媒介，从而简化了转账流程。**

2. “用户操作失误” 导致价值数百万美元的代币丢失。用户通常将其代币发送到智能合约，而不是区块链目的地址。由于尚未界定在处理此类错误的情况下`transfer` 函数的标准行为，所以ERC-20合约无法检测到此类错误。ERC20代币标准的这一特征 “是一个软件bug，可归类为软件漏洞”。相比之下，**ERC-777智能合约能够检测到此类错误并拒绝错误的代币转账行为。**

 &lt;br/&gt;

# ERC-777标准与某些协议不兼容

ERC-777标准的特定函数是其独特的特征。这些函数实现了协议之间的互操作性，这对于扩展以太坊生态系统至关重要。

**但是，由于ERC-777代币标准是去年才引入的，所以这些特征可能与某些协议不相兼容，尤其是某些先前部署的智能合约。**

鉴于以太坊的快速发展以及新兴去中心化金融智能合约的日益复杂，存在不兼容性不足为奇。但重要的是，也要尽快解决协议中的这些问题，因为它们暴露在攻击向量的入侵之下。对于其他各种不兼容性来说也是一样的道理，不仅仅是针对ERC-777标准。

随着该新标准的采用率越来越高，其他项目也就必须支持ERC-777代币，或者以其他方式实施必要的安全措施，以保护自身项目免受此类攻击。不幸的是，许多项目并没有做到以上两点。

在某些情况下，例如，即使Uniswap团队公布了 V.1版本存在此问题，也只是不鼓励用户锁定其ERC-777代币到流动性池中。

Uniswap团队似乎还错误地以为，转账代币时受到重入攻击，合约仍处于安全状态。请注意，这种假设对于任何一种智能合约都不成立，但是某些协议还是将代币转账（不仅是ETH转账）错误地假定为比正常情况更安全。不幸的是，上上个周末发生的重入攻击正是操纵了此漏洞。

发起重入攻击即操纵智能合约中进行交互 (进行“交流”和互操作) 的函数对合约进行攻击。例如，用户兑换其代币时或许会涉及三个智能合约；智能合约A (一种dApp或协议如Uniswap)与智能合约B (代币智能合约如imBTC，或另一种dApp或协议) 进行交互，然后智能合约B与智能合约C (任何能够由黑客创建，只为盗取资金的智能合约) 进行交互。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VxnLG6J/ERC-4-dfb2699d8e.png&quot;/&gt;&lt;/center&gt;

如果智能合约C受攻击者劫持，它可以发送代币请求，但会伪造收到资金的确认信息。发送代币至智能合约C的请求仍然执行，但是攻击者可以继续假装从未收到代币。由于这是一个自动化过程，因此无法进行干预，除非用户意识到正在受到攻击并终止合约。

 &lt;br/&gt;

# 前车之鉴

这种攻击向量暴露在被攻击的风险下。作为以太坊互操作性的一项关键特征，它可以通过多种方式加以操纵。代币智能合约也是发起重入攻击的工具之一。最近发生的imToken/Uniswap和dForce攻击就是如此。

**我们不能因噎废食，攻击事件并不足以为DeFi时代划上句号，甚至不足以使我们质疑ERC-777代币标准的安全性。**

ERC-777代币的数量正在稳定增长。诸如Augur之类的团队正在决定将其代币格式从ERC-20升级为ERC-777。**随着DeFi行业的发展，我们必须了解使用此类创新技术的风险以及如何将风险降至最低，这一点至关重要。**

这种漏洞的优点在于，它属于代码错误，而非传统金融行业中普遍存在的固有的系统性缺陷——腐败、过度监管和排斥性。通过DeFi，我们已经将信任从人类转移到代码身上。因此，尽管总会有人存心利用代码，但是至少代码本身并没有从人类身上获利的企图。当今的经济体系却并非如此。

作为DeFi行业的一份子，我们应该不断改进标准，使每次迭代都变得更强大、更安全。目前，ERC-777具有一系列优势，能为代币持有者和DApp带来价值。**我们应该始终致力于改进ERC-777标准以及今后所有的标准。**DeFi要脱颖而出，突破口正在于此。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/vDSghk3/ERC-5-4404f1e47d.jpg&quot;/&gt;&lt;/center&gt;
&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2.0中的CASPER FFG机制]]></title><description><![CDATA[由近及远，阐明Casper FFG机制细节概念与分叉选择规则。]]></description><link>https://www.ethereum.cn/casper-ffg-in-eth2-0</link><guid isPermaLink="false">https://www.ethereum.cn/casper-ffg-in-eth2-0</guid><pubDate>Thu, 23 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [adiasg.me](https://www.adiasg.me/)



&lt;br/&gt;

感谢Danny Ryan与笔者共同讨论及审阅文章。

我[上一篇文章](https://www.adiasg.me/2020/03/31/casper-ffg-explainer.html)讨论的是关于Casper Friendly Finality Gadget （Casper FFG）的基础知识，那么这篇文章的第一部分将重点介绍信标链Casper FFG机制实现的高层级细节，第二部分将讨论分叉选择规则（fork choice rule）和活性的其他相关因素。

这篇文章解释的是直接从Eth2.0规范中挑选的概念，我会尽可能地提供规范中参数与函数的相关链接。这些链接仅供参考，因此无需查阅这些链接也能读懂这篇文章。

&lt;br/&gt; 

# Casper FFG 机制

## Slots、 Epochs 及 Attestations

**Slots（时隙）**：区块链上的时间是按照 slot 来划分的，每个slot期间有一个新区块被提议。每个slot为12秒，[一个slot分配一个验证者提议产生一个新区块](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#get_beacon_proposer_index)。

**Epochs**（时段）：Casper FFG机制无需在完整的区块树上运行，仅处理投票所需的某些特定slot的区块即可。因此，在通过查看投票情况以对区块进行最终确定时，能够免于查看过多来源区块 – 目标区块对，从而减少了成本。由于这些特殊slot为验证者提供了足够的投票时间，因此当每次进行FFG最终确定性检查时，预计将看到绝大多数验证者的新投票结果。每个epoch由32个slot组成，所以每个epoch的时间长度为6.4分钟，即1 epoch = 32 slots \* 12s = 6.4mins。FFG机制只处理这些epoch的边界区块（称为”检查点（checkpoints）”或“epoch边界区块（EBB）”）。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gM9F7Cn/1.png&quot;/&gt;&lt;/center&gt;



**假设每个epoch由3个slot组成，Slots和Epochs之间的关系示意图，其中区块A、D、G是检查点**

[**Attestations证明**](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#attestationdata)：指的是Casper FFG投票，其中包含诸如来源区块、目标区块、进行证明时的slot编号及验证者的标识符等信息。证明由验证者广播到p2p网络，最终再由区块生产者打包进区块。

&lt;br/&gt;

## Casper FFG 机制的变化

与我以前的文章中提到的相比较，最终确定性的定义有所改变。

**Finalization（最终确定性）**：区块B已最终确定的条件如下：

- 或是充当创世区块
- 或是B_0已被证明，条件如下：
  - slot编号按顺序递增，检查点也随之按[B_0, B_1, … , B_n]顺序排列，其中n &gt;= 1，这些检查点区块位于同一条链上且已被证明。
  - 同时超过2/3的验证者已将票投给 (B_0, B_n)




![ffg2.png](https://i.ibb.co/HpZ86MH/2.png)



**黄色区块处于已证明状态，红色区块处于最终确定性状态**

更改后的定义仍然保留了上一篇文章中Casper FFG安全证明的概要。关于完整证明的内容，请参见[本文](https://arxiv.org/pdf/2003.03052.pdf)的“安全性”部分。

#### **Casper FFG 最终确定性检查** 

信标链采用链上FFG机制来处理区块与证明，以检测最终确定性。在每个epoch边界，该机制都会处理新的证明，并更新已证明与已最终确定区块的信息。

为了尽可能降低任何来源区块-目标区块对之间证明的处理成本，链上FFG机制仅处理特定的来源区块-目标区块对，即只处理当前与上一个epoch的证明[（事实上还要满足更多条件）](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#attestations)。这种特性导致链上FFG机制无法检测所有最终确定性实例！简而言之，这种链上机制是合理的，但并不完善。

另外，由于仅处理最后两个epoch的证明，该机制还引入了网络同步假设（network synchrony assumption），假设证明在两个epoch的时间内广播到全网。

[链上FFG机制规范](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#justification-and-finalization)十分简单：

- **第一步要检查区块合理性**。采用最后两个epoch的新证明来检查它们的边界区块是否合理。
- **下一步要检查区块最终确定性**，检查对象是最后两个epoch的边界区块。仅对四组来源区块-目标区块对进行最终确定性检查，以求提高性能和简化规范。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/hdXB2sF/ffg3-cf760ec51a.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gy6MFBB/4.png&quot;/&gt;&lt;/center&gt;



**此图展示最终确定性检查涉及的检查点**，黄色区块为已证明状态，红色区块为已最终确定区块


&lt;br/&gt;

# 分叉选择与验证者计划

尽管Casper FFG机制对区块最终确定保证规则进行了概述，但并未提及在实践中如何保证网络活性。*（注意：本文并非试图证明网络活性，而是概述有望保证活性的过程。相关严谨分析，请参阅[此文](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#justification-and-finalization)。）*



本文这部分将重点关注两个主要的活性相关因素：

- 验证者用来查找区块链头所执行的分叉选择规则
- 验证者遵循的区块生成与证明计划

&lt;br/&gt;

## HLMD GHOST 分叉选择规则

提议区块的验证者首先必须找到本地区块链头，为此，他们要遵循Hybrid Latest Message Driven (HMLD)GHOST作为分叉选择规则。

[分叉选择规范](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/fork-choice.md#get_head)如下：

1. 在每个epoch开始的时候，验证者确定当前视图下的最新已证明区块。这一变量会在该epoch内被冻结，并在下一个epoch开始时再次更新。
2. 筛选并排除出没有把步骤1确定的已证明区块作为此区块链中最新已证明区块的区块。
3. 遵循[一般LMD GHOST规则](https://vitalik.ca/general/2018/12/05/cbc_casper.html)，由上至下遍历区块树，直到找到叶节点为止。

分叉选择的更多相关信息，请参见[此文](https://arxiv.org/pdf/2003.03052.pdf)的“Hybrid HLMD GHOST”部分。

&lt;br/&gt;

## 验证者计划

每个验证者对网络负有两大主要责任：提议新区块和在其本地视图中证明最佳区块，为此制定了验证者计划，以防止产生混乱和简化网络中的消息传递。[此计划由每个验证者利用从当前信标链状态获取的随机性计算而得](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md#validator-assignments)，以免攻击者支配验证者计划。

**提议计划（Proposal Schedule）**：在每个epoch中的每个slot，[都会有一位验证者被分配为提议者](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md#get_beacon_proposer_index)。该验证者遵循分叉选择规则在区块树的本地视图中找到链头，并为该链头生成一个新的子块。验证者将其见到的证明打包到区块中并获取奖励。当进行最终确定性检查时，这些证明将输入到链上FFG机制。

**证明计划（Attestation Schedule）**：每个epoch中的每个slot中的每个验证者都要生成证明。实际上，对于每个epoch，整个验证者集被随机划分为SLOTS_PER_EPOCH个等同大小的委员会，这些委员分别被分配到一个特定的slot，然后生成证明。在生成证明时，验证者将根据其本地视图，以最后一个已证明区块作为来源区块，以链头后的最新检查点作为目标区块。

验证者计划的更多相关信息，请参阅Eth2.0规范中的[验证者指南](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md)。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[详解以太坊2.0信标链]]></title><description><![CDATA[Eth2悄然临近，一文为你揭开信标链、分片链的神秘面纱。]]></description><link>https://www.ethereum.cn/ethos-dev-beacon-chain</link><guid isPermaLink="false">https://www.ethereum.cn/ethos-dev-beacon-chain</guid><pubDate>Tue, 21 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [ethos.dev](https://ethos.dev/beacon-chain/)

作者 | JosephC

&lt;br/&gt;


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VJcnYtX/1-f8a29d7eb1.png&quot;/&gt;&lt;/center&gt;






**还记得你刚窥探到区块链的奥秘时那份喜悦吗？**

**你对信标链有同样的求知欲吗？**

信标链是以太坊2.0系统的核心，然而针对该系统的大部分描述都过于技术化、针对性过强或者不够深入。但是从这篇文章中，读者可以充分了解到信标链中的各个元素和运行机制。为了使读者在理解信标链时事半功倍，文章将通过一些例子，用通俗的语言解释其中的关键细节。

阅读本文之前，我们假设读者对以太坊和比特币有不错的基础知识，并对权益证明 (Proof of Stake) 这一共识机制有一定了解。

现在进入正题，让我们一起深入探讨信标链的各个部分，诸如分片（shards）、质押验证者 (staking validators)、证明 (attestations)、委员会 (committees)、检验点 (checkpoints) 和最终确定性 (finality)。

 &lt;br/&gt;

# 分片：未来蓝图

要想进入信标链的世界，首先我们需要打开分片的大门。在扩容性方面，包括以太坊在内的区块链现在面临的主要问题是：每个节点必须验证和执行每一笔交易。

在计算机科学中，主要有两种扩容方式：
A.**纵向扩容**：即增强节点能力
B.**横向扩容**：即增加节点数量

为了保证去中心化，区块链需要采取横向扩容方式。以太坊2.0 (也即Eth2或Serenity) 其中一个目标就是让节点可以在消费级硬件中运行。**总体来说，Eth2采用的分片机制指的就是对数据库进行横向分割**。

总的来说，每条分片链都拥有一个节点子集，在该链上进行工作。虚拟矿工和验证者被分配到不同的分片中，并且只处理和验证自己所在分片链上的交易。

**以太坊分片上的节点子集是动态的，按照区块顺序处理分片。**

区块链实行分片机制的主要挑战在于如何确保分片安全性。由于验证者分散在不同的分片中，有的节点可能会恶意控制某个分片。

解决该问题的关键在于：

**随机分配 (shuffling) 验证者，每个分片区块都有一个委员会，其中的验证者都经由随机挑选。这种做法的目的是，经数学计算，如果攻击者控制的验证者少于总数的三分之一，其想要攻击单个分片是难以实现的。**

此外，错误性证明（fraud proofs）、数据托管证明 (custody proofs) 和数据可用性检查 (data availability checks) 都是确保安全的重要因素，不过需要单独的讲解才能说清楚。

Eth2 目前的计划是启用**64个分片**。尽管分片和信标链是独立运作的，我们还是会针对整个系统的关键部分进行阐述。

分片向我们揭示了以太坊信标链能做什么，需要什么。我们也能从中了解到为什么在传统的区块链基础上需要增添这些新元素。分片式区块链作为一片新大陆，始终等待着创新者的开垦。

  &lt;br/&gt;

# 以太坊2.0的各个阶段

简单来说，以太坊2.0有三个阶段：
Phase 0 – 信标链
Phase 1 – 分片
Phase 2 – 执行

可以和人体进行类比：
Phase 0 – 心脏
Phase 1 – 四肢
Phase 2 – 大脑

也可以和一支强大的管弦乐队进行类比：
Phase 0 – 指挥
Phase 1 – 乐器
Phase 2 – 乐手

每个阶段都是系统里的重要组成部分，有着不同的特性。[阶段0是以太坊2020年的目标之一](https://ethos.dev/ethereum-2020-roadmap/)。与其他阶段相比，阶段1要更加稳定，而阶段2侧重于执行与代理。

  &lt;br/&gt;

## 时隙 (slots) 和时段 (epochs)

信标链是以太坊2.0的心脏，它令以太坊系统在和谐与共识中有序运行。**每个slot为12秒，每个epoch由32个slots组成，即6.4分钟。**

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/0Kh61pG/2-4b99fa032b.png&quot;/&gt;&lt;/center&gt;








&lt;center&gt;Epoch 0中的前32个slots，创世区块在Slot 0中产生&lt;/center&gt;


[（本文参考了[信标链规范v0.10.1]相关内容）](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/beacon-chain.md)

在每个slot中，在信标链和分片中都可能新增一个区块。我们可以想象，信标链和分片链有序且紧密地排列在一起，**当系统在理想情况下运转时，每12秒就有一个信标（链）区块和64个分片区块产生。**验证者大致按照[这个时间](https://ethresear.ch/t/network-adjusted-timestamps/4187)同步。

我们可以将一个slot看作是区块生成时间，不同的是slots内可以没有区块。信标链和分片的创世区块都在Slot 0中产生。分片将在信标链epoch 0的下一个epoch中开始运作，但无论是分片链还是信标链，都有自己的epoch 0，且包含其创世区块。


## 验证者 (validators)、证明 (attestations) 和信标链

工作量证明（PoW）与矿工密不可分，而在以太坊2.0中，验证者 (validators) 便是权益证明 (PoS) 共识机制中的“虚拟矿工”。验证者这一概念在Eth2共识协议中应用率极高。相关激励机制稍后将在“信标链验证者奖惩制度”这一部分加以讨论。

**区块提议者**（block proposer）是被（伪）随机挑选出来生产区块的验证者。

大多数时候，验证者则充当**证明人**（attesters）的角色，对信标区块和分片区块进行投票。这些投票会记录在信标链上，用以决定信标链和分片链的头部 (heads)。

（随机验证者在每个slot中提议一个区块，
如果其他验证者投票赞成该区块，那么提议验证者将会获得奖励）


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/pjJ7sfy/3-d40e17010f.png&quot;/&gt;&lt;/center&gt;









&lt;center&gt;（Slots可能会丢失区块，当被选中的验证者因为掉线、同步失败等原因而没有提议区块时，就会丢失区块，那么验证者也无法得到奖励）&lt;/center&gt;

&lt;center&gt;某epoch中第28个slot无区块提议&lt;/center&gt;

在每一个epoch中，一个验证者被（伪）随机分配到一个slot和分片中。该验证者参与到他所被分配的分片的共识中，从而他可以对该分片的分片头进行投票。然后验证者将该slot上的分片头和信标区块连接起来。

**一份证明**（attestation）则是验证者的一记投票，投票通过验证者的余额进行加权。除区块之外，证明也会由验证者在系统中进行广播。
 验证者之间也会互相监督，通过举报其他验证者自相矛盾的投票或提议多个区块的行为，从而获得奖励。

信标链里主要记录了验证者的地址、每个验证者的状态、证明和分片的链接。验证者需经由信标链激活，也可以转变在线状态，稍后在“信标链验证者激活和生命周期”中有简单的介绍。

 

## 质押验证者：含义

验证者是虚拟的，并由质押者激活。在工作量证明 (PoW) 共识机制中，成为矿工需要购买挖矿硬件。而在以太坊2.0阶段，用户通过质押ETH来激活和管理验证者。

为了更清楚地理解质押验证者的含义，我们可以将质押者（stakers）和质押金 (stake)，验证者 (validators) 和**余额** (balance) 联系起来。每个验证者拥有的余额最多为32个ETH，不过，质押者可以质押他们所有的ETH。每质押32个ETH，一个验证者就会被激活。

验证者通过验证者客户端进行工作，而客户端借助信标（链）节点来运行。每个信标节点都有跟踪和读取信标链的功能。而每个验证客户端都可以执行信标节点的功能，或者调用信标节点。一个客户端允许一个或以上验证者执行验证职能。

  &lt;br/&gt;

# 交联 (crosslinks)：分片扎根信标链

交联是指将一个信标区块和一个分片区块连接起来，在一个交联中，信标链紧跟分片链头。由于一个信标区块中有64个分片，因此至多可以容纳64个交联。如果在某个slot中，没有验证者为其他63个分片提议区块的话，在这个信标区块上可能只有一个交联。交联计划于eth2的阶段1实现，为的是将分片扎根在信标链中，为分片分叉选择、分片链最终确定性和跨分片通信打好基础。所有分片链全程都与信标链紧密相连。

 

# 委员会 (committees)：介绍

一个委员会由一组验证者组成。为加强安全保障，**每个slot（在信标链和每个分片里）的委员会至少由128位验证者组成**。而一个恶意攻击者能够控制2/3委员会成员的可能性低于[万亿分之一](https://medium.com/@chihchengliang/minimum-committee-size-explained-67047111fa20)。

以太坊信标链这一名词，来源于随机信标（randomness beacon, 向公众提供随机数字）这一概念。信标链在一个伪随机的过程（RANDAO）中执行共识。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/zsR8ML8/4-54c13c6006.png&quot;/&gt;&lt;/center&gt;









&lt;center&gt;（在每个epoch中，RANDAO为每个slot挑选区块提议者，并将验证者打乱，分配至委员会中）&lt;/center&gt;

RANDAO根据验证者余额的权重，选择出区块提议者。在同一个slot中，一个验证者可以同时是区块提议者和委员会成员，但这并不是常态。出现这种情况的概率为1/32，因此我们大概会在每个epoch碰到一次。上图情景中的验证者不到8192个，不然每个slot就得至少包含两个委员会。

关于委员会，本文重点讲解**信标链委员会**：为信标链服务的验证者。一个（信标链）委员会将会被伪随机分配到一个分片上，将其交联到信标区块中。委员会成员不是固定不变的，负责交联的委员会都是逐块更替的。

分片委员会仅进行生产分片区块的工作，此话题留待日后讨论。

许多分片区块由分片链验证者生产，且不需要与信标链联系。然而，如果某个分片想要和其他分片通信，则需要借助信标委员会将其与信标区块进行交联。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/8rmfMqg/5-e9d9179e3e.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;（委员会里的验证者应该要投票选出区块链头）&lt;/center&gt;

上图综合描述了三个slot中发生的情况。在slot1中，有验证者提议出一个区块，该区块得到两个验证者的证明；而委员会A里的一个验证者离线了。Slot 1中的证明和区块被广播到网络上，许多验证者也收到了该信息。在slot 2中，又一个区块被提议出来，而委员会B的一个验证者错过了该信息，于是该验证者认为信标链头是slot 1中的区块。请注意，这个验证者跟slot 1的离线验证者有所不同。**投票证明信标链头的这个过程被称为”LMD GHOST 投票”**。在slot 3中，委员会C上所有的验证者都遵循LMD GHOST分叉选择规则，并独立地投票选出同一个信标头。

**一名验证者在每个epoch中只参与一个委员会**。一般来说，系统中的验证者会超过8192个，所以每个slot中会有一个以上委员会。所有委员会的规模都一样大，至少由128个验证者组成。当系统中的验证者少于4096个时，安全性就会打折扣，因为这意味着单个委员会的验证者将少于128个。

  &lt;br/&gt;

# 委员会 (committees)：关键

**在每个epoch中，验证者们被均匀地分配到各个slot中，然后进一步分配到规模相当的各委员会中。所有验证者都要在自己所在的slot中投票选出信标链头。每个委员会都要在自己所在的slot中尝试交联某个特定的分片。混洗 (shuffling) 算法会适时调整每个slot中委员会的数量，以保证每个委员会都至少有128名验证者。**

举个例子，假定有16384名验证者，其中512名验证者被伪随机分配到slot 1中，另外512名被分配到slot 2中，以此类推。Slot 1中的512名验证者被进一步分成4个委员会，并被伪随机分配到分片中。

假设分片33、55、22、11是这四个委员会所分配到的分片。所有512名验证者都要在slot 1中发起LMD GHOST投票；其中一个委员会的 128 名验证者试图和分片33产生交联；另一个委员会的128名验证者试图与分片55产生交联；剩余两个委员会则试图与分片22和分片11产生交联。

在slot 2中，这个过程会重复一遍，512名验证者同样分成4个委员会，然后被伪随机分配到分片中。假定他们被分配到分片41、20、17、15中。所有的 512名验证者都要在slot 2中投票选出信标链头；同时这几个委员会也试图与分片41、20、17、15产生交联。

这个过程也会在该epoch剩下的slot中再三重复。每个验证者在自己所处的slot中，可以进行投票、证明以及交联。在该epoch结束之后，所有16384名验证者都已发出过投票并且和分片进行过交联。

但是，前面所提到的验证者投票都是针对slot的，而并非针对epoch。打个比方，其区别类似在地方选举和全国大选中进行投票。到目前为止，全体验证者还并未就同一个事物进行投票。

以下部分将进一步阐释检查点 (checkpoints) 和最终确定性 (finality)，描述了各验证者处于分配的slot时，针对epoch发起的投票。也就是说，全体验证者在自己所处的slot中，还要为epoch的检查点投票。

  &lt;br/&gt;

# 信标链检查点 Beacon Chain Checkpoints

检查点 (checkpoints) 就是位于epoch第一个slot里的区块，如果这个slot内没有产生区块，则最近的前一个区块即为检查点。每个epoch都会有一个检查点区块；一个区块可能同时是多个epoch的检查点。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/P12Nyb2/6-6cd2c296f8.jpg&quot;/&gt;&lt;/center&gt;









&lt;center&gt;（包含64个slots的epoch检查点）&lt;/center&gt;

值得注意的是，从slot 65 到slot 128 之间是没有区块的。Epoch 2 的检查点本来应该是位于slot 128 处产生的区块，但因为该slot丢失了，所以epoch 2 的检查点还是slot 64 处产生的区块。Epoch 3 同理，slot 192 处是空块，因此epoch 3的检查点为slot 180处产生的区块。

时段边界区块 (epoch boundary block, EBB) 是一些文献 (比如 [Gasper 论文](https://arxiv.org/abs/2003.03052)，也是上图的来源) 中用到的术语，可以理解为“检查点”(checkpoint) 的同义词。

在发起一次LMD GHOST投票时，验证者也要为最近一个epoch的检查点投票，该检查点叫做 “目标检查点” ( target) 。该投票叫做**Casper FFG投票**，而且还包括对前一个检查点的投票，叫做“来源检查点“ (source)。

上图中，epoch 1中的一个验证者进行投票，将创世区块选为来源检查点，然后推举slot 64 处产生的区块为目标检查点。在epoch 2中，同一个验证者又为相同的检查点投票了。验证者只需为自己所分配到的slot发起LMD GHOST投票，但是每一个epoch上的所有验证者都要为epoch的检查点发起FFG投票。

 

## 绝对多数 supermajority

绝对多数（supermajority）是指**某个投票获得了所有活跃验证者总余额2/3的支持**。 简单来说，假设有 3 个活跃验证者，其中两个的余额是8 ETH，另一个验证者的余额为32 ETH。那么，那个拥有最多余额的验证者所进行的投票才是绝对多数；尽管另外两个验证者的投票可能不一样，但是他们的余额不足以形成绝对多数。

  &lt;br/&gt;

# 最终确定性 Finality

当一个epoch结束之后，如果其检查点得到了2/3余额票数，也就是形成了绝对多数，那么该检查点就被证明 (justified) 了。

如果检查点B已经被证明，且其下一个epoch的检查点也被证明了，那么B就被最终确定了 (finalized)。一般来说，一个检查点会在两个epoch内得以最终确定，即12.8分钟。

通常来说，用户交易发生在一个epoch的中间部分；那么距下一个检查点就还有半个epoch的时间，也就是说，一笔交易经过2.5 个epoch（16 分钟）便可得以最终确定 (finality)。在理想情况下，超过2/3的证明 (attestations) 将会被打包进某个epoch的第22个slot中。**因此，交易得以最终确定的平均时长为14分钟（16+32+22个slot）**。区块确认过程则经由区块证明 (attestations)，到被证明 (justification)，再到最终确定 (finality)。用户可以自己决定是否等到交易最终确定，还是说稍低一点的安全性也足够了。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ZGq3ZcL/6-62298ea3ea.png&quot;/&gt;&lt;/center&gt;







&lt;center&gt;Slot 64处的检查点被证明，slot 32处产生的一个区块得以最终确定&lt;/center&gt;

为简要叙述，下文将假设所有验证者的余额相同。

 

## 信标链头发生了什么

在slot 96处，一个时段边界区块 (EBB) 被提议，且该区块还包含了对epoch 2中检查点的证明。Epoch 2检查点的证明投票现达到了2/3的绝对多数，意味着epoch 2的检查点被证明了。因此，上一个被证明的检查点，即epoch 1检查点，也获得了最终确定性。Slot 32处的区块一旦被最终确定，此前所有区块都会被最终确定。

在对检查点进行最终确定时，对同时可以得到最终确定的区块在数量上并没有限制。所以，虽然最终确定性仅在epoch边界的时候产生，但证明 (attestations) 是逐块累加的，下文的“从创世区块到区块链头会发生什么”提供了另一种解释。

从slot 1到slot 32的信标链区块所包含的所有交联，也会使分片链获得最终确定性。换句话说，当一个信标区块被最终确定时，与该块所交联的分片区块也能被最终确定。交联本身不足以使一个分片区块被最终确定，但是对分片链的分叉选择有所帮助。

 

## 从创世区块到区块链头会发生什么

采取同样的办法，我们可以观察到从创世区块开始的一条故事线：

从slot 1到slot 36，所有的提议者都提议了一个区块，且所有区块都被添加到链上。对于epoch 1的所有区块来说，其检查点 (slot 32 处的区块) 累积了55%的验证者证明。验证者在slot 64处提议区块时，同时也对epoch 1处的检查点发起投票。现在，有70%的验证者都证明了epoch 1的检查点，因此epoch 1检查点被证明 (justified)。Epoch 2结束后，epoch 2 的检查点 (slot 64处的区块) 累积了投票证明但还达不到2/3的多数要求。验证者在Slot 96处提议区块时，同时也对epoch 2处的检查点发起投票，所以这时候，epoch 2 检查点的投票达到了2/3的多数要求，也就是被证明了（justification）。Epoch 2的检查点被证明的同时，epoch 1的检查点以及所有此前的区块被最终确定了。

还有一种可能性，我们只考虑到epoch1。Epoch 2的检查点被提议出来之前，epoch 1的检查点可能已经获得了绝对多数投票。

譬如说，当slot 32和slot 54的区块被提议出来时，slot 32的检查点的证明投票可能已经达到多数要求了。因而在这种情况下，检查点可能在epoch 2之前就已经被证明了。最后一点，检查点可以在离其最近的epoch中被证明，但是至少隔一个epoch才能被最终确认。

有时，一个区块被证明意味着两个甚至多个epoch以前的区块被最终确定。Gasper论文里讨论了这种情况，只有在网络高延迟、网络隔离或遭遇强大攻击等个别情况下，才会出现这种状况。

最终确定性对于分片及以太坊区块上的用户来说是无比重要的，保证用户们的交易安全进行，不被纂改，并且降低了跨分片通信的复杂性。如果没有最终确定性，分片内部和分片之间的交易回滚会具有破坏性，或让分片的利好不复存在。

  &lt;br/&gt;

# 更加深入地了解证明 (attestations)

**一则证明包含一个LMD GHOST投票和一个FFG投票**。理想情况下，每个epoch中所有验证者提交一份证明。每一个证明有32个slot的机会被打包进链，这意味着在单个epoch，一名验证者可能有两份证明被打包上链。

如果验证者在其所分配的slot里发送证明，且该证明被打包上链，那么验证者获得的奖励为最大值；随后打包上链所获得的奖励就会不断减少。为了留给验证者准备的时间，他们被提前一个epoch分配到委员会中。一旦epoch开始，提议者只会被分配到各slot中。尽管如此，[秘密领导人选举](https://ethresear.ch/t/low-overhead-secret-single-leader-election/5994)旨在降低攻击和贿赂提议者的风险。

委员会使得联合签名的技术达到最优化状态，将每一名证明者的签名聚合成一个签名。当验证者在同一个委员会中，并做出了同样的LMD GHOST和FFG投票时，他们的签名就可以被聚合。

  &lt;br/&gt;

# 信标链验证者奖惩机制

1. 证明者奖励（attester rewards）
2. 证明者惩罚（attester penalties）
3. 质押者特有风险（typical downside risk for stakers）
4. 罚没和吹哨者奖励（slashings and whistleblower rewards）
5.  提议者奖励（proposer rewards）
6.  “不作为”惩罚（inactivity penalty）

当验证者所给出的证明 (LMD GHOST或FFG投票) 为其他大部分验证者所同意时，会获得奖励。在eth2的阶段1中，验证者也可以通过与分片产生交联而获取奖励。当区块被最终确定，奖励也随之确定。

相反，如果验证者没有提交证明，或者其投票选出的区块最终没有被确定，那么验证者就会受到惩罚。

在描述相对来说不那么常见的奖惩制度之前，你可能想知道成为一名质押者所面临的风险。作为一名质押者，损失ETH的风险与回报并存。如果一名验证者在一年中能赚取10%的报酬，那么一名工作表现差强人意的 (诚实) 验证者则面临10%的损失。比如说，一名验证者总是不在线，或者其投票的区块总是无法被最终确定，他将会受到惩罚，而罚款数额等于一名验证者投出有效区块所获得的奖励数额。

**罚没的数额最少为0.5个ETH，最多则是一名验证者的所有质押金额**。一名验证者如果受到了罚没 (slashing) 惩罚，其将至少损失余额的1/32，且会被停止继续参与工作。该名验证者所受惩罚的程度，与连续8192个epoch都离线的验证者所受的惩罚相当。基于同时受到罚没惩罚的验证者的数量，协议还会对验证者做出额外的惩罚。施以额外惩罚的基本公式是：“validator_balance*3*fraction_of_validators_slashed”。也就是说，如果1/3的验证者同时受到了罚没，他们会损失所有余额。而对罚没行为举报成功的验证者，则可以获取吹哨者奖励。

区块一旦得以最终确定，区块提议者便可以获得相当可观的奖励。一直在线且妥善完成工作的验证者，他们提议区块所能获得的奖励将提高1/8。如果发生罚没行为，提议者还可以将罚没证据打包进区块，从而获得少量报酬。在eth2阶段0，所有吹哨者的奖励实际上都归于提议者。

以太坊2.0这个系统里有许多机制，通过了解其作用，便可以更好地了解这些机制。这套奖惩制度里，最后一项便是“不作为”惩罚。

简单来说，如果有超过4个epoch没有获得最终确定性那么所有验证者都要受到翻倍的“不作为”惩罚，直到下一个检查点被最终确定。“不作为”惩罚的作用在于：如果50%的验证者掉线了，在21天后会再次重新对区块进行最终确定。

 

### 罚没 Slashing

如果出现以下这三种情况，要对验证者进行罚没惩罚：双重提议、FFG双重投票和FFG环绕投票。LMD GHOST投票不会受到罚没惩罚。

**双重提议 (double proposal)** 指一名区块提议者在他所分配到的slot里提议一个以上的区块。

**双重投票 (double vote)** 指一名验证者针对同一个目标检查点 (target)，不同的源检查点 (source) 发起的两次FFG投票。

**环绕投票 (surround vote)** 指一名验证者发起的FFG投票环绕之前的FFG投票，或是被之前的FFG投票所环绕。

下面有两个例子，背景是一名验证者在epoch 5内，为slot 32处的源检查点和slot 128处的目标检查点发起了一次FFG投票：

- 在epoch 6内，为slot 64处的源检查点和slot 96处的目标检查点发起的FFG投票，**被其在epoch 5中的投票环绕**。
- 在epoch 6内，为slot 0处的源检查点和slot 160处的目标检查点发起的FFG投票，则**环绕了其在epoch 5中的FFG投票**。

在epoch 6内，针对slot 128目标检查点的FFG投票是双重投票，除非slot 32为源检查点，否则要受到罚没。相同的FFG投票不会遭到罚没。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/KG6dK5d/7-56467cb5fb.png&quot;/&gt;&lt;/center&gt;









针对同一个源检查点的两次FFG投票，不用受到罚没。这对系统的活性很重要。比如说，如果有两个分叉，每个分叉占有验证者50%的余额，那么协议需要鼓励 (而非惩罚) 验证者通过对同一个源检查点和一个不同的目标检查点发起投票，从而在分叉间转换。验证者可以在分叉之间安全地来回转换，并尝试达到2/3的绝对多数，以避免陷入僵局。

一名吹哨验证者提出举报时，需要打包冲突投票的相关信息来证明该验证者应受到罚没。要在一个庞大的记录系统里，有效地找出冲突投票，是对算法和数据结构的一项巨大挑战。[“罚没检测工程挑战”](https://hackmd.io/nuLL7lHeQtSYV2G6g-ry0A)正在寻求参与者。

验证者完全有能力使自己避免被罚没：只需要记住其对哪些证明和提议进行了签名。一名诚实的验证者不会因为其他验证者的行为而受到罚没。只要验证者没有对冲突的证明或提议进行投票，就不会受到罚没。

一个验证者客户端可以运行多个信标节点，从而延长系统的正常运行时间、增强信任和DoS攻击抵御。在运行节点或是运行备份验证者客户端时，用户需要注意，验证者有无对冲突的信息进行签名。

  &lt;br/&gt;

# 信标链验证者激活和生命周期

每一位验证者需要32个ETH才能激活。一个用户在以太坊主网的存款合约 (deposit contract) 里质押32个ETH，就会激活一位验证者。

**当验证者的余额低于16个ETH时，信标链就会停止这些验证者的工作**。质押者可以将剩余的验证者余额提出来，但目前无法在eth2的阶段中实现。

**在2048个epoch，将近9天时间的工作之后，验证者还可以自愿选择退出**。退出时，质押者需要等待4个epoch才能撤出其质押金在这4个epoch之内，验证者仍然有可能面临举报和罚没。一名诚实验证者大概27小时之后便可以提出其余额。然而，如果一名验证者受到了罚没惩罚，则必须等8192个epoch (大约36天) 之后才能够提出余额。

[ “以太坊2.0阶段0验证者生命周期”](https://notes.ethereum.org/7CFxjwMgQSWOHIxLgJP2Bw#A-note-on-Ethereum-20-phase-0-validator-lifecycle)中有更详细的技术说明，内含以下示意图：













为了避免短时间内对验证者造成巨大的变动，存在一些机制对单位epoch上验证者激活和退出的数量进行限制。其作用之一在于使得很难在短时间内激活大量验证者对系统进行攻击。

信标链深度应用了有效余额 (effective balances) 的概念，这就使得验证者的余额变动范围更加小，以达到技术的最优化。

  &lt;br/&gt;

# 总结

在每个epoch，验证者们被均匀地分配到各个slot中，然后进一步分配到规模相当的各委员会中。各个验证者同时只能位于一个slot和一个委员会中。

#### **总结几点：**

1. **同一个epoch里的所有验证者尝试最终确定同一个检查点：这是FFG投票；**
2. **所有验证者被分配到一个slot中，尝试投票选出同一个信标链头：这是LMD GHOST投票；**
3. **所有验证者被分配到一个委员会中，尝试交联某个分片。**

采取最优行为的验证者获得的奖励最多。

激活信标链至少需要16,384个创世验证者。验证者的数量可能会因为罚没或者自动退出而减少，也会随质押者的激活而增加。当系统升级到eth2阶段1或以上时，将需要更多的验证者工作。信标链需要至少262,144个验证者 (质押金额将超过800万ETH) 来生产区块，每个区块包含64条交联。

历史上从来没有过为去中心化系统和应用搭建的扩容平台。如果你受到了启发，想要更深入地参与，“[ETH2.0规范](https://github.com/ethereum/eth2.0-specs)”里有权威的参考。其中包含信标链规范，还有其他关键资源以及赏金的相关问题。

目前来说，[点对点网络层](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/p2p-interface.md)最亟待完善。来和我们一起参与这项[挑战](https://notes.ethereum.org/@protolambda/eth2_start)吧！更多技术细节请访问ethresear.ch或者Ethereum Magician’s forum，和我们一起创造历史吧！

感谢 Danny Ryan 对多个部分的审校和反馈，感谢 Momo Araki 的图表以及提供咨询的各位。标题图由 Hsiao-Wei Wang 的原作修改而来。如果读者朋友觉得本文对你有所帮助，请不吝分享！🙂



 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/4/17）]]></title><description><![CDATA[Topaz测试网如约而至，调试工作继续进行。]]></description><link>https://www.ethereum.cn/wnie2-2020-4-20</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-4-20</guid><pubDate>Sun, 19 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What‘s New in Eth2](https://notes.ethereum.org/@ChihChengLiang/Sk8Zs--CQ/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200403?type=book)



###  &lt;br/&gt;

# 阶段0：信标链



自上一期更新发布以来，规范没有发生改动，**目前v0.11.1作为联合测试网的基础。**

Protolambda创建了[eth2fastspec](https://github.com/protolambda/eth2fastspec)，针对正式规范的简单Python实现进行了一系列优化。优化后版本对客户端实现者来说是十分有用的资源。

####  

## 测试和证明



自从有了稳定的规范，接下来的工作重点就是测试和调试。

Sigma Prime已签约为所有客户端实现设计差异化模糊测试 (fuzzing test)。此处是最新的[信标模糊测试更新](https://blog.sigmaprime.io/beacon-fuzz-03.html)。该测试被证明有效：更新发布之后[另一个bug](https://twitter.com/ethnimbus/status/1250871507624091648)被发现。

锦囊中的另一个强大武器是形式验证 (formal verification)。很高兴能够与大家分享由我PegaSys同事组成的一个团队已经开始对Eth2.0规范进行形式验证，使用了一种叫做[Dafny](https://en.wikipedia.org/wiki/Dafny)的证明语言。从SSZ (简单序列化编码) 和Merkleisation开始，他们的工作已经持续了几周，最近他们开放了[GitHub库](https://github.com/PegaSysEng/eth2.0-dafny)。已经发现了[一](https://github.com/ethereum/py-ssz/issues/109)[两](https://github.com/ethereum/eth2.0-specs/issues/1695)个小问题。

代码审计是保障完整性的第三种方式。Lodestar最近通过了一项[审核](https://medium.com/chainsafe-systems/lodestar-initial-audit-passes-with-flying-colours-397d0ecaee3b)，涵盖了其工具库的几个关键组件。Greg对此[感到非常兴奋](https://twitter.com/gregthegreek/status/1250496866443309058)。[此处](https://leastauthority.com/static/publications/LeastAuthority-ChainSafe-Utility-Libraries-Final-Audit-Report.pdf)是审核报告。我发现阅读审核报告是我生活中的一大乐趣，这会不会有点奇怪？🤷‍♂️

####  

## 测试网



经过三个月的运行，Prysmatic Labs[关闭](https://twitter.com/terencechain/status/1250529598506274817)了极为成功的Sapphire信标链测试网。但他们**已经重新上线了[Topaz测试网](https://medium.com/prysmatic-labs/introducing-topaz-testnet-8e8a4e00a700)**，该测试网在UTC时间周五晚上/周六早上[成功](https://twitter.com/terencechain/status/1251310431508893697)启动。热烈祝贺Prysmatic团队！👋

点击[此处](https://prylabs.net/)可以加入Topaz测试网（只需测试网ETH）！也可以在[EtherChain](https://beaconcha.in/)和[EtherScan](https://beacon.etherscan.io/)上跟进该测试网进展，Etherchain有一些[图表类的展示](https://twitter.com/etherchain_org/status/1248480055396683777)。

**Lighthouse团队也将发布他们下一版本的公共测试网**，请留意。我会转发我得到的消息。🐦

请注意，Prysmatic的Topaz测试网和新的Lighthouse测试网仍然是单一客户端测试网，而非联合测试网。**联合测试网可能在未来几周推出。**

联合测试网的进展主要由Afri协调，他创建了一个用以跟踪进展的库：[Schlesi ETH 2.0 Testnet](https://github.com/goerli/schlesi/)。

我认为我们都准备好了。我负责的客户端[Teku](https://github.com/pegasyseng/teku)已经能够与[Lighthouse测试网](https://twitter.com/benjaminion_xyz/status/1247631816498053120)以及之前的Prysm [Sapphire测试网](https://twitter.com/benjaminion_xyz/status/1232434296578658304)进行同步。（顺便一提，我们已经开始[为Teku创建文档](https://docs.teku.pegasys.tech/en/latest/)了）



###   &lt;br/&gt;

# Eth2学习资源

[Eth2.0中的Casper FFG](https://www.adiasg.me/2020/04/09/casper-ffg-in-eth2-0.html)。Aditya Asgaonkar的又一篇出色文章。在[上一篇文章](https://www.adiasg.me/2020/03/31/casper-ffg-explainer.html)中，他解释了Casper FFG共识协议的基础。在本文中，他描述了如何在Eth2中实现Casper FFG。

[以太坊2.0 Staking – 验证者奖惩机制](https://www.youtube.com/watch?v=h-9fKIGOvFU)。Kierin Mulholland做了一个讲解视频。主要内容来自ConsenSys Codefi的[相关文章](https://codefi.consensys.net/blog/rewards-and-penalties-on-ethereum-20-phase-0)。😀

我们总是将重点放在eth2的技术细节上，但这篇分析eth2潜在经济影响的文章也值得一读：[ETH2.0将变革经济的七大理由](https://medium.com/@adamscochran/7-reasons-eth2-0-will-create-the-next-economic-shift-f689d2f1ec24)。

CryptoBulls上有一篇准确的[Eth2初学者全面指南](https://cryptobulls.info/what-is-ethereum-2-0-a-comprehensive-beginners-guide)，我觉得将交付阶段与人体进行类比很有意思。但“以太坊2.0会产生新代币吗？”部分的答案是完全错误的，所以要当心。



###  &lt;br/&gt; 

# 研究工作



Danny Ryan：[Eth1 + Eth2客户端之间的关系](https://ethresear.ch/t/eth1-eth2-client-relationship/7248?u=benjaminion)。既然信标链已经箭在弦上，那么将当前Eth1以太坊主网迁移到Eth2的工作也在如火如荼地展开。Danny在本文中阐释了Eth2和Eth1节点之间的互操作。

如何加速将Eth1与Eth2进行合并已经成为了新的工作重点，ConsenSys Quilt团队目前的工作已经从纯粹的Eth2执行环境转变为以太坊[账户抽象 (account abstraction)](https://hackmd.io/@villanuevawill/ryw4LkG_U) 以为执行环境做好铺垫。帐户抽象问题可以追溯到[以太坊的起源](https://blog.ethereum.org/2015/07/05/on-abstraction/)。很高兴有希望看到它最终实现。

在文章[“通过EE级网络余额传输的用户级ETH异步传输”](https://ethresear.ch/t/asynchronous-user-level-eth-transfers-over-netted-balance-approach-for-ee-level-eth-transfers/7246?u=benjaminion)中，PegaSys的Raghavendra提出了一种实现跨分片传输ETH的方法。他延伸了[“通过EE网络传输的原子异步跨分片用户级ETH传输”](https://ethresear.ch/t/atomic-asynchronous-cross-shard-user-level-eth-transfers-over-netted-ee-transfers/7277/?u=benjaminion)，该方案将传输方式原子化，从而对协议进行了优化。这个想法十分精巧，Raghavendra还制作了[阐释视频](https://www.youtube.com/watch?v=abdY4yOThLc)，我希望能够多多看到这类资源。

Prysmatic Labs的Victor Farazdagi写了一篇有关[证明聚合启发式方法](https://ethresear.ch/t/attestation-aggregation-heuristics/7265?u=benjaminion)的文章。为了最大化协议效率和验证者奖励，我们希望尽可能密集地打包来自验证者的证明 (投票)。总的来看这算是一个难题：尽管利用[Handel](https://github.com/ConsenSys/handel)这类叠加协议可以提供相当直接的解决办法，但我们目前不予采用，因此需要Victor提出的这类启发式方法。

最后，一些较早的主题最近有所推进：

- [“用于状态存储的多层hashmap”](https://ethresear.ch/t/multi-layer-hashmaps-for-state-storage/7211/3?u=benjaminion)进一步讨论和阐明。
- [使用多项式承诺的非交互式托管证明](https://ethresear.ch/t/a-non-interactive-proof-of-custody-using-polynomial-commitments/5692/4?u=benjaminion)。Dankrad提供了一个简化版。
- [累加器、UTXO区块链的扩展性和数据可用性](https://ethresear.ch/t/accumulators-scalability-of-utxo-blockchains-and-data-availability/176/28?u=benjaminion)。建议使用半素数 (两个素数的乘积)，而不在n-party设置中使用素数。



###   &lt;br/&gt;

# 常规会议



## 实现者会议



第37次会议于4月9日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/141)；
- [会议视频](https://www.youtube.com/watch?v=aEJ9Pw7yFYM&amp;feature=youtu.be&amp;t=58)；
- 我的[速记](https://hackmd.io/@benjaminion/HJ-2vo2DU)以及[完整笔记](https://github.com/ethereum/eth2.0-pm/blob/b347b2dce9f4a9de8faa024eb9307244da570e8f/eth2.0-implementers-calls/call_037.md)。

此次电话会议出现的一个新的重要话题是关于客户端之间的API标准化。讨论由Infura主导，Infura一直认为缺乏标准化是Eth1一个巨大的痛点。

标准化Eth2信标节点API的一个显而易见的好处是，信标链浏览器等工具和应用程序可以在不同的客户端实现之间轻松进行切换。另一个好处则没有那么明显，**验证者可以与不同类型的信标节点通信**。例如，Teku验证者连接到Lighthouse信标节点，或者将Nimbus验证者连接到Prysm信标节点。请注意，我们需要较长的正常运行时间，这有益于故障转移和避免冗余。无论如何，我有十足的把握我们可以实现前者，或许后者也有希望。

API对话首次出现在[会议议程](https://github.com/ethereum/eth2.0-pm/issues/141#issuecomment-611072786)中，并将在下面三个主题中持续进行讨论：

- [API format redux](https://github.com/ethereum/eth2.0-APIs/issues/24)
- [BeaconNode APIs](https://github.com/ethereum/eth2.0-APIs/issues/25)
- [API conversions and CI](https://github.com/ethereum/eth2.0-APIs/issues/26)

目前[计划](https://github.com/ethereum/eth2.0-pm/issues/143)4月20日进行下一次会议，进一步互动讨论。这个主题几乎与2019年的序列化辩论一样令人兴奋。



###   &lt;br/&gt;

# 其他新闻



✨ [Nimbus](https://our.status.im/nimbus-update-april-10/)的最新开发进展

✨ 在[ethereum.org](https://ethereum.org/)上创建专门[以太坊2.0页面](https://github.com/ethereum/ethereum-org-website/issues/878)的讨论。随时参与。

✨ Mikerah[想和大家谈谈](https://twitter.com/badcryptobitch/status/1251281250427510786)验证者隐私问题

✨ Ethereum on ARM使得[Teku在ARM上运行](https://twitter.com/EthereumOnARM/status/1247845575086821376)

✨ 我需要进一步研究 [Rocket Pool](https://www.rocketpool.net/)。他们似乎非常热衷于 Eth2 staking，并且长期表示支持PoS。他们的时刻终于到来，正在[展示](https://medium.com/rocket-pool/development-update-10th-april-72db7824c8e0)一些不错的成果。



###  &lt;br/&gt; 

# 最后……



感谢在最近一轮[Gitcoin Grant](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification)中支持过我的每一个人！非常感谢！

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/4/3）]]></title><description><![CDATA[Eth2研究工作任重道远。]]></description><link>https://www.ethereum.cn/wnie2-2020-4-3</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-4-3</guid><pubDate>Tue, 07 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What‘s New in Eth2](https://notes.ethereum.org/@ChihChengLiang/Sk8Zs--CQ/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2Fwnie2_200403?type=book)


 

非常感谢大家在Gitcoin上为[我的项目](https://gitcoin.co/grants/551/the-ethereum-20-annotated-specification)进行捐赠！❤️

这一轮CLR配对将于周二结束。如果大家还想进行捐赠，目前每个DAI的贡献都将对应22 DAI的匹配。😁

###  &lt;br/&gt;

# 精选文章

本周力荐是Joseph Chow基于Vitalik几周前发布的非官方路线图创作的阐释性文章：[《以太坊2.0路线图与展望》](https://ethos.dev/ethereum-2020-roadmap/)。

当然了，还有Danny Ryan最新的[Eth2更新速览（十）](https://news.ethereum.cn/eth2-quick-update-no-10/)。

如果您还未进行[ETHGlobal开发者调查问卷](https://ethglobal.typeform.com/to/RxHlK8)，现在[仍然可以参与](https://twitter.com/ETHGlobal/status/1243205570208751617)！

###  &lt;br/&gt; 

# 阶段0：信标链

上周Danny Ryan发布了主要规范的新版本[Crypto Bluebird](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.4.1)，这引起了部分开发者轻微的恐慌。无论如何，这将经受时间的考验，其中的珍贵之处在大浪淘尽之后终会显露。

与此同时，规范版本[0.11.0](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.1)已经发布，其中修复了状态转换的几个bug，并进行了一些网络优化。此规范版本是联合测试网的目标 (对此我们一直在重申，现实的确如此)。

Empireventures发表了一份针对Eth2用户体验的十分有趣且颇有深度的[报告](https://medium.com/empireventures/eth2uxreport-858c73ca1f53)，其中包含许多不错的背景材料以及具体结果和建议。很明显，要如何在Eth2上进行质押 (staking) 还有许多尚待明确之处。我希望在接下来的几个月中，随着测试网的完善，随着我们朝Eth2的发布前进，这些问题都将拨云见日。

关于这一点，上周我被问及是否可以对几个客户端实现进行一些比较 (报告中也提到对此有需求)。但我还没有这个计划，至少目前还没有。一方面，作为其中一个客户端的产品负责人，我并非不偏不倚，因此我一直试图在多个客户端之间持中性立场。另一个有趣的原因是，我们很快将推出多客户端测试网，到时各个客户端就能受到公平公正的评估。

#### 

## 测试

[Eth2阶段0赏金计划](https://notes.ethereum.org/@djrtwo/phase0-bounty)又上线了！本次提供大量现金奖励，还不来找bug吗？祝贺已经出现的三位赏金得主！🎉

为了方便寻找bug，Eth2规范现已登陆Python软件包索引 [pypi](https://pypi.org/project/eth2spec/) ，执行 [pip install eth2spec](https://twitter.com/protolambda/status/1243916242643226631)即可。

由Least Authority完成的[阶段0协议审计](https://leastauthority.com/blog/ethereum-2-0-specifications/)目前可以查看完全报告。在我看来没有什么特别出乎意料之处：没有发现状态转换问题，只出现了一些网络协议方面的挑战，其中包括我们一直在致力于解决的问题，例如单一领导人秘密选举 (目前没有最佳解决方案)。

#### 

## 测试网

目前Sapphire测试网已经顺利运行了三个月，Prysmatic Labs计划基于最新的协议版本[重启测试网](https://medium.com/prysmatic-labs/eth-2-0-dev-update-47-multiclient-target-testnet-restart-security-audit-rfp-9c6cf095802c)。

###   &lt;br/&gt;

# 阶段1.5：Eth1x64

最近几周出现了一项新计划：[Eth1x64](https://ethresear.ch/t/the-eth1x64-experiment/7195?u=benjaminion)。主要内容是在Eth2全部64个分片上安装Eth1虚拟机 (可能是无状态版虚拟机？)。之前我[提出](https://news.ethereum.cn/wnie2-2020-3-20/)了一些对于这种做法的顾虑。自那以后我进行了反复的思忖，也和他人进行了交流，但我仍然对此持疑。

确实，从工程角度和 DApp 开发者的角度来看，该计划清晰可行。但我的顾虑正出自于Alex在其[提案](https://ethresear.ch/t/the-eth1x64-experiment/7195?u=benjaminion)中提及的：

有史以来我们一直避免对EVM实施大幅改动。这一点必须纳入考虑，并且必须要尝试使得改动最小化。

如果仅将Eth1填充到Eth2中，恐怕在未来几年我们都将难以创新。一切都会陷入僵局，就像现在的Eth1一样。按照[Vitalik的路线图](https://benjaminion.xyz/images/Eth2FlowChart_200318.jpg)，我们将无法完成下半部分。

我们有机会使得Eth2成为真正意义上的划时代产品，而我的顾虑主要在涸泽而渔，眼前过于务实却舍弃了更为远大的目标。

###   &lt;br/&gt;

# 阐释性文章

本部分将成为wnie2的常规部分。

针对Eth2如何就网络状态达成共识，以下文章值得一读：

- Carl Beekhuizen：[《Eth2 Staking系列#3：分片共识》](https://news.ethereum.cn/eth2-staking-sharding-consensus/)
- Aditya Asgaonkar：[解读Casper FFG](https://www.adiasg.me/2020/03/31/casper-ffg-explainer.html)

Joseph Chow 的[《以太坊2.0路线图和展望》](https://ethos.dev/ethereum-2020-roadmap/)在开头已经提及，针对Vitalik几周前发布的非官方路线图进行了回顾。

Alex Stokes在[《接下来六个月Eth2对Eth1的需求》](https://medium.com/@ralexstokes/what-eth2-needs-from-eth1-over-the-next-six-months-86b01863746)中针对实施EIP 2537提案给出了不错的方案。该EIP 提出在Eth1中实现BLS12-381椭圆曲线运运算预编译。Eth2能够从中获得的主要益处是能够更彻底地检查验证者存款 (deposits)，并且使得Eth1成为Eth2的一个轻客户端。

###   &lt;br/&gt;

# 研究工作

针对状态存储的全新[多项式承诺 (polynomial commitments)](https://ethresear.ch/t/using-polynomial-commitments-to-replace-state-roots/7095?u=benjaminion) 最近是[大热](https://twitter.com/VitalikButerin/status/1237736821200695297)话题。 Dankrad提出了[面向状态的基于Hashmap的多项式承诺提案](https://ethresear.ch/t/hashmap-based-polynomial-commitments-for-state/7186?u=benjaminion)，以及[面向状态存储的多层Hashmap提案](https://ethresear.ch/t/multi-layer-hashmaps-for-state-storage/7211?u=benjaminion)，该提案在Vitalik 的提案基础上[进行了改进](https://ethresear.ch/t/multi-layer-hashmaps-for-state-storage/7211/2?u=benjaminion)。上周，Dankrad 和 Vitalik 都现身[ ZK 学习俱乐部](https://www.youtube.com/watch?v=Fti600ag_I8)中对这些主题进行了讨论。

以下内容似乎也与多项式承诺有关：[加密货币发烧友的双线性累加器](https://decentralizedthoughts.github.io/2020-04-02-bilinear-accumulators-for-cryptocurrency/)、[Alin Tomescu的去中心化思考](https://decentralizedthoughts.github.io/)。

此处是一份[针对缩减区块见证大小的提案的调查](https://ethresear.ch/t/survey-of-proposals-to-reduce-block-witness-size/7173?u=benjaminion)，具有参考意义，因为这就是我们尝试利用多项式承诺解决的问题。

Mikerah回来了！👋 她想和大家[谈谈验证者隐私](https://twitter.com/badcryptobitch/status/1245069774754807814)。她还提出了一项新提案，[有关使用混合网络架构加强Eth2.0验证者隐私](https://ethresear.ch/t/exploring-a-hybrid-networking-architecture-for-improved-validator-privacy-in-eth2-0/7207?u=benjaminion)。

最后是有关去信任化质押池 (staking pools) 的[概览](https://ethresear.ch/t/trustless-staking-pools-with-a-consensus-layer-and-slashed-pool-participant-replacement/7198?u=benjaminion)，内容包含共识层和罚没池参与者的替换。Eth2的设计（例如 BLS 签名）始终将实现去信任化质押池作为目标之一。

  &lt;br/&gt;

# 常规会议

## 实现者

第36次会议于3月26日进行。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/135)；
- [会议视频](https://www.youtube.com/watch?v=Vn1oHH55yPk&amp;feature=youtu.be&amp;t=254)；
- 我的[会议速记](https://hackmd.io/@benjaminion/BkdbG45II)。更完整的[笔记草稿](https://github.com/ethereum/eth2.0-pm/blob/13c39def022c21e203d98daeb97dbf80f57328aa/eth2.0-implementers-calls/Call_036.md)在[PR](https://github.com/ethereum/eth2.0-pm/pull/139)可见。

其中有趣的部分是项目管理方向。首先，Afri Schoeden自愿参与联合测试网协调，并开始积极着手准备。其次，有关Eth1.x 和 Eth2的许多话题现已整合到[一个Discord服务器](https://discordapp.com/login?redirect_to=%2Fchannels%2F595666850260713488)上，以促进主题融汇和协作。([邀请链接](https://discordapp.com/invite/zyZXUN7))


## 网络 (Networking)

第4次Networking会议于3月25日进行，此处是我的[相关笔记](https://hackmd.io/@benjaminion/rkEn7C_88)。

## 无状态以太坊 (Eth 1.x)

Griffin Ichiba Hotchkiss最新的 Eth1.x 博客文章[《无状态技术树更新》](https://news.ethereum.cn/eth1x-stateless-tech-tree/)基于最近的进展和计划，对无状态以太坊研发工作的各部分进行了重新整合。

此处是3月25日无状态以太坊第5次电话会议的[摘要](https://ethresear.ch/t/stateless-ethereum-march-25th-call-digest/7202?u=benjaminion)，还有一份[转录文本](https://notes.ethereum.org/@afhGjrKfTKmksTOtqhB9RQ/HkIjiJKUL)（我感觉是机器转录）。

###   &lt;br/&gt;

# 其他新闻

⚡ [Nimbus](https://our.status.im/nimbus-march-update/), [Lighthouse](https://lighthouse.sigmaprime.io/update-23.html)和[Prysm客户端](https://medium.com/prysmatic-labs/eth-2-0-dev-update-47-multiclient-target-testnet-restart-security-audit-rfp-9c6cf095802c)进展更新

⚡ 上次我们提到了Gitcoin的Eth2 AMA，目前已经以[文章形式](https://gitcoin.co/blog/eth-2-0-qa-with-key-developers/)发布

⚡ Prysmatic Labs针对Prysm客户端代码库的[安全审计](https://medium.com/prysmatic-labs/prysm-security-rfp-4dee848736c1)发布了一份RFP

⚡ 去年，Justin Drake与NEAR协议的Alex Skidanov进行了一次[白板讨论](https://www.youtube.com/watch?v=S262StTwkmo&amp;t=13s)。[在本集中](https://www.youtube.com/watch?v=8xpOUqdoyp0)主角角色互换，Alex向Justin解释了 NEAR 的工作原理以及它与Eth2的区别。Eth2和NEAR几乎是并行发展的，随之而来的是耐人寻味的共同点和差异性

⚡ [Ethereum on ARM](https://twitter.com/EthereumOnARM) 运行[在ARM 64上运行](https://twitter.com/EthereumOnARM/status/1244211895424385026)了一个Prysm节点。(他们还[在 NanoPC-T4 上运行](https://twitter.com/EthereumOnARM/status/1245652892079386625)了一个 Besu Eth1客户端，太酷了！)

  &lt;br/&gt;

# 最后的最后

我应该已经提到过Gitcoin Grants了吧？😇</content:encoded></item><item><title><![CDATA[Eth 1.x：无状态以太坊路线图更新]]></title><description><![CDATA[巴黎Eth1.x峰会之后，无状态以太坊路线图有所更新。]]></description><link>https://www.ethereum.cn/eth1x-stateless-tech-tree</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-stateless-tech-tree</guid><pubDate>Fri, 03 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/04/02/eth1x-stateless-tech-tree/)



 

&lt;br/&gt;


![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)
&lt;br/&gt;





很抱歉这篇文章发布得晚了些。最近，我的生活中不可避免地出现了一些干扰，读者朋友应该也有类似的经历。我祝愿大家能排除万难，也恳请大家在接下来的几个月中保留最大程度的同理心，尽己所能援助社区中面临危难的同伴。

话虽如此，还是让我们进入无状态以太坊主题，谈谈技术树的变动。

单从图形上来看，这棵树已被完全重塑，但如果将其与[原始版本](https://news.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree/)进行比较，则会注意到很多内容其实是相同的。为了保证内容完整性并避免混淆，虽然之前已经作过解释，但我们仍然会仔细过一遍图中的所有内容。以下是更新之后的无状态技术树：




![1.x14.png](https://i.ibb.co/yQwvFTb/1-x14-a1022e51ef.png)


粉色的每个主要里程碑代表一个大致类别，必须在进行下一步之前“解决”。此处有意进行了模糊化处理，不代表特定EIP或集成功能，尽管其中一些主题最终可能会归于这类形式。

较小的紫色元素则是更具体的从属部分，是“解锁”主要里程碑的必需条件。紫色元素虽然是必需的，但并不一定需要被接受或实现。例如，经过充分研究我们可能会发现代码分块 (code merkleization) 并不能充分缩减见证的大小，实现效果或许并不匹配我们所投入的工作量；然后我们可以将其视为“已完成”，因为不会再做进一步研究。

大家可能已经猜到了，绿色的项目是“支线任务”(side quests)，从理论上来看可能对无状态以太坊有所帮助，但不能过多占用研究人员有限的时间和精力。在以太坊工作进程中，可能还会出现更多的支线，有需要的话我会继续更新科技树。

此外，黄色元素属于工具类。这些尚未创建的软件工具将有助于验证假设、测试实现并且提高工作效率。理想情况下，这些工具的质量要足够高，并且要得到合理的维护，才足以支持无状态以太坊之外的更大的开发者生态系统。

&lt;br/&gt;

# 同步协议替代方案

巴黎Eth1x峰会的重要共识之一是同步将成为无状态以太坊的首个里程碑。我们必须使得新节点无需依赖网络原语GetNodeData即可获取当前状态树。除非我们找到该原语的可靠替代项（beam sync和fast sync均基于此），否则将成为无状态工作的阻碍，甚至可能会起反作用。

这里有必要稍微解释一下为什么会出现这种问题。如果不具备以太坊状态的基础认识，建议阅读本系列的[另一篇同主题文章](https://news.ethereum.cn/eth1x-files-state-of-stateless-ethereum/)。

让我们先了解一下术语。在此处的语境中，“网络原语”(network primitive) 一词并没有特殊的技术性定义，只是对“以太坊网络通信的基本语法”的一种流行叫法。想象一个客户端问道“哈希为0xfoo的节点的数据是什么？”那么节点可以回答说“是0xbeef”。

在大多数情况下，其响应将额外包含状态树中子节点哈希，因为之后可能会以同样的方式对子节点进行询问。这种游戏将一直持续到请求者满意为止，通常会分别请求当前状态树中的约4亿个节点。

即使按照这种方式，也可以迅速进行同步，毕竟客户端可以执行多任务，并且可以同时向多个全节点请求状态的不同部分。

然而，原语的工作方式存在一个根本问题：“获取方”(leechers) 必须按照自己的条件进行，而他们只能从“资源方”(seeders, 即具备完整状态的全节点) 处获得所需的状态。

目前的运行方式就是基于这种不对称关系，但由于两个关联条件，网络仍然可以正常运行：首先，有足够的全节点根据请求主动提供状态。其次，任何请求状态的节点最终都会成为全节点，因此对于状态的需求是自限性的 (self-limiting)。

现在我们就明白了为什么无状态以太坊会出现状态同步问题：在无状态范例中，不保留请求到的状态数据的节点，会无限地请求数据。如果运行无状态节点比全节点要轻松许多（确实如此），那么会出现无状态节点增长速度快于全节点的局面，最终导致状态无法在网络中正常传播。这是我们不愿看到的。

在这里我们不会继续深入细节，推荐大家阅读[Piper关于该问题的详细文章](https://ethresear.ch/t/the-data-availability-problem-under-stateless-ethereum/6973)。接下来我们便可以继续讨论新的解决方案，这些方案殊途同归，目的皆是为了优化同步协议，能够在一定程度上减轻问题严重性甚至是完全解决同步问题。以下是最有希望的三种替代方案：

- **以太坊快照协议**  (Ethereum Snapshot Protocol, SNAP)。这个我们之前已经讨论过，我将称其为“状态切片排布”(state tiling)。最近，Peter在devp2p库中[对此进行了更详细的描述](https://github.com/ethereum/devp2p/blob/8679dbd339ad0dcad6929b37be0e7eede7b3d1cd/caps/snap.md)。

Snap将状态分割为多个大数据块和证明 (约一万个树节点)，并且可以将其重新拼凑为完整状态。同步节点会从多个节点请求状态的子部分，并且在短时间内从大约100个不同的相似状态根中得出几近有效的状态图片。最后，客户端获得有效状态后，通过切换回getNodeData将数据块“拼凑”起来。

- **火皇后同步**  (Fire Queen’s Sync)。这个主题在最初的技术树文章中讨论过，除了名称之外 ([“firehose”](https://notes.ethereum.org/0v_W4E8lROazqYymPAF7Ew)和[“Red Queen’s sync”](https://github.com/yperbasis/silkworm/blob/master/doc/sync_protocol_v1.pdf)的结合)，并没有太大变化。这类建议十分相似，都是针对状态的各个方面使用一组不同的原语替代getNodeData。

- **旋转木马**  (Merry-go-round) 同步。这是一个新的同步概念，[在ethresear.ch中有高阶的阐释](https://ethresear.ch/t/merry-go-round-sync/7158)，[注释中的描述更为具体](https://notes.ethereum.org/n2bIgRe5SReOM7BZle4jaQ)。在旋转木马同步 (merry-go-round sync) 中，整体状态以预定顺序传递，因此所有参与者都同时传播相同的状态部分。要同步整个状态，必须在旋转木马同步中完成一次完整的“旋转”，涵盖状态的所有部分。

此设计具备一些有用的特性。首先，该同步允许新节点一加入就能立即参与状态传播，而不需要经过完整同步后才能进行工作。其次，它会颠覆当前“由获取方驱动同步”的模式，那些没有数据的节点也能从全节点处请求部分状态。

确切地说，旋转木马同步中的新同步节点知道在某个时间点会提供状态的哪些部分，并相应地进行调整。

值得提及的最后一种同步方式是[beam同步](https://medium.com/@jason.carver/intro-to-beam-sync-a0fd168be14a)，目前受到两个备选客户端的支持。Beam同步仍然依赖于getNodeData，但是它为这些同步替代方案提供了实验和数据收集的理想入口。

请务必注意，目前关于同步方面仍有很多未知数，因此采用这些独立开发的同步解决方案更为合适。

接下来的几个月，可以看作是各式各样的同步主题黑客松，将对这些想法进行原型化和测试。理想情况下，对于这些同步协议的替代方案，我们可以取其精华，为无状态以太坊设计出一个新标准。

&lt;br/&gt;

# 见证规范原型化

目前无状态以太坊规范库中有一个[规范草稿](https://github.com/ethereum/stateless-ethereum-specs/blob/master/witness.md)，从高层次描述了一个区块见证 (block witness) 的结构，以及从状态树中构建和修改一个见证的语义。草稿规范的目的是给出一个无歧义的见证定义，以便实现者 (不限客户端或编程语言) 可以编写自己的实现，并有理由确定其实现与其他不同的形式实现是相同的。

如[最新的会议摘要](https://ethresear.ch/t/stateless-ethereum-march-25th-call-digest/7202)所述，写出区块见证的参考实现并将其引入现有客户进行测试似乎没有不利之处。客户端中的见证原型功能将类似于可启用的可选标志，而且如果网络中有少量测试者产生并中继见证，能够为研究人员提供有价值的资源，从而将其观察纳入后续改进中。

在见证足够强韧并考虑投入广泛使用之前，我们需要“解决”两件事。

- 见证索引 (Witness Indexing)。这一点相对简单：我们需要一种可靠的方式来确定见证对应哪个区块以及相关联的状态。实现方式可能很简单，例如将一个witnessHash字段放入区块头中。

- 无状态交易验证 (Stateless Tx Validation)。这个有趣的问题较早之前就被提出，并且[在ethresearch论坛中进行了全面的总结](https://ethresear.ch/t/the-current-transaction-validation-rules-require-access-to-the-account-trie/7046)。总而言之，客户端需要快速检查传入的交易 (等待被打包到之后的区块中) 是否具备被打包到区块中的资格，这样可以防止攻击者向网络发送虚假交易。

但是，当前检测需要访问状态的部分数据，即发送方的nonce和帐户余额。如果是无状态客户端，则无法执行此检查。

要构建有效的见证原型，我们需要实现的工作肯定不止于以上两点，但要为beam同步节点提供一个可用的原型，这两件事是必须要解决的。

&lt;br/&gt;

# EVM

如同技术树的原始版本，我们需要在EVM抽象内部进行一些更改。确切地说，见证需要在网络中生成和传播，并且该活动需要被纳入EVM操作范围中。EVM的关联主题与成本和激励息息相关，以及如何对其进行估算，在实现过程中如何将其对更高层的影响降到最低。

- 见证gas计算 (Witness gas accounting)。这一点保留之前文章中的陈述：每笔交易将只对整个交易见证的一小部分负责。生成区块见证需要该区块的矿工进行一些计算，因此会产生相应的gas成本，由交易的发送方支付。

- 代码分块 (Code Merkleization)。见证的主要组件之一是随附的代码。如果没有此功能，包含合约调用的事务将需要该合约的完整字节码以验证其codeHash。代码大小取决于合约，可能会是非常庞大的。

代码的‘merkleization’是一种拆分合约字节码的方法，只需要生成代码的一部分即可生成并验证交易的见证，这是一种大大减小见证平均大小的技术，但目前暂未进行全面研究。

UNGAS/无版本以太坊已从无状态以太坊的“关键路径”中移除。对以太坊来说，这仍然是潜在的有益性能，但在巴黎峰会期间我们明确了一点：其优点和特性可以并且应该独立于“无状态”目标进行讨论。

&lt;br/&gt;

# 二进制树转换

将以太坊状态切换为二进制树结构对于缩小见证大小来说至关重要，见证是否能被缩减到足够小，从而在网络中传播时避免受带宽/延迟影响。

理论上来看，见证大小应缩小三倍以上，但实际情况不需要缩小这么多 (视见证中的合约代码大小而定，这也强调了代码分块的重要性)。

转向完全不同的数据表示形式是一个相当重大的变化，而通过硬分叉实现过渡又将是一个巧妙的过程。上一篇文章中提到的两种过渡策略将保持不变：

- 渐进式。当前的十六叉状态树将在很长一段时间内逐段进行转换。通过这种方式，任何涉及状态部分的事务或EVM执行都会自动将状态更改编码为新的二进制形式。

  这意味着采用“混合”树结构，休眠的状态部分依然保留当前的十六进制形式。该过程实际上永远不会完成，并且对于客户端开发者来说实施难度很大，但是在很大程度上将使用户和更高层的开发者免受第0层改动的影响。

- 干净利落。该策略将在预定时间计算状态的新二进制树表示，一旦新的状态计算完成就持续以二进制形式表示。尽管从实现的角度来看没那么复杂，但是需要协调所有节点运行者，并且几乎可以肯定会给网络带来一些（有限的）中断，这可能会影响过渡期间开发者和用户的体验。

  目前产生了一个新的过渡建议，在渐进式策略和简洁策略之间提供了折中方式。[ethresearch论坛上有该建议的完整概述。](https://ethresear.ch/t/overlay-method-for-hex-bin-tree-conversion/7104/7)

- 覆盖。事务的新数据在一定时间之后将直接存储在十六进制顶部的二叉树中，而“历史”十六进制树则在后台进行转换。当基础层实现完全转换之后，可以将两者合并。

过渡到二进制树的另一个考虑因素是客户端的数据库布局。当前，所有客户端都对状态树采用了较为简单的方法，将树中的每个节点存储为[key，value]对，其中的key是节点哈希。根据turbo-geth的例子来看，过渡策略可能会为客户端提供转换数据库结构的机会。

&lt;br/&gt;

# 敬请继续关注，安全第一！

感谢阅读，也感谢大家针对Eth 1.x进展积极给出的暖心评论。对于后续有关无状态以太坊研究的文章，我还有许多[计划](https://ethereum-magicians.org/t/the-scrolls-of-stateless-ethereum/4155)，将不定时发布在Ethereum Magician论坛或者适时发布在以太坊博客中！大家要注意保持社交距离，洗手常放心上！

一如既往，如果大家有任何反馈和问题，或是想要提出新主题，请在推特上@gichiba或@JHancock。



&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[以太坊基金会生态系统支持计划：2019一览]]></title><description><![CDATA[一文回顾2019年以太坊生态系统资助计划。]]></description><link>https://www.ethereum.cn/ecosystem-support-program-allocation-update</link><guid isPermaLink="false">https://www.ethereum.cn/ecosystem-support-program-allocation-update</guid><pubDate>Thu, 02 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/04/01/ecosystem-support-program-allocation-update/)



&lt;br/&gt;

生态系统支持计划（ESP）是以太坊基金会的分支机构，致力于为整个以太坊生态系统内团队提供支持，包括经济和非经济支持。 ESP是Grants (资助) 计划的扩展，提供经济援助之前是资助计划的重心所在。

##  &lt;br/&gt;

# 优化申请流程

在[2019年以太坊基金会春季更新](https://blog.ethereum.org/2019/05/21/ethereum-foundation-spring-2019-update/)中，我们预告了从Grants过渡到ESP计划的一些打算。自此，我们仍然继续提供经济支持，并帮助不适用于EF资助计划的项目联系其他潜在资助方。除此之外，我们还促进了行业专家分享建议、社区曝光、访问云服务和其他基础设施等等。

在过去的9个月里，我们对反馈意见进行了整合，进行了一系列优化，以完善我们的申请流程，其中包括：

- ESP申请审核的标准化流程
- 扩展领域专家团队，可协助对申请进行同侪评审，或为申请方的项目提供建议
- 重视为申请方提供1:1反馈
- 与已通过的项目建立更紧密的合作，以制定清晰目标、路线图以及共同期望

##  &lt;br/&gt;

# 扩展交流渠道

随着流程越来越完善，我们也正致力于提高ESP计划的曝光度，希望吸引到更多高质量项目的申请。为此，我们正在对交流方式进行修缮，改善现有的沟通渠道，并为[ESP网站](https://ecosystem.support/)添加一些崭新的页面。




![生态系统1.png](https://i.ibb.co/nkbsGDG/1-7e37b2202d.png)


其中有一些适度的改变，我们希望能够在社区宣传中起到作用，也能更好地为潜在项目提供帮助。现在大家可以在首页跟踪到有关ESP的最新消息，以及我们将参与的活动，鉴于目前的健康危机，这些活动可能以虚拟形式进行。

我们还添加了常见问题解答，改进了问询表格。最重要的是，我们上线了一些新的页面标题横幅，将网站的各个部分连接在一起。😎

我们还加入了一个[“希望清单”(Wishlist)](https://ecosystem.support/wishlist/)，吸引项目关注特定领域，例如安全性、Eth2和隐私，我们希望在这些领域能有更多的参与者。这个清单并不是定义哪些领域对于生态系统来说是至关重要的，也不是出于ESP计划的优先考虑。但我们的初衷是这个部分能够给潜在参与者一些启发。一如既往，我们希望能够在ESP宣布支持的范围和其他领域的潜在贡献者之间取得平衡。

在进度报告方面，我们将定期发布博客宣布新的受资助方，但经济资助仅仅是开头。在未来，我们还将重点介绍受资助方的工作内容。在新的[“特色项目”(Featured Projects)](https://ecosystem.support/projects/) 页面中，我们将主要介绍持续多月或多年的受资助项目。我们还将加大社交媒体的使用力度，祝贺受资助方达成工作里程碑并且距离目标稳步前进。

###  &lt;br/&gt;

## 2019年经济资助

2019年除了整个ESP计划的优化工作之外，我们也在持续为整个生态系统的项目提供支持，经济支持只是其中一种形式。有许多出色的团队并不是EF的受资助方，原因是这些团队要么已经被资助，要么其工作重点不符合EF资助范围。但是，我们将竭尽所能支持这些做出贡献的参与者（例如为其桥接新机遇或是为其项目扩大网络影响力）。

也就是说，经济援助仍然是我们支持以太坊生态系统的主要手段。 2019年有超过70个项目获得了经济支持。以下列出的是2019年的受资助团队信息。其中不包括重复支持、前受资助方因为新成果获得的奖励以及其他针对EF团队的资助。有关基金会整体工作的更多详情，2020春季更新将在未来几天内与大家见面。

我们列出了每个受资助项目的名称和简介，[此处](https://docs.google.com/spreadsheets/d/12oSaK8fBEH7ReUldKbrKzHE_u4Cq6AYO07V4OZTGO5U/edit#gid=0)是支持搜索的电子表格，其中包含项目链接，以便了解更多相关信息。

####  &lt;br/&gt;

#### 以太坊2.0

以太坊2.0的开发工作如火如荼，许多团队都携手并进，为了使以太坊系统更具可扩展性、强韧性和安全性，当然有PoS (权益证明) 的引进！我们已经资助了多个2.0客户端，并努力朝着互操作性、可靠性和开发者工具的创建努力。除了下面列出的资助项目，以太坊2.0工作的经济援助也来自于多次资助和其他渠道。

#####  &lt;br/&gt;

##### Eth2客户端: $1,695,000





![生态系统2.png](https://i.ibb.co/Mk7CLdz/2-4d5a02d532.png)

#####  &lt;br/&gt;

##### Eth2工具及其他: $1,459,000





![生态系统3.png](https://i.ibb.co/wSbftB6/3-7b633654fa.png)


####  &lt;br/&gt;

#### Eth 1.x: $487,000

1.x的贡献者正在致力于升级工作，以在短期内提升以太坊的性能。重点关注领域包括无状态以太坊、改善开发者体验、增加节点客户端的多样性、确保全节点可持续运行以及为2.0的发布铺路。与Eth2一样，本文仅包含资金方面的援助。我们将在之后的更新中分享其他形式的支持，包括Geth、其他1.x和无状态研究等等。



![生态系统4.png](https://i.ibb.co/6m1bgJz/4-9b9f04ee43.png)




####  &lt;br/&gt;

#### Layer 2: $1,211,000

第二层解决方案支持各种各样的应用程序，这些应用程序可能面临着成本高、速度慢、过于复杂或者无法直接在以太坊基础层上实现的问题。 2019年是振奋人心的一年，社区中的团队和个人齐心协力使得以太坊向有用性和扩展性突飞猛进。这项工作在短期看来至关重要，对未来的意义也不可置否。Eth 2.0在将来也会受益于第二层解决方案提升的隐私性、扩展性和灵活性。





![生态系统5.png](https://i.ibb.co/THhZmr0/5-01fafa0487.png)





####  &lt;br/&gt;

#### 密码学及零知识证明: $426,000

密码学和零知识证明的研究和开发工作比以往任何时候都要多。这些工作夯实了协议的基础组成部分，为扩展性、隐私性和安全性开辟了新的可能性。2019年的目标是迈出切实可行的一步：构建工具提升开发者效率，使其无需深入了解密码学。





![生态系统6.png](https://i.ibb.co/pzFvcDK/6-3978e10def.png)



####  &lt;br/&gt;

#### 开发者体验: $1,322,000

以太坊为应用程序解锁了一片全新的设计天地。在开发者进行探索时，不可避免地会发现新的痛点并且需要新的工具。我们正通过在增加编程语言种类、完善软件库、开发工具、节点基础设施、去中心化存储、消息传递等方面大力投入，以提升开发者体验。这些优化使得开发者事半功倍，从而可以专注于自己的产品，而不需要构建自己的自定义工具。我们的终极目标就是在以太坊上能够获得轻松愉悦的开发体验。





![生态系统7.png](https://i.ibb.co/B3hqMj6/7-9394e73b29.png)



####  &lt;br/&gt;

#### 用户体验: $213,000

我们一直在寻求升级和通用工具，以降低终端用户的门槛，同时又不破坏去中心化或任何以太坊独具的特色。通过协助解决常见痛点，使得各地的开发者都能够吸引到更多用户，例如gas成本、身份管理、地址可读性和互操作性。




![生态系统8.png](https://i.ibb.co/Lrz6mHr/8-ae4db0670e.png)




####  &lt;br/&gt;

#### 社区和教育: $422,000

若是没有致力于生态系统长足发展的社区和贡献者，以太坊也不会存在。以下这些团队通过线上线下的方式将人们汇聚在一起，丰富了以太坊全球社区的多样性，并且通过向所有人提供无偿的教育来帮助建立通用以太坊知识库。




![生态系统9.png](https://i.ibb.co/jWC9vvX/9-a0c404ee33.png)




####  &lt;br/&gt;

#### 间接资助: $484,000

新形式的生态系统需要突破传统的资金分配思维！以太坊生态系统的蓬勃生长在很大程度上依靠开源开发者和独立思想者。为此，我们希望突破公司和组织的传统结构（grants、风险投资、合同薪酬），寻求独具一格的方式来资助有才能的贡献者。本类别的目的在于将资源反哺社区。





![生态系统10.png](https://i.ibb.co/CnpzfNL/10-339387af06.png)


 &lt;br/&gt;


我们对于团队在2019年的工作成果感到十分自豪，2020年我们也会满载动力向着焕然一新的目标进发。一如既往，感谢社区和每一个贡献者的热情和支持，我们期待与您分享ESP团队的最新动态！!🦄</content:encoded></item><item><title><![CDATA[Eth2更新速览#10]]></title><description><![CDATA[阶段0审计全面完成，发布赏金计划！]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-10</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-10</guid><pubDate>Wed, 01 Apr 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/03/31/eth2-quick-update-no-10/)



&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)
&lt;br/&gt;



本周有一些趣味官宣！

除了以下即将提到的进展，客户端团队正全力向产品化前进，下周的更新将涵盖客户端方面的进度。

 &lt;br/&gt;

# 要点速览

- Least Authority完成[阶段0审计](https://leastauthority.com/blog/ethereum-2-0-specifications/)
- 阶段0预启动阶段[赏金计划](https://notes.ethereum.org/@djrtwo/phase0-bounty) 🐛
- [Discord Eth R＆D小组](https://discord.gg/VmG7Uxc)整合eth1 + eth2相关讨论

 &lt;br/&gt;

# 完成阶段0审计

几个月前，我们就提到了与Least Authority进行针对阶段0规范的全面审计。审计几乎无所不包，深入研究了潜在的DoS攻击、资源滥用、意外分叉/链以及可能影响资金安全的攻击。

目前审计已经全面完成，并且[向大众公开 ](https://leastauthority.com/blog/ethereum-2-0-specifications/)💐

Least Authority的审计工作：1）帮助我们修复了在广播消息过程中具备额外验证条件的一些DoS向量（问题A&amp;B）；2）强调了针对区块提议者领导人公开选举的担忧（问题C和D）；3）促进了针对潜在DoS攻击的进一步研究，该类潜在攻击可能使用libp2p gossipsub协议控制消息。

除了具体问题，审计工作还给出了一些其他建议，包括修改p2p规范、研究新技术强化gossip以及对核心共识文件/证明进行同侪审查 (peer review)。

非常感谢Least Authority！很高兴能与众多审计员在这个项目上进行合作！

 &lt;br/&gt;

# 阶段0预启动阶段赏金计划

在此我们兴奋地宣布[阶段0预启动阶段赏金计划](https://notes.ethereum.org/@djrtwo/phase0-bounty)！

这项计划的初衷是激励各位在Eth2主网正式启动之前寻找并报告核心Eth2规范中的bug 🐛 (赏金高达一万美元！)

以太坊基金会负责维持这项计划，直到阶段0主网正式上线。在阶段0投入使用后，我们将把该赏金纳入标准的 [Ethereum Bounty Program](https://bounty.ethereum.org/) (以太坊赏金计划)。

点击[此处](https://notes.ethereum.org/@djrtwo/phase0-bounty)了解该赏金计划细节，包括规则、报告方式、紧要程度和相应奖励。

**作为这项计划的良好开端，我们很高兴地宣布对前三个bug赏金进行奖励！**

- Herman Junge – **级别：关键** – [验证者奖励溢出bug](https://github.com/ethereum/eth2.0-specs/pull/1635)
- Michael Sproul – **级别：中等** – [验证者奖励计算bug](https://github.com/ethereum/eth2.0-specs/pull/1680)
- Martin Lundfall – **级别：一般** – [验证者余额极低时除以零bug](https://github.com/ethereum/eth2.0-specs/pull/1664)

祝各位寻bug🐛之旅愉快！

 &lt;br/&gt;

# 整合eth1+eth2相关讨论

自从去年大阪的deVcon大会以来，发生了许多奇妙的事。在Piper的领导下，eth1x研究计划已经壮大为无状态以太坊 (Stateless Ethereum) 运动，具体路线图出炉，并且在整个生态系统中收获了广泛参与度。

无状态以太坊是针对eth2扩容工作的补充，且与eth1+eth2方面的研究、规范、开发和讨论的重叠面。为了提高协同工作的效率，最近有关eth1+eth2的讨论已经在[Eth R&amp;D Discord频道](https://discord.gg/VmG7Uxc)进行了整合。

[加入我们](https://discord.gg/VmG7Uxc)，你可以：潜水、提问、提议新同步协议、原型化eth1+eth2合并、优化见证 (witnesses) 或是获取最新的以太坊协议进展！🚀

&lt;br/&gt;

&lt;br/&gt;



声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth2 Staking系列#3：分片共识]]></title><description><![CDATA[Eth2如何实现分片共识？]]></description><link>https://www.ethereum.cn/2020/03/27/sharding-consensus</link><guid isPermaLink="false">https://www.ethereum.cn/2020/03/27/sharding-consensus</guid><pubDate>Mon, 30 Mar 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/03/27/sharding-consensus/)





&lt;br/&gt;

![质押1.png](https://i.ibb.co/WyP26VY/1-8cf3398852.png)
&lt;br/&gt;



特别感谢Sacha Yves Saint-Leger和Joseph Schweitzer的审校。

分片 (Sharding) 是eth2相较于eth1的诸多改进之一。“分片”是从数据库研究中借用而来，意味着整体数据的一部分。与数据库语境相同，在eth2中，分片意味着将整个系统的存储和计算分割为分片，并独立处理各分片，然后根据需求组合结果。确切来说，**eth2将实现许多分片链，其中每个分片具有与eth1链相似的功能，这对于扩展性来说是巨大的提升。**

然而，eth2中存在一种鲜为人知的分片类型。从协议设计的角度来看，这可能更加令人兴奋——**输入分片共识。**

 &lt;br/&gt;

# 分片共识

就像速度最慢的节点处理能力有限，整个网络吞吐量都会受限，单个验证者的计算资源也限制了可以参与共识的验证者总数。由于每个新加入的验证者都会为系统中所有其他的验证者带来额外的工作量，因此资源最少的验证者将无法继续参与（因为无法再跟踪其他验证者的投票） 。为此，eth2的解决方案是**分片共识 (sharding consensus)。**

 &lt;br/&gt;

## “拆分”式设计

在eth2中，时间被分为两种期间，即**时隙 (slots)** 和**时段 (epochs)**。

一个时隙 (slot) 指12秒的时间范围，期间理想状态下一个新区块会被添加到链上。区块是一种机制，除了打包交易，还将包含验证者的投票。

一个时段 (epoch) 由32个时隙（6.4分钟）组成，在此期间，信标链将执行维护该链所需的所有计算，包括证明并最终确定新区块，以及对验证者实施奖惩措施。

正如在[本系列第一篇文章](https://blog.ethereum.org/2019/11/27/validated-staking-on-eth2-0/) ([中文版](https://news.ethereum.cn/validated-staking-on-eth2-0/)) 中讨论到的，验证者会被组织成委员会 (committees) 的形式来执行工作。无论何时，**每个验证者都同时是一个信标链和一个分片链委员会的成员，并被要求每个时段 (epoch) 进行一次证明 (attestation)，其中证明是针对已经被提议了一个时隙 (slot) 的信标区块的投票。**

Eth2分片共识的安全模型是基于一个思想，即**委员会或多或少是整个验证者集的准确统计表示。**

例如我们遇到这样一种情况：集合中有33％的恶意验证者，那么他们最终很有可能会进入同一委员会。这对于安全模型来说简直惨不忍睹。



&lt;br/&gt;

![质押6.png](https://i.ibb.co/Cv7ZZ3C/6-4a8841ee2b.png)
&lt;br/&gt;



因此我们需要寻求一种方法来杜绝这种情况。换句话说，我们需要确保假如33％的验证者是恶意的，那么一个委员会里最多只能分配到大约33%的恶意验证者。

我们可以通过以下两种方式达到该目的：

1. 保证委员会成员随机分配
2. 每个委员会中要有验证者数量最低限制

举个例子：每个委员会有128个随机抽样的验证者，1/3的恶意验证者控制2/3委员会的可能性非常小（[概率小于2 ^ -40](https://web.archive.org/web/20190504131341/https://vitalik.ca/files/Ithaca201807_Sharding.pdf)）。

 &lt;br/&gt;

## “合并”式设计

验证者的投票即证明 (attestations)。一个证明由许多部分组成：

- 针对目前信标链头的投票
- 针对哪个信标区块应当被证明/最终确定的投票
- 针对分片链当前状态的投票
- 投票同意的所有验证者签名

通过将尽可能多的元素聚合成一个证明 (attestation)，可以提高系统的整体效率。之所以能有这种效果，是因为节点只需要针对证明 (attestations) 进行计算就可以获知信标链和每个分片链的状态，而无需对信标区块和分片区块的投票和签名进行独立检查。

如果每个验证者都产生自己的证明 (attestation)，并且每个证明都需要由所有其他节点进行验证，那么作为一个eth2节点的成本将会非常高。这就是聚合 (aggregation) 要解决的问题。

证明 (attestations) 在设计时就遵循了**易组合**的理念，如果两个及以上验证者都有针对相同投票的证明，那么就可以将这些证明的签名字段添加进一个证明中，从而对这些证明进行组合。这就是**证明聚合 (aggregation)**。

就其结构而言，委员会内部的投票都是易聚合的，因为被分配在同一个分片中的验证者针对该分片状态和信标链的投票应该是相同的。这就是eth2扩展验证者规模的机制。通过将验证者分配到委员会中，验证者只需要关注同一委员会中的其他验证者，并且仅需验证来自其他委员会的非常少的聚合证明 (aggregated attestations)。

&lt;br/&gt;

### 签名聚合

Eth2将使用BLS签名，这是一种在多条椭圆曲线上定义的、聚合友好的签名方案。在特定的曲线上，每个签名是96字节。

如果ETH总量的10%被质押到eth2中，那么将大约有 35万验证者。这就意味着一个时段 (epoch) 的签名大小将是33.6 MB，每天就是大约7.6 GB。如果按照这种趋势，那么[2018年有关eth1状态大小达到1TB的谬论](https://dev.to/5chdn/the-ethereum-blockchain-size-will-not-exceed-1tb-anytime-soon-58a)，将会在eth2实现之后的133天之内就成为现实 (且仅基于签名而言)。

BLS签名的妙处在于它是可以聚合的：假如Alice产生了签名A，Bob对同一个数据进行签名为B，那么Alice和Bob的签名可以聚合成为签名C (C=A+B),由此来进行存储和检查。通过使用签名聚合，每个委员会只需存储并检查一个签名。这样一来，**每天的存储需求就降低至2MB以下。**

 &lt;br/&gt;

# 结语

**通过将验证者分配到委员会中，验证eth2所需的工作量减少了几个数量级。**

对于信标链和所有分片链的验证节点来说，他们只需要查看每个委员会的聚合证明 (aggregated attestations) 即可。如此一来，节点既可以获知每个分片的状态，同时还能获知验证者对于哪些区块是否被添加到链上的意见。

总的来说，委员会机制帮助eth2达成了两个设计目标（在[本系列首篇文章](https://blog.ethereum.org/2019/11/27/validated-staking-on-eth2-0/)中提及过）：即在消费级笔记本电脑上就可以参与eth2网络，且eth2必须支持尽可能多的验证者以实现最大程度的去中心化。

数字也许更具象，虽然大多数拜占庭容错式的PoS协议都可以扩张至数十个验证者 (在个别情况下，甚至可以扩展到数百个)，但 **eth2能够支撑数十万个验证者，并且不需要在网络延迟和吞吐量方面折衷就能保证安全性。**

 &lt;br/&gt;

#### Eth2 Staking系列其他文章：

[如何参与ETH2 STAKING（开篇）](https://news.ethereum.cn/validated-staking-on-eth2-0/)

[参与ETH2 STAKING系列：激励篇](https://news.ethereum.cn/validated-staking-on-eth2-1-incentives/)

[ETH2 STAKING系列：共识机制篇](https://news.ethereum.cn/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)

 &lt;br/&gt;
 
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[Ethereum.org 进展更新（二）]]></title><description><![CDATA[以太坊官网迎来设计与内容方面的升级。]]></description><link>https://www.ethereum.cn/ethereum-org-development-update-2</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-org-development-update-2</guid><pubDate>Mon, 23 Mar 2020 00:00:00 GMT</pubDate><content:encoded>来源 | Ethereum Blog


&lt;br/&gt;

Hey Ethereum！由ethereum.org团队为您带来最新进展！

&lt;br/&gt;

# **样式指南与设计升级**




![EForg更新1.png](https://i.ibb.co/4J47f29/eth2-everything-5-0b87cbe439.png)




Ethereum.org正在进行升级啦！在一月份的时候，我们发布了[样式指南](https://twitter.com/ethdotorg/status/1220417757960986630)（figma doc文档版本点击[此处](https://www.figma.com/file/tboGNkZJKDhqzXqPzDaBm5/Ethereum.org-Style-Guide?node-id=0%3A1)），以征求公众意见和反馈。目前正在按照样式指南实施计划。

我们还制定了一系列的[设计原则](https://github.com/ethereum/ethereum-org-website/blob/dev/design-principles.md)来指导关于网站的决策。

关于新网站的设计，我们还将改变现有网页的布局。部分网页已经更新，快去瞧瞧，然后[给予我们反馈](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fethereum%2Fethereum-org-website%2Fissues%2Fnew%2Fchoose)！继续密切关注未来几周的网站更新变化吧！

 &lt;br/&gt;

# 社区页面！






![EF更新2.png](https://i.ibb.co/93Sh1dR/EF-2-959fc1f0f8.png)




ethereum.org最受欢迎的其中一个页面就是初学者如何加入社区的相关介绍页面。

在一月份的时候，我们发布了[社区页面v1.0版本](https://ethereum.org/community/)，浏览页面更方便。当前，该页面内容包括受欢迎线上社区清单，即将举行的活动、meetup组列表以及针对具有不同背景和技能的人参与以太坊社区的具体建议。由衷地感谢所有为网站建设提供想法与建议的朋友！

你觉得ethereum.org上是否还需要增添其他页面？有想法那就[来建言献策](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fethereum%2Fethereum-org-website%2Fissues%2Fnew%2Fchoose)吧！

 &lt;br/&gt;

# Studio页面简化






![EF更新3.png](https://i.ibb.co/m0MZw14/EF-3-436e248454.png)




[启动ethereum.org上的Studio功能](https://news.ethereum.cn/ethereum-org-development-update-1/)后，获得的主要反馈之一就是该工具使用起来仍然过于复杂。然而，Studio旨在成为最简单、最快速的以太坊智能合约读写入门方法。

目前，已经删减了读写智能合约不需要的功能和菜单选项，从而进一步简化该工具。

非常乐于得到大家的一臂之力来共同完善网站！查看[open issues](https://github.com/SuperblocksHQ/ethereum-studio/issues)来了解一下如何出谋划策吧！

 &lt;br/&gt;

# 下一步是？

在一群给力的以太坊社区成员的帮助下，我们几乎完成了对网站上Individuals选项的所有内容的全面审核。因此，我们会适当增减内容，重新组织页面以及重新编写一些现有内容。

接下来，我们将对站点上“Developers”选项的所有内容进行类似审核。跃跃欲试了吗？那就加入“老虎队”来共同完成审查工作吧！点击[此处](https://ethereumfoundation.typeform.com/to/xVBuIn)申请！

网页设计也将继续升级。在未来几周内新布局网站将面世，我们感到非常激动。

最后，刚刚[宣布了下一次的社区电话会议](https://twitter.com/ethdotorg/status/1240627290167545857?s=20)将于3月25日星期三举行。快来加入会议，表达自己的想法或反馈吧！

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/3/20）]]></title><description><![CDATA[Eth2未来5-10年路线图。]]></description><link>https://www.ethereum.cn/wnie2-2020-3-20</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-3-20</guid><pubDate>Fri, 20 Mar 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What‘s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200320)


 &lt;br/&gt;

# **大家好，别来无恙 👋**

最近世界仿佛停滞运转，但是Eth2的工作仍在继续进行。在这个特殊的时期，wnie2希望为大家呈现万变中的不变。

如果您尚未参与2020年[ETH使用情况调查](https://www.surveygizmo.com/s3/5478500/b50493a3f344)，只需几分钟即可完成。这些问题涵盖了许多有趣的方面，包括Eth2质押计划以及DeFi使用。

 
 &lt;br/&gt;

# 要点速览

Gitcoin Media：[ETH2.0主要开发者问答](https://www.youtube.com/watch?reload=9&amp;v=td750o3xf8k&amp;list=PLvTrX8LNPbPkOOTmVqjljLs2vk5-YZwLG)。在此可以与所有你喜爱的开发人员对不同的Eth2主题进行探讨。

一如既往，Danny Ryan的[*eth2 quick update no. 9*](https://blog.ethereum.org/2020/03/17/eth2-quick-update-no-9/)仍然是以太坊最新进展的权威来源，中文版[《Eth2更新速览（九）》](https://news.ethereum.cn/eth2-quick-update-no-9/)。



 &lt;br/&gt;

# Eth2未来5-10年路线图



就以太坊目前处于何处以及未来的大致发展方向而言，Vitalik发表了一个很棒的[图示](https://benjaminion.xyz/images/Eth2FlowChart_200318.jpg)，转载如下。[评论](https://twitter.com/VitalikButerin/status/1240365050436689923)同样很精彩，不容错过！

对于近来一直在关注以太坊的人来说，这个大致路线并没太大的惊喜，至少它与我的心理预期相去无几。

其中有两个显著特点：**一是促进Eth1与Eth2合并的首要任务，二是不再强调阶段2是可交付的成果，随着其中组件的成熟，有许多事都亟待实现。**

这个图示并非如同之前常见的将发展路线分为三个阶段，但这个路线更为实用，并且能更早地交付一个可用的系统。这个系统最初看起来更类似我们熟悉的Eth1的增强版本，而不是一个应接不暇的全新执行环境抽象世界。我希望这个路线路能够受到开发者的支持。

为了避免歧义，此图中的Eth2阶段0（信标链）或阶段1（分片链）并未产生任何变化。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1JZLxv1/3-20-1-1ab26fb9b2.jpg&quot;/&gt;&lt;/center&gt;
 &lt;br/&gt;

# 阐释性文章



随着阶段0临近，涌现出越来越多的高质量阐释性文章。

- Ivan Martinez：[ETH2从ETH1中学到了什么？](https://medium.com/@0xKiwi/what-eth2-has-learned-from-eth1-d1f7e0830a98)

本文涵盖了发行、无状态和帐户抽象等问题。比起在现有的Eth1链上修修补补，在全新的Eth2架构中解决这些问题要容易得多。例如，早在[三年前](https://eips.ethereum.org/EIPS/eip-86)就在EIP中提出将Eth1帐户抽象化，但至今仍未实现。

这也体现了我对于尽早合并Eth1和Eth2的提议有所保留：如果Eth2一心只想解决Eth1的遗留技术难题，那么创新将可能被搁置多年。

- 想要尝试亲自跑跑信标链？点击[此处](https://dev.to/q9/how-to-run-your-own-beacon-chain-e70)获得指引！

- Sly Gryphon技术性文章：[Eth2.0状态转换](https://sgryphon.wordpress.com/2020/03/17/eth-2-0-state-transition/)

- 我仍然在继续[Eth2规范的注解工作](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/introduction/)。由于有太多细节需要深入，因此工作进度较慢，但指日可待！



 &lt;br/&gt;

# 常规电话会议

##  实现者会议

第35次会议于3月12日进行。

- [会议议程；](https://github.com/ethereum/eth2.0-pm/issues/132)
- [会议视频；](https://youtu.be/orVYfqP_YuQ?t=575)
- [我的笔记](https://hackmd.io/@benjaminion/BkW_92PrU)、[Mamy的笔记](https://gist.github.com/mratsim/b81f488911496e93fbdde16d966468b6)以及[Edson的笔记](https://github.com/ethereum/eth2.0-pm/blob/master/eth2.0-implementers-calls/call_035.md)。

除去一些常规客户端更新，重点如下：

- [V0.11.0版本规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.0)已发布。主要加强了网络层对于拒绝服务 (DoS) 攻击的防御，还包含一些状态转换的改动。本规范是多客户端测试网的稳定性目标。
- 我们预计在四月运行一些**长期联合测试网**。相关进展顺利：Prysmatic的Sapphire测试网[运行良好](https://twitter.com/preston_vanloon/status/1241061545037033472)；Prysm与Lighthouse进行同步；Teku与Prysm和Lighthouse进行同步，等等。
- 阶段1规范即将能够在客户端中进行原型化，预计在四月初左右。

##  Eth 1.x/无状态以太坊

最近我没有跟踪到无状态以太坊的会议。但Griffin Ichiba Hotchkiss撰写了一篇非常棒的进展报告，对EthCC之后举办的[首届无状态以太坊峰会](https://blog.ethereum.org/2020/03/12/eth1x-files-stateless-summit-summary/)进行了总结。



 &lt;br/&gt;

# 研究工作



Gasper最终版本论文[Combining GHOST and Casper](https://arxiv.org/abs/2003.03052)已发布。该论文分析了我们在Eth2中如何创造性地将这两种共识协议结合在一起。

[**ethresear.ch：**](http://ethresear.ch/)

Vitalik：**[使用 (Polynomial commitments) 多项式承诺替代状态根](https://ethresear.ch/t/using-polynomial-commitments-to-replace-state-roots/7095?u=benjaminion)。**多项式承诺最近是大热的[加密话题](https://twitter.com/VitalikButerin/status/1237736821200695297)。Justin Drake在ZK Study Club中探讨PCs：[1](https://www.youtube.com/watch?v=bz16BURH_u8)，[2](https://www.youtube.com/watch?v=BfV7HBHXfC0)，[3](https://www.youtube.com/watch?v=TbNauD5wgXM)。总之，PCs可能是无状态协议的重要解决方案，但目前还存在一些实质性的挑战。

PegaSys的Joe Delong提出了一种跨分片通讯机制：[评估非顺序收据的跨分片交易](https://ethresear.ch/t/appraisal-of-non-sequential-receipt-cross-shard-transactions/7108?u=benjaminion)。此处是他的[跨分片交易模拟器](https://github.com/dangerousfood/cross-shard-txn-sim)。

PegaSys的Peter Robinson提出了一种原子跨分片交易机制：[使用系统事件、实时参数检查和智能合约锁定的原子跨分片函数调用](https://ethresear.ch/t/atomic-cross-shard-function-calls-using-system-events-live-parameter-checking-contract-locking/7114?u=benjaminion)。

PegaSys的Mikhail Kalinin针对Eth1和Eth2双向桥接的研究：[矿工投了反对票](https://ethresear.ch/t/miners-vote-back/7129?u=benjaminion)。

PegaSys的Alex Vlasov继续研究[拜占庭容错的分布式时间协议](https://ethresear.ch/t/sensor-fusion-for-bft-clock-sync/7142?u=benjaminion)。这是Eth2很重要的一个部分，需要强大的时钟同步。

 
 &lt;br/&gt;

# 其他新闻



[Nimbus](https://our.status.im/nimbus-status-update-march-6th/), [Lighthouse](https://lighthouse.sigmaprime.io/update-22.html)和[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-46-slasher-running-integrated-fuzz-testing-6d3647833afc)的开发进展更新。

Piper Merriam尝试集合Eth1x和Eth2的[工作分工](https://ethresear.ch/t/whos-working-on-what/7159?u=benjaminion)。

  &lt;br/&gt;

# 最后的最后……

四年前在对Proof of Stake (权益质押) 进行研究的时候，我就确信以太坊是绝无仅有的😻我非常高兴能参与到Eth2最终的交付。每当我想到PoW (工作量证明)，我还是会不寒而栗。

但是我绝不反对投入计算资源到有价值的事中，我很乐于响应[Jonny Rhea的呼吁](https://twitter.com/JonnyRhea/status/1238643297184251910)，为COVID-19蛋白质折叠投入CPU和GPU算力。

读这篇文章的你同样可以加入！操作如下：

1. 访问[foldingathome.org/start-folding](http://foldingathome.org/start-folding)并且安装软件
2. 打开-&gt;配置身份
3. 输入团队编码：237234（以太坊团队）
4. 用户名（可选）

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[Eth2更新速览#9]]></title><description><![CDATA[Eth2和Eth 1.x进展顺利，阶段0已达稳定状态，各客户端团队全力以赴。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-9</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-9</guid><pubDate>Wed, 18 Mar 2020 00:00:00 GMT</pubDate><content:encoded>来源：[Ethereum Blog](https://blog.ethereum.org/2020/03/17/eth2-quick-update-no-9/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)
&lt;br/&gt;



多事之春。在此我希望大家都安然无恙，继续照顾好自己、家人和社区。

本期Eth2更新速览发布地有些迟了，抱歉。接下来我将保持定期更新。总体来说，**Eth2进展顺利，阶段0已经达到稳定状态，各客户端团队正在全力以赴，并且一个关于无状态以太坊的可观研究也发布了。**

###  &lt;br/&gt;

# 要点速览

- [v0.11.0 版本规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.0)发布，作为多客户端测试网的稳定目标；
- 有关[结合GHOST与Casper](https://arxiv.org/abs/2003.03052)的论文已发布，以供公众审议；
- [Polynomial commitments](https://ethresear.ch/t/using-polynomial-commitments-to-replace-state-roots/7095/3) (多项式承诺)可能是无状态以太坊的解决方案之一；
- IEFT BLS规范存在些许[不稳定性](https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/pull/212)，但预计不会有进一步更改。

###  &lt;br/&gt;

# v0.11.0版本规范发布

[v0.11.0 (Lan party)](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.0) 版本规范已于上周发布。此版本的发布意味着“审计后”的阶段0规范版本，为长期的多客户端测试网做好铺垫。

该版本包含一些针对核心共识的微小改动，重点主要放在了网络协议的优化，例如简化同步协议、强化抗DoS、优化网络/链分叉等。更多细节，请参阅[release notes](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.11.0)。

各客户端正致力于集成这些变更，同时兼顾进行稳定性、优化和多客户端实验工作。各客户端团队三月都在为即将来临的多客户端测试网奠定基础。目前，**Teku与Prysm进行了同步，Prysm与Lighthouse进行了同步**，且大多数基于DiscoveryV5 (节点发现协议第五版) 的实现都可以发现彼此。

###  &lt;br/&gt;

# Eth2混合共识机制论文发布

本周，我们在arXiv上发布了论文：*[Combining GHOST and Casper](https://arxiv.org/abs/2003.03052) (GHOST 和Casper的结合)*。这项成果正式介绍了Eth2的核心共识组件Casper FFG和LMD-GHOST，展现了这两者如何互补，进而**形成一个兼具安全性和活性的系统**。基于首先在*[Casper the Friendly Finality Gadget](https://arxiv.org/abs/1710.09437) (Casper FFG)* 论文中提出的概念，本论文进一步将这些概念嵌套进一个更具象的基于slot的PoS语境之中 (即eth2信标链)。

该论文的创作与阶段0规范的发展同步进行，它不仅对规范设计产生了影响，同时还强调了一些必须解决的关键边界情况。对于公开发表这篇论文，我们感到很激动，以便公众查阅，提供评论、反馈和意见。

Vitalik之前提出的一个[“迷你规范”](https://ethresear.ch/t/beacon-chain-casper-mini-spec/2760)催生了这项工作，但大部分工作是由San Jose州立大学的Yan X. Zhang和他的学生推动并成就的。我们要特别感谢Yan及其学生完成了eth2的这一重要里程碑：Diego Hernandez、Thor Kamphefner、Khiem Pham、Zhi Qiao、Juhyeok Sin和Ying Wang。

###  &lt;br/&gt;

# 无状态以太坊推进：Polynomial commitments

Vitalik最近在ethresear.ch上发表了一篇激动人心的文章：*[Using polynomial commitments to replace state roots](https://ethresear.ch/t/using-polynomial-commitments-to-replace-state-roots/7095)* (使用多项式承诺替代状态根)。这篇贴文提议**使用多项式承诺来替代此前一直用于区块链状态和数据的默克尔树累加器。**如果这个研究方向被证明是可行的，我们可以将“witness” (证明，即处理区块所需的状态证明) 大小从约0.5 MB减少至1-10kB，这就解决了无状态以太坊研究中一个关键问题。

确切来说，以太坊正在力求转向一个“无状态”的模式 (参见Eth 1.x相关研究和[进展更新](https://news.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree/))。多项式承诺可能会是我们一直在寻求的重要突破点，通过显著降低基于区块大小的无状态性的成本来实现无状态。

尽管该提议看起来非常有效，但其中涉及到的一些研究和数学运算着实新颖。我们需要多花些时间，以便更好地理解其中的复杂性并且做出权衡，也能使更多人关注到这个激动人心的新方式。

###  &lt;br/&gt;

# IETF BLS标准的些许不稳定

基于一些来自不同应用和领域的外部反馈，最近IETF BLS标准在最终更改中将其纳入了规范。之前的hash_to_base对于一些系统和应用不太友好，例如嵌入式系统、需要特定类型域分离的应用以及使用SHA-3算法的应用。

考虑到[这些问题](https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/202#issue-553639522)，hash_to_base被替换为新改进的[hash_to_field](https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/pull/212)。维护人员不希望对规范再有其他任何实质性的改动，该修改将很快作为“第6版草案”正式发布。

就密码学标准而言，我们不希望停留在当前使用Keccak256哈希函数的Eth1，目前的eth1是唯一使用此算法的主要应用。处于加密孤岛上不仅会阻碍跨应用互操作性的优化，也不利于许多稳健实现的发展。

我们正在密切跟进IEFT标准的开发工作，但是鉴于这个改动，**在有确切的eth2发布时间之前，我们并不急于在主网部署存款合约** (deposit contract)，否则会我们会被困在一个BLS规范中。我们将持续评估IEFT标准的稳定性，并且不希望因此成为发布阶段0的瓶颈。

此外，长期多客户端测试网即将到来，我们将为其发布存款界面并部署存款合约，关于这个话题我们将在下期讨论更多细节🚀

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/3/6）]]></title><description><![CDATA[Prysm的测试网出现首次“双重投票”罚没情况；EthCC干货多多]]></description><link>https://www.ethereum.cn/wnie2-2020-3-6</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-3-6</guid><pubDate>Sun, 08 Mar 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What‘s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200306)



 
&lt;br/&gt;

# 上周文章精选

上周必读文章出自我的资深同事Joseph Chow，[《阐释以太坊2.0信标链》](https://ethos.dev/beacon-chain/)，文章内容紧扣标题😃

 
&lt;br/&gt;

# 阶段0 信标链



阶段0规范即将正式迎来更新 (v0.10.2?)，主要包含一些来自外部审计 (审计结果即将发布) 以及网络 (networking) 方面的内容。



**测试网**

测试网又出现了[大新闻](https://twitter.com/raulitojordan/status/1235978892860682240)！**Prysm的Sapphire测试网中出现了首次验证者被罚没的情况。**

[此处](https://beaconcha.in/block/408311)是事发区块，页面底部说明了“1 attester &amp; 0 proposer slashings” (1个证明者&amp;0个区块提议者被罚没)。

究竟发生了什么？该区块的提议者打包了一名生成证明 (attestations) 的验证者出现罚没行为的证据。我们可以从[Prysm API](https://api.prylabs.net/eth/v1alpha1/beacon/blocks?slot=408311)的相关数据中看到attesterSlashings (证明者罚没) 对象，其中就包含了该名验证者进行矛盾投票的证据：

- 验证者 #35293 使用信标区块根 （“YnJ1aGFoYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=” ）对源检查点 12757 和目标检查点 12758 进行了一次投票；
- 同一名验证者继而又使用了一个不同的信标区块根（“kJtJdW/ZLB+dJkLgsxvNQzLM1uAdbe/Au3YsSNOiY2A=”）对同一个源检查点和目标检查点进行了投票。

该行为被认定是**“双重投票”** (double vote，针对同一目标epoch却包含不同证明数据的两次投票)，根据Casper FFG共识规则，这是一种会被罚没的行为。因为对于正常工作的验证者来说，即使是无意之举也不会发生这种情况，事因要么是验证者故意为之，要么就是出现bug。

在[验证者记录](https://beaconcha.in/validator/35293)中我们也能看到其被标记罚没并且退出了网络。一旦被检测到不端行为，验证者会被罚没0.1 ETH (在正式信标链网络中，罚没金额为1 ETH)，并且在之后的18天中会面临另一次罚没惩罚，罚没金额取决于有多少其他验证者在此期间也被罚没。

(译者注：为了降低验证者无心之举的损失，罚没金额与同时段被罚没的验证者数量呈一定比例。如果大量验证者同时被检测到不当行为，那么很大几率会被视作是针对Eth2网络的攻击行为。)

整件事的重点在于，Prysmatic团队能够检测到该罚没情况。在整个网络的活动中，这[绝对不是无足轻重](https://github.com/ethereum/eth2.0-pm/issues/63)的行为。

测试网相关消息还有：我们的PegaSys客户端Teku与Prysm测试网进行了[同步](https://twitter.com/benjaminion_xyz/status/1232434296578658304)。当时同步速度非常慢，但之后我们实施了一些速度优化措施，包括使Teku合并一个[大型PR](https://github.com/PegaSysEng/teku/pull/1133)以实现新的二叉树数据结构以及其他措施。Prysm目前正在与Lighthouse的EthDenver测试网[进行同步](https://twitter.com/n1shantd/status/1235764020847800322)。看好联合测试网！

**测试工作**

Protolambda用于Eth2网络测试的[Rumor](https://github.com/protolambda/rumor) REPL工具即将投入使用，目前正在筹备基于该工具的[网络测试策略](https://gist.github.com/dryajov/91300c9c02fc48a1c0ff29708e562369)。

Sigma Prime针对不同客户端的模糊测试工作[进展良好](https://blog.sigmaprime.io/beacon-fuzz-02.html)。

**Eth2奖惩机制**

ConsenSys Pukara (staking即服务) 团队的Herman Junge撰写了一篇有关[Eth2奖惩机制](https://codefi.consensys.net/blog/rewards-and-penalties-on-ethereum-20-phase-0)的详尽文章，过去几个月我一直尝试创作类似的文章，可我发现有太多细枝末节需要涵盖。Herman完成得很棒😃

与此相关的还有[奖惩模拟器代码](https://github.com/hermanjunge/eth2-reward-simulation)，以及一些模拟工具：[1](https://consensys.github.io/eth2-widgets/#/validator-simulation), [2](https://consensys.github.io/eth2-widgets/#/network-simulation).

 &lt;br/&gt;

# 常规会议

## 实现者会议

- [会议议程；](https://github.com/ethereum/eth2.0-pm/issues/129)
- [会议视频；](https://youtu.be/tLiMgFoG_vs?t=70)
- 我的[速记](https://hackmd.io/@benjaminion/SygoFBrVL)、Mamy的[笔记](https://gist.github.com/mratsim/80d4a9f313c8c5cac3ac433d7ce810e4)以及来自Cat Herders的Pooja的[完整笔记](https://github.com/ethereum/eth2.0-pm/blob/5a2ff102e5ce9665d200210e36b8a13534737ae3/eth2.0-implementers-calls/call_034.md)

## Networking会议

- Networking团队在3月4日举行了会议。我从这次技术性电话会议中整理了一些[笔记](https://hackmd.io/@benjaminion/rk2OEQ64L)
- EthCC活动期间还举行了一次特别会议，此处是[摘要笔记](https://github.com/ethereum/eth2.0-pm/issues/131#issuecomment-594632185)，基本上可以说是“官方”测试网的初步计划

## 无状态以太坊 (即Eth 1.x)

- 2月25日进行了一次[无状态以太坊会议](https://github.com/ethereum/pm/issues/153)，此处是Griffin的[整理](https://blog.ethereum.org/2020/02/28/eth1x-files-digest-no-3/)
- Piper Merriam在EthCC上的演讲 (参见下文) 是针对当前无状态以太坊进程的一次总结

 
&lt;br/&gt;

# EthCC



下面是EthCC期间所有关于Eth2演讲的汇总（演讲视频和幻灯片），我额外加入了一些Eth2相关演讲。

#### **第一日 2020/3/3**

Will Villanueva：来自Quilt团队的阶段2更新 ([视频](https://youtu.be/wrv-LmV0bkQ?t=231)/[幻灯片](https://docs.google.com/presentation/d/1ECy4tswiG23ncCKGsP4cWTVZANzXQESWm5hl7-Yea9Y/edit#slide=id.p))，由于投影出现问题，十分钟后变成现场问答环节

EF研究团队：Eth2Real工作坊 ([视频](https://www.youtube.com/watch?v=kfKOg4slEac)/[幻灯片](https://docs.google.com/presentation/d/10B6qfJIEaOq2X0LmgfNLIIUfgQ-l6ylFRNdUTitiMzw/edit#slide=id.g704a79fd8e_2_0))，遗憾的是视频中丢失了许多片段

Vitalik Buterin：资助生态系统的各基础项目 ([视频](https://www.youtube.com/watch?v=O0Tca-GV5mk))，开头丢失，音质在七分钟之后会好一些

Joseph Lubin：主题演讲/炉边谈话 ([视频](https://youtu.be/PtZj2H1zIZA?t=499))

Monnot Barnabé：RIG Bouillabaisse: eth2以及其他激励机制 ([视频](https://youtu.be/9srQ4H1NRzc?t=516)/[幻灯片](https://github.com/ethereum/rig/blob/master/assets/pdf/rig-ethcc.pdf))，请注意视频的标签有误

Vlad Zamfir: 谈CBC Casper中的活性 ([视频](https://www.youtube.com/watch?v=fepAqvd1Gfw))

Cayman Nava：Eth2使用简单序列化 ([视频](https://youtu.be/QXtVAHysxZ8?t=25))

#### **第二日 2020/3/4**

Aditya Asgaonkar：Eth2.0的设计选择 ([视频](https://www.youtube.com/watch?v=Hw58XA-oDjw)/[幻灯片](https://docs.google.com/presentation/d/17zA4nCAakHUIgdlWBH7IjbEAlIvUKGXL-m1YhqReUUc/edit#slide=id.p))

Mikerah Quintyne-Collins：Eth2.0中的验证者隐私 ([视频](https://www.youtube.com/watch?v=WC0GPPZ-qVg))

#### **第三日 2020/3/5**

Alex Stokes：Eth1遇上Eth2：预知未来 ([视频](https://www.youtube.com/watch?v=9wf7HkYSWiw)/[幻灯片](https://docs.google.com/presentation/d/1KJ8d4gDaGwWo2btbVRYFoDAIKBeacKXgbOlBULXxt7Q/edit#slide=id.p))

Piper Merriam：无状态以太坊 ([视频](https://youtu.be/9NJcYX2gfXM?t=160))

Christopher Goes：Eth2.0的跨区块链通信 ([视频](https://www.youtube.com/watch?v=GhYcvQi2f9c))

Mehdi Zerouali：Lighthouse：通向Eth2主网 ([视频](https://youtu.be/DPuGNLIQClI?t=76)/[幻灯片](https://docs.google.com/presentation/d/1n3MFGIjfMCElZCKuwrLAQPjhgmG6P8NKOegl3J10XBw/edit#slide=id.p1))

&lt;br/&gt;

# 研究工作



Mikhail Kalinin目前正致力于 Eth1 &lt;-&gt; Eth2双向桥接的研究，其中在Eth1 链上运用“最终性小工具” (finality gadget) 正处于讨论阶段。Mikhail在EthResearch的贴文中对[最终性小工具](https://ethresear.ch/t/on-the-way-to-eth1-finality/7041?u=benjaminion)进行了分析。对于双向桥接这类架构而言，是否能够观测到信标链至关重要，最近Mikhail还撰文介绍了[FFG客户端的可能雏形](https://hackmd.io/@n0ble/rkmHGWkMU)。

目前有许多工作围绕着无状态以太坊在展开。此处是[提供见证 (witnesses) 所面临挑战](https://ethresear.ch/t/the-direct-push-model-cant-handle-stale-witnesses/7019?u=benjaminion)的讨论。以下还有Sam Wilson的相关演讲。

Dankrad简要叙述了[原子跨分片交易](https://ethresear.ch/t/the-train-and-hotel-ee/7021?u=benjaminion)的一种不需要太多设备的实现方式。

[这篇文章](https://ethresear.ch/t/zero-knowledge-tooling-for-an-eth-2-0-wasm-execution-layer/7080?u=benjaminion)分析了一些零知识加密原语在Ewasm上的性能表现，这对于阶段2来说可能很有价值。

&lt;br/&gt;

# 其他新闻



[Nimbus](https://our.status.im/nimbus-status-update-february-so-far/)和[Prysm](https://medium.com/prysmatic-labs/eth-2-0-dev-update-45-cross-compiles-slashing-protection-2e6359e15195)的开发进展。

上周的[EthLondon黑客松](https://twitter.com/protolambda/status/1234155380487393280)有许多参与者！有些人赢得了现金奖励！

Sam Wilson在Eth222期间的有关[Dynamic State Access &amp; Solidity](https://docs.google.com/presentation/d/1X2ISqI3Fd8Jol8Kf0IRtnk27BV3jnX3jhn2VXLhQMHI/edit#slide=id.g70cfee5e5c_0_0) (获取动态状态&amp;Solidity) 的幻灯片。如果状态的获取是“静态的” (提前可知)，那么 (在未来的无状态以太坊中) 提供见证会更加容易。这一系列[推文](https://twitter.com/_SamWilsn_/status/1234823421122564096)解释了原因。在演示中，Sam给出了一种提示开发者非静态 (动态) 状态获取的Solidity方式。他的[etheresear.ch贴文](https://ethresear.ch/t/automated-detection-of-dynamic-state-access-in-solidity/7003?u=benjaminion)中还有一些不错的讨论。

Quilt团队的[阅读清单](https://github.com/quilt/reading/issues)。

Vitalik在BlockTV中的十分钟[访谈](https://blocktv.com/watch/2020-03-04/5e5fab84186fc-vitalik-buterin-talks-eth-2-and-the-future-of-money)，涉及Eth2等内容。

 &lt;br/&gt;

# 最后的最后……

我仍然在全然投入有关[Eth2规范注解](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/introduction)的工作。进展不是很快，主要原因是有许多需要深究的主题，探索过程非常令人着迷。

无论如何，希望读者能去看看，期待你的反馈。

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth 1.x：无状态以太坊峰会回顾]]></title><description><![CDATA[继EthCC落幕，Eth1.x团队针对无状态以太坊工作进行首次峰会。]]></description><link>https://www.ethereum.cn/eth1x-files-stateless-summit-summary</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-files-stateless-summit-summary</guid><pubDate>Sat, 22 Feb 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/03/12/eth1x-files-stateless-summit-summary/)





&lt;br/&gt;


![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)
&lt;br/&gt;

*译者序：以太坊无状态峰会于上周EthCC会议之后举行，为期两天。本文是Griffin Ichiba个人对于无状态以太坊峰会的总结，包括一些宏观见解、决策以及会议结果。*

 &lt;br/&gt;

# 会议概览

本次峰会为期两天，没有严格的组织形式。第一场会议大家集中在一起，以便探讨一些较为宏观的重要主题，然后分成两三个小组同时进行讨论。期间总共约有30名与会者，小组人数非常适宜，既可以进行深度探讨，还可以轻松地问答交流。当然，这也是一次与“网友”线下会面的机会，并且能够与整个团队建立更人性化的关系。

我认为对于大多数参加此次峰会的人（包括我自己），我们对需要解决的问题和可能的解决方案有了更深的认知。领导Eth 1.x的成员 (Piper、Alexey及其团队) 得以为其他参与者进行讲解，而参与者也能尽情发问，省去了在论坛发帖询问琐碎问题的顾虑。

我之所以强调这一点，是因为这次聚集的主要目的之一就是要更清楚地呈现工作中的机遇和挑战。将工作清楚地解释给感兴趣的人听，以便他们更好地参与进来。我想说的是，峰会在这方面取得了巨大成功，到目前为止我们吸引到了更多人参与Eth 1.x的工作。

 &lt;br/&gt;

# 会议主题

会议可以说是几乎涵盖到了所有主题。大家讨论到了[**Eth 1.x技术树**](https://blog.ethereum.org/2020/01/28/eth1x-files-the-stateless-ethereum-tech-tree/) (tech tree) 中的大部分问题，并且正如上一节所述，本次峰会的真正目的是将大家聚集在一起，就无状态以太坊的总体方向达成共识。

译者注：Eth 1.x技术树在本系列前序文章[《ETH1.x：如何通向无状态以太坊》](https://news.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree/)中进行过专门探讨。



我们需要解决的核心问题是什么？首个要达到的“里程碑”是什么？是否值得为历史见证 (witnesses) 投入精力到零知识方案中？

我整理的会议主题如下：

- 同步原语
- 二进制树转换
- EVM
- 无状态以太坊中的数据传递
- 见证规范草案

Alexey评论说，这次峰会的目的是首先处理线上无法协调的事，然后将可以线上解决的事留待完成。相较于线上，分歧更适合面对面解决，并且针对复杂的问题能够更快地做出决策。

因此，除了对讨论的核心主题进行一般性总结和分享之外，还强调对关键决策进行论辩，例如首要工作是什么，或者工作开始之前需要哪些新工具。更重要的是，这次峰会有利于更准确地定义和缩小工作范围，并且为工作的最终成果提供了多个观察角度。

 

&lt;br/&gt;



# 会议决策和新方向

再次强调：这只是我个人对峰会进行的记忆转储，我还没有回顾过我的笔记和录音。以下是我个人整理的要点，不按特别顺序排列。这些在会议中讨论得出的新见解将会影响未来的工作走向。

同步方面，具体来说，要推进无状态工作， `getNodeData` 是必须要进行改动的关键内容。在过渡到二进制树之前，这个问题亟待解决，并且需要所有客户端团队之间的协作。Geth团队的Felix围绕同步开展了卓有成效的讨论，鼓舞人心的是关于同步的替代建议大多数都是殊途同归。**优化同步有利于更顺利地过渡到二进制树。**

在此之前，大家认为平稳过渡到二进制树需要暂时中断区块链并重新计算新的二进制状态。但新的想法是，**如果客户端之间充分协调，那么无需网络中断即可完成过渡。**

新想法的融合在一定程度上折衷了先前要为状态建立以太坊专用数据传输网络的计划。首先，我们邀请了更专业的嘉宾来说明要构建一个这样的网络有多难。其次，我们可以通过优化同步来逐步建立这样的网络，而更简易的版本可以立即投入使用（例如仅用于区块头、交易和收据），之后再逐步进行升级。

针对EVM的改动是最复杂的，需要对EVM进行哪些更改以使其兼容无状态以太坊，还没有明确的决策或解决方案。较为棘手的是，许多考虑中的建议都不是达到无状态的必要条件，这就涉及到如何权衡这些额外建议的价值、复杂度以及工作量。我想值得注意的是，无论如何，某些操作的gas费用预计会提高。但对于EVM来说还没有定论，除非获得更多数据，不然我们也无法获知最佳路径。

目前推进中的一些工作是为了提高效率。主要有两种形式：一类是工具，使数据收集和分析更加容易，另一种是资源类，以提高工作效率，例如为新研究人员提供无状态文档。

目前的分歧集中在两个方面：在短期内应该投入多少精力来构建工具以及最需要哪些工具。在接下来的几周内，我们将对技术树进行修缮，使其更能起到代表无状态以太坊计划的作用。这既可以帮助社区了解工作进展，也能提高新成员的参与效率。

如果有任何问题，希望提出新主题或加入无状态以太坊的研究工作，请在ethresear.ch上进行自我介绍，或在Twitter上联系@gichiba或@JHancock。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/02/21）]]></title><description><![CDATA[为你悉数Eth2问题解决方案。]]></description><link>https://www.ethereum.cn/wnie2-2020-2-21</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-2-21</guid><pubDate>Sat, 22 Feb 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200221)



&lt;br/&gt;

# ETH2进展更新（截至2020/02/21）



本周非技术类必读文章是Trent Van Epps的[《Eth2的5大误解》](https://medium.com/@trenton.v/eth2-misconceptions-top-5-6edafaeccac1)。此文章记录了大众对Eth2产生的部分疑问与恐惧。

另一篇首选文章是Quilt团队的[《阶段2的简史与发展道路》](https://ethresear.ch/t/a-short-history-and-a-way-forward-for-phase-2/6982?u=benjaminion)，更具技术性，但值得仔细阅读。

 &lt;br/&gt;

# 阶段0：信标链

当前版本v0.10.1尚未更新，但是正在进行准备工作。首先，在[意外多重存款激励](https://github.com/ethereum/eth2.0-specs/issues/1609)的推进下，对验证者有效余额方式进行[调整](https://github.com/ethereum/eth2.0-specs/pull/1627)（由于滞后现象）。

网络规范也有所更新：[DoS预防验证条件](https://github.com/ethereum/eth2.0-specs/pull/1617)；[区块gossip的下界slot条件](https://github.com/ethereum/eth2.0-specs/pull/1616/files)；[子网验证以抗DoS](https://github.com/ethereum/eth2.0-specs/pull/1615/files)（也会稍微影响信标链规范）。我好奇是否由于最近的安全审核才进行这些更新，因为我记得这些更新从未被提起过…

## 🔻BLS签名标准相关新闻

几周前，来自希腊的Greg在质押大量资金以加入Prysm测试网时，却发现[资金损失惨重](https://twitter.com/gregthegreek/status/1222584063443308550)。在此次事件中，只有Goerli 测试网里质押的Eth丢失了，但却强调了一个事实，即Eth1存款合约并未验证存款的BLS签名。目前，由于gas费用的问题，Eth1的签名验证或许不可行，但有人建议下次Eth1分叉可以[通过预编译支持BLS12-381](https://hackmd.io/@ralexstokes/rJegpNo7I)。另外，还可以考虑已提出的[EIP-1962](https://eips.ethereum.org/EIPS/eip-1962)，其中包括多种曲线。这两种方法中的其一都可以使存款在不可逆转确认之前被充分验证，也允许Eth1成为Eth2系统的轻客户端。但其缺点是，将导致存款合同的部署时间取决于下一次Eth1分叉（代号“柏林”）的实行时间。

另外，[上次](https://hackmd.io/@benjaminion/wnie2_200207#BLS-signatures)我指出[BLS Hash-to-curve标准](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-05)提案或许仍需要进行修改。此事已得到确认，很可能于3月份进行更改。此后，预计不会有进一步的更改。一切正常进行是最好不过的，但即使不那么顺利，我们的计划也不会受太大影响。

## 🔻测试网

Eth2 Prysm测试网会[逐渐完善](https://beaconcha.in/)。目前显示有41686个验证者，已处理超过30万个slot。

与此同时，Lighthouse团队正在测试其下一个[大规模测试网](https://twitter.com/paulhauner/status/1226817210057805825)，再向公众开放。请密切关注他们的进展！

## 🔻测试

欢呼雀跃！Protolambda的[REPL测试工具](https://github.com/protolambda/rumor)用于客户端与网络调试，现在它有[名字](https://twitter.com/protolambda/status/1227767117098835968)了，称为Rumor！（我为拼错rumour这个单词感到羞愧，不过只能这样了🤷‍♀️。

 &lt;br/&gt;

# 阶段1：分片链

提醒一下，[阶段1的规范](https://github.com/ethereum/eth2.0-specs/tree/dev/specs/phase1)是RFR。

 &lt;br/&gt;

# 阶段2：执行环境

如上所述，Quilt团队写了一篇关于[阶段2现状](https://ethresear.ch/t/a-short-history-and-a-way-forward-for-phase-2/6982?u=benjaminion)的出色文章。

此文章促进了[阶段2规范](https://github.com/ethereum/eth2.0-specs/pull/1628)草案的着手编写。这是巨大的进步！与其他阶段一样，该规范将不断完善，多次重写，但这却是向前迈出的一大步，至少有具体草案以供修改。🎉

Jonny Rhea和Matt Garnett正在[开发](https://twitter.com/matt_garnett/status/1228426160754659328)用于构建执行环境的[工具套件](https://github.com/quilt/ease)。他们已经构建了一个[简单EE](https://github.com/quilt/see)作为demo。这是Jonny制作的[演示过程](https://twitter.com/JonnyRhea/status/1230195894236086277)，阐释其工作原理。去看看他们的成果吧！🙂

 &lt;br/&gt;

# 常规会议

## 🔻实现者

通常情况下，本周会有一个开发者电话会议，但是由于[斯坦福区块链大会](https://cbr.stanford.edu/sbc20/)，本周电话会议被推迟到下周。

## 🔻Eth 1.x

Griffin Ichiba Hotchkiss在Eth 1.x系列中发表了另一篇出色的文章《Eth1.x：无状态以太坊工作报告》。这对于Eth1到Eth2的可能性过渡来说非常重要，同时也为Eth2无状态研究提供了信息。

我听说下一次无状态以太坊电话会议将于2月25日（星期二）世界标准时间16：00进行，但我的Telegram群组还有500条未读消息，因此会议可能不是在这个时间进行。

 &lt;br/&gt;

# 研究工作

这是我之前遗漏的[GHOST + Casper](https://github.com/ethereum/research/blob/master/papers/ffg%2Bghost/paper.pdf)(“Gasper”) 正式研究。这两种机制在Eth2中相结合的方式非常新颖，很高兴能看到详细分析。

经过一段时间的沉寂，[ethresear.ch](https://ethresear.ch/)上周又掀起了头脑风暴🔥：

💎 [《拜占庭语境下的时间即公共服务》](https://ethresear.ch/t/time-as-a-public-service-in-byzantine-context/6895?u=benjaminion)，来自新的PegaSys同事Alex Vlasov。本文并非特别针对Eth2，但对于依靠时间报告准确性的分布式系统来说是很有价值的参考因素。

💎 后续文章：[《时间攻击和安全模型》](https://ethresear.ch/t/time-attacks-and-security-models/6936?u=benjaminion)，包含对Eth2信标链安全模型的考量。

💎 **Vitalik对[区块链如何从51%攻击中恢复](https://ethresear.ch/t/timeliness-detectors-and-51-attack-recovery-in-blockchains/6925?u=benjaminion)有了新的思考**

💎 Dankrad正在尝试[使用托管根 (custody roots) 防止分片状态数据丢失](https://ethresear.ch/t/preventing-shard-state-data-loss-using-custody-roots/6952?u=benjaminion)，在接近于无状态的Eth2中很好地展示了托管证明 (proofs of custody) 和数据可用性检查，并提供了成本估算。

💎 PegaSys：Nicolas Liochon就[“去信任验证者被敲诈”](https://ethresear.ch/t/trustless-validator-blackmailing-with-the-blockchain/6922?u=benjaminion)主题发起了热烈讨论。他指明了一种攻击方式，即攻击者取得或假装取得他人私钥而进行敲诈。之前我以为攻击者只能通过导致验证者被罚没来取乐，而无法从中获利。敲诈验证者这种攻击方式确实很狡猾。

💎 Casey提出一种用于[跨分片传输ETH的协议](https://ethresear.ch/t/a-protocol-for-cross-shard-eth-transfers-even-more-simpler-and-transparent/6996?u=benjaminion)，该协议比之前的方案更简单更透明。

💎 最后，Quilt团队的Sam发表了其[“在Solidity中针对动态状态访问的自动检测”](https://ethresear.ch/t/automated-detection-of-dynamic-state-access-in-solidity/7003?u=benjaminion)的相关工作，目的在于检测合约仅进行静态访问。也就是说，合约只访问预先可知的状态部分，这有助于在交易中构建状态见证。

 &lt;br/&gt;

# 其他新闻

▶ 本条与Eth2没有直接关联，Vitalik在斯坦福区块链会议上针对51％攻击发表了[演讲](https://www.youtube.com/watch?v=BXLcKQ6fLsU&amp;feature=youtu.be&amp;t=19200)。非常值得一看。

▶ PryLabs团队的[最新进展](https://medium.com/prysmatic-labs/eth-2-0-dev-update-44-more-optimizations-6ab9a4e328c9)。

▶ 我很高兴看到EF博客仍在持续更新。此处是Carl的Eth2质押系列的新文章（《Eth2 Staking系列：共识机制篇》），本文阐释了Eth2的混合共识机制。

▶ 此处是EthDenver的[Eth2赏金获得者](https://twitter.com/dannyryan/status/1229613927044173824)！恭喜！🏆

▶ Vitalik[在EthDenver中谈到Eth2](https://www.youtube.com/watch?v=gRBCD5nzBdQ&amp;feature=youtu.be&amp;t=40131)（大约从5分钟处开始）。摘要：1.Vitalik对Eth2持乐观态度；2.即使没有Vitalik，我们也能达成目标。（视频中还有很多其他精彩的Eth2主题演讲，值得一看）

▶ 关于验证者奖励

- [《以太坊2.0验证者经济激励模型》](https://certik.org/blog/technology/validator-economic-incentive-model-ethereum/)，来自CertiK
- Herman Junge一直致力于研究[Eth2奖惩机制模拟器](https://github.com/hermanjunge/eth2-reward-simulation)，他即将发布一篇相关文章。

 &lt;br/&gt;

# 最后的最后

是时候揭开我个人项目的神秘面纱了！

🎉[**以太坊2.0规范注解版**](https://benjaminion.xyz/eth2-annotated-spec/)

到目前为止，我正在完善[阶段0信标链规范](https://benjaminion.xyz/eth2-annotated-spec/phase0/beacon-chain/introduction)的注解，已经有了很多内容，但仍然还有很多工作需要完成（完成信标链注解；校对；建立GitHub；完善内容的可迁移性；规范的剩余部分😅）。

这是一项巨大的工程，可能会耗时许久。但与此同时，请点击查阅，希望能得到大家的反馈！

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth2 Staking系列#2：共识机制篇]]></title><description><![CDATA[Eth2混合共识机制LMD-GHOST和Casper FFG如何保障系统安全性、活性及异步性。]]></description><link>https://www.ethereum.cn/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat</link><guid isPermaLink="false">https://www.ethereum.cn/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat</guid><pubDate>Fri, 14 Feb 2020 00:00:00 GMT</pubDate><content:encoded>来源：[Ethereum Blog](https://blog.ethereum.org/2020/02/12/validated-staking-on-eth2-2-two-ghosts-in-a-trench-coat/)





&lt;br/&gt;

![质押1.png](https://i.ibb.co/WyP26VY/1-8cf3398852.png)

&lt;br/&gt;



*感谢Sacha Yves Saint-Leger和 Danny Ryan的审校。*

本期我们的主题是**eth2背后的共识机制**。Eth2采用了一种新颖的方式来判断区块链的前部区块和组成区块。

Eth2混合了两种机制（LMD-GHOST及Casper FFG）以达成共识，不仅使得网络在正常运行时能够安全快速，并且在受到攻击时也能保障安全性。

 &lt;br/&gt;

# 三元悖论

[FLP不可能性](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf)（FLP impossibility）是分布式计算领域的一个关键成果，其指出**分布式系统不可能同时具有安全性(safety)、活性(liveness)和完全异步性(full asynchrony)**，除非是在对系统做出不合理假设的情况下。

***安全性***指决定不能被撤销，***活性***则指针对新事物做出决定。如果在信息传递中没有时间限制，那么该协议是***异步***的。



&lt;br/&gt;


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/1RGdgTn/1-2.png&quot;/&gt;&lt;/center&gt;
&lt;br/&gt;



如果节点能够可靠地进行通信，始终诚实地遵循协议且永不宕机，那么要达成共识非常容易，但这不是真实情况。当这些假设不成立时，FLP不可能性证明了至少要折衷以下三者中的一项：安全性、活性或完全异步性。

 

&lt;br/&gt;

# 分叉选择规则：GHOSTs

Eth2使用[Greedy Heaviest Observed Subtree](https://eprint.iacr.org/2013/881.pdf) (GHOST，贪婪最重可观察子树协议) 作为其分叉选择规则。在GHOST协议中，获得投票数最高的分叉将被选为链头（将每个分叉区块及其各自子区块的所有票数计入考虑）。

[换句话说](https://vitalik.ca/general/2018/12/05/cbc_casper.html)，每当发生分叉时，GHOST会选择获得更多消息支持的区块子树（多数最近消息要么支持该区块，要么支持该区块的其中一个子区块）。此算法会一直重复这种操作，直至达到没有子区块的区块。

与最长链规则相比， GHOST的优点在于能够在网络延迟较高时降低攻击效率，同时最小化链重组的深度。原因是即使攻击者能够高效地在其分叉链上继续产生区块，尝试使该链成为最长链，GHOST也会选择另一条票数更高的分叉链。

具体来说，Eth2在其PoS机制中采用了GHOST的一个变体，即**Latest Message Driven GHOST (LMD-GHOST，由最新消息驱动的GHOST)**。LMD-GHOST背后的理念是计算链头时，只需考虑每个验证者最近的投票，而不是过去产生的任何投票。这种方式极大地减少了运行GHOST所需的计算量，因为执行分叉选择规则时需要考虑的分叉数量，不可能大于验证者的数量（Big O表示法中的O(v)）。

在GHOST的规则中，验证者/矿工随时可以在区块链上添加新的区块（活性），并且可以在区块链历史中的任何时间点进行这种操作（异步性）。因此**基于GHOST协议的区块链具备活性和完全异步性，根据FLP不可能性，我们可以推断出其安全性会大打折扣。**



&lt;br/&gt;

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/2kMnTG3/2-2.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;



安全性的折衷会以区块重组的形式表现出来，区块链可能会突然跨深度任意切换分叉。这显然是不理想的状况，eth1链应对这种情况的方式是让用户假设矿工的区块需要多久才能被全网接收到，因此交易需要等待x个确认。然而eth2并不会做出此类假设。

 

&lt;br/&gt;

# 友好的确定性小工具（FFG）

失去安全性的区块链是无效的，因为无法针对任何决定达成共识，用户也无法就链的状态达成一致。[Casper the Friendly Finality Gadget](https://arxiv.org/pdf/1710.09437.pdf) (Casper FFG)便因此诞生。Casper FFG机制在做出决策的时候更倾向于保障安全性而非活性。这就意味着虽然Casper FFG能做出最终性决策，但如果网络状态不理想，它可能无法就任何事情做出决策。



&lt;br/&gt;

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/CQm6rcd/3-2.png&quot;/&gt;&lt;/center&gt;
&lt;br/&gt;



FFG机制是经典[实用拜占庭容错](http://pmg.csail.mit.edu/papers/osdi99.pdf)（PBFT）在加密经济学领域的一种应用，首先节点表示他们想要就某事达成一致（justification），然后就彼此之间达成的一致性形成共识（finalisation）。

Eth2并不会在每个slot（一个区块生成的预计时间）都进行证明和最终确认，而是每32个slots进行证明和最终确认，每32个slots就称为一个epoch。首先，验证者要对一个epoch中的所有32个区块进行签名，表示就此达成一致。如果2/3的验证者进行了签名，那么这些区块就得到了证明。在后一个epoch中，验证者们会进行一次投票，表明他们看见了之前被证明的epoch，如果有2/3的验证者投票，那么前一个epoch就被最终确定，并且永久地成为Eth2链的一部分。

FFG这种方式十分高明。投票实际上由两个子投票构成，一个用于证明epoch，另一个用于对证明过后的epoch进行最终确认。这节省了很多节点之间额外的通信需求，有助于实现将网络规模扩大至数百万验证者的目标。

 

&lt;br/&gt;

# “同袍同泽”的共识机制

Eth2的共识既仰赖于LMD-GHOST机制（增加新区块，决定区块链链头），也仰赖于Casper FFG机制（最终决定哪些区块成为区块链的一部分）。GHOST强调活性，能够快速高效地将区块添加进区块链，而FFG则与GHOST相辅相成，通过对epochs进行最终确定，弥补了安全性的缺失。



&lt;br/&gt;

![质押10.png](https://i.ibb.co/DDBQfWw/10-69405591a1.png)
&lt;br/&gt;



那么这两个协议是如何合并的呢？具体方式是在基于FFG被最终确认的最近一个区块中运行GHOST。因此，最近一个基于FFG被最终确定的区块总会是区块链的一部分，也就是说GHOST并不需要考虑之前的区块。

正常情况下，区块生成之后获得了2/3的验证者的投票，那么这些区块将通过GHOST协议被添加到区块链的头部，之后，这些区块就会通过FFG被证明和最终确定，而FFG会考虑最近的几个epochs。

如果网络受到攻击，且/或很大一部分的验证者离线，GHOST还是会继续添加新区块。由于GHOST注重活性且缺乏安全性，随着新区块被不断添加进区块链中，可能会对区块链头部进行更改，这意味着节点会持续获取新的信息。另一方面，FFG相比活性更注重安全性，也就是说在网络足够稳定（验证者能够再次进行一致性投票）之前，FFG将停止对区块进行最终确认。

&lt;br/&gt;

------

**以太坊基金会Eth2 Staking同系列回顾：**

**[如何参与eth2 Staking系列（开篇）](https://news.ethereum.cn/validated-staking-on-eth2-0/)**

**[参与Eth2 Staking系列：激励篇](https://news.ethereum.cn/validated-staking-on-eth2-1-incentives/)**

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/02/07）]]></title><description><![CDATA[阶段0信标链规范正在进行安全审计，有望在今年内发布。]]></description><link>https://www.ethereum.cn/wnie-2020-2-11</link><guid isPermaLink="false">https://www.ethereum.cn/wnie-2020-2-11</guid><pubDate>Tue, 11 Feb 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200207)



&lt;br/&gt;

# 要点速览

跟往常一样，首要推荐是Danny Ryan的[《Eth2更新速览》](https://blog.ethereum.org/2020/02/04/eth2-quick-update-no-8/)，在阅读本文前可以回顾一下。

Eth222临近，如果有兴趣或者最近两周在斯坦福大学周边的读者可以点击[此处](https://www.eventbrite.com/e/eth-222-tickets-90667602239)报名。

###  &lt;br/&gt;

# Eth2 AMA

以太坊基金会研究团队本周进行了他们的第三次[Eth2 Reddit AMA](https://www.reddit.com/r/ethereum/comments/ez972u/ama_we_are_the_eth_20_research_team_pt_3/)。

关注点主要集中在[信标链的发布时间](https://www.reddit.com/r/ethereum/comments/ez972u/ama_we_are_the_eth_20_research_team_pt_3/fglqao2/)。**概括来说，信标链可能会在7月发布，或者非常有希望在今年内发布。**作为期望登录信标链测试网的客户端之一的产品负责人（Teku! Teku! Teku!），我对这个预期没有异议，但我们要明白，待到一切准备就绪，自然就水到渠成，而不是依靠一个任意指定的日期。

 &lt;br/&gt;

# 阶段0：信标链实现

**规范正在由Least Authority进行安全审计，预计将在未来几天内发布初步报告，再由以太坊基金会复核之后向大众公布。**

到目前为止，v0.10规范版本的稳定性得到了证明，暂未进行较大改动。如果安全审计的结果显示有问题需要解决，那么将会尽快进行更新。

###  

## 网络

Whiteblock一直在对libp2p gossipsub协议进行一些[细致的基准测试](https://whiteblock.io/testing-gossipsub-with-genesis/)：

*测试工作的前两个阶段表明，Libp2p Gossipsub协议对于以太坊2.0规范而言表现良好。*

但是他们建议后续跟进一些更大范围的测试和实现方面的改进。详细信息参见[此处](https://github.com/whiteblock/gossipsub-testing)。来自去年的某条推文可能是[假新闻](https://twitter.com/DeanEigenmann/status/1137032627230089216)。

###  

## 测试网

Prysm的测试网目前已经超过了20万个slot，拥有35,281个验证者，数量是真正的信标链计划实现的两倍。[据称](https://twitter.com/terencechain/status/1225862506117156864)，Prysm将继续尝试增加验证者的数量。**该测试网最近出现了第一批[自愿退出](https://beacon.etherscan.io/validators#exited)的验证者，这对协议中一个重要部分来说是很好测试。**(这个是包含首次[自愿退出](https://beaconcha.in/block/124256)的验证者的区块)

Lighthouse目前正在重启测试网，目标是运行10万名验证者。

信标链浏览器在提供测试网视图概况方面变现十分突出：[beaconcha.in](https://beaconcha.in/) (试试深夜模式，点击右下角！) ，包括[EtherScan](https://beacon.etherscan.io/)，这两个浏览器都显示了Prysm测试网的情况。Alethio目前正在使用以信标节点为中心的网络状态视图[eth2stats](https://eth2stats.io/sapphire-testnet)。

Bitfly (EtherChain、[beaconcha.in](https://beaconcha.in/)以及[Ethermine的幕后团队](https://twitter.com/trent_vanepps/status/1225925911310151680)) 也在切实向前推进。**他们已经添加了一种功能，用以估算验证者将[何时被激活](https://twitter.com/etherchain_org/status/1221122130877779969)，并且正致力于开发一种[验证者停止工作时](https://twitter.com/etherchain_org/status/1224965122017370114)的提醒服务。不仅如此，他们还建立了一个 [Eth2知识库](https://kb.beaconcha.in/)。**虽然目前只有一个术语表，但这是一个良好开端。我感觉 EtherChain通常被当做Eth1的第二选择，但也许他们的目标是成为Eth2的首要选择。

**与此同时，Nimbus团队首次实现[在移动手机端安装Eth2测试网](https://twitter.com/m_ratsim/status/1224769743892230151)。**他们已经建立了如何在安卓系统中安装Nimbus客户端的[文档](https://our.status.im/building-nimbus-on-android-2/)，因此读者也大可一试。除了手机，[这](https://inversepath.com/usbarmory.html)才是Status团队的Jacek[想要](https://twitter.com/jcksie/status/1222915245750063104)在移动端运行Eth2验证者的地方。

###  

## BLS 签名

随着v0.10.0规范的发布，这种全新的、标准化的数字签名生成方式已经被采用。

关于标准化的说明。在这之前，Eth1在多个候选者中最终采用了SHA3哈希标准 keccak256。不幸的是，在以太坊采用的Keccak和最终发布的标准之间，发生了一个[非常小的改变](https://crypto.stackexchange.com/questions/15727/what-are-the-key-differences-between-the-draft-sha-3-standard-and-the-keccak-sub)，**这意味着Eth1的哈希不再匹配SHA3标准。这个问题不算严重，但是有点恼火，主要是这可能会影响互操作性。**

对于以太坊2.0来说，历史可能会重演。[Hash-to-curve标准相关工作仍在进行中](https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/)。虽然我们之前认为它已经达到稳定状态，但它可能会产生[一些变化](https://github.com/cfrg/draft-irtf-cfrg-hash-to-curve/issues/202)。这不会对以太坊2.0造成任何破坏，但是如果此标准最终偏离我们的预期，则可能会影响与其他链的互操作性。

除此之外，**Shigeo Mitsunari[发布了](https://twitter.com/herumi/status/1225322677902049281)[Herumi库](https://github.com/herumi/mcl)，这是该标准在通用库中的首次高性能实现。**

 &lt;br/&gt;

# 阶段1：分片实现

**针对[阶段1规范](https://github.com/ethereum/eth2.0-specs/tree/dev/specs/phase1)进行了微小更新，即[移除](https://github.com/ethereum/eth2.0-specs/pull/1560)了分片区块的chunking（分块）。**

尽管发生了一些小变动，阶段1规范已经准备好迎接审计。

 &lt;br/&gt;

# 阶段2：执行环境

关于阶段2的最终设计，目前仍存在大量研究和讨论。基本的大方向是高度一致的，然而在精准定义执行环境之前，还有巨大的设计空间有待探索。

Quilt团队[撰写了](https://hackmd.io/@villanuevawill/H1E1LT_z8)一篇关于ETH跨分片转移的文章，启发自Vitalik在ethresear.ch上发表的[相关帖子](https://ethresear.ch/t/an-even-simpler-meta-execution-environment-for-eth/6704?u=benjaminion)。

**Vitalik提议在执行环境中[延迟区块打包](https://ethresear.ch/t/stateless-ees-and-delayed-block-inclusion/6839?u=benjaminion)，以此作为一种抗审查机制。**

 &lt;br/&gt;

# 常规电话会议

## 🔽 **实现者会议**

2月6日进行了第33次会议。

- [会议日程](https://github.com/ethereum/eth2.0-pm/issues/126)
- [会议视频](https://www.youtube.com/watch?v=c8BhhPfdy0A&amp;feature=youtu.be&amp;t=117)
- [我的速记](https://hackmd.io/@benjaminion/SyDfdcFGL)以及[Mamy的笔记](https://gist.github.com/mratsim/1e9feaafd81a2dfa5e7106d08fc2848d)

话题除了最近的常规客户端更新和规范，我们还讨论了为分叉选择规则创建参考测试（reference tests）。

6个月前，我做过这种[预测](https://notes.ethereum.org/@ChihChengLiang/Sk8Zs--CQ/https%3A%2F%2Fbenjaminion.xyz%2Fnewineth2%2F20190802.html?type=book)：“围绕以太坊2.0的阐释性文章无疑会如同雨后春笋一般涌现。” 目前的状况正是如此！我在[eth2.info](https://hackmd.io/@benjaminion/eth2_info)中放了许多链接，但此次电话会议中还涉及到一些更重要的工作。

首先，Quilt 团队已经宣布关于Eth2的书籍正在由Kelvin Fichter领导撰写。这是一次将以太坊2.0方方面面进行文档化的大胆尝试。我们的目标是在接下来的三个月内完成前五章。

其次，Protolambda正在撰写[如何从零搭建信标链客户端](https://hackmd.io/@protolambda/BkfhKHxzI)的有关文章。已经有多人参与其中，包括Leo，他在此次电话会议中提到他希望[EthBarcelona](http://ethbarcelona.io/)在今年5月完成初版草稿。

## 🔽 **Networking**

1月29日进行了第三次networking电话会议。此处是[我的笔记](https://hackmd.io/@benjaminion/HJTHyWyf8)，其中包含Protocol Labs的[重大更新](https://github.com/ethereum/eth2.0-pm/issues/124#issuecomment-579740557)、有关discv5节点恢复协议的讨论、对当前测试网的回顾，以及一些时间同步方面的工作等等。

## 🔽 **Eth 1.x**

Griffin Ichiba Hotchkiss在以太坊基金会博客发布了一篇非常不错的阐释性文章，主题是[实现无状态以太坊1.0的路径](https://news.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree/)。我们之前多次强调，**实现“无状态”对是Eth2成功与否的关键因素，也是未来将Eth1并入Eth2的先决条件。**

据称，下一次无状态以太坊电话会议将会于2月25日16:00（UTC）举行。

 &lt;br/&gt;

# 研究工作

Alex Vlasov仍然在思考如何使Eth2的时间协议具有拜占庭容错性。他的最新文章[《时间在拜占庭环境中即公共服务》](https://hackmd.io/@ericsson49/SybaHTcMI)。

 &lt;br/&gt;  

# 其他新闻

- [Prysmatic Labs](https://medium.com/prysmatic-labs/eth-2-0-dev-update-42-rapid-iteration-7abdd62109e3)和[Lighthouse](https://lighthouse.sigmaprime.io/update-21.html)都发布了进展更新。**近来各个团队都一直疯狂致力于优化工作（我们的团队PegaSys也是如此）。**

- 上周阐释性文章推荐：

  🔶Alethio团队的Alex Tudorache ：[A Validator’s Journey Through the Beacon Chain （验证者的信标链之旅）](https://medium.com/alethio/ethereum-2-a-validators-journey-through-the-beacon-chain-843f70aaab2e)

  🔶 Jim McDonald对Eth2的[网络健康指标](https://www.attestant.io/posts/defining-ethereum-2-network-metrics/)提出了一些建议。

  🔶 Rocketpool基于[他们的文章](https://medium.com/rocket-pool/rocket-pool-beta-v2-node-operators-guide-d2b691822c61)制作了一个[运行信标链验证者](https://www.youtube.com/watch?v=SGSlbEZLk-I)的视频教程（作为Trust-Less会议的一部分，下面会提到）

  🔶 上周举行了Trust-Less虚拟会议，其间有一些关于Eth2的演示。Prysmatic Labs的Terence在会议上针对信标链和Prysm客户端做出了[概述](https://www.crowdcast.io/e/trust-less-2020-validator-conf/register?session=23)，之后Collin Myers以[Eth2验证者经济学](https://www.crowdcast.io/e/trust-less-2020-validator-conf/register?session=24)做了主题演讲。

   &lt;br/&gt;

# 最后的最后

上周是Vitalik的生日，我给我的家人了播放这个[Vitalik鼓掌](https://www.youtube.com/watch?v=7lmNpMSPu0k)的视频。我真的错了，直到现在他们已经哼唱了一整周，对此我已无能为力。还好他们没发现这个[10小时的版本](https://www.youtube.com/watch?v=rlM7gsUY9Gw)。

一定要看看这个视频！但是别怪我没警告过你哦！

 

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth1.x：如何通向无状态以太坊]]></title><description><![CDATA[本文将列举并阐释Eth1.x主要工作，最终目标指向无状态以太坊。]]></description><link>https://www.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-files-the-stateless-ethereum-tech-tree</guid><pubDate>Fri, 07 Feb 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/01/28/eth1x-files-the-stateless-ethereum-tech-tree/)





&lt;br/&gt;


![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)
&lt;br/&gt;



当我开始着手撰写一篇文章，意图详细介绍以太坊1.x研究的“路线图”，以及如何通向无状态以太坊，却意识到严格来说，这完全不能被定义为传统意义上的路线图。 虽然1.x团队有着共同的目标，但却是一个兼收并蓄的集体，开发者和研究者独立地进行着错综复杂的工作。因此，也不存在“官方”路线图一说，但这并不意味着混乱无序。团队工作遵循一种默认的“次序”，例如某些工作必须要优先进行，某些解决方案是互斥的，还有一些工作可能有所裨益但却不是必要的。

如果不用“路线图”来描述通向无状态以太坊的过程，那么是否有更好的比喻呢？要找到一个合适的比喻确实不容易，但我觉得无状态以太坊就像是[科技树（tech tree）](https://en.wikipedia.org/wiki/Technology_tree)中的“全属性”。

有些读者可能会立即明白这个类比，那么接下来的几段可以跳过。有些读者可能不是游戏爱好者，我会稍作解释：**科技树（tech tree）是游戏中的一种常见机制，玩家能够解锁和升级新的符咒、技术或技能，通常以松散的层次或树状结构展现分类。**



&lt;br/&gt;


![1.x6.png](https://i.ibb.co/c1TnhrX/1-x6-4109e0d74b.png)
&lt;br/&gt;



通常来说，可以通过“耗费”某种XP（经验点）来获取树中的元素（属性），进而解锁更多高级元素。有时需要获取两个不相关的基本元素才能解锁第三个更高级的元素，有时解锁一个基本技能会为下次升级开放更多新的选择。对于玩家来说，游戏的乐趣有一半是来自于在科技树中选择了与自身角色能力、目标和偏好相匹配的正确路径。

这准确地诠释了1.x团队的状态：不同的技术主题按照松散的层次结构安排，将有限的资源投入研究、实现和测试。就如同在一个好的RPG（角色扮演类游戏）中，经验点是有限的，只有少数有能力的、有干劲的人才能在一两年内点满解锁所有技能。每个人都朝着同样的终点进发，但是到达终点的路径将取决于哪种解决方案得到了完全的研究和采用。

以下是我自制的粗略科技树图。针对排列方式、每个升级及其与整体的关联性，我会稍作阐释。科技树中最终的“全属性”升级就是“无状态以太坊”。也即是指，一个功能齐备的以太坊主网将支持全状态、部分状态和零状态节点，将高效可靠地传递见证（witnesses）和状态信息，并且从原则上来说，对于后续的扩展性也要准备就绪，直到eth2的桥接建设完成且能够登陆eth1链。



&lt;br/&gt;


![1.x8.jpg](https://i.ibb.co/55X3Fmq/1-x8-72a3ad01e9.jpg)
&lt;br/&gt;



*注意：就像之前提到的，这不是“官方”的工作路线。这是我所整理和组织的1.x团队必须解决的关键难题、里程碑和决策，目标是最终实现无状态以太坊。欢迎提供反馈，随着研究的推进，该计划也会随之更新和修订。*

阅读顺序是从左至右，左侧的**紫色**信息是“基本”要素，必须首先进行开发和确定，才能继续推进右侧的要素。**绿色**部分表明这些元素在某种意义上算是“增益”项目，尽管在过渡过程中不是必需，并且在研究方面还不够具体，但还是有可取之处。较大的**粉色**形状代表无状态以太坊的重要里程碑。要完全过渡到无状态以太坊，必须“解锁”图中所有四个主要里程碑。

 &lt;br/&gt;

# 见证范式

在无状态以太坊的语境下，关于见证（witness）的讨论有很多。因此，我提出的第一个主要里程碑是最终的见证范式。这意味着一定要确定状态树和相关见证的结构。可以将规范创建或参考实现视作eth 1.x研究“升级”的地方；围绕状态的新形式展开工作将有助于厘清和集中完成其他亟待解决的问题。



&lt;br/&gt;


![1.x9.jpg](https://i.ibb.co/xD2t1rQ/1-x9-9167bdb761.jpg)
&lt;br/&gt;



## 二叉树

将以太坊的状态切换为二叉树结构非常关键，这可以使得见证足够小，在进行网络通讯时避免带宽/延迟问题。在[上次的研究者会议中](https://blog.ethereum.org/2020/01/17/eth1x-files-digest-no-2/)，转换为二叉树结构将需要保证以下两种互斥策略之一：

💫 渐进式。如同[忒修斯之船](https://en.wikipedia.org/wiki/Ship_of_Theseus)，当前的十六叉状态树将在很长一段时间内逐段进行转换。通过这种方式，任何涉及状态部分的事务或EVM执行都会自动将状态更改编码为新的二进制形式。这意味着采用“混合”树结构，休眠的状态部分依然保留当前的十六进制形式。该过程实际上永远不会完成，并且对于客户端开发者来说实施难度很大，但是在很大程度上将使用户和更高层的开发人员免受第0层幕后发生的更改的影响。

💫 干净利落。也许这种策略更切合状态数变更的重要性，该策略将通过规划多次硬分叉为过渡过程制定清晰的时间线，计算状态的二进制树新表现形式，一旦新的状态计算完成就持续以二进制形式表示。尽管从实现的角度来看没那么复杂，但是需要协调所有节点运行者，并且几乎可以肯定会给网络带来一些（有限的）中断，这可能会影响过渡期间开发者和用户的体验。另一方面，对于更长远的eth2过渡计划来说，该过程具有一定的参考价值。

不管选择哪种过渡策略，二进制树都会是见证的基础结构，即构成状态树的哈希的顺序和层次。如果不进行优化，通过粗略计算（2020年1月），十六进制树结构中见证的大小将从约800—3400 kB减小到约300—1400 kB。

 &lt;br/&gt;

## 代码分块 (merkleization)

见证的一个主要组成部分就是代码。如果不进行代码分块，包含合约调用的事务将需要该合约的完整字节码，以验证其codeHash。代码大小取决于合约，可能会是非常庞大的。**代码的‘merkleization’是一种拆分合约字节码的方法，只需要生成代码的一部分即可生成并验证交易的见证，这是一种大大减小见证平均大小的技术。**拆分合约代码有两种方法，目前还不清楚两者是否互斥。

​    🔷 “静态”分块。将合约代码拆分为固定大小（约32个字节）。为了使分块后的代码正确运行，这种方法还需要在每个代码块中包含一些额外的元数据。

​    🔷“动态”分块。根据代码本身的内容将合约代码拆分成多块，并按照其中包含的特定指令（JUMPDEST）进行分割。    

乍一看，“静态”分块方式似乎更可取，以避免抽象泄漏，即防止拆分后的代码内容影响较低级别的代码块，这种情况在“动态”分块方式中也可能出现。话虽如此，这两种方式还尚待完全测试，因此都只是作为考虑选项。

 &lt;br/&gt;

## 零知识(ZK)见证压缩

大约70％的见证都是哈希。也许可以使用ZK-STARK证明技术来压缩和验证那些中间哈希。目前有许多关于零知识相关的研究，但是它到底如何起作用，或者甚至会否起作用都还无法得到明确的答案。因此，从某种意义上讲，这在主要的技术开发路线中属于支线，或者说是不必要的升级。

 &lt;br/&gt;

# EVM语义

我们之前简单谈到了避免“抽象泄漏”，由于它与EVM语义这一里程碑最为相关，因此在这里我将展开阐释一下为何这个概念如此重要。EVM是大型以太坊协议的**抽象**组成部分。从理论上讲，EVM内部运作的细节对于整个大型系统的运作来说应该是不会产生任何影响的，并且反之亦然，系统发生的变动也不应该对抽象的EVM内部产生任何影响。

然而实际上，协议的某些方面的确会直接影响EVM的内部运作。Gas成本就是一个明显的表现。智能合约（EVM抽象内）已通过GAS操作码暴露了各种堆栈操作（EVM抽象外）的gas成本。Gas调度的变动可能会直接影响某些合约的性能，但它取决于具体情况以及合约如何利用其可以访问的信息。

由于存在“泄漏”，因此必须谨慎变动gas调度和EVM执行，避免对智能合约产生意料之外的影响。这使我们必须面对和解决的现实问题，要设计零抽象泄漏的系统非常困难，并且1.x的研究者没有从头重新设计的时间和精力，他们需要在当前的以太坊协议范围内进行工作，目前的虚拟状态机抽象中只存在极少的泄漏现象。

回到我们的主题：见证的介绍将需要更改gas调度。见证需要在网络上生成和传播，并且该活动需要囊括在EVM操作中。EVM语义里程碑的相关主题都与这些成本和激励措施是什么有关，又要如何对其进行估算，以及如何在对其他较高layers影响最小的情况下实现。



&lt;br/&gt;


![1.x10.jpg](https://i.ibb.co/9h7WfHW/1-x10-ac7ae3135c.jpg)
&lt;br/&gt;



## 见证索引/Gas计算

本节可能有许多细枝末节，几句话可能无法解释清楚，在之后我会更详细地进行说明。目前，只需要知道每笔交易都只对区块见证的一小部分负责。生成区块的见证需要进行一些计算，计算由该区块的矿工执行，因此就会产生相关的gas成本，由交易的发起方支付。

由于多个交易可能涉及到状态的同一部分，因此尚不清楚如何最好地估算在广播交易时生成见证的gas成本。如果交易方支付了见证生成的全部费用，我们可以想象这种情况：交易重叠时，区块见证的同一部分可能会被多次支付。需要注意的是，这显然不是一件坏事，只是需要更好地理解这种情况如何为gas激励带来真正的改变。

无论相关的gas成本是多少，见证本身都将需要成为以太坊协议的一部分，并且可能需要并入每个区块成为标准组成部分，就像在每个区块头中加入witnessHash这一条信息。

 &lt;br/&gt;

## UNGAS/无版本以太坊

这一类别主要是与无状态以太坊正交的升级，与EVM中的gas成本有关，并且可以弥补我提到的抽象泄漏。**UNGAS指“无法观测的gas”(unobservable gas)，这是一项修改，明确禁止合约使用**GAS操作码，以防止智能合约开发者对gas成本进行任何预测。UNGAS是[以太坊核心文件](https://corepaper.org/ethereum/#proposals)中的建议之一，以弥补部分泄漏，使将来对gas调度的更改更易于实施，尤其是与见证和无状态以太坊有关的更改。

 &lt;br/&gt;

# 状态可用性

无状态的以太坊不会完全消除状态，而是使状态成为可选项，从而在跟踪和计算的状态量方面赋予客户端一定程度的自由。因此，必须在某个地方提供完整状态，如此一来节点就可以从完整状态中下载部分状态。

从某种意义上来说，现有的范例（例如快速同步）已经提供了此功能。但是零状态节点和部分状态节点的加入使新节点的速度问题变得更加复杂。目前，由于所有节点都保留了当前状态的副本，因此新节点可以从其连接的任何正常节点处下载状态。但是，如果某些节点是零状态节点或部分状态节点，该假设就不再成立。

达成状态可用性里程碑的前提条件与这些因素相关：**节点如何相互告知对方拥有哪些状态；如何在持续变化的点对点网络中可靠地传递这些状态。**



&lt;br/&gt;


![1.x11.jpg](https://i.ibb.co/zNt5P5R/1-x11-0856e8279e.jpg)
&lt;br/&gt;





## 网络传播规则

下图展示了无状态以太坊中可能存在的网络拓扑假设。**在该网络中，节点将需要具备这样一种能力：根据其想要保留的状态的部分（如果有的话）来对自己进行定位。**



&lt;br/&gt;


![1.x12.jpg](https://i.ibb.co/d2GpT5j/1-x12-883e60575f.jpg)
&lt;br/&gt;



诸如[EIP 2465](https://github.com/ethereum/EIPs/issues/2465)之类的改进属于网络传播规则的一般类别：网络协议中的新消息类型，可表明节点拥有哪些信息，并定义如何将该信息传递给其他节点，而这些节点可能处于较差或有限的网络中。

 &lt;br/&gt;

## 数据传递模型/DHT路由

如果上述消息类型之类的改进被接受并实现，节点将能够轻松判断其他节点保留了哪些状态部分。如果所有连接的节点都不具有该节点所需的状态怎么办？

数据传递是一个开放性问题，有许多潜在的解决方案。**一个“主流”的解决方案**就是通过云服务器的HTTP请求提供部分或全部状态。**一个更有野心的解决方案**是采用相关点对点数据传递方案中的功能，允许对部分状态的请求由连接的节点代理，并通过分布式[哈希表](https://en.wikipedia.org/wiki/Distributed_hash_table)查找正确的归属地。

这两个极端方案在本质上并非不兼容，所以鱼与熊掌为何不能兼得？

 &lt;br/&gt;

## 状态切片(tiling)排布

改善状态分布的一种方法是将完整状态分解为多个可管理的部分（切片），将其存储在网络缓存中，这些缓存可以为网络中的节点提供状态，从而减轻了全节点的负担。即使是相对较大的状态切片，区块之间的部分状态切片可能会保持不变。

Geth团队对此进行了一些实验，实验表明状态切片有助于改进状态截图的可用性。

 &lt;br/&gt;

## 链修剪(pruning)

[目前已经有许多关链修剪的文章](https://gist.github.com/karalabe/60be7bef184c8ec286fc7ee2b35b0b5b)，此处就不再赘述。但还是要明确一点，只有通过状态切片和/或DHT路由方案这类解决方案，使新的全节点随时可以使用历史状态截图的情况下，全节点才能安全地修剪历史数据，例如交易收据、日志和历史区块。

 &lt;br/&gt;

# 网络协议规范

最后，无状态以太坊的完整版图将成为关注焦点。见证范式、EVM语义和状态可用性这三个里程碑共同构成了网络协议规范的完整描述：定义明确的升级应编码到每个客户端实现中，并在接下来的硬分叉中进行部署，以使网络进入无状态范例。

本文已经包含了很多背景知识，但图中还有一些细微之处需要解释：

**♦️ 正式的无状态规范**

总言之，我们并不必对完整的无状态协议进行正式定义。直接将参考实现编码，并用作所有客户端重新实现的基础，这也是合理的。**但是，为见证和无状态客户端创建“正式”规范有着不可置否的好处。**这实际上可以作为以太坊黄皮书的扩展或附录，因为规范将精确详细地描述以太坊无状态客户端实现的预期行为。

♦️ **优化Beam Sync、Red Queen’s Sync及其他状态同步方式**

同步方式不是网络协议的关键部分，但却是影响有效节点如何执行协议的细节。Beam Sync和Red Queen’s Sync有助于创建来自见证的状态的本地副本。在决定并实施网络协议的最终版本时，我们需要改进同步方式，以使其适应网络协议。

目前，这还是科技树中的“增益”项目，因其可以独立于其他主题进行开发，并且其实现细节取决于更基础的因素，例如见证范式。**值得注意的是，由于这些协议外的主题无关于“核心”更改，因此有助于实施和测试科技树左侧的根本改进项。**

 &lt;br/&gt;

# 结语

看到这里，我们把科技树从左到右都梳理了一遍。我希望“科技树”中的主题，里程碑以及总体思路有助于厘清“无状态以太坊”的研究范围。

我希望能根据实际进展来更新科技树的结构。正如之前所说，这不是“官方”或“最终”的工作范围，只是目前最为准确的草图。如果您有任何改进意见，请与我联系。

如果您有疑问，希望提出新主题或加入无状态以太坊的研究工作，请在ethresear.ch上进行自我介绍，或在Twitter上联系@gichiba或@JHancock。



&lt;br/&gt;

&lt;br/&gt;





声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[Eth2更新速览#8]]></title><description><![CDATA[存款合约的审计和形式化验证完成、阶段2研究团队、libp2p gossipsub 测试结果...]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-8</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-8</guid><pubDate>Wed, 05 Feb 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/02/04/eth2-quick-update-no-8/)



&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)
&lt;br/&gt;



# **要点速览**

🔹完成对存款合约（deposit contract）字节码的审计和[形式化验证](ttps://github.com/runtimeverification/verified-smart-contracts/blob/master/deposit/bytecode-verification/deposit-spec.ini)

🔹本月关键词：最优化

🔹公布gossipsub[测试结果](https://github.com/whiteblock/gossipsub-testing)

🔹春季活动来袭！会议、黑客马拉松、赏金任务等你参与！

 

&lt;br/&gt;



# 存款合约的审计和验证





Runtime Verification最近完成了对eth2[存款合约](https://github.com/ethereum/eth2.0-specs/blob/dev/deposit_contract/contracts/validator_registration.vy)（deposit contract）字节码的审计和[形式化验证](https://github.com/runtimeverification/verified-smart-contracts/blob/master/deposit/bytecode-verification/deposit-spec.ini)。这是通向eth2阶段0主网之路上的一个重要里程碑。这项工作已经完成，我希望社区能对此进行反馈。如果在正式规范中发现任何漏洞或错误，请在[eth2规范库](https://github.com/ethereum/eth2.0-specs)中发起issue。

[K框架](http://www.kframework.org/index.php/Main_Page)中指定的形式语义明确定义了EVM字节码对应的行为，并证明这些行为成立，其中包括输入验证、对默克尔树迭代的更新、日志等等。**[这里](https://github.com/runtimeverification/verified-smart-contracts/blob/master/deposit/bytecode-verification/deposit-spec.ini.md)**是指定内容的（半）高级讨论，在[这里](https://github.com/runtimeverification/verified-smart-contracts/blob/master/deposit/bytecode-verification/deposit-spec.ini)进一步了解完整的正式K规范。

在这里我要感谢Daejun Park（Runtime Verification成员）所付出的努力，以及Martin Lundfall和Carl Beekhuizen在此过程中提供的许多反馈和评论。

我还是想说，如果形式化验证是你感兴趣或擅长的领域，那么请不吝提供意见和反馈。

 

&lt;br/&gt;



# 上月关键词：最优化





过去一个月的主要工作就是进行优化。

尽管在目前看来，进行10倍优化或100倍优化对以太坊社区来说不太切实，但是要抵达终点，这一阶段的进展也至关重要。

 &lt;br/&gt;

## 🔻信标链优化的重要性

（要使信标链向下兼容，而非提升设备性能）

信标链作为eth2的核心，是分片系统不可或缺的组件。要同步分片，无论是单个分片还是多个分片，客户端都必须同步信标链。因此，要在普通计算机设备上运行信标链和少量分片，最重要的是，**即使在验证者高参与度（约30万以上验证者）的情况下，信标链的资源消耗也要相对较低。**

为此，过去一个月eth2客户端团队的主要工作都集中在优化方面，减少了阶段0（信标链）的资源需求。

值得高兴的是，我们正在取得显著的进展。以下概述性内容并不详尽，但有助于读者了解我们的工作。

 &lt;br/&gt;

## 🔻10万验证者？Lighthouse：轻而易举

几周前，由于出现证明传播中继循环问题，导致节点自身出现DoS错误，Lighthouse关闭了测试网（约1.6万验证者）。Sigma Prime迅速修复了这个漏洞，并且寻求更大更强的测试网，可容纳10万验证者。过去的两周，他们一直致力于优化工作，以期实现这种规模的测试网。

Lighthouse测试网的每次改进，目的是确保成千上万个验证者可以轻松地在小型VPS上运行, 配备2个CPU和8GB RAM。在10万验证者规模的初始测试中，客户端一致使用8GB RAM，然而经过几天的优化，Paul设法将其降低到稳定的2.5GB，并且还有进一步降低的计划。**Lighthouse在状态哈希方面也取得了很大进步，而BLS签名验证被证明是eth2客户端中的主要计算瓶颈。**

新的Lighthouse测试网发布在即。可以进入他们的[discord聊天室](https://discordapp.com/invite/cyAszAh)了解最新进度。

 &lt;br/&gt;

## 🔻Prysmatic测试网规模持续扩大，同步速度显著提升

几周前，当前运行中的Prysm测试网庆祝了其[第10万个slot](https://twitter.com/terencechain/status/1220456877626220544)，验证者数量超过2.8万个。目前，测试网已经超越了18万个slot，活跃验证者数量超3.5万。在维持公共测试网运行的同时，团队还能进行更新、优化、稳定性提升工作是一件非常了不起的事。

Prysm目前正在取得许多实质性进展。在过去的几个月中，我与许多验证者进行了沟通，据他们的体验，客户端一直在显著进步，其中一个令人兴奋的进步是同步速度的提升。**Prysmatic团队将其客户端同步速度从约0.3区块/秒优化到了约20区块/秒，极大地优化了验证者用户体验，使得验证者能够更快地连接并参与到网络中。**

Prysm测试网的另一个优化是加入了[alethio](https://aleth.io/)的新eth2节点监测器，[eth2stats.io](https://eth2stats.io/sapphire-testnet)。这是一项选择性服务，以便节点能够在某个位置汇总统计信息。这将有助于我们更好地了解测试网（或将来eth2主网）的状态。

眼见为实！快来[亲自尝试](https://prylabs.net/)一下吧。

 &lt;br/&gt;

## 🔻proto_array 备受喜爱

Eth2核心规范经常有意明确预期的非最佳行为。可见，优化规范代码的目的是增强可读性，而不是提升性能。

规范规定了系统的正确行为，而算法则是执行指定行为的过程。多种不同的算法都能一直执行相同的规范。因此eth2规范支持各个组件的多种不同实现，因为客户端团队往往会权衡多方因素（例如计算复杂度、内存占用量及实现复杂度等等）。

[分叉选择](https://github.com/ethereum/eth2.0-specs/blob/v0.10.0/specs/phase0/fork-choice.md)（fork choice）就是其中一个例子，此规范用于查找区块链头。eth2规范通过一种简单算法来明确这种行为，以清楚地显示运行部分与边缘情况，例如，当新证明出现时如何更新投票权重，新区块被最终确定后该做什么等等。然而，只是直接实现规范的算法将永远无法满足eth2的生产需求。因此，客户端团队必须在维护客户端运行时思考计算权衡，并且实现更为复杂的算法以满足需求。

对于客户端团队来说，所幸一年前的文件里就有所参考。当时，Protolambda实现了[一系列不同的分叉选择算法](https://github.com/protolambda/lmd-ghost)，并列出了每种算法的优势与权衡取舍。最近，Sigma Prime的Paul发现了Lighthouse分叉选择算法中的一个重大瓶颈，于是就去寻找对策。最后，他在Protolambda的成果中发现了**proto_array** 算法。

虽然为了移植**proto_array** 以适应最新规范耗费了一些精力，但集成之后，**proto_array** 便被证实能够使“运行时间缩短几个数量级，数据库读取也大大减少”。自首次集成到Lighthouse之后，proto_array 很快也被Prysmatic应用到其最新版本中。与其他算法相比，这种算法具备更加明显的优势，proto_array也就迅速成为大家的宠儿。我非常希望未来会有更多其他团队应用起来！

 

&lt;br/&gt;



# 阶段2研究进行时：Quilt、eWASM、TXRX团队





阶段2会将状态和执行添加进分片后的eth2中。尽管阶段2的一些核心原则是相对确定的（例如分片之间通过交联与默克尔证明进行通信），但阶段2的设计仍然保持一定的开放性。在过去的一年里，Quilt（ConsenSys研究团队）和 [eWASM](https://github.com/ewasm)（以太坊基金会研究团队）一直在致力于阶段2研究工作，以期在这个开放的设计领域进行探索，与阶段0和阶段1的规范和构建工作并行。

为此，最近将举办大量的公开电话会议来进行讨论，ethresear.ch上也发布了相关的帖子。现在有一些不错的资源能够提供认知帮助，以下仅选取部分：

- [状态提供者模式的概述](https://ethresear.ch/t/state-provider-models-in-ethereum-2-0/6750)
- [有关状态提供者的问题](https://ethresear.ch/t/remaining-questions-on-state-providers-and-stateless-networks-in-eth2/6585)
- [在分片之间转移ETH：问题陈述](https://ethresear.ch/t/moving-eth-between-shards-the-problem-statement/6597)
- [跨分片转移的路线图](https://notes.ethereum.org/fkPBDSV_QiSePrrk5u-0Qg)（及[Vitalik关于ETH元执行环境博文解析](https://ethresear.ch/t/an-even-simpler-meta-execution-environment-for-eth/6704)）
- [阶段1分片数据费用市场的相关讨论](https://ethresear.ch/t/phase-1-fee-market-and-eth1-eth2-bridging/6775)

除了Quilt与eWASM团队外，**新加入的[TXRX](https://twitter.com/TXRXResearch)（ConsenSys研究团队）也将部分精力投入到阶段2研究中，该团队最初的工作重点是增进对跨分片交易复杂性的理解，研究将eth1集成到eth2的可能途径，并对这些途径进行原型化。**

阶段2的所有研发领域都是相对新颖的，因此是深入研究并取得成果的好时机。在今年内，将有更多具体的规范面世，也为开发者提供施展拳脚的空间。

 



&lt;br/&gt;

# Whiteblock 发布libp2p gossipsub 测试结果





本周，[Whiteblock](https://whiteblock.io/)发布了[libp2p gossipsub测试结果](https://github.com/whiteblock/gossipsub-testing)，这是[ConsenSys](https://blog.ethereum.org/2020/02/04/eth2-quick-update-no-8/consensys.net/)和以太坊基金会共同资助下的结晶。**这项工作旨在验证用于eth2的gossipsub算法，并为性能边界提供参考，以辅助后续的测试与算法强化工作。**

概括来说，这一系列测试的结果看起来是可靠的，但还需要进一步测试以更好地观察消息传播如何随网络规模而变化。[此处](https://github.com/whiteblock/gossipsub-testing)参见完整报告，其中详细介绍了他们采用的方法、拓扑结构、实验和结果！

 

&lt;br/&gt;



# 百花齐放的春天！





今年春季迎来了许多激动人心的会议、黑客马拉松，eth2赏金等等活动！每一场活动中都会有一组eth2研究者和工程师出席。赶快来感受思维的碰撞吧！我们很期待与大家交流，包括工作进度、测试网验证工作、2020值得期待的事等等大家可能感兴趣的话题。

现在不参与更待何时？多个客户端都处于测试网阶段，因此大显身手的时候到了！我们有各种开发工具，可以进行各种尝试，快来找找乐子吧！

以下列出了其中一些与eth2相关的活动：

- [**ETHDenver** ](https://github.com/whiteblock/gossipsub-testing)— 美国丹佛，2月14至16日，准备了Eth2专项赏金！
- [**Stanford Blockchain Conference**](https://www.ethdenver.com/) — 美国斯坦福，2月19至21日
- [**Eth 222**](https://cbr.stanford.edu/sbc20/) — 美国斯坦福，2月22日
- [**ETHLondonUK**](https://ethlondon.com/) — 英国伦敦，2月28日至3月1日
- [**ETHCC**](https://ethcc.io/) — 法国巴黎，3月3至5日
- [**EDCON**](https://www.edcon.io/) — 奥地利维也纳， 4月3至7日
- [**Ethereal Summit** ](https://www.etherealsummit.com/)— 美国纽约， 5月8至9日
- [**ETHNewYork**](https://ethglobal.co/) — 美国纽约，日期待定

🚀🚀🚀

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth2更新速览#7]]></title><description><![CDATA[v0.10.0版本规范完成，下一步怎么走？阶段1.5又是什么？]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-7</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-7</guid><pubDate>Sat, 18 Jan 2020 00:00:00 GMT</pubDate><content:encoded>来源 |Ethereum Blog





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



2020年的首篇eth2更新速览来啦！今年将是激动人心的一年！

&lt;br/&gt;

# 要点速览

🔸 [v0.10.0版本规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.10.0)发布，将作为多客户端测试网与安全审计的稳定性目标

🔸 @paulhauner与@sigp_io团队共同致力于开发[Lighthouse客户端](https://twitter.com/paulhauner/status/1217349576278999041)

🔸 [Prysm测试网](https://prylabs.net/)[重启](https://medium.com/prysmatic-labs/eth-2-0-dev-update-42-mainnet-capable-testnet-now-hiring-53d4d08d3901)，现已加入聚合器并运行主网配置

🔸 加速eth1链与eth2链合并的[新提案](https://ethresear.ch/t/alternative-proposal-for-early-eth1-eth2-merge/6666)（也被称为阶段1.5）

 &lt;br/&gt;

# v0.10.0版本规范

v0.10.0版本规范发布，将作为多客户端测试网与安全审计的稳定性目标。

[v0.10.0](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.10.0)（代号404 Not Found）已于上周发布。技术细节参见[issue notes](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.10.0)，如**集成IETF BLS签名标准以及简化eth1缓存等。**然而本次规范更新对于eth2来说究竟意味着什么呢？

阶段0规范曾在Devcon5之后解冻，以引入一些新的更改。而v0.10.0则是这一系列更新的终点，并且集成了新IETF BLS标准。

曾几何时，这些变更扰乱了eth2客户端顺利的开发节奏，准备就绪的测试网也受影响延迟上线。然而随着v0.10.0的发布，现在我们的工作回到了正轨。

 &lt;br/&gt;

🔻**资源新增及更新**

随着v0.10.0规范的发布，客户端测试网和第三方安全审计又有了明确的方向。

因此，我们最近更新了许多入门级资源，也创建了一些新资源。如果想进一步了解eth2 阶段0规范，那以下资源绝对不容错过！

▫[易读版阶段0](https://notes.ethereum.org/@djrtwo/Bkn3zpwxB)

▫ [Eth2设计理念](https://notes.ethereum.org/@vbuterin/rkhCgQteN)

▫[阶段0设计备忘录](https://notes.ethereum.org/EbCbXn_BTuuUYqOaLE3iGA?view)

▫[验证者生命周期文档](https://notes.ethereum.org/@hww/lifecycle)

▫ [规范优化后的状态转换和SSZ图解](https://github.com/protolambda/eth2-docs#timeline-concept)

▫ [证明聚合策略的相关讨论](https://notes.ethereum.org/@hww/aggregation)

 &lt;br/&gt;

🔻 **审计进行时**

Least Authority已于本周一开始安全审计工作，目前正在继续深入。我们对他们的工作抱有很高的期待，并且对于能和这样高水准的团队合作感到兴奋！

另一条激动人心的消息是阶段0加密经济学的审计和形式化工作将由一支新的以太坊基金会团队负责，他们是Robust Incentives Group (RIG)。

RIG已经搭建了一个[cadCAD](https://github.com/BlockScience/cadCAD)环境来模拟eth2的经济模型，同时对不同形式的攻击进行探索，包括时序攻击、不同规模卡特尔（cartels）的潜在效应等等。

RIG将其核心工作内容编写成了简明易懂的[python笔记](https://github.com/ethereum/rig/blob/master/eth2economics/code/beaconrunner/beacon_runner.ipynb)，有兴趣不妨一读。

 &lt;br/&gt;

🔻 **接下来是什么？**

虽然在这里我不会深入讨论，但我会在今后的系列文章中加入更多细节信息。

在进行审计的同时，eth2客户端会更新代码至v0.10.0版本规范，集成新的BLS标准，并且保持测试网稳定运行。**一旦v0.10.0版本规范初步实现了稳定性，多客户端工作就会随之开始进行。**

关于这方面的工作，我的预期是首先在大型单客户端测试网中进行少量的多客户端测试。具体来说，我希望看到一些客户端作为少数节点加入既有的单客户端测试网，从而针对最初的互操作性进行测试。

一旦互操作性测试成功，在开始时我们会安排两个以上客户端共同参与到创世过程。我估计在这个阶段会有一些混乱状况，我们也还需要从中学习。随着细微规范的整合，规范中的含糊之处也许会被厘清。我们甚至还可能会发现一些意料之外的问题，大型测试网的运行本身就能完成自我审计。

审计结果会在二月陆续公布，到时我们预计会再对阶段0规范进行一些修改。规范变动程度，以及这些变动对客户端开发和时间线的影响还有待确定。无论如何，**审计后的v0.11.0版本将在3月初前后发布。**

如果变动不大，客户端将会集成修改，同步测试网，然后按照计划推进。如果变动较大，那么集成工作可能会耗时更久，并且需要进行额外测试，然后完全重启现存的测试网。

**在v0.11.x版本稳定之后，我们将会发布最终主网版本（v1.0.0）：实际耗时需要视变动深度而定。**

以上是对将来几个月工作的高度概括。接下来我会保持更新，告知大家我们的最新进度。

 

&lt;br/&gt;

# Eth2客户端与测试网

🔻 **不断优化中的Lighthouse**

Sigma Prime在[关闭](https://lighthouse.sigmaprime.io/update-20.html)其首个公开测试网之后一直显得比较沉寂，但他们在低调做实事。Lighthouse客户端的主要负责人Paul Hauner最近发布了一个[推特系列](https://twitter.com/paulhauner/status/1217349576278999041)，其中公布了团队近来针对eth2客户端进行的优化以及取得的成果。

很明显在过去四周里，他们一直在低调运行一个[公共测试网](https://twitter.com/paulhauner/status/1217349579579916288)，并且在BLS集成、区块处理、数据库读/写等各个方面取得了不错的成绩。还不[安装](https://lighthouse-book.sigmaprime.io/become-a-validator.html)一个亲自试试吗！

对了，Sigma Prime最近发布了针对Lighthouse用户界面的[RfP](https://lighthouse.sigmaprime.io/ui-rfp.html)（需求建议书），如果你有不错的前端技能，并且想要参与进来，不妨小试牛刀。这类工作十分有利于促进多元化用户参与验证工作。

 &lt;br/&gt;

🔻 **Prysmatic测试网重启，运行主网配置和聚合器**

Prysmatic Labs最近重启了他们的[公共测试网](https://medium.com/prysmatic-labs/eth-2-0-dev-update-42-mainnet-capable-testnet-now-hiring-53d4d08d3901)，现在运行了主网配置和证明聚合策略。正如在前序文章中所谈到的，主网配置具备更大的缓存、更长的epoch，通常还要比最初使用的最低配置复杂一些。运行一个主网配置的、涵盖上万个验证者的稳定测试网，这是Prysmatic目前在攻克的重要里程碑。

如果你想要参与其中，可以尝试[成为一名验证者](https://prylabs.net/)或者加入[discord聊天室](https://discord.gg/upbrAU7)。

对了，Prysmatic Labs也在[招募](https://twitter.com/raulitojordan/status/1215689700150775808)。如果你是经验颇丰的开发者，与Prysm远程协作无疑是一次难得的机会。一起开创未来吧！

 

&lt;br/&gt;

# 阶段1.5：加速合并eth1&amp;eth2

在假期期间，Vitalik发布了一个[新提案](https://ethresear.ch/t/alternative-proposal-for-early-eth1-eth2-merge/6666)，关于如何加速合并eth1和eth2，如何尽快从eth2新基础设施中受益。该提议建议**在阶段1基础设施（分片数据链）就位之后，在完全的阶段2（可扩展的执行环境和所有跨分片技术）到来之前，将eth1作为一个分片迁移到eth2中。**因此，这个过程被称为阶段 1.5。

**对于以太坊协议、开发者和用户来说，阶段1.5会带来许多潜在益处。**

▫如果eth1成为eth2的一部分，就允许eth1以原生方式获取可扩展的分片数据层。目前以太坊上一些最震撼的结构是将数据放在layer1上进行扩展的layer2协议。这些协议将与eth2完美契合，即便是仅仅作为一条具有本地计算能力的链（即作为分片的eth1链）。广义来说，这些结构被称为“rollups”。Rollups中有许多不同的种类，我希望这个设计研究领域能够继续扩张并且获得丰硕的成果。

▫将eth1作为eth2 的一个分片就从协议中剔除了PoW，这将在很大程度上减少发行率，并且一次性叫停以太坊上的能源密集型挖矿。

▫最后，尽快将eth1迁移到eth2中，能够减少各个部分的不协调性，将系统、社区以及核心协议的开发统一起来。尽管eth2的基础架构与当前的以太坊链是并行开发，但尽早将eth1整合进eth2之中，不仅是技术上的成就，更有利于将协议开发者、应用开发者、所有贡献者和用户维护在一个统一的、团结的以太坊社区中。

根据目前的讨论和反响来看，开发者和社区成员对这个新提案感到很兴奋。要实现当前的阶段1.5，很大程度上依赖于两个独立组件的成功：**eth2的阶段1和eth1上的无状态以太坊。**我们能从这两个组件的大致路线图中按图索骥，得到一些如何以及何时实现该新提案的线索。

接下来的几个月，我们会尽责推动规范完善并识别技术上的挑战，以便能够在时机成熟时做好充分准备🚀

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[参与Eth2 Staking系列#1：激励篇]]></title><description><![CDATA[以太坊基金会博文详解eth2验证者的惩罚和激励机制。]]></description><link>https://www.ethereum.cn/2020/01/13/validated-staking-on-eth2-1-incentives</link><guid isPermaLink="false">https://www.ethereum.cn/2020/01/13/validated-staking-on-eth2-1-incentives</guid><pubDate>Fri, 17 Jan 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2020/01/13/validated-staking-on-eth2-1-incentives/)





&lt;br/&gt;

![质押1.png](https://i.ibb.co/WyP26VY/1-8cf3398852.png)

&lt;br/&gt;



感谢Joseph Schweitzer和Danny Ryan的审校。

又见面了！在[上期开篇文章](https://news.ethereum.cn/validated-staking-on-eth2-0/)中我们讨论了eth2的设计理念，本文将透过设计理念主要谈谈eth2的激励机制。更确切地说，我们将探析在eth2中举足轻重的激励机制，以及如何通过奖励、惩罚和罚没 (slashings)的形式得以实现。

之后我们会再谈到如何以及为何激励验证者保持在线，为何验证者离线不会被罚没等等话题。我们开始吧！

 &lt;br/&gt;

# 如果不是因为离线，那什么情况下会被罚没(slashings)？

罚没主要出于**两个目的**：(1) 使得攻击eth2的成本难以负担 (2) 查核验证者是否真正履行了职责，防止验证者消极怠惰。

对验证者进行罚没，是指如果验证者被证实存在破坏行为，其（部分）质押金将被销毁。在eth2阶段0时期，验证者主要会因为两种恶意行为被罚没：**双重投票（double voting）和环绕投票（surround voting）**，有关细节参见Casper FFG运行机制的论文[1]。

双重投票，即验证者在同一个epoch中对两个不同区块进行投票，这也就意味着验证者对两种不同的现实版本表示了支持。需要禁止该行为最直观的原因就是，假如验证者在区块A中发送了一笔交易a，在区块B中发送了一笔交易b，且交易a和交易b花费了等值的ETH。因此**双重投票可以被看做是PoS版本的双花攻击**（double-spend attack）。

环绕投票也是通过罚没来惩罚恶意投票的验证者，以防止其同时创造多个不同的现实版本，避免了两个不同的链被最终确认（finalize）。具体地说，当验证者对某个现实版本进行投票，然后又对另一个版本进行投票，但并没有表明他们不再信任第一个版本，那么该验证者的这些证明（attestations）就是环绕投票。

在阶段0中，双重投票和环绕投票行为是唯一会导致验证者被罚没的情况，但之后的阶段中会增加其他规则，以确保验证者真正履行其职责，存储其签署的分片数据且使数据可用，防止验证者消极怠惰或隐瞒信息。

正确遵循协议且操作正常的验证者不会创建可能导致罚没的投票。如果出现罚没，却并未存在蓄意作恶行为，那么只会是因为bug或意外。那么出现这种情况怎么办？

为了将这种意外损失降低到最小，**被销毁的质押金会与同时段被罚没的验证者数量成一定比例。**因为如果只有数量很少的验证者进行了被罚没的行为，那么就不太可能是试图对eth2链发起攻击，而攻击成功需要大量的验证者。

因此，如果只有少数验证者被罚没，那么其行为会被认定为无心之过，惩罚力度也不会很大（最低罚没金额为1 ETH）。反之，如果大量验证者几乎同时产生不当行为，那么他们的质押金很大一部分则会被销毁（最高罚没金额为全部余额），因为这种情况会被视作针对网络的攻击行为。

被罚没的验证者将被停止继续参与协议，并且会被强制退出。如果验证者是无心之过，那么这种措施可以防止犯错的验证者一错再错，被重复罚没；如果是网络攻击的情况，则可以将恶意的验证者从协议中剔除。

 &lt;br/&gt;

#  离线的验证者又会怎样？

在本应该参与协议进行验证工作的时候，离线的验证者会被惩罚，而在正常情况下，离线只会使得验证者失去他们本可以通过验证工作所获取的奖励。也就是说，**如果验证者50%以上的时间在线，他们的质押金额会随时间推移增加。**

这种机制带来的结果是，对于需要离线进行维护等工作的验证者客户端，最好是选择短时间离线，而不是采取退出协议再重新加入的方式（因为退出和进入都存在相关延迟性）。

这也就意味着，减轻了验证者在客户端备份和网络延迟上的负担，因为离线的惩罚并不那么严重。实际上，如果系统中有两个实体可以对消息进行签名，可能会带来负面影响，因为主客户端和备份客户端有可能同时在线，进而导致创建可能导致罚没的投票（即上文提及的双重投票），Cosmos的首个罚没案例[2]就是这样发生的。

这种离线惩罚机制能够成立的前提是区块正在被最终确认，即有2/3的验证者（按权益加权）在线并且其投票正在被计数。这是eth2在正常情况下应该达到的预期状态。**如果少于2/3的验证者在线，就说明eth2中发生了灾难性的错误。**在此类情况下，以太坊的共识协议（包括Casper）则无法达成共识。

 &lt;br/&gt;

# 如果超过1/3的验证者离线，Eth2会作何反应？

如果发生这种情况，那么这些离线的验证者就会面临inactivity leak（消极）惩罚。随着离线时间推移，**受到inactivity leak惩罚的离线节点会被扣减余额**，如此一来，在线验证者占验证者总数（权益加权）的比例就能够再次超过2/3，使得eth2得以继续运行协议。

诸如Inactivity leak此类的设计，使得eth2具备从灾难性事件中幸存下来的能力。如果这种灾难性状况导致超过1/3的验证者离线，那么这些离线验证者会发现他们的余额不断被扣减至某个程度（16个ETH），到那时eth2的运行将不再需要他们的参与。

 &lt;br/&gt;

# 反相关性&amp;去中心化

罚没机制和inactivity leak（消极惩罚）机制促使验证者做出与其他验证者不同的使自身节点失效的决策。也就是说，为了确保自己受到尽可能轻微的罚没和不受到inactivity leak惩罚，验证者应该会努力尝试和其他验证者不同的客户端失效形式。

这给所有验证者施加了压力，他们需要将作为验证者的方方面面进行去中心化，例如，如果验证者都依赖于相同的现实来源（如Infura）或是都借助AWS来托管客户端，一旦这些方面发生什么错误，验证者们会面临更为严厉的惩罚。

 &lt;br/&gt;

# 有这么多惩罚机制，那验证者是否吃力不讨好？

正如在上期文章中所说，**“eth2假设验证者怠惰、收受贿赂、攻击系统的情况，除非采取措施对验证者进行激励。”**上文讨论到的惩罚机制是为了防止作恶行为，但同时也需要通过奖励来激励验证者为eth2进行有益工作。验证者奖励主要分为三类：

✅**检举者奖励**

通过提供证明，发起其他验证者罚没行为的警告，这些验证者能够因其为eth2扫除不利而获得奖励。

✅ **区块提议者奖励**

验证者会被随机地分配产生区块的任务，被选中的验证者就是“区块提议者”（proposer）。区块提议者能够通过以下方式获得奖励：

▫打包一份来自检举者的证明，且该证明证实某个验证者被罚没；

▫打包来自其他验证者的证明（attestations）

当验证者被选中提议区块时，奖励能够鼓励其向区块链提供有用信息。

✅ **证明者奖励**

证明（attestations）是表明验证者同意eth2中某个决定的投票。这类信息构成了eth2的共识基础，主要通过以下5种途径获得奖励：

- 获取链上证明
- 与验证者就区块链历史记录达成共识
- 与验证者就区块链最前部分达成共识
- 快速使证明上链
- 在指定分片中指向正确区块

 &lt;br/&gt;

# 开拓验证者收益

在PoS系统中，有两种常见的验证者奖励模式：**固定奖励**（fixed rewards）和**固定通胀**（fixed inflation）。

在固定奖励模式中，验证者通过履行职责获得固定数额的奖励，而通胀率取决于验证者数量。这种模式需要解决的问题在于如何设置回报率（reward rate）。如果回报率过低。验证者数量会过少；如果回报率太高，则会衍生出安全性需求之外的验证行为，并且浪费资金。

因此，拥有固定通胀率的模式更受欢迎。在这种模式中，既定数额的奖励由所有的活跃验证者瓜分。这种模式的好处在于利用市场的力量来寻求合适的奖励数额，因为验证者可以根据当下的收益自行选择是否参与验证。

但这种模式也存在一定缺陷。验证者奖励有可能是不稳定的，这使得对于个人验证者来说，很难做出盈利性决策；这种模式还使得协议容易暴露在“泄气攻击”（discouragement attack）[3]之下，受到这种攻击时，验证者会试图阻止其他验证者参与进来，以此提高自己的奖励（即便自己会受到暂时的损失）。

Eth2旨在结合两种模式的优点：**验证者的奖励与ETH质押总量的平方根成正比。**这种混合奖励模式的好处是在抑制通胀变化和验证者回报率的同时，依然能够借助市场力量来决定验证者的奖励金额。

 &lt;br/&gt;

# 抱最大希望，做最坏打算

Eth2激励机制的方方面面都遵循了上期文章中所阐述的协议设计理念。例如，反相关性机制有助于去中心化，inactivity leaks（消极）惩罚有助于eth2具备从灾难性事件中幸存下来的能力……但支撑起eth2激励机制的主要理念还是：eth2假设验证者怠惰、收受贿赂、攻击系统的情况，除非采取措施对验证者进行激励。

如果有人试图用本文中提到的任何一种方式来攻击eth2，那最好做足损失大量ETH的准备，因为无论如何，攻击者都会输得一无所有。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Staking：了解Eth2质押程序]]></title><description><![CDATA[如何成为Eth2验证者？了解质押程序很重要！]]></description><link>https://www.ethereum.cn/understanding-ethereum-staking-deposits</link><guid isPermaLink="false">https://www.ethereum.cn/understanding-ethereum-staking-deposits</guid><pubDate>Thu, 16 Jan 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [attestant.io](https://www.attestant.io/posts/understanding-ethereum-staking-deposits/)





&lt;br/&gt;



Eth2将使用Proof of Stake（权益证明）来维护网络安全，**但实行PoS需要每个活跃的参与者（“验证者”）拥有一定资产来进行质押**。如果持有资产的是eth1账户，那么这些资产需要转移到eth2的验证者处才能进行质押。

验证者的职责主要是提议区块并证明（attest）其他区块，而质押者（staker）则提供资金进行质押。验证者和质押者的角色可以是相同或不同的实体，最佳实践建议将这两者区分开以最大程度保证资金的安全性。

**将资金从eth1转移到eth2以及定义质押者和验证者的过程称为Staking**，第一步是在eth1上发送质押存款交易（staking deposit transaction）。质押存款交易包含的细节信息有质押者身份、验证者身份等等，并被统称为存款协议（deposit agreement）。本文将详细探析抵押存款，并阐释在eth1上提交ETH给eth2验证者的过程。

 &lt;br/&gt;

# 创建存款协议

存款协议将对质押者和验证者进行定义，并构成存款程序所需交易的基础。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/ZGvzbK8/1-2.png&quot;/&gt;&lt;/center&gt;








&lt;center&gt;图1：存款协议与其参与者&lt;/center&gt;

 &lt;br/&gt;

# 验证者身份证明

要确保将存款交给了正确的验证者，就需要验证者身份证明。验证者通过将其公钥添加到协议中来证明自己的身份：





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/yB9tjzc/2-2.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图2：验证者身份证明&lt;/center&gt;



**注意，由于是在eth2中对验证者进行身份证明，因此使用的是eth2公钥而非eth1公钥。**

 &lt;br/&gt;

# 质押金额

其次，存款协议中需要包含质押金额，以确保双方（以及双方网络）就质押金额达成一致。质押者可以将其期望质押的金额添加到协议中：





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/nP0j1Gn/3-2.png&quot;/&gt;&lt;/center&gt;






&lt;center&gt;图3：质押金额&lt;/center&gt;

 &lt;br/&gt;

# 提款身份证明

提款身份证明用于提供验证者提出存款的账户。质押者可以通过向协议中添加可操纵的公钥来识别提款账户身份：

1.公钥经由哈希以压缩其大小；

2.哈希字符串的首字节由类型标识符代替（目前标识符为“0”）



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/d2Rd6Hr/4-2.png&quot;/&gt;&lt;/center&gt;








&lt;center&gt;图4：提款身份证明&lt;/center&gt;



**注意，提款身份证明使用的也是eth2的公钥。因此，其必须直接由质押者提供，而无法像eth1智能合约通常那样从交易签名中恢复。**

**还要注意的是，如果验证者和质押者是同一实体，则应使用不同的密钥进行验证者身份识别和提款身份识别**。如此以来提款密钥可以安全地离线保存，直到质押者做好提款准备。

###  &lt;br/&gt;

# 验证者授权

要表明验证者同意遵守协议条款进行验证，则需要验证者授权。**验证者要使用与验证者身份证明相同的密钥对协议条款进行签名来进行授权，并将该签名添加到协议中**：





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/T2gxPwX/5-2.png&quot;/&gt;&lt;/center&gt;








&lt;center&gt;图5：验证者授权&lt;/center&gt;

 &lt;br/&gt;

# 提交存款协议

此时，存款协议中包含四条信息：验证者身份证明、质押金额、提款身份证明和验证者授权。如果质押者想继续完成存款，还需要将包含该协议和资金的交易发送给eth1存款合约（deposit contract）：








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/0DPhfCT/6-2.png&quot;/&gt;&lt;/center&gt;





&lt;center&gt;图6：提交存款协议&lt;/center&gt;



此处有两点需要注意：

**1. 质押者没有在存款协议中明确授权，而是在交易广播之前将其签名添加到交易中提供所需授权；**

**2. 交易必须附带存款协议中所涉及的ETH确切金额，任何其他金额都将导致交易被存款合约拒绝。**

接着由以太坊存款合约（deposit contract）接收并处理交易，如果一切正常进行，则存款合约将创建一个存款收据事件，收据包含存款协议中的所有数据，并且表示存款合约已经接收存款协议和所质押的ETH。

###  &lt;br/&gt;

# 激活存款协议

与前序步骤不同，**激活合约主要进行在eth2中**。

Eth2会跟踪eth1的更新以获取存款收据。每个eth2节点在其提议的区块中都包含有最新的存款收据。随着这些区块的最终确认，存款就会成为eth2整体状态的一部分。存款收据将作为验证者状态存储在eth2中。

同样，验证者也会跟踪eth2中的更新以获知验证者状态的变化。**当观察到带有公钥的验证者状态条目时，说明该存款已在eth1上完成，且已经得到了eth2的识别，剩下的就是证明工作了。**




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/yFMx2Yj/7-2.png&quot;/&gt;&lt;/center&gt;




&lt;center&gt;图7：激活存款协议&lt;/center&gt;

 &lt;br/&gt;

# 全程

结束提交和激活步骤之后，就完成了在eth2中质押eth1资产的全部过程：


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/SKN1wnk/8-2.png&quot;/&gt;&lt;/center&gt;







&lt;center&gt;图8：质押存款过程&lt;/center&gt;

注：尽管在理论过程中没有说明，但随着安全性的提升，Staking的过程会存在许多延迟。譬如在eth2中，在获取到存款收据事件和将该信息添加到验证者状态之间会存在一定的延迟，这样做是为了确保eth1网络中不会发生区块链重组而导致存款无效。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[DEFI初学者指南]]></title><description><![CDATA[DeFi涵义、与传统金融业的区别及其应用。]]></description><link>https://www.ethereum.cn/a-beginners-guide-to-decentralized-finance-defi</link><guid isPermaLink="false">https://www.ethereum.cn/a-beginners-guide-to-decentralized-finance-defi</guid><pubDate>Wed, 15 Jan 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Coinbase](https://blog.coinbase.com/a-beginners-guide-to-decentralized-finance-defi-574c68ff43c4)

&lt;br/&gt;

**加密货币诞生的使命，就是要使得全世界的普罗大众都能轻松使用货币和支付方式。**



**去中心化金融**（Decentralized Finance /DeFi）或**开放式金融**（Open Finance），是一场“革命运动”，是朝着以上目标迈出的一大步。试想一下，只要有智能手机和网络连接，世界上任何人都能通过一种更全球化、更开放的途径享受当今的各类金融服务——存款、贷款、贸易、保险等。

而像以太坊等智能合约区块链技术恰恰为此赋予了新的可能性。**“智能合约”是在区块链上运行的程序，当满足某些条件时能够自动执行**，其作用不仅仅是发送或接收加密货币，还能辅助开发者创造更复杂的功能。这些智能合约就是我们现在所经常提及的去中心化应用程序(dapps)。

我们可以将dapp视为**基于去中心化技术构建**的应用程序，而不是由单个中心化实体或公司所创建和控制的应用程序。

尽管其中一些概念听起来更倾向于黑科技，例如不同地域的两个陌生人能够直接达成贷款谈判，并自动转账，并且此过程不需要银行作为中间人。但事实上，许多dapp如今已经面世。DeFi dapps就是其中一种，用户可以创建稳定币（价值与美元挂钩的加密货币）、放债以赚取利息、贷款、兑换资产、做多或做空，甚至还可以采取高级的自动化投资策略。

那么这些DeFi dapps与传统金融业到底有何区别？

🔻两者区别的核心在于，DeFi dapps的业务不是由机构及其员工管理，而是**遵从代码形式的规则**（如上提及的智能合约）。一旦智能合约被部署到区块链上，DeFi dapps就可以自主运行，**最大程度减少人为干预**（但实际上还是需要开发者对dapps进行常规维护和升级）。

🔻代码在区块链上是**公开透明**的，任何人都可以审核。任何人都有机会了解智能合约的功能或查找bug，这就与用户建立了另一种信任关系。区块链上的所有**交易活动也是公开的**，任何人都可以查看。听起来似乎对用户隐私不太友好，但在默认情况下，**交易是匿名的**，即不会与用户的真实身份直接关联。

🔻从一开始，dapp的目标就是**实现应用的全球化**。无论是在德克萨斯州还是坦桑尼亚，都可以访问同样的DeFi服务和网络。当然，当地法律法规可能是一个阻碍因素，但从技术上来说，只要能连上互联网，就可以使用大多数DeFi应用。

🔻创建dapps“无需许可”，使用也“无需许可”。**任何人都可以创建、使用DeFi dapps。与当今的金融体系不同，DeFi不需要银行一类的第三方，也没有纷繁复杂的开户步骤。用户直接通过其加密货币钱包就能与智能合约进行交互。

🔻灵活的用户体验。**不喜欢某个dapp界面？没问题，可以选择使用第三方界面，也可以构建自己的专属界面。智能合约就像一个开放的API，任何人都可以基于此构建应用程序。

🔻互操作性。**新DeFi dapps的出现可以是从0到1，也可以是1+1=2，将现有的DeFi产品像乐高一样组合起来。例如稳定币、去中心化交易所和预测市场三者可以结合起来，形成一种全新的产品。

现在，DeFi是加密货币市场发展最快的领域之一。业界观察者使用一种独特的新指标，即**“DeFi项目的ETH锁仓量”**，来衡量项目的受欢迎程度。在撰写本文时，用户锁定在这些智能合约中的加密货币价值已[超过6亿美元](https://defipulse.com/)。

是否跃跃欲试了？那让我们现在就来上手尝试一些受欢迎的DeFi dapp。首先我们需要一个内置dapp浏览器的加密货币钱包（如[Coinbase Wallet](https://wallet.coinbase.com/)）来连接到这些dapp。桌面端用户可以通过点击Coinbase Wallet选项并扫描二维码来使用dapps。

由于dapp仍处于早期发展阶段，因此DeFi用户需要对新的产品和服务具有一定的了解来防范风险。智能合约毕竟是计算机代码，可能出现意外的编程错误，同时也可能受到恶意的黑客攻击。

&lt;br/&gt;

# 稳定币与去中心化储备银行的结合：MakerDAO项目

[Maker](https://makerdao.com/en/)是一个**稳定币项目**，每个稳定币（称为DAI）都与美元挂钩，需要以加密货币作为抵押物。稳定币也是可编程的加密货币，但是不会像比特币或以太币等“传统”加密货币一样具有波动性大的缺点。

用户可以尝试在[Maker Oasis dapp](https://oasis.app/borrow)上创建自己的DAI稳定币。Maker不仅仅只是一个稳定币项目，它还有**成为去中心化储备银行**的雄心。用户只要持有独立但又具有关联性的MKR token，就可以[对稳定费等重要决定进行投票](https://www.coindesk.com/dai-stablecoins-stability-fee-nears-20-after-latest-makerdao-vote)（类似于美联储的联邦公开市场委员会针对联邦基金利率采用的投票方式）。

另一种具有不同架构的稳定币是[USD Coin（USDC）](https://www.coinbase.com/usdc)，每发行一个USDC稳定币，都要在经审核的银行账号中抵押一美元。

 
&lt;br/&gt;

# 借贷：Compound

[Compound](https://compound.finance/)是基于区块链的借贷dapp，用户可以**出借加密货币并借此赚取利息**。若在现实生活中需要资金周转，但在这时候资金却用于投资加密货币了，无法取出，那么就可以将加密货币作为抵押品存入Compound智能合约，以此来借取现金。Compound智能合约将自动匹配借款人和贷款人，并根据供需动态调整利率。

受欢迎的借贷dapp还有[Dharma](https://www.dharma.io/)和[dYdX](https://dydx.exchange/)。诸如[LoanScan](https://loanscan.io/)之类的聚合器能够追踪各个dapp的借贷款利率，因此可以货比三家以获得最佳利率。

 &lt;br/&gt;

# 自动化通证交易：Uniswap交易所

[Uniswap](https://uniswap.io/)是一种**完全基于智能合约运行的加密货币交易所**，可直接从个人钱包进行主流通证的交易。这不同于Coinbase之类的交易所，这些交易所会存储账户里的加密货币并保存账户私钥以保障安全。Uniswap使用一种称为**自动做市**（Automated Market Making）的创新机制来自动结算接近市场价格的交易。除了进行交易外，用户可以向Uniswap合约提供加密货币，分得部分交易费用，促进资金的流动性。这就叫做[“资金池”](https://defiprime.com/uniswap-liquidity-pools)。

受欢迎的去中心化交易平台（DEX）还包括[0x](https://0x.org/)，[AirSwap](https://www.airswap.io/)，[Bancor](https://www.bancor.network/)，[Kyber](https://kyber.network/)，[IDEX](https://idex.market/eth/idex)，[Paradex](https://paradex.io/)和[Radar Relay](https://radarrelay.com/)。上述交易所的架构都略有不同。

&lt;br/&gt; 

# 预测市场：Augur

[Augur](https://www.augur.net/)是一种**去中心化的预测市场协议**。在Augur上，用户可以就事件的最终结果进行投票，若是该事件涉及用户自身利益，则该用户没有投票权利。诸如Augur和[Guesser](https://guesser.com/)之类的都是新兴的预测市场平台，但却是未来的开创之举，让用户能够集思广益做出更好的预测。

 &lt;br/&gt;

# 合成资产：Synthetix

顾名思义，**[Synthetix](https://www.synthetix.io/)**是一个**供用户发行和兑换合成资产的平台**，例如黄金、白银、加密货币、传统货币欧元等。通过在Synthetix合约中锁定较高价值的抵押品，用户的合成资产得到保障。

 &lt;br/&gt;

# 无损彩票：PoolTogether

DeFi的可组合性使其具有无限可能性。[PoolTogether](https://www.pooltogether.com/)是一款**无损失的DeFi应用**，参与者将DAI稳定币存入投注彩池，在每个月的月底，一名幸运的参与者将赢得该彩池所赚取的全部利息，而其他人也能收回其本金。

 &lt;br/&gt;

# 那么，DeFi的下一步是什么？

自人类文明诞生以来，货币和金融就以各种形式围绕着我们的生活。加密货币只是其最新的数字化身。在未来的几年里，我们可能会目睹，当今基于法定货币系统建立的所有金融服务，也都将重建于加密生态系统之上。既然现在较为全面的加密货币金融体系已现雏形，如加密资产的发行、交易、借贷、托管服务以及衍生产品，那么下一步又将迈向何处？

**第一代DeFi dapp严重依赖抵押品作为保障。**也就是说，前提是用户必须拥有加密货币，然后将其作为抵押品，才能借入加密货币。更传统的无抵押借贷将需要依靠个人征信系统，就如同今天的SSN（社会安全号码是美国重要的身份识别号码）和FICO评分（美国个人信用评级法）一样，使得借款人能够建立社会信用继而促进借贷行为。但与当今的个人征信系统不同，去中心化个人征信系统必须在保证通用性的同时保障隐私性。

**目前DeFi在保险领域也有所创新。**如今，许多DeFi贷款都是超额抵押的（这意味着这些贷款本来就很安全，因为有足够的资本缓冲）。但是，智能合约漏洞是DeFi的弱点。如果黑客发现并利用dapp开源代码中的bug，那么可能会迅速损失数百万美元。因此，加密资产保险应运而生。像[Nexus Mutual](https://nexusmutual.io/)这样的团队就正在构建去中心化保险，一旦发生智能合约被黑客入侵的情况，去中心化保险将弥补用户的损失。

**另一个DeFi的发展趋势则是完善用户体验。**第一代dapp的构建和应用都局限在区块链爱好者之中。这些dapp无疑展现了DeFi令人兴奋的可能性，但是可用性却有待提高。目前DeFi dapp的迭代方向将优先考虑设计和易用性，以便向更广泛的受众推广开放式金融。

将来，我们希望加密货币钱包能成为所有数字资产活动的门户，就像当今我们需要通过互联网浏览器作为门户来访问全球的新闻和信息。想象一个用户操作页面，它不仅可以显示既有资产，还可以显示各种开放式金融协议中的锁定资产（如贷款、资金池和保险合约）。

**DeFi生态系统正朝着去中心化治理和决策的方向发展。**尽管DeFi中使用了“去中心化”一词，但如今许多项目都设置了供开发者关闭或禁用dapp的主键。这样做虽然是出于升级和维护的考虑，同时也能在代码出现漏洞时做出紧急应对。但是，随着代码经过层层检验，我们希望开发者逐渐摒弃这些幕后的“开关”。DeFi社区也在进行不同的探索，使得利益相关人参与到决策的投票中，其中包括基于区块链的去中心化自治组织（DAO）形式。

开放式金融系统正在施展它的魔法，加密产业促进了货币的数字化，而货币的功能性也在经历飞跃式的发展。我们得以见证一个全新的行业从无到有，进而落地开花，这是一个多么可遇不可求的机会。DeFi当前的首要使命是比肩当今的金融服务行业，然而经过日新月异的发展和沉淀，当每个会写代码的人都被赋予了开创金融服务的理念，行业中的创新之举将远远超出我们的想象。

 &lt;br/&gt;

# 其他资源

如果想深入探索DeFi奇妙世界，以下资源可能有所帮助：

- [DeFi Pulse](https://defipulse.com/)
- [DeFi Prime](https://defiprime.com/)
- [USDC介绍](https://www.coinbase.com/usdc)
- [稳定币数据](https://stablecoinstats.com/)
- [去中心化借贷](https://medium.com/dydxderivatives/decentralized-lending-an-overview-1e00fdc2d3ee)

 &lt;br/&gt;
 &lt;br/&gt;
声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/1/10）]]></title><description><![CDATA[关于vitalik提案、v0.10.0规范版本等最新信息尽在这里。]]></description><link>https://www.ethereum.cn/wnie2-2020-1-10</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-1-10</guid><pubDate>Fri, 10 Jan 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200110)



&lt;br/&gt;

祝各位新年快乐~2020年的更新开始啦！🚀

新年伊始，来看看最近有哪些值得关注的事：

- 关于以太坊2.0的发展有几篇很棒的概述性文章。以下这两篇文章是相当准确的，我认同其中的大部分内容
  - [《ETH2 for Dummies》](https://medium.com/@chromaticcapital/eth2-for-dummies-11ff9b11509f)[1]，来自Chromatic Capital的Grant Hummer
  - [《Anticipating Ethereum 2 in 2020》](https://www.attestant.io/posts/anticipating-ethereum-2-in-2020/)[2]，来自Attestant的Jim McDonald
- 我一直都很欣赏Paul Hauner（Eth2客户端Sigma Prime团队成员）的见解。可以收听一下他参与的[最新Into the Ether播客](https://podcast.ethhub.io/paul-hauner-ethereum-20-is-on-the-horizon)[3]。
- 特别提一下 [ethsear.ch](https://ethsear.ch/) [4]

这是由 [@JonnyRhea](https://twitter.com/JonnyRhea/status/1215291699959926785)[5] 整合的针对以太坊研究的搜索引擎。其[Gitcoin CLR匹配资助要求](https://gitcoin.co/grants/240/ethsearch)[6]：一些用户界面的工作需要资助。😄

###  &lt;br/&gt;

# Eth1的未来

过去几周最有影响力的提案可能来自Vitalik，他建议[**将Eth1链加速过渡到Eth2链之中**](https://ethresear.ch/t/alternative-proposal-for-early-eth1-eth2-merge/6666)[7]。一旦落实，这将使得当前的PoW链（Eth1主链）提前被关闭🙌

该提议的基本理念非常简单：**当前的整个Eth1链将被视为Eth2系统中的一个特别的分片链(分片0)。任何Eth2的验证者都可以同时注册成为Eth1链的区块生产者或矿工。**Eth1链下一个区块的矿工将会从注册者中随机选出 (Eth2协议内置随机性)。然后，该区块的有效性和可用性都将由当时被随机分配到分片0上的验证者进行验证，无论分片0的验证者是否是Eth1的区块生产者。

在这种情况下，**Eth1链可以基本上保持不变，但可以快速向PoS(权益证明)机制转移。**注册为Eth1的区块生产者则需要维护整个Eth1链的状态 (因此需要运行Eth1全节点)，但其他的验证者仅需要做到能够“无状态”地验证区块。无状态验证机制的设计是实现该方案的先决条件。（Eth2的阶段1也是一个前提条件😂）

Vitalik的这项提案似乎受到了大家的认可，并且没有人在本周的实现者电话会议中对此表示担忧或反对。因此目前看来这项提案可能会成为新的方案。

###  &lt;br/&gt;

# 阶段0 信标链实现

V0.10.0规范版本已经发布。此规范将会是另一个冻结版本，作为测试网和安全审计的基础。

**V0.10.0规范的重大改变就是更新了备受期待的BLS签名实现**，当前正在对其进行标准化工作。这次更新内容主要包含了对hash-to-curve（哈希映射到曲线）算法进行移除和更替。读者可以通过我的[Java实现](https://github.com/PegaSysEng/artemis/pull/898)[8]来进一步了解相关背景。其他内容则维持现状，例如点序列化等。读者若是对BLS签名和BLS12-381有兴趣，我刚撰写了一篇全面的[面向非加密学者的阐释文章](https://hackmd.io/@benjaminion/bls12-381)[9]，希望有所帮助。

V0.10.0规范还对网络规范、配置参数等方面作出了一些微小更改。

###  

## 测试

**Sigma Prime团队**对[**Beacon Fuzz（差异化模糊测试）**](https://blog.sigmaprime.io/beacon-fuzz-01.html)[10]工作进行了一次彻底的更新。

###  

## 网络

**Harmony团队**已经[对**gossipsub的性能**进行了一些模拟工作](https://hackmd.io/ZMBsjqdqSAK026iFFu_2JQ)[11]。主要建议是将默认的heartbeat间隔从1秒减少至200或300毫秒。

## 测试网

Prysmatic Labs团队的Prysm测试网和Sigma Prime团队的Lighthouse测试网都已重新启动，**这两个测试网都运行了主网配置参数**💪（主网vs互操作性配置相关信息见[上一期](https://hackmd.io/@benjaminion/wnie2_191220)[12]）

Lighthouse测试网在圣诞节之前就开始运行了，但几周之后由于一些问题[不得不暂时关闭](https://lighthouse.sigmaprime.io/update-20.html)[13]。测试网圣诞假期重新启动，截至目前已经稳定运行了几周，并且将很快重新开放给公众使用。

与此同时，[Prysm测试网也重启了](https://medium.com/prysmatic-labs/prysm-testnet-v0-9-3-release-info-fa0b77161a41)[14]，该测试网也[运行了主网配置](https://twitter.com/terencechain/status/1214662313719943168)[15]。团队成员[Preston在推文中表示](https://twitter.com/preston_vanloon/status/1215471676017610753)[16]：“测试网在发布之初有些不太顺利，但目前已经流畅运行！”当前已经有13,000个验证者在排队等待加入Prysm测试网。刚开始最大速度是每个epoch加入4个新验证者，因此根据我的计算，排队人数积压了两周时间。

有作者已经发表了一篇在[Windows 10](https://github.com/msc82/Eth-2.0-Staking-For-Dummies)[17]上快速设置Prysm网络的教程。

###  &lt;br/&gt;

# 阶段1：分片实现

据本周的实现者电话会议，Vitalik和一些同事一直在致力于**改进数据可用性结构**。尽管目前已经存在一些有趣新颖的结构 (例如[FRI](https://ethresear.ch/t/fri-as-erasure-code-fraud-proof/6610?u=benjaminion)[18]和[多项式承诺方案](https://ethresear.ch/t/an-alternative-low-degreeness-proof-using-polynomial-commitment-schemes/6649?u=benjaminion)[19])，但相关工作还不成熟，不足以实际应用。因此我们在初始阶段会谨慎一些，**采用2D纠删码(erasure coding)**，可能之后再采用更为复杂的结构。

Dankrad撰写了一篇[关于数据可用性检测的阐释文章](https://dankradfeist.de/ethereum/2019/12/20/data-availability-checks.html)[20]，值得一读。

###  &lt;br/&gt;

# 阶段2：执行环境

ConsenSys Quilt团队发表了一篇很不错的文章，解释并分析了在[Eth2中实现状态提供者（state providers）](https://ethresear.ch/t/state-provider-models-in-ethereum-2-0/6750?u=benjaminion)[21]的三种可选方式。**Eth1一直以来面临的挑战之一就是对节点存储区块链状态(所有账户、数据存储和合约)的依赖性。**相比之下，Eth2计划转变为无状态（stateless）以太坊。这样说可能不太恰当，本质上是**状态存储将成为“他人的事情”**。ConsenSys Quilt的这篇文章就探索了这里的“他人”可能会是谁，以及我们将如何与之交互。

与此同时，Jonny Rhea一直在致力于拓宽执行环境设计的边界，他所构建的[Anomlee](https://github.com/jrhea/anomlee)[22]作为训练后的机器学习模型，是随机森林分类器（random forest classifier）的初始实现。下一步他将进行手写体数字（handwritten digits）分类器的相关工作。其主要目标是探索Eth2执行环境的能力边界。

Vitalik正致力于研究[如何在执行环境中处理](https://ethresear.ch/t/an-even-simpler-meta-execution-environment-for-eth/6704)[23]及转移ETH。这是诸多需要经过评估的可能模型之一。

###  &lt;br/&gt;

# 研究工作

Dan Boneh与其他同伴不久前发表了一篇关于[Single Secret Leader Election（单一秘密领导者选举）](https://eprint.iacr.org/2020/025.pdf)[24]的论文。**这对于验证者的匿名性和安全性来说可能会是一种重要的保护机制。**

###  &lt;br/&gt;

# 常规电话会议

## 实现者会议

1月9日进行了第31次会议。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/118)[25]；

- [会议视频](https://www.youtube.com/watch?v=u2w4EO9YepI&amp;feature=youtu.be&amp;t=81)[26]；
- [我的速记](https://hackmd.io/@benjaminion/ByYThFEgI)[27]和[Mamy的笔记](https://gist.github.com/mratsim/0f742236da1e5dbb6ca97b8fb55f061b)[28]。

## 网络

下一次会议可能在1-2周内，待定。

## 阶段2

下一次阶段2社区电话会议将在[1月14日](https://github.com/ethereum/eth2.0-pm/issues/119)[29]15:00（UTC）举行。

## Eth 1.x

下一次Eth1.x电话会议将在[1月14日](https://ethresear.ch/t/eth1-x-call-3-tuesday-jan-14th-witness-format/6715)[30]举行。届时主要内容将是关于无状态以太坊，无状态对于Eth2来说意义重大，尤其是鉴于Vitalik最近在提案中建议加速Eth1向Eth2过渡。

如果读者想要紧跟进展，建议阅读最近以太坊基金会博客中[有关无状态以太坊的文章](https://blog.ethereum.org/2019/12/30/eth1x-files-state-of-stateless-ethereum/)[31]。也可以阅读Igor Mandrigin的[这篇文章](https://medium.com/@mandrigin/stateless-ethereum-binary-tries-experiment-b2c035497768)[32]，文章在基于真实交易的情况下，将Eth1当前的十六进制树结构（hexary trie）与二进制树结构（binary tries）在无状态客户端性能方面进行了比较。剧透警告：二进制树结构以明显优势胜出。来自Vitalik的相关文章：[Protocol changes to bound witness size（更改协议以限制见证大小）](https://ethereum-magicians.org/t/protocol-changes-to-bound-witness-size/3885)[33]。

[Eth1.x的Telegram讨论组](https://ethresear.ch/t/telegram-group-for-eth1x-stateless-client/6470)[34]非常活跃。我已经有240条未读信息了😅。

&lt;br/&gt;

# 其他新闻

✨ [Mikerah](https://twitter.com/badcryptobitch/status/1212532236609830912)[35]（👋）发布了一个[Eth2“office hours”文档](https://docs.google.com/document/d/1OhGjgj_eUOjG-XvLAhYT0iYR_SCGCAbmPwTZ6JUkW-E/edit)[36]，所有人都可以在上面自由问答。这个主意真的很不错，我很肯定上面会有很多人提问！

✨ Jim McDonald发表的另一篇文章阐释了[成为Eth2验证者所需的成本](https://www.attestant.io/posts/exploring-ethereum-2-validator-costs/)[37]。

✨ 还记得我在上一期提到[Protolambda正在尝试可视化](https://twitter.com/protolambda/status/1205287760367685632)[38]大量验证者集合的工作吗？此处是一些[相关工作进展](https://twitter.com/protolambda/status/1209487327434809344)[39]。

✨ Protolambda的另一项工作是[**使用Python库重新设计默克尔树**](https://github.com/protolambda/remerkleable)[40]：在缓存的和不变的二进制默克尔树树中键入可变的SSZ视图。利用SSZ设计来优化处理大型数据结构（例如Eth2信标状态）。

✨ [John Adler“基于委员会的区块链分片的安全性和可扩展性”的文章](https://medium.com/@adlerjohn/security-and-scalability-in-committee-based-blockchain-sharding-58fab3901193)[41]。

✨ 如果读者对Eth2中新ETH（在美国）可能的法律地位感兴趣，那[这篇文章](https://gulovsen.io/proof-of-security/)[42]也许读起来颇有趣味。我个人认为，What’s New in Eth2在过去15个月的内容能够充分彰显了以太坊社区的去中心化性质。也许SEC会将其视为证据😱。

✨ Prysmatic Labs和Sigma Prime都在[进行招聘工作](https://twitter.com/raulitojordan/status/1215689700150775808)[43] ( Paul已经在本文[开头提及的播客](https://gitcoin.co/grants/)[44]中谈到了)。

###  &lt;br/&gt;

# 最后的最后

大家可以去Gitcoin Grants[45]给一些有价值的Eth2项目捐赠一些 DAI。也不要忘了“媒体”板块。由于申请人过多，所以被分为了两类。CLR匹配将持续到1月21日，这个机制将使得获得的资助成倍增加。


 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth1.x：解析无状态客户端]]></title><description><![CDATA[本文将进一步详细阐释无状态客户端。]]></description><link>https://www.ethereum.cn/eth1x-files-state-of-stateless-ethereum</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-files-state-of-stateless-ethereum</guid><pubDate>Fri, 03 Jan 2020 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/12/30/eth1x-files-state-of-stateless-ethereum/)





&lt;br/&gt;

![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)
&lt;br/&gt;



在[上一篇关于以太坊1.x的文章](https://news.ethereum.cn/eth1x-quick-update/（在新窗口中打开）)中，我们对Eth 1.x研究的起源、利害因素以及一些可能的解决方案做了简要回顾。在上篇文章的结尾我们提到了“无状态”以太坊的概念，而在本文中我们将进一步详细阐释无状态客户端。

无状态(stateless)是Eth 1.x研究的新方向，因此我们将进行一次相对深入的探析，以便对未来可能面临的挑战和可能性了然于胸。如果读者有兴趣进一步了解，我会尽量提供相关资源的链接。

###  &lt;br/&gt;

# 什么是“状态”？

要解释无状态以太坊，我们首先需要理解“状态”(state)的概念。当我们提到“状态”时，一般是指“事务的状态”。

以太坊的完整“状态”描述了所有账户和余额的当前状态，以及在EVM中部署和运行的所有智能合约的集体历史。链上每个最终确定的区块，都有且只有一个状态，这是由网络中的所有参与者共同确认的。每当有新的区块被添加到链上，状态都会随之改变且更新。

在Eth 1.x研究语境中，我们不仅要知道状态是什么，还要知道它在协议（据黄皮书中的定义）和大多数客户端实现（如geth、parity、trinity、besu等）中是如何表现的。

###  &lt;br/&gt;

## 什么是Trie？

以太坊所使用的数据结构叫作Merkle Patricia Trie。有趣的是，‘Trie’最初截取自‘retrieval’一词，但大多数人会将其发音为‘try’，以区别于‘tree’。回到正题，关于MPT数据结构，我们需要了解：

在trie的一端，是描述状态（值节点）的所有特定数据片段。数据可以是特定帐户的余额，也可以是存储在智能合约中的变量（例如某种ERC-20通证的总供应量）。Trie的中间则是分支节点，通过哈希运算将所有值串联在一起。分支节点是包含其子节点哈希的数组（array），每个分支节点随后再次经过哈希并归入其父节点的数组中。这一连串的哈希最终会到达trie另一端的一个状态根节点。

&lt;br/&gt;


![1.x1.png](https://i.ibb.co/CMgTZm0/1-x1-ca75f39d50.png)

&lt;br/&gt;

&lt;center&gt;图源 blog.ethereum.org&lt;/center&gt;

在上面的简化图示中，我们可以看到一些数值，以及得到这些值的路径。例如，为了得到V-2，我们经历了1,3,3,4的路径。同理，V-3可通过路径3,2,3,3来获取。需要注意的是，本例中的路径长度始终为4个字符，并且要获取某个值只有一条可用路径。

该结构具有确定性和可加密验证的重要特性：生成状态根的唯一方法就是通过计算状态的每个单独数据段，如此一来，通过比对根哈希和前序哈希（Merkle证明），就可以轻松证明两个状态是相同的。反之，我们也不能用相同的根哈希创建两个不同的状态，任何使用不同值修改状态的尝试都将导致不同的状态根哈希。

以太坊通过引入新节点类型，扩展节点(extension nodes)和叶节点(leaf nodes)来提升效率，优化trie结构。通过将路径的一些部分编码为节点，如此一来trie就会更加紧凑。

&lt;br/&gt;


![1.x2.png](https://i.ibb.co/XLfS3wb/1-x2-02268a94ac.png)

&lt;br/&gt;

&lt;center&gt;图源 blog.ethereum.org&lt;/center&gt;

在这种优化后的MPT结构中，每个节点都需要在多个后续节点共享的路径压缩部分或值（若有必要，由路径的其他部分前缀）之间进行选择。其实是相同的数据和组织，但是这个trie结构只需要9个节点而非18个节点。看起来似乎更有效率，但事后看来，实际上这并不是最理想的。我们将在下一节讨论原因。

要获取状态的特定部分（例如账户当前的ETH余额），需要从状态根开始，沿着trie的路径从一个节点到另一个节点，直到达到所需的值。在每个节点上，路径中的字符用来决定下一个目的节点，就像是一个用于导航哈希数据结构的探测棒。

而在以太坊真正使用的版本中，路径是长度为64个字符（256位）的地址哈希，值是[RLP编码数据](https://github.com/ethereum/wiki/wiki/RLP)。分支节点是包含17个元素的数组（其中有16个是每个可能的十六进制字符，剩余一个则为值），而叶节点和扩展节点包含2个元素（一个是部分路径，另一个是下一个子节点的值或哈希）。要了解更多细节，可以浏览[以太坊的wiki页面](https://github.com/ethereum/wiki/wiki/Patricia-Tree)，或者，如果你喜欢亲自钻研，那么[这篇文章提供了一个很棒的Python DIY trie练习](https://easythereentropy.wordpress.com/2014/06/04/understanding-the-ethereum-trie/)（不幸的是这篇文章已经过时了）。

&lt;br/&gt;

## 在数据库中使用Trie

读到这里我们应该提醒自己，trie结构只是一个抽象的概念。这是一种将以太坊状态的整体打包成统一结构的方法。该结构需要在客户端的代码中实现，并存储在磁盘上（或者分布在全球的数千个磁盘中）。这意味着要采用多维trie结构并将其嵌入到一个普通的只理解[key，value]对的数据库中。

在大多数以太坊客户端（turbo-geth除外）中，**MPT是通过为每个节点创建不同的[key, value]对来实现的，其中value是节点本身，key是该节点的哈希。**

&lt;br/&gt;


![1.x3.png](https://i.ibb.co/7y9GXG8/1-x3-736eaca4cc.png)

&lt;br/&gt;

&lt;center&gt;图源 blog.ethereum.org&lt;/center&gt;

因此穿越trie的过程，或多或少与之前描述的理论上的过程相同。要查找帐户余额，我们将从根哈希开始，并在数据库中查找其值以获取第一个分支节点；使用哈希地址的第一个字符，可以找到第一个节点的哈希；在数据库中查找哈希，然后得到第二个节点；使用哈希地址的下一个字符，我们可以找到第三个节点的哈希。如果运气好的话，我们沿途可能会碰到一个扩展节点或叶节点，也就不需要检查全部的64个半字节。无论如何，我们最后会找到所需的帐户，并从数据库中检索其余额。

这个过程与计算每个新区块的哈希在很大程度上是相似的，但是是反过来的：从所有边缘节点（账户）开始，通过连续的哈希来构建trie，直到最后一个新的根哈希，再与链中最新确认的区块进行比较。

这就是状态trie明显的效率优势所能够施展的地方：在磁盘上重构整个trie的强度是非常大的，以太坊使用的优化版MPT结构通过折衷实现效率来提高协议效率。

这些额外的节点类型（叶节点和扩展节点）理论上节省了存储trie所需的内存，但它们会使得用于修改常规数据库中状态的算法更加复杂。不过一台功能强大的计算机设备能够极速执行该过程。然而，纯粹的处理能力也只能起这么大的效用了。

&lt;br/&gt;

## 节点同步

到目前为止，我们的讨论还局限在运行以太坊客户端（如geth）的个体计算机范围中。而以太坊是一个网络，所有这一切的关键是要在全球数千台计算机以及不同客户端之间达到统一的**状态共识**。

不断洗牌的#Defi、cryptokitty拍卖或cheeze巫师大战的token，以及常规的ETH交易都会碰撞在一起，给以太坊客户端创建一个极速变化的状态。**而以太坊客户端需要保持状态同步，随着以太坊越来越广泛的应用，同步状态就会愈难，状态trie的结构也会愈深。**

*“Turbo-geth是抽薪止沸的一种实现：其将trie数据库扁平化，并使用节点的路径（而非其哈希）作为[key, value]对。这有效地使得检索操作无关树的深度，并带来了各种酷炫的功能，使得运行全节点时性能提升且减少磁盘负载。”*

以太坊的状态非常大，并且随每一个区块而变化。那么状态和改变究竟有多大？我们可以将整个以太坊的当前状态大致定位在状态trie的约4亿个节点上。其中，大约每15秒需要添加或修改约3000个（甚至多达6000个）节点。**与以太坊区块链保持同步，实质上就是不断有效地构建新的状态trie。**

*“这种状态trie数据库操作的多步骤过程，正是以太坊客户端占用如此庞大的磁盘I/O和内存的原因，即便是“快速同步”(fast sync)模式可能也需要长达6个多小时才能完成。而要运行一个以太坊全节点，快速SSD（而非便宜但可靠的HDD）必不可少，因为处理状态更改对磁盘读/写的要求非常高。”*

其中需要注意的关键点在于，建立一个新节点进行同步，与保持现有节点同步，这两者之间相去甚远。而当我们实现无状态以太坊之后，它们之间的区别将会模糊化（希望如此）。

最直接的同步节点的方法是使用“full sync”（完全同步）方式：从创始区块开始，将每个区块中的每笔交易恢复成列表，并构建状态trie。后续区块一旦产生，状态trie就会被修改，随着区块链完整历史的重现对节点进行添加或修改。而从创世区块开始下载并执行每个区块的状态更改，需要花费整整一个星期的时间。如果你同步时不亟待进行新的交易，那就只是时间问题。

另一种同步方式“fast-sync”（快速同步）名副其实，其同步速度更快，但也更复杂：新客户端可以从最近受信任的“检查点”（checkpoint）区块请求状态条目，而不再需要从创世区块开始。该方式需要下载的信息量要少得多，但仍然有许多信息需要处理。快速同步目前不受带宽限制，而是受磁盘性能的限制。

实质上，进行快速同步的节点是在与链的末端进行赛跑。节点需要在状态陈腐（stale）并且全节点不再提供该状态之前从“检查点”（checkpoint）中获取所有状态（如果发生这种情况，节点可以辗转至新的检查点）。一旦快速同步节点克服了这种障碍，并使其状态完全与检查点（checkpoint）同步，就可以切换为完全同步，即从每个区块中包含的交易生成并更新自己的状态副本。

&lt;br/&gt;

## 什么是区块见证(witness)？

讲到这里，我们可以开始探索无状态以太坊的概念。无状态以太坊的主要目标之一就是减少新节点同步过程的痛苦。考虑到只有0.1%的状态是随区块变化的，所以似乎应该有一种方式可以减少切换为完全同步之前需要下载的所有额外信息。

但这也是以太坊采用加密安全数据结构所带来的挑战之一：在trie结构中，仅更改一个值就会导致全然不同的根哈希。这是一种特性，不是漏洞。这使得每个人都能确保自己和网络中的其他节点处于同一状态。

如果要走捷径的话，我们需要一条关于状态的新信息：即区块见证（block witness）。假设此trie结构中只有一个值最近产生了改变（下图绿色部分）：



&lt;br/&gt;

![1.x4.png](https://i.ibb.co/MZdmnqV/1-x4-b9e86122fb.png)
&lt;br/&gt;



&lt;center&gt;图源 blog.ethereum.org&lt;/center&gt;

同步状态（包括该笔交易）的全节点将采用传统的方式：获取所有状态片段，并对它们全部进行哈希运算，以创建新的根哈希。如此就可以轻松验证自己的状态是否与其他所有人的状态相同（因为节点掌握了相同的哈希以及相同的交易历史）。

那对于新加入进来的节点呢？新节点要进行验证所需的最小信息量是多少，以保证至少在其观察时段内的观察结果与其它节点是一致的？

一个新的节点需要更早的全节点提供证明，证明所观测到的交易符合迄今为止的状态。



&lt;br/&gt;


![1.x5.png](https://i.ibb.co/nCwy6r0/1-x5-bfa7b00bde.png)
&lt;br/&gt;



&lt;center&gt;图源 blog.ethereum.org&lt;/center&gt;



用抽象的术语来说，**一个区块见证（witness）证明提供了状态trie中所有丢失的哈希，并结合了一些位置“结构”信息，表示这些哈希在状态trie中位于何处。这使得新节点能够将新交易包含在其状态中，并在本地计算新的根哈希，而不需要下载状态trie的完整副本。**

简言之，这就是[**beam同步（ beam sync）**](https://medium.com/@jason.carver/intro-to-beam-sync-a0fd168be14a)蕴含的原理。Beam同步方案不再收集检查点trie中的每个节点，而是开始监测并尝试在交易发生时就执行交易，从全节点请求每个区块的见证（witness）内容，以获取没有掌握的信息。随着越来越多的状态被新交易影响，通过beam同步逐渐填充信息，直到最终切换到完全同步，客户端可以更信任自己的状态副本。

&lt;br/&gt;

## 不同程度的“无状态”

随着区块见证（witness）的引入，“完全无状态”概念的定义逐渐清晰。与此同时，这也是我们开始遇到瓶颈和问题的地方，并且没有明显可行的解决方案。

与beam同步方案不同，**真正的无状态客户端自始至终不会保留状态副本，而是只与区块见证（witness）一同获取最新的交易，只需要包含执行下一个区块所需的一切信息。**

所以我们几乎可以预见如果整个网络都是无状态的，那么实际上是可以达到永动状态的。新区块的见证从上一个区块产生，然后依次传递见证！至少可以持续到最后确认的“事务状态”，以及该状态产生的第一个见证。而这对于以太坊来说将是一个富有戏剧性的巨变，所以不太可能会获得广泛的支持。

有一种不那么激进的方法：适应不同程度的“无状态”。在这种网络中，会有一些节点保存完整的状态副本，也能为其它所有节点提供最新的见证（witness）。

- 完整状态节点会像往常一样工作，但需要额外计算一个见证（witness）并将其添加到新区块，或通过辅助网络子协议广播；
- 部分状态节点可以只在少量区块生成期间保留完整的状态，或者只“监测”其相关的状态部分，然后从见证中获取验证区块所需的其余数据。这对需要运行基础设施的DApp开发者而言大有裨益；
- 根据定义，零状态节点想要在运行客户端时尽可能轻巧，可以完全依赖区块见证来验证新的区块。

要启用这个方案，可能需要类似于bittorrent采用的分块（chunking）和群集（swarming）行为，其中见证（witness）片段根据其需要进行广播，并与具有（互补）部分状态的其他节点建立最佳连接。或者，这可能需要制定一个状态trie的替代实现方案，使得更适宜见证（witness）的生成。这都是我们需要研究和实验的内容！

如若想要更深入地探析状态节点与无状态节点之间的权衡，可参见Alexey Akhunov的[《The shades of statefulness》](https://medium.com/@akhounov/the-shades-of-statefulness-in-ethereum-nodes-697b0f88cd04)。

这种半-无状态方式的一个重要特点在于这些改变不一定要诉诸硬分叉形式。通过微小的并且可测试的渐进方式，就可以将以太坊的无状态组件构建成一个辅助型子协议，或者划分为一系列不具争议的EIPs，而无需进行大型“信念飞跃式”的升级。

&lt;br/&gt;

## 无状态客户端路线图

我们在研究中遇到的一个明显问题就是区块见证（witness）的大小。普通区块包含一个区块头和交易列表，其大小约为100 kB。相对于网络延迟及15秒的区块时间，这种大小可以使得区块广播速度较快。

然而，见证（witness）需要包含状态trie的边缘和深层节点的哈希。这意味着其大小要大得多：早期数据显示大约为1 MB。因此，**与网络延迟和区块时间相比，同步见证要慢得多，这可能会是一个障碍。**

这种两难境地类似于电影下载和流媒体之间的区别：如果网络过慢导致流媒体无法顺畅加载，那么下载完整电影就是唯一可行的选择。如果网络速度快，那就可以流畅播放电影。如果实际情况是网络速度不上不下，那么我们就需要更多的数据来作出决定。那些标准之下的互联网服务提供商，会在需求过高时认识到低速网络的局限性。

很大程度上，这就是Eth 1.x工作组正在着手解决的为具体问题。目前，我们对假想见证网络的了解，还不足以确定其是否能正常或理想运行，难点就在于细节（以及数据）。

**一种方法是通过改变trie本身的结构**（如二进制trie），考虑如何压缩和减少见证（witness）数量，以使其在实现时更高效。**另一种方法则是原型化网络原语**（例如bittorrent的swarming），使得见证能够有效地在网络中不同节点之间传递。而这两个方案，都能受益于形式化见证规范（目前该规范还不存在）。

相关研发人员会将以上这些方向（以及其他可能性）提炼成一个更系统的路线图，并将在未来几周内发布。路线图中强调的要点，也将是未来深度解析文章的主题。

如果坚持读到了这里，那么读者应该对“无状态以太坊”有了一定的概念，并了解了一些新兴Eth1.x研发项目的背景。

与往常一样，如果大家对Eth1.x的工作、主题有任何疑问，或是想要进行贡献，请到ethresear.ch作自我介绍，或在推特联系@gichiba和@JHancock。

感谢Alexey Akhunov提供的技术反馈以及部分trie结构示意图。

祝大家新年快乐，缪尔冰川硬分叉快乐！


&lt;br/&gt;
&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[细数2019以太坊事记]]></title><description><![CDATA[Ethhub联合创始人Anthony的回顾中涵盖了以太坊生态的多个主要方面，研发、DeFi、政策、融资等等。]]></description><link>https://www.ethereum.cn/ethereum-in-2019</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-in-2019</guid><pubDate>Mon, 30 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Anthony Sassano](https://twitter.com/sassal0x/status/1210685200625094657)

&lt;br/&gt;

编者按：28日，ethhub联合创始人Anthony Sassano在推特展开了一个系列细数以太坊和比特币在2019年各自取得的进展，并且评价以太坊在过去一年的发展“令人惊叹”。Anthony的回顾中涵盖了以太坊生态的多个主要方面，研发、DeFi、政策、融资等等。

以太坊在2019年的进步大家都有目共睹，而蓄势已久的以太坊，2020年究竟会点燃怎样的花火？又会如何在绽放之后归于“宁静”？



✨对以太坊的建设来说，2019是令人惊叹的一年。👀下面和大家一同回顾以太坊2019年以来经历的重要事记！

注：文中@符号后均为相关个人、团队、项目方的推特ID。



###  &lt;br/&gt;

### **一月**

@ethhub_io网站上线

@gitcoin grants启动

@parity获得以太坊基金会500万美元资助

@/r/ethtrader对货币化投票进行试验

@instadapp引介“去中心化银行”

@ethcatherders成立



###  &lt;br/&gt;

### **二月**

@graphprotocol推出浏览器

@kybernetwork推出@kyberswap

@getnuo在主网上线

@WrappedBTC在以太坊上线

@DEXAG_TokenWire引入

@plasma_group引入

@dharma_HQ募集700万美元并发布新的Lever平台

**@ethereum君士坦丁堡升级激活**

@ethereum基金会宣布第五波资助计划 



###  &lt;br/&gt;

### **三月**

@setprotocol推出Strategy Enabled Tokens

@defipulse上线

@econoar提出EIP-1559

@molochdao崛起

**@sec_news SEC克莱顿主席称以太坊不再被定义为证券**

@ConnextNetwork在主网发布Dai Card

作为以太坊网络最初始的接口之一，Mist停止维护

@compoundfinance迭代至v2版本



###  &lt;br/&gt;

### **四月**

首个eth2信标链测试网上线，由@ethstatus，@prylabs和@sigp_io合作开发

@AugurProject详细介绍v2版本

@teo_leibowitz引介DIPOR，开放式金融的“LIBOR”(同业拆借利率)

@EYNews揭开Nightfall的面纱

@dydxprotocal进行重大更新

@instadapp发布v2版本

@uniswapexchange宣布成立公司和基金



###  &lt;br/&gt;

### **五月**

@ethereum推出ethereum.org新网站

@defisaver在主网发布

@consensys启动以太坊开发者门户

@dydxprotocal向公众开放

@meta_cartel DAO诞生

@RealTPlatform通证化房地产上线

@microsoft发布适用于Azure的以太坊工具包

@finra批准Grayscale的以太坊信托

@ethereum基金会给出未来12个月的计划

@compoundfinance v2版本在主网上线

@nexusmutual在主网发布



###  &lt;br/&gt;

### **六月**

@jpmorgan发布Zether协议

@chainlink在主网发布

@starkwareltd 和@0xproject 发布StarkDEX demo

@microsoft与@trufflesuite达成合作

@bzxHQ推出Fulcrum

**@facebook公布Libra项目**

@gridplus发布Photon网络

@cloudflare推出以太坊网关

@argentHQ推出Hopper隐私解决方案

@camirusso推出“The Defiant”新闻简讯



###  &lt;br/&gt;

### **七月**

**@ethereum 2.0 阶段0 规范冻结**

@pooltogether_ 上线

@camirusso和@kermankohli推出History of Ethereum (以太坊历史)网站

@kendricktrh推出Heiswap以太坊混合器(mixer)

@realdonaldtrump（特朗普）发布关于加密货币的推文

@ethereum Geth v1.9.0发布，对客户端进行了重大改进

@instadapp推出@makerdao与@compoundfinance的桥接

@setprotocol推出趋势交易策略(Trend Trading Strategies)

@ethereum 2.0研究者在/r/ethereum参加AMA



###  &lt;br/&gt;

### **八月**

@argentHQ推出@makerdao CDP门户

@brave推出推特小费服务

@mi_ayako加入@EntEthAlliance董事会

@tornadocash 引入

@godsunchained聘请前MTG：Arena总监

@ethfinancer从/r/ethtrader分叉出去

**@keep_project发布tBTC**

@compoundfinance发布Open Oracle System (开放预言机系统)

@felix2feng引介Profit Pools (利润池)

**@uniswapexchange突破百万ETH交易量**

@rdai_dao引入

@ethereum伊斯坦布尔EIPs清单最终确定

@synthetix_io推出通证类别索引

@coinbase官宣WalletLink

@aztecprotocol发布PLONK



###  &lt;br/&gt;

### **九月**

@ryansadams宣布Bankless

**@hyperledger官宣Besu以太坊客户端**

@ethereum基金会提供更多资助

state channel的多个团队合作创建了Statechannels.org

**@plasma_group引介Optimistic Rollups**

@boredgenius引介Pool DAI

@numerai启动Erasure Protocol

@ameensol发表关于@compoundfinance的文章，将其描述为托管系统

@danrobinson引介收益协议(Yield Protocol)

@makerdao引入Oracle v2版本和DeFi Feeds

@ethereum完成ProgPoW审计

@enigmaMPC官宣Salad，以太坊混币

@openlawofficial引介The LAO

**@ethereum 2.0研发人员参加互操作性活动，使7个eth2客户端进行交流**

@ethereumJosephJoseph Lubin加入@hyperledger董事会

@bancosantander在以太坊上结算2000万美元的债券交易

@coinbase宣布USDC引导基金

@gnosis的Sight预测市场平台进入测试期

@kyberswap宣布Fiat On-Ramp

@UMAprotocol发布Synthetic Token Builder 平台

@dydxprotocol推出原生ETH-DAI市场

@consensys宣布@ConsenSysCodefi

@dolomite_io上线

@balancerlabs引入

@ConsenSysCodefi引介DeFi Score

@mydefi_org引入

@nodarj宣布DeFi Strategies

@bitpay增加了对以太坊的支持



###  &lt;br/&gt;

### **十月**

@gitcoin 第三轮资助为开源项目筹集了27万+美元

@godsunchained融资1500万美元

@connextnetwork v2版本主网上线

**@ethereum Devcon5（第五届开发者大会）在日本大阪举行**

@instadapp种子轮融资240万美元

@makerdao发起新的Oasis Trade

@coinbase 启动USDC奖励计划

@blocklytics发布pools.fyi

@skalenetwork筹集1710万美元

**@cftc（美国商品和期货交易委员会)主席确认ETH属于商品**

@vitalikbuterin在Devcon期间发布5篇与eth2相关的博文，分片简化、eth1和eth2的双向桥接、跨分片的可组合性的运行以及eth1&gt; eth2的过渡

@uniswap和@plasma_group发布UniPig，采用Optimistic Rollup技术的交易所

@ethereumJoseph宣布百万开发者计划

@metamask_io 引入web3插件

@setprotocol引入公共 rebalancing dashboard

@mycrypto的新网站进入测试期

@starkwareltd引介OpenZKP

@avalabsofficial宣布Aethereum

@coinbase增加了对Maker治理的支持

@akashaworld宣布Ethereum.world

@bermuda 百慕大宣布将接受USDC用于加密税收和政府服务

@sendwyre引介产品的v2版本

@gitcoin Quests启动

@axieinfinity与三星进行合作

@dannyryan开始发布eth2更新速览



###  &lt;br/&gt;

### **十一月**

@splunk在其会议上使用Burner Wallet

@maplefinance 引入

@vitalikbuterin提出了简化版的EIP-1559

@defi_zap由@nodarj和团队发布

@gnosis推出Sight预测市场

@ensdomains域名拍卖结束，所有剩余名称均可按固定年费进行注册。这使得ENS域名的注册和使用激增。

**@makerdao多抵押Dai上线**

@defipulse 引入了“年利息”(IPY)指标

@ethereum推出以太坊工作坊(Ethereum Studio)

@marketingdao引入

@rdai_DAO在主网上线

@renprotocol 发布Chaosnet

@snarkyzk引介了Convexity Protocol 和option tokens (oTokens)

@samcassatt 推出Aligned Capital

@compoundfinance在A轮融资募集2500万美元

**@imTokenOfficial官宣imBTC**

@brave发布其Web浏览器v1版本

@wjvill发布eth2阶段2的详细进度更新

@martinlundfall引介Chai

@stakecapital引介StakeDAO

@opensea筹集210万美元

@messaricrypto添加DeFi指标

@niftygateway被@Gemini收购

@prylabs发布首个阶段0测试网更新

**@etherchain_org 发布信标链区块浏览器**



###  &lt;br/&gt;

### **十二月**

@camirusso开放其以太坊作品的预订

**@ethereum宣布Muir Glacier (缪尔冰川)硬分叉**

@carlbeek发表博客文章，详细的eth2 staking指南

@frontierwallet进入测试版本

@setprotocol引介Social Trading

@fidelity使用以太坊试运行员工奖励计划

**@ethereum在主网激活伊斯坦布尔网络升级**

中国大陆无法访问Etherscan

@teo_leibowitz引介开放金融指数(OFI)

**@sigmp_io为 eth2 Lighthouse客户端发布公共测试网**

**@etherscan推出信标链区块浏览器**

@eynews发布重大Nightfall更新

@zerion_io 筹集200万美元

@the_matter_labs推出ZK Sync

@loopringorg  v3版本部署到主网

@spencernoon推出“Our Network”新闻简讯

@jack (Twitter CEO) 宣布在加密货币领域部署推特团队

@fidelity计划在2020年为以太坊提供支持

@nike获得专利，基于以太坊对球鞋进行通证化

@venture_dao引入

@sablierHQ 的v1版本在主网上线

@setprotocol整合@compoundfinance通证

@avsa 发起Much Clearer Dai倡议

@parity宣布计划将Parity Ethereum客户端代码移交给DAO

@jobsincrypto在加密网站启动捐赠

@makerdao从@dragonfly_cap 和@paradigm获得2750万美元的资助

@gitcoin宣布第四轮资助

@TXRXResearch  eth2研究团队成立

@gnosis发布安全多重签名

**@weDEX_io成为首个基于@loopringorg且采用zkRollup技术的DEX**

@tornadocash v2版本在主网发布

@Forbes整合@UnlockProtocol



&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2019/12/20）]]></title><description><![CDATA[Eth2研发工作稳步推进，阶段0规范将于1月进行审计。]]></description><link>https://www.ethereum.cn/wnie2-2019-12-20</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2019-12-20</guid><pubDate>Mon, 23 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/BkxhJRi6B#fn1)

&lt;br/&gt;

✨欢迎来到2019年的最后一篇WNIE2！预祝大家节日快乐，新年快乐！!(https://hackmd.io/build/emojify.js/dist/images/basic/christmas_tree.png)

✨与往常一样，本周必读内容之一是Danny Ryan在以太坊基金会博客发布的[《eth2更新速览（六）》](https://news.ethereum.cn/archives/1038)。

 

&lt;br/&gt;

# 阶段0：信标链实现

自上一期以来，我们已经对规范进了两次更新。

[v0.9.3版本](https://news.ethereum.cn/archives/1038)带来了重大变化。主要改进是从协议中删除了signing_root，更改理由请参阅[此处](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.9.3)。同时还针对分叉选择规则和其他事项进行了一些微小更改。如果通读一遍PR，很显然，林纳斯法则起了效用——“众目睽睽之下，一切Bug无所遁形”。这是一件了不起的事情。[v0.9.4版本](https://github.com/ethereum/eth2.0-specs/issues/1487)没有太大的改变，涉及到一些微小的网络提升以及测试修复。

**核心规范预计在[BLS规范更新](https://github.com/ethereum/eth2.0-specs/pull/1532)发布之前维持稳定。一月有望发布v0.10.0版本，该版本将由[Least Authority](https://github.com/ethereum/eth2.0-specs/pull/1532)机构进行安全审计。**

Justin Drake提议将信标链的启用日期定为[7月30日](https://leastauthority.com/)，这引起了不小的轰动。当信标链准备就绪了，也不过是箭在弦上的事，也许可能会比预计的早一些。这向我们抛出了一个问题，怎样才算“准备就绪”？Justin随后在推特上就阶段0的发布日期进行了一次[调查](https://github.com/ethereum/eth2.0-specs/pull/1524)，结果显示，多数人认为当三种客户端在稳定联合测试网中运行三个月后更适合发布阶段0。值得注意的是，如果我们按照这种方式，那么至少要在2020年第二季度才会发布阶段0。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gt21SXv/19-12-20-151ab4fbed.png&quot;/&gt;&lt;/center&gt;

&lt;br/&gt;

# 测试网

Eth2测试网近来动态频繁！Danny能够在他的笔记本电脑上[同时参与三个测试网](https://twitter.com/drakefjustin/status/1207056610415333378) 🤓

Lighthouse测试网于12月8日[宣布上线](https://twitter.com/dannyryan/status/1204518958621233153)。之前所有的测试网（包括Prysm的Sapphire测试网和互操作性工作）都采用了简化参数：[最低配置](https://lighthouse.sigmaprime.io/update-19.html)（相较于作为终极目标的[主网配置](https://github.com/ethereum/eth2.0-specs/blob/88e954a9c73dff63436350b9cd530c8c9f44a94b/configs/minimal.yaml)）。最低配置包含：数量较少、规模较小的委员会；频率更低的验证者混洗(shuffling)；每个slot为6s而非12s；每个epoch只包含8个slot而非64个slot等等。这对于信标节点来说轻松很多。

具备主网配置的Lighthouse测试网无疑将我们引向了下一个阶段。**Lighthouse测试网运行期间，在4个信标节点上连接了16000多个验证者，并且持续良好运行了较长时间。**不幸的是，测试网最终出现了[故障](https://lighthouse-book.sigmaprime.io/become-a-validator.html)，在运行一周后下线。

Sigma Prime团队计划将在未来几周内重新上线经过修复和改进的测试网。大家可以阅读此[测试网操作说明](https://lighthouse-book.sigmaprime.io/become-a-validator.html)，以便在重新上线时参与其中。

Prysmatic Labs正在努力重启其网络。据该团队在实现者电话会议上的报告，**其测试网将能够运行主网配置，并在单个信标节点上连接16000个验证者，**因此我很好奇他们即将重启的新网络是否将是主网配置。

[Status测试网](https://github.com/status-im/nim-beacon-chain#connecting-to-testnets)会继续运行，并按计划每周重启一次。这是Jacek关于该测试网的[系列推特](https://github.com/status-im/nim-beacon-chain#connecting-to-testnets)。

提醒大家一下，[Etherscan](https://twitter.com/jcksie/status/1202883953381773312)和[EtherChain](https://beacon.etherscan.io/)都已经上线了能够连接到Prysmatic Labs测试网的Eth2区块链浏览器。目前，EtherChain的浏览器还可以显示[Lighthouse测试网](https://twitter.com/etherchain_org/status/1207278115954810884)。至于Eth2网络浏览器，Status已构建了一个[工具](https://twitter.com/etherchain_org/status/1207278115954810884)，可用于深入获取网络流量和元数据。对于不那么需要细节数据的用户来说，Alethio则致力于生产与其Eth1 [Ethstats](https://twitter.com/jcksie/status/1206882743663185923) dashboard类似的Eth2 Stats dashboard。

 &lt;br/&gt;

# 常规电话会议

目前有五个关于Eth2各部分的常规电话会议。

## **🛠️实现者电话会议**

12月19日进行了第30次实现者电话会议。

- [会议议程；](https://ethstats.io/)
- [会议视频](https://github.com/ethereum/eth2.0-pm/issues/112) (干货满满的70分钟，并非3.5小时那么长)；
- [我的速记](https://youtu.be/LYLiqpj-wiE?t=89)以及[Mamy的笔记](https://hackmd.io/@benjaminion/rJOaJZFRH)。

## **🛠️网络(Networking)电话会议**

我们在12月18日进行了第二次网络工作小组的电话会议。会议持续受到大家的关注和并且颇有成效。此处是本次[会议笔记](https://gist.github.com/mratsim/4a07ca7e1ec48188bbb78c8f397a506b)，以及[第一次会议的笔记](https://hackmd.io/@benjaminion/SJ3W0qwAH)。

## **🛠️阶段2电话会议**

下一次电话会议安排在一月中旬。具体时间将通过[Eth2 Phase2的电报小组](https://medium.com/chainsafe-systems/light-client-task-force-call-2-bdb3d24d2b2b)告知大家。

## **🛠️轻客户端电话会议**

在上一期的更新中，12月4日的轻客户端工作小组会议视频姗姗来迟，这里是[资料](https://t.me/eth2quilt)、[文本以及笔记](https://github.com/ChainSafe/lodestar/issues/555)。下一次通话可能会安排在1月20日左右。

## **🛠️Eth 1.x电话会议**

目前，**Eth 1.x的工作重点是为eth1设计无状态客户端模型。**由于Eth2不在该范围内，因此我不会对此进行详细跟踪。即使如此，Vitalik在电报小组中说“这些工作也与eth2高度相关”。最近一次电话会议已于12月17日进行，此处是[相关记录](https://medium.com/chainsafe-systems/light-client-task-force-call-2-bdb3d24d2b2b)。相关工作的协调在[ethresear.ch](https://blog.ethereum.org/2019/12/20/eth1x-files-digest-no-1/)上进行。

 &lt;br/&gt;

# 研究工作

请允许我介绍一下PegaSys研发工作的进展。我们的Artemis Eth2客户端代码库已移交给PegaSys的产品侧，为上线做准备。这才使得我们有机会与Harmony团队共同创建一个名为[TXRX](https://ethresear.ch/c/eth1x-research)的团队，以扩展我们的以太坊2.0研发 (顾问团队神秘的第五位成员竟然是Vitalik ! 大家可以关注TXRX团队的“官方”[推特](https://twitter.com/josephdelong/status/1206667471756939271)以获取进展更新。



**ethresear.ch上的精彩话题：**

- [Vitalik：“跨分片转移ETH面临的问题与解决方案”。](https://ethresear.ch/t/moving-eth-between-shards-the-problem-statement/6597?u=benjaminion)根据本周的实现者电话会议，这是Vitalik目前正在攻克的两个主要难题之一。
- [“支持跨分片转移ETH的元执行环境”](https://ethresear.ch/t/moving-eth-between-shards-the-problem-statement/6597?u=benjaminion)，这是上述问题的一种解决方案。
- [“FRI 作为纠删码欺诈证明”](https://ethresear.ch/t/fri-as-erasure-code-fraud-proof/6610?u=benjaminion)。短期的数据可用性是Vitalik正在攻克的另一个问题。
- [“使用多项式承诺机制的一种低度证明”](https://ethresear.ch/t/remaining-questions-on-state-providers-and-stateless-networks-in-eth2/6585?u=benjaminion)。Dankrad也在进行数据可用性研究工作。
- 针对[“Eth2状态提供者及无状态网络遗留问题”](https://ethresear.ch/t/remaining-questions-on-state-providers-and-stateless-networks-in-eth2/6585?u=benjaminion)的后续讨论。
- PegaSys Eth2 应用研究团队（不同于上文介绍的 TXRX 团队，我们有两个研发团队）最近给出了一个[“基于账户的匿名 Rollup”](https://ethresear.ch/t/remaining-questions-on-state-providers-and-stateless-networks-in-eth2/6585?u=benjaminion)的提议。尽管没有作出相关说明，但可以在eth2中将其作为一个执行环境来实现。

### &lt;br/&gt; 

### **灵光乍现**

下面的想法可能对很多人来说显而易见，但是这周我才恍然大悟（实际上是我在刮脸的时候想到的，多多包涵）。

出于诸多原因，目前已经有关于如何实现Eth1和Eth2链之间[双向桥接](https://ethresear.ch/t/two-way-bridges-between-eth1-and-eth2/6286?u=benjaminion)的探讨。Staking本身只提供了一种单向桥接方法。

我意识到实现双向桥接绝对是使得Eth2名副其实代表以太坊的唯一方式。Eth2确实是由以太坊社区成员在进行开发，也是依靠ETH自举的 ，计划与Eth1链进行叠加并且取其精华。然而，任何其他有能力的团队也能实现这些目标并将其工作成果称为以太坊2.0。唯一真正使Eth2.0链具有辨识度的方式是通过桥接与现有的Eth1链建立联系。我觉得这个想法很有趣，所以和大家分享！

 &lt;br/&gt;

### **其他资讯**

- 一个月前我在文章中提到以太坊基金会正在为Eth2征募一个技术笔者。现在已经有[合适的人选](https://twitter.com/har00ga/status/1206069313540628481)啦。 
- Lighthouse [客户端团队更新](https://twitter.com/har00ga/status/1206069313540628481)（测试网回顾），以及 [Prysmatic Labs](https://medium.com/prysmatic-labs/ethereum-2-0-development-update-41-prysmatic-labs-856851a1bd28)一如往常进行的大量工作。
- Parity正在[中止](https://www.parity.io/parity-ethereum-openethereum-dao/)其“官方委任及资助的 Serenity 开发团队”的身份，并且打算“以一种非官方的自由放任的组织形式继续进行维护”。
- 来自Jim McDonald的一系列Staking相关文章：
  - [《理解以太坊Staking存款》](https://www.attestant.io/posts/understanding-ethereum-staking-deposits/)；
  - [《Staking 密钥探析》](https://www.attestant.io/posts/exploring-staking-keys/)
- 一篇探索并阐释[跨分片通信](https://www.adiasg.me/2019/12/14/exploring-cross-shard-communication-in-eth2-0.html)的干货文章。
- Protolambda正在集思广益[如何对大量验证者的证明活动实现可视化](https://twitter.com/protolambda/status/1205287760367685632)。
- Staking难以避免中心化趋势？以下是一些有趣的探讨：
  - [《以太坊的DETH》](https://medium.com/ideo-colab/the-deth-of-ethereum-98553866e81b)，本文认为基于被质押的ETH所产生的衍生品将不可避免地导致Staking中心化；
  - 一个引人深思的[推特系列](https://twitter.com/AriannaSimpson/status/1207708826415353856)，Vitalik对此作出了一些[评论](https://twitter.com/VitalikButerin/status/1207779040435695617)。

另外，Gnosis的[Sight](https://sight.pm/)项目计划针对Eth2的发布开放一些[预测市场](https://twitter.com/koeppelmann/status/1205158597224738817)。首个关于[Eth2.0的预测市场](https://sight.pm/0xfd477cfd09b499c85afbd7aa25e8cdaad67db00823e5f20eca341c8efe38bc35/#/)已经出现：“截至2020年3月31号上午8点（UTC），为以太坊2.0发布作准备的存款合约(deposit contract)是否能完成部署？并且合约中质押的ETH会否大于等于20000？”目前投票比例大约是50/50 !

 &lt;br/&gt;

# 最后……

几周前我为Coindesk写了一篇评论文章，据说最近将会发布。这是一篇为Eth2采取开放性开发模式的生动辩护。

但其实我已经不再是Coindesk的读者了。如果我的读者对这篇文章感兴趣，这是文章的[初版](https://docs.google.com/document/d/1Rh6syJHYd7g63KyQKrIB_Tu5xa8dEAE0KxMRfLD9kss/edit?usp=sharing)，希望大家喜欢。

 

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#6]]></title><description><![CDATA[截至2019/12/19]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-6</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-6</guid><pubDate>Fri, 20 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/12/19/eth2-quick-update-no-6/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



本周的eth2更新速览来啦！一些新的eth2测试网已经上线，上周我已经[在我的笔记本电脑上运行了](https://twitter.com/dannyryan/status/1204518958621233153)。虽仍然还有很多工作要做，但我们距离实现越来越近了 🙂



&lt;br/&gt;

###  

# 要点速览

- [Least Authority](https://leastauthority.com/)将对阶段0规范进行全面审计；

- Sigma Prime推出[Lighthouse公共测试网](https://lighthouse.sigmaprime.io/update-19.html)，配置有16000+验证者和主网规范，不断挑战eth2的规模；
- [Nimbus集成了](https://github.com/status-im/nim-beacon-chain/pull/632)本地[nim-libp2p](https://github.com/status-im/nim-libp2p)，将在下周重启测试网时上线；
- beaconcha.in在[开源区块链浏览器中新增](https://twitter.com/etherchain_org/status/1207278115954810884)对[Lighthouse](https://twitter.com/etherchain_org/status/1207278115954810884)的支持；
- Eth2发布[v0.9.3版本规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.9.3)，以增强核心规范的稳定性。`v0.10.0`版本计划于1月发布，[将集成新的BLS签名标准](https://github.com/ethereum/eth2.0-specs/pull/1532)。

&lt;br/&gt;

###  

# 阶段0全面审计将由Least Authority进行

我们很高兴地宣布将由[Least Authority](https://leastauthority.com/)进行eth2规范审计。本次将**针对[eth2核心阶段0规范](https://github.com/ethereum/eth2.0-specs)**进行全面安全审计，重点关注一些关键攻击类别，例如拒绝服务（DoS）攻击、可能导致意外分叉或对抗链的资源滥用攻击、网络攻击以及任何可能对资金造成影响的攻击等等。

Least Authority是机制和激励模式设计、去中心化/分布式系统架构以及区块链系统分析方面的领先专业机构。以太坊基金会也曾与Least Authority共事过，例如[针对Discv5的审计](https://leastauthority.com/static/publications/LeastAuthority-Node-Discovery-Protocol-Audit-Report.pdf)、[Gas经济机制和工作量证明的分析](https://github.com/LeastAuthority/ethereum-analyses/blob/master/README.md)，我们很高兴有这个机会与Least Authority再次合作。**全面安全审核对于成功启动阶段0来说至关重要，初次审计报告预计将于2月初发布。**

&lt;br/&gt;

#  Lighthouse测试网发布

上周，[Sigma Prime](https://sigp.io/)发布了大家翘首以盼的[**Lighthouse公共测试网**](https://lighthouse.sigmaprime.io/update-19.html)。Lighthouse测试网的最大亮点在于**运行了主网规范配置**，并且在高峰期可以轻松**容纳16815个活跃验证者**！



Sigma Prime在发布该测试网时如是说，“我们将尝试破坏测试网，我觉得我们会成功”，然后他们确实做到了。由于两个重要的验证者节点离线，导致100多个epoch无法达成最终确定性，Sigma Prime团队决定下线测试网进行漏洞修复和优化，并且会尽快重新上线。该团队就此发布了一份[分析报告](https://lighthouse.sigmaprime.io/update-20.html)。在昨天（19日）的eth2电话会议讨论中，团队打算在20号重启测试网，并将在初步稳定性测试后开放给公众使用。

如果可以的话，请大家积极参与这些测试网的早期阶段：如果文档中有不清楚的地方，请告知团队。如果在编译时遇到问题，请开启一个issue。如果readme文档中有错别字，也烦请帮忙修改！所有其他客户端和开源软件同理，需要大家共同来维护。参与者们在维护过程中付出的积极努力都不会白费，最终呈现出来的产品也会更好地反哺每一位用户。

另外，Sigma Prime正在进行招聘，需要一位全职资深Rust开发者来从事Lighthouse开发。若有兴趣点击[此处](https://lighthouse.sigmaprime.io/hiring-dec-2019.html)了解！

 &lt;br/&gt;

# Nimbus客户端集成本地nim-libp2p

在今年的早些时候，以太坊基金会和Protocol Labs共同资助了[Nimbus团队](https://nim-lang.org/)，以创建libp2p的本地[Nim语言](https://github.com/status-im/nim-libp2p)实现。[该实现](https://github.com/status-im/nim-beacon-chain/pull/632)将应用到nimbus eth2客户端中，并使得资源有限的设备也能使用p2p网络。



我们非常高兴地在此向大家宣布，Nimbus团队最近已将该本地实现[集成到其代码库中](https://github.com/gobitfly/eth2-beaconchain-explorer)，并计划将其加入本周测试网重启工作。宏观来看，由于Nimbus团队能够为大多数计算机架构编译出简洁高效的代码，所以不论是对于Nimbus团队，还是整个p2p社区，这都是一个意义非凡的里程碑。一切都能以P2P形式实现！









&lt;br/&gt;

# beaconcha.in浏览器支持Lighthouse客户端

Bitfly的[eth2开源区块浏览器beaconcha.in](https://github.com/gobitfly/eth2-beaconchain-explorer)刚刚实现了[对Lighthouse的支持](https://twitter.com/etherchain_org/status/1207278115954810884)！在[此处](https://lighthouse.beaconcha.in/)查看相关信息。**但在Lighthouse重启其网络之前，相关功能暂时无法使用。**

我们非常高兴看到多个客户端的实现，这有助于为外部软件创建通用接口以查询和了解eth2相关内容。这与其他工具都起到了不可或缺的作用，使得软件能够监测、理解、并且与即将到来的测试网进行交互，最终应用于主网。

 &lt;br/&gt;

# Eth2规范发布日程

我们发布了eth2 [v0.9.3 – rm signing_root版本规范](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.9.3)，v0.9.4版本也即将发布，其中包含测试修复和网络更新。这是自10月份开始的0阶段v0.9.x系列微更新中的最后一次更新。这些最新的规范版本主要目的是确保阶段0信标链足够灵活，以适应新的阶段1[分片设计](https://notes.ethereum.org/KbEyHiaSRQW_KS7dDK0OFw)，同时一些clean-ups、bug修复、优化测试和网络更新也已经加入了changelog。其中许多更改的依据是客户端持续推进的测试网工作以及对主网的适应准备。

下一个规范计划于1月初发布。**此v0.10.0版本将致力于[**将新的BLS签名标准集成到核心eth2规范中**](https://github.com/ethereum/eth2.0-specs/pull/1532)**。当最终的测试网和主网发布时，v0.10.x系列规范应当具备产品级BLS。目前仍然有工作需要完成，已在全力以赴进行攻坚工作。感谢客户端团队，欢迎大家对他们进行资助或建议。这些工程师们正在为我们所有人缔造真正非凡的事物！

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[回顾以太坊的2019，用数据说话]]></title><description><![CDATA[本文回顾了以太坊区块链生态系统2019年的网络活跃度、相关数据、DeFi发展等。]]></description><link>https://www.ethereum.cn/ethereum-in-2019-2</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-in-2019-2</guid><pubDate>Mon, 16 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://media.consensys.net/ethereum-by-the-numbers-the-year-of-2019-264cc973467)

&lt;br/&gt;

到如今年复一年，以太坊生态系统从未停止过成长的步伐，今年也同样带来了新一波的革新和区块链发展浪潮。

**2019年，以太坊通过网络升级和不断增长的开发者群体实现了提升；DeFi将数亿美元的价值引入以太坊生态系统；超过520个新的去中心化应用诞生。**

让我们一同用数据理性回顾过去的一年，如此才能对未来抱有更坚定的信心。

 &lt;br/&gt;

# 网络 Network

- 今年以太坊新增账户：[**两千万+**](https://www.etherchain.org/charts/totalAccounts)
- 今年以太坊新增活跃地址：[**四百万**](https://consensys.net/research/measuring-blockchain-decentralization/)
- 今年以太坊网络升级次数：[**三次**](https://medium.com/xena-exchange/history-of-ethereum-hard-forks-will-istanbul-support-eth-prices-fe475c48873e)
- 今年以太坊区块奖励产生的Ether：[**4,728,152+**](https://etherscan.io/chart/ethersupplygrowth)
- 平均gas limit增加：[**约两百万** ](https://etherscan.io/chart/gaslimit)(从八百万增加至不到一千万)
- 以太坊活跃节点数：[**8,516**](https://www.ethernodes.org/history)

译者注：从国别分布来看，目前美国节点占比超过25%，中国超过16%；从节点运行客户端来看，超过78%为Geth，Parity超过20%

 &lt;br/&gt;

# 去中心化应用 DApps

- 2019年新增DApp数：[**520**](https://www.stateofthedapps.com/stats/platform/ethereum#new)；
- 2019年加密技术在移动端的发展：[MetaMask Mobile](https://metamask.io/)，[Argent](https://www.argent.xyz/)，[Coinbase Wallet](https://blog.coinbase.com/easily-transfer-crypto-from-coinbase-com-to-your-coinbase-wallet-b07fd9337839)等都在过去一年发布了手机钱包；
- ENS（以太坊域名服务）所有者[**人均购买1-2个域名**](https://ensowners.takenstheorem.now.sh/)，一些“鲸鱼”则拥有数百个域名。并且在某个时间点同时有[超过六十万个ENS域名](https://ens.codetract.io/)进行拍卖（该数据仅供参考）
- 到目前为止[**最长的ENS域名**](https://opensea.io/assets/0xfac7bea255a6990f749363002136af6556b31e04/53879785143933308931040741828008383227344036071913422366302998294486150476917)是：Forwhatshallitprofitamanifhegainthewholeworldandsufferthelossofhissoul.eth

译者注：该域名的中文意思是“人若赚得全世界，代价则是赔上自己的灵魂，这又有何益处呢？”（出自马太福音16:26）

- OpenSea成为最大NFT的交易市场，自其成立以来的两年时间里，NFT[**拍卖总额超过七百万美元**](https://opensea.io/blog/announcements/bringing-on-additional-strategic-investors-to-opensea/)，其中10月份的交易总额就达到了一百七十万美元；
- Gods Unchained作为以太坊上最受欢迎的DApp之一，已经创建了6,714,445个物品（截止本译文发布已达到[6,722,668](https://opensea.io/assets/gods-unchained)）；
- DAO：诞生了Moloch、MetaCartel、Ethereum Marketing以及至少其他[25个DAO](https://medium.com/axialabs/the-next-flippening-more-daos-than-tokens-60dfa46ade04)。

 &lt;br/&gt;

# 去中心化金融 DeFi

Dai稳定币贯穿了2019年的DeFi发展轨迹，使得各种新应用得以运行。



![Ethereum-2019-graphic1.png](https://i.ibb.co/RTYdMxz/Ethereum-2019-graphic1-2b6a774f21.png)



&lt;center&gt;稳定费用以及Dai供应量 图源Mkr.tools&lt;/center&gt;

**五千五百万的Dai。**在2019年期间，Dai的供应量最终达到了Maker治理规则中的上限，即1亿个Dai，因此需要针对提高供应量进行投票。年底经历的大幅下降表明了**从Sai（原单抵押Dai）向新Dai（多抵押Dai）的迁移。**

Maker稳定费用：上图的蓝线显示，稳定费用从年初的2.5%，在8月达到顶峰20.5%，然后最终降低至较为适宜的3%。**2019年的稳定费用共计[1,640,555 Dai](https://mkr.tools/governance/stabilityfee)**。

下图可视化地呈现了在过去一年中[Maker CDPs](https://mkr.tools/visualizations/historicalcdps)（现称为Vaults）在大小、年龄和抵押率方面的变化。今年有数千个Maker Vaults得以创建，下图还显示了一些Vault以相对较低的抵押率抵押了相当数量的抵押资产（在Maker Vault中抵押率不足150%会导致其被清算）。









![CDPs-for-Eth-by-numbers-20192.png](https://i.ibb.co/xqjNv46/CD-Ps-for-Eth-by-numbers-20192-4ff8054466.png)




&lt;center&gt;历史CDP 图源Mkr.Tools&lt;/center&gt;

在过去一年，在DeFi中锁定的ether数量大幅增长，最近[**超过了6.5亿美元**](https://defipulse.com/)。Ether已经成为DeFi平台和应用的首选抵押资产。







![Eth-Locked-in-Defi-Platform3.png](https://i.ibb.co/s340wBd/Eth-Locked-in-Defi-Platform3-6c5186c83a.png)


&lt;center&gt;在DeFi平台中锁定的Ether 图源Alethio&lt;/center&gt;

2019年1月1日，[Uniswap](https://dappradar.com/app/1602/uniswap)总共只有31个用户，日交易量为30个ETH以上，然而经过一年的发展，其用户数增加至数百，日交易量已经达到数千个ETH。[Synthetix](https://defipulse.com/synthetix)是基于以太坊的合成资产平台，2019年实现了前所未有的增长，其中锁定的总价值**从160万美元增长至1.6亿美元。**

 &lt;br/&gt;

# 开发者 Developers

- 2019年[Truffle](https://www.trufflesuite.com/dashboard)（以太坊智能合约开发框架）每月新增下载量超过25,000；
- ConsenSys在2019年释放出[超过30万美元的资助](https://consensys.net/blog/news/consensys-grants-wave-2-winners/)，目前第三波资助已经开放；
- 2019年开展了8个由Gitcoin支持的[虚拟黑客马拉松](https://gitcoin.co/results)，并且其发放了超过20万美元的资助；
- 仅在2019年11月，Gitcoin通过其平台就促成了30.2万美元的价值转移，迄今为止平台实现的[总价值转移已经超过280万美元](https://gitcoin.co/results)；
- [Gitcoin Quests](https://gitcoin.co/quests)由超过700位社区成员参与了1万2千多次；
- ConsenSys今年发起了一项[**“百万开发者”**](https://onemilliondevs.com/)计划，旨在将以太坊生态中的开发者扩大至一百万。

今年在开发者社区方面做了加倍的分析工作。在2019年年中，Electric Capital发布了一份报告，显示**以太坊的开发者社区规模比其他任何加密货币项目的生态系统[大了四倍](https://media.consensys.net/ethereum-has-4x-more-developers-than-any-other-crypto-ecosystem-638668eba41d)**。随着DeFi和DAO等领域的成长，以太坊开发者社区还在持续扩大。



&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth1.x 研究进展速览]]></title><description><![CDATA[Eth1.x 研究新方向重点是将当前的以太坊链转移到“无状态客户端”。]]></description><link>https://www.ethereum.cn/eth1x-files-fast-sync</link><guid isPermaLink="false">https://www.ethereum.cn/eth1x-files-fast-sync</guid><pubDate>Thu, 12 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/12/10/eth1x-files-fast-sync/)

本文转载自[unitimes.pro](http://www.unitimes.pro/p/4c5071804cb245478f56bf200efe2dec)

&lt;br/&gt;


![1.x封面.png](https://i.ibb.co/7gcsNnN/1-x-0d3dc30bff.png)

&lt;br/&gt;



[Eth1.x 研究的新方向](https://medium.com/@pipermerriam/stateless-clients-a-new-direction-for-ethereum-1-x-e70d30dc27aa)已经开始了，重点是将当前的以太坊链转移到“无状态客户端”范式，最终目标是顺利过渡成为 Eth 2.0 中的一个执行环境 (Executive Environment)。

下一次电话会议将集中在收集和组织研究主题和规划一个更结构化的相关路线图。此电话会议是开放的，任何人都可以参加，预定在12月17日下午16:00。如果你想加入，请在 [ethresear.ch](https://ethresear.ch/t/eth1-x-call-2-tuesday-dec-17th-next-steps-and-collecting-research-topics/6512)论坛上直接发信息给 Piper Merriam 或 James Hancock。

本文是对我们做过的所有努力的回顾。对那些最近加入以太坊社区，并且错过了 Eth1.x 讨论，或是想要稍微回顾一下的人而言，可能会有所帮助。本着 “–sync-mode=fast” 的精神，我们将在本文中谈及大部分的历史研究主题，并将对无状态客户端和当前研究的深入讲解留到后续文章中讨论。

首先，我们的核心开发者们意识到，以太坊路线图的最后阶段——“Serenity”，不会如最初设想的一样，那么早就准备继续。一个完全的 “Eth2.0” 的诞生，可能需要数年时间。我们需要对目前的 Eth1.0 链做出改进，以确保在一个完全的协议升级实现之前，不会出现导致以太坊无法运行的更大问题。因此，“Eth1.x”——对当前 “Eth (1.0)” 进行的更小的、 递进的升级所做的研究——应时而生，其目标是额外延长当前以太坊链的寿命至少3-5年，直到一个更为重大的 Serenity (Eth2.0) 升级的到来。

 &lt;br/&gt;

# **当前以太坊区块链有什么问题？**

问题很复杂。它不似一个安全漏洞或一个重大设计缺陷，原因是 Eth1.0 并不存在某个亟待解决的问题，可以让我们投入专门的资源进行解决。同样地，如果完全不对当前的链进行更改，那也不太可能会出现导致以太坊网络停止运行或是“着火” 🔥

然而，可能给当前以太坊网络带来灾难性情况的是，随着链状态的自然增长，其结果是对网络的性能带来细微的衰退和网络健康的损害。倘若不进行 Eth1.x 的工作，长此以往，以太坊将会面临风险。随着越来越难运行全节点，这一网络可能会变得越来越中心化；随着网络延迟的增加，它的速度可能会越来越慢；随着“状态膨胀”的出现，区块验证可能变得越发困难。**最终，随着交易吞吐量达到上限，且客户端改进越来越难以实现，终端用户与核心开发者都将非常受挫。**

我们的目标是避免以太坊遭遇一场千刀万剐的局面，即便这场局面需要好几年才会到来，但那时即便是开始立即采取措施也是为时已晚了，因此早在布拉格 Devcon4 期间就已经开始有关 Eth1.x 的讨论 (🦄&gt;💀)。

广义地说，我们面临的问题是一个非常根本而明显的显示：**以太坊区块链正变得越来越大**，但其中有一些细微的差别，当我们讨论“区块链的大小” (the size of the blockchain) 的时候，我们实际上是真的在讨论一些不同的子组件的大小，且更重要的是关于这些组件的大小会如何影响整个网络的性能。这些子组件包括：

&lt;br/&gt;

## **01. 链的存储需求**

“如果有人提到‘区块链的存储成本’”，只需跟他们说说 Amazon Black Friday 的网页：8TB 的存储需要花费125美元。区块链面临着一些真正的问题，但存储的成本并不是其中之一。”——Emin Gün Sirer ([@el33th4xor](https://twitter.com/el33th4xor/status/1200477778463907841))

在一个全节点成为以太坊的“头等公民”之前，它必须同步以太坊区块链的整个历史记录。历史记录的时间越长，要存储的数据就越多。目前，对于一个“标准的” Parity 或者 Geth 全节点来说，其存储需求约为219GB，并且每月增长10-15GB。

从绝对的存储成本的角度来看，这还不算太糟糕。完全地在消费类硬件上运行一直都是以太坊的愿景 (存档节点除外，因为存档节点需要大约3.5TB的存储)，低于500GB的消费类硬件就在一个合理的阈值范围内，因此运行一个全节点将在今后的几年内并非遥不可及。

但更强有力的论据来源于启动新的全节点的**边际成本：存储需求和同步时间的增加会导致全节点的减少，而这将进一步导致同步时间的增加和节点数量的减少。**

这样的结果是，随着时间的推移，开发者们将越来越依赖 Infura 等服务，而“真正的”区块链将越来越多地受困于云端，令普通爱好者、研究人员与业余开发者们无法触及。

&lt;br/&gt;

## **02. 区块大小与交易吞吐量**

增长的另一个方面是**单个区块大小的增长及其与整个网络交易吞吐量的关系**。与比特币不同，以太坊不会明确地按内存限制每个区块的大小，而是通过燃料限制 (gas limit) 强制规定区块大小。以太坊的 Gas 限制有效地限制了可以包含在一个区块中的交易量。这个 Gas 限制并由矿工集体决定，即通过投票的方式来动态地增加或降低 Gas 限制。最近，矿工们集体同意将以太坊的区块 Gas 限制提高至约1,000万个 Gas 单位，使每个区块比1月18日以来的大小增加了25%左右，这从理论上提高了系统的交易吞吐量。

区块 Gas 限制与矿工就新区块达成共识的能力之间存在制衡。**从理论上讲，更高的 Gas 限制会增加区块的叔块率** (叔块不能迅速传播给其他矿工，因此叔块是无法被大多数矿工接受的有效区块)。我们需要搜集更多有关“安全的”区块大小上限是多少的数据，但人们普遍认为，提高 Gas 限制带来的吞吐量提升不足以在未来 5 年内实现以太坊的发展。此外，更大的区块还会加剧链存储需求问题。

&lt;br/&gt;

## **03. 状态大小与网络性能**

以太坊是一台[随着区块数量的增加而向前移动的状态机](https://medium.com/@preethikasireddy/how-does-ethereum-work-anyway-22d1df506369)。在任何给定时刻，以太坊的完整“状态”都包括 EVM 中部署和运行的所有智能合约的集体存储，以及所有帐户和余额的当前状态。当交易被添加到一个区块时，它们通过更改帐户余额、部署新的智能合约代码或让智能合约执行自己的某些代码来更改以太坊的状态。

当前以太坊的状态大小大约是10GB。按理说，状态会随着网络上的总交易量的增长而按比例增长。因此，如果我们期望以太坊继续获得主流采纳，那么这个数字在未来几年可能会出现巨大增长。

较大的状态会影响所有客户端的两个主要性能点：

- 客户端读取状态的速度将受到限制，因此交易处理速度会变慢。处理一笔交易需要读取存储在客户端数据库中状态的相关部分。状态越大，查找交易所需的时间就越长。更重要的是，在使用 trie 结构来表示状态的客户端 (比如 Parity、Geth 和 Trinity) 中，这种减速的情况会因为底层数据库的查找 (其中实现了 trie 结构) 而变得更加严重。

- 由于需要通过更改状态来构建新的状态，较大的状态将意味着区块的验证速度将更慢。与上述推理路线相同，当验证一个新区块时，客户端必须对状态的更改进行重新计算；这涉及到了搭建一个新的状态 trie 结构和计算新的根哈希 (root hash)。从计算的角度来说，构建一个新的状态 trie 结构要比简单地查找需要更多的计算，因此与处理单笔交易相比，状态的增长对这一操作的影响更大。

基于状态驱动的性能下降是最令人担忧的。以太坊是点对点网络，这意味着细微的变化可能会对网络运行状况产生连锁反应。此外，状态的存储与更改是让客户端开发者团队更头疼的事情之一。编写和维护客户端已经够难了，而状态增长则进一步加剧了这一负担。随着状态的增长，客户的多样性和性能将会下降，这对每个人都不利。

 &lt;br/&gt;

# **潜在的解决方案是什么？**

从 Devcon4 布拉格时的启动会议开始，一直持续到2019年，很多核心开发人员、贡献者和魔法师们聚集在一起，讨论如何延长 Eth1.0链 的生命。以下是讨论过的最重要的提议及相关的内容：

&lt;br/&gt;

## **01. 适度的优化和缓解**

更为激进的删减。管理存储需求的一种方法是主动删除不再需要的部分，比如交易收据、日志和较早的历史区块。可以就全节点保存历史数据的期限达成共识 (比如3-9个月)，过期后删除，从而能够有效地降低运行节点所需的总存储。Péter Szilágyi 已经就链删减对于Eth1.0链的长期存活性进行了[全面的概述](https://gist.github.com/karalabe/60be7bef184c8ec286fc7ee2b35b0b5b#decentralized-archives)。概况起来就是，这种方式存在一些权衡，且其中一个未解决的需求是历史数据需要 (在某个地方) 可以获取，且取代了链存储所有历史记录就意味着节点必须保留被删减部分的证明 (proofs)。

区块提前公布 &amp; 状态缓存。这与减轻网络延迟带来的影响有关。提前发布区块，其中的想法是在区块被验证之前，矿工提前将该区块公布出去，这将使监听客户端有机会去猜测哪部分状态将受影响，并为下个状态对这些缓存进行预先警告。同样地，客户端可以在内存中保存部分状态，这样在同步状态失败时就不必从头开始。这些优化目前是可以实现的，且 turbo-geth 已经使用了这类优化的一些变体形式来提高性能。

&lt;br/&gt;

## **02. 通过大型硬分叉进行改变**

操作码重新定价 &amp; ETH 锁定。通常，这意味着简单地调整操作码的成本以阻止状态的进一步增长。从广义上讲，这意味着增加导致状态增长的操作的成本，和/或增加带来状态缩减的操作的奖励。但退款的方式有些棘手，因为退款一定是来自于包含在交易中的 Gas，这意味着那些仅清除内存或销毁合约的交易实际上不能按比例地获得退款。为了使交易在 Gas 方面的收入比支出更多，有可能要求合约在部署时锁定一定数量的、足以支付那些退款的 ETH。

状态租金和‘收回’。比上述重新定价操作码的方式更引人注目的是，状态租金 (state rent) 的方式通过要求合约按其占用的状态大小来成比例地支付一笔经常性费用。在支付这笔费用之前，合约将被删除或中止。对于智能合约和 Dapp 开发者来说，这种方式将是一个重大的变化，且这将需要不止一次硬分叉来实现。这种方式迄今仍是 Eth1.x 领域中讨论最广泛的提议，也是最受争议的提议。因此，关于 Eth1.0 链的状态租赁的研究已经暂停了。

 &lt;br/&gt;

# 圣杯：✨无状态客户端✨

如果状态的大小对网络的健康带来重大的问题，那么终极方案将是完全消除对状态的需求。简而言之，无状态客户端 (stateless client) 使用区块见证 (block witness) 来证明某个特定的状态更改相对于前一个状态的有效性。也就是说，客户端将只会计算新区块的状态更改，然后证明这些状态更改与前一个状态是一致的，而不会计算每个新区块的完整状态。

矿工和一些全节点将依旧需要保存完整的状态副本，这样才能从中生成区块见证。虽然对于客户端来说，在整个网络中传播区块见证会带来一些新的挑战，但这种方式的潜在益处是非常巨大的。

[无状态客户端的概念](https://ethresear.ch/t/the-stateless-client-concept/172)是最先由 Vitalik在探索 Sharding (分片) 的情况下提出来的，但之后在围绕 Eth1.x 的讨论中也被探讨。起初这种方式被认为太过复杂，但最近，随着 [Trinity 的 bean sync](https://medium.com/@jason.carver/intro-to-beam-sync-a0fd168be14a) 方式展现了 semi-statelessness (半无状态性) 对于轻客户端的可行性，无状态客户端的概念获得了很多支持。

重要的是，转向无状态或半无状态范式对现有 Eth1.0 网络的破坏要小于状态租金之类的方式，因为这种方式不会对现有客户端带来重大的更改。有状态节点和无状态轻客户端可以同时共存，且 semi-stateless (半无状态) 的以太坊将为试验不同的客户端实现提供了更多的机遇。同时，**Eth2.0 中的分片 (shards) 几乎可以肯定会是无状态的，因此当时机成熟时，这将为 Eth1.0 最终向 Serenity 过渡开辟出一条新的道路。**

我们将在另一篇文章中更深入地探讨无状态客户端。如果你已经读到此处了，你现在就赶上了 Eth1.x 研究的当前状态，并且能够跟随和加入相关的新进展！通过 ethresear.ch 加入我们吧，或者继续关注基金会发布的有关 Eth1.x 的更新文章。

</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2019/12/07）]]></title><description><![CDATA[截至2019/12/07]]></description><link>https://www.ethereum.cn/wnie2-12-7</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-12-7</guid><pubDate>Mon, 09 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/BydFZrKnr#fn2)



&lt;br/&gt;

# 要点首看

- 耶！以前的以太坊基金会博客又回来啦。👏在2014-16年期间基金会的博客是一个极好的信息来源，但在后来更多地被用作通告发布平台。Carl Beekhuizen最近发布了[《Validated: Staking on eth2 #0》](https://blog.ethereum.org/2019/11/27/Validated-Staking-on-eth2-0/)；
- 以太坊基金会博客：[《Eth2更新速览#5》](https://blog.ethereum.org/2019/12/05/eth2-quick-update-no-5/)；
- 提醒大家[Ethereum 2.0 Info](https://eth2.info/)的存在，上面提供了eth2的相关信息，我最近进行了更新。

 

&lt;br/&gt;

# 阶段0 信标链实现

首先我们有新成员加入，[Nethermind](https://nethermind.io/)与[Cortex](https://github.com/NethermindEth/cortex)脱颖而出，Cortex是.Net进行中的Eth2信标链实现。欢迎加入，一起party！





## 测试网

Prysmatic Labs的[测试网](https://prylabs.net/)保持[良好运行](https://twitter.com/preston_vanloon/status/1203017263269343232)，并且现在支持[Etherchain](https://beaconcha.in/)和[Etherscan](https://beacon.etherscan.io/)两个区块浏览器，并且刚刚正式成为第一个公共多客户端网络，本周有消息称Parity的Shasper客户[能够加入](https://twitter.com/sorpaas/status/1202651945430929409)🔥

但这并不是目前唯一的测试网。Status还与Nimbus客户端建立了[公共测试网](https://github.com/status-im/nim-beacon-chain#connecting-to-testnets)（[相关系列推特](https://twitter.com/jcksie/status/1202883953381773312)），Sigma Prime计划在未来几天发布基于Lighthouse的公共测试网。

在接下来的几周内，还会有更多这类进展，因为各个客户端不时会和彼此进行合作。我会在一月寻找一个合适的、持久的、大型的、多客户端公共网络。



## 质押合约 Deposit Contract

Jim McDonald在质押合约的工作流程中发现了一个[抢先交易(front-running)漏洞](https://ethresear.ch/t/deposit-contract-exploit/6528?u=benjaminion)（[此处](https://hackmd.io/bCZjQnOyRBqxyHKxKnTz0Q?view)有更详细的文章以及Jim提出的[解决方案](https://github.com/ethereum/eth2.0-specs/pull/1506)）。此处是[在Gitter上的进一步讨论](https://gitter.im/ethereum/sharding?at=5de110e28e906a1c8d3ab338)，以及更多[相关讨论](https://gitter.im/ethereum/sharding?at=5de90b6bd75ad3721d5b26b7)。建议的解决方法：[不要使用质押池](https://twitter.com/jadler0/status/1200423111562342400)😛

同时，运行时验证( Runtime Verification)将继续对质押合约字节码进行验证，最终报告预计会在本月发布（取决于我们最终决定对上述问题采取什么行动）。



## BLS签名方案

部署质押合约的另一个障碍也已解决。正如[前一篇文章](https://hackmd.io/@benjaminion/H12CnGHhr#Implementers’-call)所述，BLS签名方案的标准化工作现在已经使我们有信心将其用于eth2。py_ecc对此做出了[拟实现](https://github.com/ethereum/py_ecc/pull/79)。我还需要在[自己的实现](https://github.com/PegaSysEng/artemis/pull/898)上做一些工作，以使其与最终规范保持一致。



## 规范更新

正如Danny在[博文](https://blog.ethereum.org/2019/12/05/eth2-quick-update-no-5/)中所说，圣荷西州立大学（San Jose State University）研究人员正在进行一些[验证工作](https://github.com/ethereum/eth2.0-specs/pull/1495)，以[修复分叉选择规则](https://notes.ethereum.org/@djrtwo/HynY6CthS)。我很高兴看到规范能够受到学术界的检验，这是非常振奋人心的事情。

在本周的电话会议中，签名根已被同意从规范中[删除](https://github.com/ethereum/eth2.0-specs/pull/1491)，这一简化方式受到了广泛接纳。



## 网络 Networking

Least Authority已完成了对计划在Eth2中使用的discv5节点发现协议的[审计](https://leastauthority.com/blog/ethereum-node-discovery-protocol-audit/)，此处是[完整报告](https://leastauthority.com/static/publications/LeastAuthority-Node-Discovery-Protocol-Audit-Report.pdf)。他们提出的主要建议是实施DoS保护机制（就像Ari Juels和我的PegaSys同事John Brainard在1999年就提出的[那种工作量证明](http://www.arijuels.com/wp-content/uploads/2013/09/JB99.pdf)）。正如在本周[电话会议](https://hackmd.io/@benjaminion/BJ3YqrSTr#discv5)上讨论到，目前该遗漏是有意为之，同时也正在研究其他方法。

 

&lt;br/&gt;

# 阶段1 分片实现

我们预计[新的分片规范](https://github.com/ethereum/eth2.0-specs/pull/1483)在新年前后能够被合并且不再做出大改动。

Matt Garnett就eth2的潜在[执行工具链](https://github.com/quilt/pm/issues/2)展开了精彩的对话。Will V也针对[Eth2中的状态提供程序和无状态网络](https://ethresear.ch/t/remaining-questions-on-state-providers-and-stateless-networks-in-eth2/6585?u=benjaminion)列举出了一系列悬而未决的问题。

&lt;br/&gt;

# 电话会议

上周是电话会议周。Eth2开发终于被分解为多个并行的工作流程。



## 客户端实现会议

12月5日进行了第29次电话会议。

- [会议议程](https://github.com/ethereum/eth2.0-pm/issues/108)；
- [会议视频](https://youtu.be/MxeEWmEdb5E?t=309)；
- [我的速记](https://hackmd.io/@benjaminion/H1J8vYLaS)、[Mamy的笔记](https://gist.github.com/mratsim/b1fe4213ece4b60baa93be773715fd83)。



## 阶段2会议

阶段2电话会议于12月3日举行，此处是[会议议程](https://github.com/ethereum/eth2.0-pm/issues/103)。该会议没有进行记录或直播，但是有一些[笔记](https://github.com/ethereum/eth2.0-pm/issues/103#issuecomment-561938586)。阶段2会议计划每月进行一次，在Eth2 [Phase 2 Telegram](https://t.me/eth2quilt)中进行通知。



## Networking 会议

首次[Eth2 Networking会议](https://github.com/ethereum/eth2.0-pm/issues/106)是12月4号，这是[我](https://hackmd.io/@benjaminion/BJ3YqrSTr)和[Mamy的笔记](https://gist.github.com/mratsim/fef2b0a7c5a335ac6bc61c01592b3fea)。下一次会议在两周后。



## 轻客户端工作小组会议

[第二次轻客户端工作小组会议](https://github.com/ChainSafe/lodestar/issues/555)也在4号进行了。此处是本次[会议录音](https://www.youtube.com/watch?v=h_GeWO0U-bw)，以及11月4日的首次[会议录音](https://www.youtube.com/watch?v=aY4Qsk22IAE)、[详细笔录和笔记](https://medium.com/chainsafe-systems/light-client-task-force-call-1-1aaf559230fb)。



## Eth 1.x会议

[下一次Eth 1.x会议](https://ethresear.ch/t/eth1-x-call-2-tuesday-dec-17th-next-steps-and-collecting-research-topics/6512?u=benjaminion)将于12月17日进行。我为什么提到这个呢？因为Eth1和Eth2的发展方向存在越来越多的共同点，所以部分工作为将来Eth1过渡到Eth2做准备。未来是无状态(stateless)的。

 

&lt;br/&gt;

# 研究工作

几篇以工程为主的研究文章：

- Preston Van Loon的[*Voting on the Eth1 chain（*《在Eth1链上投票》）](https://hackmd.io/@prestonvanloon/H1rfsG5iH)
- Mikhail Kalinin的[*Detecting Slashing conditions（*《检测罚没条件》）](https://hackmd.io/@sYlY_LZpQIGgFmhdv6vV-A/By897a5sH)想要了解背景可参阅[本RFC](https://github.com/ethereum/eth2.0-pm/issues/63)。

第二个[Legendre PRF（Legendre pseudo-random function）赏金任务](https://legendreprf.org/bounties)已经释出。作为提醒，Legendre PRF对于生成[阶段1](https://github.com/ethereum/eth2.0-specs/blob/dev/specs/core/1_custody-game.md#legendre_bit)的多方托管证明来说可能很有帮助。即当我们想要在多个共同工作的验证者之间以去信任的方式分配质押时，这是必要的措施。

**ethresear.ch上的精彩话题：**

- Protolambda对[原子跨分片通信](https://ethresear.ch/t/commit-capabilities-atomic-cross-shard-communication/6509?u=benjaminion)进行了非常彻底的检查，并提出了新的建议。
- [Vitalik：应对Casper FFG中的51％攻击](https://ethresear.ch/t/responding-to-51-attacks-in-casper-ffg/6363?u=benjaminion)。来看看为什么“ 51％攻击对社区来说是喜大普奔的”？
- [使用HoneyBadgerMPC进行多方托管证明](https://ethresear.ch/t/using-honeybadgermpc-for-the-multi-party-proof-of-custody/6545?u=benjaminion)。这与上面提到的Legendre PRF有关：这是方案的实际MPC实现。
- 我的同事Nicolas Liochon提出了一项协议更改建议，以启用[“去信任化质押池”](https://ethresear.ch/t/trustless-staking-pools/6529?u=benjaminion0)。他的观点是，无论我们怎么做，质押池都会出现，因此我们不妨寻求一种协议内的方式来使其更加安全。我个人猜想另一种方法可能是基于合约的质押保险。

 

&lt;br/&gt;

# 其他新闻

- EvaBeylin对所有为Eth2工作的人[表示感谢](https://twitter.com/evabeylin/status/1199035479183642625)；
- 涨知识：
  - Bruno Skvorc从[可扩展性](https://bitfalls.com/2019/12/02/polkadot-vs-ethereum-2-0-shards-and-parachains/)方面比较了Polkadot和Eth2；
  - 对于SSZ狂热者，Protolambda撰写了有关[默克尔树类型抽象](https://github.com/protolambda/eth-merkle-trees/blob/master/typing_partials.md)的详尽文章；
  - Jim McDonald解释了[验证者的有效余额](https://www.attestant.io/posts/understanding-validator-effective-balance/)，这比我们想象的要复杂；
  - Adrian Sutton[就弱主观性作出了很好的阐释](https://www.symphonious.net/2019/11/27/exploring-ethereum-2-weak-subjectivity-period/)。
- [Lighthouse](https://lighthouse.sigmaprime.io/update-18.html)和[Prysm](https://medium.com/prysmatic-labs/ethereum-2-0-development-update-40-prysmatic-labs-30741bf3758b)客户端团队更新；
- Bits Trail[中标](https://twitter.com/sigp_io/status/1199865159084150785)，以对Lighthouse代码库进行审计；
- Bitfly已[将其Eth2 Beacon Chain Explorer (Eth2信标链浏览器)开源](https://twitter.com/etherchain_org/status/1198942363172982784)；
- Prysmatic团队的Terence将于1月7日[在旧金山meetup上](https://www.meetup.com/SF-Ethereum-Developers/events/266949631/)就Eth2发表演讲。



 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#5]]></title><description><![CDATA[本期内容包括多客户端公共测试网、Eth2浏览器、Eth2网络电话会议……]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-5</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-5</guid><pubDate>Sat, 07 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | Ethereum Blog





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



# 要点首看：

- Parity团队的[Shasper客户端加入](https://twitter.com/sorpaas/status/1202651945430929409)Prysmatic团队的Sapphire测试网（首个以太坊多客户端公共测试网）
- 两个eth2区块浏览器上线 – Bitfly的[beaconcha.in](https://beaconcha.in/)与[Etherscan浏览器](https://beacon.etherscan.io/)
- 开展首次eth2网络电话会议，以解决所有网络问题 – [Ben的笔记](https://hackmd.io/@benjaminion/BJ3YqrSTr)、[Mamy的笔记](https://gist.github.com/mratsim/fef2b0a7c5a335ac6bc61c01592b3fea)
- 开展首次[eth2阶段2社区电话会议](https://github.com/ethereum/eth2.0-pm/issues/103)，以整合研究成果
- 为分叉选择规则提供[解决方案](https://github.com/ethereum/eth2.0-specs/pull/1495)，确保分叉选择区块头状态与FFG最终确定信息相匹配
- 新BLS签名标准的[演示](https://www.youtube.com/watch?v=dMFgaeRdsfU&amp;feature=youtu.be&amp;t=1009)、[规格](https://github.com/ethereum/eth2.0-specs/pull/1499)与[实现](https://github.com/ethereum/py_ecc/pull/79)

###  &lt;br/&gt;

# Shasper加入Prysmatic团队的测试网

Parity团队研发的eth2 [Shasper客户端](https://github.com/paritytech/shasper)成功在Prysmatic的Sapphire 测试网上运行，标志着第一个eth2公共多客户端测试网的诞生。这是一个激动人心的开始，下个月将陆续出现更多多客户端测试网。

现在就可以通过拉取Shasper代码库，使用命令，连接到Sapphire测试网上。如果想尝试连接，请按照[此处的说明](https://github.com/paritytech/shasper/pull/191)进行操作。

###  &lt;br/&gt;

# Eth2区块浏览器上线

最近已经上线了两个区块浏览器了！目前，这两个区块浏览器都在追踪[Prysmatic Labs团队Sapphire 测试网](https://prylabs.net/)的动向，为构建信标链的验证者提供每个slot的信息。

几周前，Bitfly上线了beaconcha.in区块浏览器，并不断添加[令人感到兴奋的功能](https://twitter.com/etherchain_org/status/1202506562746638336)。 Etherscan前天也上线了他们的区块浏览器，功能和数据展示页面看起来都很酷。两者都是在线监测Prysmatic的测试网及其他测试网的绝佳选择。

我们很高兴见到越来越多适用于eth2客户端和测试网的用户/开发者工具投入建设当中：)

###  &lt;br/&gt;

# 首次eth2网络专题电话会议

到目前为止，我们一直依赖于以github上的问题/代码请求(pull-requests)、临时聊天、主要eth2电话会议以及面对面会议的形式来组织有关eth2规范网络组件的工作。这些方式在很大程度上已经起到了足够好的作用，但是对分片式区块链协议网络的研究和建设，还应得到越来越多的关注与资源支持。

为此，我们本周进行了首次[eth2网络专题电话会议](https://github.com/ethereum/eth2.0-pm/issues/106)。尽管此次电话会议没有像eth2常规电话会议那样进行实时直播，但它是公开的，向所有贡献者开放。感谢促成此次电话会议举行的各个eth2团队的p2p网络专家。由于额外的协调工作，我本来很抗拒参加此次电话会议，但首次电话会议卓有成效，我期待下一次的会议。

和往常一样，由Ben Edgington（[会议笔记](https://hackmd.io/@benjaminion/BJ3YqrSTr)）和Mamy Ratsimbazafy（[会议笔记](https://gist.github.com/mratsim/fef2b0a7c5a335ac6bc61c01592b3fea)）来做好会议记录。由于仍然有很多值得我们去研究的地方，所以下次的电话会议时间大约定在2周内。

###  &lt;br/&gt;

# 首次eth2阶段2社区电话会议

感谢Quilt团队的Will Villanueva组织了首次[eth2 阶段2社区电话会议](https://github.com/ethereum/eth2.0-pm/issues/103)。与新提上日程的网络和轻客户端专题电话会议一样，阶段2的相关内容足以确保电话会议的定期进行，以使研发工作的开展更有条理。

首次电话会议内容主要是对涉及的众多团队和个人工作的常规更新及各种正在进行的线程调查。可以在[此处](https://github.com/ethereum/eth2.0-pm/issues/103#issuecomment-561938586)查阅笔记。接下来的电话会议旨在更深入探讨有关特定技术问题。

阶段2的主要目标是进行第一轮无状态协议研究，并将研究发现范围缩小，以得到一个能在2020年实施的更具体计划中。这些阶段2电话会议是实现这一目标的重要一步。

###  &lt;br/&gt;

# 分叉选择状态修复

由Yan X Zhang领导的圣何塞州立大学研究人员致力于形式化eth2共识机制（Casper FFG）和分叉选择规则（LMD GHOST）的共同属性。 在公布工作进度之前，他们在FFG + GHOST的互通方面中发现了一个极端案例，即区块树的分支可能包含最新的已验证/已确认的区块，但实际上这些区块在链上的状态并未显示为已验证/已确认。在分叉选择中留下这样的“不可行”分支可能会导致验证者的投票与本地最终确定信息不一致的情况，并且在某些情况下可能导致信标链活性的丧失。可以在[此处](https://notes.ethereum.org/@djrtwo/HynY6CthS)阅读有关此特定情况和建议解决方案的更多信息。

在我们的规范存储库中[有一个修复正在审核当中](https://github.com/ethereum/eth2.0-specs/pull/1495)，它能够解决这种情况。我们希望此修复将在一周内发布。

###  &lt;br/&gt;

# 新BLS标准的规范与实现

期待已久的BLS标准最近在[IETF第106次会议](https://www.ietf.org/how/meetings/106/)上亮相以征求公众意见。可以自行查看此次演示和幻灯片。该演示按计划进行，新BLS标准有望被许多区块链项目采用，并（最终）被IETF社区采用。在漫长的IETF征求意见过程结束之前，我希望以太坊基金会和其他许多项目能尽快更正式地宣布这一标准的预期用途。

规范存储库中有两个正在审核的代码请求草稿（[1][https://github.com/ethereum/eth2.0-specs/pull/1398 ](https://github.com/ethereum/eth2.0-specs/pull/1398)[2]https://github.com/ethereum/eth2.0-specs/pull/1499）以及[正在py_ecc库中审核](https://github.com/ethereum/py_ecc/pull/79)的新标准实现。审核完成后，我们将生成新的BLS测试向量，供eth2客户端常规使用，目的是为了将测试网切换到实施一月份面世的修改后BLS方案。

BLS标准还消除了发布eth2质押合同的最终障碍之一。Runtime Verification团队当前正在完成关于质押合同字节码的正式验证和分析的报告。预计该报告将在本月底公布，以供公众审查，之后我们就真的可以启动新BLS标准了🚀。



&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[伊斯坦布尔硬分叉：我们需要了解的事]]></title><description><![CDATA[本次升级包含的EIPs、用户指南、未来发展方向。]]></description><link>https://www.ethereum.cn/everything-you-need-to-know-about-the-istanbul-hard-fork</link><guid isPermaLink="false">https://www.ethereum.cn/everything-you-need-to-know-about-the-istanbul-hard-fork</guid><pubDate>Tue, 03 Dec 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://consensys.net/blog/news/everything-you-need-to-know-about-the-istanbul-hard-fork/)

&lt;br/&gt;

以太坊网络第八次升级——伊斯坦布尔硬分叉，定于**2019年12月6日**进行。对于不熟悉“硬分叉”一词的读者，可以将其视作“网络升级”。最终的确切升级日期可能会因动态的出块时间和时区而有所不同。因此，用户可以在[Etherscan](https://etherscan.io/block/countdown/9069000)上追踪伊斯坦布尔硬分叉倒计时。

伊斯坦布尔硬分叉是[Eth1.x](https://docs.ethhub.io/ethereum-roadmap/ethereum-1.x/)阶段的其中一次升级，Eth1.x之后将迎来[Serenity (ETH2.0)](https://pages.consensys.net/serenity)，以太坊共识机制也将由目前的PoW（工作量证明）转为PoS（权益证明）。当前确定的伊斯坦布尔升级**区块高度为＃9069000**，且预计在2019年12月6日(周五)进行此次硬分叉。

总的来说，本次伊斯坦布尔升级将**改变部分操作码的成本**，以防止垃圾区块攻击并且整体上提高拒绝服务（DoS）攻击的弹性。此次升级将提升以太坊和Zcash以及其它基于Equihash(Zcash挖矿算法)PoW加密货币的**互操作性**。本次升级为操作码带来一系列改变，这些变化还有助于提升基于**零知识隐私技术（如SNARKs和STARKs）解决方案**的可扩展性。

&lt;br/&gt;

# 伊斯坦布尔升级包含的EIPs

EIP全称是Ethereum Improvement Proposals（以太坊改进提案），每次以太坊硬分叉之前都会就EIP进行探讨。任何人都可以撰写EIP，针对以太坊网络提出改进建议。伊斯坦布尔升级总共收到了11个EIP提交，其中有**6个EIPs**被敲定在本次升级中实施。

以下是本次伊斯坦布尔升级包含的EIPs：

- [**EIP-152：**](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-152.md)增加Blake2压缩函数 F预编译。该EIP将使BLAKE2b哈希函数和其他更高阶的64位BLAKE2变体可以在EVM上低成本运行，从而提高以太坊与Zcash以及其它基于Equihash算法的PoW加密货币的互操作性。
- [**EIP-1108：**](https://eips.ethereum.org/EIPS/eip-1108)由于当前椭圆曲线算法预编译的成本过高，因此本EIP计划降低alt_bn128预编译的gas成本。对预编译进行重新定价将对以太坊上的许多隐私解决方案和扩展解决方案大有裨益。[5]
- [**EIP-1344：**](https://eips.ethereum.org/EIPS/eip-1344)当前，还没有关于如何为特定网络设置chain ID的规范，该操作依赖于客户端执行者和区块链社区进行手动选择。该EIP建议使用chain ID来防止不同链之间的重放攻击，并且在处理签名时（尤其是第2层签名方案），在智能合约内部具有同样的可能性将有所帮助。
- [**EIP-1844：**](https://eips.ethereum.org/EIPS/eip-1884)以太坊状态的快速增长导致某些操作码比以往更加占用资源。因此，该EIP对某些操作码进行重新定价，从而在gas支出和资源消耗之间达到良好平衡。
- [**EIP-2028：**](https://eips.ethereum.org/EIPS/eip-2028)调用链上数据需要在以太坊网络上支付gas。该EIP的一部分内容将成本从目前的68 gas/字节降低到16 gas/字节，这将有助于增加带宽，使得更多数据可以容纳在一个区块中。
- [**EIP-2200：**](https://github.com/sorpaas/EIPs/blob/sp-eip-new-net-metering/EIPS/eip-2200.md)为SSTORE操作码提供净gas计量变化的结构化定义，启用新合约存储用法，并且减少大多数执行方式过高的gas费用。

&lt;br/&gt;

# 网络升级用户指南

**以太坊普通用户**

如果您在以下任意服务中持有或使用ETH，则无需为此执行任何操作：

- 通过MetaMask或Coinbase Wallet等移动钱包持有或交易ETH；
- 在Coinbase、Binance、Kraken等交易所持有ETH；
- 通过Ledger或Trezor等硬件钱包持有ETH。

如果其中一些服务通知您采取额外措施，如交易所、硬件设备或钱包服务，请确保在适当情况下遵循建议。

&lt;br/&gt;

**节点运行者**

以太坊是一个去中心化的点对点网络，因此当前正在运行以太坊基础设施的任何用户都需要将其软件更新为“fork-ready”(已为此次分叉做好准备)的以太坊客户端版本，并应在12月1日之前完成更新。

如果您运行的是[Infura](https://infura.io/)，则无需进行任何更改。Infura已准备就绪，您无需采取任何操作。三年多来，Infura一直持续运行可靠的以太坊基础架构，并且已被证明足以在网络硬分叉期间处理大规模更新。Infura会保障升级过程，因此您可以继续放心构建软件。

以下软件版本已于9月下旬发布。如果您“错失良机”而未能及时升级软件，那么将无法再准确获取区块链数据的来源。若是错失此次分叉，您的节点需要与以太坊区块链重新同步，这可能需要花费数小时甚至数天时间。

**节点如何做到“fork-ready”：**

- 定期检查[客户端页面](https://ethernodes.org/istanbul)以了解软件更新公告；
- 检查[分叉更新信息](https://eth.wiki/en/roadmap/istanbul)，以确定您的应用程序是否需要采取任何措施，或者是否会对用户产生影响；
- 在达到分叉区块高度之前更新您的节点。

 

&lt;br/&gt;

# 以太坊下一步怎么走？



作为ETH 1.x的一部分，伊斯坦布尔升级之后预计还有一系列硬分叉，共同对以太坊主网进行可供短期采用的全面升级。有关以太坊1.x及其幕后团队的更多信息，请参见[此处](https://docs.ethhub.io/ethereum-roadmap/ethereum-1.x/)和[此处](https://en.ethereum.wiki/eth1)。

[本文](https://eth2.ethereum.cn/yan-shen-yue-du/mai-xiang-ning-jing-serenity)是Serenity的路线图，包括实现以太坊权益证明机制的所有阶段。

宁静(Serenity)的阶段1将推出[信标链(Beacon chain)](https://media.consensys.net/state-of-ethereum-protocol-2-the-beacon-chain-c6b6a9a69129)，这是一条[权益证明（PoS）](https://media.consensys.net/the-state-of-scaling-ethereum-b4d095dbafae)区块链，将成为以太坊终于从工作量证明转变权益证明共识机制的标志。

*译者注：此前根据非正式预计，信标链将于2020年第一季度启动。*

信标链启动运行之后，将与目前的以太坊PoW链并行运行，以确保两条链之间的连续性不中断。了解以太坊网络升级和[Serenity](https://pages.consensys.net/serenity)发展动态，敬请关注后续文章。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[如何参与eth2 staking（开篇）]]></title><description><![CDATA[以太坊基金会系列博文之开篇：eth2概述，包括eth2各阶段简要介绍、设计理念、节点与客户端。]]></description><link>https://www.ethereum.cn/validated-staking-on-eth2-0</link><guid isPermaLink="false">https://www.ethereum.cn/validated-staking-on-eth2-0</guid><pubDate>Thu, 28 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/11/27/validated-staking-on-eth2-0/)





&lt;br/&gt;


![质押1.png](https://i.ibb.co/WyP26VY/1-8cf3398852.png)

&lt;br/&gt;



首先感谢Danny 与Joe的协助。

随着信标链临近发布，eth2也越来越接近定局，现在是时候与社区快速同步最新eth2的内部运作方式以及成为验证者的具体要求、激励机制以及体验了。本文将从较高层面对eth2进行概述，往后还会发布与eth2验证者各方面相关的系列文章，本文仅作为基础开篇。

虽然迄今为止eth2的准备工作已进行了很长一段时间，但在这几年中也取得了巨大进展。最初，由智能合约管理的分片技术和权益证明(PoS)机制是独立的设计，而如今它们已实现高度互联，**在效率、可扩展性和安全性方面得到了显著改善。**

 &lt;br/&gt;

# eth2的各个阶段

随着eth2组成部分之间的联系变得越来越紧密，其他部分也被划分为多个阶段，以便更好地梳理eth2不同部分的内容。在撰写本文时，随着客户端软件开发工作进入最后收尾阶段，阶段0即将启动。同时，阶段1的规范已经制定完成，阶段2的规范正在积极研发中。

- **阶段0**的内容是信标链，而**信标链是eth2的核心**，能够管理验证者并且协调分片链。信标链作为实践基础，引导着eth2其他所有方面的发展。
- **阶段1**的实现以阶段0为基础，主要内容是**将数据写入分片链**。由于阶段0为分片链奠定了大部分基础工作，阶段1实现的复杂程度比其他组件要低得多。
- **阶段2**是eth2的执行阶段，基本来说就是将eth2从强大的数据库升级成为**完全去中心化的计算平台。**

&lt;br/&gt; 

# 阶段0究竟是什么？

如前所述，信标链能够跟踪验证者集和分片链的状态。在实践中，这意味着如果（定期）跟踪信标链上的动态，用户将获得足够的信息以验证eth2中发生的任何事情。在信任的基础上进一步验证。

为了使PoS系统正常运行，需要就验证者是哪些以及每个验证者的质押情况达成共识，这样才能知道他们的投票权重有多大，并根据他们的行为进行适当的奖惩。信标链也会管理eth2的分片链，具体体现为在分片中分配验证者职责以及跟踪每个分片的当前状态。

Eth2与其他PoS系统的部分区别在于参与协议的验证者绝对数量不同。其他 PoS系统中的验证者数量可能为数十个、数百个或者数千个，而eth2的验证者将**以数十万甚至数百万计**。这种程度的去中心化之所以成为可能，得益于验证者小组（即委员会）达成的中间共识。信标链根据一定的随机性来将验证者分配到委员会中，委员会负责评估某些部分是否属于信标链和分片链。然后，每个委员会的投票将经由加密聚合成一个证明，而这意味着验证整个委员会的所有投票不会比验证单个投票麻烦许多。因此，**要检查信标链的有效性，只需要部分聚合签名就可以评估大多数验证者的投票。**

信标链也会跟踪eth1链和其中的押金，如此一来新的验证者就可以通过将32个ETH发送到部署在eth1链上的质押合约(deposit contract)来加入eth2系统。通过使信标链对eth1链进行投票验证，在将来eth2就可以为eth1规范链（最长链）上的区块提供经济保证，从而增强eth1链的安全性。

 &lt;br/&gt;

# 节点和客户端

eth2区分了信标节点和验证者客户端，验证者需要这两者才能履行其职责。信标节点（即节点）负责维护整个信标链以及用户或验证者可能需要使用的任意分片。

顾名思义，验证者客户端（即客户端）负责处理的是单个验证者的逻辑。具体实现体现为通过与信标节点进行通信以了解信标链的当前状态，适时证明和提议区块，最后请求信标节点将区块信息发送给其他节点。

注：如果没有运行验证者客户端，那么信标节点包含所有与eth2进行去信任交互所需的所有信息，这类似于eth1中的全节点。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/s9CkR0P/2.png&quot;/&gt;&lt;/center&gt;








以下摘取了一些区分信标节点和验证者客户端的原因：

- 要成为验证者，首先需要抵押32个ETH，因此想要质押更多数量ETH的用户就需要运行多个验证者实例。将节点和客户端区分开使得这些用户在仅运行一个信标节点的情况下连接多个验证者客户端，从而减少了计算、内存和存储需求。
- 独立区分的验证者节点能够更容易编写、推理并审核较小的代码块，因此其安全性可能会更高。
- 对于担心出现冗余的用户来说，并行运行多个节点，降低了验证者离线的几率。
- 由于验证者客户端只能通过信标节点与eth2网络的其他部分进行交互，甚至到时还需要通过一个[受限的API](https://github.com/ethereum/eth2.0-APIs/blob/master/apis/validator/beacon-node-validator-api.md)，这样大大缩小了验证者节点的受攻击面。
- 如果希望与eth2进行交互但又不想成为验证者，用户只需运行一个信标节点，这将授予他们访问信标链和分片的权限。

 &lt;br/&gt;

# 设计理念

eth2的设计理念为eth2内的所有决策提供了有用的参照，并且在许多实例中封装了eth2与其他协议之间的差异。

- **协议是基本原则**：认识到一切都需要进行权衡，因此协议的安全性和活性优先于其他设计需求。
- **抱最大希望，做最坏打算**：eth2假设验证者怠惰、收受贿赂、攻击系统的情况，除非采取措施对验证者进行激励。此外，还假定网络不完全可靠，并且灾难性事件的发生可能会迫使大量验证者离线。基于这些假设，eth2应该要做到有备无患，具备在第三次世界大战中幸存下来的能力。
- **可用性难度最小化**：eth2已经尽可能地简化了，以便更容易理解、传播、审计、开发无漏洞客户端并且通常避免了极端情况。
- **最大程度去中心化**：PoS协议普遍容易在验证者数量这一点上作出妥协，而eth2的设计理念就是要将验证者的规模拓展至数百万，同时鼓励这些验证者独立于彼此履行职责。
- **预见意外**：eth2上的所有组件都是抗量子计算机，或是能够在量子灾难发生时被替换为抗量子计算机的组件。
- **民治民享**：eth2必须要能够在笔记本电脑上运行。参与的门槛越低，参与者就越多，而这也意味着更高的去中心化程度。

 &lt;br/&gt;

# 结语

相信看到这里大家已经对eth2有了一些基本了解，在本系列的后续文章中，我们会为大家解读更多eth2得以持续运作的细节，敬请关注。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。
</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2019/11/22）]]></title><description><![CDATA[截至2019年11月22日]]></description><link>https://www.ethereum.cn/wnie2-2019-11-22</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2019-11-22</guid><pubDate>Mon, 25 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://notes.ethereum.org/@ChihChengLiang/Sk8Zs–CQ/https%3A%2F%2Fhackmd.io%2F%40benjaminion%2FH12CnGHhr?type=book)



&lt;br/&gt;

# 重点关注

- [Eth2速览](https://blog.ethereum.org/2019/11/21/eth2-quick-update-no-4/)[(](https://blog.ethereum.org/2019/11/21/eth2-quick-update-no-4/)[4](https://blog.ethereum.org/2019/11/21/eth2-quick-update-no-4/))，这是有关Eth2更新的官方信息源。
- Will Villanueva的 Into the Ether [访谈 ](https://ethhub.substack.com/p/will-villanueva-ethereum-20-phase)是一期关于 Eth2 阶段2现状的高超概述。Will 和 Eric一起精彩地对阶段2进行了交流。 ([下载/播放](https://api.substack.com/feed/podcast/175452.mp3))
- Danny Ryan 与 Tom Shaughnessy 在 Chain Reaction 的[访谈](https://podcasts.apple.com/us/podcast/ethereums-danny-ryan-the-definitive-eth-2-0-update/id1438148082?i=1000456505887)是真的棒，尤其是他们关于近期阶段1分片变动的讨论（[下载](https://mcdn.podbean.com/mf/download/hbp6nb/Danny_Ryan_v3.mp3)）。

 &lt;br/&gt;

# 阶段0：信标链实现

## 版本更新

阶段0规范的[ v0.9.2](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.9.2) 版已经发布。其中唯一对主版本的重大改变是启动链所需抵押 ETH 的验证者数量从 65536 减少到16384。相应的，抵押的 ETH 数量从200万减少到50万。Danny 解释了[这种做法背后的思考](https://github.com/ethereum/eth2.0-specs/pull/1467)。

除了核心版本更新，还有关于进一步对[分叉选择规则的强化](https://github.com/ethereum/eth2.0-specs/pull/1477)和验证者加入证明子集的[说明指引](https://github.com/ethereum/eth2.0-specs/pull/1476)更新。

似乎我们正在接近对阶段0规范的再次冻结，这对于测试网的启动是个好兆头。

不过，在阶段0规范重新冻结之前，Protolambad (译者注：这是一位以太坊基金会成员）想要审查[移除](https://github.com/ethereum/eth2.0-specs/issues/1487) [signing_root](https://github.com/ethereum/eth2.0-specs/issues/1487) 结构，取而代之的是签名的区块容器 (block containers)。本周的开发者电话会议看起来支持这种做法；下次电话会议将会决定是否采纳。

## 测试网

提到测试网，Prysmatic 最近[重新部署](https://medium.com/prysmatic-labs/ethereum-2-0-testnet-update-1-ad24dec45590)他们的[测试网](https://prylabs.net/)。我认为[注册](https://prylabs.net/participate)体验十分顺畅（除非你错误配置了 docker volumn 以及不小心丢失了验证者密钥）。试一下，非常有趣！我5天里挣了0.5个Goerli 测试网贷币 BeaconEth。

可以查看一下这个有关Prysm测试网的[ Beacon Chain Explorer](https://beaconcha.in/) (信标链浏览器)，它是有[Etherchain](https://www.etherchain.org/) 背后的[团队](https://twitter.com/etherchain_org/status/1197480153594695680)一起搭建的。

Status也搭建了一个欢迎大家加入的[测试网](https://github.com/eth2-clients/eth2-testnets/tree/master/nimbus)。该测试网每周二进行重置，加上下周一能用的更新代码库。

Lighthouse 团队正计划抓紧开放他们的测试网。可以关注这方面的进展。

## 测试更新

Sigma Prime 从以太坊基金会处得到一笔赞助来继续[差异化](https://blog.sigmaprime.io/beacon-fuzz.html)[模糊测试](https://blog.sigmaprime.io/beacon-fuzz.html)工作。他们正在与所有的客户端团队合作把他们的代码集成进去。差异化模糊测试是对规范的不同实现进行测试，并验证这些实现是否会出现不一致的情况：这是一个有可能发生在真实网络上的实验过程，但我们能够在实验中运行一个参考实现 (reference implementation)。

 &lt;br/&gt;

# 阶段1：分片实现

当前将[新的分片提议](https://notes.ethereum.org/KbEyHiaSRQW_KS7dDK0OFw)转换为[规范形式](https://github.com/ethereum/eth2.0-specs/pull/1483)的工作仍在继续。看起来马上要完成：去看一眼，给点反馈吧。

 &lt;br/&gt;

# 阶段2：执行环境。

本周的明星是阶段2。

ConsenSys Quilt 团队的 Will Villanueva 发表一篇关

于[Eth](https://medium.com/@william.j.villanueva/ethereum-2-0-phase-2-progress-7673b57eabff)[2.0阶段2](https://medium.com/@william.j.villanueva/ethereum-2-0-phase-2-progress-7673b57eabff)[进展](https://medium.com/@william.j.villanueva/ethereum-2-0-phase-2-progress-7673b57eabff)的鸿篇巨著。很值得与上文提到的 Will 的访谈结合起来看一下。

此外还有一篇来自 John Adler 的有关 [Eth2.0 中继网络和费用市场](https://medium.com/@adlerjohn/relay-networks-and-fee-markets-in-eth-2-0-878e576f980b)的文章。John 在文中做了一些极其精彩的解释工作。

现在有一个围绕阶段2话题讨论的[电报](https://t.me/eth2quilt)[小组](https://t.me/eth2quilt)，对于接下来的**社区电话会议**请往下看。

我们已经到了 Eth2 阶段2，Hans Enlin 凭借《[ETH2.0阶段](https://drive.google.com/drive/folders/1uT6t0Aa-iJz8244WY5KcCiZnH_W_fMMZ)[1](https://drive.google.com/drive/folders/1uT6t0Aa-iJz8244WY5KcCiZnH_W_fMMZ)[到阶段](https://drive.google.com/drive/folders/1uT6t0Aa-iJz8244WY5KcCiZnH_W_fMMZ)[2](https://drive.google.com/drive/folders/1uT6t0Aa-iJz8244WY5KcCiZnH_W_fMMZ)[的图形化描述](https://drive.google.com/drive/folders/1uT6t0Aa-iJz8244WY5KcCiZnH_W_fMMZ)》成为EthWaterloo 黑客松上的赢家。

 &lt;br/&gt;

# 实现者电话会议

11/21进行了第28号电话会议

- [会议](https://github.com/ethereum/eth2.0-pm/issues/101)[议程](https://github.com/ethereum/eth2.0-pm/issues/101)
- [会议](https://youtu.be/DzLrxuN55VA?t=372)[视频](https://youtu.be/DzLrxuN55VA?t=372)
- 我的[速记](https://hackmd.io/@benjaminion/BkllOMNnS)及[完整会议记录](https://github.com/ethereum/eth2.0-pm/blob/aa008c05b543c47f0b353dfcbaaf1c50c9b2b565/eth2.0-implementers-calls/call_028.md)

电话会议中的一些 BLS 新闻：本周新的“hash-to-curve”算法标准化又向前迈了一步。在新加坡的 IETF 会议上展示了BLS 规范的 [v5 版本](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-05)，并没有收到什么警示。然而要成为一个完整的 IETF 标准仍然有很长的路，不过该版本很可能已经足够稳定，可以用于区块链使用。大会的[幻灯片](https://datatracker.ietf.org/meeting/106/materials/slides-106-cfrg-update-on-draft-irtf-cfrg-hash-to-curve)和[视频](https://www.youtube.com/watch?reload=9&amp;v=dMFgaeRdsfU&amp;feature=youtu.be&amp;t=1009)。

&lt;br/&gt;

# 其他电话会议

社区电话会议是一个推进工作的有效方法，不过我们到了一个单场电话会议已经不能覆盖所有议题的阶段。不少于4场别的常规电话会议最近突然袭来：

- 有一场新的 [Eth1.x](https://ethresear.ch/t/scheduling-our-first-call/6443?u=benjaminion) [研究电话会议](https://ethresear.ch/t/scheduling-our-first-call/6443?u=benjaminion)（第一次会议的[笔记](https://hackmd.io/No1wwU7yT1adgjsPKJANoA)）。主要目的是为了 Eth1 转变成 Eth2 的执行环境做准备。
- 一场新的由 Will V 主持的[阶段2社区电话会议](https://github.com/ethereum/eth2.0-pm/issues/103)，会议发生于UTC时间2019/12/03号（周二）15:00。
- [下一场](https://github.com/ChainSafe/lodestar/issues/555)轻客户端任务重心会议将于UTC时间2019/12/04（周三） 15:00进行。
- 我们正在发起一个旨在协调所有我们需要达成一致向前推进的网络相关事宜的常规网络电话会议。获取相关新闻，请关注 eth2-pm repo。

##  

&lt;br/&gt;

# 研究

Jim McDonald 进行了一些有关验证者奖励结构和具体数字的思考。他提了[一些建议](https://ethresear.ch/t/alteration-to-0-9-validator-rewards-calculation/6467?u=benjaminion)。

Dean EigenMann 建议在信标链上[缓存常用](https://ethresear.ch/t/yank-to-beaconchain/6478?u=benjaminion)[的](https://ethresear.ch/t/yank-to-beaconchain/6478?u=benjaminion)[合约](https://ethresear.ch/t/yank-to-beaconchain/6478?u=benjaminion)，让它们更容易被使用。

捎带说一下，我不太清楚一个无状态的范式如何处理合约代码。原则上，如果我想用这种模型运行一个合约，我需要提供该合约的全部字节码以及我的交易数据见证 (transaction data witnesses)。(这里不是在谈 EE，而是 EE 将执行的常规合约代码。）这很有可能不现实，需要在执行节点上缓存合约代码。因此 Dean 的提议看起来像是对这的一个扩展：热门合约被从 L2 缓存（执行节点）中迁移到 L1（信标节点）缓存中。

 &lt;br/&gt;

# 其他新闻

- 以太坊基金会正在[寻找](https://twitter.com/dannyryan/status/1197968986979237889) [Eth2](https://twitter.com/dannyryan/status/1197968986979237889) [相关的技术](https://twitter.com/dannyryan/status/1197968986979237889)[写手](https://twitter.com/dannyryan/status/1197968986979237889)。🎉 耶!! 🎉
- 来自 [DevCon V](https://www.youtube.com/channel/UCNOfzGXD_C9YMYmnefmPH0g/videos) [重大议题的视频](https://www.youtube.com/channel/UCNOfzGXD_C9YMYmnefmPH0g/videos)已经发布。其中有很多 Eth2 材料，包括：
  - [以太坊2.0阶段1及](https://www.youtube.com/watch?v=0phnWn5ecyw)[阶段](https://www.youtube.com/watch?v=0phnWn5ecyw)[2开发者经验,](https://www.youtube.com/watch?v=0phnWn5ecyw) 来自 Hsiao-Wei Wang, Jacek Sieka, Barry WhiteHat, Karl Floersch 及Will Villanueva.
  - [以太坊2.0经济学](https://www.youtube.com/watch?v=9LlNUC68e8I), 来自 Collin Myers.
  - [libp2p生态：现状及未来](https://www.youtube.com/watch?v=NZL7XBxTI_s)，来自 Raúl Kripalani
  - [Ewasm 2.0:](https://www.youtube.com/watch?v=8H1TCbW0LJQ) [Eth2.0](https://www.youtube.com/watch?v=8H1TCbW0LJQ) [的状态执行](https://www.youtube.com/watch?v=8H1TCbW0LJQ)
  - [通往Eth2](https://www.youtube.com/watch?v=8yMh0Nxyqks)[，](https://www.youtube.com/watch?v=8yMh0Nxyqks)[阶段2](https://www.youtube.com/watch?v=8yMh0Nxyqks)[&amp;](https://www.youtube.com/watch?v=8yMh0Nxyqks)[阶段2测试网之路](https://www.youtube.com/watch?v=8yMh0Nxyqks), 来自 Will Villanueva &amp; Matt Garnett.
  - [为何 ](https://www.youtube.com/watch?v=1dmPPRkow_c)[Dapp](https://www.youtube.com/watch?v=1dmPPRkow_c) [用户将会讨厌](https://www.youtube.com/watch?v=1dmPPRkow_c)[跨](https://www.youtube.com/watch?v=1dmPPRkow_c)[分片通信以及关于此你能做些什么](https://www.youtube.com/watch?v=1dmPPRkow_c), 来自 James Prestwich.
- 加到我的必看列表：[Matt Garnett](https://drive.google.com/file/d/1BUyokWe7y_qZcBT8vxhD4nzJiZwX8IgY/view) [解释SSZ](https://drive.google.com/file/d/1BUyokWe7y_qZcBT8vxhD4nzJiZwX8IgY/view)（37分钟）
- 有关 Eth2 上使用轻客户端的[数据可用性讨论](https://medium.com/swlh/data-availability-on-ethereum-2-0-light-node-en-aec1ce6ac17c)
- 来自 [Prysmatic](https://medium.com/prysmatic-labs/ethereum-2-0-development-update-39-prysmatic-labs-257d538d7f63)[ Labs](https://medium.com/prysmatic-labs/ethereum-2-0-development-update-39-prysmatic-labs-257d538d7f63) 的最新开发更新
- 有一个新的使用 [Go](https://github.com/kilic/bls12-381) [语言实现的](https://github.com/kilic/bls12-381) [BLS12-381](https://github.com/kilic/bls12-381)[ 匹配](https://github.com/kilic/bls12-381)[库](https://github.com/kilic/bls12-381)。我听说 Prysmatic Labs 计划采用这个库。
- 对于母语为法语的社区成员，Ethereum France 对来自 Status 的 Eth2 客户端团队的 Mamy 进行了一场[精彩的采访](https://www.ethereum-france.com/les-francais-qui-font-ethereum-2-mamy-ratsimbazafy-de-status/)。我就知道我得会因为一个原因学习法语：35年后它终于来到了我的面前🥐

 

 

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth2更新速览#4]]></title><description><![CDATA[本期内容包括eth2差异化模糊测试、轻客户端工作小组、eth1和eth2单向桥接。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-4</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-4</guid><pubDate>Thu, 21 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/11/21/eth2-quick-update-no-4/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;

Eth2更新速览第四期来啦！除了eth2客户端的持续开发，本周还有许多其他值得讨论的内容。

 &lt;br/&gt;

# 要点首看

- **Sigma Prime团队获得资助，研究[eth2差异化模糊测试](https://github.com/sigp/beacon-fuzz/)；**
- **成立[轻客户端工作小组](https://medium.com/chainsafe-systems/ethereum-light-client-task-force-go-99485011b095)；**
- **Eth1和eth2单向桥接说明。**

 &lt;br/&gt;

# 资助差异化模糊测试研究



Sigma Prime团队获得了一笔资助，以进行eth2客户端的[差异化模糊测试](https://github.com/sigp/beacon-fuzz/)工作。模糊测试可以在主网部署之前识别共识问题，因此这项工作对于能否成功发布多客户端网络来说至关重要。

“模糊测试”是指在软件中抛出许多随机输入以观测其反应的行为。在对软件进行模糊测试时，通常的目标是寻找导致意外崩溃的输入。找到该输入后，我们便找出了问题所在，并就此对软件进行调试。

差异化模糊测试有些不同。我们不是在测试中寻找崩溃原因，而是寻找协议的不同实现针对相同输入具有不同输出的情况。在区块链语境中，我们使用差异化模糊测试来检测一系列区块在两个不同客户端上呈现不同结果状态的情况。理想情况下，产品中不应该存在该情况。

 &lt;br/&gt;

# 轻客户端工作小组



Chainsafe / [Lodestar](https://github.com/ChainSafe/lodestar)是针对eth2轻客户端进行研发的以太坊基金会资助获得者，现组成了[轻客户端工作小组](https://medium.com/chainsafe-systems/ethereum-light-client-task-force-go-99485011b095)。该工作组的任务是确保轻客户端成为eth2的第一类成员(first class citizens)。为此，成员每月举行一次[电话会议](https://github.com/ChainSafe/lodestar/issues/555)，旨在推动轻客户端的研究、标准、规范和教育。

仅在类似eth2的分片协议中，才需要丰富的轻客户端和轻客户端服务器生态系统。即使客户端正在同步协议的某些子集（例如，仅几个分片），用户也将经常需要获取另一个分片上的帐户、合约和事物一般状态的信息。用户当然可以用低效的方式同步整个附加分片，但通常情况下，轻松地请求分片上特定帐户中具有简洁证明的信息将成为可行方法。

想要了解eth2中的所有最新信息？请关注[下一次Light Client Task Force电话会议](https://github.com/ChainSafe/lodestar/issues/555)。

 &lt;br/&gt;

# eth1 -&gt; eth2 单向桥接



在eth2的早期，从现有的以太坊链（eth1）向新的信标链（eth2）上转移以太币的操作将是单向的。也就是说，在早期，转移至eth2进行staking的以太币将无法转回eth1链。之所以选择单向转移验证是为了最大程度地减少eth2对eth1造成的风险，并且由于不必在持续开发过程中对eth1进行分叉，eth2的开发周期会更快。目前针对创建双向桥有一些进展，但是我将在以后的文章中继续讨论桥接机制和其中的权衡取舍。今天，我想进一步阐释这种单向桥接的运作原理，以及如何在不更改eth1的情况下保证其安全性。

在当前的以太坊PoW链上，我们将部署[eth2验证者合约](https://github.com/ethereum/eth2.0-specs/blob/master/deposit_contract/contracts/validator_registration.v.py)。该合约中有一个deposit函数，以接收许多其他参数 (例如私钥、提款凭证、ETH抵押等)来初始化新验证者。这个合约中没有withdrawal函数。由于并未采用双向桥接机制，也不会对eth1进行分叉，因此抵押的ETH只会存在eth2的信标链上。

然后，验证者的职责就是对该合约的状态达成共识,以便继续处理新的抵押。具体实现方式在于eth2的区块提议者将最近的eth1数据嵌入一个名为eth1_data的信标区块字段中。在投票期间，如果有足够的区块提议者对最近的eth1_data达成共识，该数据就会被保存在信标链的状态中，然后继续处理新的抵押。

eth1_data在eth1的PoW链中嵌入较深，大约为1000个区块的“间隔距离”，这是该机制尤其需要注意的一个地方。这个“间隔距离”的存在会使得在处理新验证者抵押时出现高延迟性，但同时却为两个系统的耦合提供了高度安全性。eth1链需要重组1000个区块的高度才能阻断这种耦合，在这种情况下，往往还需要一些人工干预才能完成。

当前我们正在针对如何利用信标链对eth1进行最终确定（即最终确定性小工具，the finality gadget）进行研究和原型设计。这要求eth1的分叉选择最终要遵循信标链，通过PoS验证者来获取安全性，并使得以太币能更快地从eth1向eth2进行转移抵押。该最终性小工具也将开辟其他有趣的内容，例如双向桥接以及使得eth2的数据层公开给eth1。更多相关内容将呈现在之后的文章中，敬请关注。

&lt;br/&gt;

&lt;br/&gt;



声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊伊斯坦布尔硬分叉升级通告]]></title><description><![CDATA[以太坊网络将按计划在区块高度9,069,000时进行伊斯坦布尔硬分叉升级，时间预计为2019年12月7日，请在2019年12月1日之前升级节点。]]></description><link>https://www.ethereum.cn/ethereum-istanbul-upgrade-announcement</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-istanbul-upgrade-announcement</guid><pubDate>Wed, 20 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | Ethereum Blog


&lt;br/&gt;

## 伊斯坦布尔硬分叉升级要来了！

以太坊网络将按计划在**区块高度9,069,000**时进行升级，时间预计为**2019年12月7日星期六**。确切的日期可能会因区块时间和时区的不同而有所变化。

**由于到达目标区块高度的时间不定，请在2019年12月1日星期日之前升级节点。**

Ethernodes.org提供了伊斯坦布尔硬分叉(Istanbul)节点统计数据，https://ethernodes.org/istanbul上还设有倒数计时器，也可以在http://forkmon.ethdevops.io/上实时跟踪以太坊硬分叉升级。



&lt;br/&gt;

## 伊斯坦布尔硬分叉是什么？

伊斯坦布尔是本次以太坊网络升级的名称。先前的网络升级被赋予的名称有[君士坦丁堡](https://blog.ethereum.org/2019/02/22/ethereum-constantinople-st-petersburg-upgrade-announcement/)(Costantinople)，[伪龙](https://blog.ethereum.org/2016/11/18/hard-fork-no-4-spurious-dragon/)(Spurious Dragon)和[拜占庭](https://blog.ethereum.org/2017/10/12/byzantium-hf-announcement/)(Byzantium)。



&lt;br/&gt;

## 我是以太坊用户或ETH持有者，需要做些什么?

如果正使用以下服务：交易所（例如Coinbase、Kraken或Binance）、网络钱包服务（例如Metamask、MyCrypto或MyEtherWallet）、移动钱包服务（例如Coinbase Wallet、Status.im或Trust Wallet）、 硬件钱包（例如Ledger、Trezor或KeepKey），则无需执行任何操作，除非交易所或钱包服务告知用户需要采取额外行动。

&lt;br/&gt;

## 我是节点或矿工，需要做些什么？

请下载以太坊客户端的最新版本：

- [Geth客户端最新版本 (v1.9.7)](https://github.com/ethereum/go-ethereum/releases/tag/v1.9.7)
- [Parity客户端最新版本 (v2.5.10-stable)](https://github.com/paritytech/parity-ethereum/releases/tag/v2.5.10)
- [Besu客户端最新版本 (v1.3.4)](https://github.com/hyperledger/besu/releases/tag/1.3.4)
- [Nethermind客户端最新版本 (v1.1.8)](https://github.com/NethermindEth/nethermind/releases/tag/1.1.8)
- [以太坊JS客户端最新版本 (v4.0.2)](https://github.com/ethereumjs/ethereumjs-blockchain/releases/tag/v4.0.2)
- [Trinity客户端最新版本 (v0.1.0-alpha.30)](https://github.com/ethereum/trinity/releases/tag/v0.1.0-alpha.30)
- [Aleth客户端最新版本 (v1.7.1)](https://github.com/ethereum/aleth/releases/tag/v1.7.1)

注意：Harmony（Java语言以太坊客户端）现已被弃用，并且将不为伊斯坦布尔升级提供支持。如果使用Java版本客户端，Besu是与主网兼容的以太坊客户端。

&lt;br/&gt;

## 我是矿工或节点，不进行升级会怎样？

如果使用的以太坊客户端尚未更新到最新版本（以上列出版本），升级完成后，客户端将同步至硬分叉之前的区块链，因此会滞留在不兼容的链上，遵循旧规矩运行，并且无法发送ETH，也无法在升级后的以太坊网络上进行操作。

&lt;br/&gt;

## 以太坊网络升级是什么？

网络升级是指对以太坊底层协议进行更改，创建新规则以改进系统。区块链系统的去中心化性质使得网络升级更加困难，因为升级区块链网络需要与社区以及与各种以太坊客户端的开发者进行合作和沟通，以便顺利进行过渡。

&lt;br/&gt;

## 网络升级期间会发生什么？

当社区就升级内容达成一致后，协议的更改将写入所有以太坊客户端，例如Geth，Parity和Nethermind。协议更改将在特定区块高度处激活。尚未升级至新规则的所有节点都将滞留在旧链上，先前的旧规则仍将继续存在。

&lt;br/&gt;

## 伊斯坦布尔硬分叉将带来什么变化？

伊斯坦布尔的升级内容在EIPs中有定义。以太坊改进提案（EIP）阐释了以太坊的标准，包括核心协议规范、客户端APIs和合约标准。请查阅Ethereum Cat Herders的[这篇文章](https://medium.com/ethereum-cat-herders/istanbul-testnets-are-coming-53973bcea7df)，其中解释了伊斯坦布尔升级中采纳的EIP，并且介绍了正在升级到伊斯坦布尔的以太坊测试网。

&lt;br/&gt;

## 致谢

**非常感谢以太坊社区以及所有客户端及平台上的每一个以太坊开发者的共同努力和贡献，感谢大家集结起来为我们提供建议和帮助！**

 

免责声明：这是一个欣欣向荣的新兴高科技领域。如果选择采纳本文中的建议并继续参与其中，请确保已清楚了解其影响。用户应该了解所涉及的风险（包括但不限于意料之外的bug风险）。选择采纳以上建议后，您将独自承担风险和后果。这篇文章并不是任何一种形式的销售，也不提供任何保证（包括但不限于任何与本文所述的以太坊网络或以太坊客户端的有关保证）。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[以太坊基金会：Ethereum Studio正式上线]]></title><description><![CDATA[专注提升开发者体验，线上IDE Ethereum Studio上线！]]></description><link>https://www.ethereum.cn/ethereum-org-development-update-1</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-org-development-update-1</guid><pubDate>Wed, 13 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/11/12/ethereum.org-development-update-1/)


&lt;br/&gt;

# ⭐Ethereum Studio 正式上线！

我们很高兴地宣布**[Ethereum Studio 1.0 版本](http://studio.ethereum.org/)**上线啦！这是一个操作简单的基于web的IDE (集成开发环境)，可直接通过ethereum.org线上使用。

关于Ethereum.org，目前我们收到的呼声最高的建议之一就是要改善开发人员的体验。虽然网站向用户介绍了广泛的第三方资源，但缺乏吸引开发者立即上手尝试以太坊的路径。

Ethereum Studio的目标是使得开发者在几分钟之内就可以基于以太坊进行搭建，并尽可能为其减少障碍。 用户可以使用Studio来：

- 在浏览器中编写、测试智能合约
- 将智能合约连接到前端web应用
- 通过三个模板教程引导应用
- 一键分享项目

除了Studio本身之外，我们还在开发者部分添加了新的**[“Getting Started”入门页面](https://ethereum.org/build/)**。对于开发者来说，这个新着陆页对初学者更加友好，提供了Studio的介绍以及其他基于Web的学习经验的链接。

Studio的作用不是取代以太坊现有的广泛基于网络的学习体验，也不是与其竞争。相反，我们希望Studio能够成为吸引开发者的第一步，然后再为他们提供其他学习资源、工具或活动，以继续他们的以太坊旅程。

我们与**[Superblocks](https://superblocks.com/)**合作开发了Ethereum Studio。在此，我们为Superblocks付出的辛勤工作表示感谢！还要感谢每个使Ethereum Studio项目成为可能的贡献者：Andreas Wallendahl，Chris Ward，Robbie Bent，Martin Tellechea，以及提供反馈和建议的参与者。

Ethereum Studio是完全开源的，所有代码都可以在**[这里](https://github.com/SuperblocksHQ/ethereum-studio)**找到。我们将持续改进Studio，并已经计划针对1.1版本进行优化。如果您想要参与进来，请点击**[这里](https://github.com/SuperblocksHQ/ethereum-studio/wiki/How-to-Contribute)**了解！如果您想提供反馈，请填写此**[简短调查问卷](https://forms.gle/bjHQaCQYoRZcRyqm6)**。

 &lt;br/&gt;

# 🦄网站用户角色重组


![dev1.png](https://i.ibb.co/FzgVpcG/dev1-f22ce96fbe.png)


&lt;center&gt;图源 ethereum.org&lt;/center&gt;

在过去的几个月中，我们一直在努力更好地了解Ethereum.org的用户角色。这意味着需要分析关键词搜索量、分析网站流量、考虑同类型网站划分的用户角色并与我们的用户进行对话。最后我们决定对Ethereum.org的角色组织进行简化，包括三个核心角色：

- **个人：**ETH个人持有者、用户和社区成员；
- **开发者：**开发者或对以太坊技术感兴趣的任何用户；
- **企业：**想要了解如何使用以太坊以受益的公司、企业和其他组织。

这个简化后的组织形式几乎囊括了我们在研究中考虑到的所有用户。目前，这只是针对现有内容的重新组织，但为我们提供了未来扩展网站的基础。

在接下来的几周内，我们还将发布一份研究报告，作为我们进行此次重组的依据，希望对社区有参考作用，并提出改进建议。

##  &lt;br/&gt;

# 🛠参与网站建设得赏金



![dev2.png](https://i.ibb.co/1ZY9xjR/dev2-f26a04764a.png)



&lt;center&gt;图源 gitcoin.co&lt;/center&gt;

两周前，我们在Gitcoin上设立了**[10个赏金项目](https://gitcoin.co/hackathon/web3-world)**，希望可以在社区的帮助下加快网站开发速度。截至目前，已经取得了巨大的成功，我们收到了每个项目的提交，而且其中大多数更改已集成到网站中。感谢所有提交工作的参与者！

预计我们将来会针对Ethereum.org网站开放更多赏金项目，请关注@ethdotorg推特帐户以获取项目发布信息。

##  &lt;br/&gt;

# 🎯What is next?

以下是接下来几周我们计划进行的工作：

- 网站的设计改进和调整，为新页面引入一致的设计系统；
- 引入新资源，为新老用户提供更好的社区体验；
- 分享我们的用户角色研究报告；
- 对第三方资源进行翻译；
- 其他更多工作。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Eth2更新速览#3]]></title><description><![CDATA[更新内容包括强化分叉选择规则、赏金计划、签名库优化。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-3</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-3</guid><pubDate>Sat, 09 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/11/08/eth2-quick-update-no-3/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;

# 要点速览



- 强化分叉选择以应对审计
- 推出 [challenges.ethereum.org](https://challenges.ethereum.org/) 赏金网站
- 资助 Herumi 实现极速 BLS

 

&lt;br/&gt;

# 分叉选择防御机制



在本周，我们提升了阶段0分叉选择规则的防御性。我们对Eth2进行了大量的分析和打磨，以确保即使在不利条件下(例如大型攻击、严重网络中断或分区等)，系统仍然能够保持稳定。所开展的每个大型工程项目，都是为了能在Eth2发布之前找到尽量多的潜在问题，并针对这些问题对系统进行改造强化。这就是为什么我们与许多外部团队和研究人员共同进行Eth2的审计、经济分析以及形式化验证的工作，但同时，在Eth2正式发布前，我们必须保持警惕性和灵活性，以便能够应对研究过程中不可预知的攻击(例如2016年的上海DoS攻击)。



为此，以太坊共识机制研究者Ryuya Nakamura对Eth2共识算法(Casper FFG)和分叉选择规则(LMD GHOST)的优缺点进行了分析，以确定在某些情况下如何利用这两个协议才能达到更优的效果。他在[ethresearch.ch](https://ethresear.ch/)上撰写了许多优秀文章，详细讨论了某些攻击向量与解决方案推荐。



具体可参阅以下三篇文章：[《针对LMD GHOST的Decoy-flip-flop攻击》](https://ethresear.ch/t/decoy-flip-flop-attack-on-lmd-ghost/6001)、《[针对FFG的弹跳攻击分析》](https://ethresear.ch/t/analysis-of-bouncing-attack-on-ffg/6113)、[《如何预防对FFG的弹跳攻击》](https://ethresear.ch/t/prevention-of-bouncing-attack-on-ffg/6114)。



幸运的是，要预防和解决decoy-flip-flop和弹跳攻击都只需要对阶段0分叉选择规则进行简单修改。



Decoy-flip-flop攻击的解决方案是在向分叉选择视图添加验证时，只需添加当前和之前一个epoch的验证者证明。在这里可以查看[规范更改的PR](https://github.com/ethereum/eth2.0-specs/pull/1466)。



而要解决弹跳攻击，只需要通过在一个epoch的前k个时隙中更新分叉选择的最新合理检查点。经过k个时隙之后，你可以在分叉选择中延迟包含一个新的合理检查点，直到下一个epoch边界。可以在[此处](https://github.com/ethereum/eth2.0-specs/pull/1465)查看该修改。



截至目前，阶段0规范的许多其他组件正在进行审计。虽然我们希望不会出现重大变化，但仍然希望在未来几个月里，审计完成之后能有一些修改建议出现在PR中。



 

&lt;br/&gt;

# 以太坊赏金计划



我们最新上线了[challenges.ethereum.org](https://challenges.ethereum.org/)。目前该网站是以太坊基金会/以太坊相关研发赏金的唯一来源。无论是找到以太坊基础设施的现存漏洞，还是发现新哈希函数的冲突，都属于赏金范围范围。每个人都有机会夺得赏金 🙂



在未来的几个月里，我们将继续完善以太坊基金会的赏金计划，请持续关注，说不定下一个赏金获得者就是你！



 

&lt;br/&gt;

#  Herumi BLS 资助



我们已经向Shigeo Mitsunari提供了资助，他是极速[Herumi配对库](https://github.com/herumi/mcl)(pairing library)和[BLS签名库](https://github.com/herumi/bls)的维护者。本次资助是为了更新库的规范，使其符合新的BLS标准(例如新的[hash-to-G2](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-05)、恒定时间签名等)，并协助完成更多具有实际意义的Eth2落地项目(如Rust集成、模糊测试等)。



本次资助除了针对功能组件的更新外，还包括性能组件的更新。Herumi库的速度已经比次优BLS签名库快了2-3倍，但由于签名验证是Eth2的主要瓶颈之一，所以有关的任何进展都意义非凡，因此Eth2能够在更高负载和更严峻的条件下运行。Shigeo将投入更多的时间和精力进一步优化签名库，以确保其运行速度尽可能地快。🚀🚀🚀

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2019/11/8）]]></title><description><![CDATA[截至2019/11/8]]></description><link>https://www.ethereum.cn/wnie2-2019-11-8</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2019-11-8</guid><pubDate>Sat, 09 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://blog.ethereum.org/2019/10/31/eth2-quick-update-no-2/)



##  

 &lt;br/&gt;

# 首看



- 以太坊基金会最近发布的三篇eth2速更[[1\]](https://blog.ethereum.org/2019/10/31/eth2-quick-update-no-2/)[[2\]](https://blog.ethereum.org/2019/11/08/eth2-quick-update-no-3/)；
- Danny Ryan在DevCon中的20分钟“[Eth2概览](https://slideslive.com/38919931/eth-20-tldr)”演讲值得一看。

 

 &lt;br/&gt;

# 阶段0：信标链实现



信标链规范自6月以来首次完全解冻。不仅发布了[0.9.0版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.9.0)，还发布了最新的[0.9.1版本](https://github.com/ethereum/eth2.0-specs/releases/tag/v0.9.1)。提醒一下，在实现基本的客户端互操作性之后，解冻规范始终是计划的一部分。



**其中重要更新如下：**



- 阶段1仍在进行中时，将阶段0和阶段1完全解耦。这是一种简化方式：现在已移除了交联、传输和其他一些工具。
- 近几个月来，根据Ryuya Nakamura的研究分析，对分叉选择规则做出了一些改进。
- 添加了一个简单的证明聚合策略。
- 对抵押合约的微小改动。目前处于稳定状态并且可以投入生产。



Protolambda更新了有关[环绕投票（Surround Vote）检测](https://github.com/protolambda/eth2-surround/blob/master/README.md)的想法。在之前的构想中，验证者可能犯下两种错误使其被罚没押金：在同一高度提议两个不同的区块，然后提交一次投票，将自己的另一次投票“环绕”起来（或被“环绕”）。第一个错误很容易被发现，而后者要困难许多，一部分是因为证明数量远超区块数量，另一部分原因则是其匹配条件更不易察觉。但是，只要网络中至少有一个节点检查这些条件，我们就可以解决这个问题了。Proto会通过实践来实现这一想法。



还要注意一个github上的[公告讨论](https://github.com/ethereum/eth2.0-specs/pull/1467)了将创世验证者的以太币抵押数量从200万减少至50万。我们在[开发者会议](https://docs.google.com/document/d/1ixUUwstiO16obctBJ16ApS2IfNrza1UrZqN2mch-QPg/edit?usp=sharing)的最后讨论了其基本原理。



在命名方面，根据[Hsiao-Wei’s发起的投票](https://twitter.com/icebearhww/status/1186924584429219841)，以太坊2.0的官方绰号似乎已经定为“Eth2”，并且有一个[公告](https://github.com/ethereum/eth2.0-specs/pull/1452)针对此在整个规范中进行更新。

 

 &lt;br/&gt;

# 阶段1：分片实现



将继续对[新分片设计](https://notes.ethereum.org/@vbuterin/HkiULaluS)的[拉取请求](https://github.com/ethereum/eth2.0-specs/pull/1427)进行审核和修订。在新提案下，针对信标链上的负载情况，在[Gitter聊天室](https://gitter.im/ethereum/sharding?at=5db6f773fb4dab784a1ea8c1)中有一些估算（将是原始提案的两倍。）

 



### 轻客户端



由Chainsafe主持的[首届轻客户端工作组会议](https://www.youtube.com/watch?v=aY4Qsk22IAE)已经结束，这是Zsolt Felfoldi针对 Light Client Server Incentivization 的问答部分。

 

 &lt;br/&gt;

# 开发者电话会议



2019年11月7日进行了第27次开发者电话会议。



  🔹[会议议程](https://github.com/ethereum/eth2.0-pm/issues/95)



  🔹[会议视频](https://www.youtube.com/watch?v=4_EGNG-Yek4&amp;feature=youtu.be&amp;t=262)



  🔹[要点速记](https://docs.google.com/document/d/1ixUUwstiO16obctBJ16ApS2IfNrza1UrZqN2mch-QPg/edit)



**会议中的部分重点（细节请查阅[笔记](https://docs.google.com/document/d/1ixUUwstiO16obctBJ16ApS2IfNrza1UrZqN2mch-QPg/edit)）**

- 新的[将哈希映射到曲线上的算法](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-05)（hash to curve algorithm）已更新，目前被认定为稳定状态。将在几星期后的[新加坡IETF会议](https://datatracker.ietf.org/meeting/106/materials/agenda-106-cfrg-01)上对此进行讨论。



- 以太坊基金会发布了一系列针对区块链（尤其是以太坊）重要难题的[赏金](https://challenges.ethereum.org/)。
- 联合测试网即将推出，但我们尚未准备就绪。

 

 &lt;br/&gt;

# 相关研究



感谢Nicolas Liochon这篇关于[椭圆曲线点新压缩技术](https://ethresear.ch/t/a-new-point-compression-decompression-method-for-any-elliptic-curve-of-j-invariant-0/6427)的文章上。



⚠以下涉及数学运算]



以Eth2中的签名为例。它对应的椭圆曲线点在内部用两个复数坐标表示，每个复数坐标具有381 bits的实部和虚部：总共4 * 381/8 = 192字节。要存储并且在网络中传输这些签名，我们通过丢弃y坐标并仅使用x坐标以及一些标志（仅占用96个字节）来“压缩”曲线点。当我们需要将签名解压缩回椭圆曲线点时，可以将x坐标输入到曲线方程y ^ 2 = x ^ 3 + 4中以重建相应的y坐标。这里需要两个计算复杂度很高的幂：立方和平方根。



该论文[22]中描述的是一种压缩椭圆曲线点的不同方法，需要相同的存储空间（96个字节）。但是只需要使用一个幂来解压缩，速度应该快一倍。遗憾的是，[BLS标准化提案](https://eprint.iacr.org/2019/1048.pdf)已经包含了[点压缩](https://tools.ietf.org/html/draft-irtf-cfrg-bls-signature-00)/[序列化](https://github.com/zkcrypto/pairing/blob/master/src/bls12_381/README.md#serialization)的现有方法，要加入这项新技术可能已经为时已晚。但是无论如何，我认为这个有趣的话题值得在此进行讨论。



**在**[ethresear.ch](https://ethresear.ch/)**上：**



- Vitalik描述了一种实现[跨分片交易的机制](https://ethresear.ch/t/implementing-cross-shard-transactions/6382?u=benjaminion)，特别是ETH的转移。他提出将限速传输作为一种反DoS机制，并且在传输时采用动态的gas成本机制。
- 通过添加持有价值的EE（执行环境），以降低EE的风险。[该提案](https://ethresear.ch/t/de-risking-execution-environments-by-adding-value-holding-ees/6413?u=benjaminion)讨论到在专用执行环境中加强Ether以及ERC20 / 721通证的常规存储安全性，这将能够降低由于EE执行不力而产生的资金风险。
- 我未曾想到的是，如果/当Eth1成为Eth2的一部分时，[仍然需要在Eth1 PoW链上进行挖矿](https://ethresear.ch/t/the-eth1-eth2-transition/6265/20?u=benjaminion)，以避免任何（恶意）重组。以太坊基金会可能只会为这些额外的区块（在新的Eth1-on-Eth2环境中）提供区块奖励，以避免混乱的协议更改。

 

 &lt;br/&gt;

# 其他新闻



- 这条消息可能不太及时，但是如果读者将在本周末参加[ETHWaterloo](https://ethwaterloo.com/)，这里有一些[有料的Eth2奖品](https://blog.ethereum.org/2019/11/04/Eth2-at-ETHWaterloo/)值得争取。
- DevCon演讲：Carl和Dankrad关于[去信任验证者池](https://drive.google.com/file/d/1CIa4N2uG1oz08rfFKo6VQrinlt7eKNQ6/view)（Trustless Validator Pools）的幻灯片，包含如何使Eth2协议变得MPC（多方计算）友好的许多见解。
- DevCon演讲：Mamy关于[如何在树莓派上运行Eth2](https://slideslive.com/38920013/eth-20-on-a-pi)的演讲。
- 客户端更新：[Lighthouse](https://lighthouse.sigmaprime.io/update-17.html)，[Lodestar](https://medium.com/chainsafe-systems/lodestar-post-devcon-update-78886344c1e1)和[Prysm](https://medium.com/prysmatic-labs/ethereum-2-0-development-update-38-prysmatic-labs-a3293ca9280d)。这些更新中有很多进展，我在此不再赘述。
- Prysm团队在/r/EthFinance上做了一次[AMA](https://old.reddit.com/r/ethfinance/comments/drari9/ethfinance_ama_series_with_prysmatic_labs/)。
- 关于[如何在Eth2上吸引企业的兴趣](https://www.forbes.com/sites/biserdimitrov/2019/10/28/why-enterprises-are-paying-attention-as-ethereum-20-unfolds/#10025e73676e)，这是一篇不错的文章。私认为，主网是企业应用的终极正确目标，对此我在[推特](https://twitter.com/benjaminion_xyz/status/1188860547825049600)上发布了看法。
- 关于如何处理在PoS链上线之前存入的押金，是否应该对其进行激励，以及与验证者数量相关的奖励发行曲线，我们在[Sharding Gitter](https://gitter.im/ethereum/sharding?at=5dbf22dae1c5e9150828d166)中进行了持久的讨论。
- 如果读者星期一在斯德哥尔摩的话，可以参加[以太坊2.0 Meetup](https://www.meetup.com/decentralized-camp/events/265745327/)，届时将提供Staking指南。







 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2更新速览#2]]></title><description><![CDATA[阶段0规范v0.9.0版（Tonkatsu）发布、重新设计阶段1、eth1.0->eth2.0客户端开发。]]></description><link>https://www.ethereum.cn/eth2-quick-update-no-2</link><guid isPermaLink="false">https://www.ethereum.cn/eth2-quick-update-no-2</guid><pubDate>Wed, 06 Nov 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ethereum Blog](https://blog.ethereum.org/2019/10/31/eth2-quick-update-no-2/)





&lt;br/&gt;

![以太坊周刊更新速览开头.png](https://i.ibb.co/SdPYLS4/8becff9df1-png-8703fb498c.png)

&lt;br/&gt;



# 更新速览

- 开发者发布了[**0.9.0版本的 Tonkatsu 规范**](https://github.com/ethereum/eth2.0-spec-tests/releases/tag/v0.9.0)，确保以太坊 Phase 0 能够继续畅通进行；
- 开发者仍在继续斟酌 Phase 1 的提案细节内容；
- 客户端开发侧重于加强 **eth1 -&gt; eth2** 基础设施的完善优化。

 &lt;br/&gt;

# Tonkatsu规范已发布

正如在[最近的以太坊2.0电话会议](https://www.youtube.com/watch?v=DXGeC7cg71Y)上所做出的承诺，我们近期将发布[0.9.0版本的 Tonkatsu 规范](https://github.com/ethereum/eth2.0-spec-tests/releases/tag/v0.9.0)。这个版本在很大程度上对 Phase 0 进行了简化，主要目标是删除 Phase 0 中与 Phase 1 相关联的部分，以确保 Phase 0 的开发能够继续畅通无阻，而免受[目前进行中的分片提案修改](https://github.com/ethereum/eth2.0-specs/pull/1427)的影响。

获取 Tonkatsu 更多相关信息：[Release notes](https://github.com/ethereum/eth2.0-spec-tests/releases/tag/v0.9.0)

&lt;br/&gt; 

# 重新设计Phase 1

正如之前进展更新所述，我们很大程度上确定会为 Phase 1 制定一个更简洁的新方向（译者注：Vitalik 分片简化方案）。**[新的分片提案](https://notes.ethereum.org/KbEyHiaSRQW_KS7dDK0OFw)使得每个分片在每个 slot 周期都能进行交联(crosslink)。**

译者注：在此之前原定为1024个分片在每个epoch周期进行交联，新提案提议在每个slot周期进行交联，要缩短周期就需要减少分片数量至64，并将分片区块大小增加八倍。

这大大简化了跨分片通信，并将在 Phase 2 为开发者和用户带来更优的体验。

![img](https://i.ibb.co/pr8D6N7/2.png)

&lt;center&gt;前跨分片通信近似图&lt;/center&gt;



![img](https://i.ibb.co/cc6FRhY/1.png)

&lt;center&gt;新提案设计&lt;/center&gt;

为了支持新提议，必须要将分片总数从最初设定的1024减少到最新估算的64，然后随时间推移（大约10年）不断增加分片数量。

**以下是需要减少分片总数的主要原因：**

- 每个分片以每个 slot 为周期，在网络和信标链上增加证明(attestation)负载，而不是每个 epoch 周期；（译者注：由此减轻信标链的证明负荷）
- 每个委员会的验证者必须达到[最低安全数量](https://medium.com/@chihchengliang/minimum-committee-size-explained-67047111fa20)。如果分片数量过多，而每个 epoch 周期就会有过多的委员会，那么就很难有足够的验证者（成为验证者需要质押32个ETH）来安全地分配给每个委员会。

[注：以下段落是本博文首次发布后才添加的，以回应 reddit 上的一些相关讨论]

为了达到与此前分片设计方案相似的可扩展性，新提案的目标分片区块大小将增加八倍，从 16kB 增长到 128 kB。这为系统提供了大于1MB/s的数据可用性，而这将有助于和 ZK-rollup 和 [OVM](https://medium.com/cryptoeconomics-lab/a-gentle-guide-to-the-ovm-934035646942) 等优秀的 L2 方案更好地进行协作。有关扩大后的分片区块安全性，则是通过当前以太坊网络中进行的[实验研究所证明](https://ethereum-magicians.org/t/eip-2028-transaction-data-gas-cost-reduction/3280/24)。

在过去的几周里，以太坊基金会研究团队的主要精力都集中在该新提案的细节审核和优化上。

了解更多相关信息：[work-in-progress PR](https://github.com/ethereum/eth2.0-specs/pull/1427) &amp; [Phase 1 issues](https://github.com/ethereum/eth2.0-specs/issues?q=is%3Aopen+is%3Aissue+label%3A&quot;phase+1&quot;)

 &lt;br/&gt;

# 客户端开发工作悄然有序地进行

以太坊2.0的客户端开发工作也并没有落后，在[最近的以太坊2.0电话会议](https://www.youtube.com/watch?v=DXGeC7cg71Y)中，我们讨论到如何处理来自 eth1 的押金，例如优化状态转换、BLS 签名方案的实现、跨客户端模糊化、网络监控工具等等。更大的单客户端测试网也正处于开发之中，同时我们还在继续进行跨客户端实验。

目前，0.9.0版本规范已经发布，eth2 的客户端也在更新其状态转换逻辑，以通过最新的测试向量，并引入[简单的证明(attestation)聚合方案](https://github.com/ethereum/eth2.0-specs/blob/master/specs/validator/0_beacon-chain-validator.md#attestation-aggregation)。

 &lt;br/&gt;

**译者注：**近期以太坊更新资讯频繁发布，故译者在此将**重大更新的中文版**稍作整合，以方便查阅。

- **v0.9.0 Tonkatsu 规范：https://eth2.ethereum.cn/eth2-specs/v0.9.0**
- **[Vitalik 简化分片提案](https://news.ethereum.cn/archives/845)**
- **10月 eth2 进展更新 (Ben Edgington): https://www.unitimes.pro/p/ea418bbfd1c84dae816a1d1475790c1d**
- **最新 eth2 开发手册 (Hsiao-Wei)：https://dev.ethereum.cn/eth2.0/eth2-devs-handbook-faqs**





&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[手把手教你注册ENS域名]]></title><description><![CDATA[ENS 即以太坊域名服务，一个基于以太坊的分布式、开放和可扩展的域名系统。]]></description><link>https://www.ethereum.cn/ens-registration-guide</link><guid isPermaLink="false">https://www.ethereum.cn/ens-registration-guide</guid><pubDate>Wed, 30 Oct 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [ENS](https://medium.com/the-ethereum-name-service/step-by-step-guide-to-registering-a-eth-name-on-the-new-ens-registrar-c07d3ab9d6a6)


本教程转载自[EthFans](https://ethfans.org/posts/step-by-step-guide-to-registering-a-eth-name-on-the-new-ens-registrar)



&lt;br/&gt;


![ENS1.jpg](https://i.ibb.co/qxy1VqN/ENS-1-025b3cf103.jpg)
&lt;br/&gt;



永久的[以太坊域名服务（ENS）](https://ens.domains/)注册器已经启动！

旧日的拍卖模式已经结束，即时注册现已启动。[以前注册的域名需要一些操作来完成迁移](https://medium.com/the-ethereum-name-service/step-by-step-guide-to-migrating-your-eth-name-to-the-new-ens-registrar-5314431e22f2)。

虽然现在有[多个第三方网站](https://medium.com/the-ethereum-name-service/where-you-can-use-the-new-ens-registrar-d209833c6eda)提供 ENS 注册功能，这份指南还是针对我们官方的 [ENS 管理器 app](https://manager.ens.domains/) 的。

&lt;br/&gt;

# 第一步：打开支持以太坊的浏览器

在桌面端，你可以打开装有 [MetaMask](https://metamask.io/)（小狐狸）插件的 Chrome 浏览器，或者是 [Brave](https://brave.com/) 浏览器（内置了 MetaMask）。

在手机端，你可以用 [Coinbase Wallet](https://wallet.coinbase.com/)、[Status](https://status.im/) 以及其它手机端以太坊浏览器。

这份指南默认你是在用桌面浏览器的 MetaMask，但其它支持以太坊的浏览器应该也是类似的。

在使用 MetaMask 时，你得先用自己想用来注册 ENS 域名的地址登录 MetaMask（当然，你也可以先用别的地址注册域名然后转移所有权），而且地址里面要有一些 ETH，用来支付交易的手续费以及域名的年租金。





![ENS2.png](https://i.ibb.co/vwS8yZS/ENS-2-6d3963f014.png)



##  &lt;br/&gt;

# 第二步：移步 ENS Manager

用浏览器访问 [manager.ens.domains](https://manager.ens.domains/) 网站。

提示：把这个网页加入收藏夹吧，因为日后这个网站是你管理以太坊域名最方便的工具。








![ENS3.png](https://i.ibb.co/vwS8yZS/ENS-2-6d3963f014.png)


– [manager.ens.domains](https://manager.ens.domains/) –

##  &lt;br/&gt;

# 第三步：搜索你想要的 .eth 域名

在 “Search names（搜索域名）” 框里面填入你想要注册的域名（要包括 “.eth” 结尾），然后点击 “搜索” 按钮。

**如果该域名已经被某人注册了**，你会看到这样一个网页，包含了该域名的注册记录信息：




![ENS4.jpg](https://i.ibb.co/g4NtDfh/ENS-4-730c38ea43.jpg)





**如果该域名还没有人注册**，你会看到这样一个网页，询问你想要持有该域名多久，被给您报价（年租金一般为 5 美元）：






![ENS5.jpg](https://i.ibb.co/M69JHjW/ENS-5-07be6c3752.jpg)




##  &lt;br/&gt;

# 第四步：选择时长

使用 “-” 和 “+” 按钮来选择你想一次性支付的租金数量（也即租赁时长）。注册域名时至少需要租赁 1 年。你也可以选择多付租金、一次性注册更长时间。而且，持有域名时，你可以随时选择续租时长。

注意：你的钱包里得有足够多的 ETH 来支付整个支付流程所需付出的资金。

##  &lt;br/&gt;

# 第五步：开始注册

点击右下角的蓝色的 “Request To Register（申请注册）” 按钮。MetaMask 会弹出一个窗口让你确认这笔交易。点击 “Confirm（确认）” 按钮就可以确认交易啦。

##  &lt;br/&gt;

# 第六步：等待

*不要在这时候关闭浏览器哦！*

首先，你得确认你的交易被打包了，这个过程估计在 1 分钟以内完成。

其次，你要等几分钟，保证没有别人也在同一时间想注册这个域名。网页中间的绿色条会缓慢变化，显示你的注册流程进度。






![ENS6.jpg](https://i.ibb.co/sytj1B8/ENS-6-c8ef14c478.jpg)






##  &lt;br/&gt;

# 第七步：完成注册

等待期结束后，会有橙色的文字显示：“点击 register（注册）完成注册流程的第三步”。然后你需要点击旁边的蓝色的 “注册” 按钮。

然后会有另一个 MetaMask 弹窗弹出来，要求你确认另一笔交易，支付租金同时获得你的域名。跟上面一样，点击 “确认” 按钮。

回到管理页面，你会看到 “注册” 按钮变成了 “TXPENDING（交易正在打包）”。交易被打包之后，你的 ENS 域名就注册完成了！

&lt;br/&gt;

# 然后就完成啦！

以上就是全部的注册流程了。

然后你需要建立你的 ENS 记录，让你的域名会在软件中解析为你选定的地址。日后你的朋友给你转账时就不用费劲地输入地址了，只需要输入你的 ENS 域名就可以了（只要他们用的是支持 ENS 域名的钱包）。

建立 ENS 记录的手把手教程很快就会放出来！

##  &lt;br/&gt;

# 附：迁移流程

迁移流程与上述注册流程一般无二，只是在搜索你想要的 ENS 域名的时候，会显示如下页面：





![ENS7.jpg](https://i.ibb.co/SdvGz1V/ENS-7-3e1bcb9fa8.jpg)









从中你可以看到旧注册器上的注册信息，还有 “Migrate（迁移）” 按钮。点击迁移按钮之后的流程就是一样的了。

&lt;br/&gt;

**彩蛋**

这其实已经不是个彩蛋了明明早都曝光了好吧。那就是，旧域名迁移到新注册器可以免一年租金！</content:encoded></item><item><title><![CDATA[ENS域名：到底有什么用？]]></title><description><![CDATA[本文介绍了以太坊域名服务 ENS 的已实现用例，用户现在就可以上手！]]></description><link>https://www.ethereum.cn/everything-you-can-do-with-your-ens-name-right-now</link><guid isPermaLink="false">https://www.ethereum.cn/everything-you-can-do-with-your-ens-name-right-now</guid><pubDate>Wed, 30 Oct 2019 00:00:00 GMT</pubDate><content:encoded>



&lt;br/&gt;

![ENS.png](https://i.ibb.co/kBMXQbv/ENS-edfc9d59e2.png)


&lt;br/&gt;



点开这篇文章的你是否刚刚赢得了[ .eth 短域名的拍卖](https://opensea.io/ens)？是否自2017年ENS发布以来已经持有了一个域名？是否最近在我们的官方 Manager 中使用了最新的[即时注册功能](https://news.ethereum.cn/archives/855)?再或者，是否从[钱包](https://medium.com/the-ethereum-name-service/ens-integration-spotlight-argent-bd8f9cf819f5)、[MEW](https://medium.com/myetherwallet/never-mistype-an-address-again-free-ens-domains-from-mew-8ae0159b64b8) 或[ ENS Now](https://now.ens.domains/) 中获取了免费的子域？

那么大家可能都被同一个问题萦绕着：实际上我可以用这个域名做些什么呢？

创建和售卖域名不是一件难事（因此更应该[采取负责任的态度](https://medium.com/the-ethereum-name-service/why-ens-doesnt-create-more-tlds-responsible-citizenship-in-the-global-namespace-7e66658fe2b1)），但实际创造有用的功能并获得生态系统的采用则是另一回事。在去中心化域名服务项目方面，ENS 是当之无愧的领先者。

本文旨在为用户细数ENS的用例，以下列举并非我们最终想达成的目标，而是我们现在就能使用的功能。

 

&lt;br/&gt;

# 一个域名搞定所有币种



ENS 的原始用例在于为以太坊地址命名，两年多以来，ENS 已经陆续集成到许[多个钱包和 dapp](https://ens.domains/) 中。

目前区块链领域中存在许多币种，因此 ENS 已经在主网中推出[多币种支持](https://medium.com/the-ethereum-name-service/ens-launches-multi-coin-support-15-wallets-to-integrate-92518ab20599)，这大大扩展了地址支持范围，使得用户能够在其 ENS 记录中存储任何加密货币地址。简单来说，这意味着什么呢？**用户可以仅仅使用一个 ENS 名称来接收任何加密货币。**

[D’CENT 钱包](https://dcentwallet.com/)是第一个集成该功能的钱包，现在有[更多的钱包](https://medium.com/the-ethereum-name-service/ens-launches-multi-coin-support-15-wallets-to-integrate-92518ab20599)正在进行尝试。

用户可以使用我们的 [Manager](https://app.ens.domains/) 将加密货币地址导入 ENS 域名的记录中。

这个功能在极大程度上巩固了 ENS 作为采用最广泛的去中心化加密货币钱包域名服务的地位。如果用户想要为自己的加密货币取得基于区块链的域名，并且享有生态系统的广泛支持，我们建议[注册 ENS 域名](https://news.ethereum.cn/archives/855)。

 &lt;br/&gt;

# 使用去中心化网站



ENS 与 IPFS（一种去中心化文件存储协议）的 Protocol Labs 团队建立了合作关系。 ENS 提供去中心化域名服务，而 IPFS 是去中心化的文件存储系统，它们共同构成了去中心化的万维网。

[Opera](https://medium.com/the-ethereum-name-service/how-opera-is-using-ens-to-decentralize-the-web-ens-integration-spotlight-a545f7825724) 为这对协议提供了本地支持（据 Brave 称他们正在针对此协议进行开发）。如果用户使用的是其他主流浏览器，则 [MetaMask](https://metamask.io/) 浏览器插件也能够提供支持。例如，如果用户将 Chrome 与 MetaMask 结合使用，只需在URL栏中输入“ almonit.eth /”，然后静观魔法发生。

对于不支持以太坊的浏览器用户，我们已经建立了一个系统，由此可以通过在域名末尾[附加“ .LINK”](https://medium.com/the-ethereum-name-service/ethdns-9d56298fa38a)（例如almonit.eth.link）来访问这些网站。

想要建立自己的去中心化网站？[指南在此](https://medium.com/the-ethereum-name-service/how-to-host-your-dapp-with-ipfs-ens-and-access-it-via-ethdns-c96046059d87)。

 &lt;br/&gt;

# Tor .onion 网站



鉴于对安全性的高度要求，如何获得人类可读的.onion地址在 Tor 社区中一直是一个[长期存在的问题](https://blog.torproject.org/cooking-onions-names-your-onions)。而 ENS 是解决 [Zooko 三角关系](https://en.wikipedia.org/wiki/Zooko&apos;s_triangle)的去中心化域名服务，**因此 ENS 是目前做到[兼顾人性化、安全性和去中心化的有用工具](https://medium.com/the-ethereum-name-service/ens-now-supports-tor-onion-address-resolution-9bb3bdff6217)。**




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/DDcFcBg/ENS-4-baa4abcd54.png&quot; /&gt;&lt;/center&gt;



&lt;center&gt;Zooko 三角关系：人性化、安全性、去中心化&lt;/center&gt;

在内容字段中将 Tor .onion 地址添加到 ENS 记录中（[操作详情](https://medium.com/the-ethereum-name-service/ens-now-supports-tor-onion-address-resolution-9bb3bdff6217)），如果是启用了 MetaMask 的 Tor 浏览器，只需在URL栏中输入.ETH域名，即可解析到.onion网站。

为了展示该功能，我们设置了十个[指向常用的.onion网站的ENS域名](https://medium.com/the-ethereum-name-service/list-of-ens-names-that-resolve-to-tor-onion-websites-99140a4c674f)。而且如果在Tor浏览器中使用.onion网站，那么对用户来说安全性可能是当务之急，我们在这里就安全性取舍进行了许多[讨论](https://medium.com/the-ethereum-name-service/how-secure-is-using-ens-for-tor-onion-addresses-85b22f44b6e0)。

 &lt;br/&gt;

# 文本记录



我们的[文本记录功能](https://medium.com/the-ethereum-name-service/new-text-records-now-available-for-ens-names-in-manager-a0ebb9cda73a)使用户可以自愿将各种个人信息添加到 ENS 记录中。

到目前为止，我们支持[八种文本记录类型](https://eips.ethereum.org/EIPS/eip-634)。分别是：电子邮件地址、网址、头像、描述、通知、关键字、 Twitter 和 Github 用户名。

我们的计划是最终支持任意文本记录类型，但与此同时，我们希望了解人们如何利用这八种文本记录类型。

 &lt;br/&gt;

# 结语



以上只是我们目前实现的功能。我们一直在努力开发新功能并不断增加用例，因此在未来请持续关注 ENS 的更多用途。

ENS 是一个由非营利性组织管理的开源项目。我们将 ENS 视作一种公共产品，是互联网基础设施的基本组成部分，不仅能够为区块链社区服务，而且还可能为整个互联网做出贡献。因此，我们希望最大限度地获得整个社区的反馈和参与。

如果您有新功能请求或是反馈，请加入我们的[论坛](https://discuss.ens.domains/)或 [Gitter](https://gitter.im/ethereum/go-ethereum/name-registry)，在 [Github](https://github.com/ensdomains) 上提交拉取请求亦可。

**心动不如行动，不妨现在就动动手指[注册一个ENS域名](https://news.ethereum.cn/archives/855)开始使用吧！**

 

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[VITALIK：ETH2分片链简化提案]]></title><description><![CDATA[最新分片简化提案：分片数量将从1024降为64。]]></description><link>https://www.ethereum.cn/new-sharding-proposal-vbuterin</link><guid isPermaLink="false">https://www.ethereum.cn/new-sharding-proposal-vbuterin</guid><pubDate>Fri, 25 Oct 2019 00:00:00 GMT</pubDate><content:encoded>来源：[notes.ethereum.org](https://notes.ethereum.org/@vbuterin/HkiULaluS?from=groupmessage&amp;isappinstalled=0*)



&lt;br/&gt;

# 要点提炼

- 持续性分片链（persistent shard chain）的概念将不复存在，相反，每个分片区块都是直接的交联（crosslink）。提议人发出提案，交联（crosslink）委员会负责批准，一锤定音。
- 分片数量从之前的1024减少到64，分片区块大小从（目标值16，上限值64）kB增加到（目标值128，上限值512）kB。分片总容量为3-2.7 MB/s，具体值取决于时隙。如果需要的话，分片数量和区块大小可随时间的推移而增加，比方说10年后最终达到1024个分片，以及1 MB区块。
- 在L1和L2层实施了诸多简化方案：（i）所需的分片链逻辑更少，（ii）由于“本地”跨分片通信发生在1个时隙内，无需通过Layer2进行跨分片加速，(iii)无需通过去中心化交易所来促进跨分片交易费的支付，(iv) 执行环境能够进一步简化，(v)无需再混合序列化和哈希；
- 主要劣势：(i) 信标链成本更高，（ii）分片区块产生时间更长，（iii）对“突增性”带宽需求更高，但对“平均”带宽的需求更低。

 &lt;br/&gt;

# 介绍理念

以太坊2.0目前的架构过于复杂，尤其是在费用市场方面。这个问题由layer 2解决方案引起（针对2.0基础层的重大故障所设计）：虽然分片内的区块时间是非常短的（3-6s），然而分片间的基础层通信时间特别长，需要1-16个epoch（如果超过1/3的验证者离线，则会花费时间更久）。这就亟待“乐观”的解决方案：一个分片内的子系统通过某种中等安全的机制（如轻客户端），“假装”提前知道其它分片的状态根，并使用这些不确定的状态根来处理交易，以此来计算自己的状态。一段时间后，所有的分片都将经历“后卫”进程，检查哪些计算使用了其他分片状态的“正确”信息，并抛弃未使用“正确”信息的所有计算。

而这个过程是存在问题的，虽然它能够有效地模拟许多情况下的超高速通信时间，但是“乐观”ETH和“真实”ETH之间的差距衍生出了其他复杂情况。具体而言，我们不能假设区块提议者“知道”乐观的ETH，因此，如果分片A上的用户向分片B上的用户发送ETH，则分片B上的用户在拥有协议层ETH（唯一可以用作发送交易费用的ETH）之前，会出现时间延迟。如果想避免延迟，要么需要去中心化交易所（存在复杂性和低效率问题），要么需要中继市场（这将产生垄断中继人对用户进行审查的担忧）。

此外，目前的交联（crosslink）机制大大增加了复杂性，实际上它需要一整套区块链逻辑，包括奖惩计算、单独存储分片内奖励的状态以及分叉选择规则等，这些都需要被纳入分片链中作为阶段1的组成部分。本文档提出了一个大胆的替代方案，用以解决所有这些问题，使以太坊2.0能够更快地投入使用，同时降低风险，其中还有一些折中方案。

 &lt;br/&gt;

# 方案细节

我们把SHARD_COUNT（分片计数）从1024减少到64，并将每个时隙的分片数上限从16增加到64。这意味着“最优”工作流现在处于每个信标链区块之间，每个分片会产生一个交联（为了清楚起见，我们不再使用“交联”（crosslink）一词，因为并没有“连接”到分片链，直接使用“分片区块”更合适）。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wBkBMqh/1.png&quot;/&gt;&lt;/center&gt;








请注意一个关键细节：现在任何分片的slot-N+1区块都可以通过一条路径知道所有分片的所有slot-N 区块。因此，我们现在有了一流的单时隙跨分片通信（通过Merkle收据）。


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/hg2hHh0/2.png&quot;/&gt;&lt;/center&gt;










&lt;center&gt;近似现状&lt;/center&gt;


&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/KL4bKjn/3.png&quot;/&gt;&lt;/center&gt;










&lt;center&gt;新提案&lt;/center&gt;

在这个提议中我们改变了证明所连接对象的结构：不再包含“交联”（crosslink），其中包括以某种复杂序列化形式表示的许多分片区块的“数据根”，而只包含单个区块的数据根，该数据根表示了区块内的内容（内容完全由“提议者”决定）。分片区块还将包括来自提议者的签名。为了促进p2p网络的稳定性，计算提议者的方式依然使用之前基于常设委员会的算法（persistent-committee-based algorithm）。如果没有可用提案，交联委员会成员也可以就“零提案”进行投票。

我们依然在状态中存储一个映射 latest_shard_blocks: shard -&gt; (block_hash, slot) ，不同的是由存储epoch变为时隙。在“乐观情况”下，我们希望这个映射能够更新每个时隙。

将online_validators定义为活跃验证者的子集，活跃验证者即在过去8个epoch中至少有一个epoch包含其证明。如果总数量中2/3的online_validators就给定分片中的新区块达成一致，映射才会进行更新。

假设当前时隙是n ，但对于给定分片i，latest_shard_blocks.slot &lt; n-1（即在前一个时隙中该分片有一个区块跳过），我们则需要该分片的证明来提供范围[latest_shard_blocks.slot + 1….min(latest_shard_blocks.slot + 8, n-1)]内所有时隙的数据根。




&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/g6G2ySP/4.png&quot;/&gt;&lt;/center&gt;








分片区块仍需指向“先前的分片区块”，我们还是要强制保证一致性，因此该协议就要求多时隙证明是一致的。我们推荐委员会采用以下“分叉选择规则”：

- 对于每个有效且可用的分片区块B（该区块的祖先区块也必须有效且可用），计算其最近消息支持B或B的后代的验证者总权重，暂且将该权重称为分片区快B的“得分”。即使是空白的分片区块也可以有得分。
- 为slot + 1选择得分最高的分片区块
- 为slot + k（k &gt; 1）选择得分最高的分片区块，考虑范围内的区块需要指向latest_shard_blocks[i].slot + (k-1)已经选出的区块

&lt;br/&gt;

# 概述

信标区块N和信标区块N+1之间的发表过程如下：

1. 信标区块N发布；
2. 对于任何给定的分片i，分片i的提议者提议一个分片区块。执行该区块可见信标区块N和先前区块的根（如果有需要，我们可以将可见性降到区块N-1和旧区块，这使得可以对信标区块和分片区块同时进行提议）；
3. 映射到分片i的证明者进行证明，包括其对分片i中的时隙 N信标区块和分片区块的意见（在特殊情况中也包括分片i中先前的分片区块）；
4. 信标区块N+1发布，其中包括所有分片的这些证明。区块N+1的状态转换函数对这些证明进行处理，并且更新所有分片的“最新状态”。

&lt;br/&gt;

# 成本分析

请注意，参与者不需要随时主动下载分片区块数据。相反地，提议者发布提议时，只需要在3秒内上传上限为512 kB的数据（假设有400万个验证者，每个提议者平均12.8万个时隙才需要上传一次），随后委员会验证提议时，只需要在3秒内下载上限为512 kB的数据（要求是每个验证者要在每个epoch中下载一次数据，因为我们保留了一个属性：在每个给定epoch的特定时隙中将每个验证者分配给特定交联）。

请注意，此操作的要求低于目前每个验证者的长期负载要求，即每个epoch约2MB。然而，这对“突增性”负载的要求更高：之前是3秒内上限64KB，现在需要在3秒内达到上限512KB。

证明（attestations）负载的信标链数据更改如下。

每个证明有大约300字节的固定数据，加上一个位字段，即每个epoch 400万bit，每个时隙8192字节。因此，目前方案的最大负载为128 * 300 + 8192 = 46592，平均情况中的负载可能更接近32 * 300 + 8192 = 17792，即使这样还可以通过压缩证明中的冗余信息来降低负载。

在本提议中，我们可以看到两种负载（详细参见下文“压缩证明”部分）：

- 时隙n的证明将包含在时隙n+1中。我们可以允许包含两个最受欢迎的分片区块/区块头组合，所以就有了128个未经压缩的证明
- 时隙n+1（每个证明约200字节）之后的时隙n中压缩版证明数量最多为128

因此最大负载计算为128 * 300 + 128 * 200 + 8192 = 72192，平均情况负载约为80 * 300 + 10 * 200 + 8192 = 34192。

还要注意的是，证明聚合在每个分片中每个时隙的成本为65536 * 300 / 64 = 307200字节。这为运行节点提供了一个自然的系统需求基础，因此要再压缩区块数据的话也没有什么意义。

从计算层面来说，唯一大幅增加的花销是需要更多的配对（更确切地说，是更多的Miller循环），每个区块的上限从128增加到192，而这将使得区块处理时间延长200ms。



&lt;br/&gt;

# “基础操作系统”分片

每个分片有一个状态，它映射到ExecEnvID -&gt; (state_hash, balance)。一个分片区块被分成一组大块，每个大块指定一个执行环境。一个大块的执行依靠状态根和块的内容（即分片区块数据的一部分）作为输入，并输出 [shard, EE_id, value, msg_hash]元组的一个列表，每个分片最多拥有一个EE_id（ 我们添加两个“虚拟”分片：向分片-1的转移表示验证者在信标链支付押金，而向分片-2的转移即向提议支付费用），并且我们从该EE的余额中减去value的总数。

在分片区块头里，我们放置了一个“收据根（receipt root）”，里面包含了一个映射：shard-&gt; [[EE_id, value, msg_hash]…](每个分片最多8个元素；并应该意识到跨分片绝大多数的EE转移是发送到相同的EE，在这种情况下元素的数目甚至更少)。

分片i上的分片区块必须包含一个分片j收据的默克尔分支，而这个分片j是相互分片，该分支位于另一分片的“receipt root”（收据根）（任何分片i都知道任何分片j的收据根）。接收的值被分配给它的EE（执行环境），并且msg_hash对于EE执行是可访问的。

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/PTtQDLK/6.png&quot;/&gt;&lt;/center&gt;






这就允许不同分片之中的EE可以即时进行ETH转移，此时每个分片的成本为(32 * log(64) + 48) * 64 = 15360字节。msg_hash可以被用于减少伴随ETH转移所传递的跨分片信息待验证内容的大小，因此在一个高度活跃的系统里，15360字节数据是必不可少的。

&lt;br/&gt;

# 主要益处：更简单的费用市场

我们可以接着修改执行环境(EE)系统：每个分片都有一个状态，该状态包含状态根和执行环境的余额。执行环境将能够发送收据，向其它分片的相同EE直接发送货币。这个过程将使用默克尔分支处理机制来完成，每个分片的EE状态储存着一个其余每个分片的随机数，用以抵御重放(replay)攻击。EEs也可以用来直接向区块提交者支付费用。

这提供了足够强大的功能性，使得EEs能够建立在这样的基础之上：允许用户在分片上存币，并将其用以交易费用开支，跨分片上进行这些币的转移，就如在同一分片内进行操作一样简便，从而消除了对中继市场需求的紧迫性，并让EEs承担实施乐观跨分片状态的负担。

&lt;br/&gt;

# 压缩证明

出于对效率问题的考量，我们还进行了以下的优化。如前所述，查阅slot n的证明可完整地包含在slot n+1中。但是，如果此种证明内嵌在后续的时隙中，则必须以“精简形式”进行嵌套，仅包含信标区块（头部、对象、源），而不包含任何交联数据。

这样既起到裁减数据的效用，更重要的是，通过强制“旧证明”保存相同数据，可以减少用以验证证据所需的配对数：在大多数情况下，所有来自相同时隙的旧证明都可以经由单一配对验证。如果链不分叉，那么在最坏的情况下，用以验证旧证明的所需配对数会被限制在epoch长度的2倍。如果链确实分叉，则要包含所有证明的能力就得依赖于一个更高的诚实提议者比例（譬如1/32，而非1/64），并且要将更早的证明也包含进去。

&lt;br/&gt;

# 保证轻客户端的参与

每天，我们随机选择一个由大约256个验证者组成的委员会，这个委员会可以在每个区块上进行签名，其中签名被包含的验证者便可以在区块n+1中获得奖励。这样做的目的是允许计算能力不高的轻客户端参与。

###  &lt;br/&gt;

# 题外话：数据可用性根

证明一个128 kB数据的可用性的操作是多余的，几乎没有价值。与此相反，有意义的是：要求一个区块能够提供该区块接受并组合在一起的所有分片区块数据的串联根（也许这个分片区块数据根以列表形式存在，其中每个代表64 kB数据，这样使得串联更容易）。 然后可以根据此数据创建单个数据可用性根（平均8 MB，最坏情况下达到32 MB）。 请注意，创建这些根可能要花费比一个时隙更长的时间，因此，最好用于检查一个epoch前的数据的可用性（即，从这些数据可用性根中进行采样将是额外的“确定性检查”）。

&lt;br/&gt;

# 其他可能方案

- slotn的分片区块必须查阅slot n-1的信标链区块，而不是slot n。此种措施将允许每个时隙并行循环发生，而不是串联形式，从而减少时隙时间，这样做的代价是导致跨分片通信时间从1个时隙上升到2个时隙。
- 如果一个区块提议者试图将区块大小扩大到64KB以上(备注：目标128kB)，他需要首先生成64kB的数据，然后让交联委员会对其进行签名，接着，他们可以添加一个引用第一个签名的64kB数据，以此类推。这将鼓励区块创建者在每隔几秒就可以提交他们区块的部分完成版本，从而创建一种预先确认的机制。
- 加快秘密领导人选举的发展（简单起见，即使一个约8到16人的匿名集环签名版本也能有所作用）。
- 与其使用“强制嵌入”机制，我们不如寻求一个更简单的替代方案：每个分片为其余的每个分片维护一个“传入随机数”和一个“传出随机数”（即8 * 64 * 2 = 1024字节的状态），一个分片制造的收据将需要手动进行添加，并由分片接收者按顺序进行处理。收据生成将受限于每个区块每个目标分片的少数收据，以确保一个分片能够处理所有传入的收据，即使是所有分片同时向它分送收据。

 &lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系[ethereumcn@gmail.com](mailto:ethereumcn@gmail.com)进行授权。
</content:encoded></item><item><title><![CDATA[ConsenSys在Devcon上有哪些官宣？]]></title><description><![CDATA[2019年以太坊第五届开发者大会本周在日本大阪圆满结束了，让我们一起回顾一些ConsenSys作出了哪些官宣！]]></description><link>https://www.ethereum.cn/ive-consensys-announcements-from-devcon-5</link><guid isPermaLink="false">https://www.ethereum.cn/ive-consensys-announcements-from-devcon-5</guid><pubDate>Sat, 12 Oct 2019 00:00:00 GMT</pubDate><content:encoded>来源：[ConsenSys](https://media.consensys.net/one-million-ethereum-developers-five-consensys-announcements-from-devcon-5-28520ce63d73)



&lt;br/&gt;

![ConsenSys官宣.jpeg](https://i.ibb.co/ySTxvK2/Consen-Sys-757591bcb4.jpg)

&lt;br/&gt;








全球以太坊社区在日本大阪召开了第五届开发者大会，堪称2019年区块链行业中最盛大的一次年度会议，众人瞩目。在这一周里，与会者发布了许多重要消息，更是充满了思想和灵感碰撞的火花。从盛大的开幕式到大量的活动、工作坊和 meetup，都充分展现了区块链与以太坊的活力。其中许多 ConsenSys 的最新消息也十分夺人眼目。

ConsenSys 创始人 Joe Lubin 发起了一项旨在将以太坊开发者社区扩大到百万人的运动，除此之外，ConsenSys 资助项目还宣布了其最新的项目导入计划。ConsenSys 的前沿项目，如 MythX、Alethio 和 Infura，宣布推出免费增值模式，以解决生态系统的痛点，智能合约安全、数据分析以及基础设施方面，都将有所改善。

另外，企业以太坊联盟(EEA)，一个由数百家公司构成、由成员企业领导的行业组织，为促进以太坊互操作性发布了两个新规范，以便为以太坊网络的几大使用组织服务。

别急，还有呢，一起来看看 ConsenSys 在开发者大会上发布的五大公告！

&lt;br/&gt;

## Joe Lubin呼吁：扩展开发者数量至百万

Joseph Lubin 在 Devcon5 上发表的主题演讲中，他呼吁进一步建设以太坊开发者社区，并提出了一项名为”OneMillionDevs”的生态系统倡议，希望集结到一百万名区块链开发者、技术人员和黑客，鼓励他们在智能合约编写和应用程序开发中大显身手。

据估计，全球的软件开发者多达3000万人，然而区块链的开发者仅占数十万人，其中以太坊的开发者人数最多。随着开发者工具、文档、代码库的改进，Lubin提议社区吸纳新程序员，并在明年将以太坊的开发者数量提高至100万。对于以太坊来说，这无疑是一大挑战。

**申请加入[百万开发者计划](https://onemilliondevs.com/#/)！**

&lt;br/&gt;

## ConsenSys第二轮资助发放17.5万美元

在2018年的第四届开发者大会上，Joseph Lubin宣布发放50万美元的基金用于建设开源软件，以解决以太坊网络中的技术问题。自成立以来，ConsenSys资助项目已经为15个项目提供了总计33万美元的资助。在开发者大会上，ConsenSys公布了第二批接受资助的项目。

**安全性**

- **Lighthouse**：专注于安全性的以太坊2.0(Serenity)客户端，获得了2.5万美元的后续资助，以延续其在权益证明与分片技术领域的出色成果。

**基础设施**

- **Zeropool**：以太坊上完全匿名且不可跟踪的交易，支持多个ERC20通证、ETH与匿名原子互换的交易——获得2.5万美元资助。
- **PISA**：加密货币的真正可扩展性，通过减轻假设，99%的交易都可以保留在本地，而不需要保留在全球网络上——获得2.5万美元资助。
- **Tellor**：去中心化的预言机，为链下数据提供一个高效的、去信任的、去中心化的替代方案——获得2.5万美元资助。
- **DappNode**：去中心化私有节点网络，用户界面友好——获得2.5万美元资助。

**可用性和开发工具**

- **Alice**：能够轻简便创建本地应用程序的移动应用程序——获得2.5万美元资助。
- **Ethers.js**：完全的以太坊JavaScript库，用于构建钱包、框架和工具，专注于安全性、紧凑性和简洁性——获得2.5万美元资助。



ConsenSys 资助项目主要为有助以太坊生态系统发展的开源项目提供资金，其支持下的项目包括一些关键领域，如核心基础设施、开发者工具改良、用户体验(UX)、安全性、社会影响以及开发者和用户教育。

目前，第三轮资助已经开始接受申请，受资助项目名单将于2020年2月于美国丹佛市举行的黑客松上宣布。提交申请的截止日期为2020年1月14日。



**ConsenSys Grants 申请地址：**[**https://consensys.net/grants/**](https://consensys.net/grants/)

 &lt;br/&gt;

## 企业以太坊联盟（EEA）发布新客户端规范

企业以太坊联盟是由全球数百家企业组成的行业组织，并由成员自行领导。今天他们发布了两条新客户端规范，详情请[点击此处](http://entethalliance.org/)下载，主要内容包括：

- 根据贡献者的执行体验，企业以太坊客户端规范V4进一步优化了隐私性和许可性。
- EEA 链下可信计算规范V1.1改进其标准的开源参考实现。

 

&lt;br/&gt;

## 提供软件即服务（SaaS）免费增值模式

在2019年第三季度，ConsenSys 旗下产品发布了新的软件即服务模式，以改善客户服务水平协议，满足日趋成熟的以太坊市场需求，包括基础设施、分析和开发者工具。

随着以太坊中功能性服务和工具市场的发展，客户的需求也随之增长。 Infura，MythX 和 Alethio 推出了订阅服务，以支持以太坊网络从初级用户到企业级用户中使用最广泛的基础架构，安全性和数据分析工具。

- **Infura** 作为以太坊基础设施提供商推出了 Infura +，这是 Infura 的以太坊 API 高级订阅服务，可为各种规模的应用程序提供强化的以太坊基础设施支持。用户可以从分层服务选项（核心开发者、开发者、团队和增长）中进行选择，以执行准确的计划，使基于以太坊的项目实现从概念证明到全球性产品。
- **MythX** 是用于以太坊智能合约的首要安全性分析服务，推出了 MythX Pro。现在，MythX 的用户可以通过 Daisy Payments 提供的透明简便的 DAI 稳定币订阅服务来检测各种智能合约漏洞并帮助预防安全漏洞。
- **Alethio** 宣布推出 Alethio API PRO，使开发者能够直接以稳健可靠的方式实时访问索引化的、合成后的链上以太坊数据。Alethio 的 API 解决了以太坊的数据碎片化问题，这个问题令许多主网用户无法可靠简洁地访问基于区块链的数据。

 &lt;br/&gt;

## MetaMask插件系统

在过去的四年中，MetaMask 帮助大量的 Web3 开发者引入了一种新的计算范例：用户控制自己的帐户，帐户控制所有资金。

基于浏览器的 MetaMask 扩展应用将以太坊融合进了普通的 Web 应用程序，但是面对新的扩容性策略和智能合约协议，做出一些改变是必需的。许多智能合约协议都需要与用户的帐户进行交互，并代表用户持续运行脚本来跟踪状态或预处理交易。因此，MetaMask并没有发布某些特定功能，而是创建了一个无需许可的插件系统。

MetaMask 插件是一个脚本，通常在 ENS 和 IPFS 上提供服务，可为 MetaMask 增加功能性，而新的系统使这一切成为可能。

- auditAddress API 插件可以在 MetaMask 显示的任何位置添加账户警告或认可，以确保智能合约安全性。
- resolveName API 插件意味着 MetaMask 不会指定用户为分布式域名系统（DNS）订阅的系统。
- 一套用于第二层（Layer 2）扩容性解决方案的 API 插件，帮助 DApp 在以太坊主链下开发去中心化协议。
- ShareAPI 使得任何插件作者都可以轻松地为用户访问的站点创建自己的 API，无论是简单的 RPC API 或是高级的事件驱动 API 都能实现。
- 供开发者入门学习的示例插件，包括 IPFS， Starkware 和 Blocknative 插件。您可以在[此处](https://github.com/MetaMask/mm-plugin/tree/master/examples)查看更多示例。

 

&lt;br/&gt;

## 发布日版Bounties Network（赏金网络）

在大阪的DevCon 5期间，Bounties Network创建了一个特殊的日语版浏览器，供与会人员轻松创建和获取赏金。DevCon期间在以太坊上进行交互，可以前往japan.bounties.network。

作为Web3浏览器中可供社区聚集和互动的平台，在诠释本地社区和国际社区如何通过可追溯的价值交换促进发展方面，日版Bounties Network展现了一个很好的例子。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Vitalik观点：隐私、DeFi、ETH 2.0]]></title><description><![CDATA[9月15日，以太坊联合创始人 Vitalik Buterin 在特拉维夫 Ethereal 峰会问答环节中谈论到以太坊大生态的发展状况。]]></description><link>https://www.ethereum.cn/italik-buterin-questions-answers</link><guid isPermaLink="false">https://www.ethereum.cn/italik-buterin-questions-answers</guid><pubDate>Mon, 16 Sep 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [decrypt.co](https://decrypt.co/9251/vitalik-buterin-questions-answers-ethereal)









昨日，以太坊联合创始人 Vitalik Buterin 在特拉维夫 Ethereal 峰会问答环节中谈论到以太坊大生态的发展状况。

在与Ejaaz Ahamadeen（ConsenSys 旗下 Digital Assets 首席通证架构师）的交谈之中，Vitalik 谈到了隐私工具在近几周取得的巨大成果、去中心化金融（DeFi）的潜力以及以太坊2.0的发展路线。

 &lt;br/&gt;

# 以太坊2.0：Staking

针对以太坊2.0的首个开发进程，即阶段0，Vitalik 表示“除了在安全审计期间出现的问题，一切都已最终确定。以太坊各个客户端目前正在相互沟通。下一步是要**确保他们能够维护一个大规模的公共网络。**”

Vitalik 所指的这个过程，被称作 Eth2Beaucoup，包含7个以太坊2.0客户端（即将到来的区块链平台升级中应用的版本）的联通以及同步运行。这一进度在以太坊该阶段的开发过程中成为重大里程碑。

Vitalik 表示：“下一步的目标就是要确保他们能够维护一个大规模的公共网络。这里我们指的是聚合了大量交易的验证者，其数量可能达到成千上万个。”

对话中还涉及到了验证者奖励的话题。“验证者”指愿意在智能合约中锁定一定量 ETH 以帮助验证以太坊交易的用户。一些批评意见指出，以太坊2.0奖励太低，不足以激励验证者维护网络运行。

对此 Vitalik 回应道：“这当中存在很多误解。有些人一直在诟病1%这个数据。实际上，最高奖励会达到每年1.7%，这是每个人都参与 Staking 的情况。在验证者数量较少的情况下，奖励会上升一些。”

Vitalik 所指的奖励是验证者在质押ETH之后获取的利息。**这一利率与网络中验证者的数量紧密相关。**如果每个用户都成为验证者，那么将获得他们质押资产的1.7%作为收益。但是假如网络中只有1%的用户成为验证者，那么这些验证者的利率将上升至17%。但 Vitalik 补充到，具体数字仍在讨论中。

 

&lt;br/&gt;



# Plonk：为区块链提供隐私





当被问及最近隐私技术方面（尤其是 Zcash 这类隐私币所使用的零知识证明）的发展时，Vitalik 说：“过去的三周里，Zk-SNARKs（一种在不公开交易金额的情况下证明交易存在的方式）总体上确实取得了巨大的飞跃，但很多人并未意识到这一点。”

他还提到了 **Plonk**，这是一种创建零知识证明的新方法，将于10月份由 Aztec Protocal（ConsenSys支持的以太坊隐私项目）推出**。这个概念使得创建零知识证明更加简单，如此一来更多的人都能使用这一技术。**“这意味着成千上万的用户都能轻松参与进来。”

 

&lt;br/&gt;



# DeFi的未来





不出所料，Vitalik对新兴的去中心化金融世界非常感兴趣，这一新金融模式在很大程度上是基于以太坊的。

“总的来说，DeFi 的潜力非常激动人心。在这个概念中，世界上任何地方的任何人都能使用一个自由的金融系统，使得他们能够互相交易、自行承担金融风险，这是一个十分大胆有力的想法。这也是目前许多人都无法接触到的事物。”

他进一步建议DeFi可以通过谋求某种方式，以防止区块链创始人募集大量资金后销声匿迹。“众筹收益项目”（Public interest projects）是指**用户质押自己的部分虚拟货币，然后利用其产生的收益来募集资金用于项目建设。****这个概念可以看作是DeFi语境中的ICO（DeF-ICO）。**

这与普遍意义上 ICO 的关键不同之处在于，相较于一次性募集大量资金，项目的资金募集是相对小额，持续稳定的（来源于利息），其资金源取决于项目的持续开发。如果某个项目开始出现欺诈倾向，那么投资者可以撤回他们的资金，项目资金就会逐渐减少。

“这么做并非为了最大化个人收益，而是如何将收益投入你支持的项目。**ICO 领域欺诈现象频生，这是缓解投资者忧虑的良方。**”

Vitalik 也随即指出了 **DeFi 发展的痛点：显而易见的中心化“后门”和预言机。**

中心化“后门”指某个中心化组织实际掌握了去中心化应用的完全控制权，就如同最近在 Compound 中发现的问题。

与此同时，预言机作为区块链访问真实世界数据的方式，“如果预言机是由单一个人设定的，那么去中心化几乎无济于事。这个人可以设定他想要的价格，抢先他人进行清算，通过这种方式攫取一大笔利润。”

Vitalik也补充到在寻找去中心化预言机方面正在取得良好进展（许多项目正在尝试整合 Chainlink，同时 Compound 也在构建自己的去中心化预言机）。

 

&lt;br/&gt;



# 我待魔兽如初恋 魔兽虐我千百遍





在谈话的最后，Ahamadeen 提到了 Vitalik 对于《魔兽世界》的热衷。在 Vitalik 自己的博客中，他提到了自己对这个游戏的喜爱，不过在游戏开发商暴雪娱乐修改了自己的游戏角色设置之后，他“哭着入睡，并且意识到中心化服务可能带来的弊端”。

就在上个月，暴雪发布了这款游戏的原始版本——《魔兽世界》经典版，回滚了15年来的更新——这有些类似以太坊经典（Ethereum Classic）。对此 Ahamadeen 问道，鉴于这款游戏已经恢复了原貌，那么 Vitalik 会否回到“初恋”的怀抱？

Vitalik 傲娇地回答说：“如果《魔兽世界》转移到以太坊上，我会考虑的。”

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[伊斯坦布尔分叉测试网激活时间确定]]></title><description><![CDATA[以太坊伊斯坦布尔硬分叉全系统升级的测试网激活日期已经确定，ProgPoW 安全审计进行中。]]></description><link>https://www.ethereum.cn/istanbul-hardfork-time-settled</link><guid isPermaLink="false">https://www.ethereum.cn/istanbul-hardfork-time-settled</guid><pubDate>Mon, 09 Sep 2019 00:00:00 GMT</pubDate><content:encoded>来源 | Coindesk



&lt;br/&gt;



在上周五的核心开发者电话会议上，以太坊伊斯坦布尔硬分叉全系统升级的测试网激活日期已经确定。

“我们选择的区块高度预计在**10月2日左右**达到，”以太坊基金会社区经理Hudson Jameson 上周五在以太坊核心开发者电话会议上说。“也可能在10月2日前后一两天，这取决于区块的生成速度。”

伊斯坦布尔硬分叉升级此前原本预计的测试网激活时间是9月4日，本次推迟至10月2号左右的原因是有多个 EIPs 等待审核。开发者提交了大约30个EIPs，其中只有**6个被确定纳入伊斯坦布尔硬分叉升级内容，此外还有8个EIPs暂时计划用于进行全系统升级，新代号为“柏林“（Berlin）。**

因为测试网的升级比原定日期推迟了一个月，**主网的激活也将顺延至11月**，也就是在以太坊最重要的开发者大会 Devcon 结束之后。

“我们从去年拜占庭硬分叉中吸取到的经验是不应该在测试网和主网同时部署升级。” Infura 的首席技术设施工程师 E.G. Galan 在电话会议中说道，“我们会先尝试在测试网中激活升级，如果结果不错，那么我们会在一段稳定期之后再将升级部署到主网。”

 &lt;br/&gt;

## ProgPoW 安全审计进行中

电话会议中，开发者还讨论了安全咨询公司 Least Authority 对新共识算法 ProgPoW 的初步安全审计结果。

ProgPoW是一个开发者们讨论了近一年的EIP，旨在阻止专业硬件ASIC参与挖矿，从每年约6.55亿美元的以太坊挖矿奖励中攫取利润。

Least Authority 的 CEO Liz Steininger 在会议中总结到：

“**在很大程度上，ProgPow 达到了设计目标，非常有可能达到其预期的经济效果。其中不存在重大问题，也就是说，我们在审计过程中没有发现潜在的攻击漏洞**。但为了确保 ProgPow 将来完全按预期发展，我们提出了一些优化建议。”

Jameson 在会议中提到，目前还有另一项针对 ProgPow 的审计待完成。

“Bob Rao 正在进行非常全面的硬件审计，Bob 的审计目前已处于最后阶段，应该很快就会有结果。这项审计将回答更多关于 ProgPoW 的问题和猜测。”

除非这两个审计机构提出重大的安全问题，**开发人员预计将在之后的 Berlin 硬分叉中激活挖矿代码更改，正式实施 ProgPoW 算法。**</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2020/9/5）]]></title><description><![CDATA[Medalla测试网运行平稳；被锁定的ETH迎来新的可能性？]]></description><link>https://www.ethereum.cn/wnie2-2020-9-05</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2020-9-05</guid><pubDate>Sat, 07 Sep 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://hackmd.io/@benjaminion/wnie2_200905)


&lt;br/&gt;  

## 文章荐读

Danny Ryan的《[eth2进展速览#15](https://blog.ethereum.org/2020/09/01/eth2-quick-update-no-15/)》一如往常为我们呈现了精炼权威的信息，想要节省时间的读者可以先行阅读该文。

&lt;br/&gt;    

## 阶段0：信标链

测试网前线没有传来大新闻。自从Medalla从两周前的动荡中恢复过来之后，一切都运行平稳。**目前已经超过42,000名验证者被激活，还有一条长达十天的队伍等待加入。验证者参与率很健康，在80%左右。区块也一直保持敲定。**

这个月底我们计划再进行一次[创世](https://hackmd.io/@benjaminion/genesis)过程的测试，将从Medalla创世中吸取的经验应用其中。本次测试不会影响到Medalla测试网的运行，测试信标链将仅运行几日。Launchpad门户已经根据测试进行了更新，测试和存款合约的部署将在21号左右，相应的创世时间预计在其后一周。未来几周会有更多相关信息释出。

大家别忘了我们可以在[GitHub中跟进](https://github.com/ethereum/eth2.0-pm/projects/1)信标链发布进程，我们距离信标链的发布可能比想象中[还要近](https://twitter.com/etherchain_org/status/1300450773378240512)！!😉

同时，[攻击网](https://github.com/ethereum/public-attacknets/issues)也在持续运行中，并且获得了不错的成果。目前还有很多机会能够参与其中并获取赏金！

 

### 工具

Attestant团队创建了[Dirk](https://www.attestant.io/posts/introducing-dirk/)，这是一个**分布式远程密钥管理器**，看起来十分不错。

密钥管理器或是签名服务是Eth2基础设施中非常重要的一个部分，尤其是能够**提供罚没保护功能**的工具。ConsenSys也在致力于构建[Web2Signer](https://github.com/PegaSysEng/web3signer) (之前叫作Eth2Signer)，我们目前正在添加罚没保护功能。

Attestant团队的Jim McDonald还创建了一个工具[ethdo](https://github.com/wealdtech/ethdo)——“一个用于管理eth2中常见任务的命令行工具”。这是个非常有用的工具，解决了我之前的麻烦。以太坊基金会正在为其寻求[安全审计](https://notes.ethereum.org/@djrtwo/ethdo-audit)，其重要性不言而喻。如果感兴趣的话可以申请，RFP将在两天内关闭。

 

###  质押金提取

用户可以自愿退出信标链验证，并最终索回押金以及任何应计的奖励。但是，因为押金需要被提取到某处，因此该设施要起作用，需要等到Eth2生态系统中的经济机制运行起来。

由于我们起初并未完全掌握经济机制将如何运行，因此信标链目前仅提供了最小可行退出机制。在注册质押时，用户将为自己持有的提款密钥负责。Eth2中会有方法证明用户拥有相应的密钥，然后用户便可以将提出的质押金转移到一个帐户中。

既然已经重点已经来到了阶段1.5 (参阅下文)，可以通过一些有趣的方式扩展此机制。例如，**Vitalik[建议](https://twitter.com/VitalikButerin/status/1297675971529605121)为提款密钥设置一个相应的Eth1地址。这可能是Eth1上的合约，在阶段1.5将集中并分配提款。**这似乎[不难](https://twitter.com/VitalikButerin/status/1297676370936344576)实现。Martin Köppelmann对此[感到兴奋](https://twitter.com/koeppelmann/status/1301113176570900481)，这种方案为非托管性质押池带来了可能性，并且被锁定的ETH也有机会参与DeFi：“一切都可能因此改变。就这么做吧！”Aave对此已经[有计划](https://twitter.com/StaniKulechov/status/1299636710087831553)了。

&lt;br/&gt;  

## 阶段1.5：Eth1+Eth2合并

请注意，尽管我们一直专注于阶段0信标链的交付，但后续阶段的工作仍在同步进行。阶段1.5命名不太恰当，其中Eth1链将被合并到Eth2系统中，并迎来全面的权益证明。

按照最初的设想，该计划术属于阶段2的一部分 (完全实现Eth2上的执行环境)。但是近几个月以来，该计划越来越紧迫，并且在路线图中提前了。

此处是我的同事Mikhail Kalinin的[原型演示](https://youtu.be/Rr69pHZ57j0)，展示了Eth1的交易在分片化的Eth2中如何进行。其中使用了Metamask，读者也可以[自行运行](https://github.com/txrx-research/eth1-shard-demo)。

&lt;br/&gt;   

## 释义性文章

Bankless发布了一篇非常清晰[全面的教程](https://bankless.substack.com/p/guide-becoming-a-validator-on-the)，内容是如何成为信标链验证者，由ConsenSys的Collin Myers和Mara Schmiedt编写而成。

既然说到Bankless，最近Raul Jordan参加的[播客](http://podcast.banklesshq.com/sotn11-building-w-raul-jordan-eth2-testnet-broke-l2-will-save-us-pro-o-o-tocol-sink)也很不错。前三十分钟主要对Medalla测试网面临的挑战进行了回顾和展望，也包括一些如何参与其中的讨论。

证明打包是时下一个非常火热的话题。**你的验证者证明能否高效地被打包到信标区块中是性能表现的重要指标之一，这与验证者的奖励直接相关。**

上次我们提到，[beaconcha.in](http://beaconcha.in/)目前能够为验证者展示“证明效率”指标，这吸引了许多目光。我们最近也对Teku进行了[效率优化](https://github.com/PegaSysEng/teku/issues/2521)，Adrian Sutton制作了一个[精美的视频](https://youtu.be/SPcgevcDqDE)，讲解了快速将证明打包上链面临的复杂性和挑战。其中包括对验证者和信标节点在幕后的所有工作的一些深刻见解。在观看之前，读者可以先浏览一下beaconcha.in有关[证明的介绍](https://kb.beaconcha.in/attestation)。

Beaconcha.in最近还在他们的[知识库](https://kb.beaconcha.in/)中添加了关于[staking硬件设备](https://kb.beaconcha.in/staking-and-hardware)的文章。

同时，我也完成了有关[Eth2](https://hackmd.io/@benjaminion/shuffling)[混洗机制](https://hackmd.io/@benjaminion/shuffling)的文章。内容有些小众，但我还是将其放出来了。

以防大家错过，Ethstaker的Eth2 Studymaster项目还在进行当中，由[Superphiz](https://www.reddit.com/user/superphiz)策划。现在加入还不晚！[此处](https://www.reddit.com/r/ethstaker/comments/in8oy3/eth2_studymaster_quiz_3_of_10_has_been_posted_you/)是第三周的相关信息。大家可以加入[EthStaker的Discord](https://discord.gg/B2wkhH4) (#eth2-studymaster)。这个计划真的很棒！

&lt;br/&gt;  

## 研究工作

关于无偏差随机性，VDF (可验证延迟函数) 的工作仍在继续。这项工作对于Eth2.0之后的阶段更加有价值，就目前的计划来看，我们并不依赖于此。但这确实是非常有有意义的工作，尤其是对于应用来说。

ZenGo一直在分析VDF所需的受信任设置，并编写了一种[新的攻击方式](https://medium.com/zengo/dogbyte-attack-playing-red-team-for-eth2-0-vdf-ea2b9b2152af)，称为“DogByte”。

以太坊基金会RIG团队的Barnabé Monnot更新了其系列信标链经济行为笔记《[信标链运行者：Thunderdome](https://github.com/barnabemonnot/beaconrunner/blob/master/notebooks/thunderdome.ipynb)》。其中探索了在对区块进行证明时个人验证者的策略，并且和上文提及的证明打包很好地联系在了一起。

剧透：**在一个存在延迟的网络中，谨慎比速度更重要。**

[ethresear.ch](https://ethresear.ch/):

- 出现了一种新的[哈希到某种椭圆曲线的方式](https://ethresear.ch/t/hashing-to-elliptic-curves-y-2-x-3-b-provided-that-b-is-a-quadratic-residue/7939?u=benjaminion) (比如我们在Eth2中使用的[BLS12-381](https://hackmd.io/@benjaminion/bls12-381))。虽然看起来不错，但我们希望遵循新标准，因此不太可能会应用到Eth2中，而且其本身并不比标准方式快许多。
- [Shargri-La](https://ethresear.ch/t/shargri-la-a-transaction-level-sharded-blockchain-simulator/7936?u=benjaminion)是“交易级分片型区块链模拟器”。这篇文章很长，[此处](https://twitter.com/nrryuya/status/1301755621725757441)是总结性推特。首次展示时，他们在Eth2上围绕交易费用尝试了各种方案。

&lt;br/&gt;   

## 常规会议

### 实现者会议

第47次会议于9月3日进行。

- 会议日程
- 会议视频
- 我的速记以及Mamy的笔记

本次会议耗时不长。主要讨论了如何应对客户端中的弱主观性时期，我们也计划在9号的会议中单独讨论网络 (networking) 相关问题。

另一个重大消息是**Trinity Eth2客户端的开发暂停。**这是由以太坊基金会开发的Python客户端。Trinity是开源的，欢迎大家参与贡献。但是Trinity团队现在将专注于与其他团队进行协作，以启动信标链主网。

 &lt;br/&gt;  

### 其他新闻

- 在[Smart Contract Summit](https://www.smartcontractsummit.io/)中有一场关于[Eth2的圆桌讨论](https://twitter.com/hudsonjameson/status/1299360249405673474)。视频暂未上限，大家可以关注[Chainlink的Youtube频道](https://www.youtube.com/channel/UCnjkrlqaWEBSnKZQ71gdyFA/videos)
- [布宜诺斯艾利斯](https://twitter.com/smpalladino/status/1299094943085015040)举办了一场Eth2的聚会。此处是Justin Drake的[西班牙语展示](https://docs.google.com/presentation/d/1_-YKG265v1blNqztKfsnawUqjAc8f0YJhRZ-uVo2ZGc/edit#slide=id.p)。
- Matt Garnett[挖掘](https://twitter.com/lightclients/status/1298680048287809536)出了一些运行Eth2验证程序的挑战：即DoS防御。在真实情况中其会否成为问题还有待观察。同时还简单介绍了正在研究的一些解决方案。
- 在过去的两周中客户端团队暂未发布更新。!🙂

 &lt;br/&gt;  

 &lt;br/&gt;  

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[ETH2进展更新（截至2019/8/31）]]></title><description><![CDATA[2019.8.16-8.31 以太坊2.0最新进展]]></description><link>https://www.ethereum.cn/wnie2-2019-8-31</link><guid isPermaLink="false">https://www.ethereum.cn/wnie2-2019-8-31</guid><pubDate>Wed, 04 Sep 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [What’s New in Eth2](https://benjaminion.xyz/newineth2/20190831.html)



&lt;br/&gt;

到目前为止，我已经在 Eth2.0 范围中隐藏了一年多的时间——Eth2.0的工作强度需要我这么做。因此参加 EthBerlin 让我有机会看看周围更广阔的风景，这真是太棒了。

EthBerlin 给我的收获：整个以太体生态系统的活动水平是如此惊人!🤯今天的以太坊，即便存在着我们所知道的一些限制和局限性，依旧是奇妙地充满活力、创造力和活力的！想象一下，当我们最终释放出 Eth2.0 的全部力量时，事情将会是怎样的🚀

本期精选：花点时间听听Eth2.0研究者 Danny Ryan 在 Into The Ether 博客中说的内容 [1]，他对我们过去、现在和未来进行了很好地概述。

对了，别忘了帮我赢取一件T-shirt，文章底部有说明😆

&lt;br/&gt;

# 阶段0规范

阶段0规范的V0.8.3版本已经发布了[2]。此版本是为9月份进行的客户端互操作工作目标而发布的规范。此版本中，核心规范没有实质性的更改，只是一些对测试的更新、一些说明和对网络连接规范的更新。

Diederik Loerakker (Eth2.0研究员) 在 GitHub 上创建了一个非常有用的文档[3]，对各客户端在实现此规范方面的各种优化进行了很好地总结。

&lt;br/&gt;

# 对规范的反馈

由于阶段0和阶段1的规范已经不再处于不断更改的状态，因此现在是对这些规范进行仔细审查和评估的时候了。

Runtime Verification已经对抵押合约 (Deposit Contract) 进行了审计，我真的很高兴看到更多这样的事情正在进行：对这一切的关注是越多越好。

本周，人们已经在对阶段0的分叉选择规则和阶段1的托管证明构造进行了审视。

&lt;br/&gt;

# 01. 分叉选择规则

Casper CBC 研究者 Ryuya Nakamura 阐述了一个针对 LMD GHOST 的“decoy-flip-flop”攻击[4]。这种攻击不会破坏 Eth2.0 网络的基本安全，但在某些情况下，攻击者可能会利用网络故障来使信标链在敲定区块时延迟几个小时。

*[备注：LMD GHOST 是信标链使用的分叉选择规则，即拥有最多证明 (投票) 的分叉链就是Eth2.0网络中的“权威链”]*

我的理解是，当网络出现故障时，攻击者 (需要控制网络中的很大一部分，但少于1/3的验证者) 可以“保存”其证明 (attestations，即对区块进行的投票)，然后在之后的时间使用这些证明来延迟信标链对区块进行敲定。这暗示了对 LMD GHOST 规则的一些可操作性。

Ryuya提到一种可能的防御方式就是将该分叉选择规则修改成 FMD (fresh message driven) GHOST：验证者的证明只有在一个有限的时间内是有效的，因此攻击者不能“保存”证明。但有关 FMD GHOST 的细节尚未得到分析，且其中一个担忧是 FMD GHOST 将可能与 Casper CBC 不兼容。

&lt;br/&gt;

# 02. 托管证明 (proof of custody)

与此同时，密码学家 Dmitry Khovratovich 受委托将使用 Legendre PRF 对提议的用于生成托管证明的机制进行审计。有关托管证明问题方面的介绍和背景信息，可以查看此文档：

*https://github.com/ethereum/eth2.0-specs/files/3551615/legendre_proof_of_custody_uhf.pdf*

在其审计文档中[5]，Khovratovich 发现了最初提议的托管证明结构存在的几个问题，以及针对 Legendre PRF 本身可能进行改进的攻击。他提议了一个全新的托管证明协议[6]，该协议依旧使用 Legendre PRF，且当前已经有人提议将这个全新的托管证明协议整合到阶段1规范中[7]。

以太坊基金会已经提供了一些赏金[8]，用于发现针对 Legendre PRF 的潜在攻击，甚至一些赏金还将用于针对 Legendre PRF 的论文。

&lt;br/&gt;

# 公开讨论的问题

以下是一些我最近注意到的有关 Eth2.0 规范仓库的公开讨论问题：

- 针对阶段0的奖惩计算器[9]：为了使参与质押的验证者将获得的激励和风险更加透明，有人提议了创建一个针对验证者奖惩的“可视化计算器 (visual calculator)”。昨天我很荣幸能和 Collin Myers 共进午餐，他之前在这方面做过一些工作。最近 Vitalik 更新了 Collin 制作的计算表格[10].
- Danny Ryan 提出验证者受到的“Inactivity penalty”惩罚过高[11]。按照目前的情况，当 Inactivity penalty 惩罚发生时 (即因区块停止了被敲定而对所有验证者进行的惩罚)，即便是行为端正的验证者也有可能在会损失一定量的质押金。总的来说，之后可能会对激励机制进行重新调整，这会解决这个问题。
- Vitalik 提出的极端情况：crosslinks de-finalizing [12]。Epoch 的转换使得交联 (crosslinks) 的处理更加复杂。Vitalik 提出了一些改善此问题的想法。
- Jacek Sieka 提议为主网选择签名聚合传播策略[13]。如何才能最有效地聚合分片委员会的签名？其中一个候选方案就是使用 PegaSys 团队的 Handel 协议[14]。

&lt;br/&gt;

# 开发者电话会议

8月29日开展了第24次 Eth2.0 实施者电话会议。

- 会议议程[15]
- 会议视频[16]
- 会议内容初稿见 [17] 和 [18]

此次电话会议包含了很多更新信息。我就不再赘述了，我的笔记 [18] 已经对主要内容进行了简要介绍。其中由几件事情值得注意：Protocol Labs 与 EthBerlin 合作提供的赏金计划诞生了一些很棒的作品，以及有关即将迅速到来的互操作性计划 (见下文)。

&lt;br/&gt;

# 研究方面

其中有些研究主题来自 ethresear.ch。

在如何维护验证者的隐私/匿名性方面受到了越来越多的关注。这方面是很重要的，原因在于：

- 首先，由于验证者需要保持他们的私钥始终可用于对区块提议/证明进行签名，因此我们可以预料验证者的私钥将可能成为被攻击的目标；
- 其次，如果区块提议者事先知道的太多 (比如提前知道自己将被选择为区块提议者)，那么他们更容易成为贿赂或者拒绝服务攻击的目标。

上述第二个问题可以通过“secret single leader election (秘密选出单个区块提议者)”的方式加以解决，即在每个 slot 期间，某个验证者可以知晓自己是在该 slot 期间唯一被选中的区块提议者，且之后该验证者可以证明自己正确地提议了区块，但这无法提前被计算出来。

对此，PegaSys 团队成员在几个月之前提议了一个机制[19]。Justin Drake 已经对该机制的有效性进行了改进，因此现在该机制已经可以实际实现。Justin Drake 改进的方式是：Low-overhead secret single-leader election [20]。

至于第一个问题，PegaSys 团队的研究是：Anonymity: a ZKP to remove the mapping ip address/wallet’s public key of a validator [21]，同时 Mikerah 也在致力于这方面的研究：Privacy-Preserving Casper FFG using Traceable Ring Signatures [22]。

另一个研究主题就是，当前围绕在 Eth1.0 链和 Eth2.0 信标链上实现不同的 ETH 发行率方面展开了很有趣的讨论。这方面的讨论带来的可能影响就是：信标链中的奖励将来自哪里？[23]

&lt;br/&gt;

# Gitter 聊天频道上的讨论

这两周在 Gitter 频道[24]上讨论的主要内容包括：

- 以太坊基金会研究员 Protolambda 正在为 Eth2.0 仓库进行可视化[25]；
- 有关 Eth2.0 密钥存储格式的讨论[26]；
- 有关 LMD GHOST 分叉选择规则可能受到的 flip-flop 攻击的讨论 (如上文所述)[27]；
- 有关“共享验证者” (即允许多个实体共同拥有同一个验证者) 的讨论[28]。这看起来有点像用于管理 staking pools (质押池) 的智能合约系统 ，我还没有抽出时间仔细研究一下，且相关的文档也太稀少了。
- 验证者 API 已经转移到一个新的仓库中[29]；
- 在阶段0期间，Stakes (质押金) 是不可以转移的[30]；
- 在阶段1期间或之前，质押金应该可以实现转移[31]；
- 有关“验证者何时会被奖励”的讨论[32]；(对此我已经在撰写一篇文章了，文章写完一半了😅)
- Protolambda 做的有关默克尔树和客户端优化项目的笔记[33]；
- Danny Ryan 针对 BLS 签名处理性能设定了一些期望[34]；

&lt;br/&gt;

# 互操作性

早在今年5月，在纽约举行的 Eth2.0 meetup 期间，Joseph Delong 提议举办一次针对各客户端的互操作性“禁闭”聚会，计划是让所有的客户端团队尝试将他们的客户端实现连接在一起 (测试互操作性)，看看哪些方面可以运行，哪些方面需要修复。Joseph Lubin 提出承担此次聚会的大部分费用。

在过去的三个月里，所有的客户端团队都在为互操作性而努力工作：包括实现并通过常见的参考测试 (reference tests)、在网络连接规范方面进行协作、实现工具来快速地搭建并运行测试网络等等。在这方面，阶段0规范在6月底的冻结对此大有裨益，给了各客户端团队一些更稳定的目标。

好了，聚会的时间就要到了！

在之后的一周时间里，我们将有45人聚集在安大略省的一个偏远的湖边小屋，包括所有的客户端团队、一些以太坊基金会成员、一些 Whiteblock成员，以及致力于阶段2的 Quilt 团队和以太坊基金会的 Ewasm 团队。

Whiteblock的首席执行官 Antoine Toulme 已经被任命为此次聚会的技术指导，确保我们能够有序地取得进展，并有效地解决我们之间的分歧。

在此次聚会结束之前，我将不再更新有关Eth2.0工作的进展，但在三周之后我会发布有关此次聚会的完整报告。其间，你可以在Twitter上查看很多令人兴奋的事件😱

Jacek Sieka发布的这条推文就是一个很好的例子[35]：Nimbus 与 Lighthouse 进行通信。

祝我们好运吧！

&lt;br/&gt;

# 其他新闻

- 以太坊基金会已经宣布了一项总额超过200万美元的资助计划[36]，这些资金将用于支持以太坊2.0相关的研究和开发工作。我特别高兴地看到，ConsenSys 也参与进来共同为 Lighthouse 和 Whiteblock 提供资助。
- Lighthouse、Prysm、Lodestar、Nimbus 等客户端开发的更新已经出来了，Nimbus 还做了一次 AMA 访谈[37]；
- bitrates.com 网站发布了一篇概览 Eth2.0 的文章[38]；
- Protolambda 计划为所有对 GitHub 上的 Eth2.0 相关的仓库[39]的进展进行可视化[40]，Prysmatic Labs 此前对他们的 GitHub 仓库进行了类似的操作[41]；
- Vitalik 列举了当/如果我们将 Eth1.0 链调入 Eth2.0 链中时可能会面临的问题[42]。但别担心！我们还有几年时间来解决这个问题。
- Rocket Pool 将要推出他们的 Beta 测试基础设施[43]，该基础设施将用于提供 Eth2.0 staking 服务。
- 👕帮我赢取一件 T-shirt！👕由于 Hyperledger 投票通过了采用我们的以太坊主网客户端 Pantheon，我们正在进行一场内部的社交媒体竞争来将这个消息公布出去。请花点时间帮我点赞/转发/点击我的这推文 [44] 和 [45]。[我基本上都是占有自己的时间来写这些文章的，撰写本文时还是周六的早上，如果能穿上一件PegaSys的独家T-shirt就更棒了😂

 &lt;br/&gt;

 &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。 </content:encoded></item><item><title><![CDATA[揭秘以太坊2.0术语]]></title><description><![CDATA[以太坊2.0术语划重点：信标链？分片？交叉链接？验证者？委员会？]]></description><link>https://www.ethereum.cn/ethereum-2-0-terms-demystified</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-2-0-terms-demystified</guid><pubDate>Tue, 03 Sep 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [alethio](https://medium.com/alethio/ethereum-2-0-terms-demystified-8398357429d7)

&lt;br/&gt;

随着以太坊2.0的发布即将到来，这是关于它的许多文章中的第一部分，我们希望后续会有更多的相关文章发表。

以太坊 2.0（Serinity）是众人期盼已久的重要更新，开发者们更是为其倾尽心血，**其中包括在扩容性方面进行一些重大升级，并且将从工作量证明（PoW）转变为权益证明（PoS）机制**。目前的一个重要里程碑当属第一阶段开发的规范冻结。我们投入了大量精力进行研究与开发，现在，我们的努力初见成果。

当一开始研究Serenity（以太坊2.0）时，首先让我感到困惑的是大量全新的术语。Crosslink（交联）到底是什么？Slot是区块吗？（剧透！不！它不是）Attestor（证明人）与validator（验证者）是一回事吗?

因此，我们在以下为略懂技术的用户列出了以太坊2.0中最常用的术语，请注意，这并非一个详尽的列表，但给出了关键的细节，以期解决读者可能存在疑问的地方。

如果发现任何不符之处，或出于任何原因想与我们联系，可以通过 Twitter (@AlethioEthstats) 或我们新创建的 Discord channel (https://discordapp.com/invite/e8dxhn) 联系我们。

 &lt;br/&gt;

### **信标链**

- 参与者一链式协调
- 权益证明（PoS）链
- 包括信标区块
- 共识层
- 管理验证者
- 实施奖惩机制
- 通过交叉链接充当分片的锚点

  &lt;br/&gt;

### **分片链**

- 共有1024条分片链
- 半独立链
- 包括分片区块
- 分片区块的状态定期通过交联被记录在信标链上
- 一旦信标链上的区块被最终确认，处于交联的相应分片区块也被认为最终确认
- 每个分片链都设有一个验证者委员会证明区块有效性

  &lt;br/&gt;

### **交叉链接 Crosslinks**

- 分片状态的总结
- 只引用信标链上的分片

  &lt;br/&gt;

### **时隙 Slot**

- 区块提议者创建一个区块以供验证的时间段
- 时隙中可能没有区块
- 时隙中填充了已证明的区块

  &lt;br/&gt;

### **时段 Epoch**

- 由若干时隙组成（目前为64个时隙），之后验证者委员会进行重组

  &lt;br/&gt;

### **验证者 Validators**

- 在验证者保证金合约质押了32个ETH，运行验证者节点的用户
- 验证者可能存在多个状态：不活跃（尚未作为一个真正的验证者运行）；可能活跃地进行验证工作，也可能处于悬而未决的状态（选择成为一名验证者但仍在队列中）；也可能处于退出状态（不再进行验证，在退出队列中）

   &lt;br/&gt;

### **区块提议者 Block Proposers** 

- 信标链指定的随机验证者，提议进行验证的区块
- 信标链上每个时隙都有一个区块提议者，每个分片的每个时隙都有一个提议者

   &lt;br/&gt;

### **证明 Attestations**

- 投票决定分片区块或信标链的有效性

   &lt;br/&gt;

### **委员会 Committees**

- 信标链随机选定的一组验证者，验证（信标链和分片链上）区块的有效性
- 每个委员会的目标验证者人数至少128个

   &lt;br/&gt;

### **ETH2 or BETH**

- 信标链的基础代币
- 最初将通过验证者奖励和在验证者保证金合约中锁定ETH1获得

   &lt;br/&gt;

### **验证者保证金合约** **Validator Deposit Contract**

- 工作量证明链（在本文语境下，即以太坊主网）上的智能合约
- ETH1资产被锁定在这个智能合约中，事件日志发出，并且被信标链读取，相同数量的ETH2将分配给当前验证者
- 这种机制将来可能会改变
- 在阶段2结束之前，ETH1到ETH2的转换将是单向的，无法换回ETH1，但是一旦验证者之间能够相互转账，就存在可以出售质押资产的可能性

   &lt;br/&gt;

## **以太坊2.0各阶段**

#### **阶段0 —— 信标链**

- 管理验证者以及他们的质押资产
- 组织委员会，选举提议者
- 实行共识规则
- 实施奖励和惩罚/罚没

#### **阶段1 —— 分片**

- 构建分片链和分片区块
- 将每个分片通过交叉链接锚定至信标链
- 实现验证者之间bETH的转账（这应该很快就能实现，因为它与分片工作没有技术上的联系）

#### **阶段2 —— 运行环境**

- 基于eWASM的执行虚拟机
- 每个分片都可以访问所有运行环境
- 能够在执行环境中进行交易
- 能够运行智能合约并与其进行交互
- 跨分片交流

   &lt;br/&gt;

鉴于在这个问题上很难获得权威信息，所以非常感谢Ben Edgington就以上内容给予我正确的指导。同时也要感谢Danny Ryan、Everett Muzzy和Will Villanueva的补充指正。

  &lt;br/&gt;

  &lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[理解以太坊的扩容问题及解决方案]]></title><description><![CDATA[以太坊有哪些扩容解决方案：分片、Plasma、雷电网络、Casper……]]></description><link>https://www.ethereum.cn/the-state-of-scaling-ethereum</link><guid isPermaLink="false">https://www.ethereum.cn/the-state-of-scaling-ethereum</guid><pubDate>Wed, 07 Aug 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://media.consensys.net/the-state-of-scaling-ethereum-b4d095dbafae)



&lt;br/&gt;


![扩容1.jpeg](https://i.ibb.co/GpGhdzn/1-70f7ec5c9a.jpg)

&lt;br/&gt;



以太坊开发者很早就意识到以太坊网络扩容是一个值得探讨和投入的主题。然而，直到2017年底，扩容性问题才开始显现：一个名为 CryptoKitties （加密猫）的去中心化应用程序（dApp）造就了大量流量，导致网络产生延迟。除此之外，gas（以太坊区块链合约中运行每项操作所需的费用）的价格也随着用户竞相进行交易验证而飙升。

虽然这个故事现在已经过度报道和消费，但 CryptoKitties 事件确实揭示了一个现实：目前以太坊网络的容量状态可能还没有为成功的 dApp 带来的巨大流量做好准备。速度缓慢和成本不稳定的原因使人们对以太坊平台和去中心化应用程序敬而远之。DApp 开发者正致力于首个能真正实现广泛采用的应用程序，所以开发者必须持续攻克区块链扩容问题。

 &lt;br/&gt;

## 扩容性解决方案面临“三元悖论”





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/tPdjpLC/2-530c806c9e.jpg&quot; /&gt;&lt;/center&gt;



&lt;center&gt;图源 ConsenSys&lt;/center&gt;

区块链技术中有这样一个理论：**网络可以同时支持以下的两种属性，即安全性、去中心化和扩容性。此即“三元悖论”**，在这个现象越来越为人熟知时，也已经成为了以太坊开发者要面临的挑战，因为开发者想要在提升扩容性以供更广泛的采用和实现时，也能维持区块链的核心特征（去中心化和安全性）。然而目前有些扩容性解决方案会严重影响安全性或者去中心化：

- 从理论上来说，**使用代币**是扩容问题的解决方案之一。这个方案摈弃了所有交易都发生在一条区块链上的想法，采行多个代币共存但运行于独立区块链上的模式。通过将运行压力分布至其他区块链上使得扩容性得以实现。但是，如此一来每条区块链的节点将会减少，那么区块链就更容易受到攻击或产生欺诈行为。因此，使用代币的解决方案兼顾去中心化和扩容性，但对于安全性却是捉襟见肘。
- **扩大区块容量**是另一个解决扩容性问题的理论方案。如果每个区块的容量增加，所有的节点仍然可以运行各种操作，但是同样的时间却可以容纳更多的交易。然而，随着区块容量增大，需要耗费更高的成本来打包交易，这对于许多矿工来说是难以负担的。这就可能导致网络将来被一些超级计算机掌控，因为它们拥有足够验证每个区块的资源。由此看来，增加区块容量能够保证安全性和扩容性，却显著降低了网络的去中心化程度。

确实，在区块链发展之初，我们的关注点主要是安全性和去中心化。因此，要实现扩容性最大的阻碍是每个节点都需要亲自处理每笔交易。即使做到绝对安全和去中心化，系统已经没有为扩容性解决方案预留下多少空间。那么问题来了，**我们要如何对以太坊进行扩容，而不影响安全性和去中心化的前提。**

目前有四种协议在开发中，以期解决扩容性问题，即分片(sharding)、Plasma和雷电网络，至于第四种协议，Casper，在内容上更为广泛，但仍然对以太坊甚至是其他区块链网络提供扩容性参考。

 &lt;br/&gt;

## 分片 Sharding

分片这种扩容方案仍然将所有交易运行在原来的区块链上，因此被称为**“链上”方案**。上文提到以太坊中的每个节点都需要处理每笔交易，而分片就旨在解决在以太坊网络交易的线性问题。

分片可以让节点同时并行操作，也就提高了整体区块链的每秒交易处理量。**在分片方案下，以太坊网络可以被划分成多组节点。****每组节点构成一个分片，每个分片处理组内的所有交易。这就使得每个分片可以同时处理不同的交易。**

在每个分片内部，某些节点扮演了“汇总人”(collators)的角色，定期创建“汇总”(collation)，或者说是关于该分片的信息合集。每个 collation 都会包括以下信息：

1. 该 collation 所属分片信息；

2. 交易完成之前分片状态的信息；

3. 交易完成之后分片状态的信息；

4. 2/3汇总人的数字签名以验证 collation 中的信息。

在网络中，每个分片中的汇总信息都会被整合进一个单独的区块，然后添加到到以太坊区块链中。也就是说，**分片技术使得节点组合处理并验证交易，但只有汇总信息会被添加到区块链上。**假设有10个分片，每个分片处理5笔交易，那么下个区块链中的区块则包含了50笔交易信息，而不再要求节点按顺序处理这五十笔交易。

但是分片技术会伴随两个问题。首先，每个分片都必须保证有足够多的节点才能确保网络的安全性。如果节点过少，那么2/3的汇总人则有可能进行串通，从而产生恶意行为。其次，两个分片之间的交易处理难度很高，如果只存在一个分片，则不会产生类似问题，因为它代表了整个区块链。目前的方法还需要详尽的收据和证明。

 &lt;br/&gt;

## Plasma

Plasma是另一种在 **“链下”** 处理交易的解决方案，也就是说，交易并不是在以太坊主网上进行。**Plasma使得许多区块链（子链）能够从原来的区块链上分离出来（根链）。因此，每条子链都能在基于根链底层安全性的前提下，独自处理和维护交易。**

通过Plasma，子链中的所有计算都由根链助推，但是根链只需要在某条子链中产生争议的时候亲自进行计算。这种方案使得区块链上的所有交易信息可以由子链分担，从而在速度和效率上达到最优。根据子链节点的意愿，他们可以撤回交易信息，并且将交易记录输出至根链。

这个方案有一个独特的优点。每个 Plasma 链都能制定自己的标准和规范，这意味着不同的子链能够支持针对不同需求的交易（例如隐私性），同时所有的交易都处于同样的、安全的环境中。

 &lt;br/&gt;

## 雷电网络

雷电网络也是一种**链下扩容解决方案**，可以使节点之间维护交易记录而不用请求根链验证每笔交易。两个节点之间可以开通一个**“状态通道”(state channel)**，这是用户间的双向通道。交易信息会在两个节点之间传递，并且需要双方签名来保证不可篡改性。

雷电网络对于**经常性和规律性支付**来说十分实用，例如，用户需要每周支付某公司10美金以获取某项服务，或是在超市进行定期采购。在两个节点间记录并验证此类交易，而无需调动整条区块链中的节点，如此一来根链就可以释放出巨大的空间。

无论何时，状态通道中的参与者可以选择关闭交易，但所有交易的最终结果都会记录在根链上，继而被包含在下一个区块中。这意味着，假使连续一年每周支付10美元，区块中的最终交易记录是520美元，而非52笔10美元的交易。

雷电网络解决方案有利有弊。问题在于节点只能与他们的“邻居”交流，也就是说如果节点A和节点B之间开启了一条状态通道，节点B和节点C之前也有一条状态通道，A无法直接向C发送资金。但是以这种通道形式进行交易可以避免资金被盗取或锁定。A虽然无法直接转账给C，但可以将B作为“中间人”，而B由于受到A和C的限制，也无法窃取资金。

而雷电网络最主要的优点，就是可以大幅降低交易的gas费用。因为与根链上的交易相比，发生在节点之间的链下交易所需gas成本更低。

 &lt;br/&gt;

## Casper

Casper 是**一系列共识协议的集合，该协议旨在帮助以太坊从工作量证明 (PoW)转向权益证明 (PoW)**。在工作量证明算法下，为了解决加密难题挖出新区块，矿工必须要耗费一定能源。若是正确解决难题，他们就可以获得奖励，但这个过程需要大量能源成本（并且由于区块难度上升，成本还在持续增加）。PoS挖矿确实有烧钱和能源浪费两大缺陷，目前每年需要花费120亿美元来维持工作量证明机制。

**在权益证明 (PoS) 中，验证者会取代矿工在区块链中对区块进行验证（验证取代挖矿）**。验证者通过在某个区块上质押资产进行验证，避免了计算难题所需的资源成本。质押数额最高的区块会被验证，进而被添加到区块链中。

实质上，验证者通过在合约中锁定资金押注某个区块会被添加到区块链中，直到下一个区块被加入并且被证明是正确的区块，他们就会获得奖励。如果验证者施行不正当行为，那么他们所质押的资金将会被罚没。

从概念上来看，PoW 到 PoS 的转变可以防止区块链被恶意攻击。在 PoW 算法下，一次失败的区块链攻击仅仅使攻击者损失了时间和资源成本。但在 PoS 算法下，失败的攻击则会直接导致经济损失，因为他们质押在错误区块中的资金将会被立即罚没。

Casper 最终的部署将基于该协议的两个迭代：Casper FFG 和 Casper CBC。这两个协议将被部署在以太坊上用于网络测试 PoS，并且在算法过渡完成之前识别潜在问题。

 &lt;br/&gt;

### Casper FFG （Casper the Friendly Finality Gadget）

Casper FFG 使 Casper 的首个迭代版本，其中区块依然经由 PoS 算法挖出。不同的是，每50个区块就会有验证者介入测试 PoS 机制。这个“检查点”会使用 PoS 协议来评估最终确定性。“最终确定性”意指该次操作已经完成且完全不可篡改。在 FFG 中，验证者质押资金以完成前50个区块的最终验证。

*译者注:Casper FFG 由于混合了 PoW 和 PoS 机制，使得主链和分片链的开发工作中存在大量重复的劳动，因此 FFG 于去年6月被弃置。而在理论上 Casper CBC 更具有可实现性、部署速度会更快，因此 CBC 将会被部署于以太坊2.0中。*

 &lt;br/&gt;

### Casper CBC

Casper CBC (Correct-by-Construction) 是 Casper 的第二个迭代。通常来说，要部署一个协议需要先正式确定，然后证明其符合所有给定的特性。而 CBC 中的 PoS 协议仅需要部分确定，为了满足相关属性再做进一步精细调整。因此，不同于从一开始就有精确的定义，该协议将采用循序渐进的方式进行部署。

那么 CBC 如何适应过程中可能出现的问题呢？这就需要通过一个被称为“理想对手”的协议来为 CBC 提出假设、错误和协议未来可能面临的问题。

**Casper 系列协议不仅仅囊括了扩容性议题，其中还包括节省能源和提高安全性的考虑**。然而，随着增加区块所需能源损耗的降低，要实现网络扩容也将更具有挑战性。尽管 Casper 并不是专门为实现扩容设计的，但仍然会为网络的流量承载能力作出积极贡献。

*译者注：进一步了解 Casper CBC，可继续阅读本站文章[《Casper CBC：什么是共识和确定性？》](https://ethereum.cn/archives/52)、[《Casper CBC 协议安全性证明》](https://ethereum.cn/archives/407)。*

&lt;br/&gt;

## 结语

值得注意的是，**以上这四个方案互不相斥，它们将被全部应用到以太坊2.0的更新中，或多或少地解决以太坊的扩容问题**。扩容性问题是近几年来以太坊开发者的关注焦点。随着越来越多的 dApp 开发和上线，更完善的扩容性解决方案也会持续出现在我们的视野之中，帮助未来的以太坊将潜力发挥到极致。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊2.0的最新进展]]></title><description><![CDATA[阶段0的代码已经冻结、客户端正在进行互操测试、阶段2的相关研究如火如荼……这对以太坊的未来到底意味着什么？]]></description><link>https://www.ethereum.cn/ethereum-2-0s-latest-strides-forward</link><guid isPermaLink="false">https://www.ethereum.cn/ethereum-2-0s-latest-strides-forward</guid><pubDate>Tue, 30 Jul 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Ben](https://media.consensys.net/ethereum-2-0s-latest-strides-forward-13f63652e57d) Edgington



&lt;br/&gt;

# 欢迎来到Bazaar（市集）

我最近重读了 Eric Raymond 在1997年发表的有关开源开发的经典著作“The Cathedral and the Bazaar”。当有一群数量可观的开发者参与软件开发时，会形成一种非常积极的局面。他将其称之为开源软件开发的**“市集”模式**。这种模式看似喧嚷、混乱，但其实激发了开发者的活力，使其更加高产，而且最重要的是，会取得更好的成效。他将“市集”模式与传统的“教堂”模式进行了对比，在传统模式中，开发都是由少数且封闭的个人合作形式进行的。二十年后，“市集”模式将带来的改变是不可置否的。目前应用于世界上绝大多数计算机设备的 Linux 操作系统只是“市集”开发模式的其中一个例子。

我发现这是一个有趣的角度，透过它我们可以窥见以太坊2.0区块链的发展。从以太坊2.0项目开始到目前已经经历了一年多，正是反思的好时机。

以太坊2.0项目可以说完全采用了这种开放式、“市集”式的开发模式。然而，我们大大拓展了 Raymond 的愿景：**在以太坊2.0 中，我们所做的不仅仅是构建软件，我们还在以这种完全开放的方式设计整个协议。**我不确定之前是否有过这样的先例。

这不是指无序状态。与 Raymond 的概念一致，这个项目主要由以太坊基金会的一个小团队领导，负责设定路线并管理主存储库。但是一切工作都在**透明公开**的前提下进行，并囊括尽可能多的参与者。举些例子：目前有62人为规范贡献了代码，还有更多的人参与了客户端执行进程、ethresear.ch 上的研发讨论、还有每两周一次的开发者电话会议（最近一次会以中超过50个人参与）。

是的，尽管过程中有时候显得混乱、无组织、效率低下，因而出现了很多新设计、修缮和重写的情况。然而，在这市集般的喧哗中，涌现出了一些奇妙非凡的事物，这也是非开放的开发者社区难以望其项背的地方。

我一直以来主张（也将长期主张）的看法是，**这种开发模式是以太坊的杀手锏。**“激进”的开放性使社区获得了强有力的参与和支持。对于我们这种依赖社区驱动“网络效应”的技术，做到这一点至关重要。仅仅是社区大规模的参与就使得以太坊与众不同。

以下是我经常思考的关于这种开发模式的一个例子，Vitalik 最近发推说道：社区最好的一点就是当某个问题被提出，就会有人自告奋勇站出来解决。2017年底，Justin Drake 出现了，在以太坊2.0计划休眠了一段时间以后重新激活了相关研究工作。在2018年中，当以太坊需要更好的协调和规划时，Danny Ryan 站了出来。2019年初，从未有所耳闻的 Diederik Loerakker 成为了以太坊2.0客户端测试套件的关键开发者。我们的下一个难关是攻克点对点网络，具有专业知识的成员已经开始逐渐参与其中。例子不胜枚举，但我想说的重点已经清晰明了：大家喜欢“市集”。





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VwM6xfb/2-02-46b870a78a.jpg&quot; /&gt;&lt;/center&gt;




&lt;center&gt;“市集”有发展路线图吗？图源 Microsoft&lt;/center&gt;

我有时会被问到一个有趣的问题，通常是对以太坊感兴趣的企业问的：路线图在哪里？恰当地说，虽然参与者之间对于以太坊的发展方向以及发展方式有许多共识，但其实并没有公开发布的、详细的、承诺性的、“官方认可”的路线图。“市集”模式下不存在“确切”的路线图。Linux Weekly News 的一篇经典文章也遭遇了同样的问题，他们的结论是：“试图在此进程中制定路线图不太可能起到促进作用。”

话说回来，对于以太坊2.0系统计划，我们确实分了三个独立步骤，每一阶段在前一阶段的基础上继续进行。阶段0主要内容是信标链，它将实现了权益证明（PoS）协议，作为工作量证明（PoS）的替代方案来维护区块链网络。阶段1以分片链的形式提供巨大的可扩展性，能够将网络的交易处理能力提高至每秒一千多笔。阶段2是提供用户帐户和智能合约的执行层，并为去中心化未来所需的全部分布式应用程序提供支持。

 &lt;br/&gt;

# 信标链[阶段0]

经过一年的集中开发，**以太网2.0信标链规范于6月30日冻结**，即研究和设计已经完成，我们完全进入交付阶段。信标链是以太坊2.0系统的基础。它负责管理权益证明协议并协调所有独立并行的分片，这是开发中最为复杂的部分。

去年7月，信标链的想法在柏林诞生，并定为以太坊2.0的未来方向。这个概念虽然是从无到有，但绝不是无中生有，其中的想法可以追溯到以太坊的最早期。该规范通过深入的洞察、讨论、检查和测试过程才得以形成。

同时，目前已经有九个以上来自不同背景和地区的团队在不同的编程语言中实现了该规范，并且添加了使其完全运行的工程基础设施（虽然规范本身就是引擎，但我们要使其具有完备的功能，还有很多其他事情需要做，例如添加网络、数据库、工具等）。一些团队已经发布了概念证明公开测试网，让人们可以尝试成为以太坊2.0中的验证者，例如 Prysmatic Labs。

有时，规范变化得很快，我们一直在保持跟进。最近信标链规范冻结是一个重要的里程碑，并且将带来两个良好效应。

首先，信标链规范现在可以进行**形式验证**。这涉及到将其翻译成一种叫做作“K”的特殊用途语言，才能进行严谨的分析和正确性证明。运行期验证将执行这项工作。目前已经完成了对验证者质押合约的分析，该合约将部署在以太坊1.0上，以便验证者转移到以太坊2.0。

规范冻结的第二个效应是**它使得所有客户端都能处于同步状态，并启动下一个关键阶段：互操作性。**以太坊2.0信标链客户端类似于当前的以太坊节点，例如 Geth，Parity 和 Pantheon。这些运行以太坊网络的节点彼此沟通，无时无刻达成共识是不可或缺的。可能一个小错误引起的分歧都会导致网络分裂。





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/gV6kLkz/2-03-0106126b6d.jpg&quot; /&gt;&lt;/center&gt;








&lt;center&gt;布鲁克林 “互操作性”研讨会&lt;/center&gt;

**要实现互操性本身就是一个过程。**首先，所有客户端都需要通过通用参考测试。该规范的一个非常有趣的特性是**它已经实现了可执行性，即可以运行规范本身以直接生成客户端测试。**相比于当前使用 Python 编写的规范，有些人可能更喜欢叙述风格，但尽管如此，当前的规范确实是一个非常有用的工具。另一种类型的测试是**“模糊测试”**,过去它成功地针对以太坊1.0客户端的问题进行了追踪，即反复向客户端输入随机无效数据来找出导致客户端非正常运行的个例。目前正在为信标链开发这类模糊测试工具。

一旦每个以太坊2.0客户端团队都能保证客户端可以正常运行，接下来就要使这些客户端能够在网络中实现通信。问题在于，当分布式系统出现问题，是很难排查出来的。因此，第一步就是让各客户端执行一个简化协议（Hobbit），从而使得在执行完整网络堆栈之前更容易进行漏洞排查和分析。为此，计划的内容是今年9月份让所有的客户端团队汇聚在加拿大安大略省的某个地方：在确保所有客户端执行可以正确进行互操作之前，任何人都不能离开。

成功实现互操作性将为今年即将推出的一个共同的、长期的公共测试网铺路搭桥。到那时，任何想要加入该测试网中的用户都能自主选择安装一个以太坊2.0客户端，质押测试 ETH 代币，并参与测试网中的验证活动，或者寻找测试网漏洞。发现bug和缺陷的人都有机会获得奖励。

最后，如果进展顺利，信标链将于2020年初启动。有人建议启动日期定于2020年1月3日，因为这天是比特币创世区块诞生的周年纪念日。但对于信标链来说要完全产品化还为时尚早，我认为最有可能在2020年第一季度末发布。

信标链启动前所需的最后一步是将验证者质押合约部署到当前的以太坊1.0区块链上。质押合约规定，任何想要成为验证者的用户都需要抵押 32 ETH。**计划将在今年10月初的第五次开发者会议（DevCon V）期间进行部署。**一旦该质押合约中的 ETH 质押数量达到了约 200 万枚，即代表**验证者数量足够多时**（65,000 名左右），我们就可以有把握地正式启动信标链，使其安全性达到能够抵御攻击的程度。

 &lt;br/&gt;

# 分片链 [阶段1]

虽然以太坊2.0的交付计划是分阶段进行的，但每个阶段其实是并列进行的。

阶段1主要囊括了分片数据链的设计和交付。在此阶段，我们将在系统中增加**1024条独立的区块链**（分片链），每条链都与信标链相连。阶段1的协议比信标链阶段要简单得多，几近完成的该协议总代码行数大约只有信标链的一半。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/3YnKBCY/2-04-52e088b55a.jpg&quot; /&gt;&lt;/center&gt;







&lt;center&gt;以太坊2.0将是一个具有空前扩展性的点对点网络&lt;/center&gt;

&lt;center&gt;图源 Daniel Aleksandersen&lt;/center&gt;

阶段1的主要挑战是：点对点网络的设计要求当验证者被分布到1024条分片链上之后，能够快速地和正确的验证者互相进行准确的信息传递。相关工作正在与客户端互操作性同时进行。

 &lt;br/&gt;

# 执行层 [阶段2]

最近最令人兴奋的进展是以太坊2.0的最后一个交付阶段，即执行层阶段，有了明确的前进方向。作为具有写作经验的人，我清楚地知道当面对一张白纸时，其中的挑战多么巨大。同理，当设计空间巨大且不受约束时，“开头难”这个问题十分棘手。因此，以太坊2.0的执行层设计就经历了这样一段困难时期。

直至几周前，还没有人十分有把握从何处下手：我们将能够在以太坊2.0上运行什么样的程序？用户账户将会是什么样？各分片将如何相互通信？想法天花乱坠，可能性也无穷无尽，但如何一步一步实现却令人费解。

打破这一僵局的是 Casey Detrio，他在多伦多举行的扩展以太坊大会（Scaling Ethereum conference）上做了一次精短的历史总结，除此之外他还公布了一个提议方案，随后该提案的有效性被证明。Casey 的建议被 Vitalik 采纳并得到进一步拓展，其他开发者也热情地参与进来对其进行试验以及定义。

当前的以太坊区块链上只有一个执行环境，即以太坊虚拟机 (EVM)。EVM 之前被写入了以太坊协议中，因此每个智能合约只能经由 EVM 执行，合约的执行以某种方式收取一定费用(即gas)，并且只有特定的加密签名和重放攻击保护方案（replay-protection）得到许可。EVM 的功能非常强大，但也因此受到了一些限制：即使用户只想发送少量 ERC20 代币，也需要在账户中充值 ETH；完全匿名交易难以实现；使用一些创新的加密技术也需要付出成本。

简言之，以太坊2.0的提案就是要将这些问题剥离出来。以太坊2.0区块链不再强制使用这些机制，相反，它将**为用户提供许多不同的执行环境**，每个环境都将根据其使用目的以制定适宜的规则，并在此基础上运行。

例如，除了针对智能合约的、在eWASM中编译的通用执行环境之外，可能还会运行一些其他的执行环境：以期优化匿名代币交易、支持新智能合约语言 (Haskell 之类的语言) 、处理高容量的 Plasma 链、加入受许可和隐私性功能以服务企业级用户。甚至还有可能出现一个能够运行 Libra 项目中 Move 虚拟机的执行环境。

以太坊2.0仍然处于快速开发阶段，更多的细枝末节我将在后续的文章中讨论到。在此我还将提到“市集”开发模式对阶段2产生的一个重要影响。一直以来，我们希望**将整条现行的以太坊1.0链作为一条分片链安置在以太坊2.0中。**这不仅能保障目前已存在的以太坊应用程序的未来，并且并不妨碍我们最终移除工作量证明（PoW）机制。对此我们已经有了一个切实可行的方案，并且我们正在针对此方案进行详细设计。“Eth1+Eth2”没有必要在以太坊2.0初期就急于实现，在后期仍然可以进行部署，所以目前我们还有时间强化这个方案。

 &lt;br/&gt;

# 结语







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/QnG5PY1/2-05-9814c797c6.jpg&quot; /&gt;&lt;/center&gt;






&lt;center&gt;忙碌的市集 图源 Diego Delso&lt;/center&gt;

就目前的发展速度而言，我对以太坊2.0的未来比以往任何时候都更加看好。我不喜欢夸夸其谈，但我不禁产生疑问：按照目前的发展，作为以太坊2.0最后交付阶段的阶段2似乎将在2020年就投入使用，这比原先设想中的时间要早（仅作为个人假设）。

从现实到实现，我们还有很多工作要做，但绝不会像无头苍蝇一样乱撞，因为我们的前路无比清晰，开发者和社区成员提供了强有力的支持，并且还有源源不断的新生力量汇入我们。以太坊“市集”的能量惊人，这是一个令人振奋的舞台，我相信，有这么多出类拔萃、斗志昂扬的参与者，最终的成果一定非同凡响！

以太坊“市集”对所有人敞开大门，还不赶紧到 github 上**[加入我们](https://github.com/PegaSysEng/artemis)**吗？

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[2019：五岁的以太坊如今怎样了？]]></title><description><![CDATA[在以太坊ICO五周年之际，让我们一同俯瞰2019年以太坊网络和加密社区的生态图景。]]></description><link>https://www.ethereum.cn/the-state-of-the-ethereum-network-2019</link><guid isPermaLink="false">https://www.ethereum.cn/the-state-of-the-ethereum-network-2019</guid><pubDate>Thu, 25 Jul 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://media.consensys.net/the-state-of-the-ethereum-network-2019-8a21d57c1895)

&lt;br/&gt;

五年前的7月22日，以太坊众筹上线，也正是从此点燃了许多开发者、创业者、企业家多年以来的热情。五年后的今天，区块链生态系统已然趋于多元化、全球化，并且在去中心化的道路上笃定前行，也有越来越多的人认识了区块链，理解了它的重要性和积极意义。

纵观这一年，在经历了加密市场的大幅跌落后，区块链生态系统的2018年在舔舐伤口中结束了。备受关注的“熊市”话题已经逐渐被这样的共识替代：尽管市场价格仍然不稳定，但整个行业已经渡过凛冬，并逐渐回暖，这恰恰揭示了一个强劲有力和稳中求进的生态系统。尤其是对以太坊而言，2019年更是刮起了活跃度、关注度和自我提升之风。

今年到目前为止才刚刚过半，但以太坊的猛进之势不可阻挡。

 &lt;br/&gt;

# 网络活动

自诞生以来，以太坊主网已经处理了超过5亿笔交易（截至7月17日突破5亿大关）。仅在2019年，就处理了超过1.3亿笔交易，其网络利用率相当稳定，平均利用率将近90％。以太坊中总共存在超过7千万个唯一地址，自今年年初以来新创造的地址为1600万个（约占16％）。




![五周年2.png](https://i.ibb.co/TBgGXS1/2-5de07bd13f.png)




6月1日当天，网络中有616,000个活跃地址进行交易，为2019年最高。目前以太币（ETH）的总供应量为1.06亿，平均到每个地址为2.28 ETH。若是不包括前500个以太坊持有地址（占总供应量的37％），每个地址的平均ETH持有量为1.43 ETH。

今年2月份，以太坊网络进行了君士坦丁堡升级，计划通过该次硬分叉升级网络并向多段式的 Serenity 阶段靠近，其中包括了向权益证明(PoS)共识机制过渡。君士坦丁堡硬分叉的更新总共包含了5项EIPs（以太坊改进建议）。其中值得关注的是，EIP 1234 将区块奖励从3 ETH降低为2 ETH，这一转变被称为“The Thirdening”（第三次区块奖励减半）。

 &lt;br/&gt;

# 企业应用







![五周年3.png](https://i.ibb.co/QpDmfCf/3-86fb92ad94.png)


2019年到目前为止，在企业活动中被提及最多的就是“隐私”问题。

Facebook 发布的 Libra 项目充满了对自身意识形态、监管和技术的考虑，同时也唱起了对用户隐私的颂歌。ConsenSys 支持的 PegaSys 项目在4月份发布的 Pantheon 1.1 中引入了名为 Orion 的 Trusted Compute（可信计算）和隐私组件，专门用于解决企业对以太坊隐私性的担忧。5月，安永发布了一套标准和协议以提升在以太坊公链上进行私人交易的隐私性。这个名为“Nightfall”的项目在 Github 上开源发布，力求任何基于 ERC-20 和 ERC-721 标准的代币交易在“完全私密”的环境下进行。

咨询机构和研究公司也对企业在区块链领域的快速探索加以肯定。Gartner 在6月的一份报告中估计，到2025年区块链将为企业增加1760亿美元的价值，到2030年将增加至3.1万亿美元。据 Gartner 估计，其中有1万亿美元将来自企业间以及企业内部的改进和机遇。










![五周年4.png](https://i.ibb.co/0FQtWLS/4-7a45d4a493.png)





德勤在2018年底的报告中总结了对1000名具有区块链思维的企业高管的采访，提问有关他们2019年及以后将会做什么打算。95％的受访者表示他们的公司计划在2019年投资区块链技术。近40％的公司计划投资超过500万美元。尽管有39％的人认为该技术目前被“过于夸大”，但84％的受访者认为区块链最终将实现可拓展性，并应用于主流人群。汽车、石油、天然气以及生命科学领域的高管最看好区块链，其次是金融服务。













![五周年5.png](https://i.ibb.co/tcNJSx7/5-c49445bde8.png)



总体而言，大趋势是高管们虽然态度谨慎，但还是有意探索去中心化技术提供的机遇。例如，投资银行业巨头高盛（Goldman Sachs）悄悄发布职位列表，旨在为内部孵化器项目招揽数字资产项目经理。

 &lt;br/&gt;

# 政府升温

2019年，各国政府已从投资探索型区块链转向启动自己的试点项目，旨在实现政府治理的现代化。卢森堡政府通过 Mind＆Market、Horizon 2020、LHofT、Letzblock和Luxinnovation 等计划为区块链创业公司提供支持。德国和瑞士政府都建立了区块链项目资助项目，分别是 German Blockchain Bundesverband 和Blockchain Federation（区块链工会）。










![五周年6.png](https://i.ibb.co/wCjHkSM/6-6952dda1bb.png)


目前，欧洲正在引领这一区块链浪潮：44个欧洲国家中有29个国家签署达成了了欧洲区块链合作伙伴关系，并将合作建立欧洲区块链服务基础设施（ESBI）。除了欧洲，世界范围内的国家也因地制宜，纷纷实施区块链策略以探索符合自身需求的用例。格鲁吉亚正在利用区块链技术以简化土地所有权登记框架，中国常州市与阿里巴巴正在合作试验区块链能否适用于保障市民医疗健康数据，澳大利亚政府也正将区块链技术应用在重要出口产品（糖）管理中。

数十家地方和中央银行正在积极开展基于区块链的项目，以期高效解决几个长期存在的问题。针对过高的汇款费用，UnionBank 发布了 i2i 项目。巴西中央银行目前正在研究将分布式账本用于跨行应急支付和弹性系统（SALT项目）以及分布式信息交换平台（PIER项目）。在泰国银行、南非储备银行以及新加坡金融管理局创建的项目中，通过使用央行发行的数字货币（CBDC）以寻求替代目前系统的可能。2018年底，世界银行推出了首个基于区块链的债券“bond-i”，并由此筹集了1.1亿澳元（折合人民币约5.28亿），这标志着投资者首次支持运用区块链技术全面管理债券行为。

美国正在采取广泛措施来制定相关法规并执行区块链友好的法例。例如，怀俄明州州长于2019年2月签署了 HB0070 法例，授权国务卿为企业实体和商业申请制定和实施基于区块链的备案系统。2019年3月，南达科他州州长签署了 HB1196，对用于特定目的的区块链技术给出明确定义。阿肯色州也通过了一项法案（即HB 1944），该法案规定，智能合约中有关交易的条例不应被剥夺法律效力、有效性或可执行性。

通常来说，政府部门的创新速度相较缓慢。但预计未来会有更多政府公开宣布区块链项目。

 &lt;br/&gt;

# 风险投资正在成倍增长

尽管加密货币价格不稳定，这也并未阻止风投资金流向区块链项目，并且开发团队目前也正在构建更激动人心的去中心化应用。今年4月，路透社报道称，风投公司在区块链初创公司投资了8.5亿美元，该生态系统有望超过2018年24亿美元的记录。2018年，创纪录的投资额共来自117笔交易，而4月份的8.5亿美元仅仅来自13笔交易，这说明每笔投资额在变大，并且投资区块链技术对于风投机构来说舒适度也更高了。

该报告还指出，投资资金不会直接流向加密货币或代币，这表明风险投资者对真正进入交易市场仍然持观望态度。在未来，这种风投可能仍然存在于个体交易者和高风险私募基金的领域，不会贸然进入交易市场，但是风投资金将用于促进生态系统发展的项目和团队。也就是说，就去中心化技术潜力而言，路透社提到的“通证化”是风投机构的首要兴趣点所在。










![五周年7.png](https://i.ibb.co/7bVwmbD/7-60649bde39.png)


&lt;center&gt;Top风投机构在区块链中的投资。&lt;/center&gt;

&lt;br/&gt;

# 开发者社区和活动

Electric Capital 于今年3月发布了一份开发报告，描述了开发者在加密生态系统中的建设情况。迄今为止，以太坊拥有最多核心协议开发者，比特币和 Cardano 分列第二和第三。







![五周年8.png](https://i.ibb.co/KWh88Dc/8-28b1165327.png)










&lt;center&gt;图源 Electric Capital&lt;/center&gt;

除了核心协议开发之外，以太坊每月有216名活跃的开发人员负责总代码。以太坊的开发者增长速度强健稳定，2019年1月平均有240名活跃开发者，比2018年的190人同期增长23％。








![五周年9.png](https://i.ibb.co/mJvfc79/9-45cef76616.png)








以太坊在总代码数量中显得非常突出，提交数高于比特币8倍之多，超出XRP 20倍。









![五周年10.png](https://i.ibb.co/zfmhppH/10-f545f90e68.png)











Truffle Suite 为开发者提供了一系列强有力的dApps和智能合约开发工具，从构思阶段到上线皆适用。自2015年5月发布以来，作为开发环境和测试框架的 Truffle 下载量已超过200万。Truffle的第二个产品——Ganache，是用于在以太坊网络中部署合约、开发应用程序以及运行测试的私链，自2017年10月发布以来总下载量逾122万次，仅2019年6月下载量为7万9千次。

 &lt;br/&gt;

# Dapp之战

从区块链发展初期开始，社区就一直在进行“杀手级应用”的角逐。“杀手级应用”一旦产生，将会在全球大规模应用，并且代表了最具有价值的某种协议。在大多数情况下，这种心态已经平息。很少有协议计划在全球范围内扩展，因此相应的 Dapps 也不会延伸为全球应用。Dapp 行业发展虽处于早期阶段，但也正是因此才炙手可热、百花齐放。所有的 Dapp 项目都在埋头研究其用例，以满足最大化需求，在提供最佳用户体验的同时还要保障安全性。总的来看，金融类 dapps（包含交易所、DeFi和市场）是 dapp 开发者过去一年的焦点所在。

在 State of the Dapps 排名前50的dapps中（其排名算法基于“多种因素，包括活跃用户、吞吐量、开发活跃程度、配置、点击率以及用户推荐”），其中有29个 dapps 是基于以太坊建立的。当我们根据特定用例进行研究时，以太坊的优势一目了然：

- 排名前50的**金融类** dapps 中，有42个建立在以太坊上，包括MakerDAO和OmiseGO。
- 排名前50的**交易所** dapps 中，以太坊占据44席，包括 Augur 和 Uniswap。
- 排名前50的**安全类** dapps 中，其中有42个是基于以太坊的，包括 Quantstamp。
- 排名前50的**开发类** dapps 中，以太坊占43个，包括 Kauri、Golem和CryptoZombies。

也许最能说明问题的是，在所有类别和所有平台中，**开发者活跃度排名前50的 dapps 中，其中44个（88％）是基于以太坊的**，只需要一个数据就能证明以太坊仍然拥有最强大的开发者社区。





![五周年11.png](https://i.ibb.co/W55HmrH/11-8f7b9ed8eb.png)

![五周年12.png](https://i.ibb.co/mzB3nd5/12-6d5f18fdca.png)




























##  &lt;br/&gt;

# 展望未来

对以太坊来说，2019年余下的时间也不会放缓脚步。最近几周，加密市场已经摆脱了停滞状态，并重振了投资者的信心。对于协议本身来说，2019年的蓄力将在伊斯坦布尔硬分叉中爆发（预计2019年10月）。伊斯坦布尔硬分叉包含了以太坊区块链的11项改进提议，并且是 Serenity 第0阶段正式发布之前的最后一次硬分叉。核心开发人员和越来越广阔的生态系统都会将目光放在权益证明（PoS）的实施和可扩展性的承诺上，计划于2020年初启动的 Serenity 无疑将成为2019年下半年以太坊和区块链社区讨论的热点。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[以太坊能从Libra中学到什么？]]></title><description><![CDATA[以Libra为观察对象，从用户内容设计角度谈谈以太坊如何获取更多潜在用户。]]></description><link>https://www.ethereum.cn/what-ethereum-should-learn-from-libra</link><guid isPermaLink="false">https://www.ethereum.cn/what-ethereum-should-learn-from-libra</guid><pubDate>Tue, 16 Jul 2019 00:00:00 GMT</pubDate><content:encoded>来源| [ConsenSys](https://media.consensys.net/what-ethereum-should-learn-from-libra-a-content-perspective-63428ab5ccef)



&lt;br/&gt;

&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/MfD7ppW/libra1-4c3755f296.png&quot; /&gt;&lt;/center&gt;


&lt;br/&gt;



2019年6月18日，Facebook 旗下全球加密货币项目 Libra 官方网站正式上线并发布白皮书。和许多以太坊生态系统中的工作者一样，我虽对这个消息感到怏怏不乐，但我想 Libra 确实是一个值得观察的对象。知己知彼，方能百战不殆。

当我浏览 libra.org 时，有些事着实让我感到意外。当然，Libra 并不具备完美的内容设计，但它的亮点正是大多数区块链公司习常忽略的事：它使用了普通人也能理解的语言。Libra 谈论的中心是“人”，而不是“计算机协议”，并提到了它会对我们切身的生活会产生什么影响。而我认为这是我们能做到也应该做到的，对此我们应该在去中心化社区中加以效仿。这可能是我们实现以太坊大规模应用的唯一机会。

那么我们应该从中学到什么呢？

 &lt;br/&gt;

## 阳春白雪？要接地气！

在浏览整个 Libra 网站之后，你不一定知道它是个区块链产品（读到白皮书之前），这也是我最欣赏的一点。如果仅是简单浏览网站，人们可能会认为 Libra 是一种能在全球任何地区进行转账交易的新方式。或者能像“发送短信”一样容易。

这是一个切实的益处，并且告诉用户他们能用 Libra 做些什么以及对用户来说 Libra 有什么价值。

也许只有这个概念并不具有说服力，用户还需要深入了解。关于 Libra 将如何兑现承诺，这个网站并不能作出充分说明（因此需要进一步阅读 Libra 的白皮书），它只是宣称全球交易应该“像发送短信一样简单”。然而，这就为用户提供了一种想象空间，一种能够使生活更加便捷的愿景。

 &lt;br/&gt;

## 技术原理？产品价值！

我们中的一些人可能会产生这种想法，“这是否会破坏产品技术的概念？”那么回过头来想想，我们每天在相关网站上谈论 TCP / IP或HMTL 等网络技术协议的频率又有多高？

不可置否的是，区块链技术的价值尚不为大多数人所理解，因此我们需要更多地谈论其对于我们现实生活的价值。

为了不产生理解鸿沟，Facebook 并没有选择对自身进行如下描述：

&gt; “Facebook 是一个使用 PHP 语言的社交网络，采用HipHop编译器，同时还是将PHP转换为C ++的源代码转换器”。

这个例子确实显得较为极端，但它说明了产品定义在充满了技术术语的情况下有多么晦涩难懂。

我们另举一个例子，其实大多数人并不知道云存储技术的工作原理，而只是了解它带来的益处。如果云技术意味着用户可以在任何地方通过任何设备访问自己存储的文件，那么区块链技术意味着用户可以安全迅速地给世界范围内任何地区转账、追踪货物来源、在不共享个人数据的情况下为用户提供凭据，或者是拥有独一无二的收藏品。

我并不是说我们需要将区块链的所有价值都一股脑塞给用户。若是作为 dApp 开发者，我们需要量身定做产品故事，但内容不应太晦涩，因为用户使用 dApp 的原因，可能和我们开始使用区块链技术的原因相去无几。

仅仅是逢人提及“区块链”并不足以让大多数人从忙碌的生活中抽身去尝试你的产品。这可能在2017年还适用，毕竟当时的投资者对区块链公司都趋之若鹜。但现在是2019年，我们的用户群体不是想要利用最新技术获取收益的风投机构，他们是那些想要使用我们的产品和服务来改善生活的普通人，而我们正好能提供一种成本更低、行事更便捷的生活方式。

 &lt;br/&gt;

## 眼中只有开发者？还要有普通受众！

我们知道其实在以太坊堆栈中有许多项目内容仍然只需要定位开发者群体。例如，像 Infura 这样的产品就不需要关注本条内容设计建议。然而，以太坊生态中还有很多产品的内容设计应该照顾到更广泛的受众。有野心的产品是应该努力将每个用户（甚至是非加密货币持有者）从他们的中心化竞争对手那里争取过来。这类产品例如 DeFi（Decentralized Finance）、收藏品、钱包、游戏领域等等。

Libra 同时面向开发人员和非开发人员。在获得用户权益的同时也能参与讨论可扩容性、编程等更多技术内容。这就与 ethereum.org 形成了鲜明对比。








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/2hwmHMK/libra2-55c672ee12.png&quot; /&gt;&lt;/center&gt;




&lt;center&gt;图源 ethereum.org&lt;/center&gt;

我们可以看到 ethereum.org 的欢迎界面直接假设用户角色是开发人员：

&gt; “以太坊是去中心化应用程序的全球性开源平台。在以太坊上，您可以编写用于控制数字化价值的代码，程序完全按照编程运行，并且可以在全球进行访问。”

如果点击进来的用户是非技术人员，这个介绍就没有了任何意义。如果用户不是开发人员怎么办？对于以太坊可以做些什么，或者以太坊具有什么新意义，用户并没有真正的概念。

作为以太坊的官网，也可能是一个好奇的读者通过搜索引擎进入以太坊世界的第一站，也许我们应该让以太坊的介绍更通俗易懂一些？我清楚 Ethereum.org 的主要目的可能就是为了吸引更多的开发者。但是开发者进行搭建的时候也需要结合用户的需求，因此我们需要对产品团队有帮助的以太坊用户。我们需要提及能够通过该技术实现的目标，以激发潜在用户的兴奋点，从而反过来为扩大社区和构建更多产品提供动能。

 &lt;br/&gt;

## 结语

Libra 对自己的描述是“重新定义货币”，“改善生活”和“一个简单的全球货币和金融基础设施”。也许不够清楚详尽，但它足以让用户驻足并且了解更多有关信息。即使是使用最广的以太坊 dApp 网站，这些词组也是赫然在目：你的“节点”、“协议”、“智能合约”、“密钥”、“哈希”、“分布式网络”、“签署区块链交易”等等。

正是这些术语将用户拒之门外，因为要尝试理解需要一定高度的技术门槛。这使得看起来“高深莫测”的以太坊产品流失了太多我们想要留住的潜在用户。

试想一下如果不是在许多术语泛滥的 DeFi dApp 上碰壁，能成为 DeFi 用户的交易人和投资者会比现在多多少。他们并不在意自己的加密货币被“锁定在智能合约中”，他们在乎的是随着时间的推移它能否升值，以看到期望的回报。在这一点上，dharma.io 和他们“奇妙的互联网货币”做得十分人性化，但这样的公司屈指可数。

就目前而言，大多数以太坊产品只对具有技术背景知识的小部分用户友好，例如熟悉基本概念、掌握区块链和Web3技术的用户，而这种做法正在将没有一定技术知识水平的用户排除在外。要开拓这类用户群并提升产品，首先要从可读性强的内容、通俗的解释以及友好的沟通方式开始。这就是优秀内容设计的目标，我希望在生态系统发展的下一个阶段能够看到更多这类内容。

如果我们开始将内容瞄准更广泛、技术门槛更低的受众并抽离出区块链的复杂性，那么蓬勃发展和广泛应用的机遇也将随之而来。

我这样说并非出于对 Libra 的认可。只是这确实为去中心化社区提供了关于如何推广产品的一些经验教训。

因此，让我们降低技术术语的使用度，把非技术受众群放在心中，将我们的价值故事娓娓道来，只有这样才能见证我们的产品如何与用户基础强大、背景强势的 Libra 相抗衡。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[区块链&加密货币：全球搜索调查报告]]></title><description><![CDATA[本文将透过数据为您呈现比特币vs.以太坊vs.区块链vs.加密货币的全球认知现状以及未来发展趋势。]]></description><link>https://www.ethereum.cn/bitcoin-vs-ethereum-vs-blockchain-vs-crypto-a-global-search-study</link><guid isPermaLink="false">https://www.ethereum.cn/bitcoin-vs-ethereum-vs-blockchain-vs-crypto-a-global-search-study</guid><pubDate>Sat, 25 May 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [ConsenSys](https://media.consensys.net/bitcoin-vs-ethereum-vs-blockchain-vs-crypto-a-global-search-study-4769c2e67145)

&lt;br/&gt;

比特币大行其道？以太坊冉冉升起？区块链技术蔚然成风？

一个地区或国家的搜索数据就如同它的潜意识一般。在轰炸式的炒作和头条新闻之下，搜索数据揭示了人们真正感兴趣、尝试了解的事物，并且暗示了事物背后的经济、政治和商业格局。在区块链和数字资产语境下，全球搜索的分析数据为我们展开了一幅迷人的生态系统图景，同时在世界的万花筒中，这幅生态景象也在不断发生着变化。

近日ConsenSys的SEO团队针对全球用户进行了一次搜索数据研究，通过比对用户对“比特币”、“以太坊”、“区块链”和“加密货币”关键词搜索度，我们发现研究结果呈现了一个喜人的趋势：许多国家或地区对加密货币行业和区块链技术越来越感兴趣。

举个例子：像日本和韩国这样的亚洲国家对“区块链”和“以太坊”的感兴趣程度为全球最高，这恰恰使人口稠密的亚洲地区成为了区块链生态系统的最前沿地带。至于世界上的其他地区，像美国和英国这样的强国仍然表现出比特币大行其道的趋势，然而数据显示，比特币搜索兴趣度最高的国家是巴西。

如果我们进一步观察、分析数据会发现更有趣的事实。在重大政治动荡期间，由于委内瑞拉货币玻利瓦尔持续下跌，其对比特币的搜索兴趣度大幅提高。在最接近中国的实际搜索数据中，我们发现台湾用户对区块链和以太坊的搜索增长之迅猛，甚至超越了比特币。

**有关区块链行业的全球Google搜索统计数据的详细分类，请查看下面的信息图表…**

 







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/wsDKp0n/1-5a85a33e0d.png&quot; /&gt;&lt;/center&gt;







作为全球“区块链”搜索率最高（39%）的国家，日本展现出了十分均衡的兴趣，其中“以太坊”搜索率为30%，“比特币”为29%，而搜索率仅为3%的“加密货币”相对落后。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Mf8B29V/2-6ec578bcaf.png&quot; /&gt;&lt;/center&gt;















俄罗斯则表现出世界范围内最为均衡的搜索趋势之一，其中“比特币”搜索率为37%，“以太坊”为26%，“区块链”为34%，“加密货币”为3%。在所调查的国家或地区中，俄罗斯的“区块链”和“以太坊”搜索率位居第一，这表明了该国人民已经在寻求应用去中心化，而不仅仅是针对加密货币和价值储藏手段的尝试。









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/PtCBsbc/3-b22e46d5da.png&quot; /&gt;&lt;/center&gt;










在均衡性方面，美国则表现出相背的趋势。研究表明美国在区块链相关词条搜索中十分缺乏多样性，“比特币”词条独占鳌头，搜索率占比为70%，紧随其后的“加密货币”仅为13%，而“以太坊”和“区块链”词条搜索率只有10%和7%。数据说明美国人民在了解区块链和加密货币时带有一定的“产品化色彩”，也就是说，作为区块链“产品”的比特币或者以太坊先入为主引入了相关概念之后，区块链技术才逐渐为美国人民所理解。



&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/FnzdTYk/4-fef4d967be.png&quot; /&gt;&lt;/center&gt;















英国与美国十分相似，搜索数据呈现出“一边倒”的趋势。在英国比重失衡的搜索率排行中，“比特币”占比68%，“加密货币”为13%，“以太坊”为11%，“区块链”搜索率最低，仅为8%。













&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/3T0YrBR/5-6ddb9219fe.png&quot; /&gt;&lt;/center&gt;









通过分析台湾地区的数据，我们推测出中国大致的搜索趋势。台湾的搜索数据表现得相对平均，其中“区块链”词条以42%的搜索率占据主要地位，“比特币”和“以太坊”分别为31%，23%。“加密货币”则相差甚远，搜索率仅为4%。









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/c8vTGjp/6-0086c00adf.png&quot; /&gt;&lt;/center&gt;









非洲大陆亟待跨越传统银行架构，也正是因此，比特币在非洲国家中流传甚广。“比特币”词条在尼日利亚的搜索率占比为70%，作为经济实力最强的非洲国家之一，其数据足以说明比特币在非洲国家的地位颇高。其后“区块链”、“加密货币”、“以太坊”的搜索率分别为14%，9%以及7%。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/2qsZzNF/7-94b44ae637.png&quot; /&gt;&lt;/center&gt;
















巴西是世界范围内比特币搜索率最高的国家，对此前文已经提及。这种趋势在整个南美洲都是显而易见的，但其他国家并没有巴西这么具有代表性：其88％的相关搜索术语都是“比特币”，“区块链”占7％，“以太坊”占4％，“加密货币”占比仅为1％。这些数据表明巴西是进行区块链教育的主要市场。











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/VSZFysS/8-2dc49ca463.png&quot; /&gt;&lt;/center&gt;










法国的搜索数据排名显示为：“比特币”73%，“区块链”14%，“以太坊”10%，“加密货币”3%。











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/JzK5qwR/9-896ef6bb1b.png&quot; /&gt;&lt;/center&gt;













印度一直以来被看作具有巨大增长潜力的区块链技术市场，其谷歌搜索数据排名也证明了比特币的主流趋势：占比67%。接下来的“区块链”和“加密货币”占比均为13%，“以太坊”以7%居后。当不计其数的开发者正在探索利用区块链进行基础搭建的方法时，我们不难从区块链相关搜索数据中看出印度也同样在寻求变革。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/x5dWmwp/10-7beab59b76.png&quot; /&gt;&lt;/center&gt;




















澳大利亚的搜索排名显示比特币以69%的绝对优势领先，紧随其后的是“加密货币”16%，“以太坊”9%，“区块链”7%。澳大利亚在智能合约平台领域的巨大增长潜力正在下降，但仍有望在2019年或之后的智能合约平台增长中收获利好。















&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/tp2yghw/11-512339fceb.png&quot; /&gt;&lt;/center&gt;











瑞典一直都有许多的革新理想践行者, 其在搜索排名中仍然显示出强大的比特币主流趋势，这一趋势在整个欧洲大陆都显而易见。”以太坊” 以16% 紧随其后, “区块链” 为 7%, “加密货币” 为6%。









&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/BnkxvfZ/12-d181ae33b4.png&quot; /&gt;&lt;/center&gt;















作为以太坊发祥地的加拿大在搜索数据中昭示了比特币主导性下降的早期特征。”比特币”的搜索率为69%，”加密货币”为11%, “以太坊”和 “区块链”均为10%。北大白（the Great White North）对这些领域的兴趣度呈现出一种均衡、健康的增长模式。





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/yypcG3d/13-4fa29668e6.png&quot; /&gt;&lt;/center&gt;


















与其他“亚洲虎”（Asian Tiger）经济体相似，韩国人口集群对于新技术的出现趋于高度多样化和集中关注。”区块链” 以40% 的搜索率超过了所有其他的词条，”比特币” 搜索率为 29%， “以太坊” 为 24%，”加密货币” 占7%。如此看来韩国用户已经掌握了加密货币的脉络，目前正在向区块链技术、智能合同和以太坊进军，据估计这也会是世界上许多国家未来几年将取得的进展。











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/TK7CCvT/14-5fda104d9c.png&quot; /&gt;&lt;/center&gt;










委内瑞拉在我们的研究结果中十分惹人注目，因其政治经济局势不稳定、货币持续贬值, 在这种捉襟见肘的形势下还能对区块链和加密货币加以关注实属不易。对应地，”比特币” 词条以75% 的搜索率位居榜首，随后是”区块链”14%，”以太坊”9%, “加密货币”2%。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[Web 3.0时代将临：区块链成为核心]]></title><description><![CDATA[一个去中心化、透明安全的Web 3.0时代即将来临，区块链技术将成为主要驱动力。]]></description><link>https://www.ethereum.cn/blockchain-in-web3</link><guid isPermaLink="false">https://www.ethereum.cn/blockchain-in-web3</guid><pubDate>Tue, 30 Apr 2019 00:00:00 GMT</pubDate><content:encoded>来源 | [Aviv Lichtigstein](https://hackernoon.com/web-3-0-will-be-powered-by-blockchain-technology-stack-626ce3f828c7)

&lt;br/&gt;

Web 3.0的IT技术堆栈虽然目前尚未完成开发，但Web 3.0正在全面筹备之下。

那么，Web 3.0是什么？跟以中心化服务器为主的Web 1.0和2.0相比，Web 3.0区块链堆栈的核心是更加以用户为中心的去中心化网络。Web 3.0作为一个透明安全的互联网，旨在提供更人性化的用户服务。

即将到来的Web 3.0有六个重要特性，了解这些特性将有助于您更好地掌握整个概念。




![web1.png](https://i.ibb.co/Cw8XNnZ/web1-f62803c2df.png)







人工智能：具有自然语言处理能力的计算机现在能像人类一样理解信息；

普遍性：万物互联，获取内容途径不受限制；

连通性更强：Web 3.0利用元数据为用户提供更强的连通性；

点对点网络：去中心化的网络将替代中央管理机构；

三维图形：利用虚拟现实(VR)呈现更加真实自然的图像；

语义网络：能更好地理解信息，不再依靠关键词和数值。

&lt;br/&gt;

# Web 3.0 IT堆栈将如何工作？

巨大变革发生之际，社会需要花费更多的时间来适应。毫无疑问，要适应复杂的Web 3.0 IT堆栈，时间和来自开发者的努力都不可或缺。然而，当前的Web 2.0已经非常友好，人们在使用过程中不费吹灰之力。

即便如此，专家认为人们将乐于接受Web 3.0，就像人类在过去20年里对Web 2.0越来越包容和开放。在未来，我们将不得不借助dApp浏览器来使用新的应用程序。这些应用程序迟早会取代旧技术。部分用例请查看下表。








![web2.jpeg](https://i.ibb.co/Cw8XNnZ/web1-f62803c2df.png)





这些只是几个[web 3.0示例](https://101blockchains.com/web-3-0-examples/)，未来将有更多的应用程序取代目前所有的重量级应用。这些应用程序必须与统治市场的垄断者展开竞争。当然，与之前的应用程序相比，这些应用程序将具备更完善、更高级的功能。它们是否足够好，是否赢得了这场有关“纯粹”的斗争，这些都只能留给时间来证明。

尽管如此，Web 2.0并不会完全销声匿迹。例如，在更加智能的通信平台出现后，电子邮件也并没有消失。它只是在与先进科技的较量之中无法再取胜。

 &lt;br/&gt;

# Web平台间的根本差异

Web 1.0在刚开始时步履维艰。因为其价格昂贵且设备少见，人们无法接受互联网。如今几乎人手一个可以连接到互联网的手机。这在当时是很鲜有的。专家常将其称为“只读时代”。大多数内容都是由专业人士创建的，而人们只进行阅读。

那时可用的技术都很简单。谷歌还未出现，人们会使用雅虎或AltaVista。这些搜索引擎使用域名来判断搜索结果的相关性。为了在个人之间共享文件，Napster和BitTorrent受到了欢迎。Web 1.0既无社交也没有语义。我们可以称之为“简单网络”。网站只有超链接和书签功能，并且都是静态的。用户只能浏览内容而无法发出任何反馈或评论，和服务器之间没有任何沟通。

Web 2.0具有读取和写入网络内容的功能。静态网站已被交互式动态网站取代。博客受到了空前的欢迎。维基百科可以看作一个开放式图书馆，您可以在其中搜索到所有知识。即时消息传递成为用户稀松平常的事情。

通过为用户提供更好的互动，它们被称为“社交网络”，而不再是“简单网络”。视频实现流式传输， 各种应用如雨后春笋。传统商店都转换为在线商店，以便更好地进行营销。







![web3.png]https://i.ibb.co/NsMycPn/web3-eb40ddd3e5.png)







&lt;br/&gt;

# 从中心化到去中心化

Web 2.0和Web 1.0的最大缺陷之一就是基于客户端和服务器的结构。所以仔细想想，我们在互联网上的所有个人数据基本上都存储在一个拥有巨大内存的计算机中。所有数据可能归任何私人公司所有。因此，这对我们的隐私构成严重威胁。

这种中心化的系统在过去几年中引起了不小的轰动。例如，可以想到的是Facebook的数据泄露事件和Apple i-Cloud被侵入。太多敏感数据都被公之于众。企业巨头正以多种方式控制着我们的生活。

另一方面，去中心化网络没有数据泄露的威胁。没有人掌握您的个人数据，也没有任何中心服务器。所有数据将分布在整个网络上。您的数据甚至可以储存在冰箱或烤面包机中，前提是它们可以访问互联网。这就是区块链技术 的魅力所在：一个去中心化、安全和私密的人性化网络。





![web1.png](https://i.ibb.co/NsMycPn/web3-eb40ddd3e5.png)










&lt;br/&gt;

# 向数据民主化迈进

准确来说，点对点连接始于1990年，之后当我们开始使用Tor Browser或BitTorrent等共享程序时，它开始进入大众视野。

随着加密货币的变革，区块链将这种基础设施提升到一个全新的层次。现在我们可以在典型的中心化系统中对数据结构进行去中心化处理。

在最新的web3中，我们正在重新设计互联网的数据基础设施。但是，我们要知道，区块链并不是这背后的唯一技术，去中心化的网络堆栈中还有很多其他服务。

主要原因是区块链应用程序堆栈在存储大量数据方面并不是那么理想，因其仍然存在扩容问题，且实际上并没有所说的那么私密。

 &lt;br/&gt;

# Web 3技术栈中的基础架构变更 

新的Web 3.0区块链技术堆栈的基础结构不同于以前，这其中的转变是巨大且细化的。但是，从客户端和服务器属性过渡为去中心化网络的过程不会太激进。

它仍处在趋于成熟阶段。因此，要转型应该首先创建部分去中心化的网络，然后向完全去中心化转变。但是我们还应该考虑一个现实：即使去中心化的网络会更加安全，它们也会比以前慢得多。

即使去中心化是大势所趋，但这并不意味着我们将彻底摈弃中心化系统。我们完全可以对这种系统的优势加以利用。





![web5.jpeg](https://i.ibb.co/xzrPyW3/web5-9d4925e29b.jpg)









&lt;br/&gt;

# Web 3.0的五层架构

在此我已经定义了前几个层。应用层将包括dApp浏览器，应用托管，dApps，业务逻辑和用户界面。

第二阶段基本上进入技术层。该层涵盖了创建和运行dApps层需要的所有重要工具。通常包括数据馈送、离线计算、治理（去中心化自治组织）、状态通道和侧链。我还不得不提到意义非凡的智能合约，因为它帮助用户摆脱了中介。您不再需要处理信任问题，并且能够以无争端的方式进行贵重物品交易，如金钱、股票、财产甚至通证。

协议层涵盖了不同的共识算法，例如参与条件和虚拟机等等。区块链技术利用共识算法来确保节点达成协议。








![web6.png](https://i.ibb.co/xzrPyW3/web5-9d4925e29b.jpg)










&lt;br/&gt;

# Web 3.0将如何改变我们的生活？

IT行业的巨头现在正在垄断信息。随着我们进入信息时代，信息的价值肯定会飙升。对于这些公司而言，Web 3 IT堆栈无疑将是一记重锤。去中心化的、更民主的网络时代即将到来，我们很快就能看到日常生活因此发生的变化。

加密货币已经与联邦银行和政府展开激烈竞争。世界上第一块区块链手机已经出现了。感谢富士康。平台将趋于去信任化，人们的个人信息将不再成为销售产品。

我们已经成为了改变的见证者。瑞士城市楚格（Zug）已将所有公民身份证登记在以太坊区块链上。

由于版权问题，像海盗湾（ Pirate Bay）这样的网站已经遭到了各国政府的无数次打击。但该网站在大众用户中非常受欢迎。政府已经取消了许多域名。因此，像海盗湾这样的网站逃脱掉了政府的强有力行动。

用户现在可以安然入眠，因为他们的私人信息由于结构加密的加强将更加安全。具有反叛精神的黑客也将得益于去中心化的实现。

各种应用程序将接替Facebook、Instagram、Twitter、Google drive等主流网站和通用浏览器。去中心化应用程序必将势不可挡。

简言之，我们所熟知的互联网世界将从根本上发生转变。

 &lt;br/&gt;

# 结语

在区块链的世界中，网络系统的更新换代是很正常的。这个过程仍在推进，并且在不断改良完善，我们依然可以期待更好的数字化体验。

未来还未来，你准备好了吗？

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[CONSENSYS：从心出发]]></title><description><![CDATA[2019年伊始，ConsenSys部门成员对区块链技术的回顾与展望。]]></description><link>https://www.ethereum.cn/consensys-blockchain</link><guid isPermaLink="false">https://www.ethereum.cn/consensys-blockchain</guid><pubDate>Fri, 04 Jan 2019 00:00:00 GMT</pubDate><content:encoded># 

随着区块链技术朝着成为全球经济基础支柱的方向又迈进了新的一年，现在正是回顾过去365天的开发经验并分析围绕区块链技术的新兴产业如何更好地向前发展的好时机。

2018年对于加密货币来说是大起大落的一年，仅有区块链技术影响的市场的波动性优于预期。尽管区块链媒体炒作周期仍在持续，世界各地区块链行业内的技术人员、开发者、企业家以及专家们正以一种可持续的实质性方式不断取得了一些小而稳定的成就，这些成就正是如以太坊这样的技术获得成功的必需条件。

我们与ConsenSys mesh所有部门的成员（从dApp开发者到业务开发主管、创意人员和项目经理）进行了交流，了解他们在2018年的主要进展以及像区块链专家和观察者在未来一年可以改进的方式。讨论结果并不只是一个详细列表，它释放了一个鼓舞人心的信号：我们现在所处的位置、未来发展方向以及当我们郑重地开始新的一年时，世界各地的BUIDLer的定位是怎样的。

&lt;br/&gt;

## 2018年区块链技术最重要的突破之一

Monica Singer, Consensys南非办事处负责人

过去一年区块链最重要的突破是我们在开发这一艺术的可能性方面所作的努力。我们探索了区块链如何打乱许多传统行业，如何通过拥抱区块链技术来减少相互之间的摩擦。在此之前，我们身处一个将透明性与统治权视为理想目标的世界，但现在，我们拥有了可以将其付诸实际的技术。

Joyce Lai, Consensys律师

特别是对于以太坊社区来说，2018年是区块链法律与政策里程碑的一年。6月，美国证监会金融部主任Hinman就美国证券法在代币销售中的应用发表个人观点，他表示由于当前以太坊网络的去中心化结构，以太币的报盘和销售目前不是证券类交易。

Guilherme Campos, 解决方案开发者

对我来说，围绕元交易所做的工作是区块链技术采用最大的进步之——当我们引入区块链技术时，用户体验得到极大改善。

Laurisha Cotton, 社交媒体经理

行业外人士也开始了解到区块链。今年生菜销售受限时（因美国大肠杆菌爆发），有很多朋友问我“你不能用区块链解决这个问题吗？”

Nicole Adarme, 产品营销经理

以太坊区块链的应用及使用已在全球范围内多个行业取得突破。其中一个突出的例子就是以太坊正在为菲律宾超过3500万人口提供普惠的金融服务，通过建立村际银行支付网络将边缘化的省内村庄纳入到国家金融系统中。

&lt;br/&gt;

## 2018年区块链领域面临的最大挑战之一

Cecily Mak

2018年区块链领域面临的最大挑战之一是人们对区块链和加密货币的差异存在持续的误解。最初，人们普遍认为“区块链”等同于“加密货币”或“比特币”，这种怀疑与猜忌阻碍了一些领域的创新与采用，而区块链在这些领域处于优势地位，本应作出有意义的改进。

Constantin Kostenko, Sr. Solutions工程师&amp;策略师

需要意识到一点，人们不买区块链，他们买的是通过区块链实现的可持续价值。就像我们不会因为形状、外观或引擎购买车子。我们买车子是为了从地点A到达地点B，而这一目的要通过车子的形状、引擎和外观来完成。

Monica Singer

区块链技术在2018年最大的挑战是对于那些多年来依赖中心化实体为其运营的生态系统注入信任的人或公司来说，区块链技术（去中心化）很难理解。区块链对各行各业中通过低效来营利的人造成威胁，因为区块链技术可以完全消除低效率问题。这样一来，许多高管对于区块链技术选择坐视不理，希望这只是个炒作。

Alex G, Liquality联合创始人

或许，2018年区块链行业面临最大的挑战是，人们一再错误并模棱两可地将区块链孤立为一个创新产品，还试图重现传统的中介模式，而非将其分解。这一挑战源于人们未意识到区块链技术是4个关键技术组件之一，它不能孤立成为一个创新技术，而应共同推进现存信任模式的去中介化。

##  &lt;br/&gt;

## 2019年区块链主旋律

Cecily Mak

我认为，从企业到政府的各个组织会继续设法在一个出于集体动机去中心的领域内保持某种形式的中心化。这将促进私人部门与公共部门就中心化的成本进行有益的全球对话并发起一场更开明的全球辩论，这些讨论将涉及到去中心化的优势和区块链增进人类福祉的能力。

Constantin Kostenko

很惊讶那些在2018年倒闭的组织和公司就像是一夜成名一样。

Nicole Adarme

我认为2019年区块链的主旋律将会是越来越多公司采用企业级以太坊，他们希望利用技术创新来改善组织效率低下的问题，释放新的商业潜能，并获得可持续的竞争优势。

Joyce Lai

在美国，许多联邦与州一级的组织都表示愿意促进区块链行业的技术创新。怀俄明州始终走在前列，通过许多区块链友好的法律。这类立法包括HB70和HB101，前者为实用型代币的创建、销售和交易提供了一个避风港，使其不受怀俄明州证券法的约束，其中一个条件是这类代币未被开发商当做投资机会进行营销；后者改进了区块链在公司记录存储方面的应用。联邦方面，CFTC（美国商品期货委员会）近日发布了一封公开信，以通过公众评论更好地了解以太币和以太坊网络。CFTC在信中提出的问题振奋人心，因为这些问题表明了市场开放性和技术复杂性。

Monica Singer

我相信2019年区块链主旋律将会是像传统证券交易所一样受监管的证券型代币的出现。

&lt;br/&gt;

## 2019年区块链开发中必须改进的方面

Cecily Mak

目前来看，政府和企业应用区块链技术的成本相对较高。随着技术应用规模扩大，为了获得更大利益，应该减少进入壁垒。

Mark Sandusky

用户获取。让人们玩区块链游戏及使用这些dApp的原因不是‘因为它是区块链’，而是因为它是最优选择。然后我们就可以开始了解当人们使用它们的时候，这些dApp和区块链游戏是如何运作的。

Nicole Adarme

2019年，区块链解决方案需要打破企业与消费者的进入壁垒，例如需要17个（或者50个？）步骤来建立身份系统或钱包，以便参与到区块链生态系统中。

Georgia Rakusen, Consensys设计研究组长

区块链计划若要取得成功并成为主流，他们需要解决真正的用户问题。我希望在2019年整个社区都开始关注这些问题；将我们已经取得的可观的技术进展应用于改善一般人的现状。

Guilherme Campos

我们不要再谈论区块链了，而应该开始讨论区块链产品。没有人关注互联网是如何运作的，只要他们能使用Facebook，或WhatsApp或Snapchat…

&lt;br/&gt;

&lt;br/&gt;

原文链接：http://t.cn/EGw656R

转载请注明：ECN以太坊中文网</content:encoded></item><item><title><![CDATA[君士坦丁堡硬分叉我们需要了解的事]]></title><description><![CDATA[在2018年12月6日周四举行的以太坊双周核心开发者会议上，以太坊君士坦丁堡硬分叉被敲定。]]></description><link>https://www.ethereum.cn/constantinople-hard-fork</link><guid isPermaLink="false">https://www.ethereum.cn/constantinople-hard-fork</guid><pubDate>Mon, 24 Dec 2018 00:00:00 GMT</pubDate><content:encoded>**“君士坦丁堡”将在第7080000个区块上进行分叉，分叉预计时间在2019年1月14日。** 

 &lt;br/&gt;

# 以太坊君士坦丁堡高度概括



君士坦丁堡硬分叉将为以太坊区块链带来急需的性能更新，同时解决“难度炸弹”和“矿工奖励”相关问题。



君士坦丁堡是一次非常密集且广泛的更新。它将打破落后的兼容性问题，这意味着本次更新将以硬分叉的形式进行。但这次硬分叉并非预期中将以太坊分裂为两个货币。本次硬分叉更像是一次系统升级。正常情况下，当人们听到“硬分叉”这个词时，他们通常会认为是原本的区块链将分为两条，同时产生第二种代币。情况并非总是如此。如果每个人都赞同更替并就升级达成共识，当发生硬分叉时，每个人只需要转换到新版本上。

 &lt;br/&gt;

# 以太坊君士坦丁堡5大升级

君士坦丁堡由5个主要的改进方案组成。大部分更改进与其性能相关。因为随着其他平台性能加快大大提高了竞争力，性能将是以太坊急需解决的一个问题。为了解决该问题，以太坊开发人员正在改善以太坊虚拟机（EVM）。你可以把EVM当做幕后执行与智能合约相关联的代码的引擎。

&lt;br/&gt;

## Vitalik Buterin

### EIP（以太坊改进提案）定义

君士坦丁堡5个改进提案都被列为EIP并按照时间顺序排列。EIP代表以太坊改进提案。以太坊社区中任何一个成员都可以编写一个提案并提交审核。如果社区大部分成员都赞同，该提案将获得许可并加入到即将发布的版本中。

 &lt;br/&gt;

### EIP145

第一个改进提案EIP145是由开发人员Alex Beregszaszi与Pawel Bylica编写的技术改进。这个改进在EVM中添加逐位移动（Bitwise shifting）指令。逐位移动是指将二进制数的位移到左边或右边的过程。使用新指令，该操作将节省大约10倍的gas。简言之，这意味着执行智能合约将变得更加便宜且更有效率。








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/Lh35dzT/1-6d565deeca.png&quot; /&gt;&lt;/center&gt;



&lt;br/&gt;

### EIP1052

我们即将讨论的第二个更新是由Nick Johnson与Pawel Bylica联合编写的EIP1052。本次升级将引入新操作，该操作将提高智能合约验证其他智能合约代码的效率。在此之前，用户需要提取其他智能合约代码并对其进行验证。完成新升级后，仅需验证传送回来的代码散列而非完整代码。这一改进非常重要，当你有许多需要相互交互的智能合约时，使用散列验证将大大加速验证流程。






&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/TP3JzHB/2-666d79394f.png&quot; /&gt;&lt;/center&gt;





&lt;center&gt;注：EIP145与1052组合旨在提高EVM效率。这将降低在以太坊网络上执行智能合约的成本。&lt;/center&gt;

&lt;br/&gt;

### EIP1014

接下来是由创始人Vitalik Buterin自己编写的EIP1014提案。该提案在以太坊网络上添加了状态通道。状态通道很容易就能与比特币闪电网络相媲美。其中主要的一点是状态通道允许在远离主链的支付通道内进行交易。这将实现更高的吞吐量并提高每秒交易量。








&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/3fpkz1C/4-6179f32d7a.png&quot; /&gt;&lt;/center&gt;




EIP1014 Github页面显示本次改进的主要原因：
允许（实际或反事实通道内）使用不在链上的地址进行交互，最终只能依赖这些地址来包含由特定的初始代码片段创建的代码。
这基本上意味着状态通道将允许主链引用尚未广播到链上的链下交易。

&lt;br/&gt;

### EIP1234

第四个提案EIP 1234是由以太坊主要客户端Parity发布经理Afri Schoedon所倡导的“难度炸弹延迟”与“区块奖励调整”。EIP1234是以太坊本次升级中最受关注的一个提案。该提案已经通过审批，主要与延迟难度炸弹、降低区块奖励相关。但仍存在疑问：什么是难度炸弹？为什么我们要降低区块奖励？







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/LPz7nSV/5-d96f6b5cef.jpg&quot; /&gt;&lt;/center&gt;



&lt;br/&gt;

#### 区块奖励

我们首先讨论区块奖励。到目前为止，以太坊矿工开采个新区块所获奖励仍为3枚ETH。每15秒就有一个新区快被创建，这意味着每天都有5-6000个区块被添加至链上。每个区块奖励3枚ETH，每天区块奖励总供给量就有15-18000枚ETH。

这个数量不容小觑，如果你有兴趣了解更多，请点击[此处](https://achainofblocks.com/2018/09/04/cryptocurrency-price-inflation-explained/)。

新升级提案将挖矿奖励从3枚ETH降低为2枚，这将有效遏制“通货膨胀”问题。降低区块奖励的目的是推高ETH价格，大家都知道，“物以稀为贵”。比特币也有类似的自动机制，每生产210000个区块，奖励将减半。

 &lt;br/&gt;

#### 难度炸弹

EIP1234同时提出难度炸弹发布延迟一年。但究竟什么是难度炸弹？这与以太坊计划移除PoW算法而采用PoS相关。可点击[此处](https://achainofblocks.com/2018/08/24/proof-of-stake-delegated-proof-of-stake-proof-of-work/)了解其重要性。

总的来说，现在以太坊区块链上，矿工需要处理交易并创建新区块。他们通过工作量证明机制获得区块奖励。然而，权益证明机制下，矿工将不再被需要进而失业。当以太坊最终转换为权益证明时，矿工可以选择不进行更新并保持在旧链上。这将是真正的“硬分叉”，以太坊社区一分为二，双方各自支持着不同的链。

以太坊过去曾经发生过这种事，这就是为什么现在有以太坊与以太经典共存。以太坊开发者正尝试不要重蹈覆辙。他们想出的解决方法是在协议中添加难度炸弹。难度炸弹是一种使新区块开采难度随着时间推移而成倍增加的机制。开采难度将持续增加直至再无新区快。当区块不再被开采时，网络将中断或冻结。这种情况被称为以太坊冰河期。该概念在2015年9月7日加入协议之中。







&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/jRh5mCp/6-82f6ece4c1.png&quot; /&gt;&lt;/center&gt;






难度炸弹完成了两件事。首先，这给以太坊开发者增加压力，开发人员需要为避免冰河期发生而更新协议。其次，难度炸弹迫使矿工采用新升级版本。否则，矿工所在网络将不会有任何营收。难度炸弹的想法很好，但所有好想法都存在各自的弊端。该想法是在2015年末引入的，其目标是在2016年底使以太坊旧网络不再可用。当时的想法是网络已经迁移到权益证明机制。很明显，目前仍未发生，只剩下EIP 1234提案——将难度炸弹推迟一年。这使得难度炸弹预期发布时间推迟至2020年1月14日。

 &lt;br/&gt;

### EIP1283

最后一个提案EIP-1283是在Nick Johnson早期撰写的EIP-1087的基础上提出的。EIP-1283被称为无dirty maps的SSTORE gas净值计算方式。这个提案的名字较长且令人困惑不已，简单来说EIP-1283使多个更新可以在交易中使用相同的storage slot来降低成本。这个完全可以做到，因为交易是在结束后才被写入磁盘。

 &lt;br/&gt;

# 结论

正如上面提过的，相比起硬分叉，君士坦丁堡更像是一次系统更新。本次分叉开始为其它即将到来的分叉（包括Plasma和Casper）奠定基础。所有这些工作都是为了将网络从工作证明机制迁移到权益证明机制上来。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。

</content:encoded></item><item><title><![CDATA[Joe Lubin: 加密乌托邦的陨落]]></title><description><![CDATA[加密货币市场寒冬经久不散，Lubin还能否为梦想买单？ConsenSys还能支撑多久？]]></description><link>https://www.ethereum.cn/cryptopia-in-crisis</link><guid isPermaLink="false">https://www.ethereum.cn/cryptopia-in-crisis</guid><pubDate>Mon, 10 Dec 2018 00:00:00 GMT</pubDate><content:encoded>来源 | [forbes.com](https://www.forbes.com/sites/jeffkauflin/2018/12/05/cryptopia-in-crisis-billionaire-joe-lubins-ethereum-experiment-is-a-mess-how-long-will-he-prop-it-up/#4dd1710e2f0a)





&lt;br/&gt;



&lt;br/&gt;



在一年前，Joe Lubin似乎是世界上最有先见之明的人之一。当时加密货币（如以太币）正处于飞速发展阶段，能言善辩的以太坊联合创始人Lubin计划从达沃斯到SXSW的各种活动中发表演讲。公司举行的“Ethereal Summit”时，门庭若市，只剩下站立的地方，无论Lubin发言有多荒诞，人们都不会漏下他说的一个字。

2017年10月在旧金山举行的一次活动中，他指责与会者敲打电视机，还粗鲁对待Apple手机助理Siri。“我们设计了以太坊是使机器和机器人成为一等公民”，Lubin直言不讳地说道，同时还表达了自己对去中心化、自主主权和全球社区民主化愿景的支持。“所以要善待这一代的机器，以免将来某个认为你对她的祖先不敬的人工智能对你展开报复，把你的碳转化成对未来机器经济更有用的东西。”

Lubin的讥讽引起了满堂嬉笑，谁能料到在2017年秋，加密货币的底层技术分布式数据库——区块链席卷而来，其将建立新的世界秩序的想法并非完全不切实际。类似比特币的数字货币——以太币的价格从2017年初的10美元/枚暴涨至300美元/枚，接下来三个月内更是达到了1389美元/枚的峰值。Forbes很快将Lubin列为加密领域第二富有的人，其资产高达50亿美元。这并非空穴来风，有报道表示Lubin持有以太币流通量的5％-10％，而以太币市值在2018年初已经超过1000亿美元。

“区块链技术的潜力是无穷的”，54岁的Lubin在最近的一次采访中告诉Forbes。“它的价值比现有的代币高出许多，因为区块链会渗透到社会的各个方面。我们将在这项技术上构建所有项目。“

2014年底，在以太网以30美分/枚的价格推出以太币之后几个月，Lubin创建了ConsenSys，雄心勃勃地将这个控股公司描述为一个为去中心化世界构建应用程序和基础设施的全球“有机体”。实际意义上，Consensys是第一个加密企业集团，包含一系列盈利性公司，为比特币最大的区块链竞争对手——以太坊提供支持。在Consensys总部布鲁克林，超过50家企业如雨后春笋般涌现出来，种类繁多，从扑克网站和供应链公司到预测市场，医疗数据公司和网络安全咨询公司。

但Consensys并未发起融资或发行债券。在Lubin的去中心化未来版图中，他同时担任了架构师，首席执行官和中央银行家的角色，用个人加密货币存款为所有ConsenSys的Spoke提供资金。  

尽管其基础层出现严重问题，但Lubin还没有对总体规划进行明显改动。首先，以太坊区块链面临巨大阻力。由于技术优势（主要是因为它允许将应用程序“嵌入”区块链中），以太坊成为数百个ICO的发行平台，而其中许多骗局ICO导致投资者损失数十亿美元。加密货币“原野”上充斥着许多在以太坊上发行却命途不济的ICO残骸，雪上加霜的是，现在美国证券交易委员会和其他监管机构也正在瞄准其中一些ICO采取执法行动。11月，美国证券交易委员会针对以太坊创业公司Airfox和Paragon采取行动，这两家公司在2017年发行ICO时实际上已经出售了2700万美元的未注册证券，其代币目前基本上一文不值。与此同时，支持应用程序的区块链竞争对手如EOS，每天处理的交易量几乎为以太坊的十倍；另一个竞争对手——Dfinity，最近从Andreessen Horowitz等风险投资公司那里筹集了1.02亿美元，正在向以太坊发起挑战。但几乎所有区块链技术发展仍然非常缓慢，以太坊每秒只能处理大约20笔交易。相比之下，Visa可以处理24000笔。

然而Lubin的公司规模却在不断增长。ConsenSys旗下有1200名员工，官网上同时发布了约200个职位空缺。虽然ConsenSys对此不置可否，但据Forbes估计，Consensys几乎所有业务都处于亏损状态，有些业务甚至毫无盈利的可能性。Lubin的“全球有机体”似乎每年以超过1亿美元的速度耗费资金。

当有些非常担忧的员工询问Lubin关于ConsenSys的可持续性时，Lubin的回答总是很得体：“Joe会说，’这绝对不是你需要担心的事情。我们还能以当前的速度持续长远发展，” 5月份离职的Consensys前全球运营总监Carolyn Reckhow回忆道。  

加密货币遭到重创，以太币价格从1389美元/枚直线下跌至100美元左右，Lubin持有资产可能已经缩水到不足10亿美元，人们很怀疑Lubin还能为梦想买多久的单。这一切都取决于他抛售的以太币数量及时机。

与以太坊其他联合创始人，Vitalik Buterin和Anthony Di Iorio一样，Lubin在加拿大长大。父亲是一名牙医，母亲从事房地产经纪。自称为电脑怪才的Lubin在20世纪80年代中期就读普林斯顿大学，在那里他打壁球，是未来亿万富翁、对冲基金大亨Mike Novogratz的室友。Mike和Lubin一样，最终转向区块链和加密行业。在1987年毕业并获得电气工程和计算机科学学位后，Lubin刚开始在普林斯顿机器人实验室从事科技研究，最终转行至金融业为高盛构建软件，后来运营了一个成功的量化对冲基金。

Lubin的办公室与“911事件”中遭遇恐怖袭击的世贸中心距离不远，悲惨的经历使他陷入了生存危机。在随后的十年里，他对世界现状深感沮丧。

Lubin在2017年5月份举行的Ethereal Summit 上表示，“信赖那些我们内心认为最符合个人利益的机构是愚蠢的……我觉得我们当前所在的全球社会和经济体系，无论是象征意义上还是事实上，又或是道德意义上，都已是破产状态。我相信我们的社会与经济体系正在一步步、一层层地走向崩溃”。 Lubin预见了两个同样灾难性的结果——各国央行行长最终会通过贬值货币来偿还不断增加的债务，进而抑制了几十年的经济增长；第二个后果是，一些预期外的”非线性“事件会导致发展壁垒，并使世界陷入前所未有的经济大萧条。 Lubin对此深感悲痛，于是前往秘鲁和厄瓜多尔寻找庇护所。

2011年初，Lubin读了比特币白皮书并且得到顿悟：“去中心化将会改变游戏规则。” Lubin的全球“有机体”似乎每年耗资超过1亿美元，但ConsenSys仍在继续扩张。 在了解完比特币的所有内容后，Lubin由Di Iorio引荐给了Vitalik Buterin——19岁的以太坊创建者，加密行业的天才少年。在阅读了Buterin 2013年11月发布的以太坊白皮书后，Lubin参与以太坊项目的底层设计并参加了2014年1月在迈阿密举行的北美比特币会议。在此之后他继续作为核心团队成员参与了以太坊在2014年7月发行的1800万美元ICO，据传，Lubin是以太坊众筹期间最大的买家之一，当时每枚价格估计远低于1美元。然而以太坊创始团队出现分歧，最终分道扬镳。Buterin继续关注这项技术，Lubin则制定了围绕以太坊创建商业生态系统的计划。

Lubin选择布鲁克林下层中产阶级社区Bushwick作为Consensys总部。从外面看， Bogart Street49号看起来很脏：门上盖着酒吧卫生间常见的各种贴纸，周围都是涂鸦。其内部装饰也没什么不同，ConsenSys在公寓住宅区旁边租下了许多阁楼。

在公司组织结构方面，Lubin并不像传统典型的公司内部阶层构造。他的ConsenSys将实行所谓的“全民主”——没有管理者或汇报结构。决策权将是分散的，员工可以选择自己的头衔。很少有人有固定的办公桌。

“每天都是如此松散，我不知道走进去后是否有座位，简直就像是《权力的游戏》”，Jeff Scott Ward说，他于2015年6月加入ConsenSys，在 2018年初离开公司。Ward指出，一层楼有一个可容纳30人的厕所，公司近一年半没有聘请人力资源专员。ConsenSys的首批项目或者说是Spoke包括用于加密货币交易的记账应用和针对音乐家的基于区块链的数字版权平台。Spoke的大部分创想都来自ConsenSys的员工，一旦项目获得批准，Lubin就会给初创公司提供25万到50万美元的资金。 目的是使Spoke成为自立的企业，并且为了实现这一点，Consensys员工偶尔会被分派到他们自己的项目里。Lubin更广泛的目标是将他的以太坊生态系统变成他所谓的mesh，其强度来自各个项目的互连性。

Consensys推出的项目中只有小部分获得牵引力。记账应用Balanc3表示，已有超过25个商业客户（虽然没有明说具体客户），每个客户每年至少支付25000美元的服务费。另一个项目是Kaleido——帮助企业实施区块链技术的初创公司，拥有1900名用户，刚开始收取服务费。亚马逊云计算部门最近宣布其托管平台与Kaleido的区块链产品相整合。ConsenSys已为以太坊创建了专业开发工具，程序员下载次数达数百万次，但并未收费。











&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/mGP11gM/image.png&quot; /&gt;&lt;/center&gt;







在审批项目时，Lubin并不像传统风险投资者那样谨慎。“在项目选择上，Joe倾向于保持开放态度，常说‘可以，为什么不呢’”，现在担任加密钱包公司Casa客户服务和运营主管的Reckhow说。“幸运的是，他处在一个拥有决策权的位置，但他不擅于分清项目选择的优先次序，而宁愿什么都通过。”

当加密货币处于牛市时，作为以太坊的“沃巴克老爹”极具优势，但随着加密货币进入另一个熊市， Lubin之前表示会定期出售加密货币用于投资经营，现在可能需要终止一些项目。

2017年，加拿大滑铁卢大学学生Mark Beylin找到Lubin，提出了新创想——Bounties Network，类似于综合类工作外包平台Upwork，为自由职业者提供工作，但Bounties Network使用以太坊的智能合约，这将有助于工作计费。经过一年的运营，Bounties Network现有7名员工，总共只有40万美元的酬金。平台薪酬高低不等，一篇关于未来工作的800字博客文章稿费可能高达171美元，而将一份白皮书翻译为葡萄牙语可能只有67.30美元。到目前为止，Bounties Network总收入不到50000美元。

2016年10月，迪拜的18岁高中毕业生Jared Pereira向Lubin抛出了Fathom，该项目通过将学术评估和评分外包给校外机构来改变传统高等教育业务。Lubin当即就通过了Fathom，但两年后该项目有六个研究人员却没有可开发的原型。它的网站十分简陋，仅有几页表述了开发者的“高风亮节”：“如果个人可以根据自己的目标来自由地选择人生经历，并且能够将这些经验可靠地传达给世界上任何一个实体，那么不同规模的社会组织的效率将会发生数量级的提升。”

Lubin投资的其他项目似乎更是不堪一击。Lubin经常穿着同名T恤推广的项目Cellarius，是一个“跨媒体网络朋克特许经营”项目，目的是在区块链上进行协作式讲故事。但究竟什么是协作式讲故事，为什么区块链会让故事讲述变得更好或更有利可图？其网站的解释仍是含糊其辞。

Lubin仍坚持ConsenSys在项目筛选方面越来越谨慎，但本性难移。就在10月份，Consensys又收购了一家名为Planetary Resources陨石开采公司，该公司成立于2010年，试图开采外太空资源。Lubin高深莫测地说，“我们认为Planetary Resources公司是一个专业能力很高的团队，他们有兴趣探索区块链如何在开采太空资源中发挥作用”。。Civil是一个基于以太坊的平台，其使命是支持一个全球性的优质新闻编辑室社区，因未达到众筹最低目标800万美元而不得不取消ICO。Civil的18个新闻编辑室的一些记者表示他们尚未收到Civil承诺的代币赔偿。（Forbes最近宣布与Civil建立合作关系。）

ConsenSys还提供咨询服务，主要帮助企业掌握区块链知识从而更好地布局区块链。到目前为止，这是该公司发展最好的业务。从短期来看，Consensys咨询服务将会成功，除非那些公司醒悟过来，意识到区块链不一定对大多数事物都有帮助，有时甚至比其他技术更糟糕。例如，ConsenSys的顾问合作创建了Komgo，一个由花旗，法国巴黎银行和荷兰银行等15家银行组成的财团。Komgo希望利用区块链来提高世界各地货物运输的融资效率，如石油。ConsenSys咨询顾问还与菲律宾的友联银行合作，旨在提高转账速度。

Lubin表示，在过去的一年里，ConsenSys的咨询部门已经从30名员工发展到250多名，正以现金及股权的形式带来了“数千万美元”的利益。ConsenSys的spoke，主要是应用程序和开发人员工具。据orbes估计，到2018年，所有这些项目总收入不会超过1000万美元。

到目前为止，除咨询服务外，ConsenSys最成功的业务是其为以太坊程序员提供的开发工具。其中，MetaMask允许用户从Web浏览器登录以太坊，下载量超过一百万（所有这些都是免费的）；Truffle帮助开发人员管理和测试部分用于构建以太坊应用程序的代码，也拥有100万次免费下载量。由于区块链开发者社区具有公共的，准无政府主义的特性，因此这些工具很难从开发者处收取实际费用。ConsenSys声称其访问以太坊的工具——Infura将很快收取服务费。

加密资产管理公司CoinShares首席战略官Meltem Demirors说：“ConsenSys在开发前五年中为以太坊生态系统所作的贡献比任何公司都多。

这些未见起色的项目没有影响到Lubin，显而易见的是他投资这些项目不是为了盈利， “我不是想创建公司然后推出去赚钱，目的是创建一个生态系统，像发展一个大家庭。”但是，Lubin也承认正在进行循序渐进的改变，最近Lubin向其员工发送了一份备忘录，为了迎接ConsenSys 2.0的到来，该公司将精简业务，淘汰表现不佳的项目。Lubin说，“在ConsenSys 2.0规划上，我们将更关注传统创业公司必须跨越的市场障碍”。他并未排除裁员的可能，其中甚至包括咨询部门。

ConsenSys的最大问题与其说是加密货币价格暴跌和Lubin资产缩水，倒不如说是企业集团怪异的运营结构。

ConsenSys宁愿相信自己正在重塑工作和业务的未来。当你走进ConsenSys布鲁克林黑客风格的总部时，你会发现有很多反主流的布局，包括墙上的一个大横幅，上面写着“欢迎进入去中心化的未来”。

事实上，首席执行官Lubin试图不去指导别人该做什么。“他想成为反传统的首席执行官或创始人”，离职员工Jeff Scott Ward说，部分原因是因为Lubin是一个想要推动民主化的“好好先生”。但让“好好先生”掌权有一些不好的结果。在ConsenSys，员工们几乎没有动力在截止日期前完成工作并取得快速进展。Balanc3发言人Griffin Anderson表示，在很多方面，Consensys不像硅谷风投公司那样存在产生收益或达到目标的压力。Glassdoor一位评论员将ConsenSys描述为“无资金限制，无达标压力”的地方。

传统结构的匮乏也催生了丑陋的公司政治。“感觉有点像电影《幸存者》”，离职员工Lucas Cullen说。还有离职员工指出，与Lubin关系密切的ConsenSys员工可以更快地获得资源，而且不同团队的责任大相径庭。

ConsenSys确实有资源分配委员会（RAC），负责决定项目是否有资格继续分配到额外的工程师或资金。但委员会人员架构一直不太稳定。“固定有一个人来自财务部，但委员会通常都是由对你所在领域感兴趣的人组成的，任何人都能报名称为委员会成员”，Truset的联合创始人Thomas Hill表示，Truset是ConsenSys其中一个项目，正在打造一个众包商业数据平台。

在ConsenSys工作了三年的Ward表示，“厨房里的厨师太多了。就像是在比较谁的自我最强？令人筋疲力尽。UPort是基于以太坊的自主权身份ID应用，允许用户身份验证、无密登录、数字签名并和以太坊上的其它应用交互。该应用有三个项目经理，他们甚至都不能在一个愿景上保持一致的意见。即使如今只有15个应用程序使用UPort，该项目仍被分为两部分。

许多人将ConsenSys的企业文化描述为混乱，公司似乎无法跟踪投资的项目。ConsenSys主页显示有 50多家辐条公司，但在报道新闻的过程中，这个数字的范围从“超过30”变为最近的42个。公司发言人表示，这个数字一直不稳定。

Lubin承认其中存在一些问题。“问责制一直是ConsenSys的一大难题，”他说，“我们一直在努力建立各种机制，区分各人的职责与义务，并确保实施明确的问责制”。但他也提到了他推行的网状结构的真正好处。不同项目之间需要协作互动，而组织机构中的筒仓隔离了不同的部门。员工们表示，质疑他人的假设并没什么可耻辱的。一些内部人士感觉被赋予了自主权——特别是能在项目之间进行横向调动。

**“ConsenSys最终将作为一个案例研究纳入Harvard Business Review，要么作为改变企业组织结构的优秀样板，要么就是失败案例”，Truset联合创始人Hill直言不讳道。**

如果Lubin在为即将到来的去中心化时代重塑企业是一个悖论，那这个悖论就是ConsenSys实际上比卢宾所承认的更加中心化。

例如，当ConsenSys的分支机构分拆并成为独立的公司时，Lubin会掌握50％或更多的股权。因此，与美国镀金时代的John Pierpont Morgan和Andrew Carnegie以及互联网时代的科技巨头Jeff Bezos和Mark Zuckerberg一样，Lubin正在成为区块链时代的独裁巨头之一。“这就是整个网格和去中心化分崩离析的地方，从来没有人知道谁拥有什么股份”，Ward表示。比如说Grid +——ConsenSys通过ICO分拆出来的一个项目，据Forbes估计，Lubin带走了不少于20％的代币再加上一半股权。

“我认为他们甚至不知道什么是去中心化”，CoinShares的Demirors说。

ConsenSys1200名员工持有股权的问题已成为一个流传的笑话。离职员工指责道，Lubin很长一段时间都避重就轻，如果你问他什么时候实施计划，回答总是“六个星期之后”。事实上，Consensys首批约100名员工在2017年初收到分配的股权，而大约两年后，ConsenSys表示，它仍在制定一项计划，给更多员工分配公司股权。

Lubin认为ConsenSys公司结构并不存在矛盾，“如果你能够构建一个为许多人服务的系统，并得到较高的满意度，那么原始结构并不一定必须由很多人平均拥有”，这和Zuckerberg在Facebook不平衡的公开募股前夕的说辞一样。

2017年，ConsenSys还能利用ICO作为一种简单而有利可图的方式来催生分支企业并奖励内部员工。但现在ICO正处于美国证券交易委员会打击的风口，这个方式不再适用。“当我们寻求个能多的外部投资时，有些特定的交易映射到传统的风投模型中，在这些交易中，我们将保留较少股权”，ConsenSys Labs负责人Ron Garrett指出，Consensys Labs是负责筛选spoke项目的部门。他还补充说，其他创业孵化器如Betaworks，都持有它们所孵化公司的多数股权。民主化和去中心化暂且讲到这里。

就目前而言，Joe Lubin在未来业务方面的重大试验实际上是与时间赛跑：**在Lubin的资金耗尽之前，区块链应用是否会取得主流成功？**

即使是以太坊上最成功的应用程序，其用户群也很小。最广泛使用的应用程序是去中心化的加密货币交易所是IDEX，与ConsenSys毫无关联。经过一年多的运营，日用户量仅为1000。Lubin说：“我们知道这将是一项艰巨的任务，需要很长时间才能在全球范围内实现大规模应用。”

如果Lubin仍然是亿万富翁，ConsenSys或许还能维持数年（即使是每年耗资超过一亿美元）。但Lubin毫不嘴软，“Consensys目前仍在健康稳固的运营中”。

**Lubin会在什么时候认输？**

“我从未退出，而且我从来没有为投资的项目采取退出策略，”他在ConsenSys的旧金山办事处说道，他刚刚为16家初创公司举办了“体验日”，这些公司都希望能得到Lubin资助。“这些项目我都投！”

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item><item><title><![CDATA[激进ｘ变革：当Vitalik遇上Weyl]]></title><description><![CDATA[以下是与Vitalik Buterin和Glen Weyl的邮件通讯有关的一系列内容，主要是以“激进×变革”为主题而交换的一些想法。]]></description><link>https://www.ethereum.cn/vitalik-buterin-vs-glen-weyl</link><guid isPermaLink="false">https://www.ethereum.cn/vitalik-buterin-vs-glen-weyl</guid><pubDate>Tue, 09 Oct 2018 00:00:00 GMT</pubDate><content:encoded>来源 | [@glenweyl](https://medium.com/@glenweyl/a-radicalxchange-between-vitalik-buterin-and-glen-weyl-328d8ad088cf)

作者 | Vitalik Buterin, Glen Weyl

&lt;br/&gt;

# 激进Ｘ变革：当VITALIK遇上WEYL








如下列出的是Vitalik Buterin和我在前一天对“激进x变革”的话题所交互的一系列邮件。

它们（这些邮件中所提到的内容）有价值的原因在于：1.这些内容，虽然在其它场合还没有被研讨过，但是我们认为很重要；2.这些内容就最新议题呈现了我们最新的想法；3.这些内容体现了一些客观存在但不为很多人所喜欢的现实，就好比正在被制作的香肠一样——然而还是有一些人会对此感兴趣。

然而，有必要注意到的是：这一系列的交流是内部交流，因此会涵盖高度的专业性内容；这其中，还有很多谈话内容没有被全然融入到“激进×变革”社会运动的理念、经济学、社会学、知识史学、哲学和密码学，因而会难以为人所理解。











&lt;br/&gt;

### Vitalik Buterin

我觉得我应该尽我的最大可能，将这些应该被更好地强调的话题用语言表达出来。这些话题不尽然是全然有形的想法，但它们都是我认为值得去思考的东西，而且我觉得我们之前对它们的思考还不够多。

 ***１.抗合谋***

抗合谋，或者是从更广义的角度看，不再将一种特权赋予人们——这种特权会使得人们拥有更加完善的资格来进行协调（我之前谈到过这个话题，但是想把这个话题扩展到我所关切的领域）。比如说，如果QV/LR（二次方投票/自由激进）的模式在线上使用，而你又有一个四人的小组，你可以把所有人聚在一起，打开他们各自的手提电脑，这样一来每个人都可以看到其他人做出的贡献。如果这样的话，在每个人都同意贡献他们所愿意贡献的最小值的情况下，组内的每个人将会做出多出四倍的贡献。就算是这一系列的贡献行为是在展台式投票设置中完成的，在每个人都关心一些议题但是一个人关心得特别多的情势之下，一组一组的人将会目睹这样的情形：有一个人确保着每个人将一大笔钱放在展台设置中，这样一来，组内的每个人将会感到为荣誉所系，将基于这种给定的原因而更多地进行社群参与，为社群做贡献。

一人一票机制（1P1V）的确有这样的问题，但这还不算大问题，毕竟存在一个天然的上限，使得每个人会在既定的组别中投票，这样我们还是可以通过最大限度地简化投票，来试图让每一个人接近这个上限（其实最极端的做法无非是强制投票，但是你可以通过降低成本来获取大多数收益。举例来说，让人们获得更多和专业素质更优的投票站，以及把投票日设为假日，都是契合这一要求的做法）。有了二次投票/自由激进模式，再加上我先前提到过的技术应用，系统内的各个小组就会带着原来的两倍好的能力，去追求他们的目标，就能得到原来两倍的效率。对我而言，我觉得这种潜在的扭曲水平非常骇人。

&lt;br/&gt;

***２.社会性动机的角色***

社会性动机的角色：对经济学比较大的批判在于，人类有很多种动机，这些动机不得不以直接且具体的方式，来参与到与他者所共有的关系的构建过程中；这些动机包括分化、归属、公正、主导、对抗屈服，等等。种种动机使得经济学充满着问题，因为这些动机意味着人们甚至在不用暴力和欺诈的情况下，依旧有大量的机会互相施加负外部性（举个例子：我买一件时髦的衣服、设计精致的网站或者大学文凭，这些会使得我更令人尊敬受到更多人的青睐，但是注意力是有零和博弈属性的，因此这样子会让人们更少注意到你）。这样一来，着眼于最优解的数学证明，会以潜在的形式，错误地预设了没有人可能制造这样大量的外部性。然而在这种数学证明存在这一预设和缺失的境况下，这些机制的内在结构依旧可以为人所窥见（再比如，人们在了解到他们赚得比同事少很多的情况下，他们会感到沮丧）。

经济层面的宏大意识形态希望自己对引导社会有用，那就应该具备这样一些概念：这些概念是用来说明经济领域同其它的社会领域的互动形式的。既然如此，有如下问题亟待考虑：在具备着各种激进的市场观念的案例中，要如何做到这一点呢？激进市场观念介入到（经济领域和其它社会生活领域的互动）了吗？我们可以通过使得投票和贡献活动变得私密和不可证明来回避这些问题的大多数吗？社会动机可以被相得益彰地充分利用，从而让激进的市场观念做得更好吗？这是在真实而即时的现场试验中，我们才能真切体会得到的东西吗？

&lt;br/&gt;

***３.理性忽视和非理性（的二元关系）*** 





&lt;center&gt;&lt;img src=&quot;https://i.ibb.co/NrRLfrM/rxc4-8932b3a360.jpg&quot; /&gt;&lt;/center&gt;





理性忽视和非理性（的二元关系）：布莱恩·卡普兰（Bryan Caplan）的论述基本上是这样的：人们的投票对社会的影响不可忽视，以至于就算是那些有待学习领会的投票方式能在实际上将他们所关切的问题放大到最大程度，他们也基本上没有什么动机去学习领会投票的方式。相信这一点，并不以相信原子主义的自私品质为条件；包含了社会性动机的事物有这样的属性：就算是社会性动机存在，它们和在很大意义上富有意义而又稳定自洽的道德体系是极其无关的。

例如，如果一个堪萨斯农民相信苹果是扁的，他会因此为农事所困；但是对于是否应该相信人为因素所导致的全球气候变暖这个问题，他将会带着为人的天性去做出决定。他在这件事情上的最终态度更可能取决于人性的欲望，以使他融合到他的朋友群体中，而非取决于和真相的直接联系。

我所理解的是，如果从数学层面看待，这一问题在二次方投票/自由激进机制中会比在常规投票中还小，毕竟人们可以走向专业化，而且当人们在引导事情发生中扮演了更显著的角色时，人们可以更加轻松容易地明白具体变化所产生的结果。然而，正如你们所倡导的，如果类投票机制会在社会中扮演更重要的角色，那么为了应对范围已经扩大了的问题，这种改进对于解决这些问题的力道足够吗？

我想，在具备更多符合风险共担原则要素的情境下，审视各种治理提议将会是引人入胜的事情。这个也是我喜欢你对移民入境检查的提议的部分原因。这些提议包括：如果受赞助的移民犯了罪，移民赞助者应该被罚款。

&lt;br/&gt;

***４.物质性权力中心化的效果***

物质权力中心化的效果：当涉及到那些更复杂的专利权系统时，有一点令我感到害怕：这些系统要求更复杂的中心化基础设施，就包括对个人隐私活动的监视，而且还要求这些主张能够正确无虞地生效实施。税收也已经有了这样的问题（不妨回忆一下亚当·斯密对收入税不可能性的论述，因为他相信：为了让收入税有强制性，这些收入税就会依赖于某一对私人生活的入侵水准，而且这一入侵水准是令人难以接受的）。基于这一考量，我还想知道的是：我们已有的各种提议，一旦用于改变这些问题，将会使得情况变得更糟糕还是更好。

尽管我在其它的情形下会有所顾虑，但我还是青睐哈柏格（Haberger）式的税收，因为这些税收不要求基础设施去监视是否存在未经申报的交易。比如，你曾评论到：你对移民入境检查的提议将可能会要求移民规则在实施进程中更具强制力，从现实角度看就意味着要通过更强劲的努力，来搜寻并驱逐那些逾期居留的人，这当然要求大量且多样的监视。

总而言之，我并不觉得激进市场理念会在总体上进展糟糕。但是，我的评论将会是：和现实的情况比较，不依赖于全景敞视显然应该是在更深程度上解燃眉之急的事情。








&lt;br/&gt;

### Glen Weyl

总而言之，我的视角是：这些议题不错，而且我有意将增加一些我本人的想法，但是我不把其中的任何一点看作是一种阻碍因素。也就是说，在短期内它们对”激进ｘ变革“模式的试探性实施构不成阻碍……对于学习体会新思想和为日后的增益改进打基础而言，这些议题看上去不错。

1.我觉得这些议题在围绕着共谋和协作两点时，共同构成了某一关键的议题。在任何情况下，这些议题都很关键，而并不只是在二次方投票/自由激进模式下才显得关键。它们是如此关键，以至于可以成为“自然的法则”（类似于人们可以在不多于X人的群组中进行协调）。我觉得通过对功能的适应活动，我们可以解决这些问题。有一个问题在于，人们的协调能力是非常多变的，也是偶然的；并且这些活动，包括从亲缘关系到宗教活动都要动用一系列的机制。对于我来说，我感觉两次投票/自由激进的路径有一种优势：它至少能够讲清楚什么是最优性；在跨群组协作的论域内，应该避免什么。

 在我们当前的由一人一票和资本主义混合构成制度下，协调活动并不是没有批判性的，也并不是一成不变拘泥于一格的。我要主张的是：激励合作、建设网络、塑造阶层的团结等等这一切依赖于能力；源自能力的每个因素就是在按照这种方式，来扮演它的角色；而且，每个因素都是权力的初始来源。但是，系统是非常不清晰的，以至于我们缺乏去相信这些事情的理由：我们正在离最优解越来越近的情势中；或者是存在着清晰明确的方法，来推动我们去追求最优解。 如果存在一个系统，能使得最优解以外部坐标为模，那么这似乎是一个方向正确的步骤，但是这将会要求增加工作量：要么为了破坏系统外部的协调，要么为了增进对系统的理解而追求系统内部的平衡。



2.尽管我事先没有同你提及过，但毋庸置疑的是：这是一个非常关键的要点，也是我正在从事工作的焦点。在和二次方投票/自由激进模式相关的问题上，我的确不觉得这是一个主要的问题。从根本上而言，我有一点就是不太明白：为什么在二次方投票/自由激进的语境下，秘密投票会使得事情更糟糕，或者是会让事情得不到妥善处理。就实际情况来看，也就是从投票制度虽然存在，但亟待完善的这一语境来看，现今对紧张情形的偏好，例如示威抗议，显得更为糟糕。如果存在着私人的方式，来处理这些事务，那么这似乎是一个很大的进步。

然而，就我正在做的研究来看，我觉得可以为信号理论所摄取的因素就算不是全部，也很多了。有这样一种对信号理论的方案，几乎总是为人所忽略的，那就是主张信号活动应该被课税。对SAT分数课税，对标准的白人流行的英语课税，等等。这一政策方案似乎执行起来有点困难（就算是我们在算法学方法上取得了进展，但毕竟你需要去衡量各种位阶外部性），但是如果可行的话，这样做看起来完全良好并且非常激进。这将会增进效率，重新就以某种方式人们常言的“特权”进行再分配（比如“白人特权”）——这种方式恰恰是某些左右翼人士的呼吁，虽然他们来源于各种各样的文化范式，彼此之间又不相融，但是他们要求的方式和前文对“特权”进行再分配的方式恰恰如出一辙。在社会学领域，有一种能力叫做“文化资本”，这种能力根据你的战略性优势，被用来理解应付意义制造系统。我和Kadeem Noray在共同合作撰写一篇涉及此问题的学术论文，论文的名字叫《文化差异信号理论》，也在共同撰写一本题目为《有效的文化资本税》的白皮书。如果你对此有兴趣不妨告诉我。



3.还有另一个在我们的工作中没有被涉及到的要点，但是我决不相信，在当前现状下存在的机构会将这些事情处理得更好。基本上来看，因为这一话题，你不能拥有很多东西，比如直接民主制,或者是对“集团”直接民主式控制。你需要更多的中枢性群组来应对这一挑战。相对于信息集聚的异质性，信息获取存在一种弹性，而且凝聚集中化的最优程度取决于这种弹性。与此同时，我觉得在这一问题上没有独一无二的解决方式。也正因为如此，我对某种类“流动性民主”系统（尽管不是流动性民主本身）有着强烈的偏好，这种类型系统允许最优的组织自总体中有机涌现。

我的确相信，自由激进模式大概将会引致我前面所说的情形，理性忽视将会为有组织的规模经济提供一个确切的根据，也会为我反对包括数据管理问题在内的全中心化框架提供确切的理由。然而，依然会有会有更多的研究亟待完成，来解决这两个问题：信息联合获取的问题，以及通过信息联合获取将事物结构化的方法。还让我产生疑虑的判断是，“终极算法”依然存在。不妨从事物的另一面思考一下，虽然情况会因具体情形而异，我们还是应该坚持一种一劳永逸式的结构，像议会制度或者总统制度。此外，哪怕资本主义机制已经体现出它效率不充分的特征，以至于这种情况会任由某个暴君能够凭借其主导地位争夺大量资源，我们还是有必要明确地坚持这样一种机制。我觉得自由激进理念在处理这种问题上表现良好，但是我们还是要观察后效。



4.我对最后一点（Vitalik对物理性权力的论述）强烈认同（尽管我觉得物理权力的内在含义非常微妙，接下来我会谈这一点）。再重复一遍，实际上我觉得全面的激进市场（overall RM）主张会改进这方面问题，但是改进的程度还不够。我开始逐渐倾向于认同哲学家丹尼尔·艾伦（Danielle Allen ）的多元公民主义（polypolitanism），也是基于这样的上述理由。激进自由的原则也支持该项主张。

想象一下，我们已经具备了激进自由，并使之成为全球性原则，但是我们具备的一大波多元社群遍布于不同的层次，有着不同程度的力量和出资能力，并且在做各式各样的事情。人们可以不再为地理因素所限制， 来为社群做贡献到或者加入到这些社群中。当每一个社群具备了某种强制力时，一定量的强制力也会是社会性的。原因在于：在系统性的终极规则被视为合法的情况下，一旦有人被认为在破坏规则，他周围的其他人会要求这些逾越规则的人接受规则（这和Harberger的设计一致），乃至周围的人会受到这样做的激励。这一点可能在移民系统问题上更真确;我们或许有必要对此考虑一下。

然而在这一多元公民的世界, 合乎情理的移民系统可能会比我在书中探讨到的有更丰富的内涵，毕竟，这将会牵扯到几种不同的治理／集群的组织方式。确切地讲，它的外表特征和它运行的方式都需要经过很多努力来搞清楚，但是我想，最终它所指向的是这样一种境况：“中心的权威”观念基本上被瓦解了。这个世界上，中心的权威不复存在。特别地，把民族国家和那种“中心的权威”看作是相似类同的，这是不合理的近似估计。问题的关键在于，我们有很多历史遗留下来的制度，但是它们的适应能力是有问题的，以至于我们需要一种更灵活的态度，在广义范围上的各个层次的组织，去参与建设和解构。

但是，无论在任何情势下，“物理性权力”都是一个非常复杂而且意义模糊的概念。如果希特勒告诉某些人去做某事，他们会如此行动，不是因为希特勒有任何的物理性权力，而是基于他们的预期：这种预期解释了如果他们不去遵守，其他人将会如何做。在这一意义下，每一个社会组织都是一个泡沫。继而，这使得区块链和区块链危及合法性的争论两者息息相关，并且引人入胜。

让我再补充一条我觉得是至关重要的问题。目前我仍在努力寻找这个问题的解决对策，还会加大研究力度。当下存在这样一个想法，认为应该通过共有产权自行估值税收（COST,common ownership self-accessing tax）分配资金，并将资金作为社会红利。我认为这样的想法不够明确，完全是杂牌拼装货，是很危险的。举个例子想象一下：一个社群可以影响到个体的估值行为，并且比起该社群或者内部的某一成员希望从当前的所有者手中所购买到的份额，这个社群实际上具备着更多（或更少）的份额；或者是社群的内部成员想从现有的份额所有者手中买到资产。这就会导致社群想让社群成员往高（或往低）报价，就会引起潜在的勾连问题，而且这个问题也是你所提到过的。

总而言之，对于我而言，所有权的份额需要尽可能地跨社群或者在个体间多加配置，并要和某种概率形成适当的比例——这个概率是一个令个体或者社群最终成为有效率的（从折价现值层面讲）所有者的概率。自然地，在流向个体的资金流多变而不均衡，公共产品集资活动在社群内部和社群层面活动的条件下，这会引发流向个体的资金流和公共产品集资过程结合，也就可以避免扎伦(Jaron)表示过的对中心同质式资金流的忧虑——这一顾虑也是我多次分享的。这样做也有利于提高效率，减少陷入极权主义的风险，也就是更稳健了。如何把所有内容详细列举出并且让这样的想法投入运作，依然是非常磨人的。精致的类同性结论似乎应该在不远处的地方，但是我还没有完成这一环节。无论如何，我觉得从长远发展角度来看，这一点很重要。

最终，通过持续几周的学术议论，这一话题终于进入了更为广泛的领域。就在最近我感受和意识到了——特别是伴随着自由激进主义，我感受到了一点并且在这一点上做出突破：一个内部衔接性如此之强，以至于所有的未成熟的领域都凝聚在一起的政治经济学框架。伴随着这一框架的产生，不但这些未发展成熟的领域可以凝聚在一个框架里面，而且在当下，它们理论基础的失败可以因此显得清晰透彻。

 基本上看，自由激进（连同信号议题）强调了：当前经济话语，连同着它的极端个人主义的视野，都是不可救药的。也就是说当前的经济话语并没有反映出每一种组织社会生活的方式；我们所生活的社会，是一个这样的社会：在这个社会里面，几乎所有东西都至少有一部分产生于回报性增长科技（从家庭到教会、网络、政府、企业等等都是这样）。经济学却承担了基础性和初始性功能，它指向着全然个人主义的视角，而这种视角只在在收益递减情况下才行得通。一旦面临着收益增长的情形，它只能诉诸市场的力量或者其它的低效杂牌因素。这一传统的理论框架是不太合理的，一旦你用这种方式审视事务的话，我们就会用经济学对各种标准化的问题抄不应该抄的近道。

就最近的几个星期，我都在和经济学家、社会学家和哲学家在讨论，感觉好像在用一把折叠刀穿越一片森林。这一视角使我能够从更广泛的角度看待问题（虽然事物的本来面目依然模糊），并且就像是有了一众任我指挥的伐木队伍。令人感到庆幸的事情是，你不需要过于脱离经济学的形式主义风格，只要把问题放在合乎逻辑的结论里面，然后在基础且实质的地方作结。这一终结之处，也恰恰是很长一段时间内，许多社会学家、人类学家和政治科学家曾经去过的地方。

但是，这样的理论框架，则既缺少了匹配、衡量的能力，也缺乏适度进行发明创造或描述说明的能力，因为它们不够讲求形式主义。就算是特定的激进市场观念存在一些缺陷，需要纠正，我也真诚地相信：我们在推动一种强大而全面的政治经济观，并且这种观念和新自由主义的范式有所不同。这就好比边际革命虽然来源于过去，但却能够和过去的理论平行存在。基本上，前边际革命范式曾依赖于线性生产函数，并没有容纳边际量大于平均量的情况，因此也不能处理利润的问题。但是机缘巧合的是，边际量小于平均量（公共物品）的情况也一度丢失了，一个核心的理论问题也继而形成了，我们可以在实际层面上强调一下这一点。这个恰好是George和Walras在追寻的议题。我觉得我们现在可以真正把握这个话题。







&lt;br/&gt;

### Vitalik Buterin

在处理规模报酬增长的情形方面，自由主义表现不佳——这绝对是一个好的想法。同时我要在更广义层面上主张：基于均衡、部分最优、导数的经济学，在多元均衡问题以及协调性问题的情景中，没有提供很好的应对思路。

面对着存在规模报酬增长的活动时，要不要开始从事这样的活动，这只是在若干模式中的一个例子。增加或者减少公共假日（正如节假日时间会在你与你的朋友们同时都处于休假的情况下变得更有价值），调整变更时区，将一些语言的不规则动词规则化等，都属于类似的问题。具备更强大社会配置，以达成那些种类的共识，仿佛是非常有价值的。如果对用于中心控制的节点没有要求，建好这些配置，也似乎很有价值。这两者似乎很有价值的原因在于，中心机制的控制可能被滥用，而且还在于有的时候（例如可以想一想那些跨机构和跨国的协议标准）不存在一个可以在特定的任务中胜任的中心权威。

&lt;br/&gt;

&lt;br/&gt;

声明：ECN的翻译工作旨在为中国以太坊社区传递优质资讯和学习资源，文章版权归原作者所有，转载须注明原文出处以及ethereum.cn，若需长期转载，请联系ethereumcn@gmail.com进行授权。</content:encoded></item></channel></rss>