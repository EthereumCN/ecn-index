{"version":3,"sources":["webpack:///./src/template/stakingCategory.js","webpack:///./src/components/seo.js"],"names":["Category","props","siteMetadata","data","site","childrenImageSharp","file","title","titleTemplate","description","image","fixed","src","pathname","path","siteLanguage","siteLocale","twitterUsername","author","publishedDate","lastBuildDate","modifiedDate","Date","now","toISOString","mb","w","maxW","mx","pt","mt","color","as","Link","to","isCurrentPage","fontSize","fontFamily","borderColor","allStrapiArticles","nodes","map","value","index","key","SEO","lang","meta","useStaticQuery","metaDescription","htmlAttributes","name","content","property","concat","defaultProps"],"mappings":"8FAAA,4IAoEeA,UA1DE,SAACC,GAChB,IAAOC,EAAgBD,EAAME,KAAKC,KAA3BF,aACAG,EAAsBJ,EAAME,KAAKG,KAAjCD,mBACP,OACE,kBAAC,IAAD,KACO,kBAAC,IAAD,CACHE,MAAM,UACNC,cAAeN,EAAaK,MAC5BE,YAAaP,EAAaO,YAC1BC,MAAO,sBAAsBL,EAAmB,GAAGM,MAAMC,IACzDC,SAAU,sBAAsBZ,EAAMa,KACtCC,aAAcb,EAAaa,aAC3BC,WAAYd,EAAac,WACzBC,gBAAiBf,EAAae,gBAC9BC,OAAQhB,EAAagB,OACrBC,cAAejB,EAAakB,cAC5BC,aAAc,IAAIC,KAAKA,KAAKC,OAAOC,gBAErC,kBAAE,IAAF,CAAMC,GAAG,QACT,kBAAC,IAAD,CACEC,EAAE,OACFC,KAAM,KACNC,GAAG,OAEHC,GAAI,CAAC,OAAQ,OAAQ,OAAQ,QAC7BC,GAAG,OAIT,kBAAC,IAAD,CAAYC,MAAM,OAAOD,GAAG,OAAOL,GAAG,QAChC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAgBO,GAAIC,OAAMC,GAAG,KAA7B,OAGF,kBAAC,IAAD,CAAgBC,eAAa,GAC3B,kBAAC,IAAD,CAAgBH,GAAIC,OAAMC,GAAG,KAA7B,QAGF,kBAAC,IAAD,CAASE,SAAS,SAASC,WAAW,qBAAqBN,MAAM,QAAjE,MAGA,kBAAC,IAAD,CAASL,EAAE,OAAQY,YAAY,OAAOR,GAAG,MAAMF,GAAG,UAGnD3B,EAAME,KAAKoC,kBAAkBC,MAAMC,KAAI,SAACC,EAAOC,GAAR,OACtC,kBAAC,IAAD,CAAUD,MAAOA,EAAOE,IAAKD,OAGrC,kBAAC,IAAD,CAAKb,GAAG,QAEN,kBAAC,IAAD,CAAU7B,MAAOA,S,kCC5DnB,iDAYA,SAAS4C,EAAT,GAAkD,IAAnCpC,EAAkC,EAAlCA,YAAaqC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMxC,EAAS,EAATA,MAC9BH,EAAS4C,yBAAe,YAAxB5C,KAcF6C,EAAkBxC,GAAeL,EAAKF,aAAaO,YAEzD,OACE,kBAAC,IAAD,CACEyC,eAAgB,CACdJ,QAEFvC,MAAOA,EACPC,cAAa,QAAUJ,EAAKF,aAAaK,MACzCwC,KAAM,CACJ,CACEI,KAAK,cACLC,QAASH,GAEX,CACEI,SAAS,WACTD,QAAS7C,GAEX,CACE8C,SAAS,iBACTD,QAASH,GAEX,CACEI,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAAShD,EAAKF,aAAagB,QAE7B,CACEiC,KAAK,gBACLC,QAAS7C,GAEX,CACE4C,KAAK,sBACLC,QAASH,IAEXK,OAAOP,KAKfF,EAAIU,aAAe,CACjBT,KAAK,KACLC,KAAM,GACNtC,YAAY,IAUCoC","file":"component---src-template-staking-category-js-e509372b8cfb86c37b7d.js","sourcesContent":["import React from \"react\"\nimport {  Box, Heading, Divider, Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,  } from \"@chakra-ui/core\"\n  import { Link } from \"gatsby\"\nimport SEO from \"../components/seo\"\nimport EachList from \"../components/eachList\"\nimport { graphql } from 'gatsby' \nimport Layout from \"../components/layout\"\nimport  Paginate from '../components/Paginate'\nconst Category = (props) => {\n  const {siteMetadata} = props.data.site\n  const {childrenImageSharp} = props.data.file\n  return (\n    <Layout >\n           <SEO\n        title=\"Staking\"\n        titleTemplate={siteMetadata.title}\n        description={siteMetadata.description}\n        image={'https://ethereum.cn'+childrenImageSharp[0].fixed.src}\n        pathname={'https://ethereum.cn'+props.path}\n        siteLanguage={siteMetadata.siteLanguage}\n        siteLocale={siteMetadata.siteLocale}\n        twitterUsername={siteMetadata.twitterUsername}\n        author={siteMetadata.author}\n        publishedDate={siteMetadata.lastBuildDate}\n        modifiedDate={new Date(Date.now()).toISOString()}\n      />\n      < Box mb=\"30vh\">\n      <Box\n        w=\"100%\"\n        maxW={1080}\n        mx=\"auto\"\n       \n        pt={[\"20px\", \"20px\", \"50px\", \"40px\"]}\n        mt=\"2vw\"\n      >\n\n          {/* Breadcrumb */}\n  <Breadcrumb color=\"#fff\" mt=\"4rem\" mb=\"2rem\">\n        <BreadcrumbItem>\n          <BreadcrumbLink as={Link} to=\"/\">首页</BreadcrumbLink>\n        </BreadcrumbItem>\n\n        <BreadcrumbItem isCurrentPage>\n          <BreadcrumbLink as={Link} to=\"#\">质押</BreadcrumbLink>\n        </BreadcrumbItem>\n      </Breadcrumb>\n        <Heading fontSize=\"2.5rem\" fontFamily=\"NotoSansSC-Regular\" color=\"#fff\">\n        质押\n        </Heading>\n        <Divider w=\"100%\"  borderColor=\"#ddd\" mt=\"1vw\" mx=\"auto\" />\n      </Box>\n     \n      {props.data.allStrapiArticles.nodes.map((value, index) => (\n        <EachList value={value} key={index} />\n      ))}\n\n<Box mt=\"6rem\">\n  \n  <Paginate props={props}/>\n</Box>\n      </Box>\n  \n    </Layout>\n  )\n}\n\nexport default Category\n\nexport const pageQuery = graphql`\n  query staking($skip: Int!, $limit: Int!) {\n    allStrapiArticles(\n      skip: $skip\n      limit: $limit\n      sort: {fields: publishDate, order: DESC}\n      filter: { mainTag: { eq: \"Staking\" } }\n    ) {\n      nodes {\n        id\n        path\n        title\n        author\n        summary\n        authorImg {\n          childImageSharp {\n            fixed(width: 25, height: 25) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        publishDate(formatString: \"YYYY-MM-DD\")\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1000, maxHeight: 450) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        keywords\n        siteLanguage\n        siteLocale\n        siteUrl\n        twitterUsername\n      }\n    }\n    file(name: {eq: \"hero\"}) {\n      childrenImageSharp {\n        fixed {\n          src\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}