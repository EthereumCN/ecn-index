{"version":3,"sources":["webpack:///./src/template/announcementCategory.js","webpack:///./node_modules/react-seo-component/dist/react-seo-component.esm.js"],"names":["Category","props","siteMetadata","data","site","childrenImageSharp","file","title","titleTemplate","description","image","fixed","src","pathname","path","siteLanguage","siteLocale","twitterUsername","author","publishedDate","lastBuildDate","modifiedDate","Date","now","toISOString","mb","w","maxW","mx","pt","mt","color","as","Link","to","isCurrentPage","fontSize","fontFamily","borderColor","allStrapiArticles","nodes","map","value","index","key","Facebook","_ref","url","type","desc","locale","createElement","property","content","Twitter","_ref$type","username","name","titleSeparator","_ref$article","article","_ref$author","datePublished","dateModified","seo","slice","copyrightYear","getFullYear","schemaOrgWebPage","headline","inLanguage","mainEntityOfPage","copyrightHolder","creator","publisher","itemListElement","item","position","schemaArticle","logo","push","breadcrumb","Fragment","lang","rel","href","JSON","stringify"],"mappings":"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","file":"component---src-template-announcement-category-js-1762ab34419aeea7a1aa.js","sourcesContent":["import React from \"react\"\nimport {  Box, Heading, Divider, Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,  } from \"@chakra-ui/core\"\n  import { Link } from \"gatsby\"\nimport SEO from 'react-seo-component'\nimport EachList from \"../components/eachList\"\nimport { graphql } from 'gatsby' \nimport Layout from \"../components/layout\"\nimport  Paginate from '../components/Paginate'\nconst Category = (props) => {\n\n\n  const {siteMetadata} = props.data.site\n  const {childrenImageSharp} = props.data.file\n\n\n  return (\n    <Layout >\n           <SEO\n        title=\"通告\"\n        titleTemplate={siteMetadata.title}\n        description={siteMetadata.description}\n        image={'https://ethereum.cn'+childrenImageSharp[0].fixed.src}\n        pathname={'https://ethereum.cn'+props.path}\n        siteLanguage={siteMetadata.siteLanguage}\n        siteLocale={siteMetadata.siteLocale}\n        twitterUsername={siteMetadata.twitterUsername}\n        author={siteMetadata.author}\n        publishedDate={siteMetadata.lastBuildDate}\n        modifiedDate={new Date(Date.now()).toISOString()}\n      />\n      < Box mb=\"30vh\">\n      <Box\n        w=\"100%\"\n        maxW={1080}\n        mx=\"auto\"\n        \n        pt={[\"20px\", \"20px\", \"50px\", \"40px\"]}\n        mt=\"2vw\"\n      >\n  {/* Breadcrumb */}\n  <Breadcrumb color=\"#fff\" mt=\"4rem\" mb=\"2rem\">\n        <BreadcrumbItem>\n          <BreadcrumbLink as={Link} to=\"/\">首页</BreadcrumbLink>\n        </BreadcrumbItem>\n\n        <BreadcrumbItem isCurrentPage>\n          <BreadcrumbLink as={Link} to=\"#\">通告</BreadcrumbLink>\n        </BreadcrumbItem>\n      </Breadcrumb>\n\n        <Heading fontSize=\"2.5rem\" fontFamily=\"NotoSansSC-Regular\" color=\"#fff\">\n        通告\n        </Heading>\n        <Divider w=\"100%\"  borderColor=\"#ddd\" mt=\"1vw\" mx=\"auto\" />\n      </Box>\n      \n      {props.data.allStrapiArticles.nodes.map((value, index) => (\n        <EachList value={value} key={index} />\n      ))}\n\n<Box mt=\"6rem\">\n          <Paginate props={props} />\n        </Box>\n      </Box>\n  \n    </Layout>\n  )\n}\n\nexport default Category\n\nexport const pageQuery = graphql`\n  query announcement($skip: Int!, $limit: Int!) {\n    allStrapiArticles(\n      skip: $skip\n      limit: $limit\n      sort: {fields: publishDate, order: DESC}\n      filter: { mainTag: { eq: \"Announcement\" } }\n    ) {\n      nodes {\n        id\n        path\n        title\n        author\n        summary\n        authorImg {\n          childImageSharp {\n            fixed(width: 25, height: 25) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n        publishDate(formatString: \"YYYY-MM-DD\")\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1000, maxHeight: 450) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        keywords\n        siteLanguage\n        siteLocale\n        siteUrl\n        twitterUsername\n      }\n    }\n    file(name: {eq: \"hero\"}) {\n      childrenImageSharp {\n        fixed {\n          src\n        }\n      }\n    }\n  }\n`\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nvar Facebook = function Facebook(_ref) {\n  var url = _ref.url,\n      type = _ref.type,\n      title = _ref.title,\n      desc = _ref.desc,\n      image = _ref.image,\n      locale = _ref.locale;\n  return React.createElement(Helmet, null, React.createElement(\"meta\", {\n    property: \"og:locale\",\n    content: locale\n  }), React.createElement(\"meta\", {\n    property: \"og:url\",\n    content: url\n  }), React.createElement(\"meta\", {\n    property: \"og:type\",\n    content: type\n  }), React.createElement(\"meta\", {\n    property: \"og:title\",\n    content: title\n  }), React.createElement(\"meta\", {\n    property: \"og:description\",\n    content: desc\n  }), React.createElement(\"meta\", {\n    property: \"og:image\",\n    content: image\n  }), React.createElement(\"meta\", {\n    property: \"og:image:alt\",\n    content: desc\n  }));\n};\n\nvar Twitter = function Twitter(_ref) {\n  var _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'summary_large_image' : _ref$type,\n      username = _ref.username,\n      title = _ref.title,\n      desc = _ref.desc,\n      image = _ref.image;\n  return React.createElement(Helmet, null, username && React.createElement(\"meta\", {\n    name: \"twitter:creator\",\n    content: username\n  }), React.createElement(\"meta\", {\n    name: \"twitter:card\",\n    content: type\n  }), React.createElement(\"meta\", {\n    name: \"twitter:title\",\n    content: title\n  }), React.createElement(\"meta\", {\n    name: \"twitter:description\",\n    content: desc\n  }), React.createElement(\"meta\", {\n    name: \"twitter:image\",\n    content: image\n  }), React.createElement(\"meta\", {\n    name: \"twitter:image:alt\",\n    content: desc\n  }));\n};\n\nvar SEO = function SEO(_ref) {\n  var title = _ref.title,\n      titleTemplate = _ref.titleTemplate,\n      titleSeparator = _ref.titleSeparator,\n      description = _ref.description,\n      pathname = _ref.pathname,\n      _ref$article = _ref.article,\n      article = _ref$article === void 0 ? false : _ref$article,\n      image = _ref.image,\n      siteLanguage = _ref.siteLanguage,\n      siteLocale = _ref.siteLocale,\n      twitterUsername = _ref.twitterUsername,\n      _ref$author = _ref.author,\n      author = _ref$author === void 0 ? 'J Doe.' : _ref$author,\n      datePublished = _ref.datePublished,\n      dateModified = _ref.dateModified;\n  var seo = {\n    title: title.slice(0, 70),\n    description: description.slice(0, 160),\n    datePublished: datePublished ? null : new Date(Date.now()).toISOString(),\n    dateModified: dateModified ? null : new Date(Date.now()).toISOString()\n  };\n  var copyrightYear = new Date().getFullYear(); // schema.org in JSONLD format\n  // https://developers.google.com/search/docs/guides/intro-structured-data\n  // You can fill out the 'author', 'creator' with more data or another type (e.g. 'Organization')\n  // Structured Data Testing Tool >>\n  // https://search.google.com/structured-data/testing-tool\n\n  var schemaOrgWebPage = {\n    '@context': 'http://schema.org',\n    '@type': 'WebPage',\n    url: pathname,\n    headline: seo.description,\n    inLanguage: siteLanguage,\n    mainEntityOfPage: pathname,\n    description: seo.description,\n    name: seo.title,\n    author: {\n      '@type': 'Person',\n      name: author\n    },\n    copyrightHolder: {\n      '@type': 'Person',\n      name: author\n    },\n    copyrightYear: copyrightYear,\n    creator: {\n      '@type': 'Person',\n      name: author\n    },\n    publisher: {\n      '@type': 'Person',\n      name: author\n    },\n    datePublished: seo.datePublished,\n    dateModified: seo.dateModified,\n    image: {\n      '@type': 'ImageObject',\n      url: \"\" + image\n    }\n  }; // Initial breadcrumb list\n\n  var itemListElement = [{\n    '@type': 'ListItem',\n    item: {\n      '@id': pathname,\n      name: 'Homepage'\n    },\n    position: 1\n  }];\n  var schemaArticle = null;\n\n  if (article) {\n    schemaArticle = {\n      '@context': 'http://schema.org',\n      '@type': 'Article',\n      author: {\n        '@type': 'Person',\n        name: author\n      },\n      copyrightHolder: {\n        '@type': 'Person',\n        name: author\n      },\n      copyrightYear: copyrightYear,\n      creator: {\n        '@type': 'Person',\n        name: author\n      },\n      publisher: {\n        '@type': 'Organization',\n        name: author,\n        logo: {\n          '@type': 'ImageObject',\n          url: \"\" + image\n        }\n      },\n      datePublished: seo.datePublished,\n      dateModified: seo.dateModified,\n      description: seo.description,\n      headline: seo.title,\n      inLanguage: siteLanguage,\n      url: pathname,\n      name: seo.title,\n      image: {\n        '@type': 'ImageObject',\n        url: image\n      },\n      mainEntityOfPage: pathname\n    }; // Push current blog post into breadcrumb list\n\n    itemListElement.push({\n      '@type': 'ListItem',\n      item: {\n        '@id': pathname,\n        name: seo.title\n      },\n      position: 2\n    });\n  }\n\n  var breadcrumb = {\n    '@context': 'http://schema.org',\n    '@type': 'BreadcrumbList',\n    description: 'Breadcrumbs list',\n    name: 'Breadcrumbs',\n    itemListElement: itemListElement\n  };\n  return React.createElement(React.Fragment, null, React.createElement(Helmet, {\n    title: seo.title,\n    titleTemplate: \"%s \" + (titleSeparator ? titleSeparator : \"\\xB7\") + \" \" + titleTemplate\n  }, React.createElement(\"html\", {\n    lang: siteLanguage ? siteLanguage : 'en'\n  }), React.createElement(\"link\", {\n    rel: \"canonical\",\n    href: pathname\n  }), React.createElement(\"meta\", {\n    name: \"description\",\n    content: seo.description\n  }), !article && React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(schemaOrgWebPage)), article && React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(schemaArticle)), React.createElement(\"script\", {\n    type: \"application/ld+json\"\n  }, JSON.stringify(breadcrumb))), image && React.createElement(React.Fragment, null, React.createElement(Facebook, {\n    desc: seo.description,\n    image: image,\n    title: seo.title,\n    type: article ? 'article' : 'website',\n    url: pathname,\n    locale: siteLocale ? siteLocale : 'en_gb'\n  }), React.createElement(Twitter, {\n    title: seo.title,\n    image: image,\n    desc: seo.description,\n    username: twitterUsername\n  })));\n};\n\nexport default SEO;\nexport { Facebook, Twitter };"],"sourceRoot":""}